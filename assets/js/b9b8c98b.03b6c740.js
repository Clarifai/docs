"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[612],{2804:(e,n,t)=>{t.d(n,{A:()=>o});const o=t.p+"assets/images/collector-12-3b8edce10ea4a9a6cfbddba298aef95e.png"},10890:(e,n,t)=>{t.d(n,{A:()=>o});const o=t.p+"assets/images/collector-7-b49f3d00dc125b2f5a8842f564ab943f.png"},11470:(e,n,t)=>{t.d(n,{A:()=>P});var o=t(96540),s=t(18215),r=t(17559),a=t(23104),i=t(56347),l=t(205),c=t(57485),_=t(31682),u=t(70679);function d(e){return o.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,o.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function p(e){const{values:n,children:t}=e;return(0,o.useMemo)(()=>{const e=n??function(e){return d(e).map(({props:{value:e,label:n,attributes:t,default:o}})=>({value:e,label:n,attributes:t,default:o}))}(t);return function(e){const n=(0,_.XI)(e,(e,n)=>e.value===n.value);if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[n,t])}function E({value:e,tabValues:n}){return n.some(n=>n.value===e)}function h({queryString:e=!1,groupId:n}){const t=(0,i.W6)(),s=function({queryString:e=!1,groupId:n}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,c.aZ)(s),(0,o.useCallback)(e=>{if(!s)return;const n=new URLSearchParams(t.location.search);n.set(s,e),t.replace({...t.location,search:n.toString()})},[s,t])]}function R(e){const{defaultValue:n,queryString:t=!1,groupId:s}=e,r=p(e),[a,i]=(0,o.useState)(()=>function({defaultValue:e,tabValues:n}){if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!E({value:e,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const t=n.find(e=>e.default)??n[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:r})),[c,_]=h({queryString:t,groupId:s}),[d,R]=function({groupId:e}){const n=function(e){return e?`docusaurus.tab.${e}`:null}(e),[t,s]=(0,u.Dv)(n);return[t,(0,o.useCallback)(e=>{n&&s.set(e)},[n,s])]}({groupId:s}),O=(()=>{const e=c??d;return E({value:e,tabValues:r})?e:null})();(0,l.A)(()=>{O&&i(O)},[O]);return{selectedValue:a,selectValue:(0,o.useCallback)(e=>{if(!E({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);i(e),_(e),R(e)},[_,R,r]),tabValues:r}}var O=t(92303);const I={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var C=t(74848);function D({className:e,block:n,selectedValue:t,selectValue:o,tabValues:r}){const i=[],{blockElementScrollPositionUntilNextRender:l}=(0,a.a_)(),c=e=>{const n=e.currentTarget,s=i.indexOf(n),a=r[s].value;a!==t&&(l(n),o(a))},_=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const t=i.indexOf(e.currentTarget)+1;n=i[t]??i[0];break}case"ArrowLeft":{const t=i.indexOf(e.currentTarget)-1;n=i[t]??i[i.length-1];break}}n?.focus()};return(0,C.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":n},e),children:r.map(({value:e,label:n,attributes:o})=>(0,C.jsx)("li",{role:"tab",tabIndex:t===e?0:-1,"aria-selected":t===e,ref:e=>{i.push(e)},onKeyDown:_,onClick:c,...o,className:(0,s.A)("tabs__item",I.tabItem,o?.className,{"tabs__item--active":t===e}),children:n??e},e))})}function f({lazy:e,children:n,selectedValue:t}){const r=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){const e=r.find(e=>e.props.value===t);return e?(0,o.cloneElement)(e,{className:(0,s.A)("margin-top--md",e.props.className)}):null}return(0,C.jsx)("div",{className:"margin-top--md",children:r.map((e,n)=>(0,o.cloneElement)(e,{key:n,hidden:e.props.value!==t}))})}function g(e){const n=R(e);return(0,C.jsxs)("div",{className:(0,s.A)(r.G.tabs.container,"tabs-container",I.tabList),children:[(0,C.jsx)(D,{...n,...e}),(0,C.jsx)(f,{...n,...e})]})}function P(e){const n=(0,O.A)();return(0,C.jsx)(g,{...e,children:d(e.children)},String(n))}},19365:(e,n,t)=>{t.d(n,{A:()=>a});t(96540);var o=t(18215);const s={tabItem:"tabItem_Ymn6"};var r=t(74848);function a({children:e,hidden:n,className:t}){return(0,r.jsx)("div",{role:"tabpanel",className:(0,o.A)(s.tabItem,t),hidden:n,children:e})}},23758:(e,n,t)=>{t.d(n,{A:()=>o});const o=t.p+"assets/images/collector-3-6c17bceaf73aacb157c4d3b8e0fee27e.png"},25872:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>q,contentTitle:()=>W,default:()=>M,frontMatter:()=>k,metadata:()=>o,toc:()=>$});const o=JSON.parse('{"id":"create/modules/examples/collectors","title":"Collectors","description":"Capture inputs used for making predictions in your app","source":"@site/docs/create/modules/examples/collectors.md","sourceDirName":"create/modules/examples","slug":"/create/modules/examples/collectors","permalink":"/create/modules/examples/collectors","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"description":"Capture inputs used for making predictions in your app","sidebar_position":1,"toc_max_heading_level":4},"sidebar":"tutorialSidebar","previous":{"title":"Modules Examples","permalink":"/create/modules/examples/"},"next":{"title":"OCR Evaluation Module","permalink":"/create/modules/examples/ocr-evaluation"}}');var s=t(74848),r=t(28453),a=t(11470),i=t(19365),l=t(88149);const c="###############################################################################\n# In this section, we set the user authentication, app ID, and details of the\n# collector we want to add. Change these strings to run your own example.\n###############################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to add your own collector\nCOLLECTOR_ID = 'YOUR_COLLECTOR_ID_HERE'\nCOLLECTOR_DESCRIPTION = 'YOUR_COLLECTOR_DESCRIPTION_HERE'\nPRE_QUEUE_WORKFLOW_ID = 'YOUR_PRE_WORKFLOW_ID_HERE'\nPOST_QUEUE_WORKFLOW_ID = 'YOUR_POST_WORKFLOW_ID_HERE'\nMODEL_ID = 'YOUR_MODEL_ID_HERE'\nMODEL_VERSION_ID = 'YOUR_MODEL_VERSION_ID_HERE' \nPOST_INPUTS_KEY_ID = 'YOUR_API_KEY_HERE'\nCALLER_USER_ID = 'YOUR_CALLER_USER_ID_HERE'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID) # The userDataObject is required when using a PAT\n\npost_collectors_response = stub.PostCollectors(\n    service_pb2.PostCollectorsRequest(\n        user_app_id=userDataObject,\n        collectors=[\n            resources_pb2.Collector(\n                id=COLLECTOR_ID,\n                description=COLLECTOR_DESCRIPTION,\n                pre_queue_workflow_id=PRE_QUEUE_WORKFLOW_ID,\n                post_queue_workflow_id=POST_QUEUE_WORKFLOW_ID,\n                collector_source=resources_pb2.CollectorSource(\n                    api_post_model_outputs_collector_source=resources_pb2.APIPostModelOutputsCollectorSource(\n                        model_user_id=USER_ID,\n                        model_app_id=APP_ID,\n                        model_id=MODEL_ID,\n                        model_version_id=MODEL_VERSION_ID,\n                        post_inputs_key_id=POST_INPUTS_KEY_ID,\n                        caller_user_id=CALLER_USER_ID\n                    )\n                )\n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif post_collectors_response.status.code != status_code_pb2.SUCCESS:\n    print(post_collectors_response.status)   \n    raise Exception(\"Post collectors failed, status: \" + post_collectors_response.status.description)\n\n",_="###############################################################################\n# In this section, we set the user authentication, app ID, and details of the\n# collector we want to update. Change these strings to run your own example.\n###############################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to update your own collector\nCOLLECTOR_ID = 'YOUR_COLLECTOR_ID_HERE'\nCOLLECTOR_DESCRIPTION = 'YOUR_COLLECTOR_DESCRIPTION_HERE'\nPRE_QUEUE_WORKFLOW_ID = 'YOUR_PRE_WORKFLOW_ID_HERE'\nPOST_QUEUE_WORKFLOW_ID = 'YOUR_POST_WORKFLOW_ID_HERE'\nMODEL_ID = 'YOUR_MODEL_ID_HERE'\nMODEL_VERSION_ID = 'YOUR_MODEL_VERSION_ID_HERE' \nPOST_INPUTS_KEY_ID = 'YOUR_KEY_ID_HERE'\nCALLER_USER_ID = 'YOUR_CALLER_USER_ID_HERE'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID) # The userDataObject is required when using a PAT\n\npatch_collectors_response = stub.PatchCollectors(\n    service_pb2.PatchCollectorsRequest(\n        user_app_id=userDataObject,\n        action = 'overwrite',\n        collectors=[\n            resources_pb2.Collector(\n                id=COLLECTOR_ID,\n                description=COLLECTOR_DESCRIPTION,\n                pre_queue_workflow_id=PRE_QUEUE_WORKFLOW_ID,\n                post_queue_workflow_id=POST_QUEUE_WORKFLOW_ID,\n                collector_source=resources_pb2.CollectorSource(\n                    api_post_model_outputs_collector_source=resources_pb2.APIPostModelOutputsCollectorSource(\n                        model_user_id=USER_ID,\n                        model_app_id=APP_ID,\n                        model_id=MODEL_ID,\n                        model_version_id=MODEL_VERSION_ID,\n                        post_inputs_key_id=POST_INPUTS_KEY_ID,\n                        caller_user_id=CALLER_USER_ID\n                    )\n                )\n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif patch_collectors_response.status.code != status_code_pb2.SUCCESS:\n    print(patch_collectors_response.status)  \n    raise Exception(\"Patch collectors failed, status: \" + patch_collectors_response.status.description)\n    ",u="##################################################################\n# In this section, we set the user authentication and app ID.\n# Change these strings to run your own example.\n##################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID) # The userDataObject is required when using a PAT\n\nlist_collectors_response = stub.ListCollectors(\n    service_pb2.ListCollectorsRequest(user_app_id=userDataObject),\n    metadata=metadata\n)\n\nif list_collectors_response.status.code != status_code_pb2.SUCCESS:\n    print(list_collectors_response.status)\n    raise Exception(\"List collectors failed, status: \" + list_collectors_response.status.description)\n\nfor collector in list_collectors_response.collectors:\n    print(collector)\n    \n#print(list_collectors_response.collectors)",d="#####################################################################################\n# In this section, we set the user authentication, app ID, and ID of the collector\n# we want its details. Change these strings to run your own example.\n#####################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change this to get your own collector\nCOLLECTOR_ID = 'YOUR_COLLECTOR_ID_HERE'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID) # The userDataObject is required when using a PAT\n\nget_collector_response = stub.GetCollector(\n    service_pb2.GetCollectorRequest(\n        user_app_id=userDataObject,\n        collector_id=COLLECTOR_ID\n    ),\n    metadata=metadata\n)\n\nif get_collector_response.status.code != status_code_pb2.SUCCESS:\n    print(get_collector_response.status)\n    raise Exception(\"Get collector failed, status: \" + get_collector_response.status.description)\n\nprint(get_collector_response.collector)",p="######################################################################################\n# In this section, we set the user authentication, app ID, and IDs of the collectors\n# we want to delete. Change these strings to run your own example.\n######################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to delete your own collectors\nCOLLECTOR_ID_1 = 'YOUR_COLLECTOR_ID_HERE'\nCOLLECTOR_ID_2 = 'YOUR_COLLECTOR_ID_HERE'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\ndelete_collectors_response = stub.DeleteCollectors(\n    service_pb2.DeleteCollectorsRequest(\n        user_app_id=userDataObject,\n        ids=[COLLECTOR_ID_1, COLLECTOR_ID_2],\n        #delete_all=True #Uncomment to delete all your collectors\n    ),\n    metadata=metadata\n)\n\nif delete_collectors_response.status.code != status_code_pb2.SUCCESS:\n    print(delete_collectors_response.status)\n    raise Exception(\"Delete collectors failed, status: \" + delete_collectors_response.status.description)\n",E="\x3c!--index.html file--\x3e\n\n<script>\n    ////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and details of the\n    // collector we want to add. Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = 'YOUR_USER_ID_HERE';\n    // Your PAT (Personal Access Token) can be found in the Account's Security section\n    const PAT = 'YOUR_PAT_HERE';\n    const APP_ID = 'YOUR_APP_ID_HERE';\n    // Change these to add your own collector\n    const COLLECTOR_ID = 'YOUR_COLLECTOR_ID_HERE';\n    const COLLECTOR_DESCRIPTION = 'YOUR_COLLECTOR_DESCRIPTION_HERE';\n    const PRE_QUEUE_WORKFLOW_ID = 'YOUR_PRE_WORKFLOW_ID_HERE';\n    const POST_QUEUE_WORKFLOW_ID = 'YOUR_POST_WORKFLOW_ID_HERE';\n    const MODEL_ID = 'YOUR_MODEL_ID_HERE';\n    const MODEL_VERSION_ID = 'YOUR_MODEL_VERSION_ID_HERE';\n    const POST_INPUTS_KEY_ID = 'YOUR_API_KEY_HERE';\n    const CALLER_USER_ID = 'YOUR_CALLER_USER_ID_HERE';\n    \n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        \"user_app_id\": {\n            \"user_id\": USER_ID,\n            \"app_id\": APP_ID\n        },\n        \"collectors\": [\n        {\n            \"id\": COLLECTOR_ID,\n            \"description\": COLLECTOR_DESCRIPTION,\n            \"pre_queue_workflow_id\": PRE_QUEUE_WORKFLOW_ID,\n            \"post_queue_workflow_id\": POST_QUEUE_WORKFLOW_ID,\n            \"collector_source\": {\n                \"api_post_model_outputs_collector_source\": {\n                    \"model_user_id\": USER_ID,\n                    \"model_app_id\": APP_ID,\n                    \"model_id\": MODEL_ID,\n                    \"model_version_id\": MODEL_VERSION_ID,\n                    \"post_inputs_key_id\": POST_INPUTS_KEY_ID,\n                    \"caller_user_id\": CALLER_USER_ID\n                    }\n                }\n        }\n\n        ]\n    });\n\n    const requestOptions = {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        },\n        body: raw\n    };\n\n    fetch(\"https://api.clarifai.com/v2/collectors\", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n\n<\/script>\n",h='\x3c!--index.html file--\x3e\n\n<script>\n    ////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and details of the\n    // collector we want to update. Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = \'YOUR_USER_ID_HERE\';\n    // Your PAT (Personal Access Token) can be found in the Account\'s Security section\n    const PAT = \'YOUR_PAT_HERE\';\n    const APP_ID = \'YOUR_APP_ID_HERE\';\n    // Change these to update your own collector\n    const COLLECTOR_ID = \'YOUR_COLLECTOR_ID_HERE\';\n    const COLLECTOR_DESCRIPTION = \'YOUR_COLLECTOR_DESCRIPTION_HERE\';\n    const PRE_QUEUE_WORKFLOW_ID = \'YOUR_PRE_WORKFLOW_ID_HERE\';\n    const POST_QUEUE_WORKFLOW_ID = \'YOUR_POST_WORKFLOW_ID_HERE\';\n    const MODEL_ID = \'YOUR_MODEL_ID_HERE\';\n    const MODEL_VERSION_ID = \'YOUR_MODEL_VERSION_ID_HERE\';\n    const POST_INPUTS_KEY_ID = \'YOUR_API_KEY_HERE\';\n    const CALLER_USER_ID = \'YOUR_CALLER_USER_ID_HERE\';\n    \n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        "user_app_id": {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        "action": "overwrite",\n        "collectors": [\n        {\n            "id": COLLECTOR_ID,\n            "description": COLLECTOR_DESCRIPTION,\n            "pre_queue_workflow_id": PRE_QUEUE_WORKFLOW_ID,\n            "post_queue_workflow_id": POST_QUEUE_WORKFLOW_ID,\n            "collector_source": {\n                "api_post_model_outputs_collector_source": {\n                    "model_user_id": USER_ID,\n                    "model_app_id": APP_ID,\n                    "model_id": MODEL_ID,\n                    "model_version_id": MODEL_VERSION_ID,\n                    "post_inputs_key_id": POST_INPUTS_KEY_ID,\n                    "caller_user_id": CALLER_USER_ID\n                    }\n                }\n        }\n\n        ]\n    });\n\n    const requestOptions = {\n        method: \'PATCH\',\n        headers: {\n            \'Accept\': \'application/json\',\n            \'Authorization\': \'Key \' + PAT\n        },\n        body: raw\n    };\n\n    fetch("https://api.clarifai.com/v2/collectors", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log(\'error\', error));\n\n<\/script>\n',R="\x3c!--index.html file--\x3e\n\n<script>\n    ////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication and app ID.\n    // Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = 'YOUR_USER_ID_HERE';\n    // Your PAT (Personal Access Token) can be found in the Account's Security section\n    const PAT = 'YOUR_PAT_HERE';\n    const APP_ID = 'YOUR_APP_ID_HERE';\n    \n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const requestOptions = {\n        method: 'GET',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        }\n                \n    };\n\n    fetch(`https://api.clarifai.com/v2/users/${USER_ID}/apps/${APP_ID}/collectors`, requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n\n<\/script>\n",O="\x3c!--index.html file--\x3e\n\n<script>\n    //////////////////////////////////////////////////////////////////////////////////////////\n    //  In this section, we set the user authentication, app ID, and ID of the collector\n    //  we want its details. Change these strings to run your own example.\n    /////////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = 'YOUR_USER_ID_HERE';\n    // Your PAT (Personal Access Token) can be found in the Account's Security section\n    const PAT = 'YOUR_PAT_HERE';\n    const APP_ID = 'YOUR_APP_ID_HERE';\n    // Change this to get your own collector\n    const COLLECTOR_ID = 'YOUR_COLLECTOR_ID_HERE';\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const requestOptions = {\n        method: 'GET',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        }\n                \n    };\n\n    fetch(`https://api.clarifai.com/v2/users/${USER_ID}/apps/${APP_ID}/collectors/${COLLECTOR_ID}`, requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n\n<\/script>\n",I="\x3c!--index.html file--\x3e\n\n<script>\n    ///////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and IDs of the collectors\n    // we want to delete. Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = 'YOUR_USER_ID_HERE';\n    // Your PAT (Personal Access Token) can be found in the Account's Security section\n    const PAT = 'YOUR_PAT_HERE';\n    const APP_ID = 'YOUR_APP_ID_HERE';\n    // Change these to delete your own collectors\n    const COLLECTOR_ID_1 = 'YOUR_COLLECTOR_ID_HERE';\n    const COLLECTOR_ID_2 = 'YOUR_COLLECTOR_ID_HERE';\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        \"user_app_id\": {\n            \"user_id\": USER_ID,\n            \"app_id\": APP_ID\n        },\n        \"ids\": [COLLECTOR_ID_1, COLLECTOR_ID_2],\n        //\"delete_all\": true // Uncomment to delete all your collectors\n    });\n\n    const requestOptions = {\n        method: 'DELETE',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        },\n        body: raw\n    };\n\n    fetch(\"https://api.clarifai.com/v2/collectors\", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n\n\n<\/script>\n",C="//index.js file\n\n////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and details of the\n// collector we want to add. Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = 'YOUR_USER_ID_HERE';\n// Your PAT (Personal Access Token) can be found in the Account's Security section\nconst PAT = 'YOUR_PAT_HERE';\nconst APP_ID = 'YOUR_APP_ID_HERE';\n// Change these to add your own collector\nconst COLLECTOR_ID = 'YOUR_COLLECTOR_ID_HERE';\nconst COLLECTOR_DESCRIPTION = 'YOUR_COLLECTOR_DESCRIPTION_HERE';\nconst PRE_QUEUE_WORKFLOW_ID = 'YOUR_PRE_WORKFLOW_ID_HERE';\nconst POST_QUEUE_WORKFLOW_ID = 'YOUR_POST_WORKFLOW_ID_HERE';\nconst MODEL_ID = 'YOUR_MODEL_ID_HERE';\nconst MODEL_VERSION_ID = 'YOUR_MODEL_VERSION_ID_HERE';\nconst POST_INPUTS_KEY_ID = 'YOUR_API_KEY_HERE';\nconst CALLER_USER_ID = 'YOUR_CALLER_USER_ID_HERE';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require(\"clarifai-nodejs-grpc\");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set(\"authorization\", \"Key \" + PAT);\n\nstub.PostCollectors(\n    {\n        user_app_id: {\n            \"user_id\": USER_ID,\n            \"app_id\": APP_ID\n        },\n        collectors: [\n            {\n                id: COLLECTOR_ID,\n                description: COLLECTOR_DESCRIPTION,\n                pre_queue_workflow_id: PRE_QUEUE_WORKFLOW_ID,\n                post_queue_workflow_id: POST_QUEUE_WORKFLOW_ID,\n                collector_source: {\n                    api_post_model_outputs_collector_source: {\n                        model_user_id: USER_ID,\n                        model_app_id: APP_ID,\n                        model_id: MODEL_ID,\n                        model_version_id: MODEL_VERSION_ID,\n                        post_inputs_key_id: POST_INPUTS_KEY_ID,\n                        caller_user_id: CALLER_USER_ID\n                    }\n                }\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            console.log(response.status);\n            throw new Error(\"Post collectors failed, status: \" + response.status.description);\n        }\n    }\n);",D="//index.js file\n\n////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and details of the\n// collector we want to update. Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = 'YOUR_USER_ID_HERE';\n// Your PAT (Personal Access Token) can be found in the Account's Security section\nconst PAT = 'YOUR_PAT_HERE';\nconst APP_ID = 'YOUR_APP_ID_HERE';\n// Change these to update your own collector\nconst COLLECTOR_ID = 'YOUR_COLLECTOR_ID_HERE';\nconst COLLECTOR_DESCRIPTION = 'YOUR_NEW_COLLECTOR_DESCRIPTION_HERE';\nconst PRE_QUEUE_WORKFLOW_ID = 'YOUR_NEW_PRE_WORKFLOW_ID';\nconst POST_QUEUE_WORKFLOW_ID = 'YOUR_NEW_POST_WORKFLOW_ID';\nconst MODEL_ID = 'YOUR_NEW_MODEL_ID_HERE';\nconst MODEL_VERSION_ID = 'YOUR_NEW_MODEL_VERSION_ID_HERE';\nconst POST_INPUTS_KEY_ID = 'YOUR_API_KEY_HERE';\nconst CALLER_USER_ID = 'YOUR_CALLER_USER_ID_HERE';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require(\"clarifai-nodejs-grpc\");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set(\"authorization\", \"Key \" + PAT);\n\nstub.PatchCollectors(\n    {\n        user_app_id: {\n            \"user_id\": USER_ID,\n            \"app_id\": APP_ID\n        },\n        action: \"overwrite\",\n        collectors: [\n            {\n                id: COLLECTOR_ID,\n                description: COLLECTOR_DESCRIPTION,\n                pre_queue_workflow_id: PRE_QUEUE_WORKFLOW_ID,\n                post_queue_workflow_id: POST_QUEUE_WORKFLOW_ID,\n                collector_source: {\n                    api_post_model_outputs_collector_source: {\n                        model_user_id: USER_ID,\n                        model_app_id: APP_ID,\n                        model_id: MODEL_ID,\n                        model_version_id: MODEL_VERSION_ID,\n                        post_inputs_key_id: POST_INPUTS_KEY_ID,\n                        caller_user_id: CALLER_USER_ID\n                    }\n                }\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            console.log(response.status);\n            throw new Error(\"Patch collectors failed, status: \" + response.status.description);\n        }\n    }\n);",f='//index.js file\n\n//////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication and app ID.\n// Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.ListCollectors(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        }\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            console.log(response.status);\n            throw new Error("List collectors failed, status: " + response.status.description);\n        }\n\n        for (const collector of response.collectors) {\n            console.log(collector);\n        }\n    }\n);',g='//index.js file\n\n//////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and ID of the collector\n// we want its details. Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n// Change this to get your own collector\nconst COLLECTOR_ID = \'YOUR_COLLECTOR_ID_HERE\';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.GetCollector(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        collector_id: COLLECTOR_ID\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            console.log(response.status);\n            throw new Error("Get collector failed, status: " + response.status.description);\n        }\n\n        console.log(response.collector);\n    }\n);',P='//index.js file\n\n///////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and IDs of the collectors\n// we want to delete. Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n// Change these to delete your own collectors\nconst COLLECTOR_ID_1 = \'YOUR_COLLECTOR_ID_HERE\';\nconst COLLECTOR_ID_2 = \'YOUR_COLLECTOR_ID_HERE\';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.DeleteCollectors(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        ids: [COLLECTOR_ID_1, COLLECTOR_ID_2],\n        //delete_all: true //Uncomment to delete all your collectors\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            console.log(response.status);\n            throw new Error("Delete collectors failed, status: " + response.status.description);\n        }\n\n        console.log(response.collector);\n    }\n);',A='package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\npublic class ClarifaiExample {\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and details of the\n    // collector we want to add. Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to add your own collector\n    static final String COLLECTOR_ID = "YOUR_COLLECTOR_ID_HERE";\n    static final String COLLECTOR_DESCRIPTION = "YOUR_COLLECTOR_DESCRIPTION_HERE";\n    static final String PRE_QUEUE_WORKFLOW_ID = "YOUR_PRE_WORKFLOW_ID_HERE";\n    static final String POST_QUEUE_WORKFLOW_ID = "YOUR_POST_WORKFLOW_ID_HERE";\n    static final String MODEL_ID = "YOUR_MODEL_ID_HERE";\n    static final String MODEL_VERSION_ID = "YOUR_MODEL_VERSION_ID_HERE";\n    static final String POST_INPUTS_KEY_ID = "YOUR_API_KEY_HERE";    \n    static final String CALLER_USER_ID = "YOUR_CALLER_USER_ID_HERE";   \n       \n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));      \n       \n        MultiCollectorResponse postCollectorsResponse = stub.postCollectors(\n            PostCollectorsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n                .addCollectors(\n                    Collector.newBuilder()\n                        .setId(COLLECTOR_ID)\n                        .setDescription(COLLECTOR_DESCRIPTION)\n                        .setPreQueueWorkflowId(PRE_QUEUE_WORKFLOW_ID)\n                        .setPostQueueWorkflowId(POST_QUEUE_WORKFLOW_ID)\n                        .setCollectorSource(\n                            CollectorSource.newBuilder()\n                                .setApiPostModelOutputsCollectorSource(\n                                    APIPostModelOutputsCollectorSource.newBuilder()\n                                        .setModelUserId(USER_ID)\n                                        .setModelAppId(APP_ID)\n                                        .setModelId(MODEL_ID)\n                                        .setModelVersionId(MODEL_VERSION_ID)\n                                        .setPostInputsKeyId(POST_INPUTS_KEY_ID)\n                                        .setCallerUserId(CALLER_USER_ID)\n                                )\n                        )\n                )\n                .build()\n        );\n\n        if (postCollectorsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post collectors failed, status: " + postCollectorsResponse.getStatus());\n        }\n                             \n    }  \n}',m='package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\npublic class ClarifaiExample {\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and details of the\n    // collector we want to update. Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to update your own collector\n    static final String COLLECTOR_ID = "YOUR_COLLECTOR_ID_HERE";\n    static final String COLLECTOR_DESCRIPTION = "YOUR_NEW_COLLECTOR_DESCRIPTION_HERE";\n    static final String PRE_QUEUE_WORKFLOW_ID = "YOUR_NEW_PRE_WORKFLOW_ID";\n    static final String POST_QUEUE_WORKFLOW_ID = "YOUR_NEW_POST_WORKFLOW_ID";\n    static final String MODEL_ID = "YOUR_NEW_MODEL_ID_HERE";\n    static final String MODEL_VERSION_ID = "YOUR_NEW_MODEL_VERSION_ID_HERE";\n    static final String POST_INPUTS_KEY_ID = "YOUR_API_KEY_HERE";\n    static final String CALLER_USER_ID = "YOUR_CALLER_USER_ID_HERE";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiCollectorResponse patchCollectorsResponse = stub.patchCollectors(\n            PatchCollectorsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .setAction("overwrite")\n            .addCollectors(\n                Collector.newBuilder()\n                .setId(COLLECTOR_ID)\n                .setDescription(COLLECTOR_DESCRIPTION)\n                .setPreQueueWorkflowId(PRE_QUEUE_WORKFLOW_ID)\n                .setPostQueueWorkflowId(POST_QUEUE_WORKFLOW_ID)\n                .setCollectorSource(\n                    CollectorSource.newBuilder()\n                    .setApiPostModelOutputsCollectorSource(\n                        APIPostModelOutputsCollectorSource.newBuilder()\n                        .setModelUserId(USER_ID)\n                        .setModelAppId(APP_ID)\n                        .setModelId(MODEL_ID)\n                        .setModelVersionId(MODEL_VERSION_ID)\n                        .setPostInputsKeyId(POST_INPUTS_KEY_ID)\n                        .setCallerUserId(CALLER_USER_ID)\n                    )\n                )\n            )\n            .build()\n        );\n\n        if (patchCollectorsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post collectors failed, status: " + patchCollectorsResponse.getStatus());\n        }\n    }\n}',T='package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\npublic class ClarifaiExample {\n\n    ////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication and app ID.\n    // Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";  \n       \n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));      \n       \n        MultiCollectorResponse listCollectorsResponse = stub.listCollectors(\n            ListCollectorsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n                .build()\n        );\n\n        if (listCollectorsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("List collectors failed, status: " + listCollectorsResponse.getStatus());\n        }\n\n        for (Collector collector : listCollectorsResponse.getCollectorsList()) {\n            System.out.println(collector);\n        }\n           \n    }  \n}',S='package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\npublic class ClarifaiExample {\n\n    ///////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and ID of the collector\n    // we want its details. Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";  \n    // Change this to get your own collector\n    static final String COLLECTOR_ID = "YOUR_COLLECTOR_ID_HERE";\n       \n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));          \n\n        SingleCollectorResponse getCollectorResponse = stub.getCollector(\n            GetCollectorRequest.newBuilder()\n                .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n                .setCollectorId(COLLECTOR_ID)\n                .build()\n        );\n\n        if (getCollectorResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Get collector failed, status: " + getCollectorResponse.getStatus());\n        }\n\n        System.out.println(getCollectorResponse.getCollector());  \n    }  \n}',U='package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\npublic class ClarifaiExample {\n\n    ////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and IDs of the collectors\n    // we want to delete. Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";  \n    // Change these to delete your own collectors\n    static final String COLLECTOR_ID_1 = "YOUR_COLLECTOR_ID_HERE";\n    static final String COLLECTOR_ID_2 = "YOUR_COLLECTOR_ID_HERE";\n       \n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));    \n       \n        BaseResponse deleteCollectorsResponse = stub.deleteCollectors(\n            DeleteCollectorsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n                .addIds(COLLECTOR_ID_1)\n                .addIds(COLLECTOR_ID_2)\n                .build()\n        );\n\n        if (deleteCollectorsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Delete collectors failed, status: " + deleteCollectorsResponse.getStatus());\n        }\n\n    }  \n}',L='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and details of the\n// collector we want to add. Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change these to add your own collector\n$COLLECTOR_ID = \'YOUR_COLLECTOR_ID_HERE\';\n$COLLECTOR_DESCRIPTION = \'YOUR_COLLECTOR_DESCRIPTION_HERE\';\n$PRE_QUEUE_WORKFLOW_ID = \'YOUR_PRE_WORKFLOW_ID_HERE\';\n$POST_QUEUE_WORKFLOW_ID = \'YOUR_POST_WORKFLOW_ID_HERE\';\n$MODEL_ID = \'YOUR_MODEL_ID_HERE\';\n$MODEL_VERSION_ID = \'YOUR_MODEL_VERSION_ID_HERE\';\n$POST_INPUTS_KEY_ID = \'YOUR_API_KEY_HERE\';\n$CALLER_USER_ID = \'YOUR_CALLER_USER_ID_HERE\';\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\Api\\Collector;\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\PostCollectorsRequest;\nuse Clarifai\\Api\\CollectorSource;\nuse Clarifai\\Api\\APIPostModelOutputsCollectorSource;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PostCollectors(\n        // The request object carries the request along with the request status and other metadata related to the request itself\n        new PostCollectorsRequest([\n            "user_app_id" => $userDataObject,\n            "collectors" => [\n                new Collector([                    \n                    "id" => $COLLECTOR_ID,\n                    "description" => $COLLECTOR_DESCRIPTION,\n                    "pre_queue_workflow_id" => $PRE_QUEUE_WORKFLOW_ID,\n                    "post_queue_workflow_id" => $POST_QUEUE_WORKFLOW_ID,\n                    "collector_source" => \n                        new CollectorSource([\n                            "api_post_model_outputs_collector_source" => \n                                new APIPostModelOutputsCollectorSource([\n                                    "model_user_id" => $USER_ID,\n                                    "model_app_id" => $APP_ID,\n                                    "model_id" => $MODEL_ID,\n                                    "model_version_id" => $MODEL_VERSION_ID,\n                                    "post_inputs_key_id" => $POST_INPUTS_KEY_ID,\n                                    "caller_user_id" => $CALLER_USER_ID\n                                ])\n                            \n                        ])                    \n                \n                ])              \n            ]\n        ]),\n        $metadata\n    )->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\n?>\n',w='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and details of the\n// collector we want to update. Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change these to update your own collector\n$COLLECTOR_ID = \'YOUR_COLLECTOR_ID_HERE\';\n$COLLECTOR_DESCRIPTION = \'YOUR_NEW_COLLECTOR_DESCRIPTION_HERE\';\n$PRE_QUEUE_WORKFLOW_ID = \'YOUR_NEW_PRE_WORKFLOW_ID\';\n$POST_QUEUE_WORKFLOW_ID = \'YOUR_NEW_POST_WORKFLOW_ID\';\n$MODEL_ID = \'YOUR_NEW_MODEL_ID_HERE\';\n$MODEL_VERSION_ID = \'YOUR_NEW_MODEL_VERSION_ID_HERE\';\n$POST_INPUTS_KEY_ID = \'YOUR_API_KEY_HERE\';\n$CALLER_USER_ID = \'YOUR_CALLER_USER_ID_HERE\';\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\Api\\Collector;\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\PatchCollectorsRequest;\nuse Clarifai\\Api\\CollectorSource;\nuse Clarifai\\Api\\APIPostModelOutputsCollectorSource;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PatchCollectors(\n        // The request object carries the request along with the request status and other metadata related to the request itself\n        new PatchCollectorsRequest([\n            "user_app_id" => $userDataObject,\n            "action" => "overwrite",\n            "collectors" => [\n                new Collector([                    \n                    "id" => $COLLECTOR_ID,\n                    "description" => $COLLECTOR_DESCRIPTION,\n                    "pre_queue_workflow_id" => $PRE_QUEUE_WORKFLOW_ID,\n                    "post_queue_workflow_id" => $POST_QUEUE_WORKFLOW_ID,\n                    "collector_source" => \n                        new CollectorSource([\n                            "api_post_model_outputs_collector_source" => \n                                new APIPostModelOutputsCollectorSource([\n                                    "model_user_id" => $USER_ID,\n                                    "model_app_id" => $APP_ID,\n                                    "model_id" => $MODEL_ID,\n                                    "model_version_id" => $MODEL_VERSION_ID,\n                                    "post_inputs_key_id" => $POST_INPUTS_KEY_ID,\n                                    "caller_user_id" => $CALLER_USER_ID\n                                ])\n                            \n                        ])                    \n                \n                ])              \n            ]\n        ]),\n        $metadata\n    )->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\n?>\n',b='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n//////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication and app ID.\n// Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\ListCollectorsRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->ListCollectors(\n        // The request object carries the request along with the request status and other metadata related to the request itself\n        new ListCollectorsRequest([\n            "user_app_id" => $userDataObject          \n        ]),\n        $metadata\n    )->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\nforeach ($response->getCollectors() as $collector){\n    print $collector->serializeToJsonString(). "<br>";    \n}\n\n?>\n',x='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n//////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and ID of the collector\n// we want its details. Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change this to get your own collector\n$COLLECTOR_ID = \'YOUR_COLLECTOR_ID_HERE\';\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\GetCollectorRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->GetCollector(\n        // The request object carries the request along with the request status and other metadata related to the request itself\n        new GetCollectorRequest([\n            "user_app_id" => $userDataObject,\n            "collector_id" => $COLLECTOR_ID         \n        ]),\n        $metadata\n    )->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\nprint $response->getCollector()->serializeToJsonString();\n\n?>\n',j='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n///////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and IDs of the collectors\n// we want to delete. Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change these to delete your own collectors\n$COLLECTOR_ID_1 = \'YOUR_COLLECTOR_ID_HERE\';\n$COLLECTOR_ID_2 = \'YOUR_COLLECTOR_ID_HERE\';\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\DeleteCollectorsRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->DeleteCollectors(\n        // The request object carries the request along with the request status and other metadata related to the request itself\n        new DeleteCollectorsRequest([\n            "user_app_id" => $userDataObject,\n            "ids"=> [\n                $COLLECTOR_ID_1, $COLLECTOR_ID_2\n            ],\n            //"delete_all" => true // Uncomment to delete all your collectors\n        ]),\n        $metadata\n    )->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\n?>\n',N='curl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/collectors" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  --data-raw \'{\n    "collectors": [\n        {\n            "id": "YOUR_COLLECTOR_ID_HERE",\n            "description": "YOUR_COLLECTOR_DESCRIPTION_HERE",\n            "pre_queue_workflow_id": "YOUR_PRE_WORKFLOW_ID_HERE",\n            "post_queue_workflow_id": "YOUR_POST_WORKFLOW_ID_HERE",\n            "collector_source": {\n                "api_post_model_outputs_collector_source": {\n                    "model_user_id": "YOUR_USER_ID_HERE",\n                    "model_app_id": "YOUR_APP_ID_HERE",\n                    "model_id": "YOUR_MODEL_ID_HERE",\n                    "model_version_id": "YOUR_MODEL_VERSION_ID_HERE",\n                    "post_inputs_key_id": "YOUR_API_KEY_HERE",\n                    "caller_user_id": "CALLER_USER_ID"\n                }\n            }\n       }\n    ]\n}\'',Y='curl -X PATCH "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/collectors" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  --data-raw \'{\n    "action": "overwrite",\n    "collectors": [\n        {\n            "id": "YOUR_COLLECTOR_ID_HERE",\n            "description": "YOUR_NEW_COLLECTOR_DESCRIPTION_HERE",\n            "pre_queue_workflow_id": "YOUR_NEW_PRE_WORKFLOW_ID_HERE",\n            "post_queue_workflow_id": "YOUR_NEW_POST_WORKFLOW_ID_HERE",\n            "collector_source": {\n                "api_post_model_outputs_collector_source": {\n                    "model_user_id": "YOUR_USER_ID_HERE",\n                    "model_app_id": "YOUR_APP_ID_HERE",\n                    "model_id": "YOUR_NEW_MODEL_ID_HERE",\n                    "model_version_id": "YOUR_NEW_MODEL_VERSION_ID_HERE",\n                    "post_inputs_key_id": "YOUR_API_KEY_HERE",\n                    "caller_user_id": "CALLER_USER_ID_HERE"\n                }\n            }\t\t\t\n       }\n    ]\n}\'',H='curl -X GET "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/collectors" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json"',y='curl -X GET "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/collectors/YOUR_COLLECTOR_ID_HERE" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json"',v='curl -X DELETE "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/collectors" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  --data-raw \'{\n    "ids": ["YOUR_COLLECTOR_ID_HERE", "YOUR_COLLECTOR_ID_HERE"]\n}\'\n',k={description:"Capture inputs used for making predictions in your app",sidebar_position:1,toc_max_heading_level:4},W="Collectors",q={},$=[{value:"Create via the UI",id:"create-via-the-ui",level:2},{value:"Install the Module",id:"install-the-module",level:3},{value:"Option 1",id:"option-1",level:4},{value:"Option 2",id:"option-2",level:4},{value:"Create Collector",id:"create-collector",level:3},{value:"Collector ID\u200b",id:"collector-id",level:4},{value:"Description",id:"description",level:4},{value:"Pre-queue Workflow\u200b",id:"pre-queue-workflow",level:4},{value:"Post-queue Workflow\u200b",id:"post-queue-workflow",level:4},{value:"Post Inputs Key",id:"post-inputs-key",level:4},{value:"Activate Collector",id:"activate-collector",level:4},{value:"Caller",id:"caller",level:4},{value:"Source",id:"source",level:4},{value:"Create new Collector",id:"create-new-collector",level:4},{value:"Manage Collectors",id:"manage-collectors",level:3},{value:"Example",id:"example",level:3},{value:"Create via the API",id:"create-via-the-api",level:2},{value:"Collector Parameters",id:"collector-parameters",level:3},{value:"Collector ID",id:"collector-id-1",level:4},{value:"Description",id:"description-1",level:4},{value:"Pre-queue Workflow",id:"pre-queue-workflow-1",level:4},{value:"Post-queue Workflow\u200b",id:"post-queue-workflow-1",level:4},{value:"Source",id:"source-1",level:4},{value:"Post Inputs Key",id:"post-inputs-key-1",level:4},{value:"Caller User ID",id:"caller-user-id",level:4},{value:"Add Collector",id:"add-collector",level:3},{value:"Update Collector",id:"update-collector",level:3},{value:"List Collectors",id:"list-collectors",level:3},{value:"Get Collector",id:"get-collector",level:3},{value:"Delete Collector",id:"delete-collector",level:3}];function K(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",img:"img",li:"li",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"collectors",children:"Collectors"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Capture inputs used for making predictions in your app"})}),"\n",(0,s.jsx)("hr",{}),"\n",(0,s.jsx)(n.p,{children:"Collector is an ingenious feature that allows you to capture the inputs used for making predictions. After creating a collector, which includes specifying the caller user ID and the source model, a triggering process is established."}),"\n",(0,s.jsx)(n.p,{children:"This process ensures that whenever the stated user makes a prediction using the specified model, the inputs used in generating the predictions are automatically ingested and stored in your app."}),"\n",(0,s.jsx)(n.p,{children:"With collectors, you can automatically pipe in data from production models, gather inputs to feed your models with real-world training data, and unlock many platform training capabilities."}),"\n",(0,s.jsx)(n.admonition,{title:"feature availability",type:"caution",children:(0,s.jsxs)(n.p,{children:["The Collector feature is currently exclusively available to our Professional and Enterprise users. Learn more ",(0,s.jsx)(n.a,{href:"https://www.clarifai.com/pricing",children:"here"}),"."]})}),"\n",(0,s.jsx)(n.h2,{id:"create-via-the-ui",children:"Create via the UI"}),"\n",(0,s.jsxs)(n.p,{children:["To create a collector within your application, you need to use the Clarifai\u2019s ",(0,s.jsx)(n.a,{href:"https://clarifai.com/clarifai/data/modules/collector",children:"Collectors module"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"Let\u2019s demonstrate how you can use the module to create a collector via the UI."}),"\n",(0,s.jsx)(n.h3,{id:"install-the-module",children:"Install the Module"}),"\n",(0,s.jsx)(n.h4,{id:"option-1",children:"Option 1"}),"\n",(0,s.jsxs)(n.p,{children:["Go to the Collectors module ",(0,s.jsx)(n.a,{href:"https://clarifai.com/clarifai/data/modules/collector",children:"page"})," and click the ",(0,s.jsx)(n.strong,{children:"Install Module"})," button at the upper-right corner."]}),"\n",(0,s.jsx)(n.p,{children:"Next, on the small window that pops up, select a desired user and destination app for installing the module."}),"\n",(0,s.jsxs)(n.p,{children:["Click the ",(0,s.jsx)(n.strong,{children:"Confirm"})," button."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:t(82492).A+"",width:"1914",height:"900"})}),"\n",(0,s.jsxs)(n.p,{children:["On the ensuing page, choose a destination URL for installing the module, select the module visibility, and click the ",(0,s.jsx)(n.strong,{children:"Install to this App!"})," button."]}),"\n",(0,s.jsxs)(n.p,{children:["After the module has been successfully installed, click the ",(0,s.jsx)(n.strong,{children:"Click to use installed module version"})," button to start using it. You can also refresh the page for your installed module to appear on the left sidebar under the ",(0,s.jsx)(n.strong,{children:"Installed Modules"})," category."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:t(66775).A+"",width:"1895",height:"856"})}),"\n",(0,s.jsx)(n.p,{children:"If you click the button, you\u2019ll be redirected to a page that requires you to authorize the module to access data on your behalf. You will see the permissions the module requires."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:t(23758).A+"",width:"1827",height:"875"})}),"\n",(0,s.jsxs)(n.p,{children:["Click the ",(0,s.jsx)(n.strong,{children:"Authorize"})," button."]}),"\n",(0,s.jsx)(n.h4,{id:"option-2",children:"Option 2"}),"\n",(0,s.jsxs)(n.p,{children:["Alternatively, you can use the module\u2019s URL to install it in your app. To do so, click the ",(0,s.jsx)(n.strong,{children:"Manage Installed Modules"})," option at the bottom of the collapsible left sidebar."]}),"\n",(0,s.jsxs)(n.p,{children:["Grab the URL of the Collectors module and paste it into the ",(0,s.jsx)(n.strong,{children:"Module URL"})," input field."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:t(59873).A+"",width:"1814",height:"838"})}),"\n",(0,s.jsx)(n.p,{children:"You can then follow the ensuing prompts to complete installing the module in your app."}),"\n",(0,s.jsx)(n.h3,{id:"create-collector",children:"Create Collector"}),"\n",(0,s.jsx)(n.p,{children:"After installing the module and authorizing it to access data on your behalf, you\u2019ll be redirected to a page that allows you to create it. You can fill in the required details."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:t(91608).A+"",width:"1755",height:"956"})}),"\n",(0,s.jsx)(n.h4,{id:"collector-id",children:"Collector ID\u200b"}),"\n",(0,s.jsx)(n.p,{children:"Give your collector a useful and descriptive name."}),"\n",(0,s.jsx)(n.h4,{id:"description",children:"Description"}),"\n",(0,s.jsx)(n.p,{children:"\u200b\nProvide additional details about your collector."}),"\n",(0,s.jsx)(n.h4,{id:"pre-queue-workflow",children:"Pre-queue Workflow\u200b"}),"\n",(0,s.jsx)(n.p,{children:"In many scenarios, you will only want to ingest a sample, or subset of a given data source into your app. Pre-queue workflows allow you to pre-process your inputs so that you can sample and filter your new data before it is ever added to your app. Pre-queue workflows allow you to specify sampling rules for triggering data ingestion."}),"\n",(0,s.jsx)(n.p,{children:"Common pre-queue workflows are designed to:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Randomly sample inputs"}),"\n",(0,s.jsx)(n.li,{children:"Filter inputs by metadata"}),"\n",(0,s.jsx)(n.li,{children:"Filter inputs with a maximum probability below a given threshold"}),"\n",(0,s.jsx)(n.li,{children:"Filter inputs with a minimum probability above a given threshold"}),"\n",(0,s.jsx)(n.li,{children:"Filter specific concept probabilities above a given threshold"}),"\n",(0,s.jsx)(n.li,{children:"Undertake knowledge graph mapping from public General model concepts to a custom model"}),"\n"]}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsx)(n.p,{children:"At least one (pre-queue or post-queue) workflow ID is required."})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.em,{children:["For this example, let\u2019s create a ",(0,s.jsx)(n.strong,{children:"random-sample"})," workflow, which randomly samples the inputs to be collected in your app. Let\u2019s set the ",(0,s.jsx)(n.strong,{children:"keep_fraction"})," parameter to 1, implying that all (100%) the inputs predicted by the specified model will be kept and added to your app."]})}),"\n"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:t(66099).A+"",width:"1920",height:"841"})}),"\n"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.em,{children:["After creating the workflow in the ",(0,s.jsx)(n.a,{href:"https://docs.clarifai.com/portal-guide/workflows/working-with-workflows/",children:"Workflow Builder"}),", let\u2019s select it in the ",(0,s.jsx)(n.strong,{children:"Pre-Queue Workflow"})," field."]})}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"post-queue-workflow",children:"Post-queue Workflow\u200b"}),"\n",(0,s.jsx)(n.p,{children:"This is the workflow to run after the collector has processed the queued input. This workflow uses the original input to the model as input to the workflow so that you can run additional models as well on that input to decide whether to queue the model or not."}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.em,{children:["For this example, let\u2019s create an ",(0,s.jsx)(n.strong,{children:"image-to-text"})," workflow, which uses the ",(0,s.jsx)(n.a,{href:"https://clarifai.com/salesforce/blip/models/general-english-image-caption-blip",children:"general-english-image-caption-blip"})," model to generate English captions from images. So, the images outputted by the pre-queue workflow will be captioned by the post-queue workflow, and the captioned text stored in your app."]})}),"\n"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:t(77295).A+"",width:"1918",height:"841"})}),"\n"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.em,{children:["After creating the workflow in the Workflow Builder, let\u2019s select it in the ",(0,s.jsx)(n.strong,{children:"Post-Queue Workflow"})," field."]})}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"If the workflow output has any field that is non-empty, then it will be passed on to POST /inputs to the destination app."}),"\n",(0,s.jsx)(n.h4,{id:"post-inputs-key",children:"Post Inputs Key"}),"\n",(0,s.jsx)(n.p,{children:"Select the PAT key that you would like your module to use to enable inputs to be posted to your app. This key must have the PostInputs scope, since it grants the collector the authority to POST inputs to your app."}),"\n",(0,s.jsx)(n.p,{children:"It should also have the permissions to access the source model used for making the predictions."}),"\n",(0,s.jsx)(n.h4,{id:"activate-collector",children:"Activate Collector"}),"\n",(0,s.jsx)(n.p,{children:"Select the checkbox if you want to activate the collector and make it ready to be used. Otherwise, the collector will remain inactive."}),"\n",(0,s.jsx)(n.h4,{id:"caller",children:"Caller"}),"\n",(0,s.jsx)(n.p,{children:"Specify the ID of the caller who will be making the prediction requests. You can even provide your own user ID."}),"\n",(0,s.jsx)(n.h4,{id:"source",children:"Source"}),"\n",(0,s.jsx)(n.p,{children:"Specify the source model from which you want to collect data. The collector will automatically post the inputs utilized by the caller for making predictions using the specified model into your app."}),"\n",(0,s.jsx)(n.p,{children:"You need to specify the model URL and its version ID."}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.em,{children:["For this example, let\u2019s specify the ",(0,s.jsx)(n.a,{href:"https://clarifai.com/clarifai/main/models/general-image-recognition",children:"general-image-recognition"})," model with its version ID as aa7f35c01e0642fda5cf400f543e7c40."]})}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"create-new-collector",children:"Create new Collector"}),"\n",(0,s.jsx)(n.p,{children:"Here are the details we provided for creating the new collector:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:t(10890).A+"",width:"1737",height:"919"})}),"\n",(0,s.jsxs)(n.p,{children:["Finally, click the ",(0,s.jsx)(n.strong,{children:"Create new collector"})," button."]}),"\n",(0,s.jsx)(n.h3,{id:"manage-collectors",children:"Manage Collectors"}),"\n",(0,s.jsxs)(n.p,{children:["If you click the ",(0,s.jsx)(n.strong,{children:"Show All"})," option located under the ",(0,s.jsx)(n.strong,{children:"collector"})," module within the collapsible left sidebar, you will be directed to a subsequent page where your created collector, along with its corresponding details, will be listed for your review."]}),"\n",(0,s.jsx)(n.p,{children:"This page also allows you to effortlessly deactivate, reactivate, or delete collectors as needed."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:t(61309).A+"",width:"1804",height:"919"})}),"\n",(0,s.jsxs)(n.p,{children:["If you click the ",(0,s.jsx)(n.strong,{children:"Update"})," option, you will be directed to a subsequent page where you can update the details of your collector."]}),"\n",(0,s.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,s.jsxs)(n.p,{children:["Let\u2019s say the caller you\u2019d specified uses ",(0,s.jsx)(n.a,{href:"https://samples.clarifai.com/featured-models/ocr-woman-holding-sold-sign.jpg",children:"this image"})," to make a prediction on the general-image-recognition model, which you\u2019d stated as the source model."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:t(40180).A+"",width:"1602",height:"897"})}),"\n",(0,s.jsx)(n.p,{children:"The image used for making the prediction will be automatically captured, captioned, and the generated text stored in your app \u2014 according to the rules you specified when creating the collector."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:t(38278).A+"",width:"1911",height:"895"})}),"\n",(0,s.jsx)(n.p,{children:"If you update the collector by deselecting the post-queue workflow, only the pre-queue workflow will remain active. As such, you'll notice that the image used for making the prediction will be captured in your app as-is."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:t(2804).A+"",width:"1913",height:"894"})}),"\n",(0,s.jsx)(n.p,{children:"That\u2019s it!"}),"\n",(0,s.jsx)(n.h2,{id:"create-via-the-api",children:"Create via the API"}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["Before using the ",(0,s.jsx)(n.a,{href:"https://docs.clarifai.com/additional-resources/api-overview/python-sdk",children:"Python SDK"}),", ",(0,s.jsx)(n.a,{href:"https://docs.clarifai.com/additional-resources/api-overview/nodejs-sdk",children:"Node.js SDK"}),", or any of our ",(0,s.jsx)(n.a,{href:"https://docs.clarifai.com/additional-resources/api-overview/grpc-clients",children:"gRPC clients"}),", ensure they are properly installed on your machine. Refer to their respective installation guides for instructions on how to install and initialize them."]})}),"\n","\n","\n","\n","\n","\n","\n","\n",(0,s.jsx)(n.h3,{id:"collector-parameters",children:"Collector Parameters"}),"\n",(0,s.jsx)(n.p,{children:"Let's talk about the parameters required to create a collector via the API."}),"\n",(0,s.jsx)(n.h4,{id:"collector-id-1",children:"Collector ID"}),"\n",(0,s.jsx)(n.p,{children:"Give your collector a useful and descriptive name."}),"\n",(0,s.jsx)(n.h4,{id:"description-1",children:"Description"}),"\n",(0,s.jsx)(n.p,{children:"Provide additional details about your collector."}),"\n",(0,s.jsx)(n.h4,{id:"pre-queue-workflow-1",children:"Pre-queue Workflow"}),"\n",(0,s.jsx)(n.p,{children:"In many scenarios, you will only want to ingest a sample, or subset of a given data source into your app. Pre-queue workflows allow you to pre-process your inputs so that you can sample and filter your new data before it is ever added to your app. Pre-queue workflows allow you to specify sampling rules for triggering data ingestion."}),"\n",(0,s.jsx)(n.p,{children:"Common pre-queue workflows are designed to:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Randomly sample inputs"}),"\n",(0,s.jsx)(n.li,{children:"Filter inputs by metadata"}),"\n",(0,s.jsx)(n.li,{children:"Filter inputs with a maximum probability below a given threshold"}),"\n",(0,s.jsx)(n.li,{children:"Filter inputs with a minimum probability above a given threshold"}),"\n",(0,s.jsx)(n.li,{children:"Filter specific concept probabilities above a given threshold"}),"\n",(0,s.jsx)(n.li,{children:"Undertake knowledge graph mapping from public General model concepts to a custom model"}),"\n"]}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsx)(n.p,{children:"At least one (pre-queue or post-queue) workflow ID is required."})}),"\n",(0,s.jsx)(n.h4,{id:"post-queue-workflow-1",children:"Post-queue Workflow\u200b"}),"\n",(0,s.jsx)(n.p,{children:"This is the workflow to run after the collector has processed the queued input. This workflow uses the original input to the model as input to the workflow so that you can run additional models as well on that input to decide whether to queue the model or not."}),"\n",(0,s.jsx)(n.h4,{id:"source-1",children:"Source"}),"\n",(0,s.jsx)(n.p,{children:"These are the details of the source model from which you want to collect data. The collector will automatically post the inputs utilized by the caller for making predictions using the specified model into your app."}),"\n",(0,s.jsx)(n.h4,{id:"post-inputs-key-1",children:"Post Inputs Key"}),"\n",(0,s.jsx)(n.p,{children:"This is the PAT or the API key to use to enable inputs to be posted to your app. This key must have the PostInputs scope, since it grants the collector the authority to POST inputs to your app."}),"\n",(0,s.jsx)(n.p,{children:"It should also have the permissions to access the source model used for making the predictions."}),"\n",(0,s.jsx)(n.h4,{id:"caller-user-id",children:"Caller User ID"}),"\n",(0,s.jsx)(n.p,{children:"This is the ID of the caller who will be making the prediction requests. You can even provide your own user ID."}),"\n",(0,s.jsx)(n.h3,{id:"add-collector",children:"Add Collector"}),"\n",(0,s.jsx)(n.p,{children:"Here is how to add a new collector to your application."}),"\n",(0,s.jsxs)(a.A,{groupId:"code",children:[(0,s.jsx)(i.A,{value:"python",label:"Python (gRPC)",children:(0,s.jsx)(l.A,{className:"language-python",children:c})}),(0,s.jsx)(i.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(l.A,{className:"language-javascript",children:E})}),(0,s.jsx)(i.A,{value:"nodejs",label:"Node.js (gRPC)",children:(0,s.jsx)(l.A,{className:"language-javascript",children:C})}),(0,s.jsx)(i.A,{value:"java",label:"Java (gRPC)",children:(0,s.jsx)(l.A,{className:"language-java",children:A})}),(0,s.jsx)(i.A,{value:"php",label:"PHP (gRPC)",children:(0,s.jsx)(l.A,{className:"language-php",children:L})}),(0,s.jsx)(i.A,{value:"curl",label:"cURL",children:(0,s.jsx)(l.A,{className:"language-bash",children:N})})]}),"\n",(0,s.jsx)(n.h3,{id:"update-collector",children:"Update Collector"}),"\n",(0,s.jsx)(n.p,{children:"You can update an existing collector."}),"\n",(0,s.jsxs)(a.A,{groupId:"code",children:[(0,s.jsx)(i.A,{value:"python",label:"Python (gRPC)",children:(0,s.jsx)(l.A,{className:"language-python",children:_})}),(0,s.jsx)(i.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(l.A,{className:"language-javascript",children:h})}),(0,s.jsx)(i.A,{value:"nodejs",label:"Node.js (gRPC)",children:(0,s.jsx)(l.A,{className:"language-javascript",children:D})}),(0,s.jsx)(i.A,{value:"java",label:"Java (gRPC)",children:(0,s.jsx)(l.A,{className:"language-javascript",children:m})}),(0,s.jsx)(i.A,{value:"php",label:"PHP (gRPC)",children:(0,s.jsx)(l.A,{className:"language-php",children:w})}),(0,s.jsx)(i.A,{value:"curl",label:"cURL",children:(0,s.jsx)(l.A,{className:"language-bash",children:Y})})]}),"\n",(0,s.jsx)(n.h3,{id:"list-collectors",children:"List Collectors"}),"\n",(0,s.jsxs)(n.p,{children:["You can list all the collectors in your app. Click ",(0,s.jsx)(n.a,{href:"https://docs.clarifai.com/api-guide/advanced-topics/pagination/",children:"here"})," to learn how to control the page that gets displayed."]}),"\n",(0,s.jsxs)(a.A,{groupId:"code",children:[(0,s.jsx)(i.A,{value:"python",label:"Python (gRPC)",children:(0,s.jsx)(l.A,{className:"language-python",children:u})}),(0,s.jsx)(i.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(l.A,{className:"language-javascript",children:R})}),(0,s.jsx)(i.A,{value:"nodejs",label:"Node.js (gRPC)",children:(0,s.jsx)(l.A,{className:"language-javascript",children:f})}),(0,s.jsx)(i.A,{value:"java",label:"Java (gRPC)",children:(0,s.jsx)(l.A,{className:"language-java",children:T})}),(0,s.jsx)(i.A,{value:"php",label:"PHP (gRPC)",children:(0,s.jsx)(l.A,{className:"language-php",children:b})}),(0,s.jsx)(i.A,{value:"curl",label:"cURL",children:(0,s.jsx)(l.A,{className:"language-bash",children:H})})]}),"\n",(0,s.jsx)(n.h3,{id:"get-collector",children:"Get Collector"}),"\n",(0,s.jsx)(n.p,{children:"You can return the details of a certain collector."}),"\n",(0,s.jsxs)(a.A,{groupId:"code",children:[(0,s.jsx)(i.A,{value:"python",label:"Python (gRPC)",children:(0,s.jsx)(l.A,{className:"language-python",children:d})}),(0,s.jsx)(i.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(l.A,{className:"language-javascript",children:O})}),(0,s.jsx)(i.A,{value:"nodejs",label:"Node.js (gRPC)",children:(0,s.jsx)(l.A,{className:"language-javascript",children:g})}),(0,s.jsx)(i.A,{value:"java",label:"Java (gRPC)",children:(0,s.jsx)(l.A,{className:"language-java",children:S})}),(0,s.jsx)(i.A,{value:"php",label:"PHP (gRPC)",children:(0,s.jsx)(l.A,{className:"language-php",children:x})}),(0,s.jsx)(i.A,{value:"curl",label:"cURL",children:(0,s.jsx)(l.A,{className:"language-bash",children:y})})]}),"\n",(0,s.jsx)(n.h3,{id:"delete-collector",children:"Delete Collector"}),"\n",(0,s.jsx)(n.p,{children:"You can delete a collector."}),"\n",(0,s.jsxs)(a.A,{groupId:"code",children:[(0,s.jsx)(i.A,{value:"python",label:"Python (gRPC)",children:(0,s.jsx)(l.A,{className:"language-python",children:p})}),(0,s.jsx)(i.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(l.A,{className:"language-javascript",children:I})}),(0,s.jsx)(i.A,{value:"nodejs",label:"Node.js (gRPC)",children:(0,s.jsx)(l.A,{className:"language-javascript",children:P})}),(0,s.jsx)(i.A,{value:"java",label:"Java (gRPC)",children:(0,s.jsx)(l.A,{className:"language-java",children:U})}),(0,s.jsx)(i.A,{value:"php",label:"PHP (gRPC)",children:(0,s.jsx)(l.A,{className:"language-php",children:j})}),(0,s.jsx)(i.A,{value:"curl",label:"cURL",children:(0,s.jsx)(l.A,{className:"language-bash",children:v})})]})]})}function M(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(K,{...e})}):K(e)}},38278:(e,n,t)=>{t.d(n,{A:()=>o});const o=t.p+"assets/images/collector-10-fb0a6e61413c40724382596b9e31a07b.png"},40180:(e,n,t)=>{t.d(n,{A:()=>o});const o=t.p+"assets/images/collector-9-03c76c0401709aa872d230273a2b4b3f.png"},59873:(e,n,t)=>{t.d(n,{A:()=>o});const o=t.p+"assets/images/collector-4-ba45a9021398e93e0863d58b4cf79bcf.png"},61309:(e,n,t)=>{t.d(n,{A:()=>o});const o=t.p+"assets/images/collector-8-ffbea7fc8fc01a018eba888209566e8b.png"},66099:(e,n,t)=>{t.d(n,{A:()=>o});const o=t.p+"assets/images/collector-6-bd8cf5f96fb5ea4b8dedf419a24fb1d7.png"},66775:(e,n,t)=>{t.d(n,{A:()=>o});const o=t.p+"assets/images/collector-2-643f2c05f9b1446207b8754fd183e1c6.png"},77295:(e,n,t)=>{t.d(n,{A:()=>o});const o=t.p+"assets/images/collector-11-d62ebd742c395e550a8e21be62507ee6.png"},82492:(e,n,t)=>{t.d(n,{A:()=>o});const o=t.p+"assets/images/collector-1-f195da47a698cefa33c5a761044762e9.png"},91608:(e,n,t)=>{t.d(n,{A:()=>o});const o=t.p+"assets/images/collector-5-8f0fc03050c12851e307326777cf7bf7.png"}}]);
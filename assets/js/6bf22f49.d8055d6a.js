"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[9438],{19365:(n,e,t)=>{t.d(e,{A:()=>i});var a=t(96540),s=t(20053);const o={tabItem:"tabItem_Ymn6"};function i(n){let{children:e,hidden:t,className:i}=n;return a.createElement("div",{role:"tabpanel",className:(0,s.A)(o.tabItem,i),hidden:t},e)}},11470:(n,e,t)=>{t.d(e,{A:()=>f});var a=t(58168),s=t(96540),o=t(20053),i=t(23104),r=t(56347),c=t(57485),u=t(31682),p=t(89466);function l(n){return function(n){return s.Children.map(n,(n=>{if(!n||(0,s.isValidElement)(n)&&function(n){const{props:e}=n;return!!e&&"object"==typeof e&&"value"in e}(n))return n;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof n.type?n.type:n.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(n).map((n=>{let{props:{value:e,label:t,attributes:a,default:s}}=n;return{value:e,label:t,attributes:a,default:s}}))}function d(n){const{values:e,children:t}=n;return(0,s.useMemo)((()=>{const n=e??l(t);return function(n){const e=(0,u.X)(n,((n,e)=>n.value===e.value));if(e.length>0)throw new Error(`Docusaurus error: Duplicate values "${e.map((n=>n.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(n),n}),[e,t])}function _(n){let{value:e,tabValues:t}=n;return t.some((n=>n.value===e))}function E(n){let{queryString:e=!1,groupId:t}=n;const a=(0,r.W6)(),o=function(n){let{queryString:e=!1,groupId:t}=n;if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:e,groupId:t});return[(0,c.aZ)(o),(0,s.useCallback)((n=>{if(!o)return;const e=new URLSearchParams(a.location.search);e.set(o,n),a.replace({...a.location,search:e.toString()})}),[o,a])]}function I(n){const{defaultValue:e,queryString:t=!1,groupId:a}=n,o=d(n),[i,r]=(0,s.useState)((()=>function(n){let{defaultValue:e,tabValues:t}=n;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!_({value:e,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${t.map((n=>n.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const a=t.find((n=>n.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:e,tabValues:o}))),[c,u]=E({queryString:t,groupId:a}),[l,I]=function(n){let{groupId:e}=n;const t=function(n){return n?`docusaurus.tab.${n}`:null}(e),[a,o]=(0,p.Dv)(t);return[a,(0,s.useCallback)((n=>{t&&o.set(n)}),[t,o])]}({groupId:a}),h=(()=>{const n=c??l;return _({value:n,tabValues:o})?n:null})();(0,s.useLayoutEffect)((()=>{h&&r(h)}),[h]);return{selectedValue:i,selectValue:(0,s.useCallback)((n=>{if(!_({value:n,tabValues:o}))throw new Error(`Can't select invalid tab value=${n}`);r(n),u(n),I(n)}),[u,I,o]),tabValues:o}}var h=t(92303);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function T(n){let{className:e,block:t,selectedValue:r,selectValue:c,tabValues:u}=n;const p=[],{blockElementScrollPositionUntilNextRender:l}=(0,i.a_)(),d=n=>{const e=n.currentTarget,t=p.indexOf(e),a=u[t].value;a!==r&&(l(e),c(a))},_=n=>{let e=null;switch(n.key){case"Enter":d(n);break;case"ArrowRight":{const t=p.indexOf(n.currentTarget)+1;e=p[t]??p[0];break}case"ArrowLeft":{const t=p.indexOf(n.currentTarget)-1;e=p[t]??p[p.length-1];break}}e?.focus()};return s.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.A)("tabs",{"tabs--block":t},e)},u.map((n=>{let{value:e,label:t,attributes:i}=n;return s.createElement("li",(0,a.A)({role:"tab",tabIndex:r===e?0:-1,"aria-selected":r===e,key:e,ref:n=>p.push(n),onKeyDown:_,onClick:d},i,{className:(0,o.A)("tabs__item",g.tabItem,i?.className,{"tabs__item--active":r===e})}),t??e)})))}function A(n){let{lazy:e,children:t,selectedValue:a}=n;const o=(Array.isArray(t)?t:[t]).filter(Boolean);if(e){const n=o.find((n=>n.props.value===a));return n?(0,s.cloneElement)(n,{className:"margin-top--md"}):null}return s.createElement("div",{className:"margin-top--md"},o.map(((n,e)=>(0,s.cloneElement)(n,{key:e,hidden:n.props.value!==a}))))}function m(n){const e=I(n);return s.createElement("div",{className:(0,o.A)("tabs-container",g.tabList)},s.createElement(T,(0,a.A)({},n,e)),s.createElement(A,(0,a.A)({},n,e)))}function f(n){const e=(0,h.A)();return s.createElement(m,(0,a.A)({key:String(e)},n))}},50145:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>M,contentTitle:()=>G,default:()=>z,frontMatter:()=>J,metadata:()=>q,toc:()=>X});var a=t(58168),s=(t(96540),t(15680)),o=t(11470),i=t(19365),r=t(77964);const c='######################################################################################################\n# In this section, we set the user authentication, app ID, ID to collect statistics about inputs job \n# to be created, and cloud storage URL. Change these strings to run your own example.\n######################################################################################################\n\nUSER_ID = "YOUR_USER_ID_HERE"\n# Your PAT (Personal Access Token) can be found in the Portal under Account > Security\nPAT = "YOUR_PAT_HERE"\nAPP_ID = "YOUR_APP_ID_HERE"\n# Change these to create your own extraction job\nINPUTS_JOB_ID = ""  # If empty, ID will be autogenerated; if non-empty, the given ID will be used\nCLOUD_STORAGE_URL = "s3://samples.clarifai.com/storage/"\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (("authorization", "Key " + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\npost_inputs_response = stub.PostInputsDataSources(\n    service_pb2.PostInputsDataSourcesRequest(\n        user_app_id=userDataObject,\n        app_pat=PAT,\n        data_sources=[\n            resources_pb2.InputsDataSource(\n                inputs_add_job_id=INPUTS_JOB_ID,\n                url=resources_pb2.DataSourceURL(\n                    url=CLOUD_STORAGE_URL,\n                    # Uncomment to add credentials\n                    # credentials=resources_pb2.DataSourceCredentials(\n                    # s3_creds=resources_pb2.AWSCreds(\n                    # id="ADD_ACCESS_ID_HERE",\n                    # secret="ADD_SECRET_HERE",\n                    # region="ADD_AWS_REGION_HERE"\n                    # )\n                    # If using GCP\n                    # gcpCreds="" # GCP uses service account key data (creds.json) as Byte array for authentication\n                    # ),\n                ),\n            )\n        ],\n    ),\n    metadata=metadata,\n)\n\nif post_inputs_response.status.code != status_code_pb2.SUCCESS:\n    print(post_inputs_response.status)\n    raise Exception(\n        "Post inputs failed, status: " + post_inputs_response.status.description\n    )\n\nprint(post_inputs_response)\n',u='\x3c!--index.html file--\x3e\n\n<script>\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, ID to collect statistics about inputs job \n    // to be created, and cloud storage URL. Change these strings to run your own example.\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = "YOUR_USER_ID_HERE";\n    // Your PAT (Personal Access Token) can be found in the Account\'s Security section\n    const PAT = "YOUR_PAT_HERE";\n    const APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to create your own extraction job\n    const INPUTS_JOB_ID = "";  // If empty, ID will be autogenerated; if non-empty, the given ID will be used\n    const CLOUD_STORAGE_URL = "s3://samples.clarifai.com/storage/";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        "user_app_id": {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        "app_pat": PAT,\n        "data_sources": [\n            {\n                "inputs_add_job_id": INPUTS_JOB_ID,\n                "url": {\n                    "url": CLOUD_STORAGE_URL,\n                    // Uncomment to add credentials\n                   /* "credentials": {\n                        "s3_creds": { "id": "ADD_ACCESS_ID_HERE", "secret": "ADD_SECRET_HERE", "region": "ADD_AWS_REGION_HERE" }\n                    }*/\n                }\n            }\n        ]\n\n    });\n\n    const requestOptions = {\n        method: \'POST\',\n        headers: {\n            \'Accept\': \'application/json\',\n            \'Authorization\': \'Key \' + PAT\n        },\n        body: raw\n    };\n\n    fetch("https://api.clarifai.com/v2/inputs/data_sources/", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log(\'error\', error));\n\n<\/script>\n',p='//index.js file\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, ID to collect statistics about inputs job \n// to be created, and cloud storage URL. Change these strings to run your own example.\n///////////////////////////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = "YOUR_PAT_HERE";\nconst APP_ID = "YOUR_APP_ID_HERE";\n// Change these to create your own extraction job\nconst INPUTS_JOB_ID = "";  // If empty, ID will be autogenerated; if non-empty, the given ID will be used\nconst CLOUD_STORAGE_URL = "s3://samples.clarifai.com/storage/";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PostInputsDataSources(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        "app_pat": PAT,\n        "data_sources": [\n            {\n                "inputs_add_job_id": INPUTS_JOB_ID,\n                "url": {\n                    "url": CLOUD_STORAGE_URL,\n                    // Uncomment to add credentials\n                    /* "credentials": {\n                         "s3_creds": { "id": "ADD_ACCESS_ID_HERE", "secret": "ADD_SECRET_HERE", "region": "ADD_AWS_REGION_HERE" }\n                     }*/\n                }\n            }\n        ]\n\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            console.log(response.status);\n            throw new Error("Post inputs failed, status: " + response.status.description);\n        }\n\n        console.log(response);\n    }\n\n);',l='package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.status.*;\n\npublic class ClarifaiExample {\n\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, ID to collect statistics about inputs job \n    // to be created, and cloud storage URL. Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to create your own extraction job\n    static final String INPUTS_JOB_ID = "";  // If empty, ID will be autogenerated; if non-empty, the given ID will be used\n    static final String CLOUD_STORAGE_URL = "s3://samples.clarifai.com/storage/";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n                .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiInputsAddJobResponse postInputsResponse = stub.postInputsDataSources(\n                PostInputsDataSourcesRequest.newBuilder()\n                        .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n                        .setAppPat(PAT)\n                        .addDataSources(InputsDataSource.newBuilder().setInputsAddJobId(INPUTS_JOB_ID)\n                                .setUrl(DataSourceURL.newBuilder()\n                                        .setUrl(CLOUD_STORAGE_URL)\n                                // Uncomment to add credentials\n                                /*.setCredentials(DataSourceCredentials.newBuilder()\n                                                .setS3Creds(AWSCreds.newBuilder()\n                                                        .setId("ADD_ACCESS_ID_HERE")\n                                                        .setSecret("ADD_SECRET_HERE")\n                                                        .setRegion("ADD_AWS_REGION_HERE")\n                                                )\n                                        )*/\n                                )\n                        ).build()\n        );\n\n        if (postInputsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post inputs failed, status: " + postInputsResponse.getStatus());\n        }\n\n        System.out.println(postInputsResponse);\n\n    }\n\n}\n',d="<?php\n\nrequire __DIR__ . '/vendor/autoload.php';\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, ID to collect statistics about inputs job \n// to be created, and cloud storage URL. Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = 'YOUR_USER_ID_HERE';\n// Your PAT (Personal Access Token) can be found in the Account's Security section\n$PAT = 'YOUR_PAT_HERE';\n$APP_ID = 'YOUR_APP_ID_HERE';\n# Change these to create your own extraction job\n$INPUTS_JOB_ID = ''; # If empty, ID will be autogenerated; if non-empty, the given ID will be used\n$CLOUD_STORAGE_URL = 's3://samples.clarifai.com/storage/';\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\PostInputsDataSourcesRequest;\nuse Clarifai\\Api\\InputsDataSource;\nuse Clarifai\\Api\\DataSourceURL;\nuse Clarifai\\Api\\DataSourceCredentials;\nuse Clarifai\\Api\\AWSCreds;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ['Authorization' => ['Key ' . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    'user_id' => $USER_ID,\n    'app_id' => $APP_ID\n]);\n\n// Let's make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PostInputsDataSources(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new PostInputsDataSourcesRequest([\n        'user_app_id' => $userDataObject,\n        'app_pat' => $PAT,\n        'data_sources' => [\n            new InputsDataSource([\n                'inputs_add_job_id' => $INPUTS_JOB_ID,\n                'url' => new DataSourceURL([\n                    'url' => $CLOUD_STORAGE_URL,\n                    // Uncomment to add credentials\n                    /*'credentials' => new DataSourceCredentials([\n                        's3_creds' => new AWSCreds([\n                            'id' => 'ADD_ACCESS_ID_HERE',\n                            'secret' => 'ADD_SECRET_HERE',\n                            'region' => 'ADD_AWS_REGION_HERE'\n                        ])\n                    ])*/\n                ])\n            ])\n        ]\n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception(\"Error: {$status->details}\");\n}\n\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    throw new Exception(\"Failure response: \" . $response->getStatus()->getDescription() . \" \" .\n        $response->getStatus()->getDetails());\n}\n\necho $response->serializeToJsonString();\n\n?>\n",_='curl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/inputs/data_sources/" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "app_pat": "YOUR_PAT_HERE",\n    "data_sources": [\n        {\n            "inputs_add_job_id": "",\n            "url": {\n                "url": "s3://samples.clarifai.com/storage/",\n                "credentials": {\n                    "s3_creds": {"id":"ADD_ACCESS_ID_HERE", "secret":"ADD_SECRET_HERE", "region":"ADD_AWS_REGION_HERE"},\n                    // Or, you can use GCP credentials\n                    "gcpCreds": "" // GCP uses service account key data (creds.json) as Byte array for authentication\n                }\n            }\n        }\n    ]\n  }\'\n',E='###################################################################################################\n# In this section, we set the user authentication, app ID, and the inputs extraction job ID.\n# Change these strings to run your own example.\n###################################################################################################\n\nUSER_ID = "YOUR_USER_ID_HERE"\n# Your PAT (Personal Access Token) can be found in the Portal under Account > Security\nPAT = "YOUR_PAT_HERE"\nAPP_ID = "YOUR_APP_ID_HERE"\n# Change this ID to whatever inputs you want to track their upload process\nINPUTS_EXTRACTION_JOB_ID = "2a6f1f69cced42029986a72009e7d4da"\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (("authorization", "Key " + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\nget_inputs_extraction_response = stub.GetInputsExtractionJob(\n    service_pb2.GetInputsExtractionJobRequest(\n        user_app_id=userDataObject,\n        inputs_extraction_job_id=INPUTS_EXTRACTION_JOB_ID\n    ),\n    metadata=metadata,\n)\n\nif get_inputs_extraction_response.status.code != status_code_pb2.SUCCESS:\n    print(get_inputs_extraction_response.status)\n    raise Exception(\n        "Get input failed, status: " + get_inputs_extraction_response.status.description\n    )\n\nprint(get_inputs_extraction_response)\n',I="\x3c!--index.html file--\x3e\n\n<script>\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the inputs extraction job ID.\n    // Change these strings to run your own example.\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = \"YOUR_USER_ID_HERE\";\n    // Your PAT (Personal Access Token) can be found in the Account's Security section\n    const PAT = \"YOUR_PAT_HERE\";\n    const APP_ID = \"YOUR_APP_ID_HERE\";\n    // Change this ID to whatever inputs you want to track their upload process\n    const INPUTS_EXTRACTION_JOB_ID = \"2a6f1f69cced42029986a72009e7d4da\";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const requestOptions = {\n        method: 'GET',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        }\n    };\n\n    fetch(`https://api.clarifai.com/v2/users/${USER_ID}/apps/${APP_ID}/inputs/jobs/extraction/${INPUTS_EXTRACTION_JOB_ID}`, requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n\n<\/script>",h='//index.js file\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the inputs extraction job ID.\n// Change these strings to run your own example.\n///////////////////////////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = "YOUR_PAT_HERE";\nconst APP_ID = "YOUR_APP_ID_HERE";\n// Change this ID to whatever inputs you want to track their upload process\nconst INPUTS_EXTRACTION_JOB_ID = "2a6f1f69cced42029986a72009e7d4da";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\n\nmetadata.set("authorization", "Key " + PAT);\n\nstub.GetInputsExtractionJob(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        "inputs_extraction_job_id": INPUTS_EXTRACTION_JOB_ID\n\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            console.log(response.status);\n            throw new Error("Get inputs failed, status: " + response.status.description);\n        }\n\n        console.log(response);\n    }\n\n);',g='package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.status.*;\n\npublic class ClarifaiExample {\n\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the inputs extraction job ID.\n    // Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change this ID to whatever inputs you want to track their upload process\n    static final String INPUTS_EXTRACTION_JOB_ID = "2a6f1f69cced42029986a72009e7d4da";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n                .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        SingleInputsExtractionJobResponse getInputsResponse = stub.getInputsExtractionJob(\n                GetInputsExtractionJobRequest.newBuilder()\n                        .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n                        .setInputsExtractionJobId(INPUTS_EXTRACTION_JOB_ID)\n                        .build()\n        );\n\n        if (getInputsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post inputs failed, status: " + getInputsResponse.getStatus());\n        }\n\n        System.out.println(getInputsResponse);\n\n    }\n\n}\n',T="<?php\n\nrequire __DIR__ . '/vendor/autoload.php';\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the inputs extraction job ID.\n// Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = 'YOUR_USER_ID_HERE';\n// Your PAT (Personal Access Token) can be found in the Account's Security section\n$PAT = 'YOUR_PAT_HERE';\n$APP_ID = 'YOUR_APP_ID_HERE';\n// Change this ID to whatever inputs you want to track their upload process\n$INPUTS_EXTRACTION_JOB_ID = '2a6f1f69cced42029986a72009e7d4da';\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\GetInputsExtractionJobRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ['Authorization' => ['Key ' . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    'user_id' => $USER_ID,\n    'app_id' => $APP_ID\n]);\n\n// Let's make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->GetInputsExtractionJob(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new GetInputsExtractionJobRequest([\n        'user_app_id' => $userDataObject,        \n        'inputs_extraction_job_id' => $INPUTS_EXTRACTION_JOB_ID\n\n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception('Error: {$status->details}');\n}\n\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    throw new Exception('Failure response: ' . $response->getStatus()->getDescription() . ' ' .\n        $response->getStatus()->getDetails());\n}\n\necho $response->serializeToJsonString();\n\n?>\n",A='curl -X GET "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/inputs/jobs/extraction/YOUR_INPUTS_EXTRACTION_JOB_ID_HERE" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n',m='##################################################################\n# In this section, we set the user authentication and app ID.\n# Change these strings to run your own example.\n###################################################################\n\nUSER_ID = "YOUR_USER_ID_HERE"\n# Your PAT (Personal Access Token) can be found in the Portal under Account > Security\nPAT = "YOUR_PAT_HERE"\nAPP_ID = "YOUR_APP_ID_HERE"\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (("authorization", "Key " + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\nlist_inputs_extraction_jobs = stub.ListInputsExtractionJobs(\n    service_pb2.ListInputsExtractionJobsRequest(\n        user_app_id=userDataObject, per_page=1000, page=1\n    ),\n    metadata=metadata,\n)\n\nif list_inputs_extraction_jobs.status.code != status_code_pb2.SUCCESS:\n    print(list_inputs_extraction_jobs.status)\n    raise Exception(\n        "List input failed, status: " + list_inputs_extraction_jobs.status.description\n    )\n\nprint(list_inputs_extraction_jobs)\n',f="\x3c!--index.html file--\x3e\n\n<script>\n    ///////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication and app ID.\n    // Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////\n\n    const USER_ID = \"YOUR_USER_ID_HERE\";\n    // Your PAT (Personal Access Token) can be found in the Account's Security section\n    const PAT = \"YOUR_PAT_HERE\";\n    const APP_ID = \"YOUR_APP_ID_HERE\";\n   \n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const requestOptions = {\n        method: 'GET',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        }\n    };\n\n    fetch(`https://api.clarifai.com/v2/users/${USER_ID}/apps/${APP_ID}/inputs/jobs/extraction?per_page=1000&page=1`, requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n\n<\/script>\n",D='//index.js file\n\n//////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication and app ID.\n// Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////\n\nconst USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = "YOUR_PAT_HERE";\nconst APP_ID = "YOUR_APP_ID_HERE";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\n\nmetadata.set("authorization", "Key " + PAT);\n\nstub.ListInputsExtractionJobs(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        per_page: 1000, \n        page: 1\n\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            console.log(response.status);\n            throw new Error("List inputs failed, status: " + response.status.description);\n        }\n\n        console.log(response);\n    }\n\n);\n',C='package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.status.*;\n\npublic class ClarifaiExample {\n\n    ///////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication and app ID.\n    // Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n        \n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n                .withCallCredentials(new ClarifaiCallCredentials(PAT));\n        \n        MultiInputsExtractionJobResponse listInputsResponse = stub.listInputsExtractionJobs(\n                ListInputsExtractionJobsRequest.newBuilder()\n                        .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n                        .setPerPage(100).setPage(1)\n                        .build()\n        );\n        \n        if (listInputsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("List inputs failed, status: " + listInputsResponse.getStatus());\n        }\n        \n        System.out.println(listInputsResponse);\n        \n    }\n    \n}\n',S="<?php\n\nrequire __DIR__ . '/vendor/autoload.php';\n\n///////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication and app ID.\n// Change these strings to run your own example.\n///////////////////////////////////////////////////////////////////////\n\n$USER_ID = 'YOUR_USER_ID_HERE';\n// Your PAT (Personal Access Token) can be found in the Account's Security section\n$PAT = 'YOUR_PAT_HERE';\n$APP_ID = 'YOUR_APP_ID_HERE';\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\ListInputsExtractionJobsRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ['Authorization' => ['Key ' . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    'user_id' => $USER_ID,\n    'app_id' => $APP_ID\n]);\n\n// Let's make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->ListInputsExtractionJobs(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new ListInputsExtractionJobsRequest([\n        'user_app_id' => $userDataObject,\n        'per_page'=> 1000, \n        'page'=> 1\n\n\n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception('Error: {$status->details}');\n}\n\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    throw new Exception('Failure response: ' . $response->getStatus()->getDescription() . ' ' .\n        $response->getStatus()->getDetails());\n}\n\necho $response->serializeToJsonString();\n\n?>\n",b='curl -X GET "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/inputs/jobs/extraction?per_page=1000&page=1" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\',P='#####################################################################################################\n# In this section, we set the user authentication, app ID, and the inputs extraction job ID.\n# Change these strings to run your own example.\n#####################################################################################################\n\nUSER_ID = "YOUR_USER_ID_HERE"\n# Your PAT (Personal Access Token) can be found in the Portal under Account > Security\nPAT = "YOUR_PAT_HERE"\nAPP_ID = "YOUR_APP_ID_HERE"\n# Change this ID to whatever inputs you want to cancel their upload process\nINPUTS_EXTRACTION_JOB_ID = "2a6f1f69cced42029986a72009e7d4da"\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (("authorization", "Key " + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\ncancel_inputs_extraction_response = stub.CancelInputsExtractionJobs(\n    service_pb2.CancelInputsExtractionJobsRequest(\n        user_app_id=userDataObject, ids=[INPUTS_EXTRACTION_JOB_ID]\n    ),\n    metadata=metadata,\n)\n\nif cancel_inputs_extraction_response.status.code != status_code_pb2.SUCCESS:\n    print(cancel_inputs_extraction_response.status)\n    raise Exception(\n        "Cancel input failed, status: "\n        + cancel_inputs_extraction_response.status.description\n    )\n\nprint(cancel_inputs_extraction_response)\n',R="\x3c!--index.html file--\x3e\n\n<script>\n    //////////////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the inputs extraction job ID.\n    // Change these strings to run your own example.\n    /////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = \"YOUR_USER_ID_HERE\";\n    // Your PAT (Personal Access Token) can be found in the Account's Security section\n    const PAT = \"YOUR_PAT_HERE\";\n    const APP_ID = \"YOUR_APP_ID_HERE\";\n    // Change this ID to whatever inputs you want to cancel their upload process\n    const INPUTS_EXTRACTION_JOB_ID = \"2a6f1f69cced42029986a72009e7d4da\";\n   \n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const requestOptions = {\n        method: 'GET',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        }\n    };\n\n    fetch(`https://api.clarifai.com/v2/users/${USER_ID}/apps/${APP_ID}/inputs/jobs/extraction/${INPUTS_EXTRACTION_JOB_ID}`, requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n\n<\/script>\n",O='//index.js file\n\n////////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the inputs extraction job ID.\n// Change these strings to run your own example.\n///////////////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = "YOUR_PAT_HERE";\nconst APP_ID = "YOUR_APP_ID_HERE";\n// Change this ID to whatever inputs you want to cancel their upload process\nconst INPUTS_EXTRACTION_JOB_ID = "2a6f1f69cced42029986a72009e7d4da";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\n\nmetadata.set("authorization", "Key " + PAT);\n\nstub.CancelInputsExtractionJobs(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        ids: [INPUTS_EXTRACTION_JOB_ID]\n\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            console.log(response.status);\n            throw new Error("List inputs failed, status: " + response.status.description);\n        }\n\n        console.log(response);\n    }\n\n);\n',U='package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.status.*;\n\npublic class ClarifaiExample {\n\n    //////////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the inputs extraction job ID.\n    // Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change this ID to whatever inputs you want to cancel their upload process\n    static final String INPUTS_EXTRACTION_JOB_ID = "2a6f1f69cced42029986a72009e7d4da";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n        \n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n                .withCallCredentials(new ClarifaiCallCredentials(PAT));\n        \n        MultiInputsExtractionJobResponse cancelInputsResponse = stub.cancelInputsExtractionJobs(\n                CancelInputsExtractionJobsRequest.newBuilder()\n                        .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n                        .addIds(INPUTS_EXTRACTION_JOB_ID)\n                        .build()\n        );\n        \n        if (cancelInputsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post inputs failed, status: " + cancelInputsResponse.getStatus());\n        }\n        \n        System.out.println(cancelInputsResponse);\n        \n    }\n    \n}\n',y="<?php\n\nrequire __DIR__ . '/vendor/autoload.php';\n\n///////////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the inputs extraction job ID.\n// Change these strings to run your own example.\n///////////////////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = 'YOUR_USER_ID_HERE';\n// Your PAT (Personal Access Token) can be found in the Account's Security section\n$PAT = 'YOUR_PAT_HERE';\n$APP_ID = 'YOUR_APP_ID_HERE';\n// Change this ID to whatever inputs you want to cancel their upload process\n$INPUTS_EXTRACTION_JOB_ID = \"2a6f1f69cced42029986a72009e7d4da\";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\CancelInputsExtractionJobsRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ['Authorization' => ['Key ' . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    'user_id' => $USER_ID,\n    'app_id' => $APP_ID\n]);\n\n// Let's make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->CancelInputsExtractionJobs(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new CancelInputsExtractionJobsRequest([\n        'user_app_id' => $userDataObject,\n        'ids' => [$INPUTS_EXTRACTION_JOB_ID]\n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception('Error: {$status->details}');\n}\n\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    throw new Exception('Failure response: ' . $response->getStatus()->getDescription() . ' ' .\n        $response->getStatus()->getDetails());\n}\n\necho $response->serializeToJsonString();\n\n?>\n",N='curl -X GET "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/inputs/jobs/extraction/YOUR_INPUTS_EXTRACTION_JOB_ID_HERE" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\',w='#####################################################################################################\n# In this section, we set the user authentication, app ID, and the details of the extraction job.\n# Change these strings to run your own example.\n####################################################################################################\n\nUSER_ID = "YOUR_USER_ID_HERE"\n# Your PAT (Personal Access Token) can be found in the Portal under Account > Security\nPAT = "YOUR_PAT_HERE"\nAPP_ID = "YOUR_APP_ID_HERE"\n# Change these to make your own extraction\nINPUTS_JOB_ID = ""\nCLOUD_STORAGE_URL = "s3://samples.clarifai.com/storage/"\nCUSTOM_METADATA = {"id": "id001"}\nDATASET_ID_1 = "dataset-1"\nCONCEPT_ID_1 = "lamborghini23_A"\nCONCEPT_ID_2 = "spiderman_a"\n\n##############################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##############################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\nfrom google.protobuf.struct_pb2 import Struct\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (("authorization", "Key " + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\ninput_metadata = Struct()\n\ninput_metadata.update(CUSTOM_METADATA)\n\npost_inputs_response = stub.PostInputsDataSources(\n    service_pb2.PostInputsDataSourcesRequest(\n        user_app_id=userDataObject,\n        app_pat=PAT,\n        data_sources=[\n            resources_pb2.InputsDataSource(\n                inputs_add_job_id=INPUTS_JOB_ID,\n                url=resources_pb2.DataSourceURL(url=CLOUD_STORAGE_URL),\n                input_template=resources_pb2.Input(\n                    dataset_ids=[DATASET_ID_1],  # List of dataset IDs that this input is part of\n                    data=resources_pb2.Data(\n                        metadata=input_metadata,\n                        concepts=[\n                            resources_pb2.Concept(id=CONCEPT_ID_1, value=1),\n                            resources_pb2.Concept(id=CONCEPT_ID_2, value=1),\n                        ],\n                    ),\n                ),\n            )\n        ],\n    ),\n    metadata=metadata,\n)\n\n\nif post_inputs_response.status.code != status_code_pb2.SUCCESS:\n    print(post_inputs_response.status)\n    raise Exception(\n        "Post inputs failed, status: " + post_inputs_response.status.description\n    )\n\nprint(post_inputs_response)\n',x='\x3c!--index.html file--\x3e\n\n<script>\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the details of the extraction job.\n    // Change these strings to run your own example.\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = "YOUR_USER_ID_HERE";\n    // Your PAT (Personal Access Token) can be found in the Account\'s Security section\n    const PAT = "YOUR_PAT_HERE";\n    const APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to make your own extraction\n    const INPUTS_JOB_ID = "";\n    const CLOUD_STORAGE_URL = "s3://samples.clarifai.com/storage/";\n    const CUSTOM_METADATA = { "id": "id001" };\n    const DATASET_ID_1 = "dataset-1";\n    const CONCEPT_ID_1 = "lamborghini23_A";\n    const CONCEPT_ID_2 = "spiderman_a";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        "user_app_id": {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        "app_pat": PAT,\n        "data_sources": [\n            {\n                "inputs_add_job_id": INPUTS_JOB_ID,\n                "url": {\n                    "url": CLOUD_STORAGE_URL,\n\n                },\n                "input_template": {\n                    "dataset_ids": [DATASET_ID_1],\n                    "data": {\n                        "metadata": CUSTOM_METADATA,\n                        "concepts": [\n                            {\n                                "id": CONCEPT_ID_1,\n                                "value": 1\n                            },\n                            {\n                                "id": CONCEPT_ID_2,\n                                "value": 1\n                            }\n                        ]\n                    }\n                }\n            }\n        ]\n\n    });\n\n    const requestOptions = {\n        method: \'POST\',\n        headers: {\n            \'Accept\': \'application/json\',\n            \'Authorization\': \'Key \' + PAT\n        },\n        body: raw\n    };\n\n    fetch("https://api.clarifai.com/v2/inputs/data_sources/", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log(\'error\', error));\n\n<\/script>\n',v='//index.js file\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the details of the extraction job.\n// Change these strings to run your own example.\n///////////////////////////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = "YOUR_PAT_HERE";\nconst APP_ID = "YOUR_APP_ID_HERE";\n// Change these to make your own extraction\nconst INPUTS_JOB_ID = "";\nconst CLOUD_STORAGE_URL = "s3://samples.clarifai.com/storage/";\nconst CUSTOM_METADATA = { "id": "id001" };\nconst DATASET_ID_1 = "dataset-1";\nconst CONCEPT_ID_1 = "lamborghini23_A";\nconst CONCEPT_ID_2 = "spiderman_a";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PostInputsDataSources(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        "app_pat": PAT,\n        "data_sources": [\n            {\n                "inputs_add_job_id": INPUTS_JOB_ID,\n                "url": {\n                    "url": CLOUD_STORAGE_URL\n                },\n                "input_template": {\n                    "dataset_ids": [DATASET_ID_1],\n                    "data": {\n                        "metadata": CUSTOM_METADATA,\n                        "concepts": [\n                            {\n                                "id": CONCEPT_ID_1,\n                                "value": 1\n                            },\n                            {\n                                "id": CONCEPT_ID_2,\n                                "value": 1\n                            }\n                        ]\n                    }\n                }\n            }\n        ]\n\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            console.log(response.status);\n            throw new Error("Post inputs failed, status: " + response.status.description);\n        }\n\n        console.log(response);\n    }\n\n);\n',H='package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.google.protobuf.Struct;\nimport com.google.protobuf.Value;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.status.*;\n\npublic class ClarifaiExample {\n\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the details of the extraction job.\n    // Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to make your own extraction\n    static final String INPUTS_JOB_ID = "";\n    static final String CLOUD_STORAGE_URL = "s3://samples.clarifai.com/storage/";\n    static final String CUSTOM_METADATA_1 = "id";\n    static final String CUSTOM_METADATA_2 = "id001";\n    static final String DATASET_ID_1 = "dataset-1";\n    static final String CONCEPT_ID_1 = "lamborghini23_A";\n    static final String CONCEPT_ID_2 = "spiderman_a";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n                .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiInputsAddJobResponse postInputsResponse = stub.postInputsDataSources(\n                PostInputsDataSourcesRequest.newBuilder()\n                        .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n                        .setAppPat(PAT)\n                        .addDataSources(InputsDataSource.newBuilder().setInputsAddJobId(INPUTS_JOB_ID)\n                                .setUrl(DataSourceURL.newBuilder()\n                                        .setUrl(CLOUD_STORAGE_URL)\n                                )\n                                .setInputTemplate(Input.newBuilder()\n                                        .addDatasetIds(DATASET_ID_1)\n                                        .setData(Data.newBuilder()\n                                                .setMetadata(\n                                                        Struct.newBuilder()\n                                                                .putFields(CUSTOM_METADATA_1, Value.newBuilder().setStringValue(CUSTOM_METADATA_2).build())\n                                                )\n                                                .addConcepts(Concept.newBuilder()\n                                                        .setId(CONCEPT_ID_1)\n                                                        .setValue(1f)\n                                                )\n                                                .addConcepts(Concept.newBuilder()\n                                                        .setId(CONCEPT_ID_2)\n                                                        .setValue(1f)\n                                                )\n                                        ))\n                        ).build()\n        );\n\n        if (postInputsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post inputs failed, status: " + postInputsResponse.getStatus());\n        }\n\n        System.out.println(postInputsResponse);\n\n    }\n\n}\n',L="<?php\n\nrequire __DIR__ . '/vendor/autoload.php';\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the details of the extraction job.\n// Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = 'YOUR_USER_ID_HERE';\n// Your PAT (Personal Access Token) can be found in the Account's Security section\n$PAT = 'YOUR_PAT_HERE';\n$APP_ID = 'YOUR_APP_ID_HERE';\n// Change these to make your own extraction\n$INPUTS_JOB_ID = '';\n$CLOUD_STORAGE_URL = 's3://samples.clarifai.com/storage/';\n$CUSTOM_METADATA = '{\"id\": \"id001\"}';\n$DATASET_ID_1 = 'dataset-1';\n$CONCEPT_ID_1 = 'lamborghini23_A';\n$CONCEPT_ID_2 = 'spiderman_a';\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\PostInputsDataSourcesRequest;\nuse Clarifai\\Api\\InputsDataSource;\nuse Clarifai\\Api\\DataSourceURL;\nuse Clarifai\\Api\\Concept;\nuse Clarifai\\Api\\Data;\nuse Clarifai\\Api\\Input;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ['Authorization' => ['Key ' . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    'user_id' => $USER_ID,\n    'app_id' => $APP_ID\n]);\n\n// Decode the JSON object into a PHP object\n$CUSTOM_METADATA_DECODE = var_dump(json_decode($CUSTOM_METADATA));\n\n// Let's make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PostInputsDataSources(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new PostInputsDataSourcesRequest([\n        'user_app_id' => $userDataObject,\n        'app_pat' => $PAT,\n        'data_sources' => [\n            new InputsDataSource([\n                'inputs_add_job_id' => $INPUTS_JOB_ID,\n                'url' => new DataSourceURL([\n                    'url' => $CLOUD_STORAGE_URL,\n\n                ]),\n                'input_template' => new Input([\n                    'dataset_ids' => [$DATASET_ID_1],\n                    'data' => new Data([\n                        'metadata' => $CUSTOM_METADATA_DECODE,\n                        'concepts' => [\n                            new Concept([\n                                'id' => $CONCEPT_ID_1,\n                                'value' => 1\n                            ]),\n                            new Concept([\n                                'id' => $CONCEPT_ID_2,\n                                'value' => 1\n                            ])\n                        ]\n                    ])\n                ])\n            ])\n        ]\n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception(\"Error: {$status->details}\");\n}\n\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    throw new Exception(\"Failure response: \" . $response->getStatus()->getDescription() . \" \" .\n        $response->getStatus()->getDetails());\n}\n\necho $response->serializeToJsonString();\n\n?>\n",Y='curl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/inputs/data_sources/" \\\n-H "Authorization: Key YOUR_PAT_HERE" \\\n-H "Content-Type: application/json" \\\n-d \'{\n"app_pat": "YOUR_PAT_HERE",\n    "data_sources": [\n        {\n            "inputs_add_job_id": "",\n            "url": {\n                "url": "s3://samples.clarifai.com/storage/"\n            },\n            "input_template": {\n                "dataset_ids": ["dataset-1"],\n                "data": {\n                    "metadata": { "id": "id001" },\n                    "concepts": [\n                        {\n                            "id": "lamborghini23_A",\n                            "value": 1\n                        },\n                        {\n                            "id": "spiderman_a",\n                            "value": 1\n                        }\n                    ]\n                }\n            }\n        }\n    ]\n  }\'',j='status {\n  code: SUCCESS\n  description: "Ok"\n  req_id: "8759d87e31403bbd838794fe6016f36d"\n}\ninputs_add_jobs {\n  id: "2581ebd8d7cd42e7ac0da2bec14d5426"\n  progress {\n  }\n  created_at {\n    seconds: 1708361354\n    nanos: 820114719\n  }\n  modified_at {\n    seconds: 1708361354\n    nanos: 847655746\n  }\n  extraction_jobs {\n    status {\n      code: JOB_QUEUED\n      description: "Job is queued to be ran."\n    }\n    id: "2a6f1f69cced42029986a72009e7d4da"\n    url: "s3://samples.clarifai.com/storage/"\n    progress {\n    }\n    created_at {\n      seconds: 1708361354\n      nanos: 835105396\n    }\n    modified_at {\n      seconds: 1708361354\n      nanos: 835105396\n    }\n  }\n  status {\n    code: JOB_COMPLETED\n    description: "Job successfully ran."\n  }\n}\n',B='status {\n  code: SUCCESS\n  description: "Ok"\n  req_id: "bae1f832c8931d47388f875653e7035d"\n}\ninputs_extraction_job {\n  status {\n    code: JOB_COMPLETED\n    description: "Job successfully ran."\n  }\n  id: "2a6f1f69cced42029986a72009e7d4da"\n  url: "s3://samples.clarifai.com/storage/"\n  progress {\n    image_inputs_count: 3\n    video_inputs_count: 1\n  }\n  created_at {\n    seconds: 1708361354\n    nanos: 835105000\n  }\n  modified_at {\n    seconds: 1708361355\n    nanos: 386004000\n  }\n}\n',$='----\ninputs_extraction_jobs {\n  status {\n    code: JOB_COMPLETED\n    description: "Job successfully ran."\n  }\n  id: "487d863784804390a92e1108ee1ae1fb"\n  url: "s3://samples.clarifai.com/storage/"\n  progress {\n    image_inputs_count: 3\n    video_inputs_count: 1\n  }\n  created_at {\n    seconds: 1708406450\n    nanos: 685101000\n  }\n  modified_at {\n    seconds: 1708406451\n    nanos: 191007000\n  }\n}\ninputs_extraction_jobs {\n  status {\n    code: JOB_COMPLETED\n    description: "Job successfully ran."\n  }\n  id: "16d65cdff5d64ae8ba94ae59f5d7f43c"\n  url: "s3://samples.clarifai.com/storage/"\n  progress {\n    image_inputs_count: 3\n    video_inputs_count: 1\n  }\n  created_at {\n    seconds: 1708406156\n    nanos: 2926000\n  }\n  modified_at {\n    seconds: 1708406156\n    nanos: 560108000\n  }\n}\ninputs_extraction_jobs {\n  status {\n    code: JOB_COMPLETED\n    description: "Job successfully ran."\n  }\n  id: "423b4dfa36f64fffbe79cf845918d4c0"\n  url: "s3://samples.clarifai.com/storage/"\n  progress {\n    image_inputs_count: 3\n    video_inputs_count: 1\n  }\n  created_at {\n    seconds: 1708405684\n    nanos: 297689000\n  }\n  modified_at {\n    seconds: 1708405684\n    nanos: 778885000\n  }\n}\ninputs_extraction_jobs {\n  status {\n    code: JOB_COMPLETED\n    description: "Job successfully ran."\n  }\n  id: "a5af6a185ab148d4b7eb02e713d3340d"\n  url: "s3://samples.clarifai.com/storage/"\n  progress {\n    image_inputs_count: 3\n    video_inputs_count: 1\n  }\n  created_at {\n    seconds: 1708405639\n    nanos: 186106000\n  }\n  modified_at {\n    seconds: 1708405639\n    nanos: 696943000\n  }\n}\ninputs_extraction_jobs {\n  status {\n    code: JOB_COMPLETED\n    description: "Job successfully ran."\n  }\n  id: "1c10da09706d40448bf11fc5aaa8664b"\n  url: "s3://samples.clarifai.com/storage/"\n  progress {\n    image_inputs_count: 3\n    video_inputs_count: 1\n  }\n  created_at {\n    seconds: 1708405297\n    nanos: 953730000\n  }\n  modified_at {\n    seconds: 1708405298\n    nanos: 506209000\n  }\n}\ninputs_extraction_jobs {\n  status {\n    code: JOB_COMPLETED\n    description: "Job successfully ran."\n  }\n  id: "10ad7ba72e5e49899a042637178c9452"\n  url: "s3://samples.clarifai.com/storage/"\n  progress {\n    image_inputs_count: 3\n    video_inputs_count: 1\n  }\n  created_at {\n    seconds: 1708404787\n    nanos: 575667000\n  }\n  modified_at {\n    seconds: 1708404788\n    nanos: 141744000\n  }\n}\ninputs_extraction_jobs {\n  status {\n    code: JOB_COMPLETED\n    description: "Job successfully ran."\n  }\n  id: "8d7a240f39494ce18c3a5f4aeea687c1"\n  url: "s3://samples.clarifai.com/storage/"\n  progress {\n    image_inputs_count: 3\n    video_inputs_count: 1\n  }\n  created_at {\n    seconds: 1708403207\n    nanos: 89134000\n  }\n  modified_at {\n    seconds: 1708403207\n    nanos: 729276000\n  }\n}\ninputs_extraction_jobs {\n  status {\n    code: JOB_COMPLETED\n    description: "Job successfully ran."\n  }\n  id: "2a6f1f69cced42029986a72009e7d4da"\n  url: "s3://samples.clarifai.com/storage/"\n  progress {\n    image_inputs_count: 3\n    video_inputs_count: 1\n  }\n  created_at {\n    seconds: 1708361354\n    nanos: 835105000\n  }\n  modified_at {\n    seconds: 1708361355\n    nanos: 386004000\n  }\n}\ninputs_extraction_jobs {\n  status {\n    code: JOB_COMPLETED\n    description: "Job successfully ran."\n  }\n  id: "6db64516daf04abd97852407f9076e42"\n  url: "s3://samples.clarifai.com/storage/"\n  progress {\n    image_inputs_count: 3\n    video_inputs_count: 1\n  }\n  created_at {\n    seconds: 1708361312\n    nanos: 309789000\n  }\n  modified_at {\n    seconds: 1708361313\n    nanos: 435552000\n  }\n}\ninputs_extraction_jobs {\n  status {\n    code: JOB_COMPLETED\n    description: "Job successfully ran."\n  }\n  id: "7e4bd42e84294e8f9423e0a01783e3b1"\n  url: "s3://samples.clarifai.com/storage/"\n  progress {\n    image_inputs_count: 3\n    video_inputs_count: 1\n  }\n  created_at {\n    seconds: 1708354769\n    nanos: 17131000\n  }\n  modified_at {\n    seconds: 1708354769\n    nanos: 473323000\n  }\n  input_template {\n    data {\n      concepts {\n        id: "lamborghini23_A"\n        value: 1\n      }\n      concepts {\n        id: "spiderman_a"\n        value: 1\n      }\n      metadata {\n        fields {\n          key: "id"\n          value {\n            string_value: "id001"\n          }\n        }\n      }\n    }\n    dataset_ids: "dataset-1"\n  }\n}\n-----',k='status {\n  code: SUCCESS\n  description: "Ok"\n  req_id: "32694c6a3ef8fe3f6704502c0b053734"\n}\ninputs_add_jobs {\n  id: "66b5ca001e754111a81c4839cdabed10"\n  progress {\n  }\n  created_at {\n    seconds: 1708500170\n    nanos: 508992497\n  }\n  modified_at {\n    seconds: 1708500170\n    nanos: 582792601\n  }\n  extraction_jobs {\n    status {\n      code: JOB_QUEUED\n      description: "Job is queued to be ran."\n    }\n    id: "7e9b139f65fb4426a3d273d609758d34"\n    url: "s3://samples.clarifai.com/storage/"\n    progress {\n    }\n    created_at {\n      seconds: 1708500170\n      nanos: 550291872\n    }\n    modified_at {\n      seconds: 1708500170\n      nanos: 550291872\n    }\n    input_template {\n      data {\n        concepts {\n          id: "lamborghini23_A"\n          value: 1\n        }\n        concepts {\n          id: "spiderman_a"\n          value: 1\n        }\n        metadata {\n          fields {\n            key: "id"\n            value {\n              string_value: "id001"\n            }\n          }\n        }\n      }\n      dataset_ids: "dataset-1"\n    }\n  }\n  status {\n    code: JOB_COMPLETED\n    description: "Job successfully ran."\n  }\n}\n',J={description:"Learn how to extract inputs from cloud platforms to Clarifai",sidebar_position:3},G="Add Inputs From Cloud Storage",q={unversionedId:"api-guide/data/cloud-storage",id:"api-guide/data/cloud-storage",title:"Add Inputs From Cloud Storage",description:"Learn how to extract inputs from cloud platforms to Clarifai",source:"@site/docs/api-guide/data/cloud-storage.md",sourceDirName:"api-guide/data",slug:"/api-guide/data/cloud-storage",permalink:"/api-guide/data/cloud-storage",draft:!1,editUrl:"https://github.com/Clarifai/docs/blob/main/docs/api-guide/data/cloud-storage.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{description:"Learn how to extract inputs from cloud platforms to Clarifai",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Add, Get, Update, Delete",permalink:"/api-guide/data/create-get-update-delete"},next:{title:"Datasets",permalink:"/api-guide/data/datasets/"}},M={},X=[{value:"Add Inputs via Cloud Storage URLs",id:"add-inputs-via-cloud-storage-urls",level:2},{value:"Track Upload Process",id:"track-upload-process",level:2},{value:"List Inputs Extraction Jobs",id:"list-inputs-extraction-jobs",level:2},{value:"Cancel Extraction Jobs",id:"cancel-extraction-jobs",level:2},{value:"Add Inputs With Concepts and Datasets",id:"add-inputs-with-concepts-and-datasets",level:2}],V={toc:X},W="wrapper";function z(n){let{components:e,...t}=n;return(0,s.yg)(W,(0,a.A)({},V,t,{components:e,mdxType:"MDXLayout"}),(0,s.yg)("h1",{id:"add-inputs-from-cloud-storage"},"Add Inputs From Cloud Storage"),(0,s.yg)("p",null,(0,s.yg)("strong",{parentName:"p"},"Learn how to extract inputs from cloud platforms to Clarifai")),(0,s.yg)("hr",null),(0,s.yg)("p",null,"You can add inputs from various cloud storage platforms, such as S3 (Amazon Simple Storage Service) and GCP (Google Cloud Platform), by simply providing their corresponding URLs. In cases where access credentials are necessary, you can include them as part of the request."),(0,s.yg)("p",null,"This simplifies the process of adding inputs to our platform, offering a more efficient alternative to the conventional method of using the ",(0,s.yg)("strong",{parentName:"p"},"PostInputs")," endpoint for users who already have data stored in the cloud platforms."),(0,s.yg)("admonition",{type:"note"},(0,s.yg)("p",{parentName:"admonition"},"This functionality has been introduced starting from the ",(0,s.yg)("a",{parentName:"p",href:"https://docs.clarifai.com/product-updates/changelog/release101#api"},"10.1 release"),".")),(0,s.yg)("admonition",{type:"info"},(0,s.yg)("ul",{parentName:"admonition"},(0,s.yg)("li",{parentName:"ul"},(0,s.yg)("p",{parentName:"li"},"Image files stored in the cloud platforms will be treated as image inputs, video files as video inputs, etc. Archives will be extracted, and their contents will also be processed like this. ")),(0,s.yg)("li",{parentName:"ul"},(0,s.yg)("p",{parentName:"li"},"We do not support extraction of archives located inside other archives. ")),(0,s.yg)("li",{parentName:"ul"},(0,s.yg)("p",{parentName:"li"},"The cloud URL will serve as a filter prefix. For instance, in the case of an S3 URL like ",(0,s.yg)("inlineCode",{parentName:"p"},"s3:/bucket/images_folder/abc"),", files within the ",(0,s.yg)("inlineCode",{parentName:"p"},"images_folder")," will be processed starting with ",(0,s.yg)("inlineCode",{parentName:"p"},"abc"),", or within a subfolder beginning with ",(0,s.yg)("inlineCode",{parentName:"p"},"abc"),". For example, files such as ",(0,s.yg)("inlineCode",{parentName:"p"},"bucket/images_folder/abcImage.png")," or ",(0,s.yg)("inlineCode",{parentName:"p"},"bucket/images_folder/abc-1/Data.zip")," will be processed accordingly.")))),(0,s.yg)("h2",{id:"add-inputs-via-cloud-storage-urls"},"Add Inputs via Cloud Storage URLs"),(0,s.yg)("p",null,"Below is an example of pulling inputs from a subfolder of an S3 bucket. "),(0,s.yg)(o.A,{mdxType:"Tabs"},(0,s.yg)(i.A,{value:"python",label:"Python",mdxType:"TabItem"},(0,s.yg)(r.A,{className:"language-python",mdxType:"CodeBlock"},c)),(0,s.yg)(i.A,{value:"js_rest",label:"JavaScript (REST)",mdxType:"TabItem"},(0,s.yg)(r.A,{className:"language-javascript",mdxType:"CodeBlock"},u)),(0,s.yg)(i.A,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,s.yg)(r.A,{className:"language-javascript",mdxType:"CodeBlock"},p)),(0,s.yg)(i.A,{value:"java",label:"Java",mdxType:"TabItem"},(0,s.yg)(r.A,{className:"language-java",mdxType:"CodeBlock"},l)),(0,s.yg)(i.A,{value:"php",label:"PHP",mdxType:"TabItem"},(0,s.yg)(r.A,{className:"language-php",mdxType:"CodeBlock"},d)),(0,s.yg)(i.A,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,s.yg)(r.A,{className:"language-bash",mdxType:"CodeBlock"},_))),(0,s.yg)("details",null,(0,s.yg)("summary",null,"Output Example"),(0,s.yg)(r.A,{className:"language-javascript",mdxType:"CodeBlock"},j)),(0,s.yg)("h2",{id:"track-upload-process"},"Track Upload Process"),(0,s.yg)("p",null,"After starting to pull the inputs from a cloud storage service, you can track the progress of the exercise. Note that we\u2019ll use the ",(0,s.yg)("inlineCode",{parentName:"p"},"inputs_extraction_job_id")," returned after running the extraction job. "),(0,s.yg)(o.A,{mdxType:"Tabs"},(0,s.yg)(i.A,{value:"python",label:"Python",mdxType:"TabItem"},(0,s.yg)(r.A,{className:"language-python",mdxType:"CodeBlock"},E)),(0,s.yg)(i.A,{value:"js_rest",label:"JavaScript (REST)",mdxType:"TabItem"},(0,s.yg)(r.A,{className:"language-javascript",mdxType:"CodeBlock"},I)),(0,s.yg)(i.A,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,s.yg)(r.A,{className:"language-javascript",mdxType:"CodeBlock"},h)),(0,s.yg)(i.A,{value:"java",label:"Java",mdxType:"TabItem"},(0,s.yg)(r.A,{className:"language-java",mdxType:"CodeBlock"},g)),(0,s.yg)(i.A,{value:"php",label:"PHP",mdxType:"TabItem"},(0,s.yg)(r.A,{className:"language-php",mdxType:"CodeBlock"},T)),(0,s.yg)(i.A,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,s.yg)(r.A,{className:"language-bash",mdxType:"CodeBlock"},A))),(0,s.yg)("details",null,(0,s.yg)("summary",null,"Output Example"),(0,s.yg)(r.A,{className:"language-javascript",mdxType:"CodeBlock"},B)),(0,s.yg)("h2",{id:"list-inputs-extraction-jobs"},"List Inputs Extraction Jobs"),(0,s.yg)("p",null,"You can list all your inputs extraction jobs and get their details. "),(0,s.yg)(o.A,{mdxType:"Tabs"},(0,s.yg)(i.A,{value:"python",label:"Python",mdxType:"TabItem"},(0,s.yg)(r.A,{className:"language-python",mdxType:"CodeBlock"},m)),(0,s.yg)(i.A,{value:"js_rest",label:"JavaScript (REST)",mdxType:"TabItem"},(0,s.yg)(r.A,{className:"language-javascript",mdxType:"CodeBlock"},f)),(0,s.yg)(i.A,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,s.yg)(r.A,{className:"language-javascript",mdxType:"CodeBlock"},D)),(0,s.yg)(i.A,{value:"java",label:"Java",mdxType:"TabItem"},(0,s.yg)(r.A,{className:"language-java",mdxType:"CodeBlock"},C)),(0,s.yg)(i.A,{value:"php",label:"PHP",mdxType:"TabItem"},(0,s.yg)(r.A,{className:"language-php",mdxType:"CodeBlock"},S)),(0,s.yg)(i.A,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,s.yg)(r.A,{className:"language-bash",mdxType:"CodeBlock"},b))),(0,s.yg)("details",null,(0,s.yg)("summary",null,"Output Example"),(0,s.yg)(r.A,{className:"language-javascript",mdxType:"CodeBlock"},$)),(0,s.yg)("h2",{id:"cancel-extraction-jobs"},"Cancel Extraction Jobs"),(0,s.yg)("p",null,"You can cancel the process of extraction of inputs from a cloud storage service. Note that we\u2019ll use the ",(0,s.yg)("inlineCode",{parentName:"p"},"inputs_extraction_job_id")," returned after starting the extraction process. "),(0,s.yg)(o.A,{mdxType:"Tabs"},(0,s.yg)(i.A,{value:"python",label:"Python",mdxType:"TabItem"},(0,s.yg)(r.A,{className:"language-python",mdxType:"CodeBlock"},P)),(0,s.yg)(i.A,{value:"js_rest",label:"JavaScript (REST)",mdxType:"TabItem"},(0,s.yg)(r.A,{className:"language-javascript",mdxType:"CodeBlock"},R)),(0,s.yg)(i.A,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,s.yg)(r.A,{className:"language-javascript",mdxType:"CodeBlock"},O)),(0,s.yg)(i.A,{value:"java",label:"Java",mdxType:"TabItem"},(0,s.yg)(r.A,{className:"language-java",mdxType:"CodeBlock"},U)),(0,s.yg)(i.A,{value:"php",label:"PHP",mdxType:"TabItem"},(0,s.yg)(r.A,{className:"language-php",mdxType:"CodeBlock"},y)),(0,s.yg)(i.A,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,s.yg)(r.A,{className:"language-bash",mdxType:"CodeBlock"},N))),(0,s.yg)("h2",{id:"add-inputs-with-concepts-and-datasets"},"Add Inputs With Concepts and Datasets"),(0,s.yg)("p",null,"You can also add inputs from cloud storage platforms while attaching relevant concepts, assigning them to an already existing ",(0,s.yg)("a",{parentName:"p",href:"https://docs.clarifai.com/api-guide/data/datasets/dataset-basics"},"dataset"),", or adding other metadata information to them. "),(0,s.yg)("p",null,"The ",(0,s.yg)("inlineCode",{parentName:"p"},"input_template")," parameter allows you to do that. "),(0,s.yg)(o.A,{mdxType:"Tabs"},(0,s.yg)(i.A,{value:"python",label:"Python",mdxType:"TabItem"},(0,s.yg)(r.A,{className:"language-python",mdxType:"CodeBlock"},w)),(0,s.yg)(i.A,{value:"js_rest",label:"JavaScript (REST)",mdxType:"TabItem"},(0,s.yg)(r.A,{className:"language-javascript",mdxType:"CodeBlock"},x)),(0,s.yg)(i.A,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,s.yg)(r.A,{className:"language-javascript",mdxType:"CodeBlock"},v)),(0,s.yg)(i.A,{value:"java",label:"Java",mdxType:"TabItem"},(0,s.yg)(r.A,{className:"language-java",mdxType:"CodeBlock"},H)),(0,s.yg)(i.A,{value:"php",label:"PHP",mdxType:"TabItem"},(0,s.yg)(r.A,{className:"language-php",mdxType:"CodeBlock"},L)),(0,s.yg)(i.A,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,s.yg)(r.A,{className:"language-bash",mdxType:"CodeBlock"},Y))),(0,s.yg)("details",null,(0,s.yg)("summary",null,"Output Example"),(0,s.yg)(r.A,{className:"language-javascript",mdxType:"CodeBlock"},k)))}z.isMDXComponent=!0}}]);
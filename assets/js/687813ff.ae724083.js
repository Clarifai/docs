"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[8856],{11539:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>x,contentTitle:()=>y,default:()=>b,frontMatter:()=>f,metadata:()=>i,toc:()=>g});const i=JSON.parse('{"id":"compute/agents/mcp","title":"MCP","description":"Build performant MCP Servers with FastMCP for Clarifai","source":"@site/docs/compute/agents/mcp.md","sourceDirName":"compute/agents","slug":"/compute/agents/mcp","permalink":"/compute/agents/mcp","draft":false,"unlisted":false,"editUrl":"https://github.com/Clarifai/docs/blob/main/docs/compute/agents/mcp.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"description":"Build performant MCP Servers with FastMCP for Clarifai","sidebar_position":2,"toc_max_heading_level":4},"sidebar":"tutorialSidebar","previous":{"title":"Build Agents","permalink":"/compute/agents/build"},"next":{"title":"Authentication","permalink":"/control/authentication/"}}');var o=t(74848),a=t(28453),r=t(65537),l=t(79329),s=t(58069);const c='from typing import Any, Annotated\nfrom pydantic import Field\n\nfrom clarifai.runners.models.mcp_class import MCPModelClass\nfrom fastmcp import FastMCP \n\n\n# Initialize the server\nserver = FastMCP("my-trimmed-mcp-server", instructions="", stateless_http=True)\n\n\n@server.tool("calculate_sum", description="Add two numbers together")\ndef calculate_sum(\n    a: Annotated[Any, Field(description="first number")], \n    b: Annotated[Any, Field(description="second number")] \n):\n    return float(a) + float(b)\n\n\n@server.tool("weather", description="Get the current weather information for the given city")\ndef weather(city: Annotated[str, Field(description="The city to get weather for")]): \n    if city.lower() == "philly":\n        return "It\'s always sunny in Philadelphia!"\n    elif city.lower() == "seattle":\n        return "It\'s always rainy in Seattle!"\n    else:\n        return f"In {city} it\'s 74 F and cloudy."\n\n\nclass MyModelClass(MCPModelClass):\n    def get_server(self) -> FastMCP:\n        return server',d="build_info:\n  python_version: '3.12'\ninference_compute_info:\n  cpu_limit: '1'\n  cpu_memory: 1Gi\n  num_accelerators: 0\nmodel:\n  app_id: YOUR_APP_ID_HERE\n  id: YOUR_MODEL_ID_HERE\n  model_type_id: text-to-text\n  user_id: YOUR_USER_ID_HERE",h="clarifai>=11.4.8\nfastmcp>=2.3.4\npydantic>=2.11.5",p='from clarifai.urls.helper import ClarifaiUrlHelper\nfrom fastmcp import Client\nfrom fastmcp.client.transports import StreamableHttpTransport\nimport asyncio\nimport os\nimport logging\n\n# Suppress verbose MCP client HTTP logs\nlogging.getLogger(\'mcp.client.streamable_http\').setLevel(logging.CRITICAL)\n\n# Set as environment variable export CLARIFAI_PAT="YOUR_PAT_HERE"\nPAT = os.environ[\'CLARIFAI_PAT\']\n\n# Retrieve MCP API base URL from your current Clarifai configuration (optional helper)\nurl = ClarifaiUrlHelper().mcp_api_url()\n# url = ClarifaiUrlHelper().mcp_api_url(user_id="user-id-here", app_id="app-id-here", model_id="model-id-here") # Manually set MCP URL, and it takes precedence\nprint(url)\n\n# Create MCP HTTP transport targeting your deployed MCP model on Clarifai\ntransport = StreamableHttpTransport(url=url, headers={"Authorization": "Bearer " + PAT})\n\nasync def main():\n    print("=== Sample MCP Server Client Examples ===\\n")\n\n    async with Client(transport) as client:\n        # List all available tools exposed by the MCP server\n        print("Available tools:")\n        tools = await client.list_tools()\n        for tool in tools:\n            print(f"- {tool.name}: {tool.description}")\n        print("\\n" + "=" * 50 + "\\n")\n\n        # Example 1: Call \'calculate_sum\' tool\n        print("1. Calling \'calculate_sum\' to add two numbers:")\n        try:\n            result = await client.call_tool("calculate_sum", {"a": 10, "b": 25})\n            print(f"Result of 10 + 25: {result[0].text}")\n        except Exception as e:\n            print(f"Error calling calculate_sum: {e}")\n        print("\\n" + "=" * 50 + "\\n")\n\n        # Example 2: Call \'weather\' tool for different cities\n        print("2. Calling \'weather\' for different cities:")\n\n        # Call for Philly\n        try:\n            result_philly = await client.call_tool("weather", {"city": "Philly"})\n            print(f"Weather in Philly: {result_philly[0].text}")\n        except Exception as e:\n            print(f"Error calling weather for Philly: {e}")\n\n        # Call for Seattle\n        try:\n            result_seattle = await client.call_tool("weather", {"city": "Seattle"})\n            print(f"Weather in Seattle: {result_seattle[0].text}")\n        except Exception as e:\n            print(f"Error calling weather for Seattle: {e}")\n\nif __name__ == "__main__":\n    asyncio.run(main())\n',m="https://api.clarifai.com/v2/ext/mcp/v1/users/user-id/apps/app-id/models/model-id\n=== Sample MCP Server Client Examples ===\n\nAvailable tools:\n- calculate_sum: Add two numbers together\n- weather: Get the current weather information for the given city\n\n==================================================\n\n1. Calling 'calculate_sum' to add two numbers:\nResult of 10 + 25: 35.0\n\n==================================================\n\n2. Calling 'weather' for different cities:\nWeather in Philly: It's always sunny in Philadelphia!\nWeather in Seattle: It's always rainy in Seattle!",u='\nC:\\################> clarifai model upload\n[INFO] 14:07:44.107939 No checkpoints specified in the config file |  thread=24100\n[INFO] 14:07:44.123482 Using Python version 3.12 from the config file to build the Dockerfile |  thread=24100\n[INFO] 14:07:44.450947 New model will be created at https://clarifai.com/alfrick/upload-models-2/models/mcp-three with it\'s first version. |  thread=24100\nPress Enter to continue...\n[INFO] 14:07:50.242006 Uploading file... |  thread=2892\n[INFO] 14:07:50.243957 Upload complete! |  thread=2892\nStatus: Upload in progress, Progress: 0% - Starting upload.  request_id: sdk-python-11.4.10-aaaab087fab14d2f8f018ecff24bStatus: Upload done, Progress: 0% - Completed upload of files, initiating model version image build..  request_id: sdk-pStatus: Model image is currently being built., Progress: 0% - Model version image is being built.  request_id: sdk-pytho[INFO] 14:07:50.844814 Created Model Version ID: 42033db33ed84d66a5430f0f2110727d |  thread=24100\n[INFO] 14:07:50.846830 Full url to that version is: https://clarifai.com/alfrick/upload-models-2/models/mcp-three |  thread=24100\n[INFO] 14:07:56.510575 2025-06-11 11:07:49.677842 INFO: Downloading uploaded model from storage...\n\n2025-06-11 11:07:50.426948 INFO: Done downloading model\n\n2025-06-11 11:07:50.429705 INFO: Extracting upload...\n\n2025-06-11 11:07:50.433688 INFO: Done extracting upload\n\n2025-06-11 11:07:50.435837 INFO: Parsing requirements file for model version ID ****0f0f2110727d\n\n2025-06-11 11:07:50.462053 INFO: Dockerfile found at /shared/context/Dockerfile\n\ncat: /shared/context/downloader/hf_token: No such file or directory\n\n2025-06-11 11:07:51.114036 INFO: Setting up credentials\n\namazon-ecr-credential-helper\n\nVersion:    0.8.0\n\nGit commit: ********\n\n2025-06-11 11:07:51.117969 INFO: Building image...\n\n#1 \\[internal] load build definition from Dockerfile\n\n#1 transferring dockerfile: 2.61kB done\n\n#1 DONE 0.0s\n\n\n\n#2 resolve image config for docker-image://docker.io/docker/dockerfile:1.13-labs\n\n#2 DONE 0.1s\n\n\n\n#3 docker-image://docker.io/docker/dockerfile:1.13-labs@sha256:************18b8\n\n#3 resolve docker.io/docker/dockerfile:1.13-labs@sha256:************18b8 done\n\n#3 CACHED\n\n\n\n#4 \\[internal] load metadata for public.ecr.aws/clarifai-models/python-base:3.12-********\n\n#4 DONE 0.1s\n\n\n\n#5 \\[internal] load .dockerignore\n\n#5 transferring context: 2B done\n\n#5 DONE 0.0s\n\n\n\n#6 \\[internal] load build context\n\n#6 transferring context: 2.43kB done\n\n#6 DONE 0.0s\n\n\n\n#7 \\[final 1/8] FROM public.ecr.aws/clarifai-models/python-base:3.12-********@sha256:************54b2\n\n#7 resolve public.ecr.aws/clarifai-models/python-base:3.12-********@sha256:************54b2 done\n\n#7 CACHED\n\n\n\n#8 \\[final 2/8] COPY --link requirements.txt /home/nonroot/requirements.txt\n\n#8 merging done\n\n#8 DONE 0.0s\n\n\n\n#9 \\[final 3/8] RUN ["pip", "install", "--no-cache-dir", "-r", "/home/nonroot/requirements.txt"]\n\n#9 0.351 Collecting clarifai>=11.4.8 (from -r /home/nonroot/requirements.txt (line 1))\n\n#9 0.385   Downloading clarifai-11.5.0-py3-none-any.whl.metadata (22 kB)\n\n#9 0.399 Collecting fastmcp>=2.3.4 (from -r /home/nonroot/requirements.txt (line 2))\n\n#9 0.403   Downloading fastmcp-2.8.0-py3-none-any.whl.metadata (17 kB)\n\n#9 0.476 Collecting pydantic>=2.11.5 (from -r /home/nonroot/requirements.txt (line 3))\n\n#9 0.478   Downloading pydantic-2.11.5-py3-none-any.whl.metadata (67 kB)\n\n#9 0.508 Collecting clarifai-grpc>=11.5.5 (from clarifai>=11.4.8->-r /home/nonroot/requirements.txt (line 1))\n\n#9 0.512   Downloading clarifai_grpc-11.5.5-py3-none-any.whl.metadata (4.4 kB)\n\n#9 0.532 Collecting clarifai-protocol>=0.0.24 (from clarifai>=11.4.8->-r /home/nonroot/requirements.txt (line 1))\n\n#9 0.536   Downloading clarifai_protocol-0.0.24-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (14 kB)\n\n#9 0.629 Collecting numpy>=1.22.0 (from clarifai>=11.4.8->-r /home/nonroot/requirements.txt (line 1))\n\n#9 0.632   Downloading numpy-2.3.0-cp312-cp312-manylinux_2_28_x86_64.whl.metadata (62 kB)\n\n#9 0.642 Requirement already satisfied: tqdm>=4.65.0 in /venv/lib/python3.12/site-packages (from clarifai>=11.4.8->-r /home/nonroot/requirements.txt (line 1)) (4.67.1)\n\n#9 0.642 Requirement already satisfied: PyYAML>=6.0.1 in /venv/lib/python3.12/site-packages (from clarifai>=11.4.8->-r /home/nonroot/requirements.txt (line 1)) (6.0.2)\n\n#9 0.648 Collecting schema==0.7.5 (from clarifai>=11.4.8->-r /home/nonroot/requirements.txt (line 1))\n\n#9 0.651   Downloading schema-0.7.5-py2.py3-none-any.whl.metadata (34 kB)\n\n#9 0.738 Collecting Pillow>=9.5.0 (from clarifai>=11.4.8->-r /home/nonroot/requirements.txt (line 1))\n\n#9 0.742   Downloading pillow-11.2.1-cp312-cp312-manylinux_2_28_x86_64.whl.metadata (8.9 kB)\n\n#9 0.750 Collecting tabulate>=0.9.0 (from clarifai>=11.4.8->-r /home/nonroot/requirements.txt (line 1))\n\n#9 0.752   Downloading tabulate-0.9.0-py3-none-any.whl.metadata (34 kB)\n\n#9 0.756 Requirement already satisfied: fsspec>=2024.6.1 in /venv/lib/python3.12/site-packages (from clarifai>=11.4.8->-r /home/nonroot/requirements.txt (line 1)) (2025.3.2)\n\n#9 0.764 Collecting click>=8.1.7 (from clarifai>=11.4.8->-r /home/nonroot/requirements.txt (line 1))\n\n#9 0.768   Downloading click-8.2.1-py3-none-any.whl.metadata (2.5 kB)\n\n#9 0.769 Requirement already satisfied: requests>=2.32.3 in /venv/lib/python3.12/site-packages (from clarifai>=11.4.8->-r /home/nonroot/requirements.txt (line 1)) (2.32.3)\n\n#9 1.037 Collecting aiohttp>=3.10.0 (from clarifai>=11.4.8->-r /home/nonroot/requirements.txt (line 1))\n\n#9 1.039   Downloading aiohttp-3.12.12-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (7.6 kB)\n\n#9 1.047 Collecting contextlib2>=0.5.5 (from schema==0.7.5->clarifai>=11.4.8->-r /home/nonroot/requirements.txt (line 1))\n\n#9 1.050   Downloading contextlib2-21.6.0-py2.py3-none-any.whl.metadata (4.1 kB)\n\n#9 1.059 Collecting authlib>=1.5.2 (from fastmcp>=2.3.4->-r /home/nonroot/requirements.txt (line 2))\n\n#9 1.062   Downloading authlib-1.6.0-py2.py3-none-any.whl.metadata (4.1 kB)\n\n#9 1.069 Collecting exceptiongroup>=1.2.2 (from fastmcp>=2.3.4->-r /home/nonroot/requirements.txt (line 2))\n\n#9 1.072   Downloading exceptiongroup-1.3.0-py3-none-any.whl.metadata (6.7 kB)\n\n#9 1.083 Collecting httpx>=0.28.1 (from fastmcp>=2.3.4->-r /home/nonroot/requirements.txt (line 2))\n\n#9 1.086   Downloading httpx-0.28.1-py3-none-any.whl.metadata (7.1 kB)\n\n#9 1.094 Collecting mcp<2.0.0,>=1.9.2 (from fastmcp>=2.3.4->-r /home/nonroot/requirements.txt (line 2))\n\n#9 1.097   Downloading mcp-1.9.3-py3-none-any.whl.metadata (28 kB)\n\n#9 1.105 Collecting openapi-pydantic>=0.5.1 (from fastmcp>=2.3.4->-r /home/nonroot/requirements.txt (line 2))\n\n#9 1.109   Downloading openapi_pydantic-0.5.1-py3-none-any.whl.metadata (10 kB)\n\n#9 1.118 Collecting python-dotenv>=1.1.0 (from fastmcp>=2.3.4->-r /home/nonroot/requirements.txt (line 2))\n\n#9 1.122   Downloading python_dotenv-1.1.0-py3-none-any.whl.metadata (24 kB)\n\n#9 1.145 Collecting rich>=13.9.4 (from fastmcp>=2.3.4->-r /home/nonroot/requirements.txt (line 2))\n\n#9 1.149   Downloading rich-14.0.0-py3-none-any.whl.metadata (18 kB)\n\n#9 1.161 Collecting typer>=0.15.2 (from fastmcp>=2.3.4->-r /home/nonroot/requirements.txt (line 2))\n\n#9 1.164   Downloading typer-0.16.0-py3-none-any.whl.metadata (15 kB)\n\n#9 1.171 Collecting annotated-types>=0.6.0 (from pydantic>=2.11.5->-r /home/nonroot/requirements.txt (line 3))\n\n#9 1.174   Downloading annotated_types-0.7.0-py3-none-any.whl.metadata (15 kB)\n\n#9 1.549 Collecting pydantic-core==2.33.2 (from pydantic>=2.11.5->-r /home/nonroot/requirements.txt (line 3))\n\n#9 1.552   Downloading pydantic_core-2.33.2-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (6.8 kB)\n\n#9 1.554 Requirement already satisfied: typing-extensions>=4.12.2 in /venv/lib/python3.12/site-packages (from pydantic>=2.11.5->-r /home/nonroot/requirements.txt (line 3)) (4.13.0)\n\n#9 1.559 Collecting typing-inspection>=0.4.0 (from pydantic>=2.11.5->-r /home/nonroot/requirements.txt (line 3))\n\n#9 1.562   Downloading typing_inspection-0.4.1-py3-none-any.whl.metadata (2.6 kB)\n\n#9 1.572 Collecting aiohappyeyeballs>=2.5.0 (from aiohttp>=3.10.0->clarifai>=11.4.8->-r /home/nonroot/requirements.txt (line 1))\n\n#9 1.575   Downloading aiohappyeyeballs-2.6.1-py3-none-any.whl.metadata (5.9 kB)\n\n#9 1.582 Collecting aiosignal>=1.1.2 (from aiohttp>=3.10.0->clarifai>=11.4.8->-r /home/nonroot/requirements.txt (line 1))\n\n#9 1.586   Downloading aiosignal-1.3.2-py2.py3-none-any.whl.metadata (3.8 kB)\n\n#9 1.595 Collecting attrs>=17.3.0 (from aiohttp>=3.10.0->clarifai>=11.4.8->-r /home/nonroot/requirements.txt (line 1))\n\n#9 1.598   Downloading attrs-25.3.0-py3-none-any.whl.metadata (10 kB)\n\n#9 1.639 Collecting frozenlist>=1.1.1 (from aiohttp>=3.10.0->clarifai>=11.4.8->-r /home/nonroot/requirements.txt (line 1))\n\n#9 1.642   Downloading frozenlist-1.7.0-cp312-cp312-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (18 kB)\n\n#9 1.745 Collecting multidict<7.0,>=4.5 (from aiohttp>=3.10.0->clarifai>=11.4.8->-r /home/nonroot/requirements.txt (line 1))\n\n#9 1.748   Downloading multidict-6.4.4-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (5.3 kB)\n\n#9 1.770 Collecting propcache>=0.2.0 (from aiohttp>=3.10.0->clarifai>=11.4.8->-r /home/nonroot/requirements.txt (line 1))\n\n#9 1.774   Downloading propcache-0.3.2-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (12 kB)\n\n#9 1.905 Collecting yarl<2.0,>=1.17.0 (from aiohttp>=3.10.0->clarifai>=11.4.8->-r /home/nonroot/requirements.txt (line 1))\n\n#9 1.908   Downloading yarl-1.20.1-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (73 kB)\n\n#9 2.019 Collecting cryptography (from authlib>=1.5.2->fastmcp>=2.3.4->-r /home/nonroot/requirements.txt (line 2))\n\n#9 2.022   Downloading cryptography-45.0.4-cp311-abi3-manylinux_2_34_x86_64.whl.metadata (5.7 kB)\n\n#9 2.279 Collecting grpcio>=1.53.2 (from clarifai-grpc>=11.5.5->clarifai>=11.4.8->-r /home/nonroot/requirements.txt (line 1))\n\n#9 2.282   Downloading grpcio-1.73.0-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (3.8 kB)\n\n#9 2.367 Collecting protobuf>=3.20.3 (from clarifai-grpc>=11.5.5->clarifai>=11.4.8->-r /home/nonroot/requirements.txt (line 1))\n\n#9 2.370   Downloading protobuf-6.31.1-cp39-abi3-manylinux2014_x86_64.whl.metadata (593 bytes)\n\n#9 2.380 Collecting googleapis-common-protos>=1.57.0 (from clarifai-grpc>=11.5.5->clarifai>=11.4.8->-r /home/nonroot/requirements.txt (line 1))\n\n#9 2.383   Downloading googleapis_common_protos-1.70.0-py3-none-any.whl.metadata (9.3 kB)\n\n#9 2.418 Collecting anyio (from httpx>=0.28.1->fastmcp>=2.3.4->-r /home/nonroot/requirements.txt (line 2))\n\n#9 2.420   Downloading anyio-4.9.0-py3-none-any.whl.metadata (4.7 kB)\n\n#9 2.423 Requirement already satisfied: certifi in /venv/lib/python3.12/site-packages (from httpx>=0.28.1->fastmcp>=2.3.4->-r /home/nonroot/requirements.txt (line 2)) (2025.1.31)\n\n#9 2.433 Collecting httpcore==1.* (from httpx>=0.28.1->fastmcp>=2.3.4->-r /home/nonroot/requirements.txt (line 2))\n\n#9 2.436   Downloading httpcore-1.0.9-py3-none-any.whl.metadata (21 kB)\n\n#9 2.439 Requirement already satisfied: idna in /venv/lib/python3.12/site-packages (from httpx>=0.28.1->fastmcp>=2.3.4->-r /home/nonroot/requirements.txt (line 2)) (3.10)\n\n#9 2.444 Collecting h11>=0.16 (from httpcore==1.*->httpx>=0.28.1->fastmcp>=2.3.4->-r /home/nonroot/requirements.txt (line 2))\n\n#9 2.448   Downloading h11-0.16.0-py3-none-any.whl.metadata (8.3 kB)\n\n#9 2.457 Collecting httpx-sse>=0.4 (from mcp<2.0.0,>=1.9.2->fastmcp>=2.3.4->-r /home/nonroot/requirements.txt (line 2))\n\n#9 2.460   Downloading httpx_sse-0.4.0-py3-none-any.whl.metadata (9.0 kB)\n\n#9 2.471 Collecting pydantic-settings>=2.5.2 (from mcp<2.0.0,>=1.9.2->fastmcp>=2.3.4->-r /home/nonroot/requirements.txt (line 2))\n\n#9 2.474   Downloading pydantic_settings-2.9.1-py3-none-any.whl.metadata (3.8 kB)\n\n#9 2.491 Collecting python-multipart>=0.0.9 (from mcp<2.0.0,>=1.9.2->fastmcp>=2.3.4->-r /home/nonroot/requirements.txt (line 2))\n\n#9 2.494   Downloading python_multipart-0.0.20-py3-none-any.whl.metadata (1.8 kB)\n\n#9 2.503 Collecting sse-starlette>=1.6.1 (from mcp<2.0.0,>=1.9.2->fastmcp>=2.3.4->-r /home/nonroot/requirements.txt (line 2))\n\n#9 2.506   Downloading sse_starlette-2.3.6-py3-none-any.whl.metadata (10 kB)\n\n#9 2.544 Collecting starlette>=0.27 (from mcp<2.0.0,>=1.9.2->fastmcp>=2.3.4->-r /home/nonroot/requirements.txt (line 2))\n\n#9 2.547   Downloading starlette-0.47.0-py3-none-any.whl.metadata (6.2 kB)\n\n#9 2.564 Collecting uvicorn>=0.23.1 (from mcp<2.0.0,>=1.9.2->fastmcp>=2.3.4->-r /home/nonroot/requirements.txt (line 2))\n\n#9 2.568   Downloading uvicorn-0.34.3-py3-none-any.whl.metadata (6.5 kB)\n\n#9 2.585 Requirement already satisfied: charset-normalizer<4,>=2 in /venv/lib/python3.12/site-packages (from requests>=2.32.3->clarifai>=11.4.8->-r /home/nonroot/requirements.txt (line 1)) (3.4.1)\n\n#9 2.585 Requirement already satisfied: urllib3<3,>=1.21.1 in /venv/lib/python3.12/site-packages (from requests>=2.32.3->clarifai>=11.4.8->-r /home/nonroot/requirements.txt (line 1)) (2.3.0)\n\n#9 2.594 Collecting markdown-it-py>=2.2.0 (from rich>=13.9.4->fastmcp>=2.3.4->-r /home/nonroot/requirements.txt (line 2)) |  thread=24100\n[INFO] 14:08:01.520618 #9 2.494   Downloading python_multipart-0.0.20-py3-none-any.whl.metadata (1.8 kB)\n\n#9 2.503 Collecting sse-starlette>=1.6.1 (from mcp<2.0.0,>=1.9.2->fastmcp>=2.3.4->-r /home/nonroot/requirements.txt (line 2))\n\n#9 2.506   Downloading sse_starlette-2.3.6-py3-none-any.whl.metadata (10 kB)\n\n#9 2.544 Collecting starlette>=0.27 (from mcp<2.0.0,>=1.9.2->fastmcp>=2.3.4->-r /home/nonroot/requirements.txt (line 2))\n\n#9 2.547   Downloading starlette-0.47.0-py3-none-any.whl.metadata (6.2 kB)\n\n#9 2.564 Collecting uvicorn>=0.23.1 (from mcp<2.0.0,>=1.9.2->fastmcp>=2.3.4->-r /home/nonroot/requirements.txt (line 2))\n\n#9 2.568   Downloading uvicorn-0.34.3-py3-none-any.whl.metadata (6.5 kB)\n\n#9 2.585 Requirement already satisfied: charset-normalizer<4,>=2 in /venv/lib/python3.12/site-packages (from requests>=2.32.3->clarifai>=11.4.8->-r /home/nonroot/requirements.txt (line 1)) (3.4.1)\n\n#9 2.585 Requirement already satisfied: urllib3<3,>=1.21.1 in /venv/lib/python3.12/site-packages (from requests>=2.32.3->clarifai>=11.4.8->-r /home/nonroot/requirements.txt (line 1)) (2.3.0)\n\n#9 2.594 Collecting markdown-it-py>=2.2.0 (from rich>=13.9.4->fastmcp>=2.3.4->-r /home/nonroot/requirements.txt (line 2))\n\n#9 2.597   Downloading markdown_it_py-3.0.0-py3-none-any.whl.metadata (6.9 kB)\n\n#9 2.612 Collecting pygments<3.0.0,>=2.13.0 (from rich>=13.9.4->fastmcp>=2.3.4->-r /home/nonroot/requirements.txt (line 2))\n\n#9 2.615   Downloading pygments-2.19.1-py3-none-any.whl.metadata (2.5 kB)\n\n#9 2.630 Collecting shellingham>=1.3.0 (from typer>=0.15.2->fastmcp>=2.3.4->-r /home/nonroot/requirements.txt (line 2))\n\n#9 2.633   Downloading shellingham-1.5.4-py2.py3-none-any.whl.metadata (3.5 kB)\n\n#9 2.653 Collecting sniffio>=1.1 (from anyio->httpx>=0.28.1->fastmcp>=2.3.4->-r /home/nonroot/requirements.txt (line 2))\n\n#9 2.656   Downloading sniffio-1.3.1-py3-none-any.whl.metadata (3.9 kB)\n\n#9 2.701 Collecting mdurl~=0.1 (from markdown-it-py>=2.2.0->rich>=13.9.4->fastmcp>=2.3.4->-r /home/nonroot/requirements.txt (line 2))\n\n#9 2.704   Downloading mdurl-0.1.2-py3-none-any.whl.metadata (1.6 kB)\n\n#9 2.794 Collecting cffi>=1.14 (from cryptography->authlib>=1.5.2->fastmcp>=2.3.4->-r /home/nonroot/requirements.txt (line 2))\n\n#9 2.798   Downloading cffi-1.17.1-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (1.5 kB)\n\n#9 2.805 Collecting pycparser (from cffi>=1.14->cryptography->authlib>=1.5.2->fastmcp>=2.3.4->-r /home/nonroot/requirements.txt (line 2))\n\n#9 2.808   Downloading pycparser-2.22-py3-none-any.whl.metadata (943 bytes)\n\n#9 2.819 Downloading clarifai-11.5.0-py3-none-any.whl (229 kB)\n\n#9 2.824 Downloading schema-0.7.5-py2.py3-none-any.whl (17 kB)\n\n#9 2.828 Downloading fastmcp-2.8.0-py3-none-any.whl (137 kB)\n\n#9 2.832 Downloading pydantic-2.11.5-py3-none-any.whl (444 kB)\n\n#9 2.835 Downloading pydantic_core-2.33.2-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (2.0 MB)\n\n#9 2.840    \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 2.0/2.0 MB 585.2 MB/s eta 0:00:00\n\n#9 2.843 Downloading aiohttp-3.12.12-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (1.7 MB)\n\n#9 2.848    \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 1.7/1.7 MB 460.3 MB/s eta 0:00:00\n\n#9 2.851 Downloading annotated_types-0.7.0-py3-none-any.whl (13 kB)\n\n#9 2.854 Downloading authlib-1.6.0-py2.py3-none-any.whl (239 kB)\n\n#9 2.858 Downloading clarifai_grpc-11.5.5-py3-none-any.whl (290 kB)\n\n#9 2.863 Downloading clarifai_protocol-0.0.24-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (412 kB)\n\n#9 2.868 Downloading click-8.2.1-py3-none-any.whl (102 kB)\n\n#9 2.870 Downloading exceptiongroup-1.3.0-py3-none-any.whl (16 kB)\n\n#9 2.873 Downloading httpx-0.28.1-py3-none-any.whl (73 kB)\n\n#9 2.876 Downloading httpcore-1.0.9-py3-none-any.whl (78 kB)\n\n#9 2.880 Downloading mcp-1.9.3-py3-none-any.whl (131 kB)\n\n#9 2.883 Downloading numpy-2.3.0-cp312-cp312-manylinux_2_28_x86_64.whl (16.6 MB)\n\n#9 2.916    \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 16.6/16.6 MB 517.3 MB/s eta 0:00:00\n\n#9 2.920 Downloading openapi_pydantic-0.5.1-py3-none-any.whl (96 kB)\n\n#9 2.923 Downloading pillow-11.2.1-cp312-cp312-manylinux_2_28_x86_64.whl (4.6 MB)\n\n#9 2.932    \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 4.6/4.6 MB 560.3 MB/s eta 0:00:00\n\n#9 2.935 Downloading python_dotenv-1.1.0-py3-none-any.whl (20 kB)\n\n#9 2.938 Downloading rich-14.0.0-py3-none-any.whl (243 kB)\n\n#9 2.941 Downloading tabulate-0.9.0-py3-none-any.whl (35 kB)\n\n#9 2.944 Downloading typer-0.16.0-py3-none-any.whl (46 kB)\n\n#9 2.947 Downloading typing_inspection-0.4.1-py3-none-any.whl (14 kB)\n\n#9 2.950 Downloading aiohappyeyeballs-2.6.1-py3-none-any.whl (15 kB)\n\n#9 2.953 Downloading aiosignal-1.3.2-py2.py3-none-any.whl (7.6 kB)\n\n#9 2.956 Downloading anyio-4.9.0-py3-none-any.whl (100 kB)\n\n#9 2.959 Downloading attrs-25.3.0-py3-none-any.whl (63 kB)\n\n#9 2.962 Downloading contextlib2-21.6.0-py2.py3-none-any.whl (13 kB)\n\n#9 2.965 Downloading frozenlist-1.7.0-cp312-cp312-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (241 kB)\n\n#9 2.969 Downloading googleapis_common_protos-1.70.0-py3-none-any.whl (294 kB)\n\n#9 2.972 Downloading grpcio-1.73.0-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (6.0 MB)\n\n#9 2.984    \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 6.0/6.0 MB 536.7 MB/s eta 0:00:00\n\n#9 2.988 Downloading httpx_sse-0.4.0-py3-none-any.whl (7.8 kB)\n\n#9 2.991 Downloading markdown_it_py-3.0.0-py3-none-any.whl (87 kB)\n\n#9 2.994 Downloading multidict-6.4.4-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (223 kB)\n\n#9 2.997 Downloading propcache-0.3.2-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (224 kB)\n\n#9 3.000 Downloading protobuf-6.31.1-cp39-abi3-manylinux2014_x86_64.whl (321 kB)\n\n#9 3.004 Downloading pydantic_settings-2.9.1-py3-none-any.whl (44 kB)\n\n#9 3.007 Downloading pygments-2.19.1-py3-none-any.whl (1.2 MB)\n\n#9 3.010    \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 1.2/1.2 MB 711.0 MB/s eta 0:00:00\n\n#9 3.013 Downloading python_multipart-0.0.20-py3-none-any.whl (24 kB)\n\n#9 3.016 Downloading shellingham-1.5.4-py2.py3-none-any.whl (9.8 kB)\n\n#9 3.019 Downloading sse_starlette-2.3.6-py3-none-any.whl (10 kB)\n\n#9 3.022 Downloading starlette-0.47.0-py3-none-any.whl (72 kB)\n\n#9 3.025 Downloading uvicorn-0.34.3-py3-none-any.whl (62 kB)\n\n#9 3.028 Downloading yarl-1.20.1-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (355 kB)\n\n#9 3.031 Downloading cryptography-45.0.4-cp311-abi3-manylinux_2_34_x86_64.whl (4.5 MB)\n\n#9 3.041    \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 4.5/4.5 MB 494.2 MB/s eta 0:00:00\n\n#9 3.044 Downloading cffi-1.17.1-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (479 kB)\n\n#9 3.048 Downloading h11-0.16.0-py3-none-any.whl (37 kB)\n\n#9 3.051 Downloading mdurl-0.1.2-py3-none-any.whl (10.0 kB)\n\n#9 3.054 Downloading sniffio-1.3.1-py3-none-any.whl (10 kB)\n\n#9 3.057 Downloading pycparser-2.22-py3-none-any.whl (117 kB)\n\n#9 3.211 Installing collected packages: typing-inspection, tabulate, sniffio, shellingham, python-multipart, python-dotenv, pygments, pydantic-core, pycparser, protobuf, propcache, Pillow, numpy, multidict, mdurl, httpx-sse, h11, grpcio, frozenlist, exceptiongroup, contextlib2, click, attrs, annotated-types, aiohappyeyeballs, yarl, uvicorn, schema, pydantic, markdown-it-py, httpcore, googleapis-common-protos, cffi, anyio, aiosignal, starlette, sse-starlette, rich, pydantic-settings, openapi-pydantic, httpx, cryptography, clarifai-grpc, aiohttp, typer, mcp, authlib, fastmcp, clarifai-protocol, clarifai\n\n#9 7.324 Successfully installed Pillow-11.2.1 aiohappyeyeballs-2.6.1 aiohttp-3.12.12 aiosignal-1.3.2 annotated-types-0.7.0 anyio-4.9.0 attrs-25.3.0 authlib-1.6.0 cffi-1.17.1 clarifai-11.5.0 clarifai-grpc-11.5.5 clarifai-protocol-0.0.24 click-8.2.1 contextlib2-21.6.0 cryptography-45.0.4 exceptiongroup-1.3.0 fastmcp-2.8.0 frozenlist-1.7.0 googleapis-common-protos-1.70.0 grpcio-1.73.0 h11-0.16.0 httpcore-1.0.9 httpx-0.28.1 httpx-sse-0.4.0 markdown-it-py-3.0.0 mcp-1.9.3 mdurl-0.1.2 multidict-6.4.4 numpy-2.3.0 openapi-pydantic-0.5.1 propcache-0.3.2 protobuf-6.31.1 pycparser-2.22 pydantic-2.11.5 pydantic-core-2.33.2 pydantic-settings-2.9.1 pygments-2.19.1 python-dotenv-1.1.0 python-multipart-0.0.20 rich-14.0.0 schema-0.7.5 shellingham-1.5.4 sniffio-1.3.1 sse-starlette-2.3.6 starlette-0.47.0 tabulate-0.9.0 typer-0.16.0 typing-inspection-0.4.1 uvicorn-0.34.3 yarl-1.20.1\n\n#9 7.398\n\n#9 7.398 \\[notice] A new release of pip is available: 25.0.1 -> 25.1.1\n\n#9 7.398 \\[notice] To update, run: pip install --upgrade pip\n\n#9 DONE 7.6s |  thread=24100\n[INFO] 14:08:06.501602 #9 DONE 7.6s)\n\n\n\n#10 \\[final 4/8] RUN ["pip", "show", "clarifai"]\n\n#10 0.176 WARNING: The directory \'/home/nonroot/.cache/pip\' or its parent directory is not owned or is not writable by the current user. The cache has been disabled. Check the permissions and owner of that directory. If executing pip with sudo, you should use sudo\'s -H flag.\n\n#10 0.246 Name: clarifai\n\n#10 0.246 Version: 11.5.0\n\n#10 0.246 Summary:\n\n#10 0.246 Home-page: https://github.com/Clarifai/clarifai-python\n\n#10 0.246 Author: Clarifai\n\n#10 0.246 Author-email: support@clarifai.com\n\n#10 0.246 License: Apache 2.0\n\n#10 0.246 Location: /venv/lib/python3.12/site-packages\n\n#10 0.246 Requires: aiohttp, clarifai-grpc, clarifai-protocol, click, fsspec, numpy, Pillow, PyYAML, requests, schema, tabulate, tqdm\n\n#10 0.246 Required-by: clarifai-protocol\n\n#10 DONE 0.3s\n\n\n\n#11 \\[final 5/8] COPY --chown=nonroot:nonroot downloader/unused.yaml /home/nonroot/main/1/checkpoints/.cache/unused.yaml\n\n#11 DONE 0.0s\n\n\n\n#12 \\[final 6/8] RUN  ["python", "-m", "clarifai.cli", "model", "download-checkpoints", "/home/nonroot/main", "--out_path", "/home/nonroot/main/1/checkpoints", "--stage", "build"]\n\n#12 0.382 [INFO] 11:07:59.706068 No checkpoints specified in the config file |  thread=139726749580864\n\n#12 DONE 0.4s\n\n\n\n#13 \\[final 7/8] COPY --link=true 1 /home/nonroot/main/1\n\n#13 DONE 0.0s\n\n\n\n#14 \\[final 8/8] COPY --link=true requirements.txt config.yaml /home/nonroot/main/\n\n#14 DONE 0.0s\n\n\n\n#15 exporting to image\n\n#15 exporting layers |  thread=24100\n[INFO] 14:08:11.515503 #15 exporting layers 4.4s done\n\n#15 exporting manifest sha256:************197e done\n\n#15 exporting config sha256:************73aa done\n\n#15 pushing layers\n\n#15 ...\n\n\n\n#16 \\[auth] sharing credentials for 891377382885.dkr.ecr.us-east-1.amazonaws.com\n\n#16 DONE 0.0s\n\n\n\n#15 exporting to image\n\n#15 pushing layers 2.5s done\n\n#15 pushing manifest for ****/prod/python:****0f0f2110727d@sha256:************197e\n\n#15 pushing manifest for ****/prod/python:****0f0f2110727d@sha256:************197e 0.4s done\n\n#15 DONE 7.3s\n\n2025-06-11 11:08:07.113313 INFO: Done building image!!! |  thread=24100\n[INFO] 14:08:13.260597 Model build complete! |  thread=24100\n[INFO] 14:08:13.261596 Build time elapsed 22.4s) |  thread=24100\n[INFO] 14:08:13.261596 Check out the model at https://clarifai.com/alfrick/upload-models-2/models/mcp-three version: 42033db33ed84d66a5430f0f2110727d |  thread=24100\n[INFO] 14:08:13.280794\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n# Here is a code snippet to use this model:\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n                 |  thread=24100\n[INFO] 14:08:13.280794\nimport asyncio\nimport os\nfrom fastmcp import Client\nfrom fastmcp.client.transports import StreamableHttpTransport\n\ntransport = StreamableHttpTransport(url="https://api.clarifai.com/v2/ext/mcp/v1/users/alfrick/apps/upload-models-2/models/mcp-three",\n                                    headers={"Authorization": "Bearer " + os.environ["CLARIFAI_PAT"]})\n\nasync def main():\n  async with Client(transport) as client:\n    tools = await client.list_tools()\n    print(f"Available tools: {tools}")\n    # TODO: update the dictionary of arguments passed to call_tool to make sense for your MCP.\n    result = await client.call_tool(tools[0].name, {"a": 5, "b": 3})\n    print(f"Result: {result[0].text}")\n\nif __name__ == "__main__":\n  asyncio.run(main())\n |  thread=24100\n',f={description:"Build performant MCP Servers with FastMCP for Clarifai",sidebar_position:2,toc_max_heading_level:4},y="MCP",x={},g=[{value:"How it Works",id:"how-it-works",level:2},{value:"Build an MCP Server",id:"build-an-mcp-server",level:2},{value:"Step 1: Perform Prerequisites",id:"step-1-perform-prerequisites",level:3},{value:"Install Packages",id:"install-packages",level:4},{value:"Set a PAT Key",id:"set-a-pat-key",level:4},{value:"Create Files",id:"create-files",level:4},{value:"Step 2: Prepare <code>model.py</code> File",id:"step-2-prepare-modelpy-file",level:3},{value:"a. Initialize the FastMCP Server",id:"a-initialize-the-fastmcp-server",level:4},{value:"b. Define Tools",id:"b-define-tools",level:4},{value:"c. Define Clarifai&#39;s Model Class",id:"c-define-clarifais-model-class",level:4},{value:"Step 3: Prepare <code>config.yaml</code> File",id:"step-3-prepare-configyaml-file",level:3},{value:"Step 4: Define Dependencies in <code>requirements.txt</code>",id:"step-4-define-dependencies-in-requirementstxt",level:3},{value:"Step 5: Test the Model Locally",id:"step-5-test-the-model-locally",level:3},{value:"a. Local-Dev",id:"a-local-dev",level:4},{value:"b. MCP Inspector",id:"b-mcp-inspector",level:4},{value:"Step 6: Upload to Clarifai",id:"step-6-upload-to-clarifai",level:3},{value:"Step 7: Deploy the Model",id:"step-7-deploy-the-model",level:3},{value:"Step 8: Interact With Server",id:"step-8-interact-with-server",level:3},{value:"Additional Examples",id:"additional-examples",level:2}];function w(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components},{Details:i}=n;return i||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"mcp",children:"MCP"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Build performant MCP servers with FastMCP for Clarifai"})}),"\n",(0,o.jsx)("hr",{}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.a,{href:"https://modelcontextprotocol.io/introduction",children:"The Model Context Protocol (MCP)"})," is an open standard developed by Anthropic that acts as a universal language for AI models, particularly large language models (LLMs), to interact with external data sources (like GitHub, Slack, or databases) and extend their capabilities."]}),"\n",(0,o.jsx)(n.p,{children:"With MCP, you can build intelligent agents and complex workflows on top of LLMs, enabling secure and efficient access to contextual information."}),"\n",(0,o.jsx)(n.h2,{id:"how-it-works",children:"How it Works"}),"\n",(0,o.jsxs)(n.p,{children:["At its core, MCP follows a ",(0,o.jsx)(n.a,{href:"https://www.clarifai.com/blog/mcp-vs-a2a-clearly-explained",children:"client-server architecture"})," where a host application (like an AI chatbot or an IDE with AI features) can connect to an MCP server. The server acts as a gateway to specific external data, tools, or functionalities."]}),"\n",(0,o.jsx)(n.p,{children:"An MCP server can expose several key capabilities \u2014 most notably, tools that function as callable actions for LLMs, such as updating records or interacting with external systems."}),"\n",(0,o.jsxs)(n.p,{children:["While MCP provides the specification, implementing clients and servers that adhere to it can involve substantial boilerplate code and intricate protocol handling. This is exactly where ",(0,o.jsx)(n.a,{href:"https://github.com/jlowin/fastmcp",children:"FastMCP"})," excels. FastMCP is a high-level, Pythonic framework that significantly simplifies the development of MCP servers and clients."]}),"\n",(0,o.jsx)(n.p,{children:"Clarifai allows you to build performant MCP servers with FastMCP by providing the necessary infrastructure needed to define, deploy, and manage custom MCP servers at scale."}),"\n","\n","\n",(0,o.jsx)(n.h2,{id:"build-an-mcp-server",children:"Build an MCP Server"}),"\n",(0,o.jsxs)(n.p,{children:["Building an MCP server with FastMCP using Clarifai follows the same intuitive pattern as ",(0,o.jsx)(n.a,{href:"https://docs.clarifai.com/compute/models/upload/",children:"building and uploading models"})," on the platform."]}),"\n",(0,o.jsx)(n.p,{children:"Let's demonstrate how you can build a simple MCP server using the FastMCP framework. This server will expose callable tools for LLMs or other AI agents, and we'll upload it to the Clarifai platform as a custom model, making its functionalities accessible within the Clarifai ecosystem."}),"\n",(0,o.jsx)(n.h3,{id:"step-1-perform-prerequisites",children:"Step 1: Perform Prerequisites"}),"\n",(0,o.jsx)(n.h4,{id:"install-packages",children:"Install Packages"}),"\n",(0,o.jsx)(n.p,{children:"You need to install the following Python packages:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"clarifai"})," \u2013 The latest version of the Clarifai Python SDK required for integrating your MCP server with the Clarifai platform. This also installs the Clarifai ",(0,o.jsx)(n.a,{href:"https://docs.clarifai.com/additional-resources/api-overview/cli",children:"Command Line Interface (CLI)"}),", which we'll use for uploading the server."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"fastmcp"})," \u2013 This is the core framework used to define and manage the MCP server."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"pydantic"})," \u2013 ",(0,o.jsx)(n.a,{href:"https://github.com/pydantic/pydantic",children:"Pydantic"})," is essential for data validation and defining the structure (schema) of your tool arguments, particularly using ",(0,o.jsx)(n.code,{children:"Field"}),". We'll pair it with ",(0,o.jsx)(n.code,{children:"Any"})," and ",(0,o.jsx)(n.code,{children:"Annotated"})," from Python's ",(0,o.jsx)(n.code,{children:"typing"})," module to add vital metadata, like descriptions, to function arguments, which is key for ",(0,o.jsx)(n.code,{children:"fastmcp"}),"'s type hinting and automatic schema generation."]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"You can run the following command to install them:"}),"\n",(0,o.jsx)(r.A,{groupId:"code",children:(0,o.jsx)(l.A,{value:"bash",label:"Bash",children:(0,o.jsx)(s.A,{className:"language-bash",children:" pip install --upgrade fastmcp pydantic clarifai "})})}),"\n",(0,o.jsxs)(n.p,{children:["Or, you can define the packages in a ",(0,o.jsx)(n.a,{href:"#step-4-define-dependencies-in-requirementstxt",children:(0,o.jsx)(n.code,{children:"requirements.txt"})})," file and run the following command to install them:"]}),"\n",(0,o.jsx)(r.A,{groupId:"code",children:(0,o.jsx)(l.A,{value:"bash",label:"Bash",children:(0,o.jsx)(s.A,{className:"language-bash",children:" pip install -r requirements.txt "})})}),"\n",(0,o.jsx)(n.h4,{id:"set-a-pat-key",children:"Set a PAT Key"}),"\n",(0,o.jsxs)(n.p,{children:["You also need to have a Personal Access Token (PAT) to authenticate your connection with the Clarifai platform. You can generate it in your personal settings page by navigating to the ",(0,o.jsx)(n.a,{href:"https://clarifai.com/settings/security",children:"Security section"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["Then, set the ",(0,o.jsx)(n.code,{children:"CLARIFAI_PAT"})," as an environment variable."]}),"\n",(0,o.jsxs)(r.A,{groupId:"code",children:[(0,o.jsx)(l.A,{value:"bash",label:"Unix-Like Systems",children:(0,o.jsx)(s.A,{className:"language-bash",children:" export CLARIFAI_PAT=YOUR_PERSONAL_ACCESS_TOKEN_HERE "})}),(0,o.jsx)(l.A,{value:"bash2",label:"Windows",children:(0,o.jsx)(s.A,{className:"language-bash",children:" set CLARIFAI_PAT=YOUR_PERSONAL_ACCESS_TOKEN_HERE "})})]}),"\n",(0,o.jsx)(n.admonition,{title:"tip",type:"note",children:(0,o.jsxs)(n.p,{children:["On Windows, the Clarifai Python SDK expects a ",(0,o.jsx)(n.code,{children:"HOME"})," environment variable, which isn\u2019t set by default. To ensure compatibility with file paths used by the SDK, set ",(0,o.jsx)(n.code,{children:"HOME"})," to the value of your ",(0,o.jsx)(n.code,{children:"USERPROFILE"}),". You can set it in your Command Prompt this way: ",(0,o.jsx)(n.code,{children:"set HOME=%USERPROFILE%"}),"."]})}),"\n",(0,o.jsx)(n.h4,{id:"create-files",children:"Create Files"}),"\n",(0,o.jsx)(n.p,{children:"Create a project directory and organize your files as indicated below to fit the requirements of building custom models for the Clarifai platform."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-text",children:"your_model_directory/\n\u251c\u2500\u2500 1/\n\u2502   \u2514\u2500\u2500 model.py\n\u251c\u2500\u2500 requirements.txt\n\u2514\u2500\u2500 config.yaml\n\u2514\u2500\u2500 client.py\n"})}),"\n",(0,o.jsx)(n.admonition,{type:"tip",children:(0,o.jsxs)(n.p,{children:["You can automatically generate these files by running this CLI command: ",(0,o.jsx)(n.a,{href:"https://docs.clarifai.com/resources/api-overview/cli#clarifai-model-init",children:(0,o.jsx)(n.code,{children:"clarifai model init --model-type-id mcp"})}),". You can then edit them as needed."]})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"your_model_directory/"})," \u2013 The root directory containing all files related to your server.","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"1/"})," \u2013 A subdirectory that holds the model file (",(0,o.jsxs)(n.em,{children:["Note that the folder is named as ",(0,o.jsx)(n.strong,{children:"1"})]}),").","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"model.py"})," \u2013 Contains the main logic for the MCP server implementation."]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"requirements.txt"})," \u2013 Lists the Python dependencies required to run your server."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"config.yaml"})," \u2013 Contains metadata and configuration settings needed for uploading the model to Clarifai."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"client.py"})," \u2013 Only contains an example client for demonstrating MCP usage after uploading the model to Clarifai."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.h3,{id:"step-2-prepare-modelpy-file",children:["Step 2: Prepare ",(0,o.jsx)(n.code,{children:"model.py"})," File"]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"model.py"})," is the main file where you'll implement your MCP server's logic."]}),"\n",(0,o.jsxs)(n.p,{children:["Here's the ",(0,o.jsx)(n.code,{children:"model.py"})," file for the custom model (or, in this case, a server) we want to build:"]}),"\n",(0,o.jsx)(r.A,{groupId:"code",children:(0,o.jsx)(l.A,{value:"python",label:"Python",children:(0,o.jsx)(s.A,{className:"language-python",children:c})})}),"\n",(0,o.jsx)(n.p,{children:"Let\u2019s break down what each part of the file does."}),"\n",(0,o.jsx)(n.h4,{id:"a-initialize-the-fastmcp-server",children:"a. Initialize the FastMCP Server"}),"\n",(0,o.jsxs)(n.p,{children:["You'll start by creating an instance of the ",(0,o.jsx)(n.code,{children:"FastMCP"})," class to set up your server."]}),"\n",(0,o.jsxs)(n.p,{children:["Here are the key arguments you can pass to the ",(0,o.jsx)(n.code,{children:"FastMCP"})," constructor:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"name"})," \u2013 An optional identifier for your MCP server. This is useful for distinguishing it in logs or when managing multiple servers in client applications."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"instructions"})," \u2013 An optional, short description that helps clients understand the server's purpose or how to best interact with its functionalities."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"stateless_http"})," \u2013 A boolean flag (",(0,o.jsx)(n.code,{children:"True"}),"/",(0,o.jsx)(n.code,{children:"False"}),") that configures the server to operate over stateless HTTP. Turning this on is ideal for lightweight deployments, as it simplifies communication by not requiring persistent sessions."]}),"\n"]}),"\n",(0,o.jsx)(n.h4,{id:"b-define-tools",children:"b. Define Tools"}),"\n",(0,o.jsxs)(n.p,{children:["An empty MCP server isn't very useful; its power comes from the ",(0,o.jsx)(n.strong,{children:"tools"})," it exposes. We define these tools by applying the ",(0,o.jsx)(n.code,{children:"@server.tool(...)"}),' decorator directly to Python functions. This decorator registers the function as an MCP "tool," making it discoverable and invokable by any MCP client (like an LLM).']}),"\n",(0,o.jsx)(n.p,{children:"Each tool is enriched with essential metadata:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Tool-level metadata \u2013 The ",(0,o.jsx)(n.code,{children:"@server.tool()"})," decorator itself takes a ",(0,o.jsx)(n.code,{children:"name"})," and ",(0,o.jsx)(n.code,{children:"description"})," to explain the tool's overall purpose."]}),"\n",(0,o.jsxs)(n.li,{children:["Input descriptions \u2013 The tool's input arguments are precisely described using ",(0,o.jsx)(n.code,{children:"Annotated"})," in conjunction with ",(0,o.jsx)(n.code,{children:"Field"}),"."]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"In our example, we define two distinct tools:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"calculate_sum"})," \u2013 A tool that takes two numbers, ",(0,o.jsx)(n.code,{children:"a"})," and ",(0,o.jsx)(n.code,{children:"b"}),", and returns their sum."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"weather"})," \u2013 A tool that accepts a ",(0,o.jsx)(n.code,{children:"city"})," name and provides a pre-defined weather response."]}),"\n"]}),"\n",(0,o.jsx)(n.admonition,{type:"tip",children:(0,o.jsxs)(n.p,{children:["For details on adding other useful MCP server components, like ",(0,o.jsx)(n.code,{children:"Resources"})," and ",(0,o.jsx)(n.code,{children:"Prompts"}),", you can refer to the ",(0,o.jsx)(n.a,{href:"https://modelcontextprotocol.io/docs/concepts/resources",children:"official MCP documentation"}),"."]})}),"\n",(0,o.jsx)(n.h4,{id:"c-define-clarifais-model-class",children:"c. Define Clarifai's Model Class"}),"\n",(0,o.jsx)(n.p,{children:"The custom-named model class serves as the integration point between your MCP server and the Clarifai platform."}),"\n",(0,o.jsxs)(n.p,{children:["You must define it by subclassing Clarifai's ",(0,o.jsx)(n.code,{children:"MCPModelClass"})," and implementing the ",(0,o.jsx)(n.code,{children:"get_server()"})," method. This method returns the ",(0,o.jsx)(n.code,{children:"FastMCP"})," server instance (such as ",(0,o.jsx)(n.code,{children:"server"}),") that Clarifai should use when running your model."]}),"\n",(0,o.jsxs)(n.p,{children:["When Clarifai runs the model, it calls ",(0,o.jsx)(n.code,{children:"get_server()"})," to load your MCP server and expose its defined tools and capabilities to LLMs or other agents."]}),"\n",(0,o.jsxs)(n.h3,{id:"step-3-prepare-configyaml-file",children:["Step 3: Prepare ",(0,o.jsx)(n.code,{children:"config.yaml"})," File"]}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"config.yaml"})," file is used to configure the build and deployment settings for a custom model on the Clarifai platform. It tells Clarifai how to build your model's environment and where to place it within your account."]}),"\n",(0,o.jsxs)(n.p,{children:["This is the ",(0,o.jsx)(n.code,{children:"config.yaml"})," file for the custom model (or, in this case, a server) we want to build:"]}),"\n",(0,o.jsx)(r.A,{groupId:"code",children:(0,o.jsx)(l.A,{value:"yaml",label:"YAML",children:(0,o.jsx)(s.A,{className:"language-yaml",children:d})})}),"\n",(0,o.jsx)(n.p,{children:"Let\u2019s break down what each part of the file does."}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"build_info"})," \u2013 This section specifies the Python version that Clarifai should use to build the environment for your model. Note that we currently support Python 3.11 and Python 3.12 (default)."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"inference_compute_info"})," \u2013 This section defines the computing resources allocated for your MCP model when it performs inference; that is, when it's running and being used by AI agents.","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"cpu_limit"})," \u2013 '1' : Allocates 1 CPU core for the model's inference tasks."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"cpu_memory"})," \u2013 1Gi : Provides 1 Gigabyte of RAM for the model."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"num_accelerators"}),"\u2013 0 : Indicates that no specialized hardware accelerators (like GPUs) are requested for this model. This is typical for basic MCP servers that might not require heavy computational power."]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"model"})," \u2013 This specifies your Clarifai app ID, model ID, and Clarifai user ID. These will define where your model will be uploaded on the Clarifai platform. The ",(0,o.jsx)(n.code,{children:"model_type_id"})," parameter indicates the type of model being uploaded."]}),"\n"]}),"\n",(0,o.jsxs)(n.h3,{id:"step-4-define-dependencies-in-requirementstxt",children:["Step 4: Define Dependencies in ",(0,o.jsx)(n.code,{children:"requirements.txt"})]}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"requirements.txt"})," file lists all the Python packages your MCP server depends on. Clarifai uses this file during deployment to automatically install the necessary libraries, ensuring your server runs correctly."]}),"\n",(0,o.jsxs)(n.p,{children:["Here's the ",(0,o.jsx)(n.code,{children:"requirements.txt"})," file for the custom model (or, in this case, a server) we want to build:"]}),"\n",(0,o.jsx)(r.A,{groupId:"code",children:(0,o.jsx)(l.A,{value:"text",label:"txt",children:(0,o.jsx)(s.A,{className:"language-text",children:h})})}),"\n",(0,o.jsx)(n.h3,{id:"step-5-test-the-model-locally",children:"Step 5: Test the Model Locally"}),"\n",(0,o.jsx)(n.p,{children:"Before uploading your server to the Clarifai platform, you can test it locally to catch any typos or misconfigurations in the code."}),"\n",(0,o.jsx)(n.h4,{id:"a-local-dev",children:"a. Local-Dev"}),"\n",(0,o.jsxs)(n.p,{children:["You can use Clarifai's ",(0,o.jsx)(n.code,{children:"local-dev"})," CLI tool to test and run your model as a local development runner. You can learn how to use the tool ",(0,o.jsx)(n.a,{href:"https://docs.clarifai.com/compute/models/upload/run-locally",children:"here"}),"."]}),"\n",(0,o.jsx)(r.A,{groupId:"code",children:(0,o.jsx)(l.A,{value:"bash",label:"Bash",children:(0,o.jsx)(s.A,{className:"language-bash",children:" clarifai model local-dev "})})}),"\n",(0,o.jsx)(n.h4,{id:"b-mcp-inspector",children:"b. MCP Inspector"}),"\n",(0,o.jsxs)(n.p,{children:["You can also use the ",(0,o.jsx)(n.a,{href:"https://github.com/modelcontextprotocol/inspector",children:"MCP Inspector"})," to easily test and debug your MCP server through a user-friendly, web-based interface that allows you to connect to your server and explore its capabilities."]}),"\n",(0,o.jsx)(n.p,{children:"To launch the Inspector, run the following command."}),"\n",(0,o.jsx)(r.A,{groupId:"code",children:(0,o.jsx)(l.A,{value:"bash",label:"Bash",children:(0,o.jsx)(s.A,{className:"language-bash",children:" npx @modelcontextprotocol/inspector "})})}),"\n",(0,o.jsxs)(n.p,{children:["Once the interface opens, set the ",(0,o.jsx)(n.code,{children:"Transport Type"})," to ",(0,o.jsx)(n.code,{children:"Streamable HTTP"})," and provide the URL of your deployed MCP server on the Clarifai platform (",(0,o.jsx)(n.em,{children:"learn how to get the URL in the next step"}),"). In the Authentication section, enter ",(0,o.jsx)(n.code,{children:"Authorization"})," as the Header Name, and supply your Clarifai PAT in the ",(0,o.jsx)(n.code,{children:"Bearer Token"})," field."]}),"\n",(0,o.jsxs)(n.p,{children:["After entering these details, click the ",(0,o.jsx)(n.strong,{children:"Connect"})," button to establish a connection and begin inspecting your server\u2019s capabilities."]}),"\n",(0,o.jsxs)(i,{children:[(0,o.jsx)("summary",{children:"MCP Inspector UI"}),(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{src:t(29085).A+"",width:"1889",height:"962"})})]}),"\n",(0,o.jsx)(n.h3,{id:"step-6-upload-to-clarifai",children:"Step 6: Upload to Clarifai"}),"\n",(0,o.jsx)(n.p,{children:"To upload the MCP server to the Clarifai platform, navigate to its root directory and run the following command:"}),"\n",(0,o.jsx)(r.A,{groupId:"code",children:(0,o.jsx)(l.A,{value:"bash",label:"CLI",children:(0,o.jsx)(s.A,{className:"language-bash",children:" clarifai model upload "})})}),"\n",(0,o.jsx)(n.p,{children:"As the upload proceeds, you'll see build logs directly in your terminal. These are helpful for troubleshooting any issues that might pop up during the process."}),"\n",(0,o.jsx)(n.admonition,{type:"note",children:(0,o.jsxs)(n.p,{children:["Once the upload is complete, the build logs will display an example code snippet that you can incorporate into your ",(0,o.jsx)(n.code,{children:"client.py"})," script. The snippet will contain the URL of your deployed MCP server, which you'll use to enable your AI agents or clients to communicate with the server. This URL is constructed by combining the MCP API base URL (",(0,o.jsx)(n.code,{children:"https://api.clarifai.com/v2/ext/mcp/v1"}),") with your specific Clarifai identifiers: your user ID, app ID, and the model ID of your deployed MCP server. For example: ",(0,o.jsx)(n.code,{children:"https://api.clarifai.com/v2/ext/mcp/v1/users/user-id/apps/app-id/models/model-id"}),"."]})}),"\n",(0,o.jsxs)(i,{children:[(0,o.jsx)("summary",{children:"Build Logs Example"}),(0,o.jsx)(s.A,{className:"language-text",children:u})]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Note:"})," If you make changes to your server code and re-upload it, Clarifai automatically creates a new version of your model."]}),"\n",(0,o.jsx)(n.h3,{id:"step-7-deploy-the-model",children:"Step 7: Deploy the Model"}),"\n",(0,o.jsx)(n.p,{children:"After uploading your model to Clarifai, you'll need to deploy it to a dedicated compute cluster and nodepool. This action provisions the necessary resources to run your server and handle requests efficiently."}),"\n",(0,o.jsxs)(n.p,{children:["Learn how to perform deployments ",(0,o.jsx)(n.a,{href:"https://docs.clarifai.com/compute/deployments/clusters-nodepools",children:"here"}),"."]}),"\n",(0,o.jsx)(n.h3,{id:"step-8-interact-with-server",children:"Step 8: Interact With Server"}),"\n",(0,o.jsx)(n.p,{children:"After uploading your server to Clarifai, you can create a separate client script to communicate with it and invoke its tools."}),"\n",(0,o.jsxs)(n.p,{children:["Here\u2019s an example ",(0,o.jsx)(n.code,{children:"client.py"})," that demonstrates how to interact with your deployed MCP server:"]}),"\n",(0,o.jsx)(r.A,{groupId:"code",children:(0,o.jsx)(l.A,{value:"python",label:"Python",children:(0,o.jsx)(s.A,{className:"language-python",children:p})})}),"\n",(0,o.jsx)(n.p,{children:"Let\u2019s break down what each part of the file does."}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Set up connection"})," \u2013 We establish the connection to your deployed MCP server. The ",(0,o.jsx)(n.code,{children:"StreamableHttpTransport"})," instance handles this, serving as a specialized FastMCP transport for HTTP communication. Its ",(0,o.jsx)(n.code,{children:"url"})," parameter points directly to your MCP model on Clarifai. Instead of hardcoding this URL, we use ",(0,o.jsx)(n.code,{children:"ClarifaiUrlHelper().mcp_api_url()"})," as a convenient utility. Based on your current ",(0,o.jsx)(n.a,{href:"https://docs.clarifai.com/resources/api-overview/cli#clarifai-context",children:"context"}),", this helper provides the base URL where your MCP server lives and exposes its tools, ensuring flexibility and correctness."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Main logic"})," \u2013 We asynchronously open the MCP client session by initializing ",(0,o.jsx)(n.code,{children:"fastmcp.Client"})," with the configured ",(0,o.jsx)(n.code,{children:"transport"}),". Once connected, we list all available tools exposed by the server and call them. Note the use of ",(0,o.jsx)(n.code,{children:"async"})," and ",(0,o.jsx)(n.code,{children:"await"}),"; FastMCP clients operate asynchronously, requiring an ",(0,o.jsx)(n.code,{children:"async"})," function and an ",(0,o.jsx)(n.code,{children:"async with Client"})," block to properly manage the client's lifecycle."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Execution"})," \u2013 Finally, ",(0,o.jsx)(n.code,{children:"asyncio.run(main())"})," executes the entire asynchronous interaction."]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"To execute the client example, run the following command:"}),"\n",(0,o.jsx)(r.A,{groupId:"code",children:(0,o.jsx)(l.A,{value:"bash",label:"Bash",children:(0,o.jsx)(s.A,{className:"language-bash",children:" python client.py "})})}),"\n",(0,o.jsx)(n.admonition,{type:"note",children:(0,o.jsxs)(n.p,{children:["If you encounter a ",(0,o.jsx)(n.code,{children:"Server error '503 Service Unavailable'"})," while calling the server, it typically indicates that the model is in a cold state and still warming up. You may wait a moment before trying the request again."]})}),"\n",(0,o.jsxs)(i,{children:[(0,o.jsx)("summary",{children:"Example Output"}),(0,o.jsx)(s.A,{className:"language-text",children:m})]}),"\n",(0,o.jsx)(n.h2,{id:"additional-examples",children:"Additional Examples"}),"\n",(0,o.jsx)(n.p,{children:"To learn more about building MCP servers using Clarifai, see the following examples:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://github.com/Clarifai/examples/tree/main/agents/mcp/chat-mcp-agent",children:"Build an Interactive AI Agent with Clarifai's LLMs and MCP Tools"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://github.com/Clarifai/examples/tree/main/agents/mcp/llm-mcp-agent",children:"Empowering AI Agents: Clarifai LLMs with MCP Tools for Task Automation"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://github.com/Clarifai/runners-examples/tree/main/mcp/browser-tools",children:"A FastMCP Server for Web Browse and Research Tools"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://github.com/Clarifai/runners-examples/tree/main/mcp/google-drive",children:"A FastMCP Server for Google Drive Integration"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://github.com/Clarifai/runners-examples/tree/main/mcp/postgres",children:"A FastMCP Server for PostgreSQL Database Operations"})}),"\n"]})]})}function b(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(w,{...e})}):w(e)}},29085:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/mcp-inspector-bea013bbbc739917d72799415441f26c.png"},65537:(e,n,t)=>{t.d(n,{A:()=>_});var i=t(96540),o=t(18215),a=t(65627),r=t(56347),l=t(50372),s=t(30604),c=t(11861),d=t(78749);function h(e){return i.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,i.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function p(e){const{values:n,children:t}=e;return(0,i.useMemo)((()=>{const e=n??function(e){return h(e).map((e=>{let{props:{value:n,label:t,attributes:i,default:o}}=e;return{value:n,label:t,attributes:i,default:o}}))}(t);return function(e){const n=(0,c.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function m(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function u(e){let{queryString:n=!1,groupId:t}=e;const o=(0,r.W6)(),a=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,s.aZ)(a),(0,i.useCallback)((e=>{if(!a)return;const n=new URLSearchParams(o.location.search);n.set(a,e),o.replace({...o.location,search:n.toString()})}),[a,o])]}function f(e){const{defaultValue:n,queryString:t=!1,groupId:o}=e,a=p(e),[r,s]=(0,i.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!m({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const i=t.find((e=>e.default))??t[0];if(!i)throw new Error("Unexpected error: 0 tabValues");return i.value}({defaultValue:n,tabValues:a}))),[c,h]=u({queryString:t,groupId:o}),[f,y]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[o,a]=(0,d.Dv)(t);return[o,(0,i.useCallback)((e=>{t&&a.set(e)}),[t,a])]}({groupId:o}),x=(()=>{const e=c??f;return m({value:e,tabValues:a})?e:null})();(0,l.A)((()=>{x&&s(x)}),[x]);return{selectedValue:r,selectValue:(0,i.useCallback)((e=>{if(!m({value:e,tabValues:a}))throw new Error(`Can't select invalid tab value=${e}`);s(e),h(e),y(e)}),[h,y,a]),tabValues:a}}var y=t(9136);const x={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var g=t(74848);function w(e){let{className:n,block:t,selectedValue:i,selectValue:r,tabValues:l}=e;const s=[],{blockElementScrollPositionUntilNextRender:c}=(0,a.a_)(),d=e=>{const n=e.currentTarget,t=s.indexOf(n),o=l[t].value;o!==i&&(c(n),r(o))},h=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const t=s.indexOf(e.currentTarget)+1;n=s[t]??s[0];break}case"ArrowLeft":{const t=s.indexOf(e.currentTarget)-1;n=s[t]??s[s.length-1];break}}n?.focus()};return(0,g.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.A)("tabs",{"tabs--block":t},n),children:l.map((e=>{let{value:n,label:t,attributes:a}=e;return(0,g.jsx)("li",{role:"tab",tabIndex:i===n?0:-1,"aria-selected":i===n,ref:e=>{s.push(e)},onKeyDown:h,onClick:d,...a,className:(0,o.A)("tabs__item",x.tabItem,a?.className,{"tabs__item--active":i===n}),children:t??n},n)}))})}function b(e){let{lazy:n,children:t,selectedValue:a}=e;const r=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=r.find((e=>e.props.value===a));return e?(0,i.cloneElement)(e,{className:(0,o.A)("margin-top--md",e.props.className)}):null}return(0,g.jsx)("div",{className:"margin-top--md",children:r.map(((e,n)=>(0,i.cloneElement)(e,{key:n,hidden:e.props.value!==a})))})}function v(e){const n=f(e);return(0,g.jsxs)("div",{className:(0,o.A)("tabs-container",x.tabList),children:[(0,g.jsx)(w,{...n,...e}),(0,g.jsx)(b,{...n,...e})]})}function _(e){const n=(0,y.A)();return(0,g.jsx)(v,{...e,children:h(e.children)},String(n))}},79329:(e,n,t)=>{t.d(n,{A:()=>r});t(96540);var i=t(18215);const o={tabItem:"tabItem_Ymn6"};var a=t(74848);function r(e){let{children:n,hidden:t,className:r}=e;return(0,a.jsx)("div",{role:"tabpanel",className:(0,i.A)(o.tabItem,r),hidden:t,children:n})}}}]);
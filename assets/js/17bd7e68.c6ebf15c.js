"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[1595],{39374:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>w,contentTitle:()=>j,default:()=>C,frontMatter:()=>v,metadata:()=>k,toc:()=>q});var o=t(74848),s=t(28453),i=t(11470),r=t(19365),a=t(21432);const l='# Model to be uploaded: https://huggingface.co/Falconsai/nsfw_image_detection\n\nimport os\nimport tempfile\nfrom io import BytesIO\nfrom typing import Iterator\n\nimport cv2\nimport torch\nfrom clarifai.runners.models.model_class import ModelClass\nfrom clarifai.utils.logging import logger\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2\nfrom clarifai_grpc.grpc.api.status import status_code_pb2, status_pb2\nfrom PIL import Image\nfrom transformers import AutoModelForImageClassification, ViTImageProcessor\n\n\ndef preprocess_image(image_bytes):\n  """Fetch and preprocess image data from bytes"""\n  return Image.open(BytesIO(image_bytes)).convert("RGB")\n\n\ndef video_to_frames(video_bytes):\n  """Convert video bytes to frames"""\n  # Write video bytes to a temporary file\n  with tempfile.NamedTemporaryFile(delete=False, suffix=".mp4") as temp_video_file:\n    temp_video_file.write(video_bytes)\n    temp_video_path = temp_video_file.name\n    logger.info(f"temp_video_path: {temp_video_path}")\n\n    video = cv2.VideoCapture(temp_video_path)\n    print("video opened")\n    logger.info(f"video opened: {video.isOpened()}")\n    while video.isOpened():\n      ret, frame = video.read()\n      if not ret:\n        break\n      # Convert the frame to byte format\n      frame_bytes = cv2.imencode(\'.jpg\', frame)[1].tobytes()\n      yield frame_bytes\n    video.release()\n\n\ndef classify_image(images, model, processor, device):\n  """Classify an image using the model and processor."""\n  inputs = processor(images=images, return_tensors="pt")\n  inputs = {name: tensor.to(device) for name, tensor in inputs.items()}\n  logits = model(**inputs).logits\n  return logits\n\n\ndef process_concepts(logits, images, concept_protos):\n  """Process the logits and return the concepts."""\n  outputs = []\n  for i, logit in enumerate(logits):\n    output_concepts = []\n    probs = torch.softmax(logit, dim=-1)\n    sorted_indices = torch.argsort(probs, dim=-1, descending=True)\n    for idx in sorted_indices:\n      concept_protos[idx.item()].value = probs[idx].item()\n      output_concepts.append(concept_protos[idx.item()])\n    output = resources_pb2.Output()\n    output.data.image.base64 = images[i].tobytes()\n    output.data.concepts.extend(output_concepts)\n    output.status.code = status_code_pb2.SUCCESS\n    outputs.append(output)\n  return outputs\n\n\nclass MyModel(ModelClass):\n  """A custom runner that loads the model and classifies images using it.\n  """\n\n  def load_model(self):\n    """Load the model here."""\n\n    self.device = \'cuda\' if torch.cuda.is_available() else \'cpu\'\n    logger.info(f"Running on device: {self.device}")\n\n    # if checkpoints section is in config.yaml file then checkpoints will be downloaded at this path during model upload time.\n    checkpoint_path = os.path.join(os.path.dirname(__file__), "checkpoints")\n\n    self.model = AutoModelForImageClassification.from_pretrained(checkpoint_path,).to(self.device)\n    self.processor = ViTImageProcessor.from_pretrained(checkpoint_path)\n    logger.info("Done loading!")\n\n  def predict(self, request: service_pb2.PostModelOutputsRequest\n             ) -> Iterator[service_pb2.MultiOutputResponse]:\n    """This is the method that will be called when the runner is run. It takes in an input and\n    returns an output.\n    """\n\n    outputs = []\n    images = []\n    concept_protos = request.model.model_version.output_info.data.concepts\n    for input in request.inputs:\n      input_data = input.data\n      image = preprocess_image(image_bytes=input_data.image.base64)\n      images.append(image)\n\n    with torch.no_grad():\n      logits = classify_image(images, self.model, self.processor, self.device)\n      outputs = process_concepts(logits, images, concept_protos)\n\n    return service_pb2.MultiOutputResponse(\n        outputs=outputs, status=status_pb2.Status(code=status_code_pb2.SUCCESS))\n\n  def generate(self, request: service_pb2.PostModelOutputsRequest\n              ) -> Iterator[service_pb2.MultiOutputResponse]:\n\n    if len(request.inputs) != 1:\n      raise ValueError("Only one input is allowed for image models for this method.")\n    concept_protos = request.model.model_version.output_info.data.concepts\n    for input in request.inputs:\n      input_data = input.data\n      video_bytes = None\n      if input_data.video.base64:\n        video_bytes = input_data.video.base64\n      if video_bytes:\n        frame_generator = video_to_frames(video_bytes)\n        for frame in frame_generator:\n          image = preprocess_image(frame)\n          images = [image]\n\n          with torch.no_grad():\n            logits = classify_image(images, self.model, self.processor, self.device)\n            outputs = process_concepts(logits, images, concept_protos)\n            yield service_pb2.MultiOutputResponse(\n                outputs=outputs, status=status_pb2.Status(code=status_code_pb2.SUCCESS))\n      else:\n        raise ValueError("Only video input is allowed for this method.")\n\n  def stream(self, request_iterator: Iterator[service_pb2.PostModelOutputsRequest]\n            ) -> Iterator[service_pb2.MultiOutputResponse]:\n    for request in request_iterator:\n      if request.inputs[0].data.video.base64:\n        for output in self.generate(request):\n          yield output\n      elif request.inputs[0].data.image.base64:\n        yield self.predict(request)',d="torch==2.5.1\ntokenizers>=0.21.0\ntransformers>=4.47.0\npillow==10.4.0\nrequests==2.32.3\ntimm==1.0.12\nopencv-python-headless==4.10.0.84\nnumpy\naiohttp",c='# This is the sample config file for the image-classifier model.\n\nmodel:\n  id: "model_id"\n  user_id: "user_id"\n  app_id: "app_id"\n  model_type_id: "visual-classifier"\n\nbuild_info:\n  python_version: "3.11"\n\ninference_compute_info:\n  cpu_limit: "1"\n  cpu_memory: "2Gi"\n  num_accelerators: 1\n  accelerator_type: ["NVIDIA-A10G"]\n  accelerator_memory: "3Gi"\n\ncheckpoints:\n  type: "huggingface"\n  repo_id: "Falconsai/nsfw_image_detection"\n  hf_token: "hf_token"',u='# Model to be uploaded: https://huggingface.co/facebook/detr-resnet-50\n\nimport os\nimport tempfile\nfrom io import BytesIO\nfrom typing import Iterator\n\nimport cv2\nimport torch\nfrom clarifai.runners.models.model_class import ModelClass\nfrom clarifai.utils.logging import logger\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2\nfrom clarifai_grpc.grpc.api.status import status_code_pb2, status_pb2\nfrom PIL import Image\nfrom transformers import DetrForObjectDetection, DetrImageProcessor\n\n\ndef preprocess_image(image_bytes):\n  """Fetch and preprocess image data from bytes"""\n  return Image.open(BytesIO(image_bytes)).convert("RGB")\n\n\ndef video_to_frames(video_bytes):\n  """Convert video bytes to frames"""\n  # Write video bytes to a temporary file\n  with tempfile.NamedTemporaryFile(delete=False, suffix=".mp4") as temp_video_file:\n    temp_video_file.write(video_bytes)\n    temp_video_path = temp_video_file.name\n    logger.info(f"temp_video_path: {temp_video_path}")\n\n    video = cv2.VideoCapture(temp_video_path)\n    print("video opened")\n    logger.info(f"video opened: {video.isOpened()}")\n    while video.isOpened():\n      ret, frame = video.read()\n      if not ret:\n        break\n      # Convert the frame to byte format\n      frame_bytes = cv2.imencode(\'.jpg\', frame)[1].tobytes()\n      yield frame_bytes\n    video.release()\n\n\ndef detect_objects(images, model, processor, device):\n  model_inputs = processor(images=images, return_tensors="pt").to(device)\n  model_inputs = {name: tensor.to(device) for name, tensor in model_inputs.items()}\n  model_output = model(**model_inputs)\n  results = processor.post_process_object_detection(model_output)\n  return results\n\n\ndef process_bounding_boxes(results, images, concept_protos, threshold):\n  outputs = []\n  for i, result in enumerate(results):\n    image = images[i]\n    width, height = image.size\n    output_regions = []\n    for score, label_idx, box in zip(result["scores"], result["labels"], result["boxes"]):\n      if score > threshold:\n        ymin, xmin, ymax, xmax = box\n        xmin, ymin, xmax, ymax = xmin * width, ymin * height, xmax * width, ymax * height\n        output_region = resources_pb2.Region(region_info=resources_pb2.RegionInfo(\n            bounding_box=resources_pb2.BoundingBox(\n                top_row=ymin,\n                left_col=xmin,\n                bottom_row=ymax,\n                right_col=xmax,\n            ),))\n        concept_protos[label_idx.item()].value = score.item()\n        output_region.data.concepts.append(concept_protos[label_idx.item()])\n        output_regions.append(output_region)\n    output = resources_pb2.Output()\n    output.data.image.base64 = images[i].tobytes()\n    output.data.regions.extend(output_regions)\n    output.status.code = status_code_pb2.SUCCESS\n    outputs.append(output)\n  return outputs\n\n\nclass MyModel(ModelClass):\n  """A custom runner that adds "Hello World" to the end of the text and replaces the domain of the\n  image URL as an example.\n  """\n\n  def load_model(self):\n    """Load the model here."""\n    checkpoint_path = os.path.join(os.path.dirname(__file__), "checkpoints")\n    self.device = \'cuda\' if torch.cuda.is_available() else \'cpu\'\n    logger.info(f"Running on device: {self.device}")\n\n    self.model = DetrForObjectDetection.from_pretrained(\n        checkpoint_path, revision="no_timm").to(self.device)\n    self.processor = DetrImageProcessor.from_pretrained(checkpoint_path, revision="no_timm")\n    self.model.eval()\n    self.threshold = 0.7\n\n    logger.info("Done loading!")\n\n  def predict(self, request: service_pb2.PostModelOutputsRequest\n             ) -> Iterator[service_pb2.MultiOutputResponse]:\n    """This is the method that will be called when the runner is run. It takes in an input and\n    returns an output.\n    """\n    outputs = []\n    images = []\n    concept_protos = request.model.model_version.output_info.data.concepts\n    for input in request.inputs:\n      input_data = input.data\n\n      image_bytes = input_data.image.base64\n      image = preprocess_image(image_bytes=image_bytes)\n      images.append(image)\n\n    with torch.no_grad():\n      results = detect_objects(images, self.model, self.processor, self.device)\n\n      # convert outputs (bounding boxes and class logits) to COCO API\n      # let\'s only keep detections with score > 0.7 (You can set it to any other value)\n      outputs = process_bounding_boxes(results, images, concept_protos, self.threshold)\n      return service_pb2.MultiOutputResponse(\n          outputs=outputs, status=status_pb2.Status(code=status_code_pb2.SUCCESS))\n\n  def generate(self, request: service_pb2.PostModelOutputsRequest\n              ) -> Iterator[service_pb2.MultiOutputResponse]:\n    if len(request.inputs) != 1:\n      raise ValueError("Only one input is allowed for image models for this method.")\n    concept_protos = request.model.model_version.output_info.data.concepts\n    for input in request.inputs:\n      input_data = input.data\n      video_bytes = None\n      if input_data.video.base64:\n        video_bytes = input_data.video.base64\n      if video_bytes:\n        frame_generator = video_to_frames(video_bytes)\n        for frame in frame_generator:\n          image = preprocess_image(frame)\n          images = [image]\n          with torch.no_grad():\n            results = detect_objects(images, self.model, self.processor, self.device)\n            outputs = process_bounding_boxes(results, images, concept_protos, self.threshold)\n            yield service_pb2.MultiOutputResponse(\n                outputs=outputs, status=status_pb2.Status(code=status_code_pb2.SUCCESS))\n      else:\n        raise ValueError("Only video input is allowed for this method.")\n\n  def stream(self, request_iterator: Iterator[service_pb2.PostModelOutputsRequest]\n            ) -> Iterator[service_pb2.MultiOutputResponse]:\n    for request in request_iterator:\n      if request.inputs[0].data.video.base64:\n        for output in self.generate(request):\n          yield output\n      elif request.inputs[0].data.image.base64:\n        yield self.predict(request)',p="torch==2.5.1\ntokenizers>=0.21.0\ntransformers>=4.47.0\npillow==10.4.0\nrequests==2.32.3\ntimm==1.0.12\nopencv-python-headless==4.10.0.84\nnumpy\naiohttp",m='# This is the sample config file for the image-detection model.\n\nmodel:\n  id: "model_id"\n  user_id: "user_id"\n  app_id: "app_id"\n  model_type_id: "visual-detector"\n\nbuild_info:\n  python_version: "3.11"\n\ninference_compute_info:\n  cpu_limit: "1"\n  cpu_memory: "2Gi"\n  num_accelerators: 1\n  accelerator_type: ["NVIDIA-A10G"]\n  accelerator_memory: "5Gi"\n\n\ncheckpoints:\n  type: "huggingface"\n  repo_id: "facebook/detr-resnet-50"\n  hf_token: "hf_token"',h='# Model to be uploaded: https://huggingface.co/casperhansen/llama-3-8b-instruct-awq\n\nimport os\nfrom threading import Thread\nfrom typing import Iterator, List, Optional\n\nimport torch\nfrom clarifai.runners.models.model_class import ModelClass\nfrom clarifai.utils.logging import logger\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2\nfrom clarifai_grpc.grpc.api.status import status_code_pb2, status_pb2\nfrom google.protobuf import json_format\nfrom transformers import (AutoModelForCausalLM, AutoTokenizer, TextIteratorStreamer)\n\n\n# Custom streamer for batched text generation\nclass BatchTextIteratorStreamer(TextIteratorStreamer):\n  """A custom streamer that handles batched text generation."""\n\n  def __init__(self,\n               batch_size: int,\n               tokenizer: "AutoTokenizer",\n               skip_prompt: bool = False,\n               timeout: Optional[float] = None,\n               **decode_kwargs):\n    super().__init__(tokenizer, skip_prompt, timeout, **decode_kwargs)\n    self.batch_size = batch_size\n    self.token_cache = [[] for _ in range(batch_size)]\n    self.print_len = [0 for _ in range(batch_size)]\n    self.generate_exception = None\n\n  def put(self, value):\n    if len(value.shape) != 2:\n      value = torch.reshape(value, (self.batch_size, value.shape[0] // self.batch_size))\n\n    if self.skip_prompt and self.next_tokens_are_prompt:\n      self.next_tokens_are_prompt = False\n      return\n\n    printable_texts = list()\n    for idx in range(self.batch_size):\n      self.token_cache[idx].extend(value[idx].tolist())\n      text = self.tokenizer.decode(self.token_cache[idx], **self.decode_kwargs)\n\n      if text.endswith("\\n"):\n        printable_text = text[self.print_len[idx]:]\n        self.token_cache[idx] = []\n        self.print_len[idx] = 0\n        # If the last token is a CJK character, we print the characters.\n      elif len(text) > 0 and self._is_chinese_char(ord(text[-1])):\n        printable_text = text[self.print_len[idx]:]\n        self.print_len[idx] += len(printable_text)\n      else:\n        printable_text = text[self.print_len[idx]:text.rfind(" ") + 1]\n        self.print_len[idx] += len(printable_text)\n      printable_texts.append(printable_text)\n\n    self.on_finalized_text(printable_texts)\n\n  def end(self):\n    printable_texts = list()\n    for idx in range(self.batch_size):\n      if len(self.token_cache[idx]) > 0:\n        text = self.tokenizer.decode(self.token_cache[idx], **self.decode_kwargs)\n        printable_text = text[self.print_len[idx]:]\n        self.token_cache[idx] = []\n        self.print_len[idx] = 0\n      else:\n        printable_text = ""\n      printable_texts.append(printable_text)\n\n    self.next_tokens_are_prompt = True\n    self.on_finalized_text(printable_texts, stream_end=True)\n\n  def on_finalized_text(self, texts: List[str], stream_end: bool = False):\n    self.text_queue.put(texts, timeout=self.timeout)\n    if stream_end:\n      self.text_queue.put(self.stop_signal, timeout=self.timeout)\n\n\n# Helper function to create an output\ndef create_output(text="", code=status_code_pb2.SUCCESS):\n  return resources_pb2.Output(\n      data=resources_pb2.Data(text=resources_pb2.Text(raw=text)),\n      status=status_pb2.Status(code=code))\n\n\n# Helper function to get the inference params\ndef get_inference_params(request) -> dict:\n  """Get the inference params from the request."""\n  inference_params = {}\n  if request.model.model_version.id != "":\n    output_info = request.model.model_version.output_info\n    output_info = json_format.MessageToDict(output_info, preserving_proto_field_name=True)\n    if "params" in output_info:\n      inference_params = output_info["params"]\n  return inference_params\n\n\n# Helper function to parse the inference params\ndef parse_inference_params(request):\n  default_params = {\n      "temperature": 0.7,\n      "max_tokens": 100,\n      "top_k": 50,\n      "top_p": 1.0,\n      "do_sample": True,\n  }\n  inference_params = get_inference_params(request)\n  return {\n      "temperature": inference_params.get("temperature", default_params["temperature"]),\n      "max_tokens": int(inference_params.get("max_tokens", default_params["max_tokens"])),\n      "top_k": int(inference_params.get("top_k", default_params["top_k"])),\n      "top_p": inference_params.get("top_p", default_params["top_p"]),\n      "do_sample": inference_params.get("do_sample", default_params["do_sample"]),\n  }\n\n\nclass MyModel(ModelClass):\n  """A custom runner that loads the model and generates text using batched inference."""\n\n  def load_model(self):\n    """Load the model here."""\n    self.device = \'cuda\' if torch.cuda.is_available() else \'cpu\'\n    logger.info(f"Running on device: {self.device}")\n\n    # Load model and tokenizer\n    # if checkpoints section is in config.yaml file then checkpoints will be downloaded at this path during model upload time.\n    checkpoints = os.path.join(os.path.dirname(__file__), "checkpoints")\n    self.tokenizer = AutoTokenizer.from_pretrained(checkpoints,)\n    self.tokenizer.pad_token = self.tokenizer.eos_token\n    self.model = AutoModelForCausalLM.from_pretrained(\n        checkpoints,\n        low_cpu_mem_usage=True,\n        device_map=self.device,\n        torch_dtype=torch.float16,\n    )\n    logger.info("Done loading!")\n\n  def predict(self,\n              request: service_pb2.PostModelOutputsRequest) -> service_pb2.MultiOutputResponse:\n    """This method generates outputs text for the given inputs using the model."""\n\n    inference_params = parse_inference_params(request)\n\n    prompts = [inp.data.text.raw for inp in request.inputs]\n    inputs = self.tokenizer(prompts, return_tensors="pt", padding=True).to(self.device)\n\n    output_tokens = self.model.generate(\n        **inputs,\n        max_new_tokens=inference_params["max_tokens"],\n        do_sample=inference_params["do_sample"],\n        temperature=inference_params["temperature"],\n        top_k=inference_params["top_k"],\n        top_p=inference_params["top_p"],\n        eos_token_id=self.tokenizer.eos_token_id,\n    )\n\n    outputs_text = self.tokenizer.batch_decode(\n        output_tokens[:, inputs[\'input_ids\'].shape[1]:], skip_special_tokens=True)\n\n    outputs = []\n    for text in outputs_text:\n      outputs.append(create_output(text=text, code=status_code_pb2.SUCCESS))\n\n    return service_pb2.MultiOutputResponse(\n        outputs=outputs, status=status_pb2.Status(code=status_code_pb2.SUCCESS))\n\n  def generate(self, request: service_pb2.PostModelOutputsRequest\n              ) -> Iterator[service_pb2.MultiOutputResponse]:\n    """This method generates stream of outputs for the given batch of inputs using the model."""\n    inference_params = parse_inference_params(request)\n\n    prompts = [inp.data.text.raw for inp in request.inputs]\n    batch_size = len(prompts)\n\n    # Initialize the custom streamer\n    streamer = BatchTextIteratorStreamer(\n        batch_size=batch_size,\n        tokenizer=self.tokenizer,\n        skip_prompt=True,\n        decode_kwargs={\n            "skip_special_tokens": True\n        })\n\n    # Tokenize the inputs\n    inputs = self.tokenizer(prompts, return_tensors="pt", padding=True).to(self.device)\n\n    generation_kwargs = {\n        "input_ids": inputs.input_ids,\n        "attention_mask": inputs.attention_mask,\n        "max_new_tokens": inference_params["max_tokens"],\n        "do_sample": inference_params["do_sample"],\n        "temperature": inference_params["temperature"],\n        "top_k": inference_params["top_k"],\n        "top_p": inference_params["top_p"],\n        "eos_token_id": self.tokenizer.eos_token_id,\n        "streamer": streamer,\n    }\n\n    # Start generation in a separate thread\n    thread = Thread(target=self.model.generate, kwargs=generation_kwargs)\n    thread.start()\n\n    # Initialize outputs\n    outputs = [create_output() for _ in range(batch_size)]\n\n    try:\n      for streamed_texts in streamer:  # Iterate over new texts generated\n        for idx, text in enumerate(streamed_texts):  # Iterate over each batch\n          outputs[idx].data.text.raw = text  # Append new text to each output\n          outputs[idx].status.code = status_code_pb2.SUCCESS\n        # Yield the current outputs\n        yield service_pb2.MultiOutputResponse(\n            outputs=outputs, status=status_pb2.Status(code=status_code_pb2.SUCCESS))\n    finally:\n      thread.join()\n\n  def stream(self, request_iterator: Iterator[service_pb2.PostModelOutputsRequest]\n            ) -> Iterator[service_pb2.MultiOutputResponse]:\n    raise NotImplementedError("Stream method is not implemented for the models.")',f="torch==2.5.1\ntokenizers>=0.21.0\ntransformers>=4.47.0\naccelerate>=1.2.0\nscipy==1.10.1\noptimum>=1.23.3\nxformers==0.0.28.post3\nprotobuf==5.27.3\neinops>=0.8.0\nrequests==2.32.2\nautoawq==0.2.7.post3",_='# This is the sample config file for the llama model.\n\nmodel:\n  id: "llama-3-8b-instruct"\n  user_id: "user_id"\n  app_id: "app_id"\n  model_type_id: "text-to-text"\n\nbuild_info:\n  python_version: "3.11"\n\ninference_compute_info:\n  cpu_limit: "1"\n  cpu_memory: "8Gi"\n  num_accelerators: 1\n  accelerator_type: ["NVIDIA-A10G"]\n  accelerator_memory: "12Gi"\n\ncheckpoints:\n  type: "huggingface"\n  repo_id: "casperhansen/llama-3-8b-instruct-awq"\n  hf_token: "hf_token"',g='# Model to be uploaded: https://platform.openai.com/docs/guides/speech-to-text/quickstart\n\nimport io\nimport itertools\nimport wave\nfrom typing import Iterator\n\nfrom clarifai.runners.models.model_class import ModelClass\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\nfrom google.protobuf import json_format\nfrom openai import OpenAI\n\nOPENAI_API_KEY = "OPENAI_API_KEY"\n\n\ndef bytes_to_audio_file(audio_bytes):\n  """Convert bytes data into a file-like object."""\n  if not audio_bytes:\n    raise ValueError("Audio bytes cannot be empty.")\n  audio_file = io.BytesIO(audio_bytes)\n  audio_file.name = "audio.wav"  # This name is used for the API\n  return audio_file\n\n\ndef preprocess_audio(audio_bytes=None, chunk_duration=1.0, stream=False):\n  """\n  Fetch and preprocess audio data from a URL or bytes.\n\n  Parameters:\n    bytes (bytes): Audio data in bytes (if provided).\n    chunk_duration (float): Duration of each audio chunk in seconds.\n    stream (bool): Whether to stream the audio in chunks.\n\n  Returns:\n    Audio data in bytes or a generator of audio chunks.\n  """\n\n  if audio_bytes:\n    if stream:\n      # Read the original audio bytes\n      audio_bytes = io.BytesIO(audio_bytes)\n      with wave.open(audio_bytes, "rb") as wave_file:\n        params = wave_file.getparams()\n        sample_rate = params.framerate\n        channels = params.nchannels\n        sample_width = params.sampwidth\n\n        # Calculate number of frames per chunk\n        frames_per_chunk = int(sample_rate * chunk_duration)\n\n        # Stream the audio in chunks (generator)\n        def audio_stream_generator():\n          while True:\n            frames = wave_file.readframes(frames_per_chunk)\n            if not frames:\n              break\n            chunk_buffer = io.BytesIO()\n            with wave.open(chunk_buffer, "wb") as chunk_wav:\n              chunk_wav.setnchannels(channels)\n              chunk_wav.setsampwidth(sample_width)\n              chunk_wav.setframerate(sample_rate)\n              chunk_wav.writeframes(frames)\n            yield chunk_buffer.getvalue()\n\n        return audio_stream_generator()\n    else:\n      # Return a single chunk of audio\n      return audio_bytes\n  else:\n    raise ValueError("\'audio_bytes\' must be provided")\n\n\ndef get_inference_params(request) -> dict:\n  """Get the inference params from the request."""\n  inference_params = {}\n  if request.model.model_version.id != "":\n    output_info = request.model.model_version.output_info\n    output_info = json_format.MessageToDict(output_info, preserving_proto_field_name=True)\n\n    if "params" in output_info:\n      inference_params = output_info["params"]\n  return inference_params\n\n\nclass MyModel(ModelClass):\n  """A custom runner that used for transcribing audio."""\n\n  def load_model(self):\n    """Load the model here."""\n    self.client = OpenAI(api_key=OPENAI_API_KEY)\n    self.model = "whisper-1"\n\n  def predict(self,\n              request: service_pb2.PostModelOutputsRequest) -> service_pb2.MultiOutputResponse:\n    """Predict the output for the given audio data."""\n    inference_params = get_inference_params(request)\n    language = inference_params.get("language", None)\n    task = inference_params.get("task", "transcription")\n    outputs = []\n    # TODO: parallelize this over inputs in a single request.\n    for input in request.inputs:\n      output = resources_pb2.Output()\n\n      input_data = input.data\n      audio_bytes = preprocess_audio(audio_bytes=input_data.audio.base64, stream=False)\n\n      if task == "transcription":\n        # Send audio bytes to Whisper for transcription\n        whisper_output = self.client.audio.transcriptions.create(\n            model=self.model, language=language, file=bytes_to_audio_file(audio_bytes))\n      elif task == "translation":\n        # Send audio bytes to Whisper for translation\n        whisper_output = self.client.audio.translations.create(\n            model=self.model, file=bytes_to_audio_file(audio_bytes))\n\n      # Set the output data\n      output.data.text.raw = whisper_output.text\n      output.status.code = status_code_pb2.SUCCESS\n      outputs.append(output)\n    return service_pb2.MultiOutputResponse(outputs=outputs,)\n\n  def generate(self, request: service_pb2.PostModelOutputsRequest\n              ) -> Iterator[service_pb2.MultiOutputResponse]:\n    """Generate the output in a streaming fashion for large audio files."""\n    inference_params = get_inference_params(request)\n    language = inference_params.get("language", None)\n    task = inference_params.get("task", "transcription")\n    batch_audio_streams = []\n    for input in request.inputs:\n      output = resources_pb2.Output()\n\n      input_data = input.data\n\n      audio_bytes = input_data.audio.base64\n      chunk_duration = 3.0\n\n      audio_stream = preprocess_audio(\n          audio_bytes=audio_bytes, stream=True, chunk_duration=chunk_duration)\n      batch_audio_streams.append(audio_stream)\n\n    for audio_stream in itertools.zip_longest(*batch_audio_streams, fillvalue=None):\n      resp = service_pb2.MultiOutputResponse()\n\n      for audio_bytes in audio_stream:\n        output = resp.outputs.add()\n        if task == "transcription":\n          # Send audio bytes to Whisper for transcription\n          whisper_output = self.client.audio.transcriptions.create(\n              model=self.model, language=language, file=bytes_to_audio_file(audio_bytes))\n        elif task == "translation":\n          # Send audio bytes to Whisper for translation\n          whisper_output = self.client.audio.translations.create(\n              model=self.model, file=bytes_to_audio_file(audio_bytes))\n        output.data.text.raw = whisper_output.text\n        output.status.code = status_code_pb2.SUCCESS\n      yield resp\n\n  def stream(self, request_iterator: Iterator[service_pb2.PostModelOutputsRequest]\n            ) -> Iterator[service_pb2.MultiOutputResponse]:\n    """Stream the output in a streaming fashion"""\n    for request in request_iterator:\n      for response in self.generate(request):\n        yield response',x="openai==1.55.3\nrequests",y='# This is the sample config file for the Openai Whisper model.\n\nmodel:\n  id: "model_id"\n  user_id: "user_id"\n  app_id: "app_id"\n  model_type_id: "audio-to-text"\n\nbuild_info:\n  python_version: "3.12"\n\ninference_compute_info:\n  cpu_limit: "1"\n  cpu_memory: "500m"\n  num_accelerators: 0',b="from clarifai.client.model import Model\nmodel = Model(model_id='model_id', user_id='user_id', app_id='app_id') # no need to provide any actual values of `model_id`, `user_id` and `app_id`\n\nimage_url = \"https://samples.clarifai.com/metro-north.jpg\"\n\n# Model Predict\nmodel_prediction = model.predict_by_url(image_url,)",v={description:"Learn how to upload a custom model using the Python SDK",sidebar_position:1},j="Model Upload",k={id:"sdk/compute-orchestration/model-upload",title:"Model Upload",description:"Learn how to upload a custom model using the Python SDK",source:"@site/docs/sdk/compute-orchestration/model-upload.md",sourceDirName:"sdk/compute-orchestration",slug:"/sdk/compute-orchestration/model-upload",permalink:"/sdk/compute-orchestration/model-upload",draft:!1,unlisted:!1,editUrl:"https://github.com/Clarifai/docs/blob/main/docs/sdk/compute-orchestration/model-upload.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{description:"Learn how to upload a custom model using the Python SDK",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Compute Orchestration",permalink:"/sdk/compute-orchestration/"},next:{title:"Clusters and Nodepools",permalink:"/sdk/compute-orchestration/set-up-compute"}},w={},q=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Installation",id:"installation",level:3},{value:"Environment Set Up",id:"environment-set-up",level:3},{value:"Create Project Directory",id:"create-project-directory",level:3},{value:"How to Upload a Model",id:"how-to-upload-a-model",level:2},{value:"Step 1: Define the <code>config.yaml</code> File",id:"step-1-define-the-configyaml-file",level:3},{value:"Model Info",id:"model-info",level:4},{value:"Compute Resources",id:"compute-resources",level:4},{value:"Model Checkpoints",id:"model-checkpoints",level:4},{value:"Model Concepts or Labels",id:"model-concepts-or-labels",level:4},{value:"Step 2: Define Dependencies in <code>requirements.txt</code>",id:"step-2-define-dependencies-in-requirementstxt",level:3},{value:"Step 3: Prepare the <code>model.py</code> File",id:"step-3-prepare-the-modelpy-file",level:3},{value:"Step 4: Test the Model Locally",id:"step-4-test-the-model-locally",level:3},{value:"1. Using the <code>test-locally</code> Command",id:"1-using-the-test-locally-command",level:4},{value:"2. Using the <code>run-locally</code> Command",id:"2-using-the-run-locally-command",level:4},{value:"Step 5: Upload the Model to Clarifai",id:"step-5-upload-the-model-to-clarifai",level:3},{value:"Examples",id:"examples",level:2},{value:"Image Classifier",id:"image-classifier",level:3},{value:"<code>model.py</code>",id:"modelpy",level:4},{value:"<code>requirements.txt</code>",id:"requirementstxt",level:4},{value:"<code>config.yaml</code>",id:"configyaml",level:4},{value:"Image Detector",id:"image-detector",level:3},{value:"<code>model.py</code>",id:"modelpy-1",level:4},{value:"<code>requirements.txt</code>",id:"requirementstxt-1",level:4},{value:"<code>config.yaml</code>",id:"configyaml-1",level:4},{value:"Large Language Models (LLMs)",id:"large-language-models-llms",level:3},{value:"<code>model.py</code>",id:"modelpy-2",level:4},{value:"<code>requirements.txt</code>",id:"requirementstxt-2",level:4},{value:"<code>config.yaml</code>",id:"configyaml-2",level:4},{value:"Speech Recognition Model",id:"speech-recognition-model",level:3},{value:"<code>model.py</code>",id:"modelpy-3",level:4},{value:"<code>requirements.txt</code>",id:"requirementstxt-3",level:4},{value:"<code>config.yaml</code>",id:"configyaml-3",level:4}];function I(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"model-upload",children:"Model Upload"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Learn how to upload a custom model using the Python SDK"})}),"\n",(0,o.jsx)("hr",{}),"\n",(0,o.jsx)(n.p,{children:"The Clarifai Python SDK allow you to upload custom models easily. Whether you're working with a pre-trained model from an external source or one you've built from scratch, Clarifai allows seamless integration of your models, enabling you to take advantage of the platform\u2019s powerful capabilities."}),"\n",(0,o.jsx)(n.p,{children:"Once uploaded to our platform, your model can be utilized alongside Clarifai's vast suite of AI tools. It will be automatically deployed and ready to be evaluated, combined with other models and agent operators in a workflow, or used to serve inference requests as it is."}),"\n",(0,o.jsx)(n.p,{children:"Let\u2019s demonstrate how you can successfully upload different types of models to the Clarifai platform."}),"\n",(0,o.jsx)(n.admonition,{type:"note",children:(0,o.jsx)(n.p,{children:"For the Compute Orchestration Public Preview, deployment is only supported for models that users have uploaded to our platform via the Python SDK. We plan to expand this functionality to include out-of-the-box and custom-trained models on our platform in the future."})}),"\n",(0,o.jsx)(n.admonition,{type:"info",children:(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["This new feature is in ",(0,o.jsx)(n.a,{href:"https://docs.clarifai.com/product-updates/changelog/release-types",children:"Public Preview"}),". If you'd like to test it out and provide feedback, please request access ",(0,o.jsx)(n.a,{href:"https://www.clarifai.com/explore/contact-us-co",children:"here"}),"."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["This new upload experience is compatible with the latest ",(0,o.jsx)(n.a,{href:"https://github.com/Clarifai/clarifai-python",children:(0,o.jsx)(n.code,{children:"clarifai"})})," Python package, starting from version 10.9.2."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["If you prefer the previous upload method, which is supported up to version 10.8.4, you can refer to the documentation ",(0,o.jsx)(n.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:t(28175).A+"",children:"here"}),"."]}),"\n"]}),"\n"]})}),"\n",(0,o.jsx)(n.admonition,{type:"tip",children:(0,o.jsxs)(n.p,{children:["You can run the following command to clone the ",(0,o.jsx)(n.a,{href:"https://github.com/Clarifai/examples/tree/main",children:"repository"})," containing examples of how to upload various model types and follow along with this documentation:\n",(0,o.jsx)(n.code,{children:"git clone https://github.com/Clarifai/examples.git"}),". After cloning it, go to the ",(0,o.jsx)(n.code,{children:"models/model_upload"})," folder."]})}),"\n","\n","\n","\n","\n","\n","\n",(0,o.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,o.jsx)(n.h3,{id:"installation",children:"Installation"}),"\n",(0,o.jsxs)(n.p,{children:["To begin, install the latest version of the ",(0,o.jsx)(n.code,{children:"clarifai"})," Python package."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-text",children:"pip install --upgrade clarifai\n"})}),"\n",(0,o.jsx)(n.h3,{id:"environment-set-up",children:"Environment Set Up"}),"\n",(0,o.jsxs)(n.p,{children:["Before proceeding, ensure that the ",(0,o.jsx)(n.code,{children:"CLARIFAI_PAT"})," (Personal Access Token) environment variable is set. You can generate the PAT key in your Personal Settings page by navigating to the ",(0,o.jsx)(n.a,{href:"https://clarifai.com/settings/security",children:"Security section"}),"."]}),"\n",(0,o.jsx)(n.p,{children:"This token is essential for authenticating your connection to the Clarifai platform."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-text",children:"export CLARIFAI_PAT=YOUR_PERSONAL_ACCESS_TOKEN_HERE\n"})}),"\n",(0,o.jsx)(n.h3,{id:"create-project-directory",children:"Create Project Directory"}),"\n",(0,o.jsx)(n.p,{children:"Create a project directory and organize your files as indicated below to fit the requirements of uploading models to the Clarifai platform."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-text",children:"your_model_directory/\n\u251c\u2500\u2500 1/\n\u2502   \u2514\u2500\u2500 model.py\n\u251c\u2500\u2500 requirements.txt\n\u2514\u2500\u2500 config.yaml\n"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"your_model_directory/"})," \u2013 The main directory containing your model files.","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"1/"})," \u2013 A subdirectory that holds the model file (",(0,o.jsxs)(n.em,{children:["Note that the folder is named as ",(0,o.jsx)(n.strong,{children:"1"})]}),").","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"model.py"})," \u2013 Contains the code that defines your model, including loading the model and running inference."]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"requirements.txt"})," \u2013 Lists the Python libraries and dependencies required to run your model."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"config.yaml"})," \u2013 Contains model metadata and configuration details necessary for building the Docker image, defining compute resources, and uploading the model to Clarifai."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"how-to-upload-a-model",children:"How to Upload a Model"}),"\n",(0,o.jsx)(n.p,{children:"Let's talk about the common steps you'd follow to upload any type of model to the Clarifai platform."}),"\n",(0,o.jsxs)(n.h3,{id:"step-1-define-the-configyaml-file",children:["Step 1: Define the ",(0,o.jsx)(n.code,{children:"config.yaml"})," File"]}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"config.yaml"})," file is essential for specifying the model\u2019s metadata, compute resource requirements, and model checkpoints."]}),"\n",(0,o.jsx)(n.p,{children:"Here\u2019s a breakdown of the key sections in the file."}),"\n",(0,o.jsx)(n.h4,{id:"model-info",children:"Model Info"}),"\n",(0,o.jsx)(n.p,{children:"This section defines your model ID, Clarifai user ID, and Clarifai app ID, which will determine where the model is uploaded on the Clarifai platform."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:'model:\n  id: "model_id"\n  user_id: "user_id"\n  app_id: "app_id"\n  model_type_id: "text-to-text" # Change this based on your model type (e.g., image-classifier, text-to-text)\n'})}),"\n",(0,o.jsx)(n.h4,{id:"compute-resources",children:"Compute Resources"}),"\n",(0,o.jsx)(n.p,{children:"Here, you define the minimum compute resources required for running your model, including CPU, memory, and optional GPU specifications."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:'inference_compute_info:\n  cpu_limit: "2"\n  cpu_memory: "13Gi"\n  num_accelerators: 1\n  accelerator_type: ["NVIDIA-A10G"] # Specify the GPU type if needed\n  accelerator_memory: "15Gi"\n'})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"cpu_limit"})}),' \u2013 Number of CPUs allocated for the model (follows Kubernetes notation, e.g., "1", "2").']}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"cpu_memory"})}),' \u2013 Minimum memory required for the CPU (uses Kubernetes notation, e.g., "1Gi", "1500Mi", "3Gi").']}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"num_accelerators"})})," \u2013 Number of GPUs or TPUs to use for inference."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"accelerator_type"})}),' \u2013 Specifies the type of accelerators (e.g., GPU or TPU) supported by the model (e.g., "NVIDIA-A10G").']}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"accelerator_memory"})})," \u2013 Minimum memory required for the GPU or TPU."]}),"\n"]}),"\n",(0,o.jsx)(n.h4,{id:"model-checkpoints",children:"Model Checkpoints"}),"\n",(0,o.jsx)(n.p,{children:"If you're using a model from Hugging Face, you can automatically download its checkpoints by specifying the appropriate configuration in this section. For private or restricted Hugging Face repositories, include an access token."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:'checkpoints:\n  type: "huggingface"\n  repo_id: "meta-llama/Meta-Llama-3-8B-Instruct"\n  hf_token: "your_hf_token" # Required for private models\n'})}),"\n",(0,o.jsx)(n.h4,{id:"model-concepts-or-labels",children:"Model Concepts or Labels"}),"\n",(0,o.jsx)(n.admonition,{type:"important",children:(0,o.jsx)(n.p,{children:"This section is required if your model outputs concepts or labels and is not being directly loaded from Hugging Face."})}),"\n",(0,o.jsxs)(n.p,{children:["For models that output concepts or labels, such as classification or detection models, you must define a ",(0,o.jsx)(n.code,{children:"concepts"})," section in the ",(0,o.jsx)(n.code,{children:"config.yaml"})," file:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"concepts:\n  - id: '0'\n    name: bus\n  - id: '1'\n    name: person\n  - id: '2'\n    name: bicycle\n  - id: '3'\n    name: car\n"})}),"\n",(0,o.jsxs)(n.admonition,{type:"note",children:[(0,o.jsx)(n.mdxAdmonitionTitle,{}),(0,o.jsxs)(n.p,{children:["If you're using a model from Hugging Face and the ",(0,o.jsx)(n.code,{children:"checkpoints"})," section is defined, the Clarifai platform will automatically infer concepts. In this case, you don\u2019t need to manually specify them."]})]}),"\n",(0,o.jsxs)(n.h3,{id:"step-2-define-dependencies-in-requirementstxt",children:["Step 2: Define Dependencies in ",(0,o.jsx)(n.code,{children:"requirements.txt"})]}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"requirements.txt"})," file lists all the Python dependencies your model needs. This ensures that the necessary libraries are installed in the runtime environment."]}),"\n",(0,o.jsxs)(n.h3,{id:"step-3-prepare-the-modelpy-file",children:["Step 3: Prepare the ",(0,o.jsx)(n.code,{children:"model.py"})," File"]}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"model.py"})," file contains the logic for your model, including how it loads and handles predictions. This file must implement a class that inherits from ",(0,o.jsx)(n.code,{children:"ModelRunner"})," and defines the following methods:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"load_model()"})})," \u2013 Initializes and loads the model, preparing it for inference."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"predict(input_data)"})})," \u2013 Handles the core logic for making predictions. It processes the input data and returns the output response."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"generate(input_data)"})})," \u2013 Provides output in a streaming manner, if applicable to the model's use case."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"stream(input_data)"})})," \u2013 Manages both streaming input and output, primarily for more advanced use cases where data is processed continuously."]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"from clarifai.runners.models.model_class import ModelClass\n\nclass YourCustomModel(ModelClass):\n    def load_model(self):\n        # Initialize and load the model here\n        pass\n\n    def predict(self, request):\n        # Handle input and return the model's predictions\n        return output_data\n\n    def generate(self, request):\n        # Handle streaming output (if applicable)\n        pass\n\n    def stream(self, request):\n        # Handle both streaming input and output\n        pass\n"})}),"\n",(0,o.jsx)(n.h3,{id:"step-4-test-the-model-locally",children:"Step 4: Test the Model Locally"}),"\n",(0,o.jsx)(n.p,{children:"Before uploading your model to the Clarifai platform, it's important to test it locally to catch any typos or misconfigurations in the code."}),"\n",(0,o.jsxs)(n.p,{children:["This can prevent upload failures due to issues in the ",(0,o.jsx)(n.code,{children:"model.py"})," or incorrect model implementation. It also ensures the model runs smoothly and that all dependencies are correctly configured."]}),"\n",(0,o.jsx)(n.p,{children:"You can test the model within a Docker container or a Python virtual environment."}),"\n",(0,o.jsx)(n.admonition,{title:"Recommendation",type:"note",children:(0,o.jsx)(n.p,{children:"If Docker is installed on your system, it is highly recommended to use it for testing or running the model. Docker provides better isolation and avoids dependency conflicts."})}),"\n",(0,o.jsx)(n.admonition,{type:"warning",children:(0,o.jsx)(n.p,{children:"Ensure your local environment has sufficient memory and compute resources to load and run the model for testing."})}),"\n",(0,o.jsxs)(n.p,{children:["There are two types of CLI (command line interface) commands you can use to test your models in your local development environment. You can learn more about the Clarifai CLI tool ",(0,o.jsx)(n.a,{href:"https://docs.clarifai.com/sdk/cli",children:"here"}),"."]}),"\n",(0,o.jsxs)(n.h4,{id:"1-using-the-test-locally-command",children:["1. Using the ",(0,o.jsx)(n.code,{children:"test-locally"})," Command"]}),"\n",(0,o.jsx)(n.p,{children:"This method allows you to test your model with a single CLI command. It runs the model locally and sends a sample request to verify that the model responds successfully. The results of the request are displayed directly in the console."}),"\n",(0,o.jsx)(n.p,{children:"Here is how to test a model in a Docker Container:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"clarifai model test-locally --model_path {add_model_path_here} --mode container\n"})}),"\n",(0,o.jsx)(n.p,{children:"Here is how to test a model in a virtual environment:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"clarifai model test-locally --model_path {add_model_path_here} --mode env\n"})}),"\n",(0,o.jsxs)(n.h4,{id:"2-using-the-run-locally-command",children:["2. Using the ",(0,o.jsx)(n.code,{children:"run-locally"})," Command"]}),"\n",(0,o.jsxs)(n.p,{children:["This method starts a local gRPC server at ",(0,o.jsx)(n.code,{children:"https://localhost:{port}/"})," for running the model. Once the server is running, you can perform inference on the model via the Clarifai client SDK."]}),"\n",(0,o.jsx)(n.p,{children:"Here is how to test a model in a Docker Container:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"clarifai model run-locally --model_path {add_model_path_here} --mode container --port 8000\n"})}),"\n",(0,o.jsx)(n.p,{children:"Here is how to test a model in a virtual environment:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"clarifai model run-locally --model_path {add_model_path_here} --mode container --port 8000\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Once the model is running locally, you need to configure the ",(0,o.jsx)(n.code,{children:"CLARIFAI_API_BASE"})," environment variable to point to the localhost and port where the gRPC server is running."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'export CLARIFAI_API_BASE="localhost:{port}"\n'})}),"\n",(0,o.jsxs)(n.p,{children:["You can then make different ",(0,o.jsx)(n.a,{href:"https://docs.clarifai.com/sdk/compute-orchestration#predict-with-deployed-model",children:"types of inference requests"})," using the model \u2014 unary-unary, unary-stream, or stream-stream predict calls."]}),"\n",(0,o.jsx)(n.p,{children:"Here is an example of a unary-unary prediction call:"}),"\n",(0,o.jsx)(i.A,{children:(0,o.jsx)(r.A,{value:"python",label:"Python",children:(0,o.jsx)(a.A,{className:"language-python",children:b})})}),"\n",(0,o.jsxs)(n.admonition,{title:"CLI Flags",type:"note",children:[(0,o.jsx)(n.p,{children:"These are the key CLI flags available for local testing and running your models:"}),(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"--model_path"})," \u2014  Path to the model directory."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"--mode"})," \u2014  Specify how to run the model: ",(0,o.jsx)(n.code,{children:"env"})," for virtual environment or ",(0,o.jsx)(n.code,{children:"container"})," for Docker container. Defaults to ",(0,o.jsx)(n.code,{children:"env"}),"."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"-p"})," or ",(0,o.jsx)(n.code,{children:"--port"})," \u2014  The port to host the gRPC server for running the model locally. Defaults to ",(0,o.jsx)(n.code,{children:"8000"}),"."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"--keep_env"})," \u2014  Retain the virtual environment after testing the model locally (applicable for ",(0,o.jsx)(n.code,{children:"env"})," mode). Defaults to ",(0,o.jsx)(n.code,{children:"False"}),"."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"--keep_image"})," \u2014  Retain the Docker image built after testing the model locally (applicable for ",(0,o.jsx)(n.code,{children:"container"})," mode). Defaults to ",(0,o.jsx)(n.code,{children:"False"}),"."]}),"\n"]}),"\n"]})]}),"\n",(0,o.jsx)(n.h3,{id:"step-5-upload-the-model-to-clarifai",children:"Step 5: Upload the Model to Clarifai"}),"\n",(0,o.jsx)(n.p,{children:"Once your model is ready, upload it to the Clarifai platform by running the following command:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"clarifai model upload --model_path {add_model_path_here}\n"})}),"\n",(0,o.jsx)(n.p,{children:"This command builds the model\u2019s Docker image using the defined compute resources and uploads it to Clarifai, where it can be served in production."}),"\n",(0,o.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,o.jsx)(n.admonition,{type:"tip",children:(0,o.jsxs)(n.p,{children:["You can find various model upload examples ",(0,o.jsx)(n.a,{href:"https://github.com/Clarifai/examples/tree/main/models/model_upload",children:"here"}),", which demonstrate different use cases and optimizations."]})}),"\n",(0,o.jsx)(n.h3,{id:"image-classifier",children:"Image Classifier"}),"\n",(0,o.jsx)(n.h4,{id:"modelpy",children:(0,o.jsx)(n.code,{children:"model.py"})}),"\n",(0,o.jsx)(i.A,{children:(0,o.jsx)(r.A,{value:"python",label:"Python",children:(0,o.jsx)(a.A,{className:"language-python",children:l})})}),"\n",(0,o.jsx)(n.h4,{id:"requirementstxt",children:(0,o.jsx)(n.code,{children:"requirements.txt"})}),"\n",(0,o.jsx)(i.A,{children:(0,o.jsx)(r.A,{value:"text",label:"Text",children:(0,o.jsx)(a.A,{className:"language-text",children:d})})}),"\n",(0,o.jsx)(n.h4,{id:"configyaml",children:(0,o.jsx)(n.code,{children:"config.yaml"})}),"\n",(0,o.jsx)(i.A,{children:(0,o.jsx)(r.A,{value:"yaml",label:"YAML",children:(0,o.jsx)(a.A,{className:"language-yaml",children:c})})}),"\n",(0,o.jsx)(n.h3,{id:"image-detector",children:"Image Detector"}),"\n",(0,o.jsx)(n.h4,{id:"modelpy-1",children:(0,o.jsx)(n.code,{children:"model.py"})}),"\n",(0,o.jsx)(i.A,{children:(0,o.jsx)(r.A,{value:"python",label:"Python",children:(0,o.jsx)(a.A,{className:"language-python",children:u})})}),"\n",(0,o.jsx)(n.h4,{id:"requirementstxt-1",children:(0,o.jsx)(n.code,{children:"requirements.txt"})}),"\n",(0,o.jsx)(i.A,{children:(0,o.jsx)(r.A,{value:"text",label:"Text",children:(0,o.jsx)(a.A,{className:"language-text",children:p})})}),"\n",(0,o.jsx)(n.h4,{id:"configyaml-1",children:(0,o.jsx)(n.code,{children:"config.yaml"})}),"\n",(0,o.jsx)(i.A,{children:(0,o.jsx)(r.A,{value:"yaml",label:"YAML",children:(0,o.jsx)(a.A,{className:"language-yaml",children:m})})}),"\n",(0,o.jsx)(n.h3,{id:"large-language-models-llms",children:"Large Language Models (LLMs)"}),"\n",(0,o.jsx)(n.h4,{id:"modelpy-2",children:(0,o.jsx)(n.code,{children:"model.py"})}),"\n",(0,o.jsx)(i.A,{children:(0,o.jsx)(r.A,{value:"python",label:"Python",children:(0,o.jsx)(a.A,{className:"language-python",children:h})})}),"\n",(0,o.jsx)(n.h4,{id:"requirementstxt-2",children:(0,o.jsx)(n.code,{children:"requirements.txt"})}),"\n",(0,o.jsx)(i.A,{children:(0,o.jsx)(r.A,{value:"text",label:"Text",children:(0,o.jsx)(a.A,{className:"language-text",children:f})})}),"\n",(0,o.jsx)(n.h4,{id:"configyaml-2",children:(0,o.jsx)(n.code,{children:"config.yaml"})}),"\n",(0,o.jsx)(i.A,{children:(0,o.jsx)(r.A,{value:"yaml",label:"YAML",children:(0,o.jsx)(a.A,{className:"language-yaml",children:_})})}),"\n",(0,o.jsx)(n.admonition,{type:"note",children:(0,o.jsx)(n.p,{children:"You can refer to the examples repository mentioned above for additional examples of uploading other large language models (LLMs)."})}),"\n",(0,o.jsx)(n.h3,{id:"speech-recognition-model",children:"Speech Recognition Model"}),"\n",(0,o.jsx)(n.h4,{id:"modelpy-3",children:(0,o.jsx)(n.code,{children:"model.py"})}),"\n",(0,o.jsx)(i.A,{children:(0,o.jsx)(r.A,{value:"python",label:"Python",children:(0,o.jsx)(a.A,{className:"language-python",children:g})})}),"\n",(0,o.jsx)(n.h4,{id:"requirementstxt-3",children:(0,o.jsx)(n.code,{children:"requirements.txt"})}),"\n",(0,o.jsx)(i.A,{children:(0,o.jsx)(r.A,{value:"text",label:"Text",children:(0,o.jsx)(a.A,{className:"language-text",children:x})})}),"\n",(0,o.jsx)(n.h4,{id:"configyaml-3",children:(0,o.jsx)(n.code,{children:"config.yaml"})}),"\n",(0,o.jsx)(i.A,{children:(0,o.jsx)(r.A,{value:"yaml",label:"YAML",children:(0,o.jsx)(a.A,{className:"language-yaml",children:y})})})]})}function C(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(I,{...e})}):I(e)}},19365:(e,n,t)=>{t.d(n,{A:()=>r});t(96540);var o=t(18215);const s={tabItem:"tabItem_Ymn6"};var i=t(74848);function r(e){let{children:n,hidden:t,className:r}=e;return(0,i.jsx)("div",{role:"tabpanel",className:(0,o.A)(s.tabItem,r),hidden:t,children:n})}},11470:(e,n,t)=>{t.d(n,{A:()=>j});var o=t(96540),s=t(18215),i=t(23104),r=t(56347),a=t(205),l=t(57485),d=t(31682),c=t(70679);function u(e){return o.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,o.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function p(e){const{values:n,children:t}=e;return(0,o.useMemo)((()=>{const e=n??function(e){return u(e).map((e=>{let{props:{value:n,label:t,attributes:o,default:s}}=e;return{value:n,label:t,attributes:o,default:s}}))}(t);return function(e){const n=(0,d.X)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function m(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function h(e){let{queryString:n=!1,groupId:t}=e;const s=(0,r.W6)(),i=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,l.aZ)(i),(0,o.useCallback)((e=>{if(!i)return;const n=new URLSearchParams(s.location.search);n.set(i,e),s.replace({...s.location,search:n.toString()})}),[i,s])]}function f(e){const{defaultValue:n,queryString:t=!1,groupId:s}=e,i=p(e),[r,l]=(0,o.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!m({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const o=t.find((e=>e.default))??t[0];if(!o)throw new Error("Unexpected error: 0 tabValues");return o.value}({defaultValue:n,tabValues:i}))),[d,u]=h({queryString:t,groupId:s}),[f,_]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[s,i]=(0,c.Dv)(t);return[s,(0,o.useCallback)((e=>{t&&i.set(e)}),[t,i])]}({groupId:s}),g=(()=>{const e=d??f;return m({value:e,tabValues:i})?e:null})();(0,a.A)((()=>{g&&l(g)}),[g]);return{selectedValue:r,selectValue:(0,o.useCallback)((e=>{if(!m({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);l(e),u(e),_(e)}),[u,_,i]),tabValues:i}}var _=t(92303);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var x=t(74848);function y(e){let{className:n,block:t,selectedValue:o,selectValue:r,tabValues:a}=e;const l=[],{blockElementScrollPositionUntilNextRender:d}=(0,i.a_)(),c=e=>{const n=e.currentTarget,t=l.indexOf(n),s=a[t].value;s!==o&&(d(n),r(s))},u=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const t=l.indexOf(e.currentTarget)+1;n=l[t]??l[0];break}case"ArrowLeft":{const t=l.indexOf(e.currentTarget)-1;n=l[t]??l[l.length-1];break}}n?.focus()};return(0,x.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":t},n),children:a.map((e=>{let{value:n,label:t,attributes:i}=e;return(0,x.jsx)("li",{role:"tab",tabIndex:o===n?0:-1,"aria-selected":o===n,ref:e=>l.push(e),onKeyDown:u,onClick:c,...i,className:(0,s.A)("tabs__item",g.tabItem,i?.className,{"tabs__item--active":o===n}),children:t??n},n)}))})}function b(e){let{lazy:n,children:t,selectedValue:s}=e;const i=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=i.find((e=>e.props.value===s));return e?(0,o.cloneElement)(e,{className:"margin-top--md"}):null}return(0,x.jsx)("div",{className:"margin-top--md",children:i.map(((e,n)=>(0,o.cloneElement)(e,{key:n,hidden:e.props.value!==s})))})}function v(e){const n=f(e);return(0,x.jsxs)("div",{className:(0,s.A)("tabs-container",g.tabList),children:[(0,x.jsx)(y,{...n,...e}),(0,x.jsx)(b,{...n,...e})]})}function j(e){const n=(0,_.A)();return(0,x.jsx)(v,{...e,children:u(e.children)},String(n))}},28175:(e,n,t)=>{t.d(n,{A:()=>o});const o=t.p+"assets/files/old_model_upload_method-9985c40b5c542a77c426504974559818.pdf"}}]);
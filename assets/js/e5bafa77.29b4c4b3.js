"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[4815],{35572:(n,e,a)=>{a.r(e),a.d(e,{assets:()=>w,contentTitle:()=>O,default:()=>A,frontMatter:()=>D,metadata:()=>i,toc:()=>P});const i=JSON.parse('{"id":"api-guide/predict/video","title":"Video","description":"Make predictions on video inputs","source":"@site/docs/api-guide/predict/video.md","sourceDirName":"api-guide/predict","slug":"/api-guide/predict/video","permalink":"/api-guide/predict/video","draft":false,"unlisted":false,"editUrl":"https://github.com/Clarifai/docs/blob/main/docs/api-guide/predict/video.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"description":"Make predictions on video inputs","sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Images","permalink":"/api-guide/predict/images"},"next":{"title":"Text","permalink":"/api-guide/predict/text"}}');var t=a(74848),o=a(28453),s=a(65537),p=a(79329),c=a(58069);const r="#######################################################################################################\n# In this section, we set the user authentication, user and app ID, model details, URL of the video\n# we want as an input, and sample_ms. Change these strings to run your own example.\n#######################################################################################################\n\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\n# Specify the correct user_id/app_id pairings\n# Since you're making inferences outside your app's scope\nUSER_ID = 'clarifai'\nAPP_ID = 'main'\n# Change these to whatever model and video URL you want to use\nMODEL_ID = 'general-image-recognition'\nMODEL_VERSION_ID = 'aa7f35c01e0642fda5cf400f543e7c40'\nVIDEO_URL = 'https://samples.clarifai.com/beer.mp4'\n# Change this to configure the FPS rate (If it's not configured, it defaults to 1 FPS) \nSAMPLE_MS = 500\n\n############################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n############################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\npost_model_outputs_response = stub.PostModelOutputs(\n    service_pb2.PostModelOutputsRequest(\n        user_app_id=userDataObject,  # The userDataObject is created in the overview and is required when using a PAT\n        model_id=MODEL_ID,\n        version_id=MODEL_VERSION_ID,  # This is optional. Defaults to the latest model version\n        inputs=[\n            resources_pb2.Input(\n                data=resources_pb2.Data(\n                    video=resources_pb2.Video(\n                        url=VIDEO_URL\n                    )\n                )\n            )\n        ],\n        model=resources_pb2.Model(\n            output_info=resources_pb2.OutputInfo(\n                output_config=resources_pb2.OutputConfig(sample_ms=SAMPLE_MS)\n            )\n        ),\n    ),\n    metadata=metadata\n)\nif post_model_outputs_response.status.code != status_code_pb2.SUCCESS:\n    print(post_model_outputs_response.status)\n    raise Exception(\"Post model outputs failed, status: \" + post_model_outputs_response.status.description)\n\n# Since we have one input, one output will exist here\noutput = post_model_outputs_response.outputs[0]\n\n# A separate prediction is available for each \"frame\"\nfor frame in output.data.frames:\n    print(\"Predicted concepts on frame \" + str(frame.frame_info.time) + \":\")\n    for concept in frame.data.concepts:\n        print(\"\\t%s %.2f\" % (concept.name, concept.value))\n\n# Uncomment this line to print the raw output\n#print(output)",d="############################################################################################################\n# In this section, we set the user authentication, user and app ID, model details, location of the video\n# we want as an input, and sample_ms. Change these strings to run your own example.\n###########################################################################################################\n\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\n# Specify the correct user_id/app_id pairings\n# Since you're making inferences outside your app's scope\nUSER_ID = 'clarifai'\nAPP_ID = 'main'\n# Change these to whatever model and video input you want to use\nMODEL_ID = 'general-image-recognition'\nMODEL_VERSION_ID = 'aa7f35c01e0642fda5cf400f543e7c40'\nVIDEO_FILE_LOCATION = 'YOUR_VIDEO_FILE_LOCATION_HERE'\n# Change this to configure the FPS rate (If it's not configured, it defaults to 1 FPS) \nSAMPLE_MS = 500\n\n############################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n############################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\nwith open(VIDEO_FILE_LOCATION, \"rb\") as f:\n    file_bytes = f.read()\n\npost_model_outputs_response = stub.PostModelOutputs(\n    service_pb2.PostModelOutputsRequest(\n        user_app_id=userDataObject,  # The userDataObject is created in the overview and is required when using a PAT\n        model_id=MODEL_ID,\n        version_id=MODEL_VERSION_ID,  # This is optional. Defaults to the latest model version\n        inputs=[\n            resources_pb2.Input(\n                data=resources_pb2.Data(\n                    video=resources_pb2.Video(\n                        base64=file_bytes\n                    )\n                )\n            )\n        ],\n        model=resources_pb2.Model(\n            output_info=resources_pb2.OutputInfo(\n                output_config=resources_pb2.OutputConfig(sample_ms=SAMPLE_MS)\n            )\n        ),\n    ),\n    metadata=metadata\n)\nif post_model_outputs_response.status.code != status_code_pb2.SUCCESS:\n    print(post_model_outputs_response.status)\n    raise Exception(\"Post model outputs failed, status: \" + post_model_outputs_response.status.description)\n\n# Since we have one input, one output will exist here\noutput = post_model_outputs_response.outputs[0]\n\n# A separate prediction is available for each \"frame\"\nfor frame in output.data.frames:\n    print(\"Predicted concepts on frame \" + str(frame.frame_info.time) + \":\")\n    for concept in frame.data.concepts:\n        print(\"\\t%s %.2f\" % (concept.name, concept.value))\n\n# Uncomment this line to print the raw output\n#print(output)",l="\x3c!--index.html file--\x3e\n\n<script>\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, user and app ID, model details, URL of the video\n    // we want as an input, and sample_ms. Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    // Your PAT (Personal Access Token) can be found in the Account's Security section\n    const PAT = 'YOUR_PAT_HERE';\n    // Specify the correct user_id/app_id pairings\n    // Since you're making inferences outside your app's scope\n    const USER_ID = 'clarifai';    \n    const APP_ID = 'main';\n    // Change these to whatever model and video URL you want to use\n    const MODEL_ID = 'general-image-recognition';\n    const MODEL_VERSION_ID = 'aa7f35c01e0642fda5cf400f543e7c40';    \n    const VIDEO_URL = 'https://samples.clarifai.com/beer.mp4';\n    // Change this to configure the FPS rate (If it's not configured, it defaults to 1 FPS) \n    const SAMPLE_MS = 500;\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        \"user_app_id\": {\n            \"user_id\": USER_ID,\n            \"app_id\": APP_ID\n        },\n        \"inputs\": [\n            {\n                \"data\": {\n                    \"video\": {\n                        \"url\": VIDEO_URL\n                    }\n                }\n            }\n        ],\n        \"model\": {\n            \"output_info\": {\n                \"output_config\": {\n                    \"sample_ms\": SAMPLE_MS\n                }\n\n            }\n        }\n    });\n\n    const requestOptions = {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        },\n        body: raw\n    };\n\n    // NOTE: MODEL_VERSION_ID is optional, you can also call prediction with the MODEL_ID only\n    // https://api.clarifai.com/v2/models/{YOUR_MODEL_ID}/outputs\n    // this will default to the latest version_id\n\n    fetch(\"https://api.clarifai.com/v2/models/\" + MODEL_ID + \"/versions/\" + MODEL_VERSION_ID + \"/outputs\", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n<\/script>",u="\x3c!--index.html file--\x3e\n\n<script>\n    ///////////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, user and app ID, model details, bytes of the \n    // video we want as an input, and sample_ms. Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////////////////////////////////\n\n    // Your PAT (Personal Access Token) can be found in the Account's Security section\n    const PAT = 'YOUR_PAT_HERE';\n    // Specify the correct user_id/app_id pairings\n    // Since you're making inferences outside your app's scope\n    const USER_ID = 'clarifai';   \n    const APP_ID = 'main';\n    // Change these to whatever model and video input you want to use\n    const MODEL_ID = 'general-image-recognition';\n    const MODEL_VERSION_ID = 'aa7f35c01e0642fda5cf400f543e7c40';\n    const VIDEO_BYTES_STRING = 'YOUR_BYTES_STRING_HERE';\n    // Change this to configure the FPS rate (If it's not configured, it defaults to 1 FPS) \n    const SAMPLE_MS = 500;\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        \"user_app_id\": {\n            \"user_id\": USER_ID,\n            \"app_id\": APP_ID\n        },\n        \"inputs\": [\n            {\n                \"data\": {\n                    \"video\": {\n                        \"base64\": VIDEO_BYTES_STRING\n                    }\n                }\n            }\n        ],\n        \"model\": {\n            \"output_info\": {\n                \"output_config\": {\n                    \"sample_ms\": SAMPLE_MS\n                }\n\n            }\n        }\n    });\n\n    const requestOptions = {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        },\n        body: raw\n    };\n\n    // NOTE: MODEL_VERSION_ID is optional, you can also call prediction with the MODEL_ID only\n    // https://api.clarifai.com/v2/models/{YOUR_MODEL_ID}/outputs\n    // this will default to the latest version_id\n\n    fetch(\"https://api.clarifai.com/v2/models/\" + MODEL_ID + \"/versions/\" + MODEL_VERSION_ID + \"/outputs\", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n<\/script>",m='//index.js file\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, user and app ID, model details, URL of the video\n// we want as an input, and sample_ms. Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = "YOUR_PAT_HERE";\n// Specify the correct user_id/app_id pairings\n// Since you\'re making inferences outside your app\'s scope\nconst USER_ID = "clarifai";\nconst APP_ID = "main";\n// Change these to whatever model and video URL you want to use\nconst MODEL_ID = "general-image-recognition";\nconst MODEL_VERSION_ID = "aa7f35c01e0642fda5cf400f543e7c40";\nconst VIDEO_URL = "https://samples.clarifai.com/beer.mp4";\n// Change this to configure the FPS rate (If it\'s not configured, it defaults to 1 FPS)\nconst SAMPLE_MS = 500;\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PostModelOutputs(\n  {\n    user_app_id: {\n      user_id: USER_ID,\n      app_id: APP_ID,\n    },\n    model_id: MODEL_ID,\n    version_id: MODEL_VERSION_ID, // This is optional. Defaults to the latest model version\n    inputs: [\n      {\n        data: {\n          video: {\n            url: VIDEO_URL,\n            allow_duplicate_url: true,\n          },\n        },\n      },\n    ],\n    model: {\n      output_info: {\n        output_config: {\n          sample_ms: SAMPLE_MS,\n        },\n      },\n    },\n  },\n  metadata,\n  (err, response) => {\n    if (err) {\n      throw new Error(err);\n    }\n\n    if (response.status.code !== 10000) {\n      throw new Error(\n        "Post model outputs failed, status: " + response.status.description\n      );\n    }\n\n    // Since we have one input, one output will exist here\n    const output = response.outputs[0];\n\n    // A separate prediction is available for each "frame"\n    for (const frame of output.data.frames) {\n      console.log("Predicted concepts on frame " + frame.frame_info.time + ":");\n      for (const concept of frame.data.concepts) {\n        console.log("\\t" + concept.name + " " + concept.value);\n      }\n    }\n  }\n);\n',_='//index.js file\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, user and app ID, model details, location of the video\n// we want as an input, and sample_ms. Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = "YOUR_PAT_HERE";\n// Specify the correct user_id/app_id pairings\n// Since you\'re making inferences outside your app\'s scope\nconst USER_ID = "clarifai";\nconst APP_ID = "main";\n// Change these to whatever model and video input you want to use\nconst MODEL_ID = "general-image-recognition";\nconst MODEL_VERSION_ID = "aa7f35c01e0642fda5cf400f543e7c40";\nconst VIDEO_FILE_LOCATION = "YOUR_VIDEO_FILE_LOCATION_HERE";\n// Change this to configure the FPS rate (If it\'s not configured, it defaults to 1 FPS)\nconst SAMPLE_MS = 500;\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nconst fs = require("fs");\nconst videoBytes = fs.readFileSync(VIDEO_FILE_LOCATION);\n\nstub.PostModelOutputs(\n  {\n    user_app_id: {\n      user_id: USER_ID,\n      app_id: APP_ID,\n    },\n    model_id: MODEL_ID,\n    version_id: MODEL_VERSION_ID, // This is optional. Defaults to the latest model version.\n    inputs: [\n      {\n        data: {\n          video: {\n            base64: videoBytes,\n          },\n        },\n      },\n    ],\n    model: {\n      output_info: {\n        output_config: {\n          sample_ms: SAMPLE_MS,\n        },\n      },\n    },\n  },\n  metadata,\n  (err, response) => {\n    if (err) {\n      throw new Error(err);\n    }\n\n    if (response.status.code !== 10000) {\n      throw new Error(\n        "Post model outputs failed, status: " + response.status.description\n      );\n    }\n\n    // Since we have one input, one output will exist here.\n    const output = response.outputs[0];\n\n    // A separate prediction is available for each "frame".\n    for (const frame of output.data.frames) {\n      console.log("Predicted concepts on frame " + frame.frame_info.time + ":");\n      for (const concept of frame.data.concepts) {\n        console.log("\\t" + concept.name + " " + concept.value);\n      }\n    }\n  }\n);\n',f='package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, user and app ID, model details, URL of the video\n    // we want as an input, and sample_ms. Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    // Specify the correct user_id/app_id pairings\n    // Since you\'re making inferences outside your app\'s scope\n    static final String USER_ID = "clarifai";    \n    static final String APP_ID = "main";\n    // Change these to whatever model and video URL you want to use\n    static final String MODEL_ID = "general-image-recognition";\n    static final String MODEL_VERSION_ID = "aa7f35c01e0642fda5cf400f543e7c40";\n    static final String VIDEO_URL = "https://samples.clarifai.com/beer.mp4";\n    // Change this to configure the FPS rate (If it\'s not configured, it defaults to 1 FPS)\n    static final int SAMPLE_MS = 500;\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\t\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiOutputResponse postModelOutputsResponse = stub.postModelOutputs(\n            PostModelOutputsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .setModelId(MODEL_ID)\n            .setVersionId(MODEL_VERSION_ID) // This is optional. Defaults to the latest model version\n            .addInputs(\n                Input.newBuilder().setData(\n                    Data.newBuilder().setVideo(\n                        Video.newBuilder().setUrl(VIDEO_URL)\n                    )\n                )\n            )\n            .setModel(\n                Model.newBuilder().setOutputInfo(\n                    OutputInfo.newBuilder().setOutputConfig(\n                        OutputConfig.newBuilder().setSampleMs(SAMPLE_MS)\n                    )\n                )\n            )\n            .build()\n        );\n\n        if (postModelOutputsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post model outputs failed, status: " + postModelOutputsResponse.getStatus());\n        }\n\n        // Since we have one input, one output will exist here\n        Output output = postModelOutputsResponse.getOutputs(0);\n\n        // A separate prediction is available for each "frame"\n        for (Frame frame: output.getData().getFramesList()) {\n            System.out.println("Predicted concepts on frame " + frame.getFrameInfo().getTime() + ":");\n            for (Concept concept: frame.getData().getConceptsList()) {\n                System.out.printf("\\t%s %.2f%n", concept.getName(), concept.getValue());\n            }\n        }\n\n    }\n\n}',h='package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.status.StatusCode;\nimport java.io.File;\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport com.google.protobuf.ByteString;\n\npublic class ClarifaiExample {\n\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, user and app ID, model details, location of the video\n    // we want as an input, and sample_ms. Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    // Specify the correct user_id/app_id pairings\n    // Since you\'re making inferences outside your app\'s scope\n    static final String USER_ID = "clarifai";    \n    static final String APP_ID = "main";\n    // Change these to whatever model and video input you want to use\n    static final String MODEL_ID = "general-image-recognition";\n    static final String MODEL_VERSION_ID = "aa7f35c01e0642fda5cf400f543e7c40";\n    static final String VIDEO_FILE_LOCATION = "YOUR_VIDEO_FILE_LOCATION_HERE";\n    // Change this to configure the FPS rate (If it\'s not configured, it defaults to 1 FPS)\n    static final int SAMPLE_MS = 500;\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\t\n\n    public static void main(String[] args) throws IOException {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiOutputResponse postModelOutputsResponse = stub.postModelOutputs(\n            PostModelOutputsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .setModelId(MODEL_ID)\n            .setVersionId(MODEL_VERSION_ID) // This is optional. Defaults to the latest model version\n            .addInputs(\n                Input.newBuilder().setData(\n                    Data.newBuilder().setVideo(\n                        Video.newBuilder()\n                        .setBase64(ByteString.copyFrom(Files.readAllBytes(\n                            new File(VIDEO_FILE_LOCATION).toPath()\n                        )))\n                    )\n                )\n            )\n            .setModel(\n                Model.newBuilder().setOutputInfo(\n                    OutputInfo.newBuilder().setOutputConfig(\n                        OutputConfig.newBuilder().setSampleMs(SAMPLE_MS)\n                    )\n                )\n            )\n            .build()\n        );\n\n        if (postModelOutputsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post model outputs failed, status: " + postModelOutputsResponse.getStatus());\n        }\n\n        // Since we have one input, one output will exist here\n        Output output = postModelOutputsResponse.getOutputs(0);\n\n        // A separate prediction is available for each "frame"\n        for (Frame frame: output.getData().getFramesList()) {\n            System.out.println("Predicted concepts on frame " + frame.getFrameInfo().getTime() + ":");\n            for (Concept concept: frame.getData().getConceptsList()) {\n                System.out.printf("\\t%s %.2f%n", concept.getName(), concept.getValue());\n            }\n        }\n\n    }\n\n}',v="<?php\n\nrequire __DIR__ . '/vendor/autoload.php';\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, user and app ID, model details, URL of the video\n// we want as an input, and sample_ms. Change these strings to run your own example.\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n\n// Your PAT (Personal Access Token) can be found in the Account's Security section\n$PAT = 'YOUR_PAT_HERE';\n// Specify the correct user_id/app_id pairings\n// Since you're making inferences outside your app's scope\n$USER_ID = 'clarifai';\n$APP_ID = 'main';\n// Change these to whatever model and video URL you want to use\n$MODEL_ID = 'general-image-recognition';\n$MODEL_VERSION_ID = 'aa7f35c01e0642fda5cf400f543e7c40';\n$VIDEO_URL = 'https://samples.clarifai.com/beer.mp4';\n// Change this to configure the FPS rate (If it's not configured, it defaults to 1 FPS)\n$SAMPLE_MS = 500;\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\Data;\nuse Clarifai\\Api\\Video;\nuse Clarifai\\Api\\Input;\nuse Clarifai\\Api\\PostModelOutputsRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\nuse Clarifai\\Api\\Model;\nuse Clarifai\\Api\\OutputInfo;\nuse Clarifai\\Api\\OutputConfig;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ['Authorization' => ['Key ' . $PAT ]];\n\n$userDataObject = new UserAppIDSet([\n    'user_id' => $USER_ID, \n    'app_id' => $APP_ID \n]);\n\n// Let's make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PostModelOutputs(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new PostModelOutputsRequest([\n        'user_app_id' => $userDataObject,\n        'model_id' => $MODEL_ID,  \n        'version_id' => $MODEL_VERSION_ID, // This is optional. Defaults to the latest model version\n        'inputs' => [\n            new Input([ // The Input object wraps the Data object in order to meet the API specification                \n                'data' => new Data([ // The Data object is constructed around the Video object. It offers a container that has additional video independent\n                                    // metadata. In this particular use case, no other metadata is needed to be specified\n                    'video' => new Video([ // In the Clarifai platform, a video is defined by a special Video object\n                        'url' => $VIDEO_URL \n                    ])\n                ])\n            ])\n        ],\n        'model' => new Model([\n            'output_info' => new OutputInfo([\n                'output_config'=> new OutputConfig([\n                    'sample_ms'=> $SAMPLE_MS\n            ])\n            ])\n        ])\n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception(\"Error: {$status->details}\");\n}\n\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    throw new Exception(\"Failure response: \" . $response->getStatus()->getDescription() . \" \" .\n        $response->getStatus()->getDetails());\n}\n\n// The output of a successful call can be used in many ways. In this example, we loop through all of the frames of the video and print out the predicted \n// concepts for each along with their numerical prediction value (confidence). \necho \"Predicted concepts: </br>\";\nforeach ($response->getOutputs()[0]->getData()->getFrames() as $frame) {\n    echo \"Predicted concepts on frame \" . $frame->getFrameInfo()->getTime() . \":\";\n    foreach ($frame->getData()->getConcepts() as $concept) {\n        echo \"   \" . $concept->getName() . \": \" . number_format($concept->getValue(), 2) . \"</br>\";\n    }\n}\n\n?>",g="<?php\n\nrequire __DIR__ . '/vendor/autoload.php';\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, user and app ID, model details, location of the video\n// we want as an input, and sample_ms. Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n// Your PAT (Personal Access Token) can be found in the Account's Security section\n$PAT = 'YOUR_PAT_HERE';\n// Specify the correct user_id/app_id pairings\n// Since you're making inferences outside your app's scope\n$USER_ID = 'clarifai';\n$APP_ID = 'main';\n// Change these to whatever model and video input you want to use\n$MODEL_ID = 'general-image-recognition';\n$MODEL_VERSION_ID = 'aa7f35c01e0642fda5cf400f543e7c40';\n$VIDEO_FILE_LOCATION = 'YOUR_VIDEO_FILE_LOCATION_HERE';\n// Change this to configure the FPS rate (If it's not configured, it defaults to 1 FPS)\n$SAMPLE_MS = 500;\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\Data;\nuse Clarifai\\Api\\Video;\nuse Clarifai\\Api\\Input;\nuse Clarifai\\Api\\PostModelOutputsRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\nuse Clarifai\\Api\\Model;\nuse Clarifai\\Api\\OutputInfo;\nuse Clarifai\\Api\\OutputConfig;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ['Authorization' => ['Key ' . $PAT ]];\n\n$userDataObject = new UserAppIDSet([\n    'user_id' => $USER_ID, \n    'app_id' => $APP_ID \n]);\n\n$videoData = file_get_contents($VIDEO_FILE_LOCATION); // Get the video bytes data from the location\n\n// Let's make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PostModelOutputs(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new PostModelOutputsRequest([\n        'user_app_id' => $userDataObject,\n        'model_id' => $MODEL_ID,  \n        'version_id' => $MODEL_VERSION_ID, // This is optional. Defaults to the latest model version\n        'inputs' => [\n            new Input([ // The Input object wraps the Data object in order to meet the API specification                \n                'data' => new Data([ // The Data object is constructed around the Video object. It offers a container that has additional video independent\n                                    // metadata. In this particular use case, no other metadata is needed to be specified\n                    'video' => new Video([ // In the Clarifai platform, a video is defined by a special Video object\n                        'base64' => $videoData \n                    ])\n                ])\n            ])\n        ],\n        'model' => new Model([\n            'output_info' => new OutputInfo([\n                'output_config'=> new OutputConfig([\n                    'sample_ms'=> $SAMPLE_MS\n            ])\n            ])\n        ])\n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception(\"Error: {$status->details}\");\n}\n\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    throw new Exception(\"Failure response: \" . $response->getStatus()->getDescription() . \" \" .\n        $response->getStatus()->getDetails());\n}\n\n// The output of a successful call can be used in many ways. In this example, we loop through all of the frames of the video and print out the predicted \n// concepts for each along with their numerical prediction value (confidence). \necho \"Predicted concepts: </br>\";\nforeach ($response->getOutputs()[0]->getData()->getFrames() as $frame) {\n    echo \"Predicted concepts on frame \" . $frame->getFrameInfo()->getTime() . \":\";\n    foreach ($frame->getData()->getConcepts() as $concept) {\n        echo \"   \" . $concept->getName() . \": \" . number_format($concept->getValue(), 2) . \"</br>\";\n    }\n}\n\n?>",b='# Model version ID is optional. It defaults to the latest model version, if omitted\n\ncurl -X POST "https://api.clarifai.com/v2/users/clarifai/apps/main/models/general-image-recognition/versions/aa7f35c01e0642fda5cf400f543e7c40/outputs" \\\n    -H "Authorization: Key YOUR_PAT_HERE" \\\n    -H "Content-Type: application/json" \\\n    -d \'{\n      "inputs": [\n        {\n          "data": {\n            "video": {\n              "url": "https://samples.clarifai.com/beer.mp4"\n            }\n          }\n        }\n      ]\n    }\'\n   ',I='# Model version ID is optional. It defaults to the latest model version, if omitted\n\ncurl -X POST "https://api.clarifai.com/v2/users/clarifai/apps/main/models/general-image-recognition/versions/aa7f35c01e0642fda5cf400f543e7c40/outputs" \\\n    -H "Authorization: Key YOUR_PAT_HERE" \\\n    -H "Content-Type: application/json" \\\n    -d \'{\n      "inputs": [\n        {\n          "data": {\n            "video": {\n              "base64": "YOUR_BYTES_STRING_HERE"\n            }\n          }\n        }\n      ]\n    }\'\n   ',S="Predicted concepts on frame 250:\n\tglass 1.00\n\tdrink 1.00\n\tfoam 1.00\n\tbeer 0.99\n\talcohol 0.99\n\tlager 0.99\n\tcold 0.99\n\tbubble 0.98\n\tliquid 0.98\n\tfull 0.98\n\tno person 0.97\n\tbrewery 0.96\n\tsparkling 0.95\n\tcool 0.95\n\trefreshment 0.95\n\tbar 0.95\n\twet 0.94\n\tdrop 0.94\n\tthirst 0.93\n\tfoamy 0.93\nPredicted concepts on frame 750:\n\tbeer 1.00\n\tglass 1.00\n\tdrink 1.00\n\tfoam 1.00\n\tlager 1.00\n\talcohol 0.99\n\tbrewery 0.99\n\tcold 0.99\n\tale 0.98\n\tpint 0.98\n\tliquid 0.98\n\tbar 0.98\n\tfull 0.98\n\tpub 0.97\n\tbubble 0.97\n\tmug 0.97\n\tfoamy 0.97\n\tno person 0.95\n\tbrew 0.95\n\tfrosty 0.95\nPredicted concepts on frame 1250:\n\tbeer 1.00\n\tfoam 1.00\n\tglass 1.00\n\tlager 1.00\n\tdrink 1.00\n\talcohol 0.99\n\tbrewery 0.99\n\tcold 0.99\n\tbar 0.98\n\tale 0.98\n\tpub 0.98\n\tliquid 0.97\n\tpint 0.97\n\tfull 0.97\n\tfoamy 0.97\n\tbubble 0.96\n\tno person 0.96\n\tamber 0.96\n\tintoxicated 0.96\n\tmug 0.95\nPredicted concepts on frame 1750:\n\tbeer 1.00\n\tglass 1.00\n\tfoam 1.00\n\tlager 1.00\n\tdrink 1.00\n\talcohol 1.00\n\tbrewery 1.00\n\tpint 0.99\n\tcold 0.99\n\tale 0.99\n\tpub 0.99\n\tfull 0.99\n\tliquid 0.98\n\tbar 0.98\n\tfoamy 0.98\n\tintoxicated 0.97\n\tliquor 0.97\n\tamber 0.97\n\tbrew 0.97\n\tsketch out 0.97\nPredicted concepts on frame 2250:\n\tglass 1.00\n\tdrink 1.00\n\tcold 0.98\n\tbeer 0.98\n\tfoam 0.98\n\tliquid 0.98\n\talcohol 0.98\n\tfull 0.96\n\tno person 0.96\n\trefreshment 0.94\n\tlager 0.94\n\tthirst 0.93\n\tbar 0.92\n\tliquor 0.90\n\tcool 0.90\n\tbubble 0.88\n\tintoxicated 0.88\n\twet 0.87\n\tpub 0.87\n\tbottle 0.87\nPredicted concepts on frame 2750:\n\tglass 1.00\n\tfoam 0.99\n\tbeer 0.99\n\tdrink 0.99\n\tno person 0.99\n\tcold 0.98\n\talcohol 0.95\n\tliquid 0.95\n\tfull 0.94\n\tlager 0.93\n\tthirst 0.91\n\tliquor 0.91\n\tbar 0.91\n\thealth 0.90\n\tintoxicated 0.90\n\twet 0.88\n\trefreshment 0.88\n\tbrewery 0.88\n\tpub 0.86\n\tbubble 0.85\nPredicted concepts on frame 3250:\n\tglass 1.00\n\tdrink 1.00\n\tfoam 0.98\n\tbeer 0.98\n\tno person 0.97\n\tliquid 0.97\n\tcold 0.97\n\talcohol 0.97\n\tfull 0.95\n\trefreshment 0.92\n\tlager 0.91\n\tgold 0.90\n\tbottle 0.90\n\tfood 0.90\n\tdrop 0.88\n\tbubble 0.88\n\thealth 0.88\n\tvertical 0.87\n\tparty 0.87\n\tchampagne 0.86\nPredicted concepts on frame 3750:\n\tdrink 0.98\n\tno person 0.98\n\tglass 0.98\n\tbeer 0.98\n\tfoam 0.96\n\talcohol 0.95\n\tliquid 0.94\n\tcold 0.92\n\tgold 0.91\n\tfood 0.91\n\tbar 0.90\n\trefreshment 0.89\n\tluxury 0.87\n\tfull 0.87\n\thealth 0.86\n\tvertical 0.84\n\tdesktop 0.83\n\tsparkling 0.82\n\tshining 0.82\n\twet 0.81\nPredicted concepts on frame 4250:\n\tbeer 1.00\n\tfoam 0.99\n\tno person 0.99\n\tlager 0.98\n\tglass 0.98\n\tdrink 0.98\n\tbrewery 0.98\n\tpint 0.96\n\tbar 0.96\n\tfoamy 0.96\n\talcohol 0.95\n\tcold 0.94\n\tmug 0.92\n\tfull 0.91\n\tale 0.91\n\trefreshment 0.91\n\tpub 0.89\n\tfood 0.89\n\tliquor 0.89\n\tsketch out 0.88\nPredicted concepts on frame 4750:\n\tbeer 1.00\n\tfoam 0.99\n\tno person 0.99\n\tglass 0.98\n\tdrink 0.98\n\tlager 0.97\n\tbrewery 0.96\n\tbar 0.95\n\tcold 0.94\n\talcohol 0.94\n\tpint 0.94\n\tfoamy 0.92\n\tfull 0.92\n\trefreshment 0.90\n\tmug 0.89\n\tfood 0.89\n\tpub 0.88\n\tale 0.88\n\tliquor 0.86\n\tliquid 0.85\nPredicted concepts on frame 5250:\n\tbeer 1.00\n\tfoam 0.99\n\tno person 0.99\n\tglass 0.99\n\tlager 0.98\n\tdrink 0.98\n\tbrewery 0.97\n\tpint 0.95\n\tcold 0.95\n\talcohol 0.95\n\tbar 0.95\n\tfull 0.94\n\tfoamy 0.93\n\tale 0.92\n\tmug 0.91\n\tpub 0.91\n\trefreshment 0.88\n\tliquor 0.88\n\tliquid 0.87\n\tfood 0.85\nPredicted concepts on frame 5750:\n\tbeer 1.00\n\tno person 0.99\n\tfoam 0.99\n\tglass 0.98\n\tlager 0.98\n\tdrink 0.97\n\tbrewery 0.97\n\tbar 0.94\n\tpint 0.94\n\tcold 0.93\n\talcohol 0.93\n\tfull 0.93\n\tfoamy 0.92\n\tmug 0.89\n\tale 0.89\n\tpub 0.88\n\trefreshment 0.87\n\tliquor 0.86\n\tvertical 0.85\n\tfood 0.85\nPredicted concepts on frame 6250:\n\tbeer 1.00\n\tfoam 0.99\n\tno person 0.99\n\tglass 0.99\n\tlager 0.98\n\tdrink 0.98\n\tbrewery 0.97\n\tpint 0.95\n\tcold 0.95\n\tbar 0.95\n\talcohol 0.95\n\tfull 0.93\n\tfoamy 0.93\n\tale 0.91\n\tpub 0.90\n\tmug 0.90\n\trefreshment 0.90\n\tliquor 0.87\n\tliquid 0.86\n\tsketch out 0.86\nPredicted concepts on frame 6750:\n\tbeer 1.00\n\tno person 0.99\n\tfoam 0.99\n\tglass 0.98\n\tlager 0.98\n\tdrink 0.98\n\tbrewery 0.97\n\tcold 0.95\n\tbar 0.95\n\tpint 0.94\n\talcohol 0.94\n\tfull 0.93\n\tfoamy 0.91\n\tale 0.90\n\tpub 0.89\n\tmug 0.89\n\trefreshment 0.88\n\tliquor 0.86\n\tfood 0.86\n\tliquid 0.85\nPredicted concepts on frame 7250:\n\tbeer 1.00\n\tfoam 0.99\n\tno person 0.99\n\tglass 0.99\n\tlager 0.98\n\tdrink 0.98\n\tbrewery 0.97\n\tbar 0.95\n\tcold 0.95\n\talcohol 0.95\n\tpint 0.95\n\tfull 0.93\n\tfoamy 0.92\n\tale 0.91\n\tpub 0.90\n\tmug 0.90\n\trefreshment 0.89\n\tliquid 0.88\n\tliquor 0.86\n\tfood 0.86\nPredicted concepts on frame 7750:\n\tbeer 1.00\n\tfoam 0.99\n\tno person 0.99\n\tglass 0.98\n\tlager 0.98\n\tdrink 0.98\n\tbrewery 0.96\n\tcold 0.96\n\tbar 0.95\n\tfull 0.94\n\tpint 0.94\n\talcohol 0.94\n\tfoamy 0.92\n\tale 0.89\n\tpub 0.88\n\tmug 0.87\n\tliquor 0.87\n\trefreshment 0.87\n\tfood 0.86\n\tliquid 0.85\nPredicted concepts on frame 8250:\n\tbeer 1.00\n\tfoam 0.99\n\tno person 0.99\n\tglass 0.98\n\tlager 0.98\n\tdrink 0.98\n\tbrewery 0.96\n\tcold 0.96\n\tbar 0.95\n\tfull 0.94\n\tpint 0.94\n\talcohol 0.94\n\tfoamy 0.92\n\tale 0.89\n\tpub 0.88\n\tmug 0.87\n\tliquor 0.87\n\trefreshment 0.87\n\tfood 0.86\n\tliquid 0.85",E='id: "e79ecf27e849441fa65f4aae88d4b6d7"\nstatus {\n  code: SUCCESS\n  description: "Ok"\n}\ncreated_at {\n  seconds: 1701797920\n  nanos: 263533709\n}\nmodel {\n  id: "general-image-recognition"\n  name: "Image Recognition"\n  created_at {\n    seconds: 1457543499\n    nanos: 608845000\n  }\n  app_id: "main"\n  model_version {\n    id: "aa7f35c01e0642fda5cf400f543e7c40"\n    created_at {\n      seconds: 1520370624\n      nanos: 454834000\n    }\n    status {\n      code: MODEL_TRAINED\n      description: "Model is trained and ready"\n    }\n    visibility {\n      gettable: PUBLIC\n    }\n    app_id: "main"\n    user_id: "clarifai"\n    metadata {\n    }\n  }\n  user_id: "clarifai"\n  model_type_id: "visual-classifier"\n  visibility {\n    gettable: PUBLIC\n  }\n  modified_at {\n    seconds: 1694180313\n    nanos: 148401000\n  }\n  workflow_recommended {\n  }\n}\ninput {\n  id: "dbce4ca63ce04cd69e320756bb788e47"\n  data {\n    video {\n      url: "https://samples.clarifai.com/beer.mp4"\n    }\n  }\n}\ndata {\n  frames {\n    frame_info {\n      time: 250\n    }\n    data {\n      concepts {\n        id: "ai_mCpQg89c"\n        name: "glass"\n        value: 0.997752845287323\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_zJx6RbxW"\n        name: "drink"\n        value: 0.9974687099456787\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_8XGJjH7R"\n        name: "foam"\n        value: 0.9957486987113953\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_TBlp0Pt3"\n        name: "beer"\n        value: 0.9945681095123291\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_drK6ClJR"\n        name: "alcohol"\n        value: 0.9880152344703674\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_3R5pJ6hB"\n        name: "lager"\n        value: 0.9860077500343323\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_2gmKZLxp"\n        name: "cold"\n        value: 0.9854641556739807\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_7vR9zv7l"\n        name: "bubble"\n        value: 0.9843018054962158\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_5VHsZr8N"\n        name: "liquid"\n        value: 0.9839773774147034\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_54zxXFGL"\n        name: "full"\n        value: 0.9785130023956299\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_786Zr311"\n        name: "no person"\n        value: 0.9709655046463013\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_2LWXN7Bn"\n        name: "brewery"\n        value: 0.9635231494903564\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_8zbKXvD7"\n        name: "sparkling"\n        value: 0.9529380798339844\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_VXtfX6F5"\n        name: "cool"\n        value: 0.9526541829109192\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_B3MXt5Ng"\n        name: "refreshment"\n        value: 0.9462572932243347\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_SsmKLB4z"\n        name: "bar"\n        value: 0.9450616240501404\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_NTTFwSHB"\n        name: "wet"\n        value: 0.9400553107261658\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_X7ZHcRJc"\n        name: "drop"\n        value: 0.9364319443702698\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_bNlklStp"\n        name: "thirst"\n        value: 0.9268391728401184\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_F547sXrF"\n        name: "foamy"\n        value: 0.9255530834197998\n        app_id: "main"\n      }\n    }\n    id: "b901632da9b4f622c9b9242f06750179"\n  }\n  frames {\n    frame_info {\n      index: 1\n      time: 750\n    }\n    data {\n      concepts {\n        id: "ai_TBlp0Pt3"\n        name: "beer"\n        value: 0.9992836117744446\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_mCpQg89c"\n        name: "glass"\n        value: 0.9983626008033752\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_zJx6RbxW"\n        name: "drink"\n        value: 0.9977523684501648\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_8XGJjH7R"\n        name: "foam"\n        value: 0.9975612163543701\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_3R5pJ6hB"\n        name: "lager"\n        value: 0.9974485039710999\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_drK6ClJR"\n        name: "alcohol"\n        value: 0.9943865537643433\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_2LWXN7Bn"\n        name: "brewery"\n        value: 0.9906740784645081\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_2gmKZLxp"\n        name: "cold"\n        value: 0.9859762191772461\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_qCKzbr0g"\n        name: "ale"\n        value: 0.9823463559150696\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_QnpbpDLK"\n        name: "pint"\n        value: 0.982078492641449\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_5VHsZr8N"\n        name: "liquid"\n        value: 0.9813329577445984\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_SsmKLB4z"\n        name: "bar"\n        value: 0.9799479246139526\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_54zxXFGL"\n        name: "full"\n        value: 0.9784696102142334\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_XNmzgDnF"\n        name: "pub"\n        value: 0.9744656682014465\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_7vR9zv7l"\n        name: "bubble"\n        value: 0.9708114266395569\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_pkvDRSJ1"\n        name: "mug"\n        value: 0.9692652821540833\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_F547sXrF"\n        name: "foamy"\n        value: 0.9684587717056274\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_786Zr311"\n        name: "no person"\n        value: 0.9549676775932312\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_4Dlsldjg"\n        name: "brew"\n        value: 0.9492547512054443\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_LMNcLLVR"\n        name: "frosty"\n        value: 0.9456380009651184\n        app_id: "main"\n      }\n    }\n    id: "9bbb898f7fea3a615d40ecb8a0e73dad"\n  }\n  frames {\n    frame_info {\n      index: 2\n      time: 1250\n    }\n    data {\n      concepts {\n        id: "ai_TBlp0Pt3"\n        name: "beer"\n        value: 0.9993199110031128\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_8XGJjH7R"\n        name: "foam"\n        value: 0.9975032210350037\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_mCpQg89c"\n        name: "glass"\n        value: 0.9974441528320312\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_3R5pJ6hB"\n        name: "lager"\n        value: 0.9966486096382141\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_zJx6RbxW"\n        name: "drink"\n        value: 0.9955034852027893\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_drK6ClJR"\n        name: "alcohol"\n        value: 0.9942675232887268\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_2LWXN7Bn"\n        name: "brewery"\n        value: 0.9873117208480835\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_2gmKZLxp"\n        name: "cold"\n        value: 0.9862891435623169\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_SsmKLB4z"\n        name: "bar"\n        value: 0.9813107252120972\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_qCKzbr0g"\n        name: "ale"\n        value: 0.9773374795913696\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_XNmzgDnF"\n        name: "pub"\n        value: 0.9758992195129395\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_5VHsZr8N"\n        name: "liquid"\n        value: 0.9741887450218201\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_QnpbpDLK"\n        name: "pint"\n        value: 0.9729149341583252\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_54zxXFGL"\n        name: "full"\n        value: 0.9695841073989868\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_F547sXrF"\n        name: "foamy"\n        value: 0.9682382345199585\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_7vR9zv7l"\n        name: "bubble"\n        value: 0.9640994668006897\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_786Zr311"\n        name: "no person"\n        value: 0.9638546109199524\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_n1b6R1vv"\n        name: "amber"\n        value: 0.9570770263671875\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_nMNvWpn8"\n        name: "intoxicated"\n        value: 0.9560476541519165\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_pkvDRSJ1"\n        name: "mug"\n        value: 0.9537928104400635\n        app_id: "main"\n      }\n    }\n    id: "27a296946ca616da7d1871edab7f2f33"\n  }\n  frames {\n    frame_info {\n      index: 3\n      time: 1750\n    }\n    data {\n      concepts {\n        id: "ai_TBlp0Pt3"\n        name: "beer"\n        value: 0.9997701048851013\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_mCpQg89c"\n        name: "glass"\n        value: 0.9992296695709229\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_8XGJjH7R"\n        name: "foam"\n        value: 0.9992121458053589\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_3R5pJ6hB"\n        name: "lager"\n        value: 0.9985218644142151\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_zJx6RbxW"\n        name: "drink"\n        value: 0.9972805976867676\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_drK6ClJR"\n        name: "alcohol"\n        value: 0.9960547685623169\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_2LWXN7Bn"\n        name: "brewery"\n        value: 0.9958301186561584\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_QnpbpDLK"\n        name: "pint"\n        value: 0.9914194345474243\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_2gmKZLxp"\n        name: "cold"\n        value: 0.9910222291946411\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_qCKzbr0g"\n        name: "ale"\n        value: 0.9901933073997498\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_XNmzgDnF"\n        name: "pub"\n        value: 0.9890332221984863\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_54zxXFGL"\n        name: "full"\n        value: 0.9886132478713989\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_5VHsZr8N"\n        name: "liquid"\n        value: 0.9845917820930481\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_SsmKLB4z"\n        name: "bar"\n        value: 0.9837354421615601\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_F547sXrF"\n        name: "foamy"\n        value: 0.9826065301895142\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_nMNvWpn8"\n        name: "intoxicated"\n        value: 0.9744114875793457\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_3l2jRv5s"\n        name: "liquor"\n        value: 0.9737584590911865\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_n1b6R1vv"\n        name: "amber"\n        value: 0.9714255928993225\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_4Dlsldjg"\n        name: "brew"\n        value: 0.9692292213439941\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_74H0z2d2"\n        name: "sketch out"\n        value: 0.9686199426651001\n        app_id: "main"\n      }\n    }\n    id: "ee44ec25044c1e34f2b37cff1b83481a"\n  }\n  frames {\n    frame_info {\n      index: 4\n      time: 2250\n    }\n    data {\n      concepts {\n        id: "ai_mCpQg89c"\n        name: "glass"\n        value: 0.9978996515274048\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_zJx6RbxW"\n        name: "drink"\n        value: 0.9963474869728088\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_2gmKZLxp"\n        name: "cold"\n        value: 0.9844813346862793\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_TBlp0Pt3"\n        name: "beer"\n        value: 0.9828689098358154\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_8XGJjH7R"\n        name: "foam"\n        value: 0.9818728566169739\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_5VHsZr8N"\n        name: "liquid"\n        value: 0.980105459690094\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_drK6ClJR"\n        name: "alcohol"\n        value: 0.9770163893699646\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_54zxXFGL"\n        name: "full"\n        value: 0.9610904455184937\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_786Zr311"\n        name: "no person"\n        value: 0.9601907134056091\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_B3MXt5Ng"\n        name: "refreshment"\n        value: 0.9437422752380371\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_3R5pJ6hB"\n        name: "lager"\n        value: 0.938518226146698\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_bNlklStp"\n        name: "thirst"\n        value: 0.9255437850952148\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_SsmKLB4z"\n        name: "bar"\n        value: 0.9187645316123962\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_3l2jRv5s"\n        name: "liquor"\n        value: 0.9028059840202332\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_VXtfX6F5"\n        name: "cool"\n        value: 0.9019685387611389\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_7vR9zv7l"\n        name: "bubble"\n        value: 0.88445645570755\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_nMNvWpn8"\n        name: "intoxicated"\n        value: 0.8831674456596375\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_NTTFwSHB"\n        name: "wet"\n        value: 0.8748971223831177\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_XNmzgDnF"\n        name: "pub"\n        value: 0.8741576075553894\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_12dz73B9"\n        name: "bottle"\n        value: 0.8668125867843628\n        app_id: "main"\n      }\n    }\n    id: "3b2e9aad828e918c42c0b82da5aa551f"\n  }\n  frames {\n    frame_info {\n      index: 5\n      time: 2750\n    }\n    data {\n      concepts {\n        id: "ai_mCpQg89c"\n        name: "glass"\n        value: 0.9951979517936707\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_8XGJjH7R"\n        name: "foam"\n        value: 0.9943813681602478\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_TBlp0Pt3"\n        name: "beer"\n        value: 0.9926243424415588\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_zJx6RbxW"\n        name: "drink"\n        value: 0.9915958046913147\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_786Zr311"\n        name: "no person"\n        value: 0.989373505115509\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_2gmKZLxp"\n        name: "cold"\n        value: 0.9805072546005249\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_drK6ClJR"\n        name: "alcohol"\n        value: 0.9529444575309753\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_5VHsZr8N"\n        name: "liquid"\n        value: 0.9495193958282471\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_54zxXFGL"\n        name: "full"\n        value: 0.9444553256034851\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_3R5pJ6hB"\n        name: "lager"\n        value: 0.9341009855270386\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_bNlklStp"\n        name: "thirst"\n        value: 0.9140894412994385\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_3l2jRv5s"\n        name: "liquor"\n        value: 0.9109359383583069\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_SsmKLB4z"\n        name: "bar"\n        value: 0.9057071208953857\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_mZ2tl6cW"\n        name: "health"\n        value: 0.8998499512672424\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_nMNvWpn8"\n        name: "intoxicated"\n        value: 0.899374783039093\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_NTTFwSHB"\n        name: "wet"\n        value: 0.8809621334075928\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_B3MXt5Ng"\n        name: "refreshment"\n        value: 0.8807708621025085\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_2LWXN7Bn"\n        name: "brewery"\n        value: 0.8758730888366699\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_XNmzgDnF"\n        name: "pub"\n        value: 0.8561508655548096\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_7vR9zv7l"\n        name: "bubble"\n        value: 0.8491345643997192\n        app_id: "main"\n      }\n    }\n    id: "c27eb44117febb03ac7596aa84245864"\n  }\n  frames {\n    frame_info {\n      index: 6\n      time: 3250\n    }\n    data {\n      concepts {\n        id: "ai_mCpQg89c"\n        name: "glass"\n        value: 0.9967485666275024\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_zJx6RbxW"\n        name: "drink"\n        value: 0.9964845180511475\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_8XGJjH7R"\n        name: "foam"\n        value: 0.9826822280883789\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_TBlp0Pt3"\n        name: "beer"\n        value: 0.97678542137146\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_786Zr311"\n        name: "no person"\n        value: 0.9737922549247742\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_5VHsZr8N"\n        name: "liquid"\n        value: 0.9726471304893494\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_2gmKZLxp"\n        name: "cold"\n        value: 0.9703800082206726\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_drK6ClJR"\n        name: "alcohol"\n        value: 0.9660417437553406\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_54zxXFGL"\n        name: "full"\n        value: 0.9504242539405823\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_B3MXt5Ng"\n        name: "refreshment"\n        value: 0.9254412651062012\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_3R5pJ6hB"\n        name: "lager"\n        value: 0.9096206426620483\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_7qwGxLch"\n        name: "gold"\n        value: 0.9041298627853394\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_12dz73B9"\n        name: "bottle"\n        value: 0.9024790525436401\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_3PlgVmlN"\n        name: "food"\n        value: 0.9007976651191711\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_X7ZHcRJc"\n        name: "drop"\n        value: 0.885306715965271\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_7vR9zv7l"\n        name: "bubble"\n        value: 0.8843998908996582\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_mZ2tl6cW"\n        name: "health"\n        value: 0.8743909001350403\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_b01mhdxB"\n        name: "party"\n        value: 0.8670044541358948\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_ZSKpCCHD"\n        name: "vertical"\n        value: 0.8667541742324829\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_SsmKLB4z"\n        name: "bar"\n        value: 0.8590472340583801\n        app_id: "main"\n      }\n    }\n    id: "cf0c6da93c074504bf89043cfb688ba9"\n  }\n  frames {\n    frame_info {\n      index: 7\n      time: 3750\n    }\n    data {\n      concepts {\n        id: "ai_zJx6RbxW"\n        name: "drink"\n        value: 0.9836993217468262\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_786Zr311"\n        name: "no person"\n        value: 0.9833121299743652\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_mCpQg89c"\n        name: "glass"\n        value: 0.9763009548187256\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_TBlp0Pt3"\n        name: "beer"\n        value: 0.9756914973258972\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_8XGJjH7R"\n        name: "foam"\n        value: 0.9632844924926758\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_drK6ClJR"\n        name: "alcohol"\n        value: 0.9484147429466248\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_5VHsZr8N"\n        name: "liquid"\n        value: 0.9415270686149597\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_2gmKZLxp"\n        name: "cold"\n        value: 0.9156915545463562\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_7qwGxLch"\n        name: "gold"\n        value: 0.9146540760993958\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_3PlgVmlN"\n        name: "food"\n        value: 0.907713770866394\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_SsmKLB4z"\n        name: "bar"\n        value: 0.9049137830734253\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_B3MXt5Ng"\n        name: "refreshment"\n        value: 0.893317699432373\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_7Xg5SQRW"\n        name: "luxury"\n        value: 0.8726363778114319\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_54zxXFGL"\n        name: "full"\n        value: 0.8704315423965454\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_mZ2tl6cW"\n        name: "health"\n        value: 0.8628416061401367\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_ZSKpCCHD"\n        name: "vertical"\n        value: 0.8384964466094971\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_Lq00FggW"\n        name: "desktop"\n        value: 0.8253465890884399\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_8zbKXvD7"\n        name: "sparkling"\n        value: 0.8222783803939819\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_LM64MDHs"\n        name: "shining"\n        value: 0.8182401061058044\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_NTTFwSHB"\n        name: "wet"\n        value: 0.8113693594932556\n        app_id: "main"\n      }\n    }\n    id: "f56e9f0effce9a65d032e42897f16f85"\n  }\n  frames {\n    frame_info {\n      index: 8\n      time: 4250\n    }\n    data {\n      concepts {\n        id: "ai_TBlp0Pt3"\n        name: "beer"\n        value: 0.9981098175048828\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_8XGJjH7R"\n        name: "foam"\n        value: 0.9943045973777771\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_786Zr311"\n        name: "no person"\n        value: 0.986625075340271\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_3R5pJ6hB"\n        name: "lager"\n        value: 0.9841647744178772\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_mCpQg89c"\n        name: "glass"\n        value: 0.9836443066596985\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_zJx6RbxW"\n        name: "drink"\n        value: 0.9806402921676636\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_2LWXN7Bn"\n        name: "brewery"\n        value: 0.9774118661880493\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_QnpbpDLK"\n        name: "pint"\n        value: 0.9584411978721619\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_SsmKLB4z"\n        name: "bar"\n        value: 0.9572823643684387\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_F547sXrF"\n        name: "foamy"\n        value: 0.9571645259857178\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_drK6ClJR"\n        name: "alcohol"\n        value: 0.948240339756012\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_2gmKZLxp"\n        name: "cold"\n        value: 0.9426732659339905\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_pkvDRSJ1"\n        name: "mug"\n        value: 0.9204767346382141\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_54zxXFGL"\n        name: "full"\n        value: 0.9151816368103027\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_qCKzbr0g"\n        name: "ale"\n        value: 0.9126847386360168\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_B3MXt5Ng"\n        name: "refreshment"\n        value: 0.9070448279380798\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_XNmzgDnF"\n        name: "pub"\n        value: 0.8936917185783386\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_3PlgVmlN"\n        name: "food"\n        value: 0.8870030045509338\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_3l2jRv5s"\n        name: "liquor"\n        value: 0.8859925270080566\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_74H0z2d2"\n        name: "sketch out"\n        value: 0.8832399845123291\n        app_id: "main"\n      }\n    }\n    id: "7d964ce474936eea31353bd4e12269dc"\n  }\n  frames {\n    frame_info {\n      index: 9\n      time: 4750\n    }\n    data {\n      concepts {\n        id: "ai_TBlp0Pt3"\n        name: "beer"\n        value: 0.9971795082092285\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_8XGJjH7R"\n        name: "foam"\n        value: 0.9912267327308655\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_786Zr311"\n        name: "no person"\n        value: 0.9869438409805298\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_mCpQg89c"\n        name: "glass"\n        value: 0.9823363423347473\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_zJx6RbxW"\n        name: "drink"\n        value: 0.9769037365913391\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_3R5pJ6hB"\n        name: "lager"\n        value: 0.9734747409820557\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_2LWXN7Bn"\n        name: "brewery"\n        value: 0.9614617824554443\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_SsmKLB4z"\n        name: "bar"\n        value: 0.9470586776733398\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_2gmKZLxp"\n        name: "cold"\n        value: 0.9416798949241638\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_drK6ClJR"\n        name: "alcohol"\n        value: 0.9404584169387817\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_QnpbpDLK"\n        name: "pint"\n        value: 0.9382282495498657\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_F547sXrF"\n        name: "foamy"\n        value: 0.9202271699905396\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_54zxXFGL"\n        name: "full"\n        value: 0.9182870984077454\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_B3MXt5Ng"\n        name: "refreshment"\n        value: 0.8989039063453674\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_pkvDRSJ1"\n        name: "mug"\n        value: 0.8948805928230286\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_3PlgVmlN"\n        name: "food"\n        value: 0.89061439037323\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_XNmzgDnF"\n        name: "pub"\n        value: 0.8829759359359741\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_qCKzbr0g"\n        name: "ale"\n        value: 0.8793352842330933\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_3l2jRv5s"\n        name: "liquor"\n        value: 0.8641029000282288\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_5VHsZr8N"\n        name: "liquid"\n        value: 0.8511436581611633\n        app_id: "main"\n      }\n    }\n    id: "9f592d67f699747905c8e01645213fa5"\n  }\n  frames {\n    frame_info {\n      index: 10\n      time: 5250\n    }\n    data {\n      concepts {\n        id: "ai_TBlp0Pt3"\n        name: "beer"\n        value: 0.9986419081687927\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_8XGJjH7R"\n        name: "foam"\n        value: 0.9925092458724976\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_786Zr311"\n        name: "no person"\n        value: 0.9887336492538452\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_mCpQg89c"\n        name: "glass"\n        value: 0.9862042665481567\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_3R5pJ6hB"\n        name: "lager"\n        value: 0.9821165204048157\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_zJx6RbxW"\n        name: "drink"\n        value: 0.9777782559394836\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_2LWXN7Bn"\n        name: "brewery"\n        value: 0.9734096527099609\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_QnpbpDLK"\n        name: "pint"\n        value: 0.9529599547386169\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_2gmKZLxp"\n        name: "cold"\n        value: 0.9496700167655945\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_drK6ClJR"\n        name: "alcohol"\n        value: 0.9495285153388977\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_SsmKLB4z"\n        name: "bar"\n        value: 0.9483970403671265\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_54zxXFGL"\n        name: "full"\n        value: 0.9416258931159973\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_F547sXrF"\n        name: "foamy"\n        value: 0.9300329685211182\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_qCKzbr0g"\n        name: "ale"\n        value: 0.9184643030166626\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_pkvDRSJ1"\n        name: "mug"\n        value: 0.9080654978752136\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_XNmzgDnF"\n        name: "pub"\n        value: 0.9059904217720032\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_B3MXt5Ng"\n        name: "refreshment"\n        value: 0.880144476890564\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_3l2jRv5s"\n        name: "liquor"\n        value: 0.8800289034843445\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_5VHsZr8N"\n        name: "liquid"\n        value: 0.8680859804153442\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_3PlgVmlN"\n        name: "food"\n        value: 0.8533608317375183\n        app_id: "main"\n      }\n    }\n    id: "d65713604602d96e4588f41d25e1c1ee"\n  }\n  frames {\n    frame_info {\n      index: 11\n      time: 5750\n    }\n    data {\n      concepts {\n        id: "ai_TBlp0Pt3"\n        name: "beer"\n        value: 0.9980437755584717\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_786Zr311"\n        name: "no person"\n        value: 0.9920185208320618\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_8XGJjH7R"\n        name: "foam"\n        value: 0.9916218519210815\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_mCpQg89c"\n        name: "glass"\n        value: 0.9827982783317566\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_3R5pJ6hB"\n        name: "lager"\n        value: 0.9750837087631226\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_zJx6RbxW"\n        name: "drink"\n        value: 0.9725251197814941\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_2LWXN7Bn"\n        name: "brewery"\n        value: 0.9665043354034424\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_SsmKLB4z"\n        name: "bar"\n        value: 0.9424052238464355\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_QnpbpDLK"\n        name: "pint"\n        value: 0.938936173915863\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_2gmKZLxp"\n        name: "cold"\n        value: 0.9341326951980591\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_drK6ClJR"\n        name: "alcohol"\n        value: 0.9333233833312988\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_54zxXFGL"\n        name: "full"\n        value: 0.9265391826629639\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_F547sXrF"\n        name: "foamy"\n        value: 0.9188488125801086\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_pkvDRSJ1"\n        name: "mug"\n        value: 0.8950655460357666\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_qCKzbr0g"\n        name: "ale"\n        value: 0.8863833546638489\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_XNmzgDnF"\n        name: "pub"\n        value: 0.8820033669471741\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_B3MXt5Ng"\n        name: "refreshment"\n        value: 0.8681637644767761\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_3l2jRv5s"\n        name: "liquor"\n        value: 0.864867091178894\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_ZSKpCCHD"\n        name: "vertical"\n        value: 0.8552114367485046\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_3PlgVmlN"\n        name: "food"\n        value: 0.8477041125297546\n        app_id: "main"\n      }\n    }\n    id: "a942d32afbf2354fbe8d428c93975678"\n  }\n  frames {\n    frame_info {\n      index: 12\n      time: 6250\n    }\n    data {\n      concepts {\n        id: "ai_TBlp0Pt3"\n        name: "beer"\n        value: 0.9979068040847778\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_8XGJjH7R"\n        name: "foam"\n        value: 0.9922707080841064\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_786Zr311"\n        name: "no person"\n        value: 0.9887047410011292\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_mCpQg89c"\n        name: "glass"\n        value: 0.9865961670875549\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_3R5pJ6hB"\n        name: "lager"\n        value: 0.9800080060958862\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_zJx6RbxW"\n        name: "drink"\n        value: 0.978450357913971\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_2LWXN7Bn"\n        name: "brewery"\n        value: 0.9677263498306274\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_QnpbpDLK"\n        name: "pint"\n        value: 0.9533515572547913\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_2gmKZLxp"\n        name: "cold"\n        value: 0.9488505125045776\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_SsmKLB4z"\n        name: "bar"\n        value: 0.9467635154724121\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_drK6ClJR"\n        name: "alcohol"\n        value: 0.9454187750816345\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_54zxXFGL"\n        name: "full"\n        value: 0.9349735379219055\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_F547sXrF"\n        name: "foamy"\n        value: 0.9340612292289734\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_qCKzbr0g"\n        name: "ale"\n        value: 0.9136492013931274\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_pkvDRSJ1"\n        name: "mug"\n        value: 0.8990769386291504\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_XNmzgDnF"\n        name: "pub"\n        value: 0.8988648653030396\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_B3MXt5Ng"\n        name: "refreshment"\n        value: 0.8952221274375916\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_3l2jRv5s"\n        name: "liquor"\n        value: 0.8666876554489136\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_5VHsZr8N"\n        name: "liquid"\n        value: 0.8616843819618225\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_74H0z2d2"\n        name: "sketch out"\n        value: 0.8601076006889343\n        app_id: "main"\n      }\n    }\n    id: "3274f2b42af98e8e26ee12e6cdf20f05"\n  }\n  frames {\n    frame_info {\n      index: 13\n      time: 6750\n    }\n    data {\n      concepts {\n        id: "ai_TBlp0Pt3"\n        name: "beer"\n        value: 0.9980113506317139\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_786Zr311"\n        name: "no person"\n        value: 0.9903795719146729\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_8XGJjH7R"\n        name: "foam"\n        value: 0.9898717999458313\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_mCpQg89c"\n        name: "glass"\n        value: 0.983867883682251\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_3R5pJ6hB"\n        name: "lager"\n        value: 0.9787655472755432\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_zJx6RbxW"\n        name: "drink"\n        value: 0.9771478176116943\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_2LWXN7Bn"\n        name: "brewery"\n        value: 0.9654712677001953\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_2gmKZLxp"\n        name: "cold"\n        value: 0.9490832686424255\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_SsmKLB4z"\n        name: "bar"\n        value: 0.947539210319519\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_QnpbpDLK"\n        name: "pint"\n        value: 0.9449847340583801\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_drK6ClJR"\n        name: "alcohol"\n        value: 0.9394712448120117\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_54zxXFGL"\n        name: "full"\n        value: 0.9320743680000305\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_F547sXrF"\n        name: "foamy"\n        value: 0.9074251055717468\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_qCKzbr0g"\n        name: "ale"\n        value: 0.9049415588378906\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_XNmzgDnF"\n        name: "pub"\n        value: 0.8930882215499878\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_pkvDRSJ1"\n        name: "mug"\n        value: 0.8860717415809631\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_B3MXt5Ng"\n        name: "refreshment"\n        value: 0.8830485343933105\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_3l2jRv5s"\n        name: "liquor"\n        value: 0.8568456768989563\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_3PlgVmlN"\n        name: "food"\n        value: 0.8551452159881592\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_5VHsZr8N"\n        name: "liquid"\n        value: 0.8507459759712219\n        app_id: "main"\n      }\n    }\n    id: "3c34556deba5210ceae49a045adb5c5f"\n  }\n  frames {\n    frame_info {\n      index: 14\n      time: 7250\n    }\n    data {\n      concepts {\n        id: "ai_TBlp0Pt3"\n        name: "beer"\n        value: 0.9980582594871521\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_8XGJjH7R"\n        name: "foam"\n        value: 0.9907283782958984\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_786Zr311"\n        name: "no person"\n        value: 0.9865866899490356\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_mCpQg89c"\n        name: "glass"\n        value: 0.9851380586624146\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_3R5pJ6hB"\n        name: "lager"\n        value: 0.9799703359603882\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_zJx6RbxW"\n        name: "drink"\n        value: 0.9790413975715637\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_2LWXN7Bn"\n        name: "brewery"\n        value: 0.9685026407241821\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_SsmKLB4z"\n        name: "bar"\n        value: 0.9532870054244995\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_2gmKZLxp"\n        name: "cold"\n        value: 0.9532597064971924\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_drK6ClJR"\n        name: "alcohol"\n        value: 0.9493443369865417\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_QnpbpDLK"\n        name: "pint"\n        value: 0.9472265243530273\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_54zxXFGL"\n        name: "full"\n        value: 0.9311469793319702\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_F547sXrF"\n        name: "foamy"\n        value: 0.9236065745353699\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_qCKzbr0g"\n        name: "ale"\n        value: 0.9110153913497925\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_XNmzgDnF"\n        name: "pub"\n        value: 0.9004049301147461\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_pkvDRSJ1"\n        name: "mug"\n        value: 0.8953641057014465\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_B3MXt5Ng"\n        name: "refreshment"\n        value: 0.8878188729286194\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_5VHsZr8N"\n        name: "liquid"\n        value: 0.8782486915588379\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_3l2jRv5s"\n        name: "liquor"\n        value: 0.8650981187820435\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_3PlgVmlN"\n        name: "food"\n        value: 0.857020378112793\n        app_id: "main"\n      }\n    }\n    id: "7b438860ea079c42d4e7b2b3f7fa7bdd"\n  }\n  frames {\n    frame_info {\n      index: 15\n      time: 7750\n    }\n    data {\n      concepts {\n        id: "ai_TBlp0Pt3"\n        name: "beer"\n        value: 0.9981558918952942\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_8XGJjH7R"\n        name: "foam"\n        value: 0.992191731929779\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_786Zr311"\n        name: "no person"\n        value: 0.9919082522392273\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_mCpQg89c"\n        name: "glass"\n        value: 0.9825376868247986\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_3R5pJ6hB"\n        name: "lager"\n        value: 0.978348433971405\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_zJx6RbxW"\n        name: "drink"\n        value: 0.9756084084510803\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_2LWXN7Bn"\n        name: "brewery"\n        value: 0.9648955464363098\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_2gmKZLxp"\n        name: "cold"\n        value: 0.9580070972442627\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_SsmKLB4z"\n        name: "bar"\n        value: 0.9467634558677673\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_54zxXFGL"\n        name: "full"\n        value: 0.9425504803657532\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_QnpbpDLK"\n        name: "pint"\n        value: 0.9415781497955322\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_drK6ClJR"\n        name: "alcohol"\n        value: 0.9384997487068176\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_F547sXrF"\n        name: "foamy"\n        value: 0.9242134690284729\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_qCKzbr0g"\n        name: "ale"\n        value: 0.8930195569992065\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_XNmzgDnF"\n        name: "pub"\n        value: 0.8825927376747131\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_pkvDRSJ1"\n        name: "mug"\n        value: 0.8744949698448181\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_3l2jRv5s"\n        name: "liquor"\n        value: 0.8740363121032715\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_B3MXt5Ng"\n        name: "refreshment"\n        value: 0.8686992526054382\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_3PlgVmlN"\n        name: "food"\n        value: 0.864471435546875\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_5VHsZr8N"\n        name: "liquid"\n        value: 0.8527519702911377\n        app_id: "main"\n      }\n    }\n    id: "06d040abf00bb2329b3089932a4cd242"\n  }\n  frames {\n    frame_info {\n      index: 16\n      time: 8250\n    }\n    data {\n      concepts {\n        id: "ai_TBlp0Pt3"\n        name: "beer"\n        value: 0.9981369972229004\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_8XGJjH7R"\n        name: "foam"\n        value: 0.9921506643295288\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_786Zr311"\n        name: "no person"\n        value: 0.9919553399085999\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_mCpQg89c"\n        name: "glass"\n        value: 0.9824104309082031\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_3R5pJ6hB"\n        name: "lager"\n        value: 0.978097140789032\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_zJx6RbxW"\n        name: "drink"\n        value: 0.9754322171211243\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_2LWXN7Bn"\n        name: "brewery"\n        value: 0.964467465877533\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_2gmKZLxp"\n        name: "cold"\n        value: 0.9578704833984375\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_SsmKLB4z"\n        name: "bar"\n        value: 0.9463430643081665\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_54zxXFGL"\n        name: "full"\n        value: 0.9427977204322815\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_QnpbpDLK"\n        name: "pint"\n        value: 0.9410056471824646\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_drK6ClJR"\n        name: "alcohol"\n        value: 0.9379966259002686\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_F547sXrF"\n        name: "foamy"\n        value: 0.9235425591468811\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_qCKzbr0g"\n        name: "ale"\n        value: 0.8916416168212891\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_XNmzgDnF"\n        name: "pub"\n        value: 0.8816885352134705\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_3l2jRv5s"\n        name: "liquor"\n        value: 0.8735255002975464\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_pkvDRSJ1"\n        name: "mug"\n        value: 0.8731899261474609\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_B3MXt5Ng"\n        name: "refreshment"\n        value: 0.8683214783668518\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_3PlgVmlN"\n        name: "food"\n        value: 0.864808976650238\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_5VHsZr8N"\n        name: "liquid"\n        value: 0.8516526818275452\n        app_id: "main"\n      }\n    }\n    id: "5cff8dcca58754b84ee23e2251eed7fa"\n  }\n}\n',D={description:"Make predictions on video inputs",sidebar_position:2},O="Video",w={},P=[{value:"Configuring FPS",id:"configuring-fps",level:4},{value:"Video limits",id:"video-limits",level:4},{value:"Predict via URL",id:"predict-via-url",level:2},{value:"Predict via Bytes",id:"predict-via-bytes",level:2}];function R(n){const e={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h4:"h4",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,o.R)(),...n.components},{Details:a}=e;return a||function(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"video",children:"Video"})}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Make predictions on video inputs"})}),"\n",(0,t.jsx)("hr",{}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Input"}),": Video"]}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Output"}),": ",(0,t.jsx)(e.a,{href:"https://docs.clarifai.com/portal-guide/concepts/create-get-update-delete",children:"Concepts"})]}),"\n",(0,t.jsx)(e.p,{children:"With a video input, the Predict API response will return a list of predicted concepts for every frame of a video. By default, video is processed at 1 frame per second (FPS), which is configurable in the predict request. This means you will receive a list of concepts for every second (1000 milliseconds) of your video."}),"\n",(0,t.jsxs)(e.p,{children:["You can run Predict on your video using a select number of ",(0,t.jsx)(e.a,{href:"https://www.clarifai.com/models",children:"Clarifai models"}),". The models that are currently supported are:"]}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Apparel"}),"\n",(0,t.jsx)(e.li,{children:"Food"}),"\n",(0,t.jsx)(e.li,{children:"General"}),"\n",(0,t.jsx)(e.li,{children:"NSFW"}),"\n",(0,t.jsx)(e.li,{children:"Travel"}),"\n",(0,t.jsx)(e.li,{children:"Wedding"}),"\n"]}),"\n",(0,t.jsxs)(e.p,{children:["You can make an API call by providing the ",(0,t.jsx)(e.code,{children:"MODEL_ID"})," parameter and specifying your data parameter as ",(0,t.jsx)(e.code,{children:"video"})," instead of ",(0,t.jsx)(e.code,{children:"image"}),"."]}),"\n",(0,t.jsx)(e.h4,{id:"configuring-fps",children:"Configuring FPS"}),"\n",(0,t.jsxs)(e.p,{children:["You can configure the FPS rate in the predict request by setting the ",(0,t.jsx)(e.code,{children:"sample_ms"})," variable, which is the number of milliseconds between each frame for inference."]}),"\n",(0,t.jsx)(e.p,{children:"The number must range between 100 and 60000."}),"\n",(0,t.jsx)(e.admonition,{type:"tip",children:(0,t.jsxs)(e.p,{children:["FPS = 1000/",(0,t.jsx)(e.code,{children:"sample_ms"})]})}),"\n",(0,t.jsxs)(e.p,{children:["If ",(0,t.jsx)(e.code,{children:"sample_ms"})," is 1000, then the FPS rate is 1, which is the default."]}),"\n",(0,t.jsx)(e.h4,{id:"video-limits",children:"Video limits"}),"\n",(0,t.jsx)(e.p,{children:"The Predict API has limits to the length and size it can support. A video, uploaded through URL, can be anywhere up to 300MB in size or 10mins in length. When a video is sent through by bytes, the Predict API can support 128MB in size."}),"\n",(0,t.jsxs)(e.p,{children:["If your video exceeds the limits, please follow our ",(0,t.jsx)(e.a,{href:"https://www.clarifai.com/blog/splitting-video-into-smaller-pieces",children:"tutorial"})," on how to break up a large video into smaller components, and send those into the Video API. Otherwise, the processing will time out and you will receive an error response."]}),"\n",(0,t.jsx)(e.h2,{id:"predict-via-url",children:"Predict via URL"}),"\n",(0,t.jsxs)(e.p,{children:["Below is an example of how you would send video URLs and receive predictions from Clarifai's ",(0,t.jsx)(e.a,{href:"https://clarifai.com/clarifai/main/models/general-image-recognition",children:(0,t.jsx)(e.code,{children:"general-image-recognition"})})," model."]}),"\n",(0,t.jsx)(e.admonition,{type:"info",children:(0,t.jsxs)(e.p,{children:["The initialization code used in the following examples is outlined in detail on the ",(0,t.jsx)(e.a,{href:"https://docs.clarifai.com/api-guide/api-overview/api-clients/#client-installation-instructions",children:"client installation page."})]})}),"\n","\n","\n","\n","\n","\n","\n","\n","\n",(0,t.jsxs)(s.A,{children:[(0,t.jsx)(p.A,{value:"python",label:"Python",children:(0,t.jsx)(c.A,{className:"language-python",children:r})}),(0,t.jsx)(p.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,t.jsx)(c.A,{className:"language-javascript",children:l})}),(0,t.jsx)(p.A,{value:"nodejs",label:"NodeJS",children:(0,t.jsx)(c.A,{className:"language-javascript",children:m})}),(0,t.jsx)(p.A,{value:"java",label:"Java",children:(0,t.jsx)(c.A,{className:"language-java",children:f})}),(0,t.jsx)(p.A,{value:"php",label:"PHP",children:(0,t.jsx)(c.A,{className:"language-php",children:v})}),(0,t.jsx)(p.A,{value:"curl",label:"cURL",children:(0,t.jsx)(c.A,{className:"language-bash",children:b})})]}),"\n",(0,t.jsxs)(a,{children:[(0,t.jsx)("summary",{children:"Text Output Example"}),(0,t.jsx)(c.A,{className:"language-text",children:S})]}),"\n",(0,t.jsxs)(a,{children:[(0,t.jsx)("summary",{children:"Raw Output Example"}),(0,t.jsx)(c.A,{className:"language-javascript",children:E})]}),"\n",(0,t.jsx)(e.h2,{id:"predict-via-bytes",children:"Predict via Bytes"}),"\n",(0,t.jsxs)(e.p,{children:["Below is an example of how you would send the bytes of a video and receive predictions from Clarifai's ",(0,t.jsx)(e.a,{href:"https://clarifai.com/clarifai/main/models/general-image-recognition",children:(0,t.jsx)(e.code,{children:"general-image-recognition"})})," model."]}),"\n",(0,t.jsxs)(s.A,{children:[(0,t.jsx)(p.A,{value:"python",label:"Python",children:(0,t.jsx)(c.A,{className:"language-python",children:d})}),(0,t.jsx)(p.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,t.jsx)(c.A,{className:"language-javascript",children:u})}),(0,t.jsx)(p.A,{value:"nodejs",label:"NodeJS",children:(0,t.jsx)(c.A,{className:"language-javascript",children:_})}),(0,t.jsx)(p.A,{value:"java",label:"Java",children:(0,t.jsx)(c.A,{className:"language-java",children:h})}),(0,t.jsx)(p.A,{value:"php",label:"PHP",children:(0,t.jsx)(c.A,{className:"language-php",children:g})}),(0,t.jsx)(p.A,{value:"curl",label:"cURL",children:(0,t.jsx)(c.A,{className:"language-bash",children:I})})]})]})}function A(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(R,{...n})}):R(n)}},65537:(n,e,a)=>{a.d(e,{A:()=>E});var i=a(96540),t=a(18215),o=a(65627),s=a(56347),p=a(50372),c=a(30604),r=a(11861),d=a(78749);function l(n){return i.Children.toArray(n).filter((n=>"\n"!==n)).map((n=>{if(!n||(0,i.isValidElement)(n)&&function(n){const{props:e}=n;return!!e&&"object"==typeof e&&"value"in e}(n))return n;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof n.type?n.type:n.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function u(n){const{values:e,children:a}=n;return(0,i.useMemo)((()=>{const n=e??function(n){return l(n).map((n=>{let{props:{value:e,label:a,attributes:i,default:t}}=n;return{value:e,label:a,attributes:i,default:t}}))}(a);return function(n){const e=(0,r.XI)(n,((n,e)=>n.value===e.value));if(e.length>0)throw new Error(`Docusaurus error: Duplicate values "${e.map((n=>n.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(n),n}),[e,a])}function m(n){let{value:e,tabValues:a}=n;return a.some((n=>n.value===e))}function _(n){let{queryString:e=!1,groupId:a}=n;const t=(0,s.W6)(),o=function(n){let{queryString:e=!1,groupId:a}=n;if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:e,groupId:a});return[(0,c.aZ)(o),(0,i.useCallback)((n=>{if(!o)return;const e=new URLSearchParams(t.location.search);e.set(o,n),t.replace({...t.location,search:e.toString()})}),[o,t])]}function f(n){const{defaultValue:e,queryString:a=!1,groupId:t}=n,o=u(n),[s,c]=(0,i.useState)((()=>function(n){let{defaultValue:e,tabValues:a}=n;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!m({value:e,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${a.map((n=>n.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const i=a.find((n=>n.default))??a[0];if(!i)throw new Error("Unexpected error: 0 tabValues");return i.value}({defaultValue:e,tabValues:o}))),[r,l]=_({queryString:a,groupId:t}),[f,h]=function(n){let{groupId:e}=n;const a=function(n){return n?`docusaurus.tab.${n}`:null}(e),[t,o]=(0,d.Dv)(a);return[t,(0,i.useCallback)((n=>{a&&o.set(n)}),[a,o])]}({groupId:t}),v=(()=>{const n=r??f;return m({value:n,tabValues:o})?n:null})();(0,p.A)((()=>{v&&c(v)}),[v]);return{selectedValue:s,selectValue:(0,i.useCallback)((n=>{if(!m({value:n,tabValues:o}))throw new Error(`Can't select invalid tab value=${n}`);c(n),l(n),h(n)}),[l,h,o]),tabValues:o}}var h=a(9136);const v={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var g=a(74848);function b(n){let{className:e,block:a,selectedValue:i,selectValue:s,tabValues:p}=n;const c=[],{blockElementScrollPositionUntilNextRender:r}=(0,o.a_)(),d=n=>{const e=n.currentTarget,a=c.indexOf(e),t=p[a].value;t!==i&&(r(e),s(t))},l=n=>{let e=null;switch(n.key){case"Enter":d(n);break;case"ArrowRight":{const a=c.indexOf(n.currentTarget)+1;e=c[a]??c[0];break}case"ArrowLeft":{const a=c.indexOf(n.currentTarget)-1;e=c[a]??c[c.length-1];break}}e?.focus()};return(0,g.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,t.A)("tabs",{"tabs--block":a},e),children:p.map((n=>{let{value:e,label:a,attributes:o}=n;return(0,g.jsx)("li",{role:"tab",tabIndex:i===e?0:-1,"aria-selected":i===e,ref:n=>{c.push(n)},onKeyDown:l,onClick:d,...o,className:(0,t.A)("tabs__item",v.tabItem,o?.className,{"tabs__item--active":i===e}),children:a??e},e)}))})}function I(n){let{lazy:e,children:a,selectedValue:o}=n;const s=(Array.isArray(a)?a:[a]).filter(Boolean);if(e){const n=s.find((n=>n.props.value===o));return n?(0,i.cloneElement)(n,{className:(0,t.A)("margin-top--md",n.props.className)}):null}return(0,g.jsx)("div",{className:"margin-top--md",children:s.map(((n,e)=>(0,i.cloneElement)(n,{key:e,hidden:n.props.value!==o})))})}function S(n){const e=f(n);return(0,g.jsxs)("div",{className:(0,t.A)("tabs-container",v.tabList),children:[(0,g.jsx)(b,{...e,...n}),(0,g.jsx)(I,{...e,...n})]})}function E(n){const e=(0,h.A)();return(0,g.jsx)(S,{...n,children:l(n.children)},String(e))}},79329:(n,e,a)=>{a.d(e,{A:()=>s});a(96540);var i=a(18215);const t={tabItem:"tabItem_Ymn6"};var o=a(74848);function s(n){let{children:e,hidden:a,className:s}=n;return(0,o.jsx)("div",{role:"tabpanel",className:(0,i.A)(t.tabItem,s),hidden:a,children:e})}}}]);
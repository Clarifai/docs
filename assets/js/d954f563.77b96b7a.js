"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[9279],{19365:(n,e,t)=>{t.d(e,{A:()=>r});var a=t(96540),s=t(20053);const o={tabItem:"tabItem_Ymn6"};function r(n){let{children:e,hidden:t,className:r}=n;return a.createElement("div",{role:"tabpanel",className:(0,s.A)(o.tabItem,r),hidden:t},e)}},11470:(n,e,t)=>{t.d(e,{A:()=>A});var a=t(58168),s=t(96540),o=t(20053),r=t(23104),i=t(56347),u=t(57485),l=t(31682),c=t(89466);function p(n){return function(n){return s.Children.map(n,(n=>{if(!n||(0,s.isValidElement)(n)&&function(n){const{props:e}=n;return!!e&&"object"==typeof e&&"value"in e}(n))return n;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof n.type?n.type:n.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(n).map((n=>{let{props:{value:e,label:t,attributes:a,default:s}}=n;return{value:e,label:t,attributes:a,default:s}}))}function d(n){const{values:e,children:t}=n;return(0,s.useMemo)((()=>{const n=e??p(t);return function(n){const e=(0,l.X)(n,((n,e)=>n.value===e.value));if(e.length>0)throw new Error(`Docusaurus error: Duplicate values "${e.map((n=>n.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(n),n}),[e,t])}function _(n){let{value:e,tabValues:t}=n;return t.some((n=>n.value===e))}function f(n){let{queryString:e=!1,groupId:t}=n;const a=(0,i.W6)(),o=function(n){let{queryString:e=!1,groupId:t}=n;if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:e,groupId:t});return[(0,u.aZ)(o),(0,s.useCallback)((n=>{if(!o)return;const e=new URLSearchParams(a.location.search);e.set(o,n),a.replace({...a.location,search:e.toString()})}),[o,a])]}function h(n){const{defaultValue:e,queryString:t=!1,groupId:a}=n,o=d(n),[r,i]=(0,s.useState)((()=>function(n){let{defaultValue:e,tabValues:t}=n;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!_({value:e,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${t.map((n=>n.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const a=t.find((n=>n.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:e,tabValues:o}))),[u,l]=f({queryString:t,groupId:a}),[p,h]=function(n){let{groupId:e}=n;const t=function(n){return n?`docusaurus.tab.${n}`:null}(e),[a,o]=(0,c.Dv)(t);return[a,(0,s.useCallback)((n=>{t&&o.set(n)}),[t,o])]}({groupId:a}),m=(()=>{const n=u??p;return _({value:n,tabValues:o})?n:null})();(0,s.useLayoutEffect)((()=>{m&&i(m)}),[m]);return{selectedValue:r,selectValue:(0,s.useCallback)((n=>{if(!_({value:n,tabValues:o}))throw new Error(`Can't select invalid tab value=${n}`);i(n),l(n),h(n)}),[l,h,o]),tabValues:o}}var m=t(92303);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function I(n){let{className:e,block:t,selectedValue:i,selectValue:u,tabValues:l}=n;const c=[],{blockElementScrollPositionUntilNextRender:p}=(0,r.a_)(),d=n=>{const e=n.currentTarget,t=c.indexOf(e),a=l[t].value;a!==i&&(p(e),u(a))},_=n=>{let e=null;switch(n.key){case"Enter":d(n);break;case"ArrowRight":{const t=c.indexOf(n.currentTarget)+1;e=c[t]??c[0];break}case"ArrowLeft":{const t=c.indexOf(n.currentTarget)-1;e=c[t]??c[c.length-1];break}}e?.focus()};return s.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.A)("tabs",{"tabs--block":t},e)},l.map((n=>{let{value:e,label:t,attributes:r}=n;return s.createElement("li",(0,a.A)({role:"tab",tabIndex:i===e?0:-1,"aria-selected":i===e,key:e,ref:n=>c.push(n),onKeyDown:_,onClick:d},r,{className:(0,o.A)("tabs__item",b.tabItem,r?.className,{"tabs__item--active":i===e})}),t??e)})))}function g(n){let{lazy:e,children:t,selectedValue:a}=n;const o=(Array.isArray(t)?t:[t]).filter(Boolean);if(e){const n=o.find((n=>n.props.value===a));return n?(0,s.cloneElement)(n,{className:"margin-top--md"}):null}return s.createElement("div",{className:"margin-top--md"},o.map(((n,e)=>(0,s.cloneElement)(n,{key:e,hidden:n.props.value!==a}))))}function T(n){const e=h(n);return s.createElement("div",{className:(0,o.A)("tabs-container",b.tabList)},s.createElement(I,(0,a.A)({},n,e)),s.createElement(g,(0,a.A)({},n,e)))}function A(n){const e=(0,m.A)();return s.createElement(T,(0,a.A)({key:String(e)},n))}},54244:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>b,contentTitle:()=>h,default:()=>A,frontMatter:()=>f,metadata:()=>m,toc:()=>I});var a=t(58168),s=(t(96540),t(15680)),o=t(11470),r=t(19365),i=t(77964);const u='\x3c!--index.html file--\x3e\n\n<script>\n  //////////////////////////////////////////////////////////////////////////////////\n  // In this section, we set the user authentication, app ID, and the details for\n  // performing task annotations. Change these strings to run your own example.\n  /////////////////////////////////////////////////////////////////////////////////\n\n  const USER_ID = "YOUR_USER_ID_HERE";\n  // Your PAT (Personal Access Token) can be found in the Account\'s Security section\n  const PAT = "YOUR_PAT_HERE";\n  const APP_ID = "YOUR_APP_ID_HERE";\n  // Change these to perform your own task annotations\n  const INPUT_ID = "c99f1b557d1d43d1916b46f8ce4a0487";\n  const CONCEPT_ID_1 = "tree";\n  const CONCEPT_ID_2 = "water";\n  const TASK_ID = "c37aed156e474e03bb5246576d9f48fd";\n\n  ///////////////////////////////////////////////////////////////////////////////////\n  // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n  ///////////////////////////////////////////////////////////////////////////////////\n\n  const raw = JSON.stringify({\n    user_app_id: {\n      user_id: USER_ID,\n      app_id: APP_ID,\n    },\n    annotations: [\n      {\n        input_id: INPUT_ID,\n        data: {\n          concepts: [\n            {\n              id: CONCEPT_ID_1,\n              value: 1,\n            },\n            {\n              id: CONCEPT_ID_2,\n              value: 0,\n            },\n          ],\n        },\n        annotation_info: {\n          task_id: TASK_ID,\n        },\n      },\n    ],\n  });\n\n  const requestOptions = {\n    method: "POST",\n    headers: {\n      Accept: "application/json",\n      Authorization: "Key " + PAT,\n    },\n    body: raw,\n  };\n\n  fetch("https://api.clarifai.com/v2/annotations", requestOptions)\n    .then((response) => response.text())\n    .then((result) => console.log(result))\n    .catch((error) => console.log("error", error));\n<\/script>\n',l='curl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/annotations" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n      "annotations": [\n        {\n          "input_id": "INPUT_ID_HERE",\n          "data": {\n            "concepts": [\n              {\n                "id": "tree",\n                "value": 1\n              },\n              {\n                "id": "water",\n                "value": 0\n              }\n            ]\n          },\n          "annotation_info": {\n            "task_id": "TASK_ID_HERE"\n          }\n        }\n      ]\n    }\'',c="####################################################################################\n# In this section, we set the user authentication, app ID, and the details for\n# performing task annotations. Change these strings to run your own example.\n###################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to perform your own task annotations\nINPUT_ID = 'c99f1b557d1d43d1916b46f8ce4a0487'\nCONCEPT_ID_1 = 'tree'\nCONCEPT_ID_2 = 'water'\nTASK_ID = 'c37aed156e474e03bb5246576d9f48fd'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\nfrom google.protobuf.struct_pb2 import Struct\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nparams = Struct()\nparams['task_id'] = TASK_ID\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\npost_task_annotations_response = stub.PostAnnotations(\n    service_pb2.PostAnnotationsRequest(\n        user_app_id=userDataObject,  # The userDataObject is created in the overview and is required when using a PAT\n        annotations=[\n            resources_pb2.Annotation(\n                input_id=INPUT_ID,\n                data=resources_pb2.Data(\n                    concepts=[\n                        resources_pb2.Concept(id=CONCEPT_ID_1, value=1.),  # 1 means true, this concept is present\n                        resources_pb2.Concept(id=CONCEPT_ID_2, value=0.)  # 0 means false, this concept is not present\n                    ]\n                ),\n                annotation_info=params\n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif post_task_annotations_response.status.code != status_code_pb2.SUCCESS:\n    print(post_task_annotations_response.status)\n    raise Exception('Post task annotations failed, status: ' + post_task_annotations_response.status.description)\n",p='package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.status.StatusCode;\nimport com.google.protobuf.Struct;\nimport com.google.protobuf.Value;\n\npublic class ClarifaiExample {\n\n    //////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the details for\n    // performing task annotations. Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\t\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to perform your own task annotations  \n    static final String INPUT_ID = "c99f1b557d1d43d1916b46f8ce4a0487";\n    static final String CONCEPT_ID_1 = "tree";\n    static final String CONCEPT_ID_2 = "water";\n    static final String TASK_ID = "c37aed156e474e03bb5246576d9f48fd";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\t\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n        \n        Struct.Builder params = Struct.newBuilder()\n                .putFields("task_id", Value.newBuilder().setStringValue(TASK_ID).build());\n\n        MultiAnnotationResponse postAnnotationsResponse = stub.postAnnotations(\n            PostAnnotationsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .addAnnotations(\n                Annotation.newBuilder()\n                .setInputId(INPUT_ID)\n                .setData(\n                    Data.newBuilder().addConcepts(\n                        Concept.newBuilder()\n                        .setId(CONCEPT_ID_1)\n                        .setValue(1f) // 1 means true, this concept is present\n                        .build()\n                    ).addConcepts(\n                        Concept.newBuilder()\n                        .setId(CONCEPT_ID_2)\n                        .setValue(0f) // 0 means false, this concept is not present\n                        .build()\n                    )\n                )\n                .setAnnotationInfo(params)               \n                .build()\n            ).build()\n        );\n\n        if (postAnnotationsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post annotations failed, status: " + postAnnotationsResponse.getStatus());\n        }\n\n    }\n\n}',d='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and details for \n// performing task annotations. Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change these to perform your own task annotations\n$INPUT_ID = "62bb672ccbdd4e5da55b41209d1a0e9f";\n$CONCEPT_ID_1 = "tree";\n$CONCEPT_ID_2 = "water";\n$TASK_ID = "d0f2fa2b61234d1cb6b66983ea021b5b";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\PostAnnotationsRequest;\nuse Clarifai\\Api\\Annotation;\nuse Clarifai\\Api\\Concept;\nuse Clarifai\\Api\\Data;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\nuse Google\\Protobuf\\Struct;\nuse Google\\Protobuf\\Value;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// create Struct instance\n$params = new Struct();\n$params->getFields()->offsetSet("task_id", (new Value())->setStringValue($TASK_ID));\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PostAnnotations(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new PostAnnotationsRequest([\n        "user_app_id" => $userDataObject, \n        "annotations" => [\n             new Annotation([\n                "input_id" => $INPUT_ID,\n                "data" => new Data([\n                    "concepts" => [\n                        new Concept(["id" => $CONCEPT_ID_1, "value" => 1.]),\n                        new Concept(["id" => $CONCEPT_ID_2, "value" => 0.])\n                    ]\n                    ]),\n                "annotation_info" => $params\n             ])\n        ]\n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\n?>\n',_='//index.js file\n\n////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the details for\n// performing task annotations. Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = "YOUR_PAT_HERE";\nconst APP_ID = "YOUR_APP_ID_HERE";\n// Change these to perform your own task annotations\nconst INPUT_ID = "62bb672ccbdd4e5da55b41209d1a0e9f";\nconst CONCEPT_ID_1 = "tree";\nconst CONCEPT_ID_2 = "water";\nconst TASK_ID = "d0f2fa2b61234d1cb6b66983ea021b5b";\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PostAnnotations(\n  {\n    user_app_id: {\n      user_id: USER_ID,\n      app_id: APP_ID,\n    },\n    annotations: [\n      {\n        input_id: INPUT_ID,\n        data: {\n          concepts: [\n            {\n              id: CONCEPT_ID_1,\n              value: 1,\n            },\n            {\n              id: CONCEPT_ID_2,\n              value: 0,\n            },\n          ],\n        },\n        annotation_info: {\n          task_id: TASK_ID,\n        },\n      },\n    ],\n  },\n  metadata,\n  (err, response) => {\n    if (err) {\n      throw new Error(err);\n    }\n\n    if (response.status.code !== 10000) {\n      throw new Error(\n        "Post annotations failed, status: " + response.status.description\n      );\n    }\n  }\n);\n',f={description:"This is a page about performing task annotations with the Clarifai API.",sidebar_position:5},h="Task Annotations",m={unversionedId:"api-guide/annotate/task-annotations",id:"api-guide/annotate/task-annotations",title:"Task Annotations",description:"This is a page about performing task annotations with the Clarifai API.",source:"@site/docs/api-guide/annotate/task-annotations.md",sourceDirName:"api-guide/annotate",slug:"/api-guide/annotate/task-annotations",permalink:"/api-guide/annotate/task-annotations",draft:!1,editUrl:"https://github.com/Clarifai/docs/blob/main/docs/api-guide/annotate/task-annotations.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{description:"This is a page about performing task annotations with the Clarifai API.",sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Tasks : Create, Get, Update, Delete",permalink:"/api-guide/annotate/tasks"},next:{title:"Creating and Training Models",permalink:"/api-guide/model/"}},b={},I=[],g={toc:I},T="wrapper";function A(n){let{components:e,...t}=n;return(0,s.yg)(T,(0,a.A)({},g,t,{components:e,mdxType:"MDXLayout"}),(0,s.yg)("h1",{id:"task-annotations"},"Task Annotations"),(0,s.yg)("p",null,(0,s.yg)("strong",{parentName:"p"},"Perform task annotations")),(0,s.yg)("hr",null),(0,s.yg)("p",null,"In order to keep track of each user's work assigned to a task, all the annotations of this user related to this task should be linked to the task ID."),(0,s.yg)("p",null,"Therefore, when a user creates an annotation, the task ID should be provided as below:"),(0,s.yg)(o.A,{mdxType:"Tabs"},(0,s.yg)(r.A,{value:"python",label:"Python",mdxType:"TabItem"},(0,s.yg)(i.A,{className:"language-python",mdxType:"CodeBlock"},c)),(0,s.yg)(r.A,{value:"js_rest",label:"JavaScript (REST)",mdxType:"TabItem"},(0,s.yg)(i.A,{className:"language-javascript",mdxType:"CodeBlock"},u)),(0,s.yg)(r.A,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,s.yg)(i.A,{className:"language-javascript",mdxType:"CodeBlock"},_)),(0,s.yg)(r.A,{value:"java",label:"Java",mdxType:"TabItem"},(0,s.yg)(i.A,{className:"language-java",mdxType:"CodeBlock"},p)),(0,s.yg)(r.A,{value:"php",label:"PHP",mdxType:"TabItem"},(0,s.yg)(i.A,{className:"language-php",mdxType:"CodeBlock"},d)),(0,s.yg)(r.A,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,s.yg)(i.A,{className:"language-bash",mdxType:"CodeBlock"},l))))}A.isMDXComponent=!0}}]);
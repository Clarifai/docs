"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[4499],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),g=p(n),d=r,m=g["".concat(l,".").concat(d)]||g[d]||u[d]||o;return n?a.createElement(m,i(i({ref:t},c),{},{components:n})):a.createElement(m,i({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=g;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},8215:function(e,t,n){var a=n(7294);t.Z=function(e){var t=e.children,n=e.hidden,r=e.className;return a.createElement("div",{role:"tabpanel",hidden:n,className:r},t)}},6396:function(e,t,n){n.d(t,{Z:function(){return g}});var a=n(7462),r=n(7294),o=n(2389),i=n(9443);var s=function(){var e=(0,r.useContext)(i.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},l=n(3616),p=n(6010),c="tabItem_vU9c";function u(e){var t,n,o,i=e.lazy,u=e.block,g=e.defaultValue,d=e.values,m=e.groupId,f=e.className,h=r.Children.map(e.children,(function(e){if((0,r.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),k=null!=d?d:h.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),b=(0,l.lx)(k,(function(e,t){return e.value===t.value}));if(b.length>0)throw new Error('Docusaurus error: Duplicate values "'+b.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var v=null===g?g:null!=(t=null!=g?g:null==(n=h.find((function(e){return e.props.default})))?void 0:n.props.value)?t:null==(o=h[0])?void 0:o.props.value;if(null!==v&&!k.some((function(e){return e.value===v})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+v+'" but none of its children has the corresponding value. Available values are: '+k.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var _=s(),y=_.tabGroupChoices,N=_.setTabGroupChoices,C=(0,r.useState)(v),T=C[0],w=C[1],E=[],I=(0,l.o5)().blockElementScrollPositionUntilNextRender;if(null!=m){var R=y[m];null!=R&&R!==T&&k.some((function(e){return e.value===R}))&&w(R)}var P=function(e){var t=e.currentTarget,n=E.indexOf(t),a=k[n].value;a!==T&&(I(t),w(a),null!=m&&N(m,a))},L=function(e){var t,n=null;switch(e.key){case"ArrowRight":var a=E.indexOf(e.currentTarget)+1;n=E[a]||E[0];break;case"ArrowLeft":var r=E.indexOf(e.currentTarget)-1;n=E[r]||E[E.length-1]}null==(t=n)||t.focus()};return r.createElement("div",{className:"tabs-container"},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,p.Z)("tabs",{"tabs--block":u},f)},k.map((function(e){var t=e.value,n=e.label,o=e.attributes;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:T===t?0:-1,"aria-selected":T===t,key:t,ref:function(e){return E.push(e)},onKeyDown:L,onFocus:P,onClick:P},o,{className:(0,p.Z)("tabs__item",c,null==o?void 0:o.className,{"tabs__item--active":T===t})}),null!=n?n:t)}))),i?(0,r.cloneElement)(h.filter((function(e){return e.props.value===T}))[0],{className:"margin-vert--md"}):r.createElement("div",{className:"margin-vert--md"},h.map((function(e,t){return(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==T})}))))}function g(e){var t=(0,o.Z)();return r.createElement(u,(0,a.Z)({key:String(t)},e))}},8135:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return p},contentTitle:function(){return c},metadata:function(){return u},toc:function(){return g},default:function(){return m}});var a=n(7462),r=n(3366),o=(n(7294),n(3905)),i=n(6396),s=n(8215),l=["components"],p={description:"Multilingual support in Clarifai",sidebar_position:2},c="Languages",u={unversionedId:"api-guide/concepts/languages",id:"api-guide/concepts/languages",title:"Languages",description:"Multilingual support in Clarifai",source:"@site/docs/api-guide/concepts/languages.md",sourceDirName:"api-guide/concepts",slug:"/api-guide/concepts/languages",permalink:"/docs-new/api-guide/concepts/languages",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/api-guide/concepts/languages.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{description:"Multilingual support in Clarifai",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Create, Get, Update",permalink:"/docs-new/api-guide/concepts/create-get-update"},next:{title:"Search by Concept",permalink:"/docs-new/api-guide/concepts/search-by-concept"}},g=[{value:"Supported Languages",id:"supported-languages",children:[],level:2},{value:"Default Language",id:"default-language",children:[],level:2},{value:"List language translations by concept ID",id:"list-language-translations-by-concept-id",children:[],level:2},{value:"Get specific language translation for a concept",id:"get-specific-language-translation-for-a-concept",children:[],level:2},{value:"Add a language translation for a concept",id:"add-a-language-translation-for-a-concept",children:[],level:2},{value:"Update a language translation for a concept",id:"update-a-language-translation-for-a-concept",children:[],level:2}],d={toc:g};function m(e){var t=e.components,p=(0,r.Z)(e,l);return(0,o.kt)("wrapper",(0,a.Z)({},d,p,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"languages"},"Languages"),(0,o.kt)("p",null,"The Clarifai API supports many languages in addition to English. These are represented as translations of the names of concepts so that when you search by concept name or get predictions from a model's concepts you can utilize the language of your choice."),(0,o.kt)("h2",{id:"supported-languages"},"Supported Languages"),(0,o.kt)("p",null,"The currently supported languages are listed below."),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:"left"},"Language"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Code"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"Arabic ","(","ar",")"),(0,o.kt)("td",{parentName:"tr",align:"left"},"ar")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"Bengali ","(","bn",")"),(0,o.kt)("td",{parentName:"tr",align:"left"},"bn")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"Danish ","(","da",")"),(0,o.kt)("td",{parentName:"tr",align:"left"},"da")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"German ","(","de",")"),(0,o.kt)("td",{parentName:"tr",align:"left"},"de")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"English ","(","en",")"),(0,o.kt)("td",{parentName:"tr",align:"left"},"en")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"Spanish ","(","es",")"),(0,o.kt)("td",{parentName:"tr",align:"left"},"es")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"Finnish ","(","fi",")"),(0,o.kt)("td",{parentName:"tr",align:"left"},"fi")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"French ","(","fr",")"),(0,o.kt)("td",{parentName:"tr",align:"left"},"fr")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"Hindi ","(","hi",")"),(0,o.kt)("td",{parentName:"tr",align:"left"},"hi")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"Hungarian ","(","hu",")"),(0,o.kt)("td",{parentName:"tr",align:"left"},"hu")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"Italian ","(","it",")"),(0,o.kt)("td",{parentName:"tr",align:"left"},"it")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"Japanese ","(","ja",")"),(0,o.kt)("td",{parentName:"tr",align:"left"},"ja")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"Korean ","(","ko",")"),(0,o.kt)("td",{parentName:"tr",align:"left"},"ko")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"Dutch ","(","nl",")"),(0,o.kt)("td",{parentName:"tr",align:"left"},"nl")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"Norwegian ","(","no",")"),(0,o.kt)("td",{parentName:"tr",align:"left"},"no")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"Punjabi ","(","pa",")"),(0,o.kt)("td",{parentName:"tr",align:"left"},"pa")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"Polish ","(","pl",")"),(0,o.kt)("td",{parentName:"tr",align:"left"},"pl")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"Portuguese ","(","pt",")"),(0,o.kt)("td",{parentName:"tr",align:"left"},"pt")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"Russian ","(","ru",")"),(0,o.kt)("td",{parentName:"tr",align:"left"},"ru")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"Swedish ","(","sv",")"),(0,o.kt)("td",{parentName:"tr",align:"left"},"sv")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"Turkish ","(","tr",")"),(0,o.kt)("td",{parentName:"tr",align:"left"},"tr")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"Chinese Simplified ","(","zh",")"),(0,o.kt)("td",{parentName:"tr",align:"left"},"zh")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"Chinese Traditional ","(","zh-TW",")"),(0,o.kt)("td",{parentName:"tr",align:"left"},"zh-TW")))),(0,o.kt)("h2",{id:"default-language"},"Default Language"),(0,o.kt)("p",null,"When you create a new Application, you must specify a default language. This will be the default language concepts are returned in when you do not explicitly set a language in an API request. You cannot change the default language. You can however change languages per request."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"create new app",src:n(5153).Z})),(0,o.kt)("h2",{id:"list-language-translations-by-concept-id"},"List language translations by concept ID"),(0,o.kt)("p",null,"You can see all the language translations for a given concept ID with a GET call. This call supports ",(0,o.kt)("a",{parentName:"p",href:"/docs-new/api-guide/advanced-topics/pagination"},"pagination"),"."),(0,o.kt)(i.Z,{mdxType:"Tabs"},(0,o.kt)(s.Z,{value:"grpc_java",label:"gRPC Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nMultiConceptResponse listConceptLanguagesResponse = stub.listConceptLanguages(\n    ListConceptLanguagesRequest.newBuilder()\n        .setConceptId("charlie")\n        .build()\n);\n\nif (listConceptLanguagesResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n    throw new RuntimeException("List concept languages failed, status: " + listConceptLanguagesResponse.getStatus());\n}\n'))),(0,o.kt)(s.Z,{value:"grpc_nodejs",label:"gRPC NodeJS",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nstub.ListConceptLanguages(\n    {\n      concept_id: "charlie"\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("List concepts failed, status: " + response.status.description);\n        }\n    }\n);\n'))),(0,o.kt)(s.Z,{value:"grpc_python",label:"gRPC Python",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'# Insert here the initialization code as outlined on this page:\n# https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nlist_concept_languages_response = stub.ListConceptLanguages(\n    service_pb2.ListConceptLanguagesRequest(\n        concept_id="charlie"\n    ),\n    metadata=metadata\n)\n\nif list_concept_languages_response.status.code != status_code_pb2.SUCCESS:\n    print("There was an error with your request!")\n    print("\\tCode: {}".format(list_concept_languages_response.outputs[0].status.code))\n    print("\\tDescription: {}".format(list_concept_languages_response.outputs[0].status.description))\n    print("\\tDetails: {}".format(list_concept_languages_response.outputs[0].status.details))\n    raise Exception("List concept failed, status: " + list_concept_languages_response.status.description)\n'))),(0,o.kt)(s.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},'curl -X GET \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  https://api.clarifai.com/v2/concepts/{concept_id}/languages\n'))),(0,o.kt)(s.Z,{value:"js_rest",label:"Javascript (REST)",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const conceptId = '{CONCEPT_ID}'\nconst appId = '{YOUR_APP_ID}'\n\nconst requestOptions = {\n  method: 'GET',\n  headers: {\n    'Accept': 'application/json',\n    'Authorization': 'Key {YOUR_PERSONAL_TOKEN}'\n  }\n};\n\nfetch(`https://api.clarifai.com/v2/users/me/apps/${appId}/concepts/${conceptId}/languages`, requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log('error', error));\n")))),(0,o.kt)("h2",{id:"get-specific-language-translation-for-a-concept"},"Get specific language translation for a concept"),(0,o.kt)("p",null,"To get a single language translation you have for a concept you can get by the language code and concept id."),(0,o.kt)(i.Z,{mdxType:"Tabs"},(0,o.kt)(s.Z,{value:"grpc_java",label:"gRPC Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nMultiConceptResponse getConceptLanguageResponse = stub.getConceptLanguage(\n    ListConceptLanguageRequest.newBuilder()\n        .setConceptId("charlie")\n        .setLanguage("ja")\n        .build()\n);\n\nif (getConceptLanguageResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n    throw new RuntimeException("List concept languages failed, status: " + getConceptLanguageResponse.getStatus());\n}\n'))),(0,o.kt)(s.Z,{value:"grpc_nodejs",label:"gRPC NodeJS",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nstub.GetConceptLanguage(\n    {\n      concept_id: "charlie",\n      language: "ja"\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Get concepts failed, status: " + response.status.description);\n        }\n    }\n);\n'))),(0,o.kt)(s.Z,{value:"grpc_python",label:"gRPC Python",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'# Insert here the initialization code as outlined on this page:\n# https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nget_concept_language_response = stub.GetConceptLanguage(\n    service_pb2.GetConceptLanguageRequest(\n        concept_id="charlie",\n        language="ja"\n    ),\n    metadata=metadata\n)\n\nif get_concept_langauge_response.status.code != status_code_pb2.SUCCESS:\n    print("There was an error with your request!")\n    print("\\tCode: {}".format(get_concept_language_response.outputs[0].status.code))\n    print("\\tDescription: {}".format(get_concept_language_response.outputs[0].status.description))\n    print("\\tDetails: {}".format(get_concept_language_response.outputs[0].status.details))\n    raise Exception("Get concept failed, status: " + get_concept_language_response.status.description)\n'))),(0,o.kt)(s.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},'curl -X GET \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  https://api.clarifai.com/v2/concepts/{concept_id}/languages/{language}\n'))),(0,o.kt)(s.Z,{value:"js_rest",label:"Javascript (REST)",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const conceptId = '{CONCEPT_ID}'\nconst appId = '{YOUR_APP_ID}'\nconst language = '{LANGUAGE}'\n\nconst requestOptions = {\n  method: 'GET',\n  headers: {\n    'Accept': 'application/json',\n    'Authorization': 'Key {YOUR_PERSONAL_TOKEN}'\n  }\n};\n\nfetch(`https://api.clarifai.com/v2/users/me/apps/${appId}/concepts/${conceptId}/languages/${language}`, requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log('error', error));\n")))),(0,o.kt)("h2",{id:"add-a-language-translation-for-a-concept"},"Add a language translation for a concept"),(0,o.kt)("p",null,"To create a langauge translation for a concept you can POST that language translation."),(0,o.kt)(i.Z,{mdxType:"Tabs"},(0,o.kt)(s.Z,{value:"grpc_java",label:"gRPC Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nMultiConceptResponse postConceptLanguageResponse = stub.postConceptLanguage(\n    PostConceptLanguageRequest.newBuilder()\n        .setConceptId("charlie")\n        .addConceptLanguages(ConceptLanguage.newBuilder().setId("ja").setName("\u30dc\u30b9\u30b3"))\n        .build()\n);\n\nif (postConceptLanguageResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n    throw new RuntimeException("Post concept languages failed, status: " + postConceptLanguageResponse.getStatus());\n}\n'))),(0,o.kt)(s.Z,{value:"grpc_nodejs",label:"gRPC NodeJS",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nstub.PostConceptLanguage(\n    {\n      concept_id: "charlie",\n      concept_languages: [\n        {\n          id: "ja",\n          name: "\u30dc\u30b9\u30b3"\n        }\n      ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Get concepts failed, status: " + response.status.description);\n        }\n    }\n);\n'))),(0,o.kt)(s.Z,{value:"grpc_python",label:"gRPC Python",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'# Insert here the initialization code as outlined on this page:\n# https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nget_concept_language_response = stub.PostConceptLanguage(\n    service_pb2.PostConceptLanguageRequest(\n        concept_id="charlie",\n        concept_languages=[resources_pb2.ConceptLanguages(\n          id="ja",\n          name="\u30dc\u30b9\u30b3"\n        )]\n    ),\n    metadata=metadata\n)\n\nif get_concept_langauge_response.status.code != status_code_pb2.SUCCESS:\n    print("There was an error with your request!")\n    print("\\tCode: {}".format(get_concept_language_response.outputs[0].status.code))\n    print("\\tDescription: {}".format(get_concept_language_response.outputs[0].status.description))\n    print("\\tDetails: {}".format(get_concept_language_response.outputs[0].status.details))\n    raise Exception("Get concept failed, status: " + get_concept_language_response.status.description)\n'))),(0,o.kt)(s.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},'curl -X GET \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  https://api.clarifai.com/v2/concepts/{concept_id}/languages/{language}\n'))),(0,o.kt)(s.Z,{value:"js_rest",label:"Javascript (REST)",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'const conceptId = \'{YOUR_CONCEPT_ID}\'\n\nconst raw = JSON.stringify({\n    "user_app_id": {\n        "user_id": "{YOUR_USER_ID}",\n        "app_id": "{YOUR_APP_ID}"\n    },\n  "concept_languages": [\n    {\n      "id": "ko",\n      "name": "\uac1c"\n    }\n  ]\n});\n\nconst requestOptions = {\n  method: \'POST\',\n  headers: {\n    \'Accept\': \'application/json\',\n    \'Authorization\': \'Key {YOUR_PERSONAL_TOKEN}\'\n  },\n  body: raw\n};\n\nfetch(`https://api.clarifai.com/v2/concepts/${conceptId}/languages`, requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log(\'error\', error));\n')))),(0,o.kt)("h2",{id:"update-a-language-translation-for-a-concept"},"Update a language translation for a concept"),(0,o.kt)("p",null,"To update a langauge translation for a concept you can PATCH that language translation."),(0,o.kt)(i.Z,{mdxType:"Tabs"},(0,o.kt)(s.Z,{value:"grpc_java",label:"gRPC Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nMultiConceptResponse patchConceptLanguageResponse = stub.patchConceptLanguage(\n    PatchConceptLanguageRequest.newBuilder()\n        .setAction("overwrite")\n        .setConceptId("charlie")\n        .addConceptLanguages(ConceptLanguage.newBuilder().setId("ja").setName("new name"))\n        .build()\n);\n\nif (patchConceptLanguageResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n    throw new RuntimeException("Patch concept languages failed, status: " + patchConceptLanguageResponse.getStatus());\n}\n'))),(0,o.kt)(s.Z,{value:"grpc_nodejs",label:"gRPC NodeJS",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nstub.PatchConceptLanguage(\n    {\n      action: "overwrite",\n      concept_id: "charlie",\n      concept_languages: [\n        {\n          id: "ja",\n          name: "new name"\n        }\n      ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Get concepts failed, status: " + response.status.description);\n        }\n    }\n);\n'))),(0,o.kt)(s.Z,{value:"grpc_python",label:"gRPC Python",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'# Insert here the initialization code as outlined on this page:\n# https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nget_concept_language_response = stub.PatchConceptLanguage(\n    service_pb2.PatchConceptLanguageRequest(\n        concept_id="charlie",\n        concept_languages=[resources_pb2.ConceptLanguages(\n          id="ja",\n          name="new name"\n        )],\n        action="overwrite"\n    ),\n    metadata=metadata\n)\n\nif get_concept_langauge_response.status.code != status_code_pb2.SUCCESS:\n    print("There was an error with your request!")\n    print("\\tCode: {}".format(get_concept_language_response.outputs[0].status.code))\n    print("\\tDescription: {}".format(get_concept_language_response.outputs[0].status.description))\n    print("\\tDetails: {}".format(get_concept_language_response.outputs[0].status.details))\n    raise Exception("Get concept failed, status: " + get_concept_language_response.status.description)\n'))),(0,o.kt)(s.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},'curl -X GET \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  https://api.clarifai.com/v2/concepts/{concept_id}/languages/{language}\n'))),(0,o.kt)(s.Z,{value:"js_rest",label:"Javascript (REST)",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'const conceptId = \'{YOUR_CONCEPT_ID}\'\n\nconst raw = JSON.stringify({\n    "user_app_id": {\n        "user_id": "{YOUR_USER_ID}",\n        "app_id": "{YOUR_APP_ID}"\n    },\n  "concept_languages": [\n    {\n      "id": "ko",\n      "name": "\uac1c"\n    }\n  ],\n  "action": "overwrite"\n});\n\nvar requestOptions = {\n  method: \'PATCH\',\n  headers: {\n    \'Accept\': \'application/json\',\n    \'Authorization\': \'Key {YOUR_PERSONAL_TOKEN}\'\n  },\n  body: raw\n};\n\nfetch(`https://api.clarifai.com/v2/concepts/${conceptId}/languages`, requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log(\'error\', error));\n')))))}m.isMDXComponent=!0},5153:function(e,t,n){t.Z=n.p+"assets/images/create-new-app-new-b870893cd1ccf7b8f78f9f672faa92f7.png"}}]);
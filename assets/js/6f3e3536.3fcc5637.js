"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[9129],{85162:(e,t,a)=>{a.d(t,{Z:()=>s});var r=a(67294),n=a(86010);const i={tabItem:"tabItem_Ymn6"};function s(e){let{children:t,hidden:a,className:s}=e;return r.createElement("div",{role:"tabpanel",className:(0,n.Z)(i.tabItem,s),hidden:a},t)}},74866:(e,t,a)=>{a.d(t,{Z:()=>v});var r=a(87462),n=a(67294),i=a(86010),s=a(12466),o=a(16550),l=a(91980),u=a(67392),p=a(50012);function c(e){return function(e){return n.Children.map(e,(e=>{if(!e||(0,n.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:a,attributes:r,default:n}}=e;return{value:t,label:a,attributes:r,default:n}}))}function h(e){const{values:t,children:a}=e;return(0,n.useMemo)((()=>{const e=t??c(a);return function(e){const t=(0,u.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,a])}function m(e){let{value:t,tabValues:a}=e;return a.some((e=>e.value===t))}function d(e){let{queryString:t=!1,groupId:a}=e;const r=(0,o.k6)(),i=function(e){let{queryString:t=!1,groupId:a}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:t,groupId:a});return[(0,l._X)(i),(0,n.useCallback)((e=>{if(!i)return;const t=new URLSearchParams(r.location.search);t.set(i,e),r.replace({...r.location,search:t.toString()})}),[i,r])]}function f(e){const{defaultValue:t,queryString:a=!1,groupId:r}=e,i=h(e),[s,o]=(0,n.useState)((()=>function(e){let{defaultValue:t,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const r=a.find((e=>e.default))??a[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:i}))),[l,u]=d({queryString:a,groupId:r}),[c,f]=function(e){let{groupId:t}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(t),[r,i]=(0,p.Nk)(a);return[r,(0,n.useCallback)((e=>{a&&i.set(e)}),[a,i])]}({groupId:r}),g=(()=>{const e=l??c;return m({value:e,tabValues:i})?e:null})();(0,n.useLayoutEffect)((()=>{g&&o(g)}),[g]);return{selectedValue:s,selectValue:(0,n.useCallback)((e=>{if(!m({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);o(e),u(e),f(e)}),[u,f,i]),tabValues:i}}var g=a(72389);const k={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function b(e){let{className:t,block:a,selectedValue:o,selectValue:l,tabValues:u}=e;const p=[],{blockElementScrollPositionUntilNextRender:c}=(0,s.o5)(),h=e=>{const t=e.currentTarget,a=p.indexOf(t),r=u[a].value;r!==o&&(c(t),l(r))},m=e=>{let t=null;switch(e.key){case"Enter":h(e);break;case"ArrowRight":{const a=p.indexOf(e.currentTarget)+1;t=p[a]??p[0];break}case"ArrowLeft":{const a=p.indexOf(e.currentTarget)-1;t=p[a]??p[p.length-1];break}}t?.focus()};return n.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":a},t)},u.map((e=>{let{value:t,label:a,attributes:s}=e;return n.createElement("li",(0,r.Z)({role:"tab",tabIndex:o===t?0:-1,"aria-selected":o===t,key:t,ref:e=>p.push(e),onKeyDown:m,onClick:h},s,{className:(0,i.Z)("tabs__item",k.tabItem,s?.className,{"tabs__item--active":o===t})}),a??t)})))}function y(e){let{lazy:t,children:a,selectedValue:r}=e;const i=(Array.isArray(a)?a:[a]).filter(Boolean);if(t){const e=i.find((e=>e.props.value===r));return e?(0,n.cloneElement)(e,{className:"margin-top--md"}):null}return n.createElement("div",{className:"margin-top--md"},i.map(((e,t)=>(0,n.cloneElement)(e,{key:t,hidden:e.props.value!==r}))))}function I(e){const t=f(e);return n.createElement("div",{className:(0,i.Z)("tabs-container",k.tabList)},n.createElement(b,(0,r.Z)({},e,t)),n.createElement(y,(0,r.Z)({},e,t)))}function v(e){const t=(0,g.Z)();return n.createElement(I,(0,r.Z)({key:String(t)},e))}},83188:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>f,contentTitle:()=>m,default:()=>y,frontMatter:()=>h,metadata:()=>d,toc:()=>g});var r=a(87462),n=(a(67294),a(3905)),i=a(74866),s=a(85162),o=a(90814);const l='from clarifai.client.user import User  # Importing the User class from the Clarifai client library for user-related functionalities\nfrom PIL import Image  # Importing the Image module from the Python Imaging Library (PIL) for image processing\nimport requests  # Importing the requests library to handle HTTP requests\nfrom IPython.display import display  # Importing the display function from IPython.display module for displaying images in IPython\n\nUSER_ID=\'\'  # Placeholder for user ID\nAPP_ID=\'\'  # Placeholder for application ID\nPAT=\'\'  # Placeholder for personal access token (PAT)\n\n# Initialize the User object with user ID and PAT\nclient = User(user_id=USER_ID, pat=PAT)\n\n# Create a new application with specified ID and base workflow\napp = client.create_app(app_id=APP_ID, base_workflow="Universal", pat=PAT)\n\n# List of image URLs to be uploaded\nurls = [\n    "https://images.pexels.com/photos/139257/pexels-photo-139257.jpeg",\n    "https://images.pexels.com/photos/1879386/pexels-photo-1879386.jpeg",\n    "https://images.pexels.com/photos/1071882/pexels-photo-1071882.jpeg"\n]\n\ninput_obj = app.inputs()  # Initialize Inputs object to manage input data\n\n# Upload images from URLs to the application\nfor i, url in enumerate(urls):\n    input_obj.upload_from_url(input_id=f"input{i}", image_url=url)\n\n# Initialize the search functionality for the application with top_k parameter set to 1\nsearch = app.search(top_k=1)\n\n# Perform a search query with a specified text rank\nresponse = search.query(ranks=[{"text_raw": "Red pineapples on the beach."}])\n\n# Extract the URL of the first hit from the search response\nfor r in response:\n    hit = r.hits[0].input.data.image.url\n    break\n\n# Print the URL of the hit image\nprint(hit)\n\n# Open the hit image from URL, resize it, and display it\nhit_img = Image.open(requests.get(hit, stream=True).raw).resize((300,250))\ndisplay(hit_img)\n',u="from clarifai.client.user import User\nfrom PIL import Image\nimport requests\nfrom IPython.display import display\n\n# Replace these variables with your actual user ID, app ID, and PAT (Personal Access Token)\nUSER_ID = ''\nAPP_ID = ''\nPAT = ''\n\n# Initialize a User object with the provided user ID and PAT\nclient = User(user_id=USER_ID, pat=PAT)\n\n# Create an application with the provided app ID, using the Universal workflow\n# The PAT is also provided for authentication\napp = client.create_app(app_id=APP_ID, base_workflow=\"Universal\", pat=PAT)\n\n# URLs of the images to be uploaded and searched\nurls = [\n    \"https://images.pexels.com/photos/139257/pexels-photo-139257.jpeg\",\n    \"https://images.pexels.com/photos/1879386/pexels-photo-1879386.jpeg\",\n    \"https://images.pexels.com/photos/1071882/pexels-photo-1071882.jpeg\"\n]\n\n# Initialize an Inputs object to manage input data\ninput_obj = app.inputs()\n\n# Initialize a Search object to perform searches\n# Limit the number of returned results to 2 (top_k=2)\nsearch = app.search(top_k=2)\n\n# Upload each image from the provided URLs\nfor i, url in enumerate(urls):\n    input_obj.upload_from_url(input_id=f\"input{i}\", image_url=url)\n\n# Perform a search with a specified rank (image URL)\nres = search.query(ranks=[{'image_url': 'https://images.pexels.com/photos/139257/pexels-photo-139257.jpeg'}])\n\n# Extract the URL of the first hit from the search results\nfor r in res:\n    hit = r.hits[0].input.data.image.url\n    break\n\n# Print the URL of the hit image\nprint(hit)\n\n# Open the hit image using PIL, resize it, and display it\nhit_img = Image.open(requests.get(hit, stream=True).raw).resize((300, 250))\ndisplay(hit_img)",p="https://images.pexels.com/photos/139257/pexels-photo-139257.jpeg",c="https://samples.clarifai.com/XiJinping.jpg",h={sidebar_position:1,description:"Learn how to perform Rank Search"},m="Ranks",d={unversionedId:"python-sdk/Search/Ranks",id:"python-sdk/Search/Ranks",title:"Ranks",description:"Learn how to perform Rank Search",source:"@site/docs/python-sdk/Search/Ranks.md",sourceDirName:"python-sdk/Search",slug:"/python-sdk/Search/Ranks",permalink:"/python-sdk/Search/Ranks",draft:!1,editUrl:"https://github.com/Clarifai/docs/blob/main/docs/python-sdk/Search/Ranks.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,description:"Learn how to perform Rank Search"},sidebar:"tutorialSidebar",previous:{title:"Search",permalink:"/python-sdk/Search/"},next:{title:"Filter",permalink:"/python-sdk/Search/Filter"}},f={},g=[{value:"Rank with Text",id:"rank-with-text",level:2},{value:"Rank with Image URL",id:"rank-with-image-url",level:2}],k={toc:g},b="wrapper";function y(e){let{components:t,...a}=e;return(0,n.kt)(b,(0,r.Z)({},k,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"ranks"},"Ranks"),(0,n.kt)("p",null,"The rank feature in Clarifai allows users to specify criteria for prioritizing search results based on relevance or similarity to a reference. In the provided example, it conducts a vector search over inputs, comparing their features to those of a reference image specified by its URL. The search results are then ranked based on their similarity to the reference using the cosine metric."),(0,n.kt)("p",null,"Click ",(0,n.kt)("a",{parentName:"p",href:"https://docs.clarifai.com/api-guide/search/rank"},"here")," to know more about Rank search."),(0,n.kt)("h2",{id:"rank-with-text"},"Rank with Text"),(0,n.kt)("p",null,"By incorporating text-based ranking, users can enhance the relevance and specificity of search results, ensuring that items closely aligned with specified textual criteria appear higher in the ranked list. "),(0,n.kt)(i.Z,{mdxType:"Tabs"},(0,n.kt)(s.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,n.kt)(o.Z,{className:"language-python",mdxType:"CodeBlock"},l))),(0,n.kt)("details",null,(0,n.kt)("summary",null,"Output"),(0,n.kt)(o.Z,{className:"language-text",mdxType:"CodeBlock"},p),(0,n.kt)("img",{src:"/img/python-sdk/rk_text.png",width:"700",height:"700"})),(0,n.kt)("h2",{id:"rank-with-image-url"},"Rank with Image URL"),(0,n.kt)("p",null,"Ranking with image URL in Clarifai allows users to prioritize search results based on the similarity or relevance of images specified by their URLs."),(0,n.kt)(i.Z,{mdxType:"Tabs"},(0,n.kt)(s.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,n.kt)(o.Z,{className:"language-python",mdxType:"CodeBlock"},u))),(0,n.kt)("details",null,(0,n.kt)("summary",null,"Output"),(0,n.kt)(o.Z,{className:"language-text",mdxType:"CodeBlock"},c),(0,n.kt)("img",{src:"/img/python-sdk/rk_imurl.png",width:"700",height:"700"})))}y.isMDXComponent=!0}}]);
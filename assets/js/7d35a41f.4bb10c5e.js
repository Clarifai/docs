"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[440],{23389:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>c,contentTitle:()=>a,default:()=>f,frontMatter:()=>s,metadata:()=>t,toc:()=>u});const t=JSON.parse('{"id":"integrations/unstructured/data-ingestion","title":"Data Ingestion Using Unstructured.io","description":"Learn about the data ingestion process in Unstructured.io","source":"@site/docs/integrations/unstructured/data-ingestion.md","sourceDirName":"integrations/unstructured","slug":"/integrations/unstructured/data-ingestion","permalink":"/integrations/unstructured/data-ingestion","draft":false,"unlisted":false,"editUrl":"https://github.com/Clarifai/docs/blob/main/docs/integrations/unstructured/data-ingestion.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Integrating Unstructred.io with Clarifai","permalink":"/integrations/unstructured/"},"next":{"title":"Chat With Dropbox Using Unstructured.io","permalink":"/integrations/unstructured/dropbox"}}');var i=r(74848),o=r(28453);const s={},a="Data Ingestion Using Unstructured.io",c={},u=[{value:"Source Connectors",id:"source-connectors",level:2},{value:"Destination Connector",id:"destination-connector",level:2},{value:"Ingestion Configuration",id:"ingestion-configuration",level:2}];function g(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"data-ingestion-using-unstructuredio",children:"Data Ingestion Using Unstructured.io"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Learn about the data ingestion process in Unstructured.io"})}),"\n",(0,i.jsx)("hr",{}),"\n",(0,i.jsx)(e.p,{children:"Unstructured.io provides a powerful platform for handling the ingestion of unstructured data. Central to this process are the source and destination connectors, which facilitate the movement of data from its origin to a storage or processing system."}),"\n",(0,i.jsx)(e.h2,{id:"source-connectors",children:"Source Connectors"}),"\n",(0,i.jsxs)(e.p,{children:["Source connectors are designed to interface with various unstructured data sources, allowing you to seamlessly ingest data into the Clarifai platform. Click ",(0,i.jsx)(e.a,{href:"https://docs.unstructured.io/api-reference/ingest/source-connectors/overview",children:"here"})," to learn more about source connectors."]}),"\n",(0,i.jsx)(e.p,{children:"Below is an example of using S3 as a source connector."}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'# Importing necessary modules from the \'os\' library\nimport os\n\n# Importing necessary configurations and classes from unstructured.ingest.connector.fsspec.s3\nfrom unstructured.ingest.connector.fsspec.s3 import S3AccessConfig, SimpleS3Config\n\n# Importing configuration classes from unstructured.ingest.interfaces\nfrom unstructured.ingest.interfaces import (\n PartitionConfig,\n ProcessorConfig,\n ChunkingConfig,\n ReadConfig,\n)\n\n# Importing the S3Runner class from unstructured.ingest.runner\nfrom unstructured.ingest.runner import S3Runner\n\n# Importing necessary configurations and classes from unstructured.ingest.connector.clarifai\nfrom unstructured.ingest.connector.clarifai import (\n ClarifaiAccessConfig,\n ClarifaiWriteConfig,\n SimpleClarifaiConfig,\n)\n\n# Importing base writer and ClarifaiWriter from unstructured.ingest.runner.writers.clarifai\nfrom unstructured.ingest.runner.writers.base_writer import Writer\nfrom unstructured.ingest.runner.writers.clarifai import (\n ClarifaiWriter,\n)\n\n\nif __name__ == "__main__":\n    # Creating an instance of ClarifaiWriter\n writer = clarifai_writer()\n    \n    # Creating an instance of S3Runner with various configurations\n runner = S3Runner(\n        processor_config=ProcessorConfig(\n            verbose=True,               # Enable verbose output\n            output_dir="s3-output-local",  # Directory to store output locally\n            num_processes=2,            # Number of processes to use\n        ),\n        read_config=ReadConfig(),      # Configuration for reading data\n        partition_config=PartitionConfig(),  # Configuration for partitioning data\n        connector_config=SimpleS3Config(\n            access_config=S3AccessConfig(\n                key=access_key,         # S3 access key\n                secret=secret_access,   # S3 secret access key\n            ),\n            remote_url="s3 URL",  # URL of the S3 bucket\n        ),\n        writer=writer,                 # Writer to use for output\n        writer_kwargs={},              # Additional arguments for the writer\n    )\n    \n    # Running the S3Runner\n runner.run()\n\n\n'})}),"\n",(0,i.jsx)(e.h2,{id:"destination-connector",children:"Destination Connector"}),"\n",(0,i.jsxs)(e.p,{children:["Destination connectors enable the processed data to be loaded into various storage or processing systems where it can be further analyzed, queried, or used in applications. Click ",(0,i.jsx)(e.a,{href:"https://docs.unstructured.io/api-reference/ingest/destination-connector/overview",children:"here"})," to learn more about destination connectors."]}),"\n",(0,i.jsx)(e.p,{children:"Below is an example of using Clarifai as a destination connector."}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'import os\n\n# Importing necessary configurations and classes from unstructured.ingest.connector.clarifai\nfrom unstructured.ingest.connector.clarifai import (\n ClarifaiAccessConfig,\n ClarifaiWriteConfig,\n SimpleClarifaiConfig,\n)\n\n# Importing local configuration class from unstructured.ingest.connector.local\nfrom unstructured.ingest.connector.local import SimpleLocalConfig\n\n# Importing configuration classes from unstructured.ingest.interfaces\nfrom unstructured.ingest.interfaces import (\n ChunkingConfig,\n PartitionConfig,\n ProcessorConfig,\n ReadConfig,\n)\n\n# Importing the LocalRunner class from unstructured.ingest.runner\nfrom unstructured.ingest.runner import LocalRunner\n\n# Importing base writer and ClarifaiWriter from unstructured.ingest.runner.writers.clarifai\nfrom unstructured.ingest.runner.writers.base_writer import Writer\nfrom unstructured.ingest.runner.writers.clarifai import (\n ClarifaiWriter,\n)\n\n# Function to create and return a ClarifaiWriter instance\ndef get_writer() -> Writer:\n    return ClarifaiWriter(\n        connector_config=SimpleClarifaiConfig(\n            access_config=ClarifaiAccessConfig(api_key=os.getenv("CLARIFAI_PAT_KEY")),  # Access config using environment variables\n            app_id=os.getenv("CLARIFAI_APP_ID"),  # Clarifai app ID from environment variables\n            user_id=os.getenv("CLARIFAI_USER_ID"),  # Clarifai user ID from environment variables\n        ),\n        write_config=ClarifaiWriteConfig(),  # Write config for Clarifai\n    )\n\n\nif __name__ == "__main__":\n    # Creating a writer instance using the get_writer function\n writer = get_writer()\n    \n    # Creating an instance of LocalRunner with various configurations\n runner = LocalRunner(\n        processor_config=ProcessorConfig(\n            verbose=True,  # Enable verbose output\n            output_dir="local-output-to-clarifai-app",  # Directory to store output locally\n            num_processes=2,  # Number of processes to use\n        ),\n        connector_config=SimpleLocalConfig(\n            input_path="example-docs/book-war-and-peace-1225p.txt",  # Path to the input file\n        ),\n        read_config=ReadConfig(),  # Configuration for reading data\n        partition_config=PartitionConfig(),  # Configuration for partitioning data\n        chunking_config=ChunkingConfig(chunk_elements=True),  # Configuration for chunking data\n        writer=writer,  # Writer to use for output\n        writer_kwargs={},  # Additional arguments for the writer\n    )\n    \n    # Running the LocalRunner\n runner.run()\n\n'})}),"\n",(0,i.jsx)(e.h2,{id:"ingestion-configuration",children:"Ingestion Configuration"}),"\n",(0,i.jsx)(e.p,{children:"Ingestion configuration in Unstructured.io allows you to customize the data ingestion process to suit your specific requirements. Key configuration aspects include:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Batch Size"}),": Specifies the number of records to process in each batch, balancing throughput and performance."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Schedule"}),": Defines the frequency of data ingestion, such as hourly, daily, or real-time ingestion."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Error Handling"}),": Configures how the system handles errors during ingestion, including retry policies and logging mechanisms."]}),"\n"]}),"\n",(0,i.jsxs)(e.p,{children:["Click ",(0,i.jsx)(e.a,{href:"https://docs.unstructured.io/api-reference/ingest/ingest-configuration/overview",children:"here"})," to learn more about ingestion configuration."]})]})}function f(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(g,{...n})}):g(n)}},28453:(n,e,r)=>{r.d(e,{R:()=>s,x:()=>a});var t=r(96540);const i={},o=t.createContext(i);function s(n){const e=t.useContext(o);return t.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:s(n.components),t.createElement(o.Provider,{value:e},n.children)}}}]);
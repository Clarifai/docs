"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[1662],{85162:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(67294),r=n(86010);const i={tabItem:"tabItem_Ymn6"};function o(e){let{children:t,hidden:n,className:o}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(i.tabItem,o),hidden:n},t)}},74866:(e,t,n)=>{n.d(t,{Z:()=>w});var a=n(87462),r=n(67294),i=n(86010),o=n(12466),l=n(16550),s=n(91980),u=n(67392),c=n(50012);function d(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function m(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??d(n);return function(e){const t=(0,u.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function p(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function h(e){let{queryString:t=!1,groupId:n}=e;const a=(0,l.k6)(),i=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,s._X)(i),(0,r.useCallback)((e=>{if(!i)return;const t=new URLSearchParams(a.location.search);t.set(i,e),a.replace({...a.location,search:t.toString()})}),[i,a])]}function b(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,i=m(e),[o,l]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!p({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:i}))),[s,u]=h({queryString:n,groupId:a}),[d,b]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,i]=(0,c.Nk)(n);return[a,(0,r.useCallback)((e=>{n&&i.set(e)}),[n,i])]}({groupId:a}),f=(()=>{const e=s??d;return p({value:e,tabValues:i})?e:null})();(0,r.useLayoutEffect)((()=>{f&&l(f)}),[f]);return{selectedValue:o,selectValue:(0,r.useCallback)((e=>{if(!p({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);l(e),u(e),b(e)}),[u,b,i]),tabValues:i}}var f=n(72389);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function k(e){let{className:t,block:n,selectedValue:l,selectValue:s,tabValues:u}=e;const c=[],{blockElementScrollPositionUntilNextRender:d}=(0,o.o5)(),m=e=>{const t=e.currentTarget,n=c.indexOf(t),a=u[n].value;a!==l&&(d(t),s(a))},p=e=>{let t=null;switch(e.key){case"Enter":m(e);break;case"ArrowRight":{const n=c.indexOf(e.currentTarget)+1;t=c[n]??c[0];break}case"ArrowLeft":{const n=c.indexOf(e.currentTarget)-1;t=c[n]??c[c.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":n},t)},u.map((e=>{let{value:t,label:n,attributes:o}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:l===t?0:-1,"aria-selected":l===t,key:t,ref:e=>c.push(e),onKeyDown:p,onClick:m},o,{className:(0,i.Z)("tabs__item",g.tabItem,o?.className,{"tabs__item--active":l===t})}),n??t)})))}function y(e){let{lazy:t,children:n,selectedValue:a}=e;const i=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=i.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},i.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function v(e){const t=b(e);return r.createElement("div",{className:(0,i.Z)("tabs-container",g.tabList)},r.createElement(k,(0,a.Z)({},e,t)),r.createElement(y,(0,a.Z)({},e,t)))}function w(e){const t=(0,f.Z)();return r.createElement(v,(0,a.Z)({key:String(t)},e))}},75916:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>d,default:()=>g,frontMatter:()=>c,metadata:()=>m,toc:()=>h});var a=n(87462),r=(n(67294),n(3905)),i=n(74866),o=n(85162),l=n(90814);const s="#################################################################################################\n# In this section, we set the user authentication, user and app ID, model ID, and the text\n# we want to use to create embeddings. Change these strings to run your own example.\n#################################################################################################\n\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = 'YOUR_PAT_HERE'\n# Specify the correct user_id/app_id pairings\n# Since you're making inferences outside your app's scope\nUSER_ID = 'cohere'\nAPP_ID = 'embed'\n# Change these to whatever model and text you want to use\nMODEL_ID = 'cohere-text-to-embeddings'\n# Optionally, you can provide a specific model version as the model_version_id arg\n# MODEL_VERSION_ID = 'MODEL_VERSION_ID'\nRAW_TEXT = 'This is a test document.'\n\n############################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n############################################################################\n\n# Import the required modules\nfrom langchain.embeddings import ClarifaiEmbeddings\nfrom langchain.prompts import PromptTemplate\nfrom langchain.chains import LLMChain\n\n# Create a prompt template to be used with the LLM Chain\ntemplate = \"\"\"Question: {question}\n\n Answer: Let's think step by step.\"\"\"\n\nprompt = PromptTemplate(template=template, input_variables=[\"question\"])\n\n# Initialize a Clarifai embedding model\nembeddings = ClarifaiEmbeddings(pat=PAT, user_id=USER_ID, app_id=APP_ID, model_id=MODEL_ID)\ntext = RAW_TEXT\n\n# Call out to Clarifai\u2019s embedding models\nquery_result = embeddings.embed_query(text)\ndoc_result = embeddings.embed_documents([text])\n\nprint(doc_result)\n",u="[[0.011901138350367546, -0.0018139687599614263, 0.04467465728521347, 0.002624698681756854, -0.013935787603259087, 0.014636959880590439, -0.009134014137089252, -0.006088299211114645, 0.04409869387745857, 0.016928289085626602, -0.04154442623257637, 0.02621881477534771, 0.002706084633246064, 0.02434067614376545, 0.025442516431212425, 0.024741346016526222, 0.014236290007829666, -0.017328958958387375, 0.03465791791677475, -0.008501707576215267, -0.008389018476009369, 0.04304693639278412, 0.011137361638247967, -0.0028359892312437296, 0.044198859483003616, 0.03222885727882385, 0.11178680509328842, 0.006260461639612913, 0.05464131012558937, -0.048255641013383865, 0.015838967636227608, 0.014474187977612019, -0.010486273095011711, 0.026444191113114357, 0.0177922323346138, -0.007155708037316799, 0.022600267082452774, -0.007750451564788818, 0.04560120403766632, -0.015776364132761955, 0.02719544619321823, -0.023238833993673325, 0.017391562461853027, 0.02273799665272236, -0.04955781623721123, -0.021974220871925354, 0.0004237550019752234, -0.03493337705731392, 0.02902350015938282, -0.03383153676986694, 0.011500468477606773, 0.002729561412706971, 0.04710371419787407, -0.004579527769237757, 0.006548442877829075, -0.005919266492128372, -0.04407365247607231, -0.0205718781799078, -0.0037562770303338766, 0.002648175461217761, 0.02499176375567913, -0.02002095617353916, -0.01592661440372467, -0.03833906725049019, -0.013910746201872826, -0.00522435549646616, 0.0442739874124527, -0.002508880104869604, -0.01747920922935009, 0.03899015486240387, 0.026068562641739845, 0.03926561772823334, -0.013835621066391468, 0.0052431365475058556, 0.05524231493473053, -0.09290525317192078, -0.050158821046352386, -0.0010666261659935117, 0.0024744474794715643, -0.07297194004058838, 0.027546031400561333, 0.050409238785505295, 0.012170338071882725, -0.042946767061948776, 0.008057214319705963, -0.015212922357022762, 0.046302374452352524, -0.03708697482943535, 0.0010869726538658142, 0.02964954636991024, -0.0271203201264143, -0.023652024567127228, 0.043873317539691925, -0.24120306968688965, -0.034182120114564896, 0.03348094969987869, -0.02626889757812023, 0.002706084633246064, -0.00639506196603179, -0.022324806079268456, 0.042295679450035095, 0.037988483905792236, 0.023526815697550774, 0.04547599330544472, -0.005621894728392363, 0.03000013343989849, 0.05035915598273277, 0.0076502845622599125, -0.035784799605607986, -0.01754181459546089, -0.005258787889033556, -0.044198859483003616, -0.014173685573041439, 0.03648597002029419, 0.0012771341716870666, 0.04657783731818199, 0.008846032433211803, 0.02844753861427307, 0.04985831677913666, -0.00010437363380333409, 0.0707181766629219, -0.02157355099916458, -0.03195339813828468, 0.027220487594604492, -0.021698759868741035, -0.006992935668677092, 0.00811981875449419, -0.013685369864106178, 0.01652761921286583, -0.012896551750600338, 0.01046123169362545, -0.02779645100235939, -0.03585992380976677, 0.009171576239168644, -0.01059896219521761, 0.008814730681478977, 0.018818948417901993, 0.00451692333444953, 0.06395687907934189, 0.028147036209702492, -0.025968395173549652, 0.028222162276506424, 0.02032145857810974, -0.013184532523155212, 0.010423668660223484, -0.047279007732868195, -0.019783059135079384, 0.022299764677882195, -0.03403187170624733, 0.059449344873428345, 0.010699129663407803, -0.00813860073685646, -0.03618546947836876, -0.010166989639401436, 0.01279012393206358, 0.009440775960683823, 0.013309741392731667, -0.03974141180515289, -0.000802121649030596, 0.023000936955213547, 0.013760494999587536, 0.02616873010993004, -0.026669567450881004, -0.017028456553816795, 0.011669500730931759, -0.04840588942170143, -0.00748125184327364, -0.005396517924964428, -0.046076998114585876, -0.02686990238726139, -0.08714562654495239, 0.013535118661820889, -0.047880012542009354, 0.012364411726593971, 0.00983518548309803, 0.03894007205963135, 0.03395674377679825, -0.017116103321313858, -0.00250418484210968, -0.007550117094069719, 0.05213712528347969, 0.0020831685978919268, -0.05208704248070717, -0.03267960995435715, 0.01496250368654728, -0.052637964487075806, -0.055743150413036346, -0.03318044915795326, -0.006942851934581995, 0.007731670513749123, 0.05183662474155426, 0.00018155339057557285, -0.06205369904637337, 0.03463287651538849, 0.052888382226228714, 0.0037030631210654974, 0.030425844714045525, -0.005484164692461491, 0.018030129373073578, 0.016627786681056023, 0.0063512385822832584, 0.02997509203851223, -0.03518379479646683, -0.03896511346101761, 0.017667023465037346, 0.031677935272455215, 0.018618613481521606, -0.022687913849949837, 0.03706193342804909, -0.0177922323346138, -0.00639506196603179, -0.03693672642111778, 0.008514228276908398, -0.03984157741069794, 0.0026794776786118746, -0.043547771871089935, -0.04875647649168968, -0.00984770618379116, -0.019895747303962708, 0.0003108710516244173, 0.01838071644306183, -0.037262268364429474, -0.05153612047433853, 0.013284699991345406, 0.029248878359794617, -0.0093906931579113, 0.008914897218346596, 0.03703689202666283, -0.0005700932815670967, -0.010699129663407803, -0.009396953508257866, 0.009396953508257866, -0.02684486098587513, -0.04590170457959175, 0.01809273473918438, -0.027220487594604492, 0.033556073904037476, -0.049783192574977875, -0.02686990238726139, -0.04274643212556839, 0.02752098999917507, 0.0174416471272707, 0.009922832250595093, -0.010098124854266644, 0.025154534727334976, 0.023589421063661575, -0.02469126135110855, 0.05684499442577362, 0.010536356829106808, 0.00234610796906054, -0.0026544358115643263, -0.01108727790415287, -0.005424689967185259, -0.002749907784163952, 0.009459557943046093, 0.04407365247607231, 0.02058439888060093, 0.010367324575781822, 0.04875647649168968, 0.024253029376268387, -0.013059323653578758, -0.013071844354271889, -0.019795579835772514, -0.02616873010993004, 0.0667615681886673, -0.04046762362122536, -0.030976764857769012, -0.01434897817671299, 0.034758083522319794, -0.021335653960704803, 0.03778814896941185, -0.015413257293403149, 0.05594348534941673, 0.0523875430226326, 0.003853314323350787, -0.013860662467777729, 0.049783192574977875, 0.008939939551055431, -0.009760060347616673, 0.010192031972110271, -0.025342348963022232, 0.04454944655299187, 0.0019548290874809027, 0.014636959880590439, -0.0023492383770644665, -0.06485838443040848, -0.02494167909026146, -0.011819751933217049, -0.03405691310763359, 0.013059323653578758, 0.019182054325938225, -0.014399061910808086, 0.04004191234707832, 0.07833089679479599, -0.05799691751599312, 0.013384867459535599, 0.04905697703361511, 0.010267157107591629, 0.006473317742347717, -0.027070237323641777, -0.05278821289539337, 0.04174476116895676, 0.02032145857810974, -0.00438232347369194, -0.0929553359746933, -0.018831469118595123, -0.012821425683796406, 0.04454944655299187, 0.029874924570322037, -0.012270505540072918, -0.0069303312338888645, 0.035784799605607986, -0.04500019922852516, -0.013810578733682632, 0.022274723276495934, -0.05048436298966408, -0.03493337705731392, -0.022900769487023354, 0.0010760169243440032, 0.005430950783193111, 0.0190693661570549, -0.0073372614569962025, -0.0014876422937959433, -0.023601941764354706, 0.03027559258043766, -0.054491057991981506, -0.008633176796138287, 0.02962450496852398, 0.02059691958129406, -0.020396584644913673, 0.0088961161673069, 0.03410699591040611, -0.0174416471272707, 0.02397756837308407, 0.007838098332285881, 0.031677935272455215, -0.05534248426556587, -0.06185336410999298, 0.004742299672216177, 0.031402476131916046, -0.016139470040798187, -0.01994583196938038, -0.0055592902936041355, -0.006301154848188162, 0.00537460669875145, 0.030676262453198433, -0.016990892589092255, 0.024753866717219353, -0.01141282171010971, 0.030676262453198433, 0.03095172345638275, -0.02782149240374565, -0.013898225501179695, 0.06025068461894989, 0.0020816035103052855, 0.012070170603692532, -0.03465791791677475, 0.012921593151986599, -0.04454944655299187, -0.010999631136655807, 0.005208704154938459, -0.04314710199832916, -0.023226313292980194, -0.027596116065979004, -0.0015126840444281697, -0.011337696574628353, 0.02742082253098488, 0.0018217944307252765, 0.014136122539639473, -0.04149433970451355, 0.02089742198586464, -0.0027749496512115, -0.02962450496852398, 0.04434911161661148, 0.03746260330080986, -0.003649849211797118, -0.003609156236052513, 0.03796343877911568, 0.0016762386076152325, -0.03984157741069794, 0.012139035388827324, 0.02749594859778881, -0.009960394352674484, 0.014586876146495342, -0.020534314215183258, -0.00840780045837164, 0.008564312011003494, 0.02719544619321823, 0.029799798503518105, 0.02992500737309456, 0.009090190753340721, -0.019131971523165703, -0.018293069675564766, -0.005299481097608805, -0.022875728085637093, -0.026318982243537903, 0.03623555228114128, 0.013610243797302246, -0.07317227870225906, -0.013009239919483662, 0.025342348963022232, 0.044474322348833084, -0.006160294637084007, -0.027946701273322105, -0.06365637481212616, 0.008933679200708866, 0.05143595486879349, 0.027320655062794685, 0.03348094969987869, 0.0016433711862191558, 0.034132037311792374, 0.03383153676986694, 0.01652761921286583, 0.0048675090074539185, -0.01903180405497551, -0.05203695967793465, -0.02023381181061268, -0.005418429616838694, 0.04089333489537239, 0.005218095146119595, 0.05148603767156601, 0.01371041126549244, 0.03568463400006294, 0.00272799632512033, 0.007906963117420673, 0.064908467233181, 0.03555942326784134, 0.011312654241919518, 0.05394013971090317, 0.005784666631370783, -0.0337313674390316, -0.0537898875772953, -0.006188466679304838, 0.005036541726440191, -0.007318479940295219, -0.034858252853155136, -0.03157776966691017, 0.021035151556134224, -0.016690392047166824, -0.05188670754432678, -0.027971742674708366, -0.02500428445637226, -0.0011996609391644597, 0.03989166393876076, -0.01250214222818613, -0.013635286130011082, -0.006038215477019548, -0.03848931938409805, -0.01235189102590084, -0.021686239168047905, -0.018894074484705925, 0.029424170032143593, 0.010686608031392097, -0.04377314820885658, 0.018217943608760834, -0.021623635664582253, 0.04377314820885658, 0.023226313292980194, -0.05719557777047157, 0.03057609498500824, 0.007255875039845705, -0.02812199480831623, 0.02807191014289856, -0.048806559294462204, -0.02430311217904091, 0.08389018476009369, -0.03147760033607483, 0.014223769307136536, -0.03866461291909218, 0.012702477164566517, -0.015112754888832569, 0.004792383406311274, 0.008820991031825542, 0.023501774296164513, 0.004498141817748547, -0.011744626797735691, 0.004253983963280916, -0.032930027693510056, -0.017980046570301056, -0.04610203951597214, -0.030125342309474945, 0.017116103321313858, -0.015989219769835472, -0.00438232347369194, 0.047003548592329025, 0.028172077611088753, 0.033906660974025726, -0.015162838622927666, -0.0019235268700867891, -0.0059975222684443, 0.025530163198709488, -0.00342760281637311, 0.0330301970243454, -0.0074937730096280575, 0.01714114472270012, 0.016314763575792313, -0.0362856350839138, 0.02752098999917507, -0.0006890420918352902, -0.003271091263741255, -0.01528804749250412, 0.053539469838142395, -0.023339001461863518, -0.01563863269984722, 0.01690324768424034, -0.02594335377216339, -0.004645262844860554, -0.02717040479183197, -0.01031098049134016, -0.05654449015855789, 0.005412169266492128, -0.0036216771695762873, 0.07853123545646667, 0.002850075252354145, -0.038564443588256836, 0.04329735413193703, -0.021122798323631287, 0.020734649151563644, 0.05894850939512253, 0.008295112289488316, -0.019532641395926476, 0.03598513454198837, -0.015713758766651154, -0.0036341981031000614, -0.005208704154938459, -0.018017608672380447, 0.020471710711717606, 0.012214161455631256, -0.08213725686073303, 0.0013608678709715605, -0.003997304942458868, 0.05769641697406769, 0.012909072451293468, -0.04680321365594864, 0.020797254517674446, 0.0549418143928051, -0.021999262273311615, -0.0018452710937708616, 0.037287309765815735, 0.04019216448068619, -0.02404017373919487, -0.01091198530048132, 0.03255440294742584, -0.0016465014778077602, 0.0018546618521213531, -0.04495011642575264, -0.02656939998269081, 0.010417408309876919, -0.004648393020033836, -0.013998392969369888, 0.013184532523155212, 0.008795948699116707, 0.024440843611955643, 0.04625229164958, 0.06155285984277725, 0.036736391484737396, -0.02714536152780056, -0.04244593158364296, -0.026970069855451584, -0.018931636586785316, 0.029574422165751457, 0.00903384666889906, -0.014311416074633598, -0.02308858372271061, 0.027671242132782936, -0.01621459610760212, -0.022637829184532166, -0.00028172077145427465, 0.018568530678749084, -0.008357716724276543, -0.02812199480831623, 0.025717977434396744, 0.0022036826703697443, 0.08839771896600723, -0.01628972217440605, -0.014712085016071796, 0.026118647307157516, -0.009159055538475513, 0.015087712556123734, 0.019895747303962708, 0.051636289805173874, -0.024253029376268387, -0.0068677267991006374, -0.018643654882907867, 0.054491057991981506, -0.0009406344033777714, 0.007230833172798157, 0.02437823824584484, -0.0013546074042096734, 0.027871575206518173, -0.032278940081596375, -2.0863110421487363e-06, -0.013459992595016956, 0.054140474647283554, 0.013647806830704212, 0.01838071644306183, 0.011869835667312145, 0.014461666345596313, 0.004973936825990677, -0.00922165997326374, 0.013860662467777729, -0.00362480734474957, -0.0031615332700312138, 0.009234181605279446, 0.004798643756657839, 0.004228942096233368, -0.04878151789307594, 0.020371543243527412, -0.04334743693470955, 0.01806769333779812, 0.03000013343989849, -0.01903180405497551, 0.027345696464180946, -0.04159450903534889, 0.009616069495677948, 0.03608530014753342, 0.03280482068657875, -0.011838532984256744, 0.012489621527493, -0.056344155222177505, -0.020985068753361702, -0.04557616263628006, -0.04735413193702698, 0.033230531960725784, -0.04457448795437813, -0.018969198688864708, -0.013121928088366985, -0.0010235855588689446, -0.018944157287478447, 0.06115218997001648, 0.01746668852865696, 0.019219618290662766, 0.013222095556557178, 0.08018399775028229, 0.015100234188139439, -0.06415721029043198, 0.030826514586806297, -0.017066018655896187, 0.015162838622927666, -0.030425844714045525, -0.013685369864106178, 0.048180513083934784, 0.021147839725017548, -0.027045195922255516, 0.007531335577368736, 0.008263809606432915, -0.009234181605279446, -0.018869031220674515, -0.010386106558144093, -0.006892768666148186, -0.003678021254017949, 0.015012587420642376, 0.012370673008263111, 0.020972546190023422, 0.01214529573917389, 0.004848727490752935, 0.03308027982711792, 0.01846836321055889, -0.01781727373600006, 0.031978439539670944, -0.004720387980341911, -0.008007130585610867, -0.04490003362298012, 0.021035151556134224, -0.01808021403849125, 0.014887378551065922, -0.046978507190942764, -0.033255573362112045, -0.02992500737309456, 0.005956829525530338, -0.0009915006812661886, -0.014837294816970825, -0.04279651865363121, 0.025104451924562454, 0.011043454520404339, -0.02752098999917507, -0.055142149329185486, -0.021335653960704803, -0.05454114452004433, 0.040768127888441086, 0.001882833894342184, -0.013272179290652275, -0.04344760626554489, -0.031026849523186684, -0.023339001461863518, -0.017892399802803993, -0.01776719093322754, 0.010836859233677387, -0.012527184560894966, -0.00033395650098100305, -0.027070237323641777, 0.0165150985121727, -0.02242497354745865, 0.015313089825212955, -0.005859792232513428, 0.011162403039634228, 0.018030129373073578, 0.0014172120718285441, -0.0023304568603634834, 0.010849379934370518, 0.027971742674708366, 0.021097756922245026, -0.0015463341260328889, 0.0442739874124527, 0.07332252711057663, -0.008345196023583412, 0.01777971163392067, 0.01560107059776783, 0.022600267082452774, 0.0037500166799873114, -0.029424170032143593, 0.008414060808718204, -0.017040977254509926, -0.006711215246468782, -0.013547639362514019, -0.01627720147371292, -0.008313893340528011, -0.03142751753330231, 0.03220381587743759, -0.025091931223869324, 0.0492573119699955, -0.06666139513254166, -0.00813233945518732, 0.011926179751753807, 0.026018479838967323, -0.012201639823615551, -0.00919661857187748, 0.07973324507474899, -0.008245028555393219, 0.006401322316378355, 0.024440843611955643, 0.02616873010993004, -0.0711689293384552, -0.010536356829106808, -0.008933679200708866, -0.06716223806142807, 0.03207860514521599, 0.02280060201883316, -0.01279012393206358, -0.0448499470949173, 0.0653592199087143, 0.02656939998269081, 0.052938465029001236, 0.06926575303077698, 0.05268804728984833, 0.0010267157340422273, -0.005274439230561256, -0.04840588942170143, 0.004792383406311274, -0.003997304942458868, 0.014073518104851246, 0.028973417356610298, -0.009083930402994156, -0.028222162276506424, 0.03458278998732567, 0.03984157741069794, -0.006861465983092785, -0.01839323714375496, 0.023188751190900803, -0.03425724804401398, -0.01722879149019718, -0.026018479838967323, 0.019219618290662766, 0.027946701273322105, 0.02087238058447838, 0.017692064866423607, 0.04705363139510155, -0.021623635664582253, 0.009259223006665707, 0.01402343437075615, -0.025743018835783005, -0.04247097298502922, -0.04079316928982735, 0.02686990238726139, 0.01591409370303154, 0.0022177686914801598, 0.00969745498150587, 0.022637829184532166, 0.039766453206539154, 0.017066018655896187, 0.0016355456318706274, 0.02028389647603035, 0.016490057110786438, 0.052938465029001236, 0.02869795635342598, -0.017992567270994186, -0.03748764470219612, -0.031127016991376877, 0.03613538667559624, -0.006085169035941362, -0.04209534451365471, -0.019419953227043152, 0.009741278365254402, -0.022975895553827286, -0.03553438186645508, 0.01714114472270012, -0.005030280910432339, -0.022074388340115547, 0.03348094969987869, 0.0227755606174469, 0.010592701844871044, 0.08193692564964294, -0.040492668747901917, 0.014762168750166893, -0.016339804977178574, 0.023802276700735092, -0.0574960820376873, 0.03716210275888443, 0.029474254697561264, -0.07247110456228256, 0.01751677133142948, 0.025442516431212425, 0.004892550874501467, -0.03192835673689842, 0.03693672642111778, 0.0151252755895257, -0.06385671347379684, -0.005675108637660742, 0.010724171064794064, 0.029524337500333786, -0.041694674640893936, -0.01513779629021883, 0.06601031124591827, 0.022237161174416542, 0.02560528926551342, -0.005972480401396751, 0.02397756837308407, 0.027220487594604492, 0.03252935782074928, -0.062254033982753754, 0.013860662467777729, -0.04715379700064659, -0.034232206642627716, 0.0012708737049251795, 0.007963307201862335, -0.003424472641199827, -0.02782149240374565, 0.020183729007840157, 0.053839970380067825, 0.0187187809497118, -0.010336022824048996, 0.015250485390424728, -0.009146534837782383, 0.01936986856162548, 0.025041846558451653, 0.05233746021986008, -0.020534314215183258, -0.029474254697561264, 0.013309741392731667, -0.02117288112640381, -0.05809708684682846, -0.02558024786412716, -0.018230464309453964, 0.05614382028579712, 0.05333913490176201, 0.0025401823222637177, 0.0119950445368886, -0.010292199440300465, -0.0015181619673967361, 0.01388570386916399, 0.0038720956072211266, 0.017316438257694244, -0.010536356829106808, 0.014474187977612019, 0.007888182066380978, 0.03523387759923935, 0.023176230490207672, 0.04895681142807007, -0.05649440735578537, -0.020834816619753838, 0.014636959880590439, 0.10217073559761047, -0.029874924570322037, -0.026318982243537903, 0.041043587028980255, 0.015463341027498245, -0.019745497032999992, -0.014937462285161018, 0.005947438534349203, 0.029824839904904366, -0.02812199480831623, 0.015613592229783535, 0.018793907016515732, -0.04715379700064659, -0.030125342309474945, 0.037938397377729416, -0.014674522913992405, -0.03222885727882385, -0.026995111256837845, -0.03398178517818451, -0.03340582549571991, 0.029874924570322037, -0.029198793694376945, 0.028572747483849525, 0.04174476116895676, 0.0008506402373313904, -0.05704532936215401, 0.048280682414770126, -0.03212869167327881, 0.012909072451293468, 0.05243762955069542, 0.015200401656329632, -0.007900702767074108, 0.019582724198698997, 0.01433645747601986, -0.0214984267950058, -0.028021827340126038, -0.03776310384273529, -0.020071040838956833, 0.00874586496502161, -0.01293411385267973, -0.07677830010652542, -0.014161164872348309, -0.03237910941243172, 0.03555942326784134, 0.027345696464180946, -0.03365624323487282, 0.0044167558662593365, 0.008395279757678509, 0.0227755606174469, 0.004247723147273064, -0.0010040216147899628, 0.01293411385267973, 0.025442516431212425, -0.005897355265915394, 0.01618955470621586, -0.01078677549958229, -0.05091007426381111, 0.04940756410360336, 0.021936658769845963, -0.015325610525906086, -0.006360629107803106, 0.05659457668662071, 0.03783823177218437, -0.013610243797302246, 0.04337247833609581, 0.009459557943046093, 0.03433237224817276, 0.056294072419404984, 0.021373216062784195, -0.005709541030228138, 0.01931978575885296, -0.052637964487075806, 0.012070170603692532, 0.022199597209692, 0.04737917333841324, 0.011788449250161648, -0.008858553133904934, -0.02554268389940262, 0.00041319048614241183, -0.04214542731642723, -0.023539336398243904, 0.01140030100941658, -0.03092668205499649, -0.021323133260011673, -0.028848208487033844, -0.051335785537958145, -0.00920913927257061, 0.017040977254509926, -0.03683655709028244, -0.0005685281939804554, -0.04870639368891716, -0.01782979443669319, -0.02874804101884365, -0.008414060808718204, -0.0088648134842515, 0.04099350422620773, 0.04685329645872116, -0.03425724804401398, -0.00811981875449419, -0.061052024364471436, 0.00670495443046093, 0.04940756410360336, -0.08198700845241547, -0.021936658769845963, -0.005430950783193111, 0.04775480180978775, 0.004970806650817394, 0.03428228944540024, 0.012552225962281227, 0.03483320772647858, 0.0025214010383933783, -0.006924070883542299, -0.020421626046299934, 0.019595244899392128, 0.0011808796552941203, 0.02867291495203972, 0.008670739829540253, -0.05474147945642471, 0.0034651656169444323, -0.020484231412410736, 0.004466839600354433, -0.005193053279072046, 0.05799691751599312, -0.040743086487054825, 0.055693067610263824, 0.03896511346101761, -0.0474042184650898, 0.015413257293403149, 0.030676262453198433, -0.005080364644527435, -0.007543856278061867, -0.040692999958992004, -0.0317530632019043, -0.010348543524742126, 0.03683655709028244, 0.030976764857769012, 0.0344325415790081, 0.00017949918401427567, 0.003875225782394409, -0.036736391484737396, 0.017066018655896187, 0.019419953227043152, -0.022900769487023354, -0.03583488240838051, 0.04154442623257637, -0.020146166905760765, -0.003915918990969658, -0.003671760903671384, 0.02649427391588688, 0.026719650253653526, 0.020045999437570572, -0.008032172918319702, 0.0010306285694241524]]\n",c={description:"Use Clarifai and LangChain to create text embeddings",sidebar_position:2},d="Text Embeddings",m={unversionedId:"integrations/langchain/text-embeddings",id:"integrations/langchain/text-embeddings",title:"Text Embeddings",description:"Use Clarifai and LangChain to create text embeddings",source:"@site/docs/integrations/langchain/text-embeddings.md",sourceDirName:"integrations/langchain",slug:"/integrations/langchain/text-embeddings",permalink:"/integrations/langchain/text-embeddings",draft:!1,editUrl:"https://github.com/Clarifai/docs/blob/main/docs/integrations/langchain/text-embeddings.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{description:"Use Clarifai and LangChain to create text embeddings",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"LLM Models",permalink:"/integrations/langchain/llm-models"},next:{title:"Vector Store",permalink:"/integrations/langchain/vector-store"}},p={},h=[{value:"Prerequisites",id:"prerequisites",level:3}],b={toc:h},f="wrapper";function g(e){let{components:t,...n}=e;return(0,r.kt)(f,(0,a.Z)({},b,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"text-embeddings"},"Text Embeddings"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Use Clarifai and LangChain to create text embeddings")),(0,r.kt)("hr",null),(0,r.kt)("p",null,"Embeddings create a vector representation of textual content. This is beneficial because it implies we can conceptualize text within a vector space, and facilitate tasks such as semantic search where we look for pieces of text that exhibit the highest similarity within that vector space. "),(0,r.kt)("p",null,"Let\u2019s illustrate how you can use LangChain to interact with Clarifai models and create text embeddings. "),(0,r.kt)("h3",{id:"prerequisites"},"Prerequisites"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Python development environment"),(0,r.kt)("li",{parentName:"ul"},"Get a PAT (Personal Access Token) from the Clarifai\u2019s portal under the ",(0,r.kt)("a",{parentName:"li",href:"https://clarifai.com/settings/security"},"Settings/Security")," section"),(0,r.kt)("li",{parentName:"ul"},"Get the ID of the user owning the model you want to use"),(0,r.kt)("li",{parentName:"ul"},"Get the ID of the app where the model is found"),(0,r.kt)("li",{parentName:"ul"},"Get the ID of the model you want to use. Text embedding models can be found ",(0,r.kt)("a",{parentName:"li",href:"https://clarifai.com/explore/models?page=1&perPage=24&filterData=%5B%7B%22field%22%3A%22model_type_id%22%2C%22value%22%3A%5B%22text-embedder%22%5D%7D%5D"},"here")),(0,r.kt)("li",{parentName:"ul"},"Install the ",(0,r.kt)("a",{parentName:"li",href:"https://docs.clarifai.com/python-sdk/sdk-overview"},"Clarifai Python SDK")," by running ",(0,r.kt)("inlineCode",{parentName:"li"},"pip install clarifai")),(0,r.kt)("li",{parentName:"ul"},"Install LangChain by running ",(0,r.kt)("inlineCode",{parentName:"li"},"pip install langchain"))),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"You can learn how to authenticate with the Clarifai platform ",(0,r.kt)("a",{parentName:"p",href:"https://docs.clarifai.com/clarifai-basics/authentication/personal-access-tokens"},"here"),".")),(0,r.kt)("p",null,"Here is how you can create text embeddings."),(0,r.kt)(i.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,r.kt)(l.Z,{className:"language-python",mdxType:"CodeBlock"},s))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Output Example"),(0,r.kt)(l.Z,{className:"language-text",mdxType:"CodeBlock"},u)),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"You can explore the ",(0,r.kt)("a",{parentName:"p",href:"https://python.langchain.com/docs/integrations/text_embedding/clarifai"},"LangChain documentation")," to learn more on how to use the framework with Clarifai for text embedding tasks.")))}g.isMDXComponent=!0}}]);
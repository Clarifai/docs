"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[3594],{58215:function(n,e,t){var a=t(67294);e.Z=function(n){var e=n.children,t=n.hidden,i=n.className;return a.createElement("div",{role:"tabpanel",hidden:t,className:i},e)}},26396:function(n,e,t){t.d(e,{Z:function(){return d}});var a=t(87462),i=t(67294),s=t(72389),o=t(79443);var r=function(){var n=(0,i.useContext)(o.Z);if(null==n)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return n},c=t(63616),l=t(86010),p="tabItem_vU9c";function u(n){var e,t,s,o=n.lazy,u=n.block,d=n.defaultValue,m=n.values,h=n.groupId,f=n.className,g=i.Children.map(n.children,(function(n){if((0,i.isValidElement)(n)&&void 0!==n.props.value)return n;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof n.type?n.type:n.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),_=null!=m?m:g.map((function(n){var e=n.props;return{value:e.value,label:e.label,attributes:e.attributes}})),E=(0,c.lx)(_,(function(n,e){return n.value===e.value}));if(E.length>0)throw new Error('Docusaurus error: Duplicate values "'+E.map((function(n){return n.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var b=null===d?d:null!=(e=null!=d?d:null==(t=g.find((function(n){return n.props.default})))?void 0:t.props.value)?e:null==(s=g[0])?void 0:s.props.value;if(null!==b&&!_.some((function(n){return n.value===b})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+b+'" but none of its children has the corresponding value. Available values are: '+_.map((function(n){return n.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var C=r(),v=C.tabGroupChoices,I=C.setTabGroupChoices,T=(0,i.useState)(b),w=T[0],A=T[1],P=[],O=(0,c.o5)().blockElementScrollPositionUntilNextRender;if(null!=h){var S=v[h];null!=S&&S!==w&&_.some((function(n){return n.value===S}))&&A(S)}var y=function(n){var e=n.currentTarget,t=P.indexOf(e),a=_[t].value;a!==w&&(O(e),A(a),null!=h&&I(h,a))},N=function(n){var e,t=null;switch(n.key){case"ArrowRight":var a=P.indexOf(n.currentTarget)+1;t=P[a]||P[0];break;case"ArrowLeft":var i=P.indexOf(n.currentTarget)-1;t=P[i]||P[P.length-1]}null==(e=t)||e.focus()};return i.createElement("div",{className:"tabs-container"},i.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":u},f)},_.map((function(n){var e=n.value,t=n.label,s=n.attributes;return i.createElement("li",(0,a.Z)({role:"tab",tabIndex:w===e?0:-1,"aria-selected":w===e,key:e,ref:function(n){return P.push(n)},onKeyDown:N,onFocus:y,onClick:y},s,{className:(0,l.Z)("tabs__item",p,null==s?void 0:s.className,{"tabs__item--active":w===e})}),null!=t?t:e)}))),o?(0,i.cloneElement)(g.filter((function(n){return n.props.value===w}))[0],{className:"margin-vert--md"}):i.createElement("div",{className:"margin-vert--md"},g.map((function(n,e){return(0,i.cloneElement)(n,{key:e,hidden:n.props.value!==w})}))))}function d(n){var e=(0,s.Z)();return i.createElement(u,(0,a.Z)({key:String(e)},n))}},29055:function(n,e,t){t.r(e),t.d(e,{contentTitle:function(){return u},default:function(){return f},frontMatter:function(){return p},metadata:function(){return d},toc:function(){return m}});var a=t(87462),i=t(63366),s=(t(67294),t(3905)),o=t(26396),r=t(58215),c=t(19055),l=["components"],p={description:"Multilingual predictions.",sidebar_position:5},u="Multilingual Classification",d={unversionedId:"api-guide/predict/multilingual-classification",id:"api-guide/predict/multilingual-classification",title:"Multilingual Classification",description:"Multilingual predictions.",source:"@site/docs/api-guide/predict/multilingual-classification.md",sourceDirName:"api-guide/predict",slug:"/api-guide/predict/multilingual-classification",permalink:"/api-guide/predict/multilingual-classification",tags:[],version:"current",sidebarPosition:5,frontMatter:{description:"Multilingual predictions.",sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Prediction Parameters",permalink:"/api-guide/predict/prediction-parameters"},next:{title:"Creating and Managing Concepts",permalink:"/api-guide/concepts/"}},m=[{value:"Predict By Specific Language",id:"predict-by-specific-language",children:[],level:2},{value:"Search Concepts in Languages",id:"search-concepts-in-languages",children:[],level:2}],h={toc:m};function f(n){var e=n.components,t=(0,i.Z)(n,l);return(0,s.kt)("wrapper",(0,a.Z)({},h,t,{components:e,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"multilingual-classification"},"Multilingual Classification"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Make multilingual predictions")),(0,s.kt)("hr",null),(0,s.kt)("p",null,"The Clarifai API supports ",(0,s.kt)("a",{parentName:"p",href:"https://docs.clarifai.com/api-guide/concepts/languages/"},"many languages in addition to English"),". When making a ",(0,s.kt)("a",{parentName:"p",href:"https://docs.clarifai.com/api-guide/predict/"},"predict api request"),", you can pass in the language you would like the concepts returned in. "),(0,s.kt)("p",null,"When you create a new Application, you must specify a default language which will be the language of the returned concepts if not specified in the predict request."),(0,s.kt)("h2",{id:"predict-by-specific-language"},"Predict By Specific Language"),(0,s.kt)("p",null,"You can predict concepts in a language other than the Application's default, by explicitly passing in the language. "),(0,s.kt)("p",null,"Below is an example of how you would predict concepts in Chinese."),(0,s.kt)("p",null,"Note that the initialization code used here is outlined in detail on the ",(0,s.kt)("a",{parentName:"p",href:"https://docs.clarifai.com/api-guide/api-overview/api-clients/#client-installation-instructions"},"client installation page.")),(0,s.kt)(o.Z,{mdxType:"Tabs"},(0,s.kt)(r.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,s.kt)(c.Z,{className:"language-python",mdxType:"CodeBlock"},"##############################################################################################\n# In this section, we set the user authentication, app and model IDs, url of the image\n# we want as an input, and prediction language. Change these strings to run your own example.\n##############################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to whatever you want to process\nMODEL_ID = 'general-image-recognition'\nIMAGE_URL = 'https://samples.clarifai.com/metro-north.jpg'\nPREDICT_LANGUAGE = \"zh\"  # Chinese\n\n############################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n############################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\npost_model_outputs_response = stub.PostModelOutputs(\n    service_pb2.PostModelOutputsRequest(\n        user_app_id=userDataObject,  # The userDataObject is created in the overview and is required when using a PAT\n        model_id=MODEL_ID,  \n        inputs=[\n            resources_pb2.Input(\n                data=resources_pb2.Data(\n                    image=resources_pb2.Image(\n                        url=IMAGE_URL\n                    )\n                )\n            )\n        ],\n        model=resources_pb2.Model(\n            output_info=resources_pb2.OutputInfo(\n                output_config=resources_pb2.OutputConfig(\n                    language=PREDICT_LANGUAGE\n                )\n            )\n        )\n    ),\n    metadata=metadata\n)\n\nif post_model_outputs_response.status.code != status_code_pb2.SUCCESS:\n    print(post_model_outputs_response.status)\n    raise Exception(\"Post model outputs failed, status: \" + post_model_outputs_response.status.description)\n\n# Since we have one input, one output will exist here.\noutput = post_model_outputs_response.outputs[0]\n\nprint(\"Predicted concepts:\")\nfor concept in output.data.concepts:\n    print(\"\\t%s %.2f\" % (concept.name, concept.value))\n\n# Uncomment this line to print the full Response JSON\n#print(output)")),(0,s.kt)(r.Z,{value:"js_rest",label:"JavaScript (REST)",mdxType:"TabItem"},(0,s.kt)(c.Z,{className:"language-javascript",mdxType:"CodeBlock"},'\x3c!--index.html file--\x3e\n\n<script>\n    //////////////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app and model IDs, url of the image\n    // we want as an input, and prediction language. Change these strings to run your own example.\n    /////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = \'YOUR_USER_ID_HERE\';\n    // Your PAT (Personal Access Token) can be found in the portal under Authentification\n    const PAT = \'YOUR_PAT_HERE\';\n    const APP_ID = \'YOUR_APP_ID_HERE\';\n    const MODEL_VERSION_ID = "YOUR_MODEL_VERSION_ID";\n    // Change these to whatever you want to process\n    const MODEL_ID = \'general-image-recognition\';\n    const IMAGE_URL = \'https://samples.clarifai.com/metro-north.jpg\';\n    const PREDICT_LANGUAGE = "zh";  // Chinese\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        "user_app_id": {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        "inputs": [\n            {\n                "data": {\n                    "image": {\n                        "url": IMAGE_URL\n                    }\n                }\n            }\n        ],\n        "model": {\n            "output_info": {\n                "output_config": {\n                    "language": PREDICT_LANGUAGE\n                }\n            }\n        }\n    });\n\n    const requestOptions = {\n        method: \'POST\',\n        headers: {\n            \'Accept\': \'application/json\',\n            \'Authorization\': \'Key \' + PAT\n        },\n        body: raw\n    };\n\n    // NOTE: MODEL_VERSION_ID is optional, you can also call prediction with the MODEL_ID only\n    // https://api.clarifai.com/v2/models/{YOUR_MODEL_ID}/outputs\n    // this will default to the latest version_id\n\n    fetch("https://api.clarifai.com/v2/models/" + MODEL_ID + "/versions/" + MODEL_VERSION_ID + "/outputs", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log(\'error\', error));\n<\/script>')),(0,s.kt)(r.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,s.kt)(c.Z,{className:"language-javascript",mdxType:"CodeBlock"},'//index.js file\n\n////////////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app and model IDs, url of the image\n// we want as an input, and prediction language. Change these strings to run your own example.\n///////////////////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n// Change these to whatever you want to process\nconst MODEL_ID = \'YOUR_MODEL_ID_HERE\';\nconst IMAGE_URL = \'https://samples.clarifai.com/metro-north.jpg\';\nconst PREDICT_LANGUAGE = "zh";  // Chinese\n\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PostModelOutputs(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        model_id: MODEL_ID, // This is model ID of the clarifai/main General model.\n        inputs: [\n            { data: { image: { url: IMAGE_URL, allow_duplicate_url: true } } }\n        ],\n        model: { output_info: { output_config: { language: PREDICT_LANGUAGE } } }\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post model outputs failed, status: " + response.status.description);\n        }\n\n        // Since we have one input, one output will exist here.\n        const output = response.outputs[0];\n\n        console.log("Predicted concepts:");\n        for (const concept of output.data.concepts) {\n            console.log(concept.name + " " + concept.value);\n        }\n    }\n\n);')),(0,s.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,s.kt)(c.Z,{className:"language-java",mdxType:"CodeBlock"},'package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\t\n\t/////////////////////////////////////////////////////////////////////////////////////////////////\n\t// In this section, we set the user authentication, app and model IDs, url of the image\n\t// we want as an input, and prediction language. Change these strings to run your own example.\n\t////////////////////////////////////////////////////////////////////////////////////////////////\n\t\n        static final String USER_ID = "YOUR_USER_ID_HERE";\n        //Your PAT (Personal Access Token) can be found in the portal under Authentication\n        static final String PAT = "YOUR_PAT_HERE";\n        static final String APP_ID = "YOUR_APP_ID_HERE";\t\n        // Change these to whatever you want to process\n        static final String MODEL_ID = "general-image-recognition";\n        static final String IMAGE_URL = "https://samples.clarifai.com/metro-north.jpg";\n        static final String PREDICT_LANGUAGE = "zh"; // Chinese\n\t\t\n\t///////////////////////////////////////////////////////////////////////////////////\n\t// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n\t///////////////////////////////////////////////////////////////////////////////////\t\n\n\tpublic static void main(String[] args) {\n\t\t\n\t\tV2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n\t\t\t \xa0 \xa0.withCallCredentials(new ClarifaiCallCredentials(PAT));\t\n\t\t\n\t\tMultiOutputResponse postModelOutputsResponse = stub.postModelOutputs(\n\t\t \xa0 \xa0PostModelOutputsRequest.newBuilder()\n\t\t \xa0 \xa0 \xa0 \xa0.setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\t\n\t\t \xa0 \xa0 \xa0 \xa0.setModelId(MODEL_ID) \xa0// This is model ID of the publicly available General model\n\t\t \xa0 \xa0 \xa0 \xa0.addInputs(\n\t\t \xa0 \xa0 \xa0 \xa0 \xa0 \xa0Input.newBuilder().setData(\n\t\t \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0Data.newBuilder().setImage(\n\t\t \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0Image.newBuilder().setUrl(IMAGE_URL)\n\t\t \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0)\n\t\t \xa0 \xa0 \xa0 \xa0 \xa0 \xa0)\n\t\t \xa0 \xa0 \xa0 \xa0)\n\t\t \xa0 \xa0 \xa0 \xa0.setModel(\n\t\t \xa0 \xa0 \xa0 \xa0 \xa0 \xa0Model.newBuilder().setOutputInfo(\n\t\t \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0OutputInfo.newBuilder().setOutputConfig(\n\t\t \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0OutputConfig.newBuilder().setLanguage(PREDICT_LANGUAGE) \xa0\n\t\t \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0)\n\t\t \xa0 \xa0 \xa0 \xa0 \xa0 \xa0)\n\t\t \xa0 \xa0 \xa0 \xa0)\n\t\t \xa0 \xa0 \xa0 \xa0.build()\n\t\t);\n\n\t\tif (postModelOutputsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n\t\t \xa0throw new RuntimeException("Post model outputs failed, status: " + postModelOutputsResponse.getStatus());\n\t\t}\n\n\t\t// Since we have one input, one output will exist here\n\t\tOutput output = postModelOutputsResponse.getOutputs(0);\n\n\t\tSystem.out.println("Predicted concepts:");\n\t\tfor (Concept concept : output.getData().getConceptsList()) {\n\t\t \xa0 \xa0System.out.printf("%s %.2f%n", concept.getName(), concept.getValue());\n\t\t}\t\n\n\t}\n\t\n}')),(0,s.kt)(r.Z,{value:"php",label:"PHP",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n# Insert here the initialization code as outlined on this page:\n# https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\n///////////////////////////////////////////////////////////////////////////////\n// Specifying the Request Data\n///////////////////////////////////////////////////////////////////////////////\n//\n// In the Clarifai platform an image is defined by a special Image object.\n// There are several ways in which an Image object can be populated including\n// by url and image bytes (base64).\n//\n$image = new Image([\n    'url' => 'https://samples.clarifai.com/dog2.jpeg'\n]);\n\n//\n// After an Image object is created, a Data object is constructed around it.\n// The Data object offers a container that contains additional image independent\n// metadata.  In this particular use case, no other metadata is needed to be\n// specified.\n//\n$data = new Data([\n    'image' => $image\n]);\n\n//\n// The Data object is then wrapped in an Input object in order to meet the\n// API specification.  Additional fields are available to populate in the Input\n// object, but for the purposes of this example we can send in just the\n// Data object.\n//\n$input = new Input([\n    'data' => $data\n]);\n\n///////////////////////////////////////////////////////////////////////////////\n// Specifying Output Configuration \n///////////////////////////////////////////////////////////////////////////////\n//\n// Output configuration can be specified by the OutputConfig object.\n//\n$outputConfig = new OutputConfig([\n    'language' => 'zh' // Chinese\n])\n\n//\n// The OutputInfo object is a wrapper around the OutputConfig object\n// \n$outputInfo = new OutputInfo([\n    'output_config' => $outputConfig\n])\n\n//\n// The model object is a wrapper around the OutputInfo object.  This is the\n// final part needed to define an output configuration.\n//\n$model = new Model([\n    'output_info' => $outputInfo\n]);\n\n///////////////////////////////////////////////////////////////////////////////\n// Creating the request object \n///////////////////////////////////////////////////////////////////////////////\n//\n// Finally, the request object itself is created.  This object carries the request\n// along with the request status and other metadata related to the request itself.\n// In this example we populate:\n//    - the `user_app_id` field with the UserAppIDSet constructed above\n//    - the `model_id` field with the ID of the model we are referencing\n//    - the `inputs` field with an array of input objects constructed above \n//    - the `model` field with the output configuration specified above\n//\n$request = new PostModelOutputsRequest([\n    'user_app_id' => $userDataObject, // This is defined above\n    'model_id' => 'aaa03c23b3724a16a56b629203edc62c',  // This is the ID of the publicly available General model.\n    'inputs' => [$input],\n    'model' => $model\n]);\n\n///////////////////////////////////////////////////////////////////////////////\n// Making the RPC Call\n///////////////////////////////////////////////////////////////////////////////\n//\n// Once the request object is constructed, we can call the actual request to the\n// Clarifai platform.  This uses the opened gRPC client channel to communicate the\n// request and then wait for the response.\n//\n[$response, $status] = $client->PostModelOutputs(\n    $request,\n    $metadata\n)->wait();\n\n///////////////////////////////////////////////////////////////////////////////\n// Handling the Response\n///////////////////////////////////////////////////////////////////////////////\n//\n// The response is returned and the first thing we do is check the status of it.\n// A successful response will have a status code of 0, otherwise there is some \n// reported error.\n//\nif ($status->code !== 0) throw new Exception(\"Error: {$status->details}\");\n\n//\n// In addition to the RPC response status, there is a Clarifai API status that\n// reports if the operationo was a success or failure (not just that the commuunication)\n// was successful.\n//\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    throw new Exception(\"Failure response: \" . $response->getStatus()->getDescription() . \" \" .\n        $response->getStatus()->getDetails());\n}\n\n//\n// The output of a successful call can be used in many ways.  In this example,\n// we loop through all of the predicted concepts and print them out along with\n// their numerical prediction value (confidence).\n//\necho \"Predicted concepts:\\n\";\nforeach ($response->getOutputs()[0]->getData()->getConcepts() as $concept) {\n    echo $concept->getName() . \": \" . number_format($concept->getValue(), 2) . \"\\n\";\n}\n?>\n"))),(0,s.kt)(r.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'\n  {\n  "inputs": [\n    {\n      "data": {\n        "image": {\n          "url": "https://samples.clarifai.com/metro-north.jpg"\n        }\n      }\n    }\n  ],\n  "model":{\n    "output_info":{\n      "output_config":{\n        "language":"zh"\n      }\n    }\n  }\n}\'\\\n  https://api.clarifai.com/v2/models/aaa03c23b3724a16a56b629203edc62c/outputs\n\n# Above is model ID of the publicly available General model.\n')))),(0,s.kt)("details",null,(0,s.kt)("summary",null,"Code Output Example"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},"Predicted concepts:\n    \u94c1\u8def\u5217\u8f66 1.00\n    \u94c1\u8def 1.00\n    \u5730\u94c1 1.00\n    \u7ad9 1.00\n    \u706b\u8f66 1.00\n    \u8fd0\u8f93\u7cfb\u7edf 1.00\n    \u65c5\u6e38 0.99\n    \u901a\u52e4 0.98\n    \u5e73\u53f0 0.98\n    \u5149 0.97\n    \u94c1\u8def\u8f66\u7ad9 0.97\n    \u6a21\u7173 0.97\n    \u57ce\u5e02 0.96\n    \u9a6c\u8def 0.96\n    \u57ce\u5e02\u7684 0.96\n    \u4ea4\u901a 0.96\n    \u8857\u9053 0.95\n    \u516c\u5171 0.93\n    \u6709\u8f68\u7535\u8f66\uff08\u5de5\u4e1a\uff09 0.93\n    \u5546\u4e1a 0.93\n"))),(0,s.kt)("details",null,(0,s.kt)("summary",null,"JSON Output Example"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},'id: "778a108718564b3cb1b0afe01c538f39"\nstatus {\n  code: SUCCESS\n  description: "Ok"\n}\ncreated_at {\n  seconds: 1643812243\n  nanos: 518818153\n}\nmodel {\n  id: "general-image-recognition"\n  name: "general"\n  created_at {\n    seconds: 1457543499\n    nanos: 608845000\n  }\n  app_id: "main"\n  output_info {\n    output_config {\n    }\n    message: "Show output_info with: GET /models/{model_id}/output_info"\n    fields_map {\n      fields {\n        key: "concepts"\n        value {\n          string_value: "softmax"\n        }\n      }\n    }\n  }\n  model_version {\n    id: "aa7f35c01e0642fda5cf400f543e7c40"\n    created_at {\n      seconds: 1520370624\n      nanos: 454834000\n    }\n    status {\n      code: MODEL_TRAINED\n      description: "Model is trained and ready"\n    }\n    visibility {\n      gettable: PUBLIC\n    }\n    app_id: "main"\n    user_id: "clarifai"\n    metadata {\n    }\n  }\n  display_name: "general-visual-classifier"\n  user_id: "clarifai"\n  input_info {\n    fields_map {\n      fields {\n        key: "image"\n        value {\n          string_value: "images"\n        }\n      }\n    }\n  }\n  train_info {\n  }\n  model_type_id: "visual-classifier"\n  visibility {\n    gettable: PUBLIC\n  }\n  description: "Image recognition model for identifying different concepts in images and video including objects, themes, moods, and more."\n  metadata {\n  }\n  notes: "**General Information**\\n\\n- Purpose: Classifier for a variety of concepts, common objects, etc. This model is a great all-purpose solution for most visual recognition needs with industry-leading performance.\\n\\n- Architecture: Customized InceptionV2\\n\\n- Intended Use: image indexing by tags, filtering, cascade routing\\n\\n- Limitations: works well when content is prevalent in the image\\n\\n\\n\\n **\\nTraining/Test Data**\\n\\nThe model was trained and tested on an internal dataset with approximately 10,000 concepts and 20M images, with multiple concepts per image. The class distributions on train and validation sets are long-tailed. The validation set was annotated using a combination of originally curated labels \nwith incomplete annotations, where were further completed by adding additional labels proposed a newer version of this model (aa7f35c01e0642fda5cf400f543e7c40) at a low threshold and verified by human annotators. "\n  modified_at {\n    seconds: 1634831222\n    nanos: 80260000\n  }\n  import_info {\n  }\n}\ninput {\n  id: "9d3583dff67a41b9825edff444f93fcd"\n  data {\n    image {\n      url: "https://samples.clarifai.com/metro-north.jpg"\n    }\n  }\n}\ndata {\n  concepts {\n    id: "ai_HLmqFqBf"\n    name: "\\351\\223\\201\\350\\267\\257\\345\\210\\227\\350\\275\\246"\n    value: 0.9996053576469421\n    app_id: "main"\n  }\n  concepts {\n    id: "ai_fvlBqXZR"\n    name: "\\351\\223\\201\\350\\267\\257"\n    value: 0.9992986917495728\n    app_id: "main"\n  }\n  concepts {\n    id: "ai_SHNDcmJ3"\n    name: "\\345\\234\\260\\351\\223\\201"\n    value: 0.9982514977455139\n    app_id: "main"\n  }\n  concepts {\n    id: "ai_6kTjGfF6"\n    name: "\\347\\253\\231"\n    value: 0.9980105757713318\n    app_id: "main"\n  }\n  concepts {\n    id: "ai_RRXLczch"\n    name: "\\347\\201\\253\\350\\275\\246"\n    value: 0.9972571730613708\n    app_id: "main"\n  }\n  concepts {\n    id: "ai_Xxjc3MhT"\n    name: "\\350\\277\\220\\350\\276\\223\\347\\263\\273\\347\\273\\237"\n    value: 0.9969801306724548\n    app_id: "main"\n  }\n  concepts {\n    id: "ai_VRmbGVWh"\n    name: "\\346\\227\\205\\346\\270\\270"\n    value: 0.988979697227478\n    app_id: "main"\n  }\n  concepts {\n    id: "ai_jlb9q33b"\n    name: "\\351\\200\\232\\345\\213\\244"\n    value: 0.9808752536773682\n    app_id: "main"\n  }\n  concepts {\n    id: "ai_2gkfMDsM"\n    name: "\\345\\271\\263\\345\\217\\260"\n    value: 0.9806439876556396\n    app_id: "main"\n  }\n  concepts {\n    id: "ai_n9vjC1jB"\n    name: "\\345\\205\\211"\n    value: 0.9742040634155273\n    app_id: "main"\n  }\n  concepts {\n    id: "ai_sQQj52KZ"\n    name: "\\351\\223\\201\\350\\267\\257\\350\\275\\246\\347\\253\\231"\n    value: 0.9687402844429016\n    app_id: "main"\n  }\n  concepts {\n    id: "ai_l4WckcJN"\n    name: "\\346\\250\\241\\347\\205\\263"\n    value: 0.9672204256057739\n    app_id: "main"\n  }\n  concepts {\n    id: "ai_WBQfVV0p"\n    name: "\\345\\237\\216\\345\\270\\202"\n    value: 0.9614799618721008\n    app_id: "main"\n  }\n  concepts {\n    id: "ai_TZ3C79C6"\n    name: "\\351\\251\\254\\350\\267\\257"\n    value: 0.9613829851150513\n    app_id: "main"\n  }\n  concepts {\n    id: "ai_CpFBRWzD"\n    name: "\\345\\237\\216\\345\\270\\202\\347\\232\\204"\n    value: 0.9603424668312073\n    app_id: "main"\n  }\n  concepts {\n    id: "ai_tr0MBp64"\n    name: "\\344\\272\\244\\351\\200\\232"\n    value: 0.9599347710609436\n    app_id: "main"\n  }\n  concepts {\n    id: "ai_GjVpxXrs"\n    name: "\\350\\241\\227\\351\\201\\223"\n    value: 0.9474143981933594\n    app_id: "main"\n  }\n  concepts {\n    id: "ai_mcSHVRfS"\n    name: "\\345\\205\\254\\345\\205\\261"\n    value: 0.9343124032020569\n    app_id: "main"\n  }\n  concepts {\n    id: "ai_J6d1kV8t"\n    name: "\\346\\234\\211\\350\\275\\250\\347\\224\\265\\350\\275\\246\\357\\274\\210\\345\\267\\245\\344\\270\\232\\357\\274\\211"\n    value: 0.931897759437561\n    app_id: "main"\n  }\n  concepts {\n    id: "ai_6lhccv44"\n    name: "\\345\\225\\206\\344\\270\\232"\n    value: 0.9294139742851257\n    app_id: "main"\n  }\n}\n'))),(0,s.kt)("h2",{id:"search-concepts-in-languages"},"Search Concepts in Languages"),(0,s.kt)("p",null,"You can search for concepts in other languages even if the default language of your application is English. When you add inputs to your application, concepts are predicted for every language. "),(0,s.kt)("p",null,"Below is an example of how your would search for '\u4eba', which is simplified Chinese for 'people'."),(0,s.kt)("p",null,"Note that the initialization code used here is outlined in detail on the ",(0,s.kt)("a",{parentName:"p",href:"https://docs.clarifai.com/api-guide/api-overview/api-clients/#client-installation-instructions"},"client installation page.")),(0,s.kt)(o.Z,{mdxType:"Tabs"},(0,s.kt)(r.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,s.kt)(c.Z,{className:"language-python",mdxType:"CodeBlock"},"##########################################################################################\n# In this section, we set the user authentication, app ID, and concept name and language.\n# Change these strings to run your own example.\n##########################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to whatever you want to process\nCONCEPT_NAME = '\u4eba'\nCONCEPT_LANGUAGE = \"zh\"  # Chinese\n\n############################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n############################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\npost_concepts_searches_response = stub.PostConceptsSearches(\n    service_pb2.PostConceptsSearchesRequest(\n        user_app_id=userDataObject,  # The userDataObject is created in the overview and is required when using a PAT\n        concept_query=resources_pb2.ConceptQuery(\n            name=CONCEPT_NAME,\n            language=CONCEPT_LANGUAGE\n        )\n    ),\n    metadata=metadata\n)\n\nif post_model_outputs_response.status.code != status_code_pb2.SUCCESS:\n    print(post_model_outputs_response.status)\n    raise Exception(\"Post model outputs failed, status: \" + post_model_outputs_response.status.description)\n\nprint(\"Found concepts:\")\nfor concept in post_concepts_searches_response.concepts:\n    print(\"\\t%s %.2f\" % (concept.name, concept.value))\n\n# Uncomment this line to print the full Response JSON\n#print(output)")),(0,s.kt)(r.Z,{value:"js_rest",label:"JavaScript (REST)",mdxType:"TabItem"},(0,s.kt)(c.Z,{className:"language-javascript",mdxType:"CodeBlock"},'\x3c!--index.html file--\x3e\n\n<script>\n    ///////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and concept name and language.\n    // Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = \'YOUR_USER_ID_HERE\';\n    // Your PAT (Personal Access Token) can be found in the portal under Authentification\n    const PAT = \'YOUR_PAT_HERE\';\n    const APP_ID = \'YOUR_APP_ID_HERE\';\n    // Change these to whatever you want to process\n    const CONCEPT_NAME = \'\u4eba\';\n    const CONCEPT_LANGUAGE = "zh"; // Chinese\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        "user_app_id": {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        "query": {\n            "ands": [\n                {\n                    "output": {\n                        "data": {\n                            "concepts": [\n                                {\n                                    "name": CONCEPT_NAME\n                                }\n                            ]\n                        }\n                    }\n                }\n            ],\n            "language": CONCEPT_LANGUAGE\n        }\n    });\n\n    const requestOptions = {\n        method: \'POST\',\n        headers: {\n            \'Accept\': \'application/json\',\n            \'Authorization\': \'Key \' + PAT\n        },\n        body: raw\n    };\n\n    fetch("https://api.clarifai.com/v2/searches", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log(\'error\', error));\n<\/script>')),(0,s.kt)(r.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,s.kt)(c.Z,{className:"language-javascript",mdxType:"CodeBlock"},'//index.js file\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and concept name and language.\n// Change these strings to run your own example.\n///////////////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n// Change these to whatever you want to process\nconst CONCEPT_NAME = \'\u4eba\';\nconst CONCEPT_LANGUAGE = "zh"; // Chinese\n\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PostConceptsSearches(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        concept_query: { name: CONCEPT_NAME, language: CONCEPT_LANGUAGE }\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post concepts searches failed, status: " + response.status.description);\n        }\n\n        console.log("Found concepts:");\n        for (const concept of response.concepts) {\n            console.log("\\t" + concept.name + " " + concept.value);\n        }\n    }\n\n);')),(0,s.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,s.kt)(c.Z,{className:"language-java",mdxType:"CodeBlock"},'package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\t\n\t//////////////////////////////////////////////////////////////////////////////////////////////\n\t// In this section, we set the user authentication, app ID, and concept name and language.\n\t// Change these strings to run your own example.\n\t/////////////////////////////////////////////////////////////////////////////////////////////\t\n\n        static final String USER_ID = "YOUR_USER_ID_HERE";\n        //Your PAT (Personal Access Token) can be found in the portal under Authentication\n        static final String PAT = "YOUR_PAT_HERE";\n        static final String APP_ID = "YOUR_APP_ID_HERE";\t\n        // Change these to whatever you want to process\n        static final String CONCEPT_NAME = "\u4eba";\n        static final String CONCEPT_LANGUAGE = "zh"; // Chinese\n\t\t\n\t///////////////////////////////////////////////////////////////////////////////////\n\t// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n\t///////////////////////////////////////////////////////////////////////////////////\t\n\n\tpublic static void main(String[] args) {\n\t\t\n\t\tV2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n\t\t\t \xa0 \xa0.withCallCredentials(new ClarifaiCallCredentials(PAT));\t\n\t\t\n\t\tMultiConceptResponse postConceptsSearchesResponse = stub.postConceptsSearches(\n\t\t \xa0 \xa0PostConceptsSearchesRequest.newBuilder()\n\t\t \xa0 \xa0\t.setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n\t\t \xa0 \xa0 \xa0 \xa0.setConceptQuery(\n\t\t \xa0 \xa0 \xa0 \xa0 \xa0 \xa0ConceptQuery.newBuilder()\n\t\t \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0.setName(CONCEPT_NAME)\n\t\t \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0.setLanguage(CONCEPT_LANGUAGE)\n\t\t \xa0 \xa0 \xa0 \xa0)\n\t\t \xa0 \xa0 \xa0 \xa0.build()\n\t\t);\n\n\t\tif (postConceptsSearchesResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n\t\t \xa0throw new RuntimeException("Post concepts searches failed, status: " + postConceptsSearchesResponse.getStatus());\n\t\t}\n\n\t\tSystem.out.println("Found concepts:");\n\t\tfor (Concept concept : postConceptsSearchesResponse.getConceptsList()) {\n\t\t \xa0 \xa0System.out.printf("\\t%s %.2f%n", concept.getName(), concept.getValue());\n\t\t}\n\n\t}\n\t\n}')),(0,s.kt)(r.Z,{value:"php",label:"PHP",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},'<?php\n# Insert here the initialization code as outlined on this page:\n# https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\n\n///////////////////////////////////////////////////////////////////////////////\n// Specifying Concept Search Parameters \n///////////////////////////////////////////////////////////////////////////////\n//\n// The ConceptQuery object contains the concept restrictions for the search. \n//\n$conceptQuery = new ConceptQuery([\n    \'name\' => "\u4eba",\n    \'language\' => "zh"\n])\n\n///////////////////////////////////////////////////////////////////////////////\n// Creating the request object \n///////////////////////////////////////////////////////////////////////////////\n//\n// Finally, the request object itself is created.  This object carries the request\n// along with the request status and other metadata related to the request itself.\n// In this example we populate:\n//    - the `user_app_id` field with the UserAppIDSet constructed above\n//    - the `concept_query` field contains the search restrictions above\n//\n$request = new PostConceptsSearches([\n    \'user_app_id\' => $userDataObject, // This is defined above\n    \'concept_query\' => $conceptQuery\n]);\n\n///////////////////////////////////////////////////////////////////////////////\n// Making the RPC Call\n///////////////////////////////////////////////////////////////////////////////\n//\n// Once the request object is constructed, we can call the actual request to the\n// Clarifai platform.  This uses the opened gRPC client channel to communicate the\n// request and then wait for the response.\n//\n[$response, $status] = $client->PostConceptsSearches(\n    $request,\n    $metadata\n)->wait();\n\n///////////////////////////////////////////////////////////////////////////////\n// Handling the Response\n///////////////////////////////////////////////////////////////////////////////\n//\n// The response is returned and the first thing we do is check the status of it.\n// A successful response will have a status code of 0, otherwise there is some \n// reported error.\n//\nif ($status->code !== 0) throw new Exception("Error: {$status->details}");\n\n//\n// In addition to the RPC response status, there is a Clarifai API status that\n// reports if the operationo was a success or failure (not just that the commuunication)\n// was successful.\n//\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription() . " " .\n        $response->getStatus()->getDetails());\n}\n\n//\n// The output of a successful call can be used in many ways.  In this example,\n// we loop through all of the predicted concepts and print them out along with\n// their numerical prediction value (confidence).\n//\necho "Predicted concepts:\\n";\nforeach ($response->getConcepts() as $concept) {\n    echo $concept->getName() . ": " . number_format($concept->getValue(), 2) . "\\n";\n}\n?>\n'))),(0,s.kt)(r.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'\n  {\n    "query": {\n      "ands": [\n        {\n          "output": {\n            "data": {\n              "concepts": [\n                {\n                  "name": "\u4eba"\n                }\n              ]\n            }\n          }\n        }\n      ],\n      "language": "zh"\n    }\n  }\'\\\n  https://api.clarifai.com/v2/searches\n')))),(0,s.kt)("details",null,(0,s.kt)("summary",null,"Code Output Example"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},"Found concepts:\n    \u4eba 1.00\n    \u4eba 1.00\n"))),(0,s.kt)("details",null,(0,s.kt)("summary",null,"Code Output Example"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},'id: "ca0c4b59c97840578fbe826664476fcb"\nstatus {\n  code: SUCCESS\n  description: "Ok"\n}\ncreated_at {\n  seconds: 1643811840\n  nanos: 183608592\n}\nmodel {\n  id: "general-image-recognition"\n  name: "general"\n  created_at {\n    seconds: 1457543499\n    nanos: 608845000\n  }\n  app_id: "main"\n  output_info {\n    output_config {\n    }\n    message: "Show output_info with: GET /models/{model_id}/output_info"\n    fields_map {\n      fields {\n        key: "concepts"\n        value {\n          string_value: "softmax"\n        }\n      }\n    }\n  }\n  model_version {\n    id: "aa7f35c01e0642fda5cf400f543e7c40"\n    created_at {\n      seconds: 1520370624\n      nanos: 454834000\n    }\n    status {\n      code: MODEL_TRAINED\n      description: "Model is trained and ready"\n    }\n    visibility {\n      gettable: PUBLIC\n    }\n    app_id: "main"\n    user_id: "clarifai"\n    metadata {\n    }\n  }\n  display_name: "general-visual-classifier"\n  user_id: "clarifai"\n  input_info {\n    fields_map {\n      fields {\n        key: "image"\n        value {\n          string_value: "images"\n        }\n      }\n    }\n  }\n  train_info {\n  }\n  model_type_id: "visual-classifier"\n  visibility {\n    gettable: PUBLIC\n  }\n  description: "Image recognition model for identifying different concepts in images and video including objects, themes, moods, and more."\n  metadata {\n  }\n  notes: "**General Information**\\n\\n- Purpose: Classifier for a variety of concepts, common objects, etc. This model is a great all-purpose solution for most visual recognition needs with industry-leading performance.\\n\\n- Architecture: Customized InceptionV2\\n\\n- Intended Use: image indexing by tags, filtering, cascade routing\\n\\n- Limitations: works well when content is prevalent in the image\\n\\n\\n\\n **\\nTraining/Test Data**\\n\\nThe model was trained and tested on an internal dataset with approximately 10,000 concepts and 20M images, with multiple concepts per image. The class distributions on train and validation sets are long-tailed. The validation set was annotated using a combination of originally curated labels with incomplete annotations, where were further completed by adding additional labels proposed a newer version of this model (aa7f35c01e0642fda5cf400f543e7c40) at a low threshold and verified by human annotators. "\n  modified_at {\n    seconds: 1634831222\n    nanos: 80260000\n  }\n  import_info {\n  }\n}\ninput {\n  id: "08f57897f43f4a32bf4665df16f96de7"\n  data {\n    image {\n      url: "https://samples.clarifai.com/metro-north.jpg"\n    }\n  }\n}\ndata {\n  concepts {\n    id: "ai_HLmqFqBf"\n    name: "\\351\\223\\201\\350\\267\\257\\345\\210\\227\\350\\275\\246"\n    value: 0.9996053576469421\n    app_id: "main"\n  }\n  concepts {\n    id: "ai_fvlBqXZR"\n    name: "\\351\\223\\201\\350\\267\\257"\n    value: 0.9992986917495728\n    app_id: "main"\n  }\n  concepts {\n    id: "ai_SHNDcmJ3"\n    name: "\\345\\234\\260\\351\\223\\201"\n    value: 0.9982514977455139\n    app_id: "main"\n  }\n  concepts {\n    id: "ai_6kTjGfF6"\n    name: "\\347\\253\\231"\n    value: 0.9980105757713318\n    app_id: "main"\n  }\n  concepts {\n    id: "ai_RRXLczch"\n    name: "\\347\\201\\253\\350\\275\\246"\n    value: 0.9972571730613708\n    app_id: "main"\n  }\n  concepts {\n    id: "ai_Xxjc3MhT"\n    name: "\\350\\277\\220\\350\\276\\223\\347\\263\\273\\347\\273\\237"\n    value: 0.9969801306724548\n    app_id: "main"\n  }\n  concepts {\n    id: "ai_VRmbGVWh"\n    name: "\\346\\227\\205\\346\\270\\270"\n    value: 0.988979697227478\n    app_id: "main"\n  }\n  concepts {\n    id: "ai_jlb9q33b"\n    name: "\\351\\200\\232\\345\\213\\244"\n    value: 0.9808752536773682\n    app_id: "main"\n  }\n  concepts {\n    id: "ai_2gkfMDsM"\n    name: "\\345\\271\\263\\345\\217\\260"\n    value: 0.9806439876556396\n    app_id: "main"\n  }\n  concepts {\n    id: "ai_n9vjC1jB"\n    name: "\\345\\205\\211"\n    value: 0.9742040634155273\n    app_id: "main"\n  }\n  concepts {\n    id: "ai_sQQj52KZ"\n    name: "\\351\\223\\201\\350\\267\\257\\350\\275\\246\\347\\253\\231"\n    value: 0.9687402844429016\n    app_id: "main"\n  }\n  concepts {\n    id: "ai_l4WckcJN"\n    name: "\\346\\250\\241\\347\\205\\263"\n    value: 0.9672204256057739\n    app_id: "main"\n  }\n  concepts {\n    id: "ai_WBQfVV0p"\n    name: "\\345\\237\\216\\345\\270\\202"\n    value: 0.9614799618721008\n    app_id: "main"\n  }\n  concepts {\n    id: "ai_TZ3C79C6"\n    name: "\\351\\251\\254\\350\\267\\257"\n    value: 0.9613829851150513\n    app_id: "main"\n  }\n  concepts {\n    id: "ai_CpFBRWzD"\n    name: "\\345\\237\\216\\345\\270\\202\\347\\232\\204"\n    value: 0.9603424668312073\n    app_id: "main"\n  }\n  concepts {\n    id: "ai_tr0MBp64"\n    name: "\\344\\272\\244\\351\\200\\232"\n    value: 0.9599347710609436\n    app_id: "main"\n  }\n  concepts {\n    id: "ai_GjVpxXrs"\n    name: "\\350\\241\\227\\351\\201\\223"\n    value: 0.9474143981933594\n    app_id: "main"\n  }\n  concepts {\n    id: "ai_mcSHVRfS"\n    name: "\\345\\205\\254\\345\\205\\261"\n    value: 0.9343124032020569\n    app_id: "main"\n  }\n  concepts {\n    id: "ai_J6d1kV8t"\n    name: "\\346\\234\\211\\350\\275\\250\\347\\224\\265\\350\\275\\246\\357\\274\\210\\345\\267\\245\\344\\270\\232\\357\\274\\211"\n    value: 0.931897759437561\n    app_id: "main"\n  }\n  concepts {\n    id: "ai_6lhccv44"\n    name: "\\345\\225\\206\\344\\270\\232"\n    value: 0.9294139742851257\n    app_id: "main"\n  }\n}\n'))))}f.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[2962],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>_});var l=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function n(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,l)}return a}function p(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?n(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):n(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,l,r=function(e,t){if(null==e)return{};var a,l,r={},n=Object.keys(e);for(l=0;l<n.length;l++)a=n[l],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(l=0;l<n.length;l++)a=n[l],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=l.createContext({}),s=function(e){var t=l.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):p(p({},t),e)),a},u=function(e){var t=s(e.components);return l.createElement(o.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},k=l.forwardRef((function(e,t){var a=e.components,r=e.mdxType,n=e.originalType,o=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=s(a),k=r,_=d["".concat(o,".").concat(k)]||d[k]||m[k]||n;return a?l.createElement(_,p(p({ref:t},u),{},{components:a})):l.createElement(_,p({ref:t},u))}));function _(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var n=a.length,p=new Array(n);p[0]=k;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i[d]="string"==typeof e?e:r,p[1]=i;for(var s=2;s<n;s++)p[s]=a[s];return l.createElement.apply(null,p)}return l.createElement.apply(null,a)}k.displayName="MDXCreateElement"},25624:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>p,default:()=>m,frontMatter:()=>n,metadata:()=>i,toc:()=>s});var l=a(87462),r=(a(67294),a(3905));const n={description:"Clarifai Python SDK API Reference",sidebar_position:3},p="API Reference",i={unversionedId:"python-sdk/api-reference",id:"python-sdk/api-reference",title:"API Reference",description:"Clarifai Python SDK API Reference",source:"@site/docs/python-sdk/api-reference.md",sourceDirName:"python-sdk",slug:"/python-sdk/api-reference",permalink:"/python-sdk/api-reference",draft:!1,editUrl:"https://github.com/Clarifai/docs/blob/main/docs/python-sdk/api-reference.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{description:"Clarifai Python SDK API Reference",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Tutorial",permalink:"/python-sdk/tutorial"},next:{title:"SDK Notebook Examples",permalink:"/python-sdk/notebook-examples"}},o={},s=[{value:"User",id:"user",level:2},{value:"User.__init__()",id:"user__init__",level:3},{value:"Parameters",id:"parameters",level:4},{value:"User.app()",id:"userapp",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns",level:4},{value:"Return type",id:"return-type",level:4},{value:"Example",id:"example",level:4},{value:"User.create_app()",id:"usercreate_app",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-1",level:4},{value:"Return type",id:"return-type-1",level:4},{value:"Example",id:"example-1",level:4},{value:"User.create_runner()",id:"usercreate_runner",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"Returns",id:"returns-2",level:4},{value:"Return type",id:"return-type-2",level:4},{value:"Example",id:"example-2",level:4},{value:"User.delete_app()",id:"userdelete_app",level:3},{value:"Parameters",id:"parameters-4",level:4},{value:"Return type",id:"return-type-3",level:4},{value:"Example",id:"example-3",level:4},{value:"User.delete_runner()",id:"userdelete_runner",level:3},{value:"Parameters",id:"parameters-5",level:4},{value:"Example",id:"example-4",level:4},{value:"User.list_apps()",id:"userlist_apps",level:3},{value:"Parameters",id:"parameters-6",level:4},{value:"Returns",id:"returns-3",level:4},{value:"Return type",id:"return-type-4",level:4},{value:"Example",id:"example-5",level:4},{value:"User.list_runners()",id:"userlist_runners",level:3},{value:"Parameters",id:"parameters-7",level:4},{value:"Returns",id:"returns-4",level:4},{value:"Return type",id:"return-type-5",level:4},{value:"Example",id:"example-6",level:4},{value:"User.runner()",id:"userrunner",level:3},{value:"Parameters",id:"parameters-8",level:4},{value:"Returns",id:"returns-5",level:4},{value:"Return type",id:"return-type-6",level:4},{value:"Example",id:"example-7",level:4},{value:"App",id:"app",level:2},{value:"App.__init__()",id:"app__init__",level:3},{value:"Parameters",id:"parameters-9",level:4},{value:"App.create_dataset()",id:"appcreate_dataset",level:3},{value:"Parameters",id:"parameters-10",level:4},{value:"Returns",id:"returns-6",level:4},{value:"Return type",id:"return-type-7",level:4},{value:"Example",id:"example-8",level:4},{value:"App.create_model()",id:"appcreate_model",level:3},{value:"Parameters",id:"parameters-11",level:4},{value:"Returns",id:"returns-7",level:4},{value:"Return type",id:"return-type-8",level:4},{value:"Example",id:"example-9",level:4},{value:"App.create_module()",id:"appcreate_module",level:3},{value:"Parameters",id:"parameters-12",level:4},{value:"Returns",id:"returns-8",level:4},{value:"Return type",id:"return-type-9",level:4},{value:"Example",id:"example-10",level:4},{value:"App.create_workflow()",id:"appcreate_workflow",level:3},{value:"Parameters",id:"parameters-13",level:4},{value:"Returns",id:"returns-9",level:4},{value:"Return type",id:"return-type-10",level:4},{value:"Example",id:"example-11",level:4},{value:"App.dataset()",id:"appdataset",level:3},{value:"Parameters",id:"parameters-14",level:4},{value:"Returns",id:"returns-10",level:4},{value:"Return type",id:"return-type-11",level:4},{value:"Example",id:"example-12",level:4},{value:"App.delete_dataset()",id:"appdelete_dataset",level:3},{value:"Parameters",id:"parameters-15",level:4},{value:"Example",id:"example-13",level:4},{value:"App.delete_model()",id:"appdelete_model",level:3},{value:"Parameters",id:"parameters-16",level:4},{value:"Example",id:"example-14",level:4},{value:"App.delete_module()",id:"appdelete_module",level:3},{value:"Parameters",id:"parameters-17",level:4},{value:"Example",id:"example-15",level:4},{value:"App.delete_workflow()",id:"appdelete_workflow",level:3},{value:"Parameters",id:"parameters-18",level:4},{value:"Example",id:"example-16",level:4},{value:"App.inputs()",id:"appinputs",level:3},{value:"Returns",id:"returns-11",level:4},{value:"Return type",id:"return-type-12",level:4},{value:"App.list_concepts()",id:"applist_concepts",level:3},{value:"App.list_datasets()",id:"applist_datasets",level:3},{value:"Returns",id:"returns-12",level:4},{value:"Return type",id:"return-type-13",level:4},{value:"Example",id:"example-17",level:4},{value:"App.list_installed_module_versions()",id:"applist_installed_module_versions",level:3},{value:"Parameters",id:"parameters-19",level:4},{value:"Returns",id:"returns-13",level:4},{value:"Return type",id:"return-type-14",level:4},{value:"Example",id:"example-18",level:4},{value:"App.list_models()",id:"applist_models",level:3},{value:"Parameters",id:"parameters-20",level:4},{value:"Returns",id:"returns-14",level:4},{value:"Return type",id:"return-type-15",level:4},{value:"Example",id:"example-19",level:4},{value:"App.list_modules()",id:"applist_modules",level:3},{value:"Parameters",id:"parameters-21",level:4},{value:"Returns",id:"returns-15",level:5},{value:"Return type",id:"return-type-16",level:5},{value:"Example",id:"example-20",level:4},{value:"App.list_workflows()",id:"applist_workflows",level:3},{value:"Parameters",id:"parameters-22",level:4},{value:"Returns",id:"returns-16",level:4},{value:"Return type",id:"return-type-17",level:4},{value:"Example",id:"example-21",level:4},{value:"App.model()",id:"appmodel",level:3},{value:"Parameters",id:"parameters-23",level:4},{value:"Returns",id:"returns-17",level:5},{value:"Return type",id:"return-type-18",level:4},{value:"Example",id:"example-22",level:4},{value:"App.module()",id:"appmodule",level:3},{value:"Parameters",id:"parameters-24",level:4},{value:"Returns",id:"returns-18",level:4},{value:"Return type",id:"return-type-19",level:4},{value:"Example",id:"example-23",level:4},{value:"App.workflow()",id:"appworkflow",level:3},{value:"Parameters",id:"parameters-25",level:4},{value:"Returns",id:"returns-19",level:4},{value:"Return type",id:"return-type-20",level:4},{value:"Example",id:"example-24",level:4},{value:"Dataset",id:"dataset",level:2},{value:"Dataset.__init__()",id:"dataset__init__",level:3},{value:"Parameters",id:"parameters-26",level:4},{value:"Dataset.export()",id:"datasetexport",level:3},{value:"Parameters",id:"parameters-27",level:4},{value:"Example",id:"example-25",level:4},{value:"Dataset.upload_dataset()",id:"datasetupload_dataset",level:3},{value:"Parameters",id:"parameters-28",level:4},{value:"Dataset.upload_from_csv()",id:"datasetupload_from_csv",level:3},{value:"Parameters",id:"parameters-29",level:4},{value:"Example",id:"example-26",level:4},{value:"Dataset.upload_from_folder()",id:"datasetupload_from_folder",level:3},{value:"Parameters",id:"parameters-30",level:4},{value:"Example",id:"example-27",level:4},{value:"Input",id:"input",level:2},{value:"Inputs.__init__()",id:"inputs__init__",level:3},{value:"Parameters",id:"parameters-31",level:4},{value:"Inputs.delete_inputs()",id:"inputsdelete_inputs",level:3},{value:"Parameters",id:"parameters-32",level:4},{value:"Example",id:"example-28",level:4},{value:"Inputs.get_annotation_proto()",id:"inputsget_annotation_proto",level:3},{value:"Parameters",id:"parameters-33",level:4},{value:"Returns",id:"returns-20",level:4},{value:"Example",id:"example-29",level:4},{value:"Inputs.get_image_inputs_from_folder()",id:"inputsget_image_inputs_from_folder",level:3},{value:"Parameters",id:"parameters-34",level:4},{value:"Returns",id:"returns-21",level:4},{value:"Return type",id:"return-type-21",level:4},{value:"Example",id:"example-30",level:4},{value:"Inputs.get_input_from_bytes()",id:"inputsget_input_from_bytes",level:3},{value:"Parameters",id:"parameters-35",level:4},{value:"Returns",id:"returns-22",level:4},{value:"Return type",id:"return-type-22",level:4},{value:"Example",id:"example-31",level:4},{value:"Inputs.get_input_from_file()",id:"inputsget_input_from_file",level:3},{value:"Parameters",id:"parameters-36",level:4},{value:"Returns",id:"returns-23",level:4},{value:"Return type",id:"return-type-23",level:4},{value:"Example",id:"example-32",level:4},{value:"Inputs.get_input_from_url()",id:"inputsget_input_from_url",level:3},{value:"Parameters",id:"parameters-37",level:4},{value:"Returns",id:"returns-24",level:4},{value:"Return type",id:"return-type-24",level:4},{value:"Example",id:"example-33",level:4},{value:"Inputs.get_inputs_from_csv()",id:"inputsget_inputs_from_csv",level:3},{value:"Parameters",id:"parameters-38",level:4},{value:"Returns",id:"returns-25",level:4},{value:"Return type",id:"return-type-25",level:4},{value:"Example",id:"example-34",level:4},{value:"Inputs.get_mask_proto()",id:"inputsget_mask_proto",level:3},{value:"Parameters",id:"parameters-39",level:4},{value:"Returns",id:"returns-26",level:4},{value:"Example",id:"example-35",level:4},{value:"Inputs.get_text_input()",id:"inputsget_text_input",level:3},{value:"Parameters",id:"parameters-40",level:4},{value:"Returns",id:"returns-27",level:4},{value:"Return type",id:"return-type-26",level:4},{value:"Example",id:"example-36",level:4},{value:"Inputs.get_text_inputs_from_folder()",id:"inputsget_text_inputs_from_folder",level:3},{value:"Parameters",id:"parameters-41",level:4},{value:"Returns",id:"returns-28",level:4},{value:"Return type",id:"return-type-27",level:4},{value:"Example",id:"example-37",level:4},{value:"Inputs.list_inputs()",id:"inputslist_inputs",level:3},{value:"Returns",id:"returns-29",level:4},{value:"Return type",id:"return-type-28",level:4},{value:"Example",id:"example-38",level:4},{value:"Inputs.upload_annotations()",id:"inputsupload_annotations",level:3},{value:"Parameters",id:"parameters-42",level:4},{value:"Returns",id:"returns-30",level:4},{value:"Return type",id:"return-type-29",level:4},{value:"Inputs.upload_from_bytes()",id:"inputsupload_from_bytes",level:3},{value:"Parameters",id:"parameters-43",level:4},{value:"Returns",id:"returns-31",level:4},{value:"Return type",id:"return-type-30",level:4},{value:"Example",id:"example-39",level:4},{value:"Inputs.upload_from_file()",id:"inputsupload_from_file",level:3},{value:"Parameters",id:"parameters-44",level:4},{value:"Returns",id:"returns-32",level:4},{value:"Return type",id:"return-type-31",level:4},{value:"Example",id:"example-40",level:4},{value:"Inputs.upload_from_url()",id:"inputsupload_from_url",level:3},{value:"Parameters",id:"parameters-45",level:4},{value:"Returns",id:"returns-33",level:4},{value:"Return type",id:"return-type-32",level:4},{value:"Example",id:"example-41",level:4},{value:"Inputs.upload_inputs()",id:"inputsupload_inputs",level:3},{value:"Parameters",id:"parameters-46",level:4},{value:"Returns",id:"returns-34",level:4},{value:"Return type",id:"return-type-33",level:4},{value:"Inputs.upload_text()",id:"inputsupload_text",level:3},{value:"Parameters",id:"parameters-47",level:4},{value:"Returns",id:"returns-35",level:4},{value:"Return type",id:"return-type-34",level:4},{value:"Example",id:"example-42",level:4},{value:"Lister",id:"lister",level:2},{value:"Lister.__init__()",id:"lister__init__",level:3},{value:"Lister.list_all_pages_generator()",id:"listerlist_all_pages_generator",level:3},{value:"Parameters",id:"parameters-48",level:4},{value:"Yields",id:"yields",level:4},{value:"Model",id:"model",level:2},{value:"Model.__init__()",id:"model__init__",level:3},{value:"Parameters",id:"parameters-49",level:4},{value:"Model.create_model_version()",id:"modelcreate_model_version",level:3},{value:"Returns",id:"returns-36",level:4},{value:"Return type",id:"return-type-35",level:4},{value:"Parameters",id:"parameters-50",level:4},{value:"Example",id:"example-43",level:4},{value:"Model.list_versions()",id:"modellist_versions",level:3},{value:"Returns",id:"returns-37",level:4},{value:"Return type",id:"return-type-36",level:4},{value:"Example",id:"example-44",level:4},{value:"Model.predict()",id:"modelpredict",level:3},{value:"Parameters",id:"parameters-51",level:4},{value:"Model.predict_by_bytes()",id:"modelpredict_by_bytes",level:3},{value:"Parameters",id:"parameters-52",level:4},{value:"Example",id:"example-45",level:4},{value:"Model.predict_by_filepath()",id:"modelpredict_by_filepath",level:3},{value:"Parameters",id:"parameters-53",level:4},{value:"Example",id:"example-46",level:4},{value:"Model.predict_by_url()",id:"modelpredict_by_url",level:3},{value:"Parameters",id:"parameters-54",level:4},{value:"Example",id:"example-47",level:4},{value:"Workflow",id:"workflow",level:2},{value:"Workflow.__init__()",id:"workflow__init__",level:3},{value:"Parameters",id:"parameters-55",level:4},{value:"Workflow.list_versions()",id:"workflowlist_versions",level:3},{value:"Returns",id:"returns-38",level:4},{value:"Return type",id:"return-type-37",level:4},{value:"Example",id:"example-48",level:4},{value:"Workflow.predict()",id:"workflowpredict",level:3},{value:"Parameters",id:"parameters-56",level:4},{value:"Workflow.predict_by_bytes()",id:"workflowpredict_by_bytes",level:3},{value:"Parameters",id:"parameters-57",level:4},{value:"Workflow.predict_by_filepath()",id:"workflowpredict_by_filepath",level:3},{value:"Parameters",id:"parameters-58",level:4},{value:"Example",id:"example-49",level:4},{value:"Workflow.predict_by_url()",id:"workflowpredict_by_url",level:3},{value:"Parameters",id:"parameters-59",level:4},{value:"Example",id:"example-50",level:4},{value:"Workflow.export()",id:"workflowexport",level:3},{value:"Parameters",id:"parameters-60",level:4},{value:"Example",id:"example-51",level:4},{value:"Module",id:"module",level:2},{value:"Module.__init__()",id:"module__init__",level:3},{value:"Parameters",id:"parameters-61",level:4},{value:"Module.list_versions()",id:"modulelist_versions",level:3},{value:"Returns",id:"returns-39",level:4},{value:"Return type",id:"return-type-38",level:4},{value:"Example",id:"example-52",level:4},{value:"Utils",id:"utils",level:2},{value:"Chunker.__init__()",id:"chunker__init__",level:3},{value:"Chunker.chunk()",id:"chunkerchunk",level:3},{value:"Exceptions",id:"exceptions",level:2},{value:"ApiError",id:"apierror",level:3},{value:"ApiClientError",id:"apiclienterror",level:3},{value:"UserError",id:"usererror",level:3}],u={toc:s},d="wrapper";function m(e){let{components:t,...a}=e;return(0,r.kt)(d,(0,l.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"api-reference"},"API Reference"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Clarifai Python SDK API Reference")),(0,r.kt)("hr",null),(0,r.kt)("p",null,"This is the API Reference documentation extracted from the source code."),(0,r.kt)("h2",{id:"user"},"User"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"}," class User(user_id='', **kwargs)\n")),(0,r.kt)("p",null,"User is a class that provides access to Clarifai API endpoints related to user information."),(0,r.kt)("h3",{id:"user__init__"},"User.","_","_init","_","_()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"__init__(user_id='', **kwargs)\n")),(0,r.kt)("p",null,"Initializes a ",(0,r.kt)("strong",{parentName:"p"},"User")," object."),(0,r.kt)("h4",{id:"parameters"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"user_id")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 The user ID for the user to interact with."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"*","*","kwargs")," \u2013 Additional keyword arguments to be passed to the ClarifaiAuthHelper.")),(0,r.kt)("h3",{id:"userapp"},"User.app()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"app(app_id, **kwargs)\n")),(0,r.kt)("p",null,"Returns an App object for the specified app ID."),(0,r.kt)("h4",{id:"parameters-1"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"app_id")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 The app ID for the app to interact with."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"*","*","kwargs")," \u2013 Additional keyword arguments to be passed to the App.")),(0,r.kt)("h4",{id:"returns"},"Returns"),(0,r.kt)("p",null,"An App object for the specified app ID."),(0,r.kt)("h4",{id:"return-type"},"Return type"),(0,r.kt)("p",null,"App"),(0,r.kt)("h4",{id:"example"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from clarifai.client.user import User\napp = User("user_id").app("app_id")\n')),(0,r.kt)("h3",{id:"usercreate_app"},"User.create_app()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"create_app(app_id, base_workflow='Language-Understanding', **kwargs)\n")),(0,r.kt)("p",null,"Creates an app for the user."),(0,r.kt)("h4",{id:"parameters-2"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"app_id")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 The app ID for the app to create."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"base_workflow")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 The base workflow to use for the app.(Examples: \u2018Universal\u2019, \u2018Empty\u2019, \u2018General\u2019)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"*","*","kwargs")," \u2013 Additional keyword arguments to be passed to the App.")),(0,r.kt)("h4",{id:"returns-1"},"Returns"),(0,r.kt)("p",null,"An App object for the specified app ID."),(0,r.kt)("h4",{id:"return-type-1"},"Return type"),(0,r.kt)("p",null,"App"),(0,r.kt)("h4",{id:"example-1"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from clarifai.client.user import User\nclient = User(user_id="user_id")\napp = client.create_app(app_id="app_id",base_workflow="Universal")\n')),(0,r.kt)("h3",{id:"usercreate_runner"},"User.create_runner()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"create_runner(runner_id, labels=List[str], description='')\n")),(0,r.kt)("p",null,"Creates a runner"),(0,r.kt)("h4",{id:"parameters-3"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"runner_id")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 The Id of runner to create."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"labels")," (",(0,r.kt)("em",{parentName:"li"},"List","[str]"),") \u2013 Labels to match runner."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"description (str)")," \u2013 Description of Runner.")),(0,r.kt)("h4",{id:"returns-2"},"Returns"),(0,r.kt)("p",null,"A runner object for the specified Runner ID."),(0,r.kt)("h4",{id:"return-type-2"},"Return type"),(0,r.kt)("p",null,"Runner"),(0,r.kt)("h4",{id:"example-2"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from clarifai.client.user import User\nclient = User(user_id="user_id")\nrunner = client.create_runner(runner_id="runner_id", labels=["label to link runner"], description="laptop runner")\n')),(0,r.kt)("h3",{id:"userdelete_app"},"User.delete_app()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"delete_app(app_id)\n")),(0,r.kt)("p",null,"Deletes an app for the user."),(0,r.kt)("h4",{id:"parameters-4"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"app_id")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 The app ID for the app to delete.")),(0,r.kt)("h4",{id:"return-type-3"},"Return type"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"None")),(0,r.kt)("h4",{id:"example-3"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from clarifai.client.user import User\nuser = User("user_id").delete_app("app_id")\n')),(0,r.kt)("h3",{id:"userdelete_runner"},"User.delete_runner()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"delete_runner(runner_id)\n")),(0,r.kt)("p",null,"Deletes all specified runner ids."),(0,r.kt)("h4",{id:"parameters-5"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"runner_ids (str)")," \u2013 List of runners to delete.")),(0,r.kt)("h4",{id:"example-4"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from clarifai.client.user import User\nclient = User(user_id="user_id")\nclient.delete_runner(runner_id="runner_id")\n')),(0,r.kt)("h3",{id:"userlist_apps"},"User.list_apps()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"list_apps(filter_by={})\n")),(0,r.kt)("p",null,"Lists all the apps for the user."),(0,r.kt)("h4",{id:"parameters-6"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"filter_by")," (",(0,r.kt)("em",{parentName:"li"},"dict"),") \u2013 A dictionary of filters to be applied to the list of apps.")),(0,r.kt)("h4",{id:"returns-3"},"Returns"),(0,r.kt)("p",null,"A list of App objects for the user."),(0,r.kt)("h4",{id:"return-type-4"},"Return type"),(0,r.kt)("p",null,"List of App"),(0,r.kt)("h4",{id:"example-5"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from clarifai.client.user import User\napps = User("user_id").list_apps()\n')),(0,r.kt)("h3",{id:"userlist_runners"},"User.list_runners()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"list_runners(filter_by={})\n")),(0,r.kt)("p",null,"List all runners for the user."),(0,r.kt)("h4",{id:"parameters-7"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"filter_by")," (",(0,r.kt)("em",{parentName:"li"},"dict"),") \u2013 A dictionary of filters to apply to the list of runners.")),(0,r.kt)("h4",{id:"returns-4"},"Returns"),(0,r.kt)("p",null,"A list of Runner objects for the runners."),(0,r.kt)("h4",{id:"return-type-5"},"Return type"),(0,r.kt)("p",null," List","[Runner]"),(0,r.kt)("h4",{id:"example-6"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from clarifai.client.user import User\nclient = User(user_id="user_id")\nall_runners= client.list_runners()\n')),(0,r.kt)("h3",{id:"userrunner"},"User.runner()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"runner(runner_id)\n")),(0,r.kt)("p",null,"Returns a Runner object if exists."),(0,r.kt)("h4",{id:"parameters-8"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"runner_id")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 The runner ID to interact with.")),(0,r.kt)("h4",{id:"returns-5"},"Returns"),(0,r.kt)("p",null,"A Runner object for the existing runner ID."),(0,r.kt)("h4",{id:"return-type-6"},"Return type"),(0,r.kt)("p",null,"Runner"),(0,r.kt)("h4",{id:"example-7"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from clarifai.client.user import User\nclient = User(user_id="user_id")\nrunner = client.runner(runner_id="runner_id")\n')),(0,r.kt)("h2",{id:"app"},"App"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class App(url_init='', app_id='', **kwargs)\n")),(0,r.kt)("p",null,"App is a class that provides access to Clarifai API endpoints related to App information."),(0,r.kt)("h3",{id:"app__init__"},"App.","_","_init","_","_()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"__init__(url_init='', app_id='', **kwargs)\n")),(0,r.kt)("p",null,"Initializes an App object."),(0,r.kt)("h4",{id:"parameters-9"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"url_init")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 The URL to initialize the app object."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"app_id")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 The App ID for the App to interact with."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"*","*","kwargs")," \u2013 Additional keyword arguments to be passed to the ClarifaiAuthHelper:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"name (str): The name of the app."),(0,r.kt)("li",{parentName:"ul"},"description (str): The description of the app.")))),(0,r.kt)("h3",{id:"appcreate_dataset"},"App.create_dataset()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"create_dataset(dataset_id, **kwargs)\n")),(0,r.kt)("p",null,"Creates a dataset for the app."),(0,r.kt)("h4",{id:"parameters-10"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"dataset_id")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 The dataset ID for the dataset to create."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"*","*","kwargs")," \u2013 Additional keyword arguments to be passed to the Dataset.")),(0,r.kt)("h4",{id:"returns-6"},"Returns"),(0,r.kt)("p",null,"  A Dataset object for the specified dataset ID."),(0,r.kt)("h4",{id:"return-type-7"},"Return type"),(0,r.kt)("p",null,"  Dataset"),(0,r.kt)("h4",{id:"example-8"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from clarifai.client.app import App\napp = App(app_id="app_id", user_id="user_id")\ndataset = app.create_dataset(dataset_id="dataset_id")\n')),(0,r.kt)("h3",{id:"appcreate_model"},"App.create_model()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"create_model(model_id, \\*\\*kwargs)\n")),(0,r.kt)("p",null,"Creates a model for the app."),(0,r.kt)("h4",{id:"parameters-11"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"model_id")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 The model ID for the model to create."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"*","*","kwargs")," \u2013 Additional keyword arguments to be passed to the Model.")),(0,r.kt)("h4",{id:"returns-7"},"Returns"),(0,r.kt)("p",null,"  A Model object for the specified model ID."),(0,r.kt)("h4",{id:"return-type-8"},"Return type"),(0,r.kt)("p",null,"Model"),(0,r.kt)("h4",{id:"example-9"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from clarifai.client.app import App\napp = App(app_id="app_id", user_id="user_id")\nmodel = app.create_model(model_id="model_id")\n')),(0,r.kt)("h3",{id:"appcreate_module"},"App.create_module()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"create_module(module_id, description, **kwargs)\n")),(0,r.kt)("p",null,"Creates a module for the app."),(0,r.kt)("h4",{id:"parameters-12"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"module_id")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 The module ID for the module to create."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"description")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 The description of the module to create."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"*","*","kwargs")," \u2013 Additional keyword arguments to be passed to the module.")),(0,r.kt)("h4",{id:"returns-8"},"Returns"),(0,r.kt)("p",null,"  A Module object for the specified module ID."),(0,r.kt)("h4",{id:"return-type-9"},"Return type"),(0,r.kt)("p",null,"  Module"),(0,r.kt)("h4",{id:"example-10"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from clarifai.client.app import App\napp = App(app_id="app_id", user_id="user_id")\nmodule = app.create_module(module_id="module_id")\n')),(0,r.kt)("h3",{id:"appcreate_workflow"},"App.create_workflow()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"create_workflow(config_filepath, generate_new_id, display)\n")),(0,r.kt)("p",null,"Creates a workflow for the app."),(0,r.kt)("h4",{id:"parameters-13"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"config_filepath")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 The path to the yaml workflow config file."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"generate_new_id")," (",(0,r.kt)("em",{parentName:"li"},"bool"),") \u2013 If True, generate a new workflow ID."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"display")," (",(0,r.kt)("em",{parentName:"li"},"bool"),") \u2013 If True, display the workflow nodes tree.")),(0,r.kt)("h4",{id:"returns-9"},"Returns"),(0,r.kt)("p",null,"  A Workflow object for the specified workflow config."),(0,r.kt)("h4",{id:"return-type-10"},"Return type"),(0,r.kt)("p",null,"  Workflow"),(0,r.kt)("h4",{id:"example-11"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from clarifai.client.app import App\napp = App(user_id="user_id", app_id="app_id")\nworkflow = app.create_workflow(config_filepath="config.yml")\n')),(0,r.kt)("h3",{id:"appdataset"},"App.dataset()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"dataset(dataset_id, **kwargs)\n")),(0,r.kt)("p",null,"Returns a Dataset object for the existing dataset ID."),(0,r.kt)("h4",{id:"parameters-14"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"dataset_id")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 The dataset ID for the dataset to interact with.")),(0,r.kt)("h4",{id:"returns-10"},"Returns"),(0,r.kt)("p",null,"A Dataset object for the existing dataset ID."),(0,r.kt)("h4",{id:"return-type-11"},"Return type"),(0,r.kt)("p",null,"Dataset"),(0,r.kt)("h4",{id:"example-12"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from clarifai.client.app import App\napp = App(app_id="app_id", user_id="user_id")\ndataset = app.dataset(dataset_id="dataset_id")\n')),(0,r.kt)("h3",{id:"appdelete_dataset"},"App.delete_dataset()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"delete_dataset(dataset_id)\n")),(0,r.kt)("p",null,"Deletes a dataset for the user."),(0,r.kt)("h4",{id:"parameters-15"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"dataset_id")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 The dataset ID for the app to delete.")),(0,r.kt)("h4",{id:"example-13"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from clarifai.client.app import App\napp = App(app_id="app_id", user_id="user_id")\napp.delete_dataset(dataset_id="dataset_id")\n')),(0,r.kt)("h3",{id:"appdelete_model"},"App.delete_model()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"delete_model(model_id)\n")),(0,r.kt)("p",null,"Deletes a model for the user."),(0,r.kt)("h4",{id:"parameters-16"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"model_id")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 The model ID for the app to delete.")),(0,r.kt)("h4",{id:"example-14"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from clarifai.client.app import App\napp = App(app_id="app_id", user_id="user_id")\napp.delete_model(model_id="model_id")\n')),(0,r.kt)("h3",{id:"appdelete_module"},"App.delete_module()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"delete_module(module_id)\n")),(0,r.kt)("p",null,"Deletes a module for the user."),(0,r.kt)("h4",{id:"parameters-17"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"module_id")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 The module ID for the app to delete.")),(0,r.kt)("h4",{id:"example-15"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from clarifai.client.app import App\napp = App(app_id="app_id", user_id="user_id")\napp.delete_module(module_id="module_id")\n')),(0,r.kt)("h3",{id:"appdelete_workflow"},"App.delete_workflow()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"delete_workflow(workflow_id)\n")),(0,r.kt)("p",null,"Deletes a workflow for the user."),(0,r.kt)("h4",{id:"parameters-18"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"workflow_id")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 The workflow ID for the app to delete.")),(0,r.kt)("h4",{id:"example-16"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from clarifai.client.app import App\napp = App(app_id="app_id", user_id="user_id")\napp.delete_workflow(workflow_id="workflow_id")\n')),(0,r.kt)("h3",{id:"appinputs"},"App.inputs()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"inputs()\n")),(0,r.kt)("p",null,"Returns an Input object."),(0,r.kt)("h4",{id:"returns-11"},"Returns"),(0,r.kt)("p",null,"  An input object."),(0,r.kt)("h4",{id:"return-type-12"},"Return type"),(0,r.kt)("p",null,"  Inputs"),(0,r.kt)("h3",{id:"applist_concepts"},"App.list_concepts()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"list_concepts()\n")),(0,r.kt)("p",null,"Lists all the concepts for the app."),(0,r.kt)("h3",{id:"applist_datasets"},"App.list_datasets()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"list_datasets()\n")),(0,r.kt)("p",null,"Lists all the datasets for the app."),(0,r.kt)("h4",{id:"returns-12"},"Returns"),(0,r.kt)("p",null,"  A list of Dataset objects for the datasets in the app."),(0,r.kt)("h4",{id:"return-type-13"},"Return type"),(0,r.kt)("p",null,"  List","[Dataset]"),(0,r.kt)("h4",{id:"example-17"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from clarifai.client.app import App\napp = App(app_id="app_id", user_id="user_id")\nall_datasets = app.list_datasets()\n')),(0,r.kt)("h3",{id:"applist_installed_module_versions"},"App.list_installed_module_versions()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"list_installed_module_versions(filter_by={})\n")),(0,r.kt)("p",null,"Lists all installed module versions in the app."),(0,r.kt)("h4",{id:"parameters-19"},"Parameters"),(0,r.kt)("p",null,"  ",(0,r.kt)("strong",{parentName:"p"},"filter_by")," (",(0,r.kt)("em",{parentName:"p"},"dict"),") \u2013 A dictionary of filters to apply to the list of installed module versions."),(0,r.kt)("h4",{id:"returns-13"},"Returns"),(0,r.kt)("p",null,"  A list of Module objects for the installed module versions in the app."),(0,r.kt)("h4",{id:"return-type-14"},"Return type"),(0,r.kt)("p",null,"List","[Module]"),(0,r.kt)("h4",{id:"example-18"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from clarifai.client.app import App\napp = App(app_id="app_id", user_id="user_id")\nall_installed_module_versions = app.list_installed_module_versions()\n')),(0,r.kt)("h3",{id:"applist_models"},"App.list_models()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"list_models(filter_by={}, only_in_app=True)\n")),(0,r.kt)("p",null,"Lists all the available models for the user."),(0,r.kt)("h4",{id:"parameters-20"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"filter_by")," (",(0,r.kt)("em",{parentName:"li"},"dict"),") \u2013 A dictionary of filters to apply to the list of models."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"only_in_app")," (",(0,r.kt)("em",{parentName:"li"},"bool"),") \u2013 If True, only return models that are in the app.")),(0,r.kt)("h4",{id:"returns-14"},"Returns"),(0,r.kt)("p",null,"A list of Model objects for the models in the app."),(0,r.kt)("h4",{id:"return-type-15"},"Return type"),(0,r.kt)("p",null,"List","[Model]"),(0,r.kt)("h4",{id:"example-19"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from clarifai.client.user import User\napp = User(user_id="user_id").app(app_id="app_id")\nall_models = app.list_models()\n')),(0,r.kt)("h3",{id:"applist_modules"},"App.list_modules()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"list_modules(filter_by={}, only_in_app=True)\n")),(0,r.kt)("p",null,"Lists all the available modules for the user."),(0,r.kt)("h4",{id:"parameters-21"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"filter_by")," (",(0,r.kt)("em",{parentName:"li"},"dict"),") \u2013 A dictionary of filters to apply to the list of modules."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"only_in_app")," (",(0,r.kt)("em",{parentName:"li"},"bool"),") \u2013 If True, only return modules that are in the app.")),(0,r.kt)("h5",{id:"returns-15"},"Returns"),(0,r.kt)("p",null,"A list of Module objects for the modules in the app."),(0,r.kt)("h5",{id:"return-type-16"},"Return type"),(0,r.kt)("p",null,"List","[Module]"),(0,r.kt)("h4",{id:"example-20"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from clarifai.client.app import App\napp = App(app_id="app_id", user_id="user_id")\nall_modules = app.list_modules()\n')),(0,r.kt)("h3",{id:"applist_workflows"},"App.list_workflows()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"list_workflows(filter_by={}, only_in_app=True)\n")),(0,r.kt)("p",null,"Lists all the available workflows for the user."),(0,r.kt)("h4",{id:"parameters-22"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"filter_by")," (",(0,r.kt)("em",{parentName:"li"},"dict"),") \u2013 A dictionary of filters to apply to the list of workflows."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"only_in_app")," (",(0,r.kt)("em",{parentName:"li"},"bool"),") \u2013 If True, only return workflows that are in the app.")),(0,r.kt)("h4",{id:"returns-16"},"Returns"),(0,r.kt)("p",null,"A list of Workflow objects for the workflows in the app."),(0,r.kt)("h4",{id:"return-type-17"},"Return type"),(0,r.kt)("p",null,"List Workflow"),(0,r.kt)("h4",{id:"example-21"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from clarifai.client.app import App\napp = App(app_id="app_id", user_id="user_id")\nall_workflows = app.list_workflows()\n')),(0,r.kt)("h3",{id:"appmodel"},"App.model()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"model(model_id, model_version_id='', **kwargs)\n")),(0,r.kt)("p",null,"Returns a Model object for the existing model ID."),(0,r.kt)("h4",{id:"parameters-23"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"model_id")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 The model ID for the model to interact with."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"model_version_id")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 The model version ID for the model version to interact with.")),(0,r.kt)("h5",{id:"returns-17"},"Returns"),(0,r.kt)("p",null,"A Model object for the existing model ID."),(0,r.kt)("h4",{id:"return-type-18"},"Return type"),(0,r.kt)("p",null,"Model"),(0,r.kt)("h4",{id:"example-22"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from clarifai.client.app import App\napp = App(app_id="app_id", user_id="user_id")\nmodel_v1 = app.model(model_id="model_id", model_version_id="model_version_id")\n')),(0,r.kt)("h3",{id:"appmodule"},"App.module()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"module(module_id, module_version_id='', **kwargs)\n")),(0,r.kt)("p",null,"Returns a Module object for the existing module ID."),(0,r.kt)("h4",{id:"parameters-24"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"module_id")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 The module ID for the module to interact with."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"module_version_id")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 The module version ID for the module version to interact with.")),(0,r.kt)("h4",{id:"returns-18"},"Returns"),(0,r.kt)("p",null,"A Module object for the existing module ID."),(0,r.kt)("h4",{id:"return-type-19"},"Return type"),(0,r.kt)("p",null,"Module"),(0,r.kt)("h4",{id:"example-23"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from clarifai.client.app import App\napp = App(app_id="app_id", user_id="user_id")\nmodule = app.module(module_id="module_id", module_version_id="module_version_id")\n')),(0,r.kt)("h3",{id:"appworkflow"},"App.workflow()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"workflow(workflow_id, **kwargs)\n")),(0,r.kt)("p",null,"Returns a workflow object for the existing workflow ID."),(0,r.kt)("h4",{id:"parameters-25"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"workflow_id")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 The workflow ID for the workflow to interact with.")),(0,r.kt)("h4",{id:"returns-19"},"Returns"),(0,r.kt)("p",null,"A Workflow object for the existing workflow ID."),(0,r.kt)("h4",{id:"return-type-20"},"Return type"),(0,r.kt)("p",null,"Workflow"),(0,r.kt)("h4",{id:"example-24"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from clarifai.client.app import App\napp = App(app_id="app_id", user_id="user_id")\nworkflow = app.workflow(workflow_id="workflow_id")\n')),(0,r.kt)("h2",{id:"dataset"},"Dataset"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class Dataset(url_init='', dataset_id='', **kwargs)\n")),(0,r.kt)("h3",{id:"dataset__init__"},"Dataset.","_","_init","_","_()"),(0,r.kt)("p",null,"Dataset is a class that provides access to Clarifai API endpoints related to Dataset information."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"__init__(url_init='', dataset_id='', **kwargs)\n")),(0,r.kt)("p",null,"Initializes a Dataset object."),(0,r.kt)("h4",{id:"parameters-26"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"url_init")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 The URL to initialize the dataset object."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"dataset_id")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 The Dataset ID within the App to interact with."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"*","*","kwargs")," \u2013 Additional keyword arguments to be passed to the ClarifaiAuthHelper.")),(0,r.kt)("h3",{id:"datasetexport"},"Dataset.export()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"export(save_path, archive_url=None, local_archive_path=None, split=None)\n")),(0,r.kt)("p",null,"Exports the Clarifai protobuf dataset to a local archive."),(0,r.kt)("h4",{id:"parameters-27"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"save_path")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 The path to save the archive to."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"archive_url")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 The URL to the Clarifai protobuf archive."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"local_archive_path")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 The path to the local Clarifai protobuf archive."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"split")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 Export dataset inputs in the directory format {split}/{input_type}. Default is all.")),(0,r.kt)("h4",{id:"example-25"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from clarifai.client.dataset import Dataset\nDataset().export(save_path='output.zip', local_archive_path='clarifai-data-protobuf.zip')\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note:")," Currently only supports export of dataset inputs."),(0,r.kt)("h3",{id:"datasetupload_dataset"},"Dataset.upload_dataset()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"upload_dataset(task, split, module_dir=None, dataset_loader=None, chunk_size=128)\n")),(0,r.kt)("p",null,"Uploads a dataset to the app."),(0,r.kt)("h4",{id:"parameters-28"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"task")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 task type(text_clf, visual-classification, visual_detection, visual_segmentation, visual-captioning)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"split")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 split type(train, test, val)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"module_dir")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 path to the module directory"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"dataset_loader")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 name of the dataset loader"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"chunk_size")," (",(0,r.kt)("em",{parentName:"li"},"int"),") \u2013 chunk size for concurrent upload of inputs and annotations")),(0,r.kt)("h3",{id:"datasetupload_from_csv"},"Dataset.upload_from_csv()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"upload_from_csv(csv_path, input_type='text', csv_type='raw', labels=True, chunk_size=128)\n")),(0,r.kt)("p",null,"Uploads dataset from a CSV file."),(0,r.kt)("h4",{id:"parameters-29"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"csv_path")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 path to the csv file"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"input_type")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 type of the dataset(text, image)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"csv_type")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 type of the csv file(raw, url, file_path)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"labels")," (",(0,r.kt)("em",{parentName:"li"},"bool"),") \u2013 True if csv file has labels column"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"chunk_size")," (",(0,r.kt)("em",{parentName:"li"},"int"),") \u2013 chunk size for concurrent upload of inputs and annotations")),(0,r.kt)("h4",{id:"example-26"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from clarifai.client.dataset import Dataset\ndataset = Dataset(user_id = 'user_id', app_id = 'demo_app', dataset_id = 'demo_dataset')\ndataset.upload_from_csv(csv_path='csv_path', input_type='text', csv_type='raw, labels=True)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note"),": csv file should have either one(input) or two columns(input, labels)."),(0,r.kt)("h3",{id:"datasetupload_from_folder"},"Dataset.upload_from_folder()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"upload_from_folder(folder_path, input_type, labels=False, chunk_size=128)\n")),(0,r.kt)("p",null,"Upload dataset from folder."),(0,r.kt)("h4",{id:"parameters-30"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"folder_path")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 Path to the folder containing images."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"input_type")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 type of the dataset(text, image)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"labels")," (",(0,r.kt)("em",{parentName:"li"},"bool"),") \u2013 True if folder name is the label for the inputs"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"chunk_size")," (",(0,r.kt)("em",{parentName:"li"},"int"),") \u2013 chunk size for concurrent upload of inputs and annotations")),(0,r.kt)("h4",{id:"example-27"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from clarifai.client.dataset import Dataset\ndataset = Dataset(user_id = 'user_id', app_id = 'demo_app', dataset_id = 'demo_dataset')\ndataset.upload_from_folder(folder_path='folder_path', input_type='text', labels=True)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note"),": The filename is used as the input_id."),(0,r.kt)("h2",{id:"input"},"Input"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class Inputs(user_id='', app_id='', logger_level='INFO', **kwargs)\n")),(0,r.kt)("p",null,"Inputs is a class that provides access to Clarifai API endpoints related to Input information."),(0,r.kt)("h3",{id:"inputs__init__"},"Inputs.","_","_init","_","_()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"__init__(user_id='', app_id='', logger_level='INFO', **kwargs)\n")),(0,r.kt)("p",null,"Initializes an Input object."),(0,r.kt)("h4",{id:"parameters-31"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"user_id")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 A user ID for authentication."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"app_id")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 An app ID for the application to interact with."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"*","*","kwargs")," \u2013 Additional keyword arguments to be passed to the Input")),(0,r.kt)("h3",{id:"inputsdelete_inputs"},"Inputs.delete_inputs()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"delete_inputs(inputs)\n")),(0,r.kt)("p",null,"Delete list of input objects from the app."),(0,r.kt)("h4",{id:"parameters-32"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"input_ids")," (",(0,r.kt)("em",{parentName:"li"},"Input"),") \u2013 List of input objects to delete.")),(0,r.kt)("h4",{id:"example-28"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from clarifai.client.user import User\ninput_obj = User(user_id="user_id").app(app_id="app_id").inputs()\ninput_obj.delete_inputs(input_obj.list_inputs())\n')),(0,r.kt)("h3",{id:"inputsget_annotation_proto"},"Inputs.get_annotation_proto()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"get_annotation_proto(input_id, label, annotations)\n")),(0,r.kt)("p",null,"Create an annotation proto for each bounding box, label input pair."),(0,r.kt)("h4",{id:"parameters-33"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"input_id")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 The input ID for the annotation to create."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"label")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 annotation label"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"annotations")," (",(0,r.kt)("em",{parentName:"li"},"List"),") \u2013 a list of a single bbox\u2019s coordinates. # Annotations ordering: ","[xmin, ymin, xmax, ymax]")),(0,r.kt)("h4",{id:"returns-20"},"Returns"),(0,r.kt)("p",null,"An annotation object for the specified input ID."),(0,r.kt)("h4",{id:"example-29"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from clarifai.client.input import Input\ninput_obj = Input()\ninput_obj.get_annotation_proto(input_id='demo', label='demo', annotations=[x_min, y_min, x_max, y_max])\n")),(0,r.kt)("h3",{id:"inputsget_image_inputs_from_folder"},"Inputs.get_image_inputs_from_folder()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"get_image_inputs_from_folder(folder_path, dataset_id=None, labels=False)\n")),(0,r.kt)("p",null,"Create input protos for image data type from folder."),(0,r.kt)("h4",{id:"parameters-34"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"folder_path")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 Path to the folder containing images.")),(0,r.kt)("h4",{id:"returns-21"},"Returns"),(0,r.kt)("p",null,"  A list of Input objects for the specified folder."),(0,r.kt)("h4",{id:"return-type-21"},"Return type"),(0,r.kt)("p",null,"  List of Input"),(0,r.kt)("h4",{id:"example-30"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from clarifai.client.input import Input\ninput_obj = Input()\ninput_protos = input_obj.get_image_inputs_from_folder(folder_path='demo_folder')\n")),(0,r.kt)("h3",{id:"inputsget_input_from_bytes"},"Inputs.get_input_from_bytes()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"get_input_from_bytes(input_id, image_bytes=None, video_bytes=None, audio_bytes=None, dataset_id=None, **kwargs)\n")),(0,r.kt)("p",null,"Create input proto from bytes."),(0,r.kt)("h4",{id:"parameters-35"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"input_id")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 The input ID for the input to create."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"image_bytes")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 The bytes for the image."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"video_bytes")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 The bytes for the video."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"audio_bytes")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 The bytes for the audio."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"dataset_id")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 The dataset ID for the dataset to add the input to.")),(0,r.kt)("h4",{id:"returns-22"},"Returns"),(0,r.kt)("p",null,"  An Input object for the specified input ID."),(0,r.kt)("h4",{id:"return-type-22"},"Return type"),(0,r.kt)("p",null,"  Input"),(0,r.kt)("h4",{id:"example-31"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from clarifai.client.input import Input\ninput_obj = Input()\nimage = open('demo.jpg', 'rb').read()\nvideo = open('demo.mp4', 'rb').read()\ninput_proto = input_obj.get_input_from_bytes(input_id = 'demo',image_bytes =image, video_bytes=video)\n")),(0,r.kt)("h3",{id:"inputsget_input_from_file"},"Inputs.get_input_from_file()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"get_input_from_file(input_id, image_file=None, video_file=None, audio_file=None, dataset_id=None, **kwargs)\n")),(0,r.kt)("p",null,"Create input proto from files."),(0,r.kt)("h4",{id:"parameters-36"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"input_id")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 The input ID for the input to create."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"image_file")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 The url for the image."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"video_file")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 The url for the video."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"audio_file")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 The url for the audio."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"dataset_id")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 The dataset ID for the dataset to add the input to.")),(0,r.kt)("h4",{id:"returns-23"},"Returns"),(0,r.kt)("p",null,"  An Input object for the specified input ID."),(0,r.kt)("h4",{id:"return-type-23"},"Return type"),(0,r.kt)("p",null,"  Input"),(0,r.kt)("h4",{id:"example-32"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from clarifai.client.input import Input\ninput_obj = Input()\ninput_proto = input_obj.get_input_from_file(input_id = 'demo', video_file='file_path')\n")),(0,r.kt)("h3",{id:"inputsget_input_from_url"},"Inputs.get_input_from_url()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"get_input_from_url(input_id, image_url=None, video_url=None, audio_url=None, text_url=None, dataset_id=None, **kwargs)\n")),(0,r.kt)("p",null,"Create input proto from URL."),(0,r.kt)("h4",{id:"parameters-37"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"input_id")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 The input ID for the input to create."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"image_url")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 The url for the image."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"video_url")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 The url for the video."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"audio_url")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 The url for the audio."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"text_url")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 The url for the text."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"dataset_id")," (",(0,r.kt)("em",{parentName:"li"},"str"),"): The dataset ID for the dataset to add the input to.")),(0,r.kt)("h4",{id:"returns-24"},"Returns"),(0,r.kt)("p",null,"  An Input object for the specified input ID."),(0,r.kt)("h4",{id:"return-type-24"},"Return type"),(0,r.kt)("p",null,"  Input"),(0,r.kt)("h4",{id:"example-33"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from clarifai.client.input import Input\ninput_obj = Input()\ninput_proto = input_obj.get_input_from_url(input_id = 'demo', image_url='https://samples.clarifai.com/metro-north.jpg')\n")),(0,r.kt)("h3",{id:"inputsget_inputs_from_csv"},"Inputs.get_inputs_from_csv()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"get_inputs_from_csv(csv_path='', input_type= 'text', csv_type='raw', dataset_id=None, labels=True)\n")),(0,r.kt)("p",null,"Create input protos from CSV."),(0,r.kt)("h4",{id:"parameters-38"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"csv_path")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 Path to the csv file."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"input_type")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 Type of input. Options: \u2018text\u2019, \u2018image\u2019, \u2018video\u2019, \u2018audio\u2019."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"csv_type")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 Type of csv file. Options: \u2018raw\u2019, \u2018url\u2019, \u2018file_path\u2019."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"dataset_id")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 The dataset ID for the dataset to add the input to."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"labels")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 True if csv file has labels column.")),(0,r.kt)("h4",{id:"returns-25"},"Returns"),(0,r.kt)("p",null,"List of inputs"),(0,r.kt)("h4",{id:"return-type-25"},"Return type"),(0,r.kt)("p",null,"inputs"),(0,r.kt)("h4",{id:"example-34"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from clarifai.client.input import Input\ninput_obj = Input()\ninput_protos = input_obj.get_inputs_from_csv(csv_path='filepath', input_type='text', csv_type='raw')\n")),(0,r.kt)("h3",{id:"inputsget_mask_proto"},"Inputs.get_mask_proto()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"get_mask_proto(input_id, label, polygons)\n")),(0,r.kt)("p",null,"Create an annotation proto for each polygon box, label input pair."),(0,r.kt)("h4",{id:"parameters-39"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"input_id")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 The input ID for the annotation to create."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"label")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 annotation label"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"polygons")," (",(0,r.kt)("em",{parentName:"li"},"List"),") \u2013 Polygon x,y points iterable")),(0,r.kt)("h4",{id:"returns-26"},"Returns"),(0,r.kt)("p",null,"  An annotation object for the specified input ID."),(0,r.kt)("h4",{id:"example-35"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from clarifai.client.input import Input\ninput_obj = Input()\ninput_obj.get_mask_proto(input_id='demo', label='demo', polygons=[[[x,y],...,[x,y]],...])\n")),(0,r.kt)("h3",{id:"inputsget_text_input"},"Inputs.get_text_input()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"get_text_input(input_id, raw_text, dataset_id=None, **kwargs)\n")),(0,r.kt)("p",null,"Create input proto for text data type from raw text."),(0,r.kt)("h4",{id:"parameters-40"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"input_id")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 The input ID for the input to create."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"raw_text")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 The raw text input."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"dataset_id")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 The dataset ID for the dataset to add the input to."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"*","*","kwargs")," \u2013 Additional keyword arguments to be passed to the Input")),(0,r.kt)("h4",{id:"returns-27"},"Returns"),(0,r.kt)("p",null,"  An Input object for the specified input ID."),(0,r.kt)("h4",{id:"return-type-26"},"Return type"),(0,r.kt)("p",null,"Text"),(0,r.kt)("h4",{id:"example-36"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from clarifai.client.input import Input\ninput_obj = Input()\ninput_protos = input_obj.get_text_input(input_id = 'demo', raw_text = 'This is a test')\n")),(0,r.kt)("h3",{id:"inputsget_text_inputs_from_folder"},"Inputs.get_text_inputs_from_folder()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"get_text_inputs_from_folder(folder_path, dataset_id=None, labels=False)\n")),(0,r.kt)("p",null,"Create input protos for text data type from folder."),(0,r.kt)("h4",{id:"parameters-41"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"folder_path")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 Path to the folder containing text.")),(0,r.kt)("h4",{id:"returns-28"},"Returns"),(0,r.kt)("p",null,"  A list of Input objects for the specified folder."),(0,r.kt)("h4",{id:"return-type-27"},"Return type"),(0,r.kt)("p",null,"  list of Input"),(0,r.kt)("h4",{id:"example-37"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from clarifai.client.input import Input\ninput_obj = Input()\ninput_protos = input_obj.get_text_inputs_from_folder(folder_path='demo_folder')\n")),(0,r.kt)("h3",{id:"inputslist_inputs"},"Inputs.list_inputs()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"list_inputs()\n")),(0,r.kt)("p",null,"Lists all the inputs for the app."),(0,r.kt)("h4",{id:"returns-29"},"Returns"),(0,r.kt)("p",null,"  A list of Input objects for the app."),(0,r.kt)("h4",{id:"return-type-28"},"Return type"),(0,r.kt)("p",null,"  list of Input"),(0,r.kt)("h4",{id:"example-38"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from clarifai.client.user import User\ninput_obj = User(user_id="user_id").app(app_id="app_id").inputs()\ninput_obj.list_inputs()\n')),(0,r.kt)("h3",{id:"inputsupload_annotations"},"Inputs.upload_annotations()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"upload_annotations(batch_annot, show_log=True)\n")),(0,r.kt)("p",null,"Upload image annotations to app."),(0,r.kt)("h4",{id:"parameters-42"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"batch_annot")," \u2013 annot batch protos")),(0,r.kt)("h4",{id:"returns-30"},"Returns"),(0,r.kt)("h4",{id:"return-type-29"},"Return type"),(0,r.kt)("h3",{id:"inputsupload_from_bytes"},"Inputs.upload_from_bytes()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"upload_from_bytes(input_id, image_bytes=None, video_bytes=None, audio_bytes=None, dataset_id=None, **kwargs)\n")),(0,r.kt)("p",null,"Upload input from bytes."),(0,r.kt)("h4",{id:"parameters-43"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"input_id")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 The input ID for the input to create."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"image_bytes")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 The bytes for the image."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"video_bytes")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 The bytes for the video."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"audio_bytes")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 The bytes for the audio."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"text_bytes"),"(",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 The bytes for the text."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"dataset_id")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 The dataset ID for the dataset to add the input to.")),(0,r.kt)("h4",{id:"returns-31"},"Returns"),(0,r.kt)("p",null,"  Job id for the upload request."),(0,r.kt)("h4",{id:"return-type-30"},"Return type"),(0,r.kt)("p",null,"  input_job_id"),(0,r.kt)("h4",{id:"example-39"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from clarifai.client.input import Input\ninput_obj = Input(user_id = 'user_id', app_id = 'demo_app')\nimage = open('demo.jpg', 'rb').read()\ninput_obj.upload_from_bytes(input_id='demo', image_bytes=image)\n")),(0,r.kt)("h3",{id:"inputsupload_from_file"},"Inputs.upload_from_file()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"upload_from_file(input_id, image_file=None, video_file=None, audio_file=None, dataset_id=None, **kwargs)\n")),(0,r.kt)("p",null,"Upload input from file."),(0,r.kt)("h4",{id:"parameters-44"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"input_id")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 The input ID for the input to create."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"image_file")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 The file for the image."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"video_file")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 The file for the video."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"audio_file")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 The file for the audio."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"text_file"),"(",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 The file for the text."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"dataset_id")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 The dataset ID for the dataset to add the input to.")),(0,r.kt)("h4",{id:"returns-32"},"Returns"),(0,r.kt)("p",null,"  Job id for the upload request."),(0,r.kt)("h4",{id:"return-type-31"},"Return type"),(0,r.kt)("p",null,"  input_job_id"),(0,r.kt)("h4",{id:"example-40"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from clarifai.client.input import Input\ninput_obj = Input(user_id = 'user_id', app_id = 'demo_app')\ninput_obj.upload_from_file(input_id='demo', audio_file='demo.mp3')\n")),(0,r.kt)("h3",{id:"inputsupload_from_url"},"Inputs.upload_from_url()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"upload_from_url(input_id, image_url=None, video_url=None, audio_url=None, text_url=None, dataset_id=None, **kwargs)\n")),(0,r.kt)("p",null,"Upload input from URL."),(0,r.kt)("h4",{id:"parameters-45"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"input_id")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 The input ID for the input to create."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"image_url")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 The url for the image."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"video_url")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 The url for the video."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"audio_url")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 The url for the audio."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"text_url")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 The url for the text."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"dataset_id")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 The dataset ID for the dataset to add the input to.")),(0,r.kt)("h4",{id:"returns-33"},"Returns"),(0,r.kt)("p",null,"  job id for the upload request."),(0,r.kt)("h4",{id:"return-type-32"},"Return type"),(0,r.kt)("p",null,"  input_job_id"),(0,r.kt)("h4",{id:"example-41"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from clarifai.client.input import Input\ninput_obj = Input(user_id = 'user_id', app_id = 'demo_app')\ninput_obj.upload_from_url(input_id='demo', image_url='https://samples.clarifai.com/metro-north.jpg')\n")),(0,r.kt)("h3",{id:"inputsupload_inputs"},"Inputs.upload_inputs()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"upload_inputs(inputs, show_log=True)\n")),(0,r.kt)("p",null,"Upload list of input objects to the app."),(0,r.kt)("h4",{id:"parameters-46"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"inputs")," (",(0,r.kt)("em",{parentName:"li"},"list"),") \u2013 List of input objects to upload."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"show_log")," (",(0,r.kt)("em",{parentName:"li"},"bool"),") \u2013 Show upload status log.")),(0,r.kt)("h4",{id:"returns-34"},"Returns"),(0,r.kt)("p",null,"  Job id for the upload request."),(0,r.kt)("h4",{id:"return-type-33"},"Return type"),(0,r.kt)("p",null,"  input_job_id"),(0,r.kt)("h3",{id:"inputsupload_text"},"Inputs.upload_text()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"upload_text(input_id, raw_text, dataset_id=None, **kwargs)\n")),(0,r.kt)("p",null,"Upload text from raw text."),(0,r.kt)("h4",{id:"parameters-47"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"input_id")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 The input ID for the input to create."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"raw_text")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 The raw text."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"dataset_id")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 The dataset ID for the dataset to add the input to.")),(0,r.kt)("h4",{id:"returns-35"},"Returns"),(0,r.kt)("p",null,"  Job id for the upload request."),(0,r.kt)("h4",{id:"return-type-34"},"Return type"),(0,r.kt)("p",null,"  input_job_id (str)"),(0,r.kt)("h4",{id:"example-42"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from clarifai.client.input import Input\ninput_obj = Input(user_id = 'user_id', app_id = 'demo_app')\ninput_obj.upload_text(input_id = 'demo', raw_text = 'This is a test')\n")),(0,r.kt)("h2",{id:"lister"},"Lister"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class Lister(page_size=16)\n")),(0,r.kt)("p",null,"Lister class for obtaining paginated results from the Clarifai API."),(0,r.kt)("h3",{id:"lister__init__"},"Lister.","_","_init","_","_()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"__init__(page_size=16)\n")),(0,r.kt)("h3",{id:"listerlist_all_pages_generator"},"Lister.list_all_pages_generator()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"list_all_pages_generator(endpoint, proto_message, request_data)\n")),(0,r.kt)("p",null,"Lists all pages of a resource."),(0,r.kt)("h4",{id:"parameters-48"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"endpoint")," (",(0,r.kt)("em",{parentName:"li"},"Callable"),") \u2013 The endpoint to call."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"proto_message")," (",(0,r.kt)("em",{parentName:"li"},"Any"),") \u2013 The proto message to use."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"request_data")," (",(0,r.kt)("em",{parentName:"li"},"dict"),") \u2013 The request data to use.")),(0,r.kt)("h4",{id:"yields"},"Yields"),(0,r.kt)("p",null,"  ",(0,r.kt)("em",{parentName:"p"},"response_dict")," \u2013 The next item in the listing."),(0,r.kt)("h2",{id:"model"},"Model"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class Model(url_init='', model_id='', model_version={'id': ''}, output_config={'min_value': 0}, **kwargs)\n")),(0,r.kt)("p",null,"Model is a class that provides access to Clarifai API endpoints related to Model information."),(0,r.kt)("h3",{id:"model__init__"},"Model.","_","_init","_","_()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"__init__(url_init='', model_id='', model_version={'id': ''}, output_config={'min_value': 0}, **kwargs)\n")),(0,r.kt)("p",null,"Initializes a Model object."),(0,r.kt)("h4",{id:"parameters-49"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"url_init")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 The URL to initialize the model object."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"model_id")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 The Model ID to interact with."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"model_version")," (",(0,r.kt)("em",{parentName:"li"},"dict"),") \u2013 The Model Version to interact with."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"output_config")," (",(0,r.kt)("em",{parentName:"li"},"dict"),") \u2013 The output config to interact with.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"min_value (float): The minimum value of the prediction confidence to filter."),(0,r.kt)("li",{parentName:"ul"},"max_concepts (int): The maximum number of concepts to return."),(0,r.kt)("li",{parentName:"ul"},"select_concepts (list","[Concept]","): The concepts to select."),(0,r.kt)("li",{parentName:"ul"},"sample_ms (int): The number of milliseconds to sample."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"*","*","kwargs")," \u2013 Additional keyword arguments to be passed to the ClarifaiAuthHelper.")),(0,r.kt)("h3",{id:"modelcreate_model_version"},"Model.create_model_version()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"create_model_version(**kwargs)\n")),(0,r.kt)("p",null,"Creates a model version for the Model."),(0,r.kt)("h4",{id:"returns-36"},"Returns"),(0,r.kt)("p",null,"  A Model object for the specified model ID."),(0,r.kt)("h4",{id:"return-type-35"},"Return type"),(0,r.kt)("p",null,"  Model"),(0,r.kt)("h4",{id:"parameters-50"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"*","*","kwargs")," \u2013 Additional keyword arguments to be passed to the Model Version.")),(0,r.kt)("h4",{id:"example-43"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from clarifai.client.model import Model\nmodel = Model(\"model_url\")\n            # or\nmodel = Model(model_id='model_id', user_id='user_id', app_id='app_id')\nmodel_version = model.create_model_version(description='model_version_description')\n")),(0,r.kt)("h3",{id:"modellist_versions"},"Model.list_versions()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"list_versions()\n")),(0,r.kt)("p",null,"Lists all the versions for the model."),(0,r.kt)("h4",{id:"returns-37"},"Returns"),(0,r.kt)("p",null,"  A list of Model objects for the versions of the model."),(0,r.kt)("h4",{id:"return-type-36"},"Return type"),(0,r.kt)("p",null,"  List","[Model]"),(0,r.kt)("h4",{id:"example-44"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from clarifai.client.model import Model\nmodel = Model(\"model_url\") # Example URL: https://clarifai.com/clarifai/main/models/general-image-recognition\n            # or\nmodel = Model(model_id='model_id', user_id='user_id', app_id='app_id')\nall_model_versions = model.list_versions()\n")),(0,r.kt)("h3",{id:"modelpredict"},"Model.predict()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"predict(inputs)\n")),(0,r.kt)("p",null,"Predicts the model based on the given inputs."),(0,r.kt)("h4",{id:"parameters-51"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"inputs")," (list","[Input]",") \u2013 The inputs to predict, must be less than 128.")),(0,r.kt)("h3",{id:"modelpredict_by_bytes"},"Model.predict_by_bytes()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"predict_by_bytes(input_bytes, input_type)\n")),(0,r.kt)("p",null,"Predicts the model based on the given bytes."),(0,r.kt)("h4",{id:"parameters-52"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"input_bytes")," (",(0,r.kt)("em",{parentName:"li"},"bytes"),") \u2013 File Bytes to predict on."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"input_type")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 The type of input. Can be \u2018image\u2019, \u2018text\u2019, \u2018video\u2019 or \u2018audio\u2019.")),(0,r.kt)("h4",{id:"example-45"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from clarifai.client.model import Model\nmodel = Model(\"https://clarifai.com/anthropic/completion/models/claude-v2\")\nmodel_prediction = model.predict_by_bytes(b'Write a tweet on future of AI', 'text')\n")),(0,r.kt)("h3",{id:"modelpredict_by_filepath"},"Model.predict_by_filepath()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"predict_by_filepath(filepath, input_type)\n")),(0,r.kt)("p",null,"Predicts the model based on the given file path."),(0,r.kt)("h4",{id:"parameters-53"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"filepath")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 The file path to predict."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"input_type")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 The type of input. Can be \u2018image\u2019, \u2018text\u2019, \u2018video\u2019 or \u2018audio.")),(0,r.kt)("h4",{id:"example-46"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from clarifai.client.model import Model\nmodel = Model(\"model_url\") # Example URL: https://clarifai.com/clarifai/main/models/general-image-recognition\n          #  or\nmodel = Model(model_id='model_id', user_id='user_id', app_id='app_id')\nmodel_prediction = model.predict_by_filepath('/path/to/image.jpg', 'image')\nmodel_prediction = model.predict_by_filepath('/path/to/text.txt', 'text')\n")),(0,r.kt)("h3",{id:"modelpredict_by_url"},"Model.predict_by_url()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"predict_by_url(url, input_type)\n")),(0,r.kt)("p",null,"Predicts the model based on the given URL."),(0,r.kt)("h4",{id:"parameters-54"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"url")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 The URL to predict."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"input_type")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 The type of input. Can be \u2018image\u2019, \u2018text\u2019, \u2018video\u2019 or \u2018audio.")),(0,r.kt)("h4",{id:"example-47"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from clarifai.client.model import Model\nmodel = Model(\"model_url\") # Example URL: https://clarifai.com/clarifai/main/models/general-image-recognition\n          #  or\nmodel = Model(model_id='model_id', user_id='user_id', app_id='app_id')\nmodel_prediction = model.predict_by_url('url', 'image')\n")),(0,r.kt)("h2",{id:"workflow"},"Workflow"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class Workflow(url_init='', workflow_id='', workflow_version={'id': ''}, output_config={'min_value': 0}, **kwargs)\n")),(0,r.kt)("p",null,"Workflow is a class that provides access to Clarifai API endpoints related to Workflow information."),(0,r.kt)("h3",{id:"workflow__init__"},"Workflow.","_","_init","_","_()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"__init__(url_init='', workflow_id='', workflow_version={'id': ''}, output_config={'min_value': 0}, **kwargs)\n")),(0,r.kt)("p",null,"Initializes a Workflow object."),(0,r.kt)("h4",{id:"parameters-55"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"url_init")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 The URL to initialize the workflow object."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"workflow_id")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 The Workflow ID to interact with."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"workflow_version")," (",(0,r.kt)("em",{parentName:"li"},"dict"),") \u2013 The Workflow Version to interact with."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"output_config")," (",(0,r.kt)("em",{parentName:"li"},"dict"),") \u2013 The output config to interact with.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"min_value (float): The minimum value of the prediction confidence to filter."),(0,r.kt)("li",{parentName:"ul"},"max_concepts (int): The maximum number of concepts to return."),(0,r.kt)("li",{parentName:"ul"},"select_concepts (list","[Concept]","): The concepts to select."),(0,r.kt)("li",{parentName:"ul"},"sample_ms (int): The number of milliseconds to sample."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"*","*","kwargs")," \u2013 Additional keyword arguments to be passed to the ClarifaiAuthHelper.")),(0,r.kt)("h3",{id:"workflowlist_versions"},"Workflow.list_versions()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"list_versions()\n")),(0,r.kt)("p",null,"Lists all the versions of the workflow."),(0,r.kt)("h4",{id:"returns-38"},"Returns"),(0,r.kt)("p",null,"A list of Workflow objects."),(0,r.kt)("h4",{id:"return-type-37"},"Return type"),(0,r.kt)("p",null,"  list","[Workflow]"),(0,r.kt)("h4",{id:"example-48"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from clarifai.client.workflow import Workflow\nworkflow = Workflow(user_id='user_id', app_id='app_id', workflow_id='workflow_id')\nworkflow_versions = workflow.list_versions()\n")),(0,r.kt)("h3",{id:"workflowpredict"},"Workflow.predict()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"predict(inputs)\n")),(0,r.kt)("p",null,"Predicts the workflow based on the given inputs."),(0,r.kt)("h4",{id:"parameters-56"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"inputs")," (list","[Input]",") \u2013 The inputs to predict.")),(0,r.kt)("h3",{id:"workflowpredict_by_bytes"},"Workflow.predict_by_bytes()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"predict_by_bytes(input_bytes, input_type)\n")),(0,r.kt)("p",null,"Predicts the workflow based on the given bytes."),(0,r.kt)("h4",{id:"parameters-57"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"input_bytes")," (",(0,r.kt)("em",{parentName:"li"},"bytes"),") \u2013 Bytes to predict on."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"input_type")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 The type of input. Can be \u2018image\u2019, \u2018text\u2019, \u2018video\u2019 or \u2018audio.")),(0,r.kt)("h3",{id:"workflowpredict_by_filepath"},"Workflow.predict_by_filepath()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"predict_by_filepath(filepath, input_type)\n")),(0,r.kt)("p",null,"Predicts the workflow based on the given filepath."),(0,r.kt)("h4",{id:"parameters-58"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"filepath")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 The filepath to predict."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"input_type")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 The type of input. Can be \u2018image\u2019, \u2018text\u2019, \u2018video\u2019 or \u2018audio.")),(0,r.kt)("h4",{id:"example-49"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from clarifai.client.workflow import Workflow\nworkflow = Workflow(\"workflow_url\") # Example: https://clarifai.com/clarifai/main/workflows/Face-Sentiment\n           # or\nworkflow = Workflow(user_id='user_id', app_id='app_id', workflow_id='workflow_id')\nworkflow_prediction = workflow.predict_by_filepath('filepath', 'image')\n")),(0,r.kt)("h3",{id:"workflowpredict_by_url"},"Workflow.predict_by_url()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"predict_by_url(url, input_type)\n")),(0,r.kt)("p",null,"Predicts the workflow based on the given URL."),(0,r.kt)("h4",{id:"parameters-59"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"url")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 The URL to predict."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"input_type")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 The type of input. Can be \u2018image\u2019, \u2018text\u2019, \u2018video\u2019 or \u2018audio.")),(0,r.kt)("h4",{id:"example-50"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from clarifai.client.workflow import Workflow\nworkflow = Workflow(\"workflow_url\") # Example: https://clarifai.com/clarifai/main/workflows/Face-Sentiment\n             # or\nworkflow = Workflow(user_id='user_id', app_id='app_id', workflow_id='workflow_id')\nworkflow_prediction = workflow.predict_by_url('url', 'image')\n")),(0,r.kt)("h3",{id:"workflowexport"},"Workflow.export()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"export(out_path)\n")),(0,r.kt)("p",null,"Exports the workflow to a yaml file."),(0,r.kt)("h4",{id:"parameters-60"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"out_path")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 The path to save the yaml file to.")),(0,r.kt)("h4",{id:"example-51"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from clarifai.client.workflow import Workflow\nworkflow = Workflow(\"https://clarifai.com/clarifai/main/workflows/Demographics\")\nworkflow.export('out_path.yml')\n")),(0,r.kt)("h2",{id:"module"},"Module"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class Module(url_init='', module_id='', module_version={'id': ''}, \\*\\*kwargs)\n")),(0,r.kt)("p",null,"Module is a class that provides access to Clarifai API endpoints related to Module information."),(0,r.kt)("h3",{id:"module__init__"},"Module.","_","_init","_","_()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"__init__(url_init='', module_id='', module_version={'id': ''}, **kwargs)\n")),(0,r.kt)("p",null,"Initializes a Module object."),(0,r.kt)("h4",{id:"parameters-61"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"url_init")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 The URL to initialize the module object."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"module_id")," (",(0,r.kt)("em",{parentName:"li"},"str"),") \u2013 The Module ID to interact with."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"module_version")," (",(0,r.kt)("em",{parentName:"li"},"dict"),") \u2013 The Module Version to interact with."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"*","*","kwargs")," \u2013 Additional keyword arguments to be passed to the ClarifaiAuthHelper.")),(0,r.kt)("h3",{id:"modulelist_versions"},"Module.list_versions()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"list_versions()\n")),(0,r.kt)("p",null,"Lists all the module versions for the module."),(0,r.kt)("h4",{id:"returns-39"},"Returns"),(0,r.kt)("p",null,"  A list of Module objects for versions of the module."),(0,r.kt)("h4",{id:"return-type-38"},"Return type"),(0,r.kt)("p",null,"  List","[Module]"),(0,r.kt)("h4",{id:"example-52"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from clarifai.client.module import Module\nmodule = Module(module_id='module_id', user_id='user_id', app_id='app_id')\nall_Module_versions = module.list_versions()\n")),(0,r.kt)("h2",{id:"utils"},"Utils"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class Chunker(seq, size)\n")),(0,r.kt)("p",null,"Split an input sequence into small chunks."),(0,r.kt)("h3",{id:"chunker__init__"},"Chunker.","_","_init","_","_()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"__init__(seq, size)\n")),(0,r.kt)("h3",{id:"chunkerchunk"},"Chunker.chunk()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"chunk()\n")),(0,r.kt)("p",null,"Chunk input sequence."),(0,r.kt)("h2",{id:"exceptions"},"Exceptions"),(0,r.kt)("h3",{id:"apierror"},"ApiError"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class ApiError(resource, params, method, response=None)\n")),(0,r.kt)("p",null,"API Server error"),(0,r.kt)("h3",{id:"apiclienterror"},"ApiClientError"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class ApiClientError\n")),(0,r.kt)("p",null,"API Client Error"),(0,r.kt)("h3",{id:"usererror"},"UserError"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class UserError\n")),(0,r.kt)("p",null,"User Error"))}m.isMDXComponent=!0}}]);
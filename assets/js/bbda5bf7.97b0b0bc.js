"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[1794],{19365:(e,n,t)=>{t.d(n,{A:()=>i});var a=t(96540),s=t(20053);const o={tabItem:"tabItem_Ymn6"};function i(e){let{children:n,hidden:t,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,s.A)(o.tabItem,i),hidden:t},n)}},11470:(e,n,t)=>{t.d(n,{A:()=>S});var a=t(58168),s=t(96540),o=t(20053),i=t(23104),r=t(56347),l=t(57485),u=t(31682),_=t(89466);function E(e){return function(e){return s.Children.map(e,(e=>{if(!e||(0,s.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:n,label:t,attributes:a,default:s}}=e;return{value:n,label:t,attributes:a,default:s}}))}function c(e){const{values:n,children:t}=e;return(0,s.useMemo)((()=>{const e=n??E(t);return function(e){const n=(0,u.X)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function p(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function d(e){let{queryString:n=!1,groupId:t}=e;const a=(0,r.W6)(),o=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,l.aZ)(o),(0,s.useCallback)((e=>{if(!o)return;const n=new URLSearchParams(a.location.search);n.set(o,e),a.replace({...a.location,search:n.toString()})}),[o,a])]}function D(e){const{defaultValue:n,queryString:t=!1,groupId:a}=e,o=c(e),[i,r]=(0,s.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const a=t.find((e=>e.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:o}))),[l,u]=d({queryString:t,groupId:a}),[E,D]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[a,o]=(0,_.Dv)(t);return[a,(0,s.useCallback)((e=>{t&&o.set(e)}),[t,o])]}({groupId:a}),I=(()=>{const e=l??E;return p({value:e,tabValues:o})?e:null})();(0,s.useLayoutEffect)((()=>{I&&r(I)}),[I]);return{selectedValue:i,selectValue:(0,s.useCallback)((e=>{if(!p({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);r(e),u(e),D(e)}),[u,D,o]),tabValues:o}}var I=t(92303);const A={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function m(e){let{className:n,block:t,selectedValue:r,selectValue:l,tabValues:u}=e;const _=[],{blockElementScrollPositionUntilNextRender:E}=(0,i.a_)(),c=e=>{const n=e.currentTarget,t=_.indexOf(n),a=u[t].value;a!==r&&(E(n),l(a))},p=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const t=_.indexOf(e.currentTarget)+1;n=_[t]??_[0];break}case"ArrowLeft":{const t=_.indexOf(e.currentTarget)-1;n=_[t]??_[_.length-1];break}}n?.focus()};return s.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.A)("tabs",{"tabs--block":t},n)},u.map((e=>{let{value:n,label:t,attributes:i}=e;return s.createElement("li",(0,a.A)({role:"tab",tabIndex:r===n?0:-1,"aria-selected":r===n,key:n,ref:e=>_.push(e),onKeyDown:p,onClick:c},i,{className:(0,o.A)("tabs__item",A.tabItem,i?.className,{"tabs__item--active":r===n})}),t??n)})))}function R(e){let{lazy:n,children:t,selectedValue:a}=e;const o=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=o.find((e=>e.props.value===a));return e?(0,s.cloneElement)(e,{className:"margin-top--md"}):null}return s.createElement("div",{className:"margin-top--md"},o.map(((e,n)=>(0,s.cloneElement)(e,{key:n,hidden:e.props.value!==a}))))}function T(e){const n=D(e);return s.createElement("div",{className:(0,o.A)("tabs-container",A.tabList)},s.createElement(m,(0,a.A)({},e,n)),s.createElement(R,(0,a.A)({},e,n)))}function S(e){const n=(0,I.A)();return s.createElement(T,(0,a.A)({key:String(n)},e))}},36953:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>O,contentTitle:()=>S,default:()=>P,frontMatter:()=>T,metadata:()=>h,toc:()=>g});var a=t(58168),s=(t(96540),t(15680)),o=t(11470),i=t(19365),r=t(77964);const l='############################################################################################\n# In this section, we set the user authentication, app ID, and model evaluation details.\n# Change these strings to run your own example.\n###########################################################################################\n\nUSER_ID = "YOUR_USER_ID_HERE"\n# Your PAT (Personal Access Token) can be found in the Account\'s Security section\nPAT = "YOUR_PAT_HERE"\nAPP_ID = "YOUR_APP_ID_HERE"\n# Change these to make your own evaluations\nMODEL_APP_ID = "YOUR_MODEL_APP_ID_HERE"\nMODEL_USER_ID = "YOUR_MODEL_USER_ID_HERE"\nMODEL_ID = "YOUR_MODEL_ID_HERE"\nMODEL_VERSION_ID = "YOUR_MODEL_VERSION_HERE"\nDATASET_USER_ID = "YOUR_DATASET_USER_ID_HERE"\nDATASET_APP_ID = "YOUR_DATASET_APP_ID_HERE"\nDATASET_ID = "YOUR_DATASET_ID_HERE"\nDATASET_VERSION_ID = "YOUR_DATASET_VERSION_ID_HERE"\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (("authorization", "Key " + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\npost_model_evaluations = stub.PostEvaluations(\n    service_pb2.PostEvaluationsRequest(\n        user_app_id=userDataObject,\n        eval_metrics=[\n            resources_pb2.EvalMetrics(\n                model=resources_pb2.Model(\n                    app_id=MODEL_APP_ID,\n                    user_id=MODEL_USER_ID,\n                    id=MODEL_ID,\n                    model_version=resources_pb2.ModelVersion(id=MODEL_VERSION_ID),\n                ),\n                ground_truth_dataset=resources_pb2.Dataset(\n                    user_id=DATASET_USER_ID,\n                    app_id=DATASET_APP_ID,\n                    id=DATASET_ID,\n                    version=resources_pb2.DatasetVersion(id=DATASET_VERSION_ID),\n                ),\n                \n            )\n        ],\n    ),\n    metadata=metadata,\n)\n\nif post_model_evaluations.status.code != status_code_pb2.SUCCESS:\n    print(post_model_evaluations.status)\n    raise Exception(\n        "Failed response, status: " + post_model_evaluations.status.description\n    )\n\nprint(post_model_evaluations)\n',u='\x3c!--index.html file--\x3e\n\n<script>\n    //////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and model evaluation details.\n    // Change these strings to run your own example.\n    /////////////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = "YOUR_USER_ID_HERE";\n    // Your PAT (Personal Access Token) can be found in the Account\'s Security section\n    const PAT = "YOUR_PAT_HERE";\n    const APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to evaluate your own model\n    const MODEL_APP_ID = "YOUR_MODEL_APP_ID_HERE";\n    const MODEL_USER_ID = "YOUR_MODEL_USER_ID_HERE";\n    const MODEL_ID = "YOUR_MODEL_ID_HERE";\n    const MODEL_VERSION_ID = "YOUR_MODEL_VERSION_HERE";\n    const DATASET_USER_ID = "YOUR_DATASET_USER_ID_HERE";\n    const DATASET_APP_ID = "YOUR_DATASET_APP_ID_HERE";\n    const DATASET_ID = "YOUR_DATASET_ID_HERE";\n    const DATASET_VERSION_ID = "YOUR_DATASET_VERSION_ID_HERE";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        "user_app_id": {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        "eval_metrics": [\n            {\n                "model": {\n                    "app_id": MODEL_APP_ID,\n                    "user_id": MODEL_USER_ID,\n                    "id": MODEL_ID,\n                    "model_version": {\n                        "id": MODEL_VERSION_ID\n                    }\n                },\n                "ground_truth_dataset": {\n                    "user_id": DATASET_USER_ID,\n                    "app_id": DATASET_APP_ID,\n                    "id": DATASET_ID,\n                    "version": {\n                        "id": DATASET_VERSION_ID\n                    }\n                }\n            }\n        ]\n\n    });\n\n    const requestOptions = {\n        method: "POST",\n        headers: {\n            "Accept": "application/json",\n            "Authorization": "Key " + PAT\n        },\n        body: raw\n    };\n\n    fetch(`https://api.clarifai.com/v2/evaluations`, requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log(\'error\', error));\n\n<\/script>',_='//index.js file\n\n/////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and model evaluation details.\n// Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = "YOUR_PAT_HERE";\nconst APP_ID = "YOUR_APP_ID_HERE";\n// Change these to evaluate your own model\nconst MODEL_APP_ID = "YOUR_MODEL_APP_ID_HERE";\nconst MODEL_USER_ID = "YOUR_MODEL_USER_ID_HERE";\nconst MODEL_ID = "YOUR_MODEL_ID_HERE";\nconst MODEL_VERSION_ID = "YOUR_MODEL_VERSION_HERE";\nconst DATASET_USER_ID = "YOUR_DATASET_USER_ID_HERE";\nconst DATASET_APP_ID = "YOUR_DATASET_APP_ID_HERE";\nconst DATASET_ID = "YOUR_DATASET_ID_HERE";\nconst DATASET_VERSION_ID = "YOUR_DATASET_VERSION_ID_HERE";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PostEvaluations(\n  {\n    user_app_id: {\n      user_id: USER_ID,\n      app_id: APP_ID,\n    },\n    eval_metrics: [\n      {\n        model: {\n          app_id: MODEL_APP_ID,\n          user_id: MODEL_USER_ID,\n          id: MODEL_ID,\n          model_version: {\n            id: MODEL_VERSION_ID\n          }\n        },\n        ground_truth_dataset: {\n          user_id: DATASET_USER_ID,\n          app_id: DATASET_APP_ID,\n          id: DATASET_ID,\n          version: {\n            id: DATASET_VERSION_ID\n          }\n        }\n      }\n    ]\n\n  },\n\n  metadata,\n\n  (err, response) => {\n    if (err) {\n      throw new Error(err);\n    }\n\n    if (response.status.code !== 10000) {\n      console.error(\'Post models failed, status:\', response.status);\n      throw new Error("Evaluate model failed, status: " + response.status.description);\n    }\n\n  }\n);\n',E='package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    //////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and model evaluation details.\n    // Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    // Your PAT (Personal Access Token) can be found in the Account\'s Security section\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to evaluate your own model\n    static final String MODEL_APP_ID = "YOUR_MODEL_APP_ID_HERE";\n    static final String MODEL_USER_ID = "YOUR_MODEL_USER_ID_HERE";\n    static final String MODEL_ID = "YOUR_MODEL_ID_HERE";\n    static final String MODEL_VERSION_ID = "YOUR_MODEL_VERSION_HERE";\n    static final String DATASET_USER_ID = "YOUR_DATASET_USER_ID_HERE";\n    static final String DATASET_APP_ID = "YOUR_DATASET_APP_ID_HERE";\n    static final String DATASET_ID = "YOUR_DATASET_ID_HERE";\n    static final String DATASET_VERSION_ID = "YOUR_DATASET_VERSION_ID_HERE";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n    \n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n                .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiEvalMetricsResponse postEvaluationsResponse = stub.postEvaluations(\n                PostEvaluationsRequest.newBuilder()\n                        .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n                        .addEvalMetrics(\n                                EvalMetrics.newBuilder()\n                                        .setModel(Model.newBuilder()\n                                                .setAppId(MODEL_APP_ID)\n                                                .setUserId(MODEL_USER_ID)\n                                                .setId(MODEL_ID)\n                                                .setModelVersion(ModelVersion.newBuilder()\n                                                        .setId(MODEL_VERSION_ID)\n                                                )\n                                        )\n                                        .setGroundTruthDataset(Dataset.newBuilder()\n                                                .setUserId(DATASET_USER_ID)\n                                                .setAppId(DATASET_APP_ID)\n                                                .setId(DATASET_ID)\n                                                .setVersion(DatasetVersion.newBuilder()\n                                                        .setId(DATASET_VERSION_ID)\n                                                )\n                                        )\n                        )\n                        .build()\n        );\n\n        if (postEvaluationsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Evaluate model failed, status: " + postEvaluationsResponse.getStatus());\n        }\n\n    }\n\n}\n',c='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n////////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and model evaluation details.\n// Change these strings to run your own example.\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change these to make your own evaluations\n$MODEL_APP_ID = "YOUR_MODEL_APP_ID_HERE";\n$MODEL_USER_ID = "YOUR_MODEL_USER_ID_HERE";\n$MODEL_ID = "YOUR_MODEL_ID_HERE";\n$MODEL_VERSION_ID = "YOUR_MODEL_VERSION_HERE";\n$DATASET_USER_ID = "YOUR_DATASET_USER_ID_HERE";\n$DATASET_APP_ID = "YOUR_DATASET_APP_ID_HERE";\n$DATASET_ID = "YOUR_DATASET_ID_HERE";\n$DATASET_VERSION_ID = "YOUR_DATASET_VERSION_ID_HERE";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\PostEvaluationsRequest;\nuse Clarifai\\Api\\Model;\nuse Clarifai\\Api\\ModelVersion;\nuse Clarifai\\Api\\EvalMetrics;\nuse Clarifai\\Api\\Dataset;\nuse Clarifai\\Api\\DatasetVersion;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID,\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PostEvaluations(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new PostEvaluationsRequest([\n        "user_app_id" => $userDataObject,\n        "eval_metrics" => [\n            new EvalMetrics([\n                "model" => new Model([\n                    "app_id" => $MODEL_APP_ID,\n                    "user_id" => $MODEL_USER_ID,\n                    "id" => $MODEL_ID,\n                    "model_version" => new ModelVersion([\n                        "id" => $MODEL_VERSION_ID\n                    ])\n\n                ]),\n                "ground_truth_dataset" => new Dataset([\n                    "user_id" => $DATASET_USER_ID,\n                    "app_id" => $DATASET_APP_ID,\n                    "id" => $DATASET_ID,\n                    "version" => new DatasetVersion([\n                        "id" => $DATASET_VERSION_ID\n                    ])\n                ])\n            ])\n        ]\n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure\n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription() . " " . $response->getStatus()->getDetails());\n}\n\n?>',p='curl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/evaluations" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n        "eval_metrics": [\n            {\n                "model": {\n                    "app_id": "YOUR_MODEL_APP_ID_HERE",\n                    "user_id": "YOUR_MODEL_USER_ID_HERE",\n                    "id": "YOUR_MODEL_ID_HERE",\n                    "model_version": {\n                        "id": "YOUR_MODEL_VERSION_HERE"\n                    }\n                },\n                "ground_truth_dataset": {\n                    "user_id": "YOUR_DATASET_USER_ID_HERE",\n                    "app_id": "YOUR_DATASET_APP_ID_HERE",\n                    "id": "YOUR_DATASET_ID_HERE",\n                    "version": {\n                        "id": "YOUR_DATASET_VERSION_ID_HERE"\n                    }\n                }\n            }\n        ]  \n  \n  }\'',d='############################################################################################\n# In this section, we set the user authentication, app ID, and model evaluation details.\n# Change these strings to run your own example.\n###########################################################################################\n\nUSER_ID = "YOUR_USER_ID_HERE"\n# Your PAT (Personal Access Token) can be found in the Account\'s Security section\nPAT = "YOUR_PAT_HERE"\nAPP_ID = "YOUR_APP_ID_HERE"\n# Change these to make your own evaluations\nMODEL_ID = "YOUR_MODEL_ID_HERE"\nMODEL_VERSION_ID = "YOUR_MODEL_VERSION_HERE"\nDATASET_ID = "YOUR_DATASET_ID_HERE"\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\nfrom google.protobuf.struct_pb2 import Struct\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nparams = Struct()\nparams.update({"dataset_id": DATASET_ID})\n\nmetadata = (("authorization", "Key " + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\npost_model_evaluations = stub.PostModelVersionEvaluations(\n    service_pb2.PostModelVersionEvaluationsRequest(\n        user_app_id=userDataObject,\n        model_id=MODEL_ID,\n        model_version_id=MODEL_VERSION_ID,\n        eval_metrics=[\n            resources_pb2.EvalMetrics(\n                eval_info=resources_pb2.EvalInfo(params=params),\n            )\n        ],\n    ),\n    metadata=metadata,\n)\n\nif post_model_evaluations.status.code != status_code_pb2.SUCCESS:\n    print(post_model_evaluations.status)\n    raise Exception("Failed response, status: " + post_model_evaluations.status.description)\n\nprint(post_model_evaluations)\n',D='\x3c!--index.html file--\x3e\n\n<script>\n    //////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and model evaluation details.\n    // Change these strings to run your own example.\n    /////////////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = "YOUR_USER_ID_HERE";\n    // Your PAT (Personal Access Token) can be found in the Account\'s Security section\n    const PAT = "YOUR_PAT_HERE";\n    const APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to make your own evaluations \n    const MODEL_ID = "YOUR_MODEL_ID_HERE";\n    const MODEL_VERSION_ID = "YOUR_MODEL_VERSION_HERE";    \n    const DATASET_ID = "YOUR_DATASET_ID_HERE";   \n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        "user_app_id": {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        "eval_metrics": [\n            {\n                "eval_info": {       \n                    "params": {\n                        "dataset_id": DATASET_ID\n                    }\n                }\n\n            }\n        ]\n\n    });\n\n    const requestOptions = {\n        method: "POST",\n        headers: {\n            "Accept": "application/json",\n            "Authorization": "Key " + PAT\n        },\n        body: raw\n    };\n\n    fetch(`https://api.clarifai.com/v2/users/${USER_ID}/apps/${APP_ID}/models/${MODEL_ID}/versions/${MODEL_VERSION_ID}/evaluations`, requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log(\'error\', error));\n\n<\/script>',I='//index.js file\n\n/////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and model evaluation details.\n// Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = "YOUR_PAT_HERE";\nconst APP_ID = "YOUR_APP_ID_HERE";\n// Change these to make your own evaluations\nconst MODEL_ID = "YOUR_MODEL_ID_HERE";\nconst MODEL_VERSION_ID = "YOUR_MODEL_VERSION_HERE";\nconst DATASET_ID = "YOUR_DATASET_ID_HERE";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PostModelVersionEvaluations(\n  {\n    user_app_id: {\n      user_id: USER_ID,\n      app_id: APP_ID,\n    },\n    model_id: MODEL_ID,\n    model_version_id: MODEL_VERSION_ID,\n    eval_metrics: [\n      {\n        eval_info: {   \n            params: {\n              dataset_id: DATASET_ID\n            }          \n        }\n      }\n    ]\n\n  },\n\n  metadata,\n\n  (err, response) => {\n    if (err) {\n      throw new Error(err);\n    }\n\n    if (response.status.code !== 10000) {\n      console.error(\'Post models failed, status:\', response.status);\n      throw new Error("Evaluate model failed, status: " + response.status.description);\n    }\n\n    console.log(response);\n\n  }\n);\n',A='package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.StatusCode;\nimport com.google.protobuf.Struct;\nimport com.google.protobuf.Value;\n\npublic class ClarifaiExample {\n\n    //////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and model evaluation details.\n    // Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    // Your PAT (Personal Access Token) can be found in the Account\'s Security section\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to make your own evaluations  \n    static final String MODEL_ID = "YOUR_MODEL_ID_HERE";\n    static final String MODEL_VERSION_ID = "YOUR_MODEL_VERSION_HERE";\n    static final String DATASET_ID = "YOUR_DATASET_ID_HERE";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n                .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        Struct.Builder params = Struct.newBuilder()\n                .putFields("dataset_id", Value.newBuilder().setStringValue(DATASET_ID).build());\n\n        MultiEvalMetricsResponse postEvaluationsResponse = stub.postModelVersionEvaluations(\n                PostModelVersionEvaluationsRequest.newBuilder()\n                        .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n                        .setModelId(MODEL_ID)\n                        .setModelVersionId(MODEL_VERSION_ID)\n                        .addEvalMetrics(\n                                EvalMetrics.newBuilder()\n                                        .setEvalInfo(EvalInfo.newBuilder()\n                                                .setParams(params)\n                                        )\n                        )\n                        .build()\n        );\n\n        if (postEvaluationsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Evaluate model failed, status: " + postEvaluationsResponse.getStatus());\n        }\n\n    }\n\n}\n',m='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n////////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and model evaluation details.\n// Change these strings to run your own example.\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change these to make your own evaluations\n$MODEL_ID = "YOUR_MODEL_ID_HERE";\n$MODEL_VERSION_ID = "YOUR_MODEL_VERSION_HERE";\n$DATASET_ID = "YOUR_DATASET_ID_HERE";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\PostModelVersionEvaluationsRequest;\nuse Clarifai\\Api\\EvalMetrics;\nuse Clarifai\\Api\\EvalInfo;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\nuse Google\\Protobuf\\Struct;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID,\n]);\n\n// create Struct instance\n$params = new Struct();\n$params->model_id = $DATASET_ID;\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PostModelVersionEvaluations(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new PostModelVersionEvaluationsRequest([\n        "user_app_id" => $userDataObject,\n        "model_id" => $MODEL_ID,\n        "model_version_id" => $MODEL_VERSION_ID,\n        "eval_metrics" => [\n            new EvalMetrics([\n                "eval_info" => new EvalInfo([\n                    "params" => $params\n                ]),\n\n            ])\n        ]\n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure\n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription() . " " . $response->getStatus()->getDetails());\n}\n\necho $response->serializeToJsonString();\n\n?>\n',R='curl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/models/YOUR_MODEL_ID_HERE/versions/YOUR_MODEL_VERSION_ID_HERE/evaluations" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n        "eval_metrics": [\n            {\n                "eval_info": { \n                    "params": {\n                        "dataset_id": "YOUR_DATASET_ID_HERE"\n                    }\n                }\n\n            }\n        ]  \n  \n  }\'\n  ',T={description:"Learn about model evaluation tools."},S="Evaluating Models",h={unversionedId:"api-guide/evaluate/README",id:"api-guide/evaluate/README",title:"Evaluating Models",description:"Learn about model evaluation tools.",source:"@site/docs/api-guide/evaluate/README.mdx",sourceDirName:"api-guide/evaluate",slug:"/api-guide/evaluate/",permalink:"/api-guide/evaluate/",draft:!1,editUrl:"https://github.com/Clarifai/docs/blob/main/docs/api-guide/evaluate/README.mdx",tags:[],version:"current",frontMatter:{description:"Learn about model evaluation tools."},sidebar:"tutorialSidebar",previous:{title:"Import Models",permalink:"/api-guide/model/import-model"},next:{title:"Interpreting Evaluations",permalink:"/api-guide/evaluate/interpreting-evaluations"}},O={},g=[{value:"How It Works",id:"how-it-works",level:2},{value:"Requirements",id:"requirements",level:2},{value:"Running Evaluation",id:"running-evaluation",level:2},{value:"PostModelVersionEvaluations",id:"postmodelversionevaluations",level:3},{value:"PostEvaluations",id:"postevaluations",level:3}],v={toc:g},f="wrapper";function P(e){let{components:n,...T}=e;return(0,s.yg)(f,(0,a.A)({},v,T,{components:n,mdxType:"MDXLayout"}),(0,s.yg)("h1",{id:"evaluating-models"},"Evaluating Models"),(0,s.yg)("p",null,(0,s.yg)("strong",{parentName:"p"},"Evaluate a model's performance")),(0,s.yg)("hr",null),(0,s.yg)("p",null,"Now that you've successfully trained the model, you may want to test its performance before using it in a production environment.\nThe Model Evaluation tool allows you to perform a cross validation on a specified model version. Once the evaluation is complete, you can view the various metrics that inform the model\u2019s performance."),(0,s.yg)("h2",{id:"how-it-works"},"How It Works"),(0,s.yg)("p",null,"Model Evaluation performs a K-split cross validation on data you used to train your custom model."),(0,s.yg)("p",null,(0,s.yg)("img",{alt:"cross validation",src:t(51979).A,width:"962",height:"946"})),(0,s.yg)("p",null,"In the cross validation process, it will: "),(0,s.yg)("ol",null,(0,s.yg)("li",{parentName:"ol"},"Set aside a random 1/K subset of the training data and designate as a test set; "),(0,s.yg)("li",{parentName:"ol"},"Train a new model with the remaining training data; "),(0,s.yg)("li",{parentName:"ol"},"Pass the test set data through this new model to make predictions; "),(0,s.yg)("li",{parentName:"ol"},"Compare the predictions against the test set\u2019s actual labels; and,"),(0,s.yg)("li",{parentName:"ol"},"Repeat steps 1",")"," through 4",")"," across K splits to average out the evaluation results.")),(0,s.yg)("h2",{id:"requirements"},"Requirements"),(0,s.yg)("p",null,"To run the evaluation on your custom model, it should meet the following criteria:"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"It should be a custom trained model version with:",(0,s.yg)("ol",{parentName:"li"},(0,s.yg)("li",{parentName:"ol"},"At least 2 concepts."),(0,s.yg)("li",{parentName:"ol"},"At least 10 training inputs per concept ","(","at least 50 inputs per concept is recommended",")",".")))),(0,s.yg)("admonition",{type:"caution"},(0,s.yg)("p",{parentName:"admonition"},"The evaluation may result in an error if the model version doesn\u2019t satisfy the requirements above.")),(0,s.yg)("admonition",{type:"info"},(0,s.yg)("p",{parentName:"admonition"},"The initialization code used in the following examples is outlined in detail on the ",(0,s.yg)("a",{parentName:"p",href:"https://docs.clarifai.com/api-guide/api-overview/api-clients/#client-installation-instructions"},"client installation page."))),(0,s.yg)("h2",{id:"running-evaluation"},"Running Evaluation"),(0,s.yg)("admonition",{type:"tip"},(0,s.yg)("p",{parentName:"admonition"},"If evaluating an ",(0,s.yg)("inlineCode",{parentName:"p"},"embedding-classifier")," model type, you need to set ",(0,s.yg)("inlineCode",{parentName:"p"},"use_kfold")," to ",(0,s.yg)("inlineCode",{parentName:"p"},"false")," in the ",(0,s.yg)("inlineCode",{parentName:"p"},"eval_info.params")," of the evaluation request. Here is an example:\n",(0,s.yg)("inlineCode",{parentName:"p"},'params.update({"dataset_id": DATASET_ID, "use_kfold": False})'))),(0,s.yg)("h3",{id:"postmodelversionevaluations"},"PostModelVersionEvaluations"),(0,s.yg)("p",null,"Below is an example of how you would use the ",(0,s.yg)("inlineCode",{parentName:"p"},"PostModelVersionEvaluations")," method to run an evaluation on a specific version of a custom model."),(0,s.yg)(o.A,{mdxType:"Tabs"},(0,s.yg)(i.A,{value:"python",label:"Python",mdxType:"TabItem"},(0,s.yg)(r.A,{className:"language-python",mdxType:"CodeBlock"},d)),(0,s.yg)(i.A,{value:"js_rest",label:"JavaScript (REST)",mdxType:"TabItem"},(0,s.yg)(r.A,{className:"language-javascript",mdxType:"CodeBlock"},D)),(0,s.yg)(i.A,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,s.yg)(r.A,{className:"language-javascript",mdxType:"CodeBlock"},I)),(0,s.yg)(i.A,{value:"java",label:"Java",mdxType:"TabItem"},(0,s.yg)(r.A,{className:"language-java",mdxType:"CodeBlock"},A)),(0,s.yg)(i.A,{value:"php",label:"PHP",mdxType:"TabItem"},(0,s.yg)(r.A,{className:"language-php",mdxType:"CodeBlock"},m)),(0,s.yg)(i.A,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,s.yg)(r.A,{className:"language-bash",mdxType:"CodeBlock"},R))),(0,s.yg)("h3",{id:"postevaluations"},"PostEvaluations"),(0,s.yg)("p",null,"Below is an example of how you would use the ",(0,s.yg)("inlineCode",{parentName:"p"},"PostEvaluations")," method to run an evaluation on a specific version of a custom model. The method allows you to choose models and datasets from different apps that you have access to."),(0,s.yg)(o.A,{mdxType:"Tabs"},(0,s.yg)(i.A,{value:"python",label:"Python",mdxType:"TabItem"},(0,s.yg)(r.A,{className:"language-python",mdxType:"CodeBlock"},l)),(0,s.yg)(i.A,{value:"js_rest",label:"JavaScript (REST)",mdxType:"TabItem"},(0,s.yg)(r.A,{className:"language-javascript",mdxType:"CodeBlock"},u)),(0,s.yg)(i.A,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,s.yg)(r.A,{className:"language-javascript",mdxType:"CodeBlock"},_)),(0,s.yg)(i.A,{value:"java",label:"Java",mdxType:"TabItem"},(0,s.yg)(r.A,{className:"language-java",mdxType:"CodeBlock"},E)),(0,s.yg)(i.A,{value:"php",label:"PHP",mdxType:"TabItem"},(0,s.yg)(r.A,{className:"language-php",mdxType:"CodeBlock"},c)),(0,s.yg)(i.A,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,s.yg)(r.A,{className:"language-bash",mdxType:"CodeBlock"},p))),(0,s.yg)("p",null,"Once the evaluation is complete, you can retrieve the results and analyze the performance of your custom model."),(0,s.yg)("p",null,"We'll talk about how to interpret a model's evaluation results in the next section. "),(0,s.yg)("admonition",{type:"tip"},(0,s.yg)("p",{parentName:"admonition"},"You can also learn how to perform evaluation on the Portal ",(0,s.yg)("a",{parentName:"p",href:"https://docs.clarifai.com/portal-guide/evaluate/"},"here"),". ")))}P.isMDXComponent=!0},51979:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/cross_validation-cfadf56b2e40cbff4a4709169d1b5640.jpg"}}]);
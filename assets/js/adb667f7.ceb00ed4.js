"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[7753],{58215:function(e,n,t){var o=t(67294);n.Z=function(e){var n=e.children,t=e.hidden,a=e.className;return o.createElement("div",{role:"tabpanel",hidden:t,className:a},n)}},26396:function(e,n,t){t.d(n,{Z:function(){return u}});var o=t(87462),a=t(67294),s=t(72389),r=t(79443);var i=function(){var e=(0,a.useContext)(r.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},l=t(63616),c=t(86010),p="tabItem_vU9c";function d(e){var n,t,s,r=e.lazy,d=e.block,u=e.defaultValue,_=e.values,f=e.groupId,w=e.className,m=a.Children.map(e.children,(function(e){if((0,a.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),h=null!=_?_:m.map((function(e){var n=e.props;return{value:n.value,label:n.label,attributes:n.attributes}})),E=(0,l.lx)(h,(function(e,n){return e.value===n.value}));if(E.length>0)throw new Error('Docusaurus error: Duplicate values "'+E.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var I=null===u?u:null!=(n=null!=u?u:null==(t=m.find((function(e){return e.props.default})))?void 0:t.props.value)?n:null==(s=m[0])?void 0:s.props.value;if(null!==I&&!h.some((function(e){return e.value===I})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+I+'" but none of its children has the corresponding value. Available values are: '+h.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var k=i(),D=k.tabGroupChoices,O=k.setTabGroupChoices,g=(0,a.useState)(I),b=g[0],T=g[1],R=[],N=(0,l.o5)().blockElementScrollPositionUntilNextRender;if(null!=f){var A=D[f];null!=A&&A!==b&&h.some((function(e){return e.value===A}))&&T(A)}var P=function(e){var n=e.currentTarget,t=R.indexOf(n),o=h[t].value;o!==b&&(N(n),T(o),null!=f&&O(f,o))},S=function(e){var n,t=null;switch(e.key){case"ArrowRight":var o=R.indexOf(e.currentTarget)+1;t=R[o]||R[0];break;case"ArrowLeft":var a=R.indexOf(e.currentTarget)-1;t=R[a]||R[R.length-1]}null==(n=t)||n.focus()};return a.createElement("div",{className:"tabs-container"},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,c.Z)("tabs",{"tabs--block":d},w)},h.map((function(e){var n=e.value,t=e.label,s=e.attributes;return a.createElement("li",(0,o.Z)({role:"tab",tabIndex:b===n?0:-1,"aria-selected":b===n,key:n,ref:function(e){return R.push(e)},onKeyDown:S,onFocus:P,onClick:P},s,{className:(0,c.Z)("tabs__item",p,null==s?void 0:s.className,{"tabs__item--active":b===n})}),null!=t?t:n)}))),r?(0,a.cloneElement)(m.filter((function(e){return e.props.value===b}))[0],{className:"margin-vert--md"}):a.createElement("div",{className:"margin-vert--md"},m.map((function(e,n){return(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==b})}))))}function u(e){var n=(0,s.Z)();return a.createElement(d,(0,o.Z)({key:String(n)},e))}},93483:function(e,n,t){t.r(n),t.d(n,{contentTitle:function(){return d},default:function(){return w},frontMatter:function(){return p},metadata:function(){return u},toc:function(){return _}});var o=t(87462),a=t(63366),s=(t(67294),t(3905)),r=t(26396),i=t(58215),l=t(19055),c=["components"],p={description:"Manage your Mesh Workflows.",sidebar_position:3},d="Setting Up Mesh Workflows",u={unversionedId:"api-guide/workflows/create-get-update-delete",id:"api-guide/workflows/create-get-update-delete",title:"Setting Up Mesh Workflows",description:"Manage your Mesh Workflows.",source:"@site/docs/api-guide/workflows/create-get-update-delete.md",sourceDirName:"api-guide/workflows",slug:"/api-guide/workflows/create-get-update-delete",permalink:"/api-guide/workflows/create-get-update-delete",tags:[],version:"current",sidebarPosition:3,frontMatter:{description:"Manage your Mesh Workflows.",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Input Nodes",permalink:"/api-guide/workflows/input_nodes"},next:{title:"Common Workflows",permalink:"/api-guide/workflows/common-workflows/"}},_=[{value:"Create",id:"create",children:[],level:2},{value:"Workflow Predict",id:"workflow-predict",children:[],level:2},{value:"Get",id:"get",children:[{value:"Get all Workflows in an App",id:"get-all-workflows-in-an-app",children:[],level:3},{value:"Get a Workflow by a Specific ID",id:"get-a-workflow-by-a-specific-id",children:[],level:3}],level:2},{value:"Update",id:"update",children:[{value:"Patch Workflow",id:"patch-workflow",children:[],level:3}],level:2},{value:"Delete",id:"delete",children:[{value:"Delete Workflow by ID",id:"delete-workflow-by-id",children:[],level:3},{value:"Delete all Workflows",id:"delete-all-workflows",children:[],level:3}],level:2}],f={toc:_};function w(e){var n=e.components,t=(0,a.Z)(e,c);return(0,s.kt)("wrapper",(0,o.Z)({},f,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"setting-up-mesh-workflows"},"Setting Up Mesh Workflows"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Manage your Mesh Workflows")),(0,s.kt)("hr",null),(0,s.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"The initialization code used in the following examples is outlined in detail on the ",(0,s.kt)("a",{parentName:"p",href:"https://docs.clarifai.com/api-guide/api-overview/api-clients/#client-installation-instructions"},"client installation page.")))),(0,s.kt)("h2",{id:"create"},"Create"),(0,s.kt)("p",null,"To create a new custom workflow, specify a list of model IDs that are to be included in the workflow. Since a model can have several versions, each model ID also requires a specific model version ID."),(0,s.kt)(r.Z,{mdxType:"Tabs"},(0,s.kt)(i.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,s.kt)(l.Z,{className:"language-python",mdxType:"CodeBlock"},"########################################################################################\n# In this section, we set the user authentication, app ID, and the details of the new\n# custom workflow we want to create. Change these strings to run your own example.\n########################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to create your own custom workflow\nWORKFLOW_ID = 'my-custom-workflow'\nNODE_ID_1 = 'food-concepts'\nMODEL_ID_1 = 'bd367be194cf45149e75f01d59f77ba7'\nMODEL_VERSION_ID_1 = 'dfebc169854e429086aceb8368662641'\n\nNODE_ID_2 = 'general-concepts'\nMODEL_ID_2 = 'aaa03c23b3724a16a56b629203edc62c'\nMODEL_VERSION_ID_2 = 'aa9ca48295b37401f8af92ad1af0d91d'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID) # The userDataObject is required when using a PAT\n\npost_workflows_response = stub.PostWorkflows(\n    service_pb2.PostWorkflowsRequest(\n      user_app_id=userDataObject,  \n      workflows=[\n        resources_pb2.Workflow(\n          id=WORKFLOW_ID,\n          nodes=[\n            resources_pb2.WorkflowNode(\n              id=NODE_ID_1,\n              model=resources_pb2.Model(\n                id=MODEL_ID_1,\n                model_version=resources_pb2.ModelVersion(\n                  id=MODEL_VERSION_ID_1\n                )\n              )\n            ),\n            resources_pb2.WorkflowNode(\n              id=NODE_ID_2,\n              model=resources_pb2.Model(\n                id=MODEL_ID_2,\n                model_version=resources_pb2.ModelVersion(\n                  id=MODEL_VERSION_ID_2\n                )\n              )\n            ),\n          ]\n        )\n      ]\n    ),\n    metadata=metadata\n)               \n\nif post_workflows_response.status.code != status_code_pb2.SUCCESS:\n    print(post_workflows_response.status)\n    raise Exception(\"Post workflows failed, status: \" + post_workflows_response.status.description) \n\n")),(0,s.kt)(i.Z,{value:"js_rest",label:"JavaScript (REST)",mdxType:"TabItem"},(0,s.kt)(l.Z,{className:"language-javascript",mdxType:"CodeBlock"},"\x3c!--index.html file--\x3e\n\n<script>\n    //////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the details of the new\n    // custom workflow we want to create. Change these strings to run your own example.\n    /////////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = 'YOUR_USER_ID_HERE';\n    // Your PAT (Personal Access Token) can be found in the portal under Authentification\n    const PAT = 'YOUR_PAT_HERE';\n    const APP_ID = 'YOUR_APP_ID_HERE';\n    // Change these to create your own custom workflow\n    const WORKFLOW_ID = 'my-custom-workflow';\n    const NODE_ID_1 = 'food-concepts';\n    const MODEL_ID_1 = 'bd367be194cf45149e75f01d59f77ba7';\n    const MODEL_VERSION_ID_1 = 'dfebc169854e429086aceb8368662641';\n\n    const NODE_ID_2 = 'general-concepts';\n    const MODEL_ID_2 = 'aaa03c23b3724a16a56b629203edc62c';\n    const MODEL_VERSION_ID_2 = 'aa9ca48295b37401f8af92ad1af0d91d';\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    // The first model is the Clarifai's Food model, and the second the Clarifai's General model.\n\n    const raw = JSON.stringify({\n        \"user_app_id\": {\n            \"user_id\": USER_ID,\n            \"app_id\": APP_ID\n        },\n        \"workflows\": [{\n            \"id\": WORKFLOW_ID,\n            \"nodes\": [\n                {\n                    \"id\": NODE_ID_1,\n                    \"model\": {\n                        \"id\": MODEL_ID_1,\n                        \"model_version\": {\n                            \"id\": MODEL_VERSION_ID_1\n                        }\n                    }\n                },\n                {\n                    \"id\": NODE_ID_2,\n                    \"model\": {\n                        \"id\": MODEL_ID_2,\n                        \"model_version\": {\n                            \"id\": MODEL_VERSION_ID_2\n                        }\n                    }\n                }\n            ]\n        }]\n    });\n\n    const requestOptions = {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        },\n        body: raw\n    };\n\n    fetch(`https://api.clarifai.com/v2/workflows`, requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n\n<\/script>")),(0,s.kt)(i.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,s.kt)(l.Z,{className:"language-javascript",mdxType:"CodeBlock"},"//index.js file\n\n//////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the details of the new\n// custom workflow we want to create. Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = 'YOUR_USER_ID_HERE';\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\nconst PAT = 'YOUR_PAT_HERE';\nconst APP_ID = 'YOUR_APP_ID_HERE';\n// Change these to create your own custom workflow\nconst WORKFLOW_ID = 'my-custom-workflow';\nconst NODE_ID_1 = 'food-concepts';\nconst MODEL_ID_1 = 'bd367be194cf45149e75f01d59f77ba7';\nconst MODEL_VERSION_ID_1 = 'dfebc169854e429086aceb8368662641';\n\nconst NODE_ID_2 = 'general-concepts';\nconst MODEL_ID_2 = 'aaa03c23b3724a16a56b629203edc62c';\nconst MODEL_VERSION_ID_2 = 'aa9ca48295b37401f8af92ad1af0d91d';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require(\"clarifai-nodejs-grpc\");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set(\"authorization\", \"Key \" + PAT);\n\nstub.PostWorkflows(\n    {\n        user_app_id: {\n            \"user_id\": USER_ID,\n            \"app_id\": APP_ID\n        },\n        workflows: [\n            {\n                id: WORKFLOW_ID,\n                nodes: [\n                    {\n                        id: NODE_ID_1,\n                        model: {\n                            id: MODEL_ID_1,\n                            model_version: {\n                                id: MODEL_VERSION_ID_1\n                            }\n                        }\n                    },\n                    {\n                        id: NODE_ID_2,\n                        model: {\n                            id: MODEL_ID_2,\n                            model_version: {\n                                id: MODEL_VERSION_ID_2\n                            }\n                        }\n                    },\n                ]\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error(\"Post workflows failed, status: \" + response.status.description);\n        }\n    }\n);")),(0,s.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,s.kt)(l.Z,{className:"language-java",mdxType:"CodeBlock"},'package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    //////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the details of the new\n    // custom workflow we want to create. Change these strings to run your own example.\n    /////////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to create your own custom workflow\n    static final String WORKFLOW_ID = "my-custom-workflow";\n    static final String NODE_ID_1 = "food-concepts";\n    static final String MODEL_ID_1 = "bd367be194cf45149e75f01d59f77ba7";\n    static final String MODEL_VERSION_ID_1 = "dfebc169854e429086aceb8368662641";\n\n    static final String NODE_ID_2 = "general-concepts";\n    static final String MODEL_ID_2 = "aaa03c23b3724a16a56b629203edc62c";\n    static final String MODEL_VERSION_ID_2 = "aa9ca48295b37401f8af92ad1af0d91d";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiWorkflowResponse postWorkflowsResponse = stub.postWorkflows(\n            PostWorkflowsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .addWorkflows(\n                Workflow.newBuilder()\n                .setId(WORKFLOW_ID)\n                .addNodes(\n                    WorkflowNode.newBuilder()\n                    .setId(NODE_ID_1)\n                    .setModel(\n                        Model.newBuilder()\n                        .setId(MODEL_ID_1)\n                        .setModelVersion(ModelVersion.newBuilder().setId(MODEL_VERSION_ID_1))\n                    )\n                )\n                .addNodes(\n                    WorkflowNode.newBuilder()\n                    .setId(NODE_ID_2)\n                    .setModel(\n                        Model.newBuilder()\n                        .setId(MODEL_ID_2)\n                        .setModelVersion(ModelVersion.newBuilder().setId(MODEL_VERSION_ID_2))\n                    )\n                )\n            ).build()\n        );\n\n        if (postWorkflowsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post workflows failed, status: " + postWorkflowsResponse.getStatus());\n        }\n\n    }\n\n}')),(0,s.kt)(i.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'# The first model is the Clarifai\'s Food model, and the second the Clarifai\'s General model.\n\ncurl -X POST \'https://api.clarifai.com/v2/workflows\' \\\n    -H \'Content-Type: application/json\' \\\n    -H \'Authorization: Key YOUR_API_KEY\' \\\n    --data-raw \'{\n      "workflows": [{\n        "id": "my-custom-workflow",\n        "nodes": [\n          {\n            "id": "food-concepts",\n            "model": {\n              "id": "bd367be194cf45149e75f01d59f77ba7",\n              "model_version": {\n                "id": "dfebc169854e429086aceb8368662641"\n              }\n            }\n          },\n          {\n            "id": "general-concepts",\n            "model": {\n              "id": "aaa03c23b3724a16a56b629203edc62c",\n              "model_version": {\n                "id": "aa9ca48295b37401f8af92ad1af0d91d"\n              }\n            }\n          }\n        ]\n      }]\n    }\'\n')))),(0,s.kt)("h2",{id:"workflow-predict"},"Workflow Predict"),(0,s.kt)("p",null,"You can predict using a workflow. The response will contain the predictions each model in the workflow returns for the input."),(0,s.kt)(r.Z,{mdxType:"Tabs"},(0,s.kt)(i.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,s.kt)(l.Z,{className:"language-python",mdxType:"CodeBlock"},"#############################################################################\n# In this section, we set the user authentication, app ID, workflow ID, and  \n# image URL. Change these strings to run your own example.\n##############################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to make your own predictions\nWORKFLOW_ID = 'my-custom-workflow'\nIMAGE_URL = 'https://samples.clarifai.com/metro-north.jpg'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID) # The userDataObject is required when using a PAT\n\npost_workflow_results_response = stub.PostWorkflowResults(\n    service_pb2.PostWorkflowResultsRequest(\n        user_app_id=userDataObject,  \n        workflow_id=WORKFLOW_ID,\n        inputs=[\n            resources_pb2.Input(\n                data=resources_pb2.Data(\n                    image=resources_pb2.Image(\n                        url=IMAGE_URL\n                    )\n                )\n            )\n        ]\n    ),\n    metadata=metadata\n)\nif post_workflow_results_response.status.code != status_code_pb2.SUCCESS:\n    print(post_workflow_results_response.status)\n    raise Exception(\"Post workflow results failed, status: \" + post_workflow_results_response.status.description)\n\n# We'll get one WorkflowResult for each input we used above. Because of one input, we have here one WorkflowResult\nresults = post_workflow_results_response.results[0]\n\n# Each model we have in the workflow will produce one output\nfor output in results.outputs:\n    model = output.model\n\n    print(\"Predicted concepts for the model `%s`\" % model.id)\n    for concept in output.data.concepts:\n        print(\"\\t%s %.2f\" % (concept.name, concept.value))       \n")),(0,s.kt)(i.Z,{value:"js_rest",label:"JavaScript (REST)",mdxType:"TabItem"},(0,s.kt)(l.Z,{className:"language-javascript",mdxType:"CodeBlock"},'\x3c!--index.html file--\x3e\n\n<script>\n  ///////////////////////////////////////////////////////////////////////////////////\n  // In this section, we set the user authentication, app ID, workflow ID, and\n  // image URL. Change these strings to run your own example.\n  ///////////////////////////////////////////////////////////////////////////////////\n\n  const USER_ID = "YOUR_USER_ID_HERE";\n  // Your PAT (Personal Access Token) can be found in the portal under Authentification\n  const PAT = "YOUR_PAT_HERE";\n  const APP_ID = "YOUR_APP_ID_HERE";\n  // Change these to make your own predictions\n  const WORKFLOW_ID = "my-custom-workflow";\n  const IMAGE_URL = "https://samples.clarifai.com/metro-north.jpg";\n\n  ///////////////////////////////////////////////////////////////////////////////////\n  // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n  /////////////////////////////////////////////////////////////////////////////////// \n\n  const raw = JSON.stringify({\n    "user_app_id": {\n      "user_id": USER_ID,\n      "app_id": APP_ID\n    },\n    "inputs": [\n      {\n        "data": {\n          "image": {\n            "url": IMAGE_URL\n          }\n        }\n      }\n    ]\n  });\n\n  const requestOptions = {\n    method: \'POST\',\n    headers: {\n      \'Accept\': \'application/json\',\n      \'Authorization\': \'Key \' + PAT\n    },\n    body: raw\n  };\n\n  fetch(`https://api.clarifai.com/v2/workflows/${WORKFLOW_ID}/results`, requestOptions)\n    .then(response => response.text())\n    .then(result => console.log(result))\n    .catch(error => console.log(\'error\', error));\n<\/script>')),(0,s.kt)(i.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,s.kt)(l.Z,{className:"language-javascript",mdxType:"CodeBlock"},'//index.js file\n\n///////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, workflow ID, and\n// image URL. Change these strings to run your own example.\n///////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\nconst PAT = "YOUR_PAT_HERE";\nconst APP_ID = "YOUR_APP_ID_HERE";\n// Change these to make your own predictions\nconst WORKFLOW_ID = "my-custom-workflow";\nconst IMAGE_URL = "https://samples.clarifai.com/metro-north.jpg";\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PostWorkflowResults(\n  {\n    user_app_id: {\n      "user_id": USER_ID,\n      "app_id": APP_ID,\n    },\n    workflow_id: WORKFLOW_ID,\n    inputs: [{ data: { image: { url: IMAGE_URL } } }],\n  },\n  metadata,\n  (err, response) => {\n    if (err) {\n      throw new Error(err);\n    }\n\n    if (response.status.code !== 10000) {\n      throw new Error(\n        "Post workflow results failed, status: " + response.status.description\n      );\n    }\n\n    // We\'ll get one WorkflowResult for each input we used above. Because of one input, we have here\n    // one WorkflowResult.\n    const results = response.results[0];\n\n    // Each model we have in the workflow will produce one output.\n    for (const output of results.outputs) {\n      const model = output.model;\n\n      console.log("Predicted concepts for the model `" + model.id + "`:");\n      for (const concept of output.data.concepts) {\n        console.log("\\t" + concept.name + " " + concept.value);\n      }\n    }\n  }\n);\n')),(0,s.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,s.kt)(l.Z,{className:"language-java",mdxType:"CodeBlock"},'package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, workflow ID, and\n    // image URL. Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to make your own predictions\n    static final String WORKFLOW_ID = "my-custom-workflow";\n    static final String IMAGE_URL = "https://samples.clarifai.com/metro-north.jpg";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        PostWorkflowResultsResponse postWorkflowResultsResponse = stub.postWorkflowResults(\n            PostWorkflowResultsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .setWorkflowId(WORKFLOW_ID)\n            .addInputs(\n                Input.newBuilder().setData(\n                    Data.newBuilder().setImage(\n                        Image.newBuilder().setUrl(IMAGE_URL)\n                    )\n                )\n            )\n            .build()\n        );\n\n        if (postWorkflowResultsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post workflow results failed, status: " + postWorkflowResultsResponse.getStatus());\n        }\n\n        // We\'ll get one WorkflowResult for each input we used above. Because of one input, we have here\n        // one WorkflowResult.\n        WorkflowResult results = postWorkflowResultsResponse.getResults(0);\n\n        // Each model we have in the workflow will produce one output.\n        for (Output output: results.getOutputsList()) {\n            Model model = output.getModel();\n\n            System.out.println("Predicted concepts for the model `" + model.getId() + "`:");\n            for (Concept concept: output.getData().getConceptsList()) {\n                System.out.printf("\\t%s %.2f%n", concept.getName(), concept.getValue());\n            }\n        }\n\n    }\n\n}')),(0,s.kt)(i.Z,{value:"csharp",label:"C#",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nvar response = client.PostModelOutputs(\n    new PostModelOutputsRequest()\n    {\n        UserAppId = new UserAppIDSet()\n        { \n            UserId = "excaliburne",\n            AppId = "moderation-test"\n        },\n        ModelId = "aaa03c23b3724a16a56b629203edc62c", // <- This is the general model_id\n        Inputs =\n        {\n            new List<Input>()\n            {\n                new Input()\n                {\n                    Data = new Data()\n                    {\n                        Image = new Image()\n                        {\n                            Url = "https://samples.clarifai.com/dog2.jpeg"\n                        }\n                    }\n                }\n            }\n        }\n    },\n    metadata\n);\n\nif (response.Status.Code != StatusCode.Success)\n    throw new Exception("Request failed, response: " + response);\n\nConsole.WriteLine("Predicted concepts:");\nforeach (var concept in response.Outputs[0].Data.Concepts)\n{\n    Console.WriteLine($"{concept.Name, 15} {concept.Value:0.00}");\n}\n'))),(0,s.kt)(i.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST \\\n  -H \'authorization: Key YOUR_API_KEY\' \\\n  -H \'content-type: application/json\' \\\n  -d \'{\n    "inputs": [\n        {\n          "data": {\n            "image": {\n              "url": "https://samples.clarifai.com/metro-north.jpg"\n          }\n        }\n      }\n    ]\n}\'\\\nhttps://api.clarifai.com/v2/workflows/{YOUR_WORKFLOW_ID}/results\n')))),(0,s.kt)("h2",{id:"get"},"Get"),(0,s.kt)("h3",{id:"get-all-workflows-in-an-app"},"Get all Workflows in an App"),(0,s.kt)("p",null,"You can return all custom workflows in your app."),(0,s.kt)(r.Z,{mdxType:"Tabs"},(0,s.kt)(i.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,s.kt)(l.Z,{className:"language-python",mdxType:"CodeBlock"},"###################################################################\n# In this section, we set the user authentication and app ID.  \n# Change these strings to run your own example.\n###################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID) # The userDataObject is required when using a PAT\n\nlist_workflows_response = stub.ListWorkflows(\n    service_pb2.ListWorkflowsRequest(\n        user_app_id=userDataObject  \n    ),\n    metadata=metadata\n)\n\nif list_workflows_response.status.code != status_code_pb2.SUCCESS:\n    print(list_workflows_response.status)\n    raise Exception(\"List workflows failed, status: \" + list_workflows_response.status.description)\n\nfor workflow in list_workflows_response.workflows:\n    print(f\"The workflow {workflow.id} consists of these models:\")\n    for workflow_node in workflow.nodes:\n        model = workflow_node.model\n        print(model.id)\n    print()")),(0,s.kt)(i.Z,{value:"js_rest",label:"JavaScript (REST)",mdxType:"TabItem"},(0,s.kt)(l.Z,{className:"language-javascript",mdxType:"CodeBlock"},'\x3c!--index.html file--\x3e\n\n<script>\n  ///////////////////////////////////////////////////////////////////////\n  // In this section, we set the user authentication and app ID.\n  // Change these strings to run your own example.\n  ///////////////////////////////////////////////////////////////////////\n\n  // Your PAT (Personal Access Token) can be found in the portal under Authentification\n  const PAT = "YOUR_PAT_HERE";\n  const APP_ID = "YOUR_APP_ID_HERE";\n\n  ///////////////////////////////////////////////////////////////////////////////////\n  // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n  ///////////////////////////////////////////////////////////////////////////////////\n\n  const requestOptions = {\n    method: "GET",\n    headers: {\n      "Accept": "application/json",\n      "Authorization": "Key " + PAT,\n    },\n  };\n\n  fetch(\n    `https://api.clarifai.com/v2/users/me/apps/${APP_ID}/workflows`,\n    requestOptions\n  )\n    .then((response) => response.text())\n    .then((result) => console.log(result))\n    .catch((error) => console.log("error", error));\n<\/script>\n')),(0,s.kt)(i.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,s.kt)(l.Z,{className:"language-javascript",mdxType:"CodeBlock"},'//index.js file\n\n///////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication and app ID.\n// Change these strings to run your own example.\n///////////////////////////////////////////////////////////////////////\n\nconst USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\nconst PAT = "YOUR_PAT_HERE";\nconst APP_ID = "YOUR_APP_ID_HERE";\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.ListWorkflows(\n  {\n    user_app_id: {\n      "user_id": USER_ID,\n      "app_id": APP_ID\n    },\n  },\n  metadata,\n  (err, response) => {\n    if (err) {\n      throw new Error(err);\n    }\n\n    if (response.status.code !== 10000) {\n      throw new Error(\n        "List workflows failed, status: " + response.status.description\n      );\n    }\n\n    for (const workflow of response.workflows) {\n      console.log("The workflow " + workflow.id + " consists of these models:");\n      for (const workflowNode of workflow.nodes) {\n        const model = workflowNode.model;\n        console.log(model.id);\n      }\n      console.log();\n    }\n  }\n);\n')),(0,s.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,s.kt)(l.Z,{className:"language-java",mdxType:"CodeBlock"},'package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    ///////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication and app ID.\n    // Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiWorkflowResponse listWorkflowsResponse = stub.listWorkflows(\n            ListWorkflowsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .build());\n\n        if (listWorkflowsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("List workflows failed, status: " + listWorkflowsResponse.getStatus());\n        }\n\n        for (Workflow workflow: listWorkflowsResponse.getWorkflowsList()) {\n            System.out.println("The workflow " + workflow.getId() + " consists of these models:");\n            for (WorkflowNode workflowNode: workflow.getNodesList()) {\n                Model model = workflowNode.getModel();\n                System.out.println(model.getId());\n            }\n            System.out.println();\n        }\n\n    }\n\n}')),(0,s.kt)(i.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"curl -X GET 'https://api.clarifai.com/v2/workflows' \\\n    -H 'Content-Type: application/json' \\\n    -H 'Authorization: Key YOUR_API_KEY'\n")))),(0,s.kt)("h3",{id:"get-a-workflow-by-a-specific-id"},"Get a Workflow by a Specific ID"),(0,s.kt)("p",null,"You can return information about a specific workflow."),(0,s.kt)(r.Z,{mdxType:"Tabs"},(0,s.kt)(i.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,s.kt)(l.Z,{className:"language-python",mdxType:"CodeBlock"},"############################################################################\n# In this section, we set the user authentication, app ID, and workflow ID. \n# Change these strings to run your own example.\n#############################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change this to your own workflow ID \nWORKFLOW_ID = 'my-custom-workflow'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID) # The userDataObject is required when using a PAT\n\nget_workflow_response = stub.GetWorkflow(\n    service_pb2.GetWorkflowRequest(\n        user_app_id=userDataObject,  \n        workflow_id=WORKFLOW_ID\n    ),\n    metadata=metadata\n)\n\nif get_workflow_response.status.code != status_code_pb2.SUCCESS:\n    print(get_workflow_response.status)\n    raise Exception(\"Get workflow failed, status: \" + get_workflow_response.status.description)\n\nworkflow = get_workflow_response.workflow\nprint(f\"The workflow consists of these models:\")\nfor workflow_node in workflow.nodes:\n    model = workflow_node.model\n    print(model.id)")),(0,s.kt)(i.Z,{value:"js_rest",label:"JavaScript (REST)",mdxType:"TabItem"},(0,s.kt)(l.Z,{className:"language-javascript",mdxType:"CodeBlock"},'\x3c!--index.html file--\x3e\n\n<script>\n  ///////////////////////////////////////////////////////////////////////////////\n  // In this section, we set the user authentication, app ID, and workflow ID.\n  // Change these strings to run your own example.\n  //////////////////////////////////////////////////////////////////////////////\n\n  // Your PAT (Personal Access Token) can be found in the portal under Authentification\n  const PAT = "YOUR_PAT_HERE";\n  const APP_ID = "YOUR_APP_ID_HERE";\n  // Change this to your own workflow ID\n  const WORKFLOW_ID = "my-custom-workflow";\n\n  ///////////////////////////////////////////////////////////////////////////////////\n  // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n  ///////////////////////////////////////////////////////////////////////////////////\n\n  const requestOptions = {\n    method: "GET",\n    headers: {\n      "Accept": "application/json",\n      "Authorization": "Key " + PAT,\n    },\n  };\n\n  fetch(\n    `https://api.clarifai.com/v2/users/me/apps/${APP_ID}/workflows/${WORKFLOW_ID}`,\n    requestOptions\n  )\n    .then((response) => response.text())\n    .then((result) => console.log(result))\n    .catch((error) => console.log("error", error));\n<\/script>')),(0,s.kt)(i.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,s.kt)(l.Z,{className:"language-javascript",mdxType:"CodeBlock"},'//index.js file\n\n///////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and workflow ID.\n// Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\nconst PAT = "YOUR_PAT_HERE";\nconst APP_ID = "YOUR_APP_ID_HERE";\n// Change this to your own workflow ID\nconst WORKFLOW_ID = "my-custom-workflow";\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.GetWorkflow(\n  {\n    user_app_id: {\n      "user_id": USER_ID,\n      "app_id": APP_ID,\n    },\n    workflow_id: WORKFLOW_ID,\n  },\n  metadata,\n  (err, response) => {\n    if (err) {\n      throw new Error(err);\n    }\n\n    if (response.status.code !== 10000) {\n      throw new Error(\n        "Get workflow failed, status: " + response.status.description\n      );\n    }\n\n    const workflow = response.workflow;\n\n    console.log("The workflow consists of these models:");\n    for (const workflowNode of workflow.nodes) {\n      const model = workflowNode.model;\n      console.log(model.id);\n    }\n  }\n);\n')),(0,s.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nSingleWorkflowResponse getWorkflowResponse = stub.getWorkflow(\n    GetWorkflowRequest.newBuilder()\n        .setWorkflowId("food-and-general")\n        .build()\n);\n\nif (getWorkflowResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n    throw new RuntimeException("Get workflow failed, status: " + getWorkflowResponse.getStatus());\n}\n\nWorkflow workflow = getWorkflowResponse.getWorkflow();\n\nSystem.out.println("The workflow consists of these models:");\nfor (WorkflowNode workflowNode : workflow.getNodesList()) {\n    Model model = workflowNode.getModel();\n    System.out.println(model.getId());\n}\n'))),(0,s.kt)(i.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"curl -X GET 'https://api.clarifai.com/v2/workflows/my-custom-workflow' \\\n    -H 'Content-Type: application/json' \\\n    -H 'Authorization: Key YOUR_API_KEY'\n")))),(0,s.kt)("h2",{id:"update"},"Update"),(0,s.kt)("h3",{id:"patch-workflow"},"Patch Workflow"),(0,s.kt)("p",null,"You can change a workflow; that is, change the models of which the workflow consists."),(0,s.kt)("p",null,"The possible actions are ",(0,s.kt)("inlineCode",{parentName:"p"},"overwrite"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"merge"),", and ",(0,s.kt)("inlineCode",{parentName:"p"},"remove"),"."),(0,s.kt)(r.Z,{mdxType:"Tabs"},(0,s.kt)(i.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,s.kt)(l.Z,{className:"language-python",mdxType:"CodeBlock"},"###################################################################################\n# In this section, we set the user authentication, app ID, and the details of the \n# workflow we want to update. Change these strings to run your own example.\n###################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to update your own workflow \nWORKFLOW_ID = 'my-custom-workflow'\nNODE_ID_1 = 'travel-concepts'\nMODEL_ID_1 = 'ccc28c313d69466f836ab83287a54ed9'\nMODEL_VERSION_ID_1 = 'cce28c313d69466f836ab83287a54ed9'\n\nNODE_ID_2 = 'nsfw-concepts'\nMODEL_ID_2 = 'ccc76d86d2004ed1a38ba0cf39ecb4b1'\nMODEL_VERSION_ID_2 = 'cc76a92beaeb4d8495a58ba197998158'\n\nNODE_ID_3 = 'wedding-concepts'\nMODEL_ID_3 = 'c386b7a870114f4a87477c0824499348'\nMODEL_VERSION_ID_3 = '787cc9a002164250800598d36b072384'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID) # The userDataObject is required when using a PAT\n\npatch_workflows_response = stub.PatchWorkflows(\n    service_pb2.PatchWorkflowsRequest(\n      user_app_id=userDataObject,  \n      action=\"overwrite\",\n      workflows=[\n        resources_pb2.Workflow(\n          id=WORKFLOW_ID,\n          nodes=[\n            resources_pb2.WorkflowNode(\n              id=NODE_ID_1,\n              model=resources_pb2.Model(\n                id=MODEL_ID_1,\n                model_version=resources_pb2.ModelVersion(\n                  id=MODEL_VERSION_ID_1\n                )\n              )\n            ),\n            resources_pb2.WorkflowNode(\n              id=NODE_ID_2,\n              model=resources_pb2.Model(\n                id=MODEL_ID_2,\n                model_version=resources_pb2.ModelVersion(\n                  id=MODEL_VERSION_ID_2\n                )\n              )\n            ),\n            resources_pb2.WorkflowNode(\n              id=NODE_ID_3,\n              model=resources_pb2.Model(\n                id=MODEL_ID_3,\n                model_version=resources_pb2.ModelVersion(\n                  id=MODEL_VERSION_ID_3\n                )\n              )\n            ),\n          ]\n        )\n      ]\n    ),\n    metadata=metadata\n)\n\nif patch_workflows_response.status.code != status_code_pb2.SUCCESS:\n    print(patch_workflows_response.status)\n    raise Exception(\"Patch workflows failed, status: \" + patch_workflows_response.status.description)")),(0,s.kt)(i.Z,{value:"js_rest",label:"JavaScript (REST)",mdxType:"TabItem"},(0,s.kt)(l.Z,{className:"language-javascript",mdxType:"CodeBlock"},'\x3c!--index.html file--\x3e\n\n<script>\n  ///////////////////////////////////////////////////////////////////////////////////////\n  // In this section, we set the user authentication, app ID, and the details of the\n  // workflow we want to update. Change these strings to run your own example\n  ///////////////////////////////////////////////////////////////////////////////////////\n\n  const USER_ID = \'YOUR_USER_ID_HERE\';\n  // Your PAT (Personal Access Token) can be found in the portal under Authentification\n  const PAT = \'YOUR_PAT_HERE\';\n  const APP_ID = \'YOUR_APP_ID_HERE\';\n  // Change these to update your own workflow\n  const WORKFLOW_ID = "my-custom-workflow";\n  const NODE_ID_1 = "travel-concepts";\n  const MODEL_ID_1 = "ccc28c313d69466f836ab83287a54ed9";\n  const MODEL_VERSION_ID_1 = "cce28c313d69466f836ab83287a54ed9";\n\n  const NODE_ID_2 = "nsfw-concepts";\n  const MODEL_ID_2 = "ccc76d86d2004ed1a38ba0cf39ecb4b1";\n  const MODEL_VERSION_ID_2 = "cc76a92beaeb4d8495a58ba197998158";\n\n  const NODE_ID_3 = "wedding-concepts";\n  const MODEL_ID_3 = "c386b7a870114f4a87477c0824499348";\n  const MODEL_VERSION_ID_3 = "787cc9a002164250800598d36b072384";\n\n  ///////////////////////////////////////////////////////////////////////////////////\n  // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n  ///////////////////////////////////////////////////////////////////////////////////\n\n  const raw = JSON.stringify({\n    "user_app_id": {\n      "user_id": USER_ID,\n      "app_id": APP_ID\n    },\n    "action": "overwrite",\n    "workflows": [\n      {\n        "id": WORKFLOW_ID,\n        "nodes": [\n          {\n            "id": NODE_ID_1,\n            "model": {\n              "id": MODEL_ID_1,\n              "model_version": {\n                "id": MODEL_VERSION_ID_1\n              }\n            }\n          },\n          {\n            "id": NODE_ID_2,\n            "model": {\n              "id": MODEL_ID_2,\n              "model_version": {\n                "id": MODEL_VERSION_ID_2\n              }\n            }\n          },\n          {\n            "id": NODE_ID_3,\n            "model": {\n              "id": MODEL_ID_3,\n              "model_version": {\n                "id": MODEL_VERSION_ID_3\n              }\n            }\n          }\n        ]\n      }\n    ]\n  });\n\n  const requestOptions = {\n    method: "PATCH",\n    headers: {\n      "Accept": \'application/json\',\n      "Authorization": \'Key \' + PAT\n    },\n    body: raw\n  };\n\n  fetch(`https://api.clarifai.com/v2/workflows`, requestOptions)\n    .then(response => response.text())\n    .then(result => console.log(result))\n    .catch(error => console.log(\'error\', error));\n\n<\/script>')),(0,s.kt)(i.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,s.kt)(l.Z,{className:"language-javascript",mdxType:"CodeBlock"},'//index.js file\n\n///////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the details of the\n// workflow we want to update. Change these strings to run your own example\n///////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\nconst PAT = "YOUR_PAT_HERE";\nconst APP_ID = "YOUR_APP_ID_HERE";\n// Change these to update your own workflow\nconst WORKFLOW_ID = "my-custom-workflow";\nconst NODE_ID_1 = "travel-concepts";\nconst MODEL_ID_1 = "ccc28c313d69466f836ab83287a54ed9";\nconst MODEL_VERSION_ID_1 = "cce28c313d69466f836ab83287a54ed9";\n\nconst NODE_ID_2 = "nsfw-concepts";\nconst MODEL_ID_2 = "ccc76d86d2004ed1a38ba0cf39ecb4b1";\nconst MODEL_VERSION_ID_2 = "cc76a92beaeb4d8495a58ba197998158";\n\nconst NODE_ID_3 = "wedding-concepts";\nconst MODEL_ID_3 = "c386b7a870114f4a87477c0824499348";\nconst MODEL_VERSION_ID_3 = "787cc9a002164250800598d36b072384";\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PatchWorkflows(\n  {\n    user_app_id: {\n      "user_id": USER_ID,\n      "app_id": APP_ID,\n    },\n    action: "overwrite",\n    workflows: [\n      {\n        id: WORKFLOW_ID,\n        nodes: [\n          {\n            id: NODE_ID_1,\n            model: {\n              id: MODEL_ID_1,\n              model_version: {\n                id: MODEL_VERSION_ID_1,\n              },\n            },\n          },\n          {\n            id: NODE_ID_2,\n            model: {\n              id: MODEL_ID_2,\n              model_version: {\n                id: MODEL_VERSION_ID_2,\n              },\n            },\n          },\n          {\n            id: NODE_ID_3,\n            model: {\n              id: MODEL_ID_3,\n              model_version: {\n                id: MODEL_VERSION_ID_3,\n              },\n            },\n          },\n        ],\n      },\n    ],\n  },\n  metadata,\n  (err, response) => {\n    if (err) {\n      throw new Error(err);\n    }\n\n    if (response.status.code !== 10000) {\n      throw new Error(\n        "Patch workflows failed, status: " + response.status.description\n      );\n    }\n  }\n);\n')),(0,s.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nMultiWorkflowResponse patchWorkflowsResponse = stub.patchWorkflows(\n    PatchWorkflowsRequest.newBuilder()\n        .setAction("overwrite")\n        .addWorkflows(\n            Workflow.newBuilder()\n                .setId("my-custom-workflow")\n                .addNodes(\n                    WorkflowNode.newBuilder()\n                        .setId("travel-concepts")\n                        .setModel(\n                            Model.newBuilder()\n                                .setId("ccc28c313d69466f836ab83287a54ed9")\n                                .setModelVersion(ModelVersion.newBuilder().setId("cce28c313d69466f836ab83287a54ed9"))\n                        )\n                )\n                .addNodes(\n                    WorkflowNode.newBuilder()\n                        .setId("nsfw-concepts")\n                        .setModel(\n                            Model.newBuilder()\n                                .setId("ccc76d86d2004ed1a38ba0cf39ecb4b1")\n                                .setModelVersion(ModelVersion.newBuilder().setId("cc76a92beaeb4d8495a58ba197998158"))\n                        )\n                )\n                .addNodes(\n                    WorkflowNode.newBuilder()\n                        .setId("wedding-concepts")\n                        .setModel(\n                            Model.newBuilder()\n                                .setId("c386b7a870114f4a87477c0824499348")\n                                .setModelVersion(ModelVersion.newBuilder().setId("787cc9a002164250800598d36b072384"))\n                        )\n                )\n        ).build()\n);\n\nif (patchWorkflowsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n    throw new RuntimeException("Patch workflows failed, status: " + patchWorkflowsResponse.getStatus());\n}\n'))),(0,s.kt)(i.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'# Supported actions are: overwrite, merge, remove.\n\ncurl -X PATCH \'https://api.clarifai.com/v2/workflows\' \\\n    -H \'Content-Type: application/json\' \\\n    -H \'Authorization: Key YOUR_API_KEY\' \\\n    --data-raw \'{\n        "action": "overwrite",\n        "workflows": [\n            {\n                "id": "my-custom-workflow",\n                "nodes": [\n                    {\n                        "id": "travel-concepts",\n                        "model": {\n                            "id": "ccc28c313d69466f836ab83287a54ed9",\n                            "model_version": {\n                                "id": "cce28c313d69466f836ab83287a54ed9"\n                            }\n                        }\n                    },\n                    {\n                        "id": "nsfw-concepts",\n                        "model": {\n                            "id": "ccc76d86d2004ed1a38ba0cf39ecb4b1",\n                            "model_version": {\n                                "id": "cc76a92beaeb4d8495a58ba197998158"\n                            }\n                        }\n                    },\n                    {\n                        "id": "wedding-concepts",\n                        "model": {\n                            "id": "c386b7a870114f4a87477c0824499348",\n                            "model_version": {\n                                "id": "787cc9a002164250800598d36b072384"\n                            }\n                        }\n                    }\n                ]\n            }\n        ]\n    }\'\n')))),(0,s.kt)("h2",{id:"delete"},"Delete"),(0,s.kt)("h3",{id:"delete-workflow-by-id"},"Delete Workflow by ID"),(0,s.kt)("p",null,"You can delete a specific workflow."),(0,s.kt)(r.Z,{mdxType:"Tabs"},(0,s.kt)(i.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,s.kt)(l.Z,{className:"language-python",mdxType:"CodeBlock"},"###################################################################################\n# In this section, we set the user authentication, app ID, and the ID of the \n# workflow we want to delete. Change these strings to run your own example.\n###################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change this to delete your own workflow \nWORKFLOW_ID = 'my-custom-workflow'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID) # The userDataObject is required when using a PAT\n\ndelete_workflow_response = stub.DeleteWorkflow(\n    service_pb2.DeleteWorkflowRequest(\n      user_app_id=userDataObject,  \n      workflow_id=WORKFLOW_ID\n    ),\n    metadata=metadata\n)\n\nif delete_workflow_response.status.code != status_code_pb2.SUCCESS:\n    print(delete_workflow_response.status)\n    raise Exception(\"Delete workflow failed, status: \" + delete_workflow_response.status.description)\n")),(0,s.kt)(i.Z,{value:"js_rest",label:"JavaScript (REST)",mdxType:"TabItem"},(0,s.kt)(l.Z,{className:"language-javascript",mdxType:"CodeBlock"},'\x3c!--index.html file--\x3e\n\n<script>\n  ///////////////////////////////////////////////////////////////////////////////////\n  // In this section, we set the user authentication, app ID, and the ID of the\n  // workflow we want to delete. Change these strings to run your own example.\n  ///////////////////////////////////////////////////////////////////////////////////\n\n  // Your PAT (Personal Access Token) can be found in the portal under Authentification\n  const PAT = "YOUR_PAT_HERE";\n  const APP_ID = "YOUR_APP_ID_HERE";\n  // Change this to delete your own workflow\n  const WORKFLOW_ID = "my-custom-workflow";\n\n  ///////////////////////////////////////////////////////////////////////////////////\n  // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n  ///////////////////////////////////////////////////////////////////////////////////\n\n  const requestOptions = {\n    method: "DELETE",\n    headers: {\n      "Accept": "application/json",\n      "Authorization": "Key " + PAT,\n    },\n  };\n\n  fetch(\n    `https://api.clarifai.com/v2/users/me/apps/${APP_ID}/workflows/${WORKFLOW_ID}`,\n    requestOptions\n  )\n    .then((response) => response.text())\n    .then((result) => console.log(result))\n    .catch((error) => console.log("error", error));\n<\/script>')),(0,s.kt)(i.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,s.kt)(l.Z,{className:"language-javascript",mdxType:"CodeBlock"},'//index.js file\n\n//////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the ID of the\n// workflow we want to delete. Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\nconst PAT = "YOUR_PAT_HERE";\nconst APP_ID = "YOUR_APP_ID_HERE";\n// Change this to delete your own workflow\nconst WORKFLOW_ID = "my-custom-workflow";\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.DeleteWorkflow(\n  {\n    user_app_id: {\n      "user_id": USER_ID,\n      "app_id": APP_ID,\n    },\n    workflow_id: WORKFLOW_ID,\n  },\n  metadata,\n  (err, response) => {\n    if (err) {\n      throw new Error(err);\n    }\n\n    if (response.status.code !== 10000) {\n      throw new Error(\n        "Delete workflow failed, status: " + response.status.description\n      );\n    }\n  }\n);\n')),(0,s.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nBaseResponse deleteWorkflowResponse = stub.deleteWorkflow(\n    DeleteWorkflowRequest.newBuilder()\n        .setWorkflowId("my-custom-workflow")\n        .build()\n);\n\nif (deleteWorkflowResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n    throw new RuntimeException("Delete workflow failed, status: " + deleteWorkflowResponse.getStatus());\n}\n'))),(0,s.kt)(i.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"curl -X DELETE 'https://api.clarifai.com/v2/workflows/my-custom-workflow \\\n    -H 'Content-Type: application/json' \\\n    -H 'Authorization: Key YOUR_API_KEY'\n")))),(0,s.kt)("h3",{id:"delete-all-workflows"},"Delete all Workflows"),(0,s.kt)("p",null,"You can delete all custom workflows."),(0,s.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"Instead of ",(0,s.kt)("inlineCode",{parentName:"p"},"delete_all"),", you can specify a list of workflow IDs to be deleted, using the ",(0,s.kt)("inlineCode",{parentName:"p"},"ids")," field."))),(0,s.kt)(r.Z,{mdxType:"Tabs"},(0,s.kt)(i.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,s.kt)(l.Z,{className:"language-python",mdxType:"CodeBlock"},"###################################################################\n# In this section, we set the user authentication and app ID.\n# Change these strings to run your own example.\n###################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID) # The userDataObject is required when using a PAT\n\ndelete_workflows_response = stub.DeleteWorkflows(\n    service_pb2.DeleteWorkflowsRequest(\n      user_app_id=userDataObject,  \n      delete_all=True\n      # ids = ['workflow_id_1', 'workflow_id_2'] # Specify a list of workflow IDs to be deleted\n    \n    ),\n    metadata=metadata\n)\n\nif delete_workflows_response.status.code != status_code_pb2.SUCCESS:\n    print(delete_workflows_response.status)\n    raise Exception(\"Delete workflows failed, status: \" + delete_workflows_response.status.description)\n")),(0,s.kt)(i.Z,{value:"js_rest",label:"JavaScript (REST)",mdxType:"TabItem"},(0,s.kt)(l.Z,{className:"language-javascript",mdxType:"CodeBlock"},'\x3c!--index.html file--\x3e\n\n<script>\n  /////////////////////////////////////////////////////////////////////\n  // In this section, we set the user authentication and app ID.\n  // Change these strings to run your own example.\n  /////////////////////////////////////////////////////////////////////\n\n  const USER_ID = "YOUR_USER_ID_HERE";\n  // Your PAT (Personal Access Token) can be found in the portal under Authentification\n  const PAT = "YOUR_PAT_HERE";\n  const APP_ID = "YOUR_APP_ID_HERE";\n\n  ///////////////////////////////////////////////////////////////////////////////////\n  // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n  ///////////////////////////////////////////////////////////////////////////////////\n\n  const raw = JSON.stringify({\n    "user_app_id": {\n      "user_id": USER_ID,\n      "app_id": APP_ID,\n    },\n    "delete_all": true,\n    //"ids": [\'workflow_id_1\', \'workflow_id_2\'] // Specify a list of workflow IDs to be deleted\n  });\n\n  const requestOptions = {\n    method: "DELETE",\n    headers: {\n      "Accept": "application/json",\n      "Authorization": "Key " + PAT,\n    },\n    body: raw,\n  };\n\n  fetch(`https://api.clarifai.com/v2/workflows`, requestOptions)\n    .then((response) => response.text())\n    .then((result) => console.log(result))\n    .catch((error) => console.log("error", error));\n<\/script>')),(0,s.kt)(i.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,s.kt)(l.Z,{className:"language-javascript",mdxType:"CodeBlock"},'//index.js file\n\n/////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication and app ID.\n// Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////\n\nconst USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\nconst PAT = "YOUR_PAT_HERE";\nconst APP_ID = "YOUR_APP_ID_HERE";\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.DeleteWorkflows(\n  {\n    user_app_id: {\n      "user_id": USER_ID,\n      "app_id": APP_ID,\n    },\n    delete_all: true\n    //ids: [\'workflow_id_1\', \'workflow_id_2\'] // Specify a list of workflow IDs to be deleted\n  },\n  metadata,\n  (err, response) => {\n    if (err) {\n      throw new Error(err);\n    }\n\n    if (response.status.code !== 10000) {\n      throw new Error(\n        "Delete workflows failed, status: " + response.status.description\n      );\n    }\n  }\n);\n')),(0,s.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nBaseResponse deleteWorkflowsResponse = stub.deleteWorkflows(\n    DeleteWorkflowsRequest.newBuilder()\n        .setDeleteAll(true)\n        .build()\n);\n\nif (deleteWorkflowsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n    throw new RuntimeException("Delete workflows failed, status: " + deleteWorkflowsResponse.getStatus());\n}\n'))),(0,s.kt)(i.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"curl -X DELETE 'https://api.clarifai.com/v2/workflows' \\\n    -H 'Content-Type: application/json' \\\n    -H 'Authorization: Key YOUR_API_KEY' \\\n    --data-raw '{\n        \"delete_all\": true\n    }'\n")))))}w.isMDXComponent=!0}}]);
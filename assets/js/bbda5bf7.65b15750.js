"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[1794],{51979:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/cross_validation-cfadf56b2e40cbff4a4709169d1b5640.jpg"},65537:(e,n,t)=>{t.d(n,{A:()=>O});var a=t(96540),s=t(18215),i=t(65627),o=t(56347),r=t(50372),l=t(30604),u=t(11861),c=t(78749);function _(e){return a.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function d(e){const{values:n,children:t}=e;return(0,a.useMemo)((()=>{const e=n??function(e){return _(e).map((e=>{let{props:{value:n,label:t,attributes:a,default:s}}=e;return{value:n,label:t,attributes:a,default:s}}))}(t);return function(e){const n=(0,u.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function E(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function p(e){let{queryString:n=!1,groupId:t}=e;const s=(0,o.W6)(),i=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,l.aZ)(i),(0,a.useCallback)((e=>{if(!i)return;const n=new URLSearchParams(s.location.search);n.set(i,e),s.replace({...s.location,search:n.toString()})}),[i,s])]}function D(e){const{defaultValue:n,queryString:t=!1,groupId:s}=e,i=d(e),[o,l]=(0,a.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!E({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const a=t.find((e=>e.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:i}))),[u,_]=p({queryString:t,groupId:s}),[D,h]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[s,i]=(0,c.Dv)(t);return[s,(0,a.useCallback)((e=>{t&&i.set(e)}),[t,i])]}({groupId:s}),A=(()=>{const e=u??D;return E({value:e,tabValues:i})?e:null})();(0,r.A)((()=>{A&&l(A)}),[A]);return{selectedValue:o,selectValue:(0,a.useCallback)((e=>{if(!E({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);l(e),_(e),h(e)}),[_,h,i]),tabValues:i}}var h=t(9136);const A={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var I=t(74848);function R(e){let{className:n,block:t,selectedValue:a,selectValue:o,tabValues:r}=e;const l=[],{blockElementScrollPositionUntilNextRender:u}=(0,i.a_)(),c=e=>{const n=e.currentTarget,t=l.indexOf(n),s=r[t].value;s!==a&&(u(n),o(s))},_=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const t=l.indexOf(e.currentTarget)+1;n=l[t]??l[0];break}case"ArrowLeft":{const t=l.indexOf(e.currentTarget)-1;n=l[t]??l[l.length-1];break}}n?.focus()};return(0,I.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":t},n),children:r.map((e=>{let{value:n,label:t,attributes:i}=e;return(0,I.jsx)("li",{role:"tab",tabIndex:a===n?0:-1,"aria-selected":a===n,ref:e=>{l.push(e)},onKeyDown:_,onClick:c,...i,className:(0,s.A)("tabs__item",A.tabItem,i?.className,{"tabs__item--active":a===n}),children:t??n},n)}))})}function m(e){let{lazy:n,children:t,selectedValue:i}=e;const o=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=o.find((e=>e.props.value===i));return e?(0,a.cloneElement)(e,{className:(0,s.A)("margin-top--md",e.props.className)}):null}return(0,I.jsx)("div",{className:"margin-top--md",children:o.map(((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==i})))})}function S(e){const n=D(e);return(0,I.jsxs)("div",{className:(0,s.A)("tabs-container",A.tabList),children:[(0,I.jsx)(R,{...n,...e}),(0,I.jsx)(m,{...n,...e})]})}function O(e){const n=(0,h.A)();return(0,I.jsx)(S,{...e,children:_(e.children)},String(n))}},79329:(e,n,t)=>{t.d(n,{A:()=>o});t(96540);var a=t(18215);const s={tabItem:"tabItem_Ymn6"};var i=t(74848);function o(e){let{children:n,hidden:t,className:o}=e;return(0,i.jsx)("div",{role:"tabpanel",className:(0,a.A)(s.tabItem,o),hidden:t,children:n})}},81430:(e,n,t)=>{t.d(n,{W:()=>u});var a=t(96540),s=t(40797);const i=["zero","one","two","few","many","other"];function o(e){return i.filter((n=>e.includes(n)))}const r={locale:"en",pluralForms:o(["one","other"]),select:e=>1===e?"one":"other"};function l(){const{i18n:{currentLocale:e}}=(0,s.A)();return(0,a.useMemo)((()=>{try{return function(e){const n=new Intl.PluralRules(e);return{locale:e,pluralForms:o(n.resolvedOptions().pluralCategories),select:e=>n.select(e)}}(e)}catch(n){return console.error(`Failed to use Intl.PluralRules for locale "${e}".\nDocusaurus will fallback to the default (English) implementation.\nError: ${n.message}\n`),r}}),[e])}function u(){const e=l();return{selectMessage:(n,t)=>function(e,n,t){const a=e.split("|");if(1===a.length)return a[0];a.length>t.pluralForms.length&&console.error(`For locale=${t.locale}, a maximum of ${t.pluralForms.length} plural forms are expected (${t.pluralForms.join(",")}), but the message contains ${a.length}: ${e}`);const s=t.select(n),i=t.pluralForms.indexOf(s);return a[Math.min(i,a.length-1)]}(t,n,e)}}},89791:(e,n,t)=>{t.d(n,{$S:()=>a});t(40797);function a(){return t(69493).$S(...arguments)}},93597:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>v,contentTitle:()=>f,default:()=>U,frontMatter:()=>T,metadata:()=>a,toc:()=>g});const a=JSON.parse('{"id":"api-guide/evaluate/README","title":"Evaluating Models","description":"Learn about model evaluation tools","source":"@site/docs/api-guide/evaluate/README.mdx","sourceDirName":"api-guide/evaluate","slug":"/api-guide/evaluate/","permalink":"/api-guide/evaluate/","draft":false,"unlisted":false,"editUrl":"https://github.com/Clarifai/docs/blob/main/docs/api-guide/evaluate/README.mdx","tags":[],"version":"current","frontMatter":{"description":"Learn about model evaluation tools","pagination_prev":null},"sidebar":"tutorialSidebar","next":{"title":"Interpreting Evaluations","permalink":"/api-guide/evaluate/interpreting-evaluations"}}');var s=t(74848),i=t(28453),o=t(65537),r=t(79329),l=t(58069);const u='############################################################################################\n# In this section, we set the user authentication, app ID, and model evaluation details.\n# Change these strings to run your own example.\n###########################################################################################\n\nUSER_ID = "YOUR_USER_ID_HERE"\n# Your PAT (Personal Access Token) can be found in the Account\'s Security section\nPAT = "YOUR_PAT_HERE"\nAPP_ID = "YOUR_APP_ID_HERE"\n# Change these to make your own evaluations\nMODEL_APP_ID = "YOUR_MODEL_APP_ID_HERE"\nMODEL_USER_ID = "YOUR_MODEL_USER_ID_HERE"\nMODEL_ID = "YOUR_MODEL_ID_HERE"\nMODEL_VERSION_ID = "YOUR_MODEL_VERSION_HERE"\nDATASET_USER_ID = "YOUR_DATASET_USER_ID_HERE"\nDATASET_APP_ID = "YOUR_DATASET_APP_ID_HERE"\nDATASET_ID = "YOUR_DATASET_ID_HERE"\nDATASET_VERSION_ID = "YOUR_DATASET_VERSION_ID_HERE"\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (("authorization", "Key " + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\npost_model_evaluations = stub.PostEvaluations(\n    service_pb2.PostEvaluationsRequest(\n        user_app_id=userDataObject,\n        eval_metrics=[\n            resources_pb2.EvalMetrics(\n                model=resources_pb2.Model(\n                    app_id=MODEL_APP_ID,\n                    user_id=MODEL_USER_ID,\n                    id=MODEL_ID,\n                    model_version=resources_pb2.ModelVersion(id=MODEL_VERSION_ID),\n                ),\n                ground_truth_dataset=resources_pb2.Dataset(\n                    user_id=DATASET_USER_ID,\n                    app_id=DATASET_APP_ID,\n                    id=DATASET_ID,\n                    version=resources_pb2.DatasetVersion(id=DATASET_VERSION_ID),\n                ),\n                \n            )\n        ],\n    ),\n    metadata=metadata,\n)\n\nif post_model_evaluations.status.code != status_code_pb2.SUCCESS:\n    print(post_model_evaluations.status)\n    raise Exception(\n        "Failed response, status: " + post_model_evaluations.status.description\n    )\n\nprint(post_model_evaluations)\n',c='\x3c!--index.html file--\x3e\n\n<script>\n    //////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and model evaluation details.\n    // Change these strings to run your own example.\n    /////////////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = "YOUR_USER_ID_HERE";\n    // Your PAT (Personal Access Token) can be found in the Account\'s Security section\n    const PAT = "YOUR_PAT_HERE";\n    const APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to evaluate your own model\n    const MODEL_APP_ID = "YOUR_MODEL_APP_ID_HERE";\n    const MODEL_USER_ID = "YOUR_MODEL_USER_ID_HERE";\n    const MODEL_ID = "YOUR_MODEL_ID_HERE";\n    const MODEL_VERSION_ID = "YOUR_MODEL_VERSION_HERE";\n    const DATASET_USER_ID = "YOUR_DATASET_USER_ID_HERE";\n    const DATASET_APP_ID = "YOUR_DATASET_APP_ID_HERE";\n    const DATASET_ID = "YOUR_DATASET_ID_HERE";\n    const DATASET_VERSION_ID = "YOUR_DATASET_VERSION_ID_HERE";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        "user_app_id": {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        "eval_metrics": [\n            {\n                "model": {\n                    "app_id": MODEL_APP_ID,\n                    "user_id": MODEL_USER_ID,\n                    "id": MODEL_ID,\n                    "model_version": {\n                        "id": MODEL_VERSION_ID\n                    }\n                },\n                "ground_truth_dataset": {\n                    "user_id": DATASET_USER_ID,\n                    "app_id": DATASET_APP_ID,\n                    "id": DATASET_ID,\n                    "version": {\n                        "id": DATASET_VERSION_ID\n                    }\n                }\n            }\n        ]\n\n    });\n\n    const requestOptions = {\n        method: "POST",\n        headers: {\n            "Accept": "application/json",\n            "Authorization": "Key " + PAT\n        },\n        body: raw\n    };\n\n    fetch(`https://api.clarifai.com/v2/evaluations`, requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log(\'error\', error));\n\n<\/script>',_='//index.js file\n\n/////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and model evaluation details.\n// Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = "YOUR_PAT_HERE";\nconst APP_ID = "YOUR_APP_ID_HERE";\n// Change these to evaluate your own model\nconst MODEL_APP_ID = "YOUR_MODEL_APP_ID_HERE";\nconst MODEL_USER_ID = "YOUR_MODEL_USER_ID_HERE";\nconst MODEL_ID = "YOUR_MODEL_ID_HERE";\nconst MODEL_VERSION_ID = "YOUR_MODEL_VERSION_HERE";\nconst DATASET_USER_ID = "YOUR_DATASET_USER_ID_HERE";\nconst DATASET_APP_ID = "YOUR_DATASET_APP_ID_HERE";\nconst DATASET_ID = "YOUR_DATASET_ID_HERE";\nconst DATASET_VERSION_ID = "YOUR_DATASET_VERSION_ID_HERE";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PostEvaluations(\n  {\n    user_app_id: {\n      user_id: USER_ID,\n      app_id: APP_ID,\n    },\n    eval_metrics: [\n      {\n        model: {\n          app_id: MODEL_APP_ID,\n          user_id: MODEL_USER_ID,\n          id: MODEL_ID,\n          model_version: {\n            id: MODEL_VERSION_ID\n          }\n        },\n        ground_truth_dataset: {\n          user_id: DATASET_USER_ID,\n          app_id: DATASET_APP_ID,\n          id: DATASET_ID,\n          version: {\n            id: DATASET_VERSION_ID\n          }\n        }\n      }\n    ]\n\n  },\n\n  metadata,\n\n  (err, response) => {\n    if (err) {\n      throw new Error(err);\n    }\n\n    if (response.status.code !== 10000) {\n      console.error(\'Post models failed, status:\', response.status);\n      throw new Error("Evaluate model failed, status: " + response.status.description);\n    }\n\n  }\n);\n',d='package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    //////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and model evaluation details.\n    // Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    // Your PAT (Personal Access Token) can be found in the Account\'s Security section\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to evaluate your own model\n    static final String MODEL_APP_ID = "YOUR_MODEL_APP_ID_HERE";\n    static final String MODEL_USER_ID = "YOUR_MODEL_USER_ID_HERE";\n    static final String MODEL_ID = "YOUR_MODEL_ID_HERE";\n    static final String MODEL_VERSION_ID = "YOUR_MODEL_VERSION_HERE";\n    static final String DATASET_USER_ID = "YOUR_DATASET_USER_ID_HERE";\n    static final String DATASET_APP_ID = "YOUR_DATASET_APP_ID_HERE";\n    static final String DATASET_ID = "YOUR_DATASET_ID_HERE";\n    static final String DATASET_VERSION_ID = "YOUR_DATASET_VERSION_ID_HERE";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n    \n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n                .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiEvalMetricsResponse postEvaluationsResponse = stub.postEvaluations(\n                PostEvaluationsRequest.newBuilder()\n                        .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n                        .addEvalMetrics(\n                                EvalMetrics.newBuilder()\n                                        .setModel(Model.newBuilder()\n                                                .setAppId(MODEL_APP_ID)\n                                                .setUserId(MODEL_USER_ID)\n                                                .setId(MODEL_ID)\n                                                .setModelVersion(ModelVersion.newBuilder()\n                                                        .setId(MODEL_VERSION_ID)\n                                                )\n                                        )\n                                        .setGroundTruthDataset(Dataset.newBuilder()\n                                                .setUserId(DATASET_USER_ID)\n                                                .setAppId(DATASET_APP_ID)\n                                                .setId(DATASET_ID)\n                                                .setVersion(DatasetVersion.newBuilder()\n                                                        .setId(DATASET_VERSION_ID)\n                                                )\n                                        )\n                        )\n                        .build()\n        );\n\n        if (postEvaluationsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Evaluate model failed, status: " + postEvaluationsResponse.getStatus());\n        }\n\n    }\n\n}\n',E='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n////////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and model evaluation details.\n// Change these strings to run your own example.\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change these to make your own evaluations\n$MODEL_APP_ID = "YOUR_MODEL_APP_ID_HERE";\n$MODEL_USER_ID = "YOUR_MODEL_USER_ID_HERE";\n$MODEL_ID = "YOUR_MODEL_ID_HERE";\n$MODEL_VERSION_ID = "YOUR_MODEL_VERSION_HERE";\n$DATASET_USER_ID = "YOUR_DATASET_USER_ID_HERE";\n$DATASET_APP_ID = "YOUR_DATASET_APP_ID_HERE";\n$DATASET_ID = "YOUR_DATASET_ID_HERE";\n$DATASET_VERSION_ID = "YOUR_DATASET_VERSION_ID_HERE";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\PostEvaluationsRequest;\nuse Clarifai\\Api\\Model;\nuse Clarifai\\Api\\ModelVersion;\nuse Clarifai\\Api\\EvalMetrics;\nuse Clarifai\\Api\\Dataset;\nuse Clarifai\\Api\\DatasetVersion;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID,\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PostEvaluations(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new PostEvaluationsRequest([\n        "user_app_id" => $userDataObject,\n        "eval_metrics" => [\n            new EvalMetrics([\n                "model" => new Model([\n                    "app_id" => $MODEL_APP_ID,\n                    "user_id" => $MODEL_USER_ID,\n                    "id" => $MODEL_ID,\n                    "model_version" => new ModelVersion([\n                        "id" => $MODEL_VERSION_ID\n                    ])\n\n                ]),\n                "ground_truth_dataset" => new Dataset([\n                    "user_id" => $DATASET_USER_ID,\n                    "app_id" => $DATASET_APP_ID,\n                    "id" => $DATASET_ID,\n                    "version" => new DatasetVersion([\n                        "id" => $DATASET_VERSION_ID\n                    ])\n                ])\n            ])\n        ]\n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure\n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription() . " " . $response->getStatus()->getDetails());\n}\n\n?>',p='curl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/evaluations" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n        "eval_metrics": [\n            {\n                "model": {\n                    "app_id": "YOUR_MODEL_APP_ID_HERE",\n                    "user_id": "YOUR_MODEL_USER_ID_HERE",\n                    "id": "YOUR_MODEL_ID_HERE",\n                    "model_version": {\n                        "id": "YOUR_MODEL_VERSION_HERE"\n                    }\n                },\n                "ground_truth_dataset": {\n                    "user_id": "YOUR_DATASET_USER_ID_HERE",\n                    "app_id": "YOUR_DATASET_APP_ID_HERE",\n                    "id": "YOUR_DATASET_ID_HERE",\n                    "version": {\n                        "id": "YOUR_DATASET_VERSION_ID_HERE"\n                    }\n                }\n            }\n        ]  \n  \n  }\'',D='############################################################################################\n# In this section, we set the user authentication, app ID, and model evaluation details.\n# Change these strings to run your own example.\n###########################################################################################\n\nUSER_ID = "YOUR_USER_ID_HERE"\n# Your PAT (Personal Access Token) can be found in the Account\'s Security section\nPAT = "YOUR_PAT_HERE"\nAPP_ID = "YOUR_APP_ID_HERE"\n# Change these to make your own evaluations\nMODEL_ID = "YOUR_MODEL_ID_HERE"\nMODEL_VERSION_ID = "YOUR_MODEL_VERSION_HERE"\nDATASET_ID = "YOUR_DATASET_ID_HERE"\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\nfrom google.protobuf.struct_pb2 import Struct\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nparams = Struct()\nparams.update({"dataset_id": DATASET_ID})\n\nmetadata = (("authorization", "Key " + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\npost_model_evaluations = stub.PostModelVersionEvaluations(\n    service_pb2.PostModelVersionEvaluationsRequest(\n        user_app_id=userDataObject,\n        model_id=MODEL_ID,\n        model_version_id=MODEL_VERSION_ID,\n        eval_metrics=[\n            resources_pb2.EvalMetrics(\n                eval_info=resources_pb2.EvalInfo(params=params),\n            )\n        ],\n    ),\n    metadata=metadata,\n)\n\nif post_model_evaluations.status.code != status_code_pb2.SUCCESS:\n    print(post_model_evaluations.status)\n    raise Exception("Failed response, status: " + post_model_evaluations.status.description)\n\nprint(post_model_evaluations)\n',h='\x3c!--index.html file--\x3e\n\n<script>\n    //////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and model evaluation details.\n    // Change these strings to run your own example.\n    /////////////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = "YOUR_USER_ID_HERE";\n    // Your PAT (Personal Access Token) can be found in the Account\'s Security section\n    const PAT = "YOUR_PAT_HERE";\n    const APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to make your own evaluations \n    const MODEL_ID = "YOUR_MODEL_ID_HERE";\n    const MODEL_VERSION_ID = "YOUR_MODEL_VERSION_HERE";    \n    const DATASET_ID = "YOUR_DATASET_ID_HERE";   \n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        "user_app_id": {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        "eval_metrics": [\n            {\n                "eval_info": {       \n                    "params": {\n                        "dataset_id": DATASET_ID\n                    }\n                }\n\n            }\n        ]\n\n    });\n\n    const requestOptions = {\n        method: "POST",\n        headers: {\n            "Accept": "application/json",\n            "Authorization": "Key " + PAT\n        },\n        body: raw\n    };\n\n    fetch(`https://api.clarifai.com/v2/users/${USER_ID}/apps/${APP_ID}/models/${MODEL_ID}/versions/${MODEL_VERSION_ID}/evaluations`, requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log(\'error\', error));\n\n<\/script>',A='//index.js file\n\n/////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and model evaluation details.\n// Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = "YOUR_PAT_HERE";\nconst APP_ID = "YOUR_APP_ID_HERE";\n// Change these to make your own evaluations\nconst MODEL_ID = "YOUR_MODEL_ID_HERE";\nconst MODEL_VERSION_ID = "YOUR_MODEL_VERSION_HERE";\nconst DATASET_ID = "YOUR_DATASET_ID_HERE";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PostModelVersionEvaluations(\n  {\n    user_app_id: {\n      user_id: USER_ID,\n      app_id: APP_ID,\n    },\n    model_id: MODEL_ID,\n    model_version_id: MODEL_VERSION_ID,\n    eval_metrics: [\n      {\n        eval_info: {   \n            params: {\n              dataset_id: DATASET_ID\n            }          \n        }\n      }\n    ]\n\n  },\n\n  metadata,\n\n  (err, response) => {\n    if (err) {\n      throw new Error(err);\n    }\n\n    if (response.status.code !== 10000) {\n      console.error(\'Post models failed, status:\', response.status);\n      throw new Error("Evaluate model failed, status: " + response.status.description);\n    }\n\n    console.log(response);\n\n  }\n);\n',I='package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.StatusCode;\nimport com.google.protobuf.Struct;\nimport com.google.protobuf.Value;\n\npublic class ClarifaiExample {\n\n    //////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and model evaluation details.\n    // Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    // Your PAT (Personal Access Token) can be found in the Account\'s Security section\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to make your own evaluations  \n    static final String MODEL_ID = "YOUR_MODEL_ID_HERE";\n    static final String MODEL_VERSION_ID = "YOUR_MODEL_VERSION_HERE";\n    static final String DATASET_ID = "YOUR_DATASET_ID_HERE";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n                .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        Struct.Builder params = Struct.newBuilder()\n                .putFields("dataset_id", Value.newBuilder().setStringValue(DATASET_ID).build());\n\n        MultiEvalMetricsResponse postEvaluationsResponse = stub.postModelVersionEvaluations(\n                PostModelVersionEvaluationsRequest.newBuilder()\n                        .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n                        .setModelId(MODEL_ID)\n                        .setModelVersionId(MODEL_VERSION_ID)\n                        .addEvalMetrics(\n                                EvalMetrics.newBuilder()\n                                        .setEvalInfo(EvalInfo.newBuilder()\n                                                .setParams(params)\n                                        )\n                        )\n                        .build()\n        );\n\n        if (postEvaluationsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Evaluate model failed, status: " + postEvaluationsResponse.getStatus());\n        }\n\n    }\n\n}\n',R='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n////////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and model evaluation details.\n// Change these strings to run your own example.\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change these to make your own evaluations\n$MODEL_ID = "YOUR_MODEL_ID_HERE";\n$MODEL_VERSION_ID = "YOUR_MODEL_VERSION_HERE";\n$DATASET_ID = "YOUR_DATASET_ID_HERE";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\PostModelVersionEvaluationsRequest;\nuse Clarifai\\Api\\EvalMetrics;\nuse Clarifai\\Api\\EvalInfo;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\nuse Google\\Protobuf\\Struct;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID,\n]);\n\n// create Struct instance\n$params = new Struct();\n$params->model_id = $DATASET_ID;\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PostModelVersionEvaluations(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new PostModelVersionEvaluationsRequest([\n        "user_app_id" => $userDataObject,\n        "model_id" => $MODEL_ID,\n        "model_version_id" => $MODEL_VERSION_ID,\n        "eval_metrics" => [\n            new EvalMetrics([\n                "eval_info" => new EvalInfo([\n                    "params" => $params\n                ]),\n\n            ])\n        ]\n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure\n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription() . " " . $response->getStatus()->getDetails());\n}\n\necho $response->serializeToJsonString();\n\n?>\n',m='curl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/models/YOUR_MODEL_ID_HERE/versions/YOUR_MODEL_VERSION_ID_HERE/evaluations" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n        "eval_metrics": [\n            {\n                "eval_info": { \n                    "params": {\n                        "dataset_id": "YOUR_DATASET_ID_HERE"\n                    }\n                }\n\n            }\n        ]  \n  \n  }\'\n  ';var S=t(99563),O=t(89791);const T={description:"Learn about model evaluation tools",pagination_prev:null},f="Evaluating Models",v={},g=[{value:"How It Works",id:"how-it-works",level:2},{value:"Requirements",id:"requirements",level:2},{value:"Running Evaluation",id:"running-evaluation",level:2},{value:"PostModelVersionEvaluations",id:"postmodelversionevaluations",level:3},{value:"PostEvaluations",id:"postevaluations",level:3}];function P(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"evaluating-models",children:"Evaluating Models"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Evaluate a model's performance"})}),"\n",(0,s.jsx)("hr",{}),"\n",(0,s.jsx)(n.p,{children:"Now that you've successfully trained the model, you may want to test its performance before using it in a production environment.\nThe Model Evaluation tool allows you to perform a cross validation on a specified model version. Once the evaluation is complete, you can view the various metrics that inform the model\u2019s performance."}),"\n",(0,s.jsx)(n.h2,{id:"how-it-works",children:"How It Works"}),"\n",(0,s.jsx)(n.p,{children:"Model Evaluation performs a K-split cross validation on data you used to train your custom model."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"cross validation",src:t(51979).A+"",width:"962",height:"946"})}),"\n",(0,s.jsx)(n.p,{children:"In the cross validation process, it will:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Set aside a random 1/K subset of the training data and designate as a test set;"}),"\n",(0,s.jsx)(n.li,{children:"Train a new model with the remaining training data;"}),"\n",(0,s.jsx)(n.li,{children:"Pass the test set data through this new model to make predictions;"}),"\n",(0,s.jsx)(n.li,{children:"Compare the predictions against the test set\u2019s actual labels; and,"}),"\n",(0,s.jsx)(n.li,{children:"Repeat steps 1) through 4) across K splits to average out the evaluation results."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"requirements",children:"Requirements"}),"\n",(0,s.jsx)(n.p,{children:"To run the evaluation on your custom model, it should meet the following criteria:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["It should be a custom trained model version with:","\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"At least 2 concepts."}),"\n",(0,s.jsx)(n.li,{children:"At least 10 training inputs per concept (at least 50 inputs per concept is recommended)."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.admonition,{type:"caution",children:(0,s.jsx)(n.p,{children:"The evaluation may result in an error if the model version doesn\u2019t satisfy the requirements above."})}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["The initialization code used in the following examples is outlined in detail on the ",(0,s.jsx)(n.a,{href:"https://docs.clarifai.com/api-guide/api-overview/api-clients/#client-installation-instructions",children:"client installation page."})]})}),"\n","\n","\n","\n",(0,s.jsx)(n.h2,{id:"running-evaluation",children:"Running Evaluation"}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:["If evaluating an ",(0,s.jsx)(n.code,{children:"embedding-classifier"})," model type, you need to set ",(0,s.jsx)(n.code,{children:"use_kfold"})," to ",(0,s.jsx)(n.code,{children:"false"})," in the ",(0,s.jsx)(n.code,{children:"eval_info.params"})," of the evaluation request. Here is an example:\n",(0,s.jsx)(n.code,{children:'params.update({"dataset_id": DATASET_ID, "use_kfold": False})'})]})}),"\n",(0,s.jsx)(n.h3,{id:"postmodelversionevaluations",children:"PostModelVersionEvaluations"}),"\n",(0,s.jsxs)(n.p,{children:["Below is an example of how you would use the ",(0,s.jsx)(n.code,{children:"PostModelVersionEvaluations"})," method to run an evaluation on a specific version of a custom model."]}),"\n",(0,s.jsxs)(o.A,{children:[(0,s.jsx)(r.A,{value:"python",label:"Python",children:(0,s.jsx)(l.A,{className:"language-python",children:D})}),(0,s.jsx)(r.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(l.A,{className:"language-javascript",children:h})}),(0,s.jsx)(r.A,{value:"nodejs",label:"NodeJS",children:(0,s.jsx)(l.A,{className:"language-javascript",children:A})}),(0,s.jsx)(r.A,{value:"java",label:"Java",children:(0,s.jsx)(l.A,{className:"language-java",children:I})}),(0,s.jsx)(r.A,{value:"php",label:"PHP",children:(0,s.jsx)(l.A,{className:"language-php",children:R})}),(0,s.jsx)(r.A,{value:"curl",label:"cURL",children:(0,s.jsx)(l.A,{className:"language-bash",children:m})})]}),"\n",(0,s.jsx)(n.h3,{id:"postevaluations",children:"PostEvaluations"}),"\n",(0,s.jsxs)(n.p,{children:["Below is an example of how you would use the ",(0,s.jsx)(n.code,{children:"PostEvaluations"})," method to run an evaluation on a specific version of a custom model. The method allows you to choose models and datasets from different apps that you have access to."]}),"\n",(0,s.jsxs)(o.A,{children:[(0,s.jsx)(r.A,{value:"python",label:"Python",children:(0,s.jsx)(l.A,{className:"language-python",children:u})}),(0,s.jsx)(r.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(l.A,{className:"language-javascript",children:c})}),(0,s.jsx)(r.A,{value:"nodejs",label:"NodeJS",children:(0,s.jsx)(l.A,{className:"language-javascript",children:_})}),(0,s.jsx)(r.A,{value:"java",label:"Java",children:(0,s.jsx)(l.A,{className:"language-java",children:d})}),(0,s.jsx)(r.A,{value:"php",label:"PHP",children:(0,s.jsx)(l.A,{className:"language-php",children:E})}),(0,s.jsx)(r.A,{value:"curl",label:"cURL",children:(0,s.jsx)(l.A,{className:"language-bash",children:p})})]}),"\n",(0,s.jsx)(n.p,{children:"Once the evaluation is complete, you can retrieve the results and analyze the performance of your custom model."}),"\n",(0,s.jsx)(n.p,{children:"We'll talk about how to interpret a model's evaluation results in the next section."}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:["You can also learn how to perform evaluation on the Portal ",(0,s.jsx)(n.a,{href:"https://docs.clarifai.com/portal-guide/evaluate/",children:"here"}),"."]})}),"\n","\n",(0,s.jsx)(S.A,{items:(0,O.$S)().items})]})}function U(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(P,{...e})}):P(e)}},99563:(e,n,t)=>{t.d(n,{A:()=>I});t(96540);var a=t(18215),s=t(93751),i=t(56289),o=t(81430),r=t(22887),l=t(50539),u=t(9303);const c={cardContainer:"cardContainer_fWXF",cardTitle:"cardTitle_rnsV",cardDescription:"cardDescription_PWke"};var _=t(74848);function d(e){let{href:n,children:t}=e;return(0,_.jsx)(i.A,{href:n,className:(0,a.A)("card padding--lg",c.cardContainer),children:t})}function E(e){let{href:n,icon:t,title:s,description:i}=e;return(0,_.jsxs)(d,{href:n,children:[(0,_.jsxs)(u.A,{as:"h2",className:(0,a.A)("text--truncate",c.cardTitle),title:s,children:[t," ",s]}),i&&(0,_.jsx)("p",{className:(0,a.A)("text--truncate",c.cardDescription),title:i,children:i})]})}function p(e){let{item:n}=e;const t=(0,s.Nr)(n),a=function(){const{selectMessage:e}=(0,o.W)();return n=>e(n,(0,l.T)({message:"1 item|{count} items",id:"theme.docs.DocCard.categoryDescription.plurals",description:"The default description for a category card in the generated index about how many items this category includes"},{count:n}))}();return t?(0,_.jsx)(E,{href:t,icon:"\ud83d\uddc3\ufe0f",title:n.label,description:n.description??a(n.items.length)}):null}function D(e){let{item:n}=e;const t=(0,r.A)(n.href)?"\ud83d\udcc4\ufe0f":"\ud83d\udd17",a=(0,s.cC)(n.docId??void 0);return(0,_.jsx)(E,{href:n.href,icon:t,title:n.label,description:n.description??a?.description})}function h(e){let{item:n}=e;switch(n.type){case"link":return(0,_.jsx)(D,{item:n});case"category":return(0,_.jsx)(p,{item:n});default:throw new Error(`unknown item type ${JSON.stringify(n)}`)}}function A(e){let{className:n}=e;const t=(0,s.$S)();return(0,_.jsx)(I,{items:t.items,className:n})}function I(e){const{items:n,className:t}=e;if(!n)return(0,_.jsx)(A,{...e});const i=(0,s.d1)(n);return(0,_.jsx)("section",{className:(0,a.A)("row",t),children:i.map(((e,n)=>(0,_.jsx)("article",{className:"col col--6 margin-bottom--lg",children:(0,_.jsx)(h,{item:e})},n)))})}}}]);
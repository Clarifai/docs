"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[6041],{94207:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>T,contentTitle:()=>P,default:()=>w,frontMatter:()=>C,metadata:()=>m,toc:()=>b});var a=t(74848),s=t(28453),i=t(11470),o=t(19365),r=t(21432);const c="#################################################################################################\n# In this section, we set the user authentication, app ID, and how we want to annotate the image. \n# Change these strings to run your own example.\n#################################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these based on the image you want to annotate\nINPUT_ID = \"53d0362a9dfa4e03b2293375e2d0db73\"\nCONCEPT_ID_1 = \"tree\"\nCONCEPT_ID_2 = \"water\"\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\npost_annotations_response = stub.PostAnnotations(\n    service_pb2.PostAnnotationsRequest(\n        user_app_id=userDataObject,  # The userDataObject is created in the overview and is required when using a PAT\n        annotations=[\n            resources_pb2.Annotation(\n                input_id=INPUT_ID,\n                data=resources_pb2.Data(\n                    concepts=[\n                        resources_pb2.Concept(id=CONCEPT_ID_1, value=1.),  # 1 means true, this concept is present\n                        resources_pb2.Concept(id=CONCEPT_ID_2, value=1.)  \n                    ]\n                )               \n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif post_annotations_response.status.code != status_code_pb2.SUCCESS:\n    print(post_annotations_response.status)\n    raise Exception(\"Post annotations failed, status: \" + post_annotations_response.status.description) \n",l='\x3c!--index.html file--\x3e\n\n<script>\n    ////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and how we want to \n    // annotate the image. Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = \'YOUR_USER_ID_HERE\';\n    // Your PAT (Personal Access Token) can be found in the Account\'s Security section\n    const PAT = \'YOUR_PAT_HERE\';\n    const APP_ID = \'YOUR_APP_ID_HERE\';\n    // Change these based on the image you want to annotate\n    const INPUT_ID = "c99f1b557d1d43d1916b46f8ce4a0487";\n    const CONCEPT_ID_1 = "tree";\n    const CONCEPT_ID_2 = "water";\n    \n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        "user_app_id": {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        "annotations": [\n            {\n                "input_id": INPUT_ID,\n                // 1 means true, this concept is present                \n                "data": {\n                    "concepts": [\n                        {\n                            "id": CONCEPT_ID_1,\n                            "value": 1\n                        },\n                        {\n                            "id": CONCEPT_ID_2,\n                            "value": 1\n                        }\n                    ]\n                }\n            }\n        ]\n    });\n\n    const requestOptions = {\n        method: \'POST\',\n        headers: {\n            \'Accept\': \'application/json\',\n            \'Authorization\': \'Key \' + PAT\n        },\n        body: raw\n    };\n\n    fetch("https://api.clarifai.com/v2/annotations", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log(\'error\', error));\n\n<\/script>',u='//index.js file\n\n////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and how we want to \n// annotate the image. Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n// Change these based on the image you want to annotate\nconst INPUT_ID = "c99f1b557d1d43d1916b46f8ce4a0487";\nconst CONCEPT_ID_1 = "tree";\nconst CONCEPT_ID_2 = "water";\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PostAnnotations(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        annotations: [\n            {\n                input_id: INPUT_ID,\n                // 1 means true, this concept is present                \n                data: {\n                    concepts: [\n                        { id: CONCEPT_ID_1, value: 1 },\n                        { id: CONCEPT_ID_2, value: 1 }\n                    ]\n                }\n                \n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post annotations failed, status: " + response.status.description);\n        }\n    }\n);\n',p='package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    //////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and how we want to \n    // annotate the image. Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\t\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these based on the image you want to annotate\n    static final String INPUT_ID = "c99f1b557d1d43d1916b46f8ce4a0487";\n    static final String CONCEPT_ID_1 = "tree";\n    static final String CONCEPT_ID_2 = "water";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\t\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiAnnotationResponse postAnnotationsResponse = stub.postAnnotations(\n            PostAnnotationsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .addAnnotations(\n                Annotation.newBuilder()\n                .setInputId(INPUT_ID)\n                .setData(\n                    Data.newBuilder().addConcepts(\n                        Concept.newBuilder()\n                        .setId(CONCEPT_ID_1)\n                        .setValue(1f) // 1 means true, this concept is present\n                        .build()\n                    ).addConcepts(\n                        Concept.newBuilder()\n                        .setId(CONCEPT_ID_2)\n                        .setValue(1f) \n                        .build()\n                    )\n                ).build()\n            ).build()\n        );\n\n        if (postAnnotationsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post annotations failed, status: " + postAnnotationsResponse.getStatus());\n        }\n\n    }\n\n}\n',d='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and how we want to \n// annotate the image. Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change these based on the image you want to annotate\n$INPUT_ID = "53d0362a9dfa4e03b2293375e2d0db73";\n$CONCEPT_ID_1 = "tree";\n$CONCEPT_ID_2 = "water";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\PostAnnotationsRequest;\nuse Clarifai\\Api\\Annotation;\nuse Clarifai\\Api\\Concept;\nuse Clarifai\\Api\\Data;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PostAnnotations(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new PostAnnotationsRequest([\n        "user_app_id" => $userDataObject, \n        "annotations" => [\n             new Annotation([\n                "input_id" => $INPUT_ID,\n                "data" => new Data([\n                    "concepts" => [\n                        // 1 means true, this concept is present  \n                        new Concept(["id" => $CONCEPT_ID_1, "value" => 1.]),\n                        new Concept(["id" => $CONCEPT_ID_2, "value" => 1.])\n                    ]\n                ])\n             ])\n        ]\n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\n?>',h='# Value of 1 means true, this concept is present\n\ncurl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/annotations" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "annotations": [\n      {\n        "input_id": "YOUR_INPUT_ID_HERE",\n        "data": {\n          "concepts": [\n            {\n              "id": "tree",\n              "value": 1\n            },\n            {\n              "id": "water",\n              "value": 1\n            }\n          ]\n        }\n      }\n    ]\n}\'',_="#################################################################################################\n# In this section, we set the user authentication, app ID, and how we want to annotate the image. \n# Change these strings to run your own example.\n#################################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these based on the image you want to annotate\nINPUT_ID = \"53d0362a9dfa4e03b2293375e2d0db73\"\nCONCEPT_ID_1 = \"tree\"\nCONCEPT_ID_2 = \"water\"\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\npost_annotations_response = stub.PostAnnotations(\n    service_pb2.PostAnnotationsRequest(\n        user_app_id=userDataObject,  # The userDataObject is created in the overview and is required when using a PAT\n        annotations=[\n            resources_pb2.Annotation(\n                input_id=INPUT_ID,\n                data=resources_pb2.Data(\n                    concepts=[\n                        resources_pb2.Concept(id=CONCEPT_ID_1, value=0.),  # 0 means false, this concept is not present\n                        resources_pb2.Concept(id=CONCEPT_ID_2, value=0.)  \n                    ]\n                )               \n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif post_annotations_response.status.code != status_code_pb2.SUCCESS:\n    print(post_annotations_response.status)\n    raise Exception(\"Post annotations failed, status: \" + post_annotations_response.status.description) \n",I='\x3c!--index.html file--\x3e\n\n<script>\n    ////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and how we want to \n    // annotate the image. Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = \'YOUR_USER_ID_HERE\';\n    // Your PAT (Personal Access Token) can be found in the Account\'s Security section\n    const PAT = \'YOUR_PAT_HERE\';\n    const APP_ID = \'YOUR_APP_ID_HERE\';\n    // Change these based on the image you want to annotate\n    const INPUT_ID = "c99f1b557d1d43d1916b46f8ce4a0487";\n    const CONCEPT_ID_1 = "tree";\n    const CONCEPT_ID_2 = "water";\n    \n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        "user_app_id": {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        "annotations": [\n            {\n                "input_id": INPUT_ID,               \n                // 0 means false, this concept is not present\n                "data": {\n                    "concepts": [\n                        {\n                            "id": CONCEPT_ID_1,\n                            "value": 0\n                        },\n                        {\n                            "id": CONCEPT_ID_2,\n                            "value": 0\n                        }\n                    ]\n                }\n            }\n        ]\n    });\n\n    const requestOptions = {\n        method: \'POST\',\n        headers: {\n            \'Accept\': \'application/json\',\n            \'Authorization\': \'Key \' + PAT\n        },\n        body: raw\n    };\n\n    fetch("https://api.clarifai.com/v2/annotations", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log(\'error\', error));\n\n<\/script>\n',f='//index.js file\n\n////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and how we want to \n// annotate the image. Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n// Change these based on the image you want to annotate\nconst INPUT_ID = "c99f1b557d1d43d1916b46f8ce4a0487";\nconst CONCEPT_ID_1 = "tree";\nconst CONCEPT_ID_2 = "water";\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PostAnnotations(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        annotations: [\n            {\n                input_id: INPUT_ID,                \n                // 0 means false, this concept is not present\n                data: {\n                    concepts: [\n                        { id: CONCEPT_ID_1, value: 0 },\n                        { id: CONCEPT_ID_2, value: 0 }\n                    ]\n                }\n                \n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post annotations failed, status: " + response.status.description);\n        }\n    }\n);',E='package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    //////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and how we want to \n    // annotate the image. Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\t\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these based on the image you want to annotate\n    static final String INPUT_ID = "c99f1b557d1d43d1916b46f8ce4a0487";\n    static final String CONCEPT_ID_1 = "tree";\n    static final String CONCEPT_ID_2 = "water";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\t\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiAnnotationResponse postAnnotationsResponse = stub.postAnnotations(\n            PostAnnotationsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .addAnnotations(\n                Annotation.newBuilder()\n                .setInputId(INPUT_ID)\n                .setData(\n                    Data.newBuilder().addConcepts(\n                        Concept.newBuilder()\n                        .setId(CONCEPT_ID_1)\n                        .setValue(0f) // 0 means false, this concept is not present\n                        .build()\n                    ).addConcepts(\n                        Concept.newBuilder()\n                        .setId(CONCEPT_ID_2)\n                        .setValue(0f) \n                        .build()\n                    )\n                ).build()\n            ).build()\n        );\n\n        if (postAnnotationsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post annotations failed, status: " + postAnnotationsResponse.getStatus());\n        }\n\n    }\n\n}',g='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and how we want to \n// annotate the image. Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change these based on the image you want to annotate\n$INPUT_ID = "53d0362a9dfa4e03b2293375e2d0db73";\n$CONCEPT_ID_1 = "tree";\n$CONCEPT_ID_2 = "water";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\PostAnnotationsRequest;\nuse Clarifai\\Api\\Annotation;\nuse Clarifai\\Api\\Concept;\nuse Clarifai\\Api\\Data;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PostAnnotations(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new PostAnnotationsRequest([\n        "user_app_id" => $userDataObject, \n        "annotations" => [\n             new Annotation([\n                "input_id" => $INPUT_ID,\n                "data" => new Data([\n                    "concepts" => [\n                        // 0 means false, this concept is not present\n                        new Concept(["id" => $CONCEPT_ID_1, "value" => 0.]),\n                        new Concept(["id" => $CONCEPT_ID_2, "value" => 0.])\n                    ]\n                ])\n             ])\n        ]\n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\n?>',A='# Value of 0 means false, this concept is not present\n\ncurl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/annotations" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "annotations": [\n      {\n        "input_id": "YOUR_INPUT_ID_HERE",\n        "data": {\n          "concepts": [\n            {\n              "id": "tree",\n              "value": 0\n            },\n            {\n              "id": "water",\n              "value": 0\n            }\n          ]\n        }\n      }\n    ]\n}\'',C={description:"Learn how to make positive and negative annotations",sidebar_position:3},P="Positive and Negative Annotations",m={id:"api-guide/annotate/positive-and-negative-annotations",title:"Positive and Negative Annotations",description:"Learn how to make positive and negative annotations",source:"@site/docs/api-guide/annotate/positive-and-negative-annotations.md",sourceDirName:"api-guide/annotate",slug:"/api-guide/annotate/positive-and-negative-annotations",permalink:"/api-guide/annotate/positive-and-negative-annotations",draft:!1,unlisted:!1,editUrl:"https://github.com/Clarifai/docs/blob/main/docs/api-guide/annotate/positive-and-negative-annotations.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{description:"Learn how to make positive and negative annotations",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Training Data",permalink:"/api-guide/annotate/training-data"},next:{title:"Tasks : Create, Get, Update, Delete",permalink:"/api-guide/annotate/tasks"}},T={},b=[{value:"Positive Annotation",id:"positive-annotation",level:2},{value:"Negative Annotation",id:"negative-annotation",level:2}];function D(n){const e={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",strong:"strong",ul:"ul",...(0,s.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.h1,{id:"positive-and-negative-annotations",children:"Positive and Negative Annotations"}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"Learn how to make positive and negative annotations"})}),"\n",(0,a.jsx)("hr",{}),"\n",(0,a.jsx)(e.p,{children:"Positive and negative annotations play a critical role in training machine learning models."}),"\n",(0,a.jsx)(e.p,{children:"Positive annotations help the model identify and learn the features associated with a particular input. Negative annotations, on the other hand, help the model distinguish between similar inputs by highlighting what the input is not."}),"\n",(0,a.jsx)(e.p,{children:"Some inputs may also have overlapping features, especially in complex datasets. Providing both positive and negative annotations reduces the risk of the model misclassifying similar but distinct inputs, leading to more precise predictions."}),"\n",(0,a.jsx)(e.p,{children:"By annotating your data with both positive and negative labels, you provide your model with the comprehensive information it needs to learn effectively, which results in better performance and more reliable outcomes."}),"\n",(0,a.jsx)(e.admonition,{type:"info",children:(0,a.jsxs)(e.p,{children:["The initialization code used in the following examples is outlined in detail on the ",(0,a.jsx)(e.a,{href:"https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions",children:"client installation page."})]})}),"\n",(0,a.jsx)(e.admonition,{title:"value",type:"warning",children:(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:["\n",(0,a.jsxs)(e.p,{children:["The ",(0,a.jsx)(e.code,{children:"value"})," parameter is used to specify the presence of a concept in a request. A ",(0,a.jsx)(e.code,{children:"value"})," of 1.0 indicates that the concept is present (true), while a ",(0,a.jsx)(e.code,{children:"value"})," of 0.0 indicates that the concept is not present (false)."]}),"\n"]}),"\n",(0,a.jsxs)(e.li,{children:["\n",(0,a.jsxs)(e.p,{children:["When making HTTP requests, if the ",(0,a.jsx)(e.code,{children:"value"})," parameter is omitted, it defaults to a positive annotation. In contrast, for gRPC requests, a missing ",(0,a.jsx)(e.code,{children:"value"})," is interpreted as a negative annotation. To avoid unintended behavior, it's recommended to always explicitly set the ",(0,a.jsx)(e.code,{children:"value"})," parameter in your requests."]}),"\n"]}),"\n"]})}),"\n","\n","\n","\n",(0,a.jsx)(e.h2,{id:"positive-annotation",children:"Positive Annotation"}),"\n",(0,a.jsx)(e.p,{children:"If an input is tagged with a positive annotation, it is considered a positive label for it."}),"\n",(0,a.jsxs)(i.A,{children:[(0,a.jsx)(o.A,{value:"python",label:"Python",children:(0,a.jsx)(r.A,{className:"language-python",children:c})}),(0,a.jsx)(o.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,a.jsx)(r.A,{className:"language-javascript",children:l})}),(0,a.jsx)(o.A,{value:"nodejs",label:"NodeJS",children:(0,a.jsx)(r.A,{className:"language-javascript",children:u})}),(0,a.jsx)(o.A,{value:"java",label:"Java",children:(0,a.jsx)(r.A,{className:"language-java",children:p})}),(0,a.jsx)(o.A,{value:"php",label:"PHP",children:(0,a.jsx)(r.A,{className:"language-php",children:d})}),(0,a.jsx)(o.A,{value:"curl",label:"cURL",children:(0,a.jsx)(r.A,{className:"language-bash",children:h})})]}),"\n",(0,a.jsx)(e.h2,{id:"negative-annotation",children:"Negative Annotation"}),"\n",(0,a.jsx)(e.p,{children:"If an input is tagged with a negative annotation, it is treated as a negative label for that concept. It emphasizes that the input does not belong to that concept."}),"\n",(0,a.jsxs)(i.A,{children:[(0,a.jsx)(o.A,{value:"python",label:"Python",children:(0,a.jsx)(r.A,{className:"language-python",children:_})}),(0,a.jsx)(o.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,a.jsx)(r.A,{className:"language-javascript",children:I})}),(0,a.jsx)(o.A,{value:"nodejs",label:"NodeJS",children:(0,a.jsx)(r.A,{className:"language-javascript",children:f})}),(0,a.jsx)(o.A,{value:"java",label:"Java",children:(0,a.jsx)(r.A,{className:"language-java",children:E})}),(0,a.jsx)(o.A,{value:"php",label:"PHP",children:(0,a.jsx)(r.A,{className:"language-php",children:g})}),(0,a.jsx)(o.A,{value:"curl",label:"cURL",children:(0,a.jsx)(r.A,{className:"language-bash",children:A})})]})]})}function w(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(D,{...n})}):D(n)}},19365:(n,e,t)=>{t.d(e,{A:()=>o});t(96540);var a=t(18215);const s={tabItem:"tabItem_Ymn6"};var i=t(74848);function o(n){let{children:e,hidden:t,className:o}=n;return(0,i.jsx)("div",{role:"tabpanel",className:(0,a.A)(s.tabItem,o),hidden:t,children:e})}},11470:(n,e,t)=>{t.d(e,{A:()=>m});var a=t(96540),s=t(18215),i=t(23104),o=t(56347),r=t(205),c=t(57485),l=t(31682),u=t(70679);function p(n){return a.Children.toArray(n).filter((n=>"\n"!==n)).map((n=>{if(!n||(0,a.isValidElement)(n)&&function(n){const{props:e}=n;return!!e&&"object"==typeof e&&"value"in e}(n))return n;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof n.type?n.type:n.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function d(n){const{values:e,children:t}=n;return(0,a.useMemo)((()=>{const n=e??function(n){return p(n).map((n=>{let{props:{value:e,label:t,attributes:a,default:s}}=n;return{value:e,label:t,attributes:a,default:s}}))}(t);return function(n){const e=(0,l.X)(n,((n,e)=>n.value===e.value));if(e.length>0)throw new Error(`Docusaurus error: Duplicate values "${e.map((n=>n.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(n),n}),[e,t])}function h(n){let{value:e,tabValues:t}=n;return t.some((n=>n.value===e))}function _(n){let{queryString:e=!1,groupId:t}=n;const s=(0,o.W6)(),i=function(n){let{queryString:e=!1,groupId:t}=n;if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:e,groupId:t});return[(0,c.aZ)(i),(0,a.useCallback)((n=>{if(!i)return;const e=new URLSearchParams(s.location.search);e.set(i,n),s.replace({...s.location,search:e.toString()})}),[i,s])]}function I(n){const{defaultValue:e,queryString:t=!1,groupId:s}=n,i=d(n),[o,c]=(0,a.useState)((()=>function(n){let{defaultValue:e,tabValues:t}=n;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!h({value:e,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${t.map((n=>n.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const a=t.find((n=>n.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:e,tabValues:i}))),[l,p]=_({queryString:t,groupId:s}),[I,f]=function(n){let{groupId:e}=n;const t=function(n){return n?`docusaurus.tab.${n}`:null}(e),[s,i]=(0,u.Dv)(t);return[s,(0,a.useCallback)((n=>{t&&i.set(n)}),[t,i])]}({groupId:s}),E=(()=>{const n=l??I;return h({value:n,tabValues:i})?n:null})();(0,r.A)((()=>{E&&c(E)}),[E]);return{selectedValue:o,selectValue:(0,a.useCallback)((n=>{if(!h({value:n,tabValues:i}))throw new Error(`Can't select invalid tab value=${n}`);c(n),p(n),f(n)}),[p,f,i]),tabValues:i}}var f=t(92303);const E={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var g=t(74848);function A(n){let{className:e,block:t,selectedValue:a,selectValue:o,tabValues:r}=n;const c=[],{blockElementScrollPositionUntilNextRender:l}=(0,i.a_)(),u=n=>{const e=n.currentTarget,t=c.indexOf(e),s=r[t].value;s!==a&&(l(e),o(s))},p=n=>{let e=null;switch(n.key){case"Enter":u(n);break;case"ArrowRight":{const t=c.indexOf(n.currentTarget)+1;e=c[t]??c[0];break}case"ArrowLeft":{const t=c.indexOf(n.currentTarget)-1;e=c[t]??c[c.length-1];break}}e?.focus()};return(0,g.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":t},e),children:r.map((n=>{let{value:e,label:t,attributes:i}=n;return(0,g.jsx)("li",{role:"tab",tabIndex:a===e?0:-1,"aria-selected":a===e,ref:n=>c.push(n),onKeyDown:p,onClick:u,...i,className:(0,s.A)("tabs__item",E.tabItem,i?.className,{"tabs__item--active":a===e}),children:t??e},e)}))})}function C(n){let{lazy:e,children:t,selectedValue:s}=n;const i=(Array.isArray(t)?t:[t]).filter(Boolean);if(e){const n=i.find((n=>n.props.value===s));return n?(0,a.cloneElement)(n,{className:"margin-top--md"}):null}return(0,g.jsx)("div",{className:"margin-top--md",children:i.map(((n,e)=>(0,a.cloneElement)(n,{key:e,hidden:n.props.value!==s})))})}function P(n){const e=I(n);return(0,g.jsxs)("div",{className:(0,s.A)("tabs-container",E.tabList),children:[(0,g.jsx)(A,{...e,...n}),(0,g.jsx)(C,{...e,...n})]})}function m(n){const e=(0,f.A)();return(0,g.jsx)(P,{...n,children:p(n.children)},String(e))}}}]);
"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[9353],{58215:function(n,e,a){var i=a(67294);e.Z=function(n){var e=n.children,a=n.hidden,t=n.className;return i.createElement("div",{role:"tabpanel",hidden:a,className:t},e)}},26396:function(n,e,a){a.d(e,{Z:function(){return m}});var i=a(87462),t=a(67294),o=a(72389),p=a(79443);var s=function(){var n=(0,t.useContext)(p.Z);if(null==n)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return n},d=a(63616),l=a(86010),c="tabItem_vU9c";function r(n){var e,a,o,p=n.lazy,r=n.block,m=n.defaultValue,u=n.values,_=n.groupId,f=n.className,v=t.Children.map(n.children,(function(n){if((0,t.isValidElement)(n)&&void 0!==n.props.value)return n;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof n.type?n.type:n.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),h=null!=u?u:v.map((function(n){var e=n.props;return{value:e.value,label:e.label,attributes:e.attributes}})),b=(0,d.lx)(h,(function(n,e){return n.value===e.value}));if(b.length>0)throw new Error('Docusaurus error: Duplicate values "'+b.map((function(n){return n.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var g=null===m?m:null!=(e=null!=m?m:null==(a=v.find((function(n){return n.props.default})))?void 0:a.props.value)?e:null==(o=v[0])?void 0:o.props.value;if(null!==g&&!h.some((function(n){return n.value===g})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+g+'" but none of its children has the corresponding value. Available values are: '+h.map((function(n){return n.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var D=s(),R=D.tabGroupChoices,I=D.setTabGroupChoices,E=(0,t.useState)(g),w=E[0],y=E[1],O=[],N=(0,d.o5)().blockElementScrollPositionUntilNextRender;if(null!=_){var T=R[_];null!=T&&T!==w&&h.some((function(n){return n.value===T}))&&y(T)}var L=function(n){var e=n.currentTarget,a=O.indexOf(e),i=h[a].value;i!==w&&(N(e),y(i),null!=_&&I(_,i))},P=function(n){var e,a=null;switch(n.key){case"ArrowRight":var i=O.indexOf(n.currentTarget)+1;a=O[i]||O[0];break;case"ArrowLeft":var t=O.indexOf(n.currentTarget)-1;a=O[t]||O[O.length-1]}null==(e=a)||e.focus()};return t.createElement("div",{className:"tabs-container"},t.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":r},f)},h.map((function(n){var e=n.value,a=n.label,o=n.attributes;return t.createElement("li",(0,i.Z)({role:"tab",tabIndex:w===e?0:-1,"aria-selected":w===e,key:e,ref:function(n){return O.push(n)},onKeyDown:P,onFocus:L,onClick:L},o,{className:(0,l.Z)("tabs__item",c,null==o?void 0:o.className,{"tabs__item--active":w===e})}),null!=a?a:e)}))),p?(0,t.cloneElement)(v.filter((function(n){return n.props.value===w}))[0],{className:"margin-vert--md"}):t.createElement("div",{className:"margin-vert--md"},v.map((function(n,e){return(0,t.cloneElement)(n,{key:e,hidden:n.props.value!==w})}))))}function m(n){var e=(0,o.Z)();return t.createElement(r,(0,i.Z)({key:String(e)},n))}},11288:function(n,e,a){a.r(e),a.d(e,{contentTitle:function(){return r},default:function(){return f},frontMatter:function(){return c},metadata:function(){return m},toc:function(){return u}});var i=a(87462),t=a(63366),o=(a(67294),a(3905)),p=a(26396),s=a(58215),d=a(19055),l=["components"],c={description:"Make predictions on video inputs",sidebar_position:2},r="Video",m={unversionedId:"api-guide/predict/video",id:"api-guide/predict/video",title:"Video",description:"Make predictions on video inputs",source:"@site/docs/api-guide/predict/video.md",sourceDirName:"api-guide/predict",slug:"/api-guide/predict/video",permalink:"/api-guide/predict/video",tags:[],version:"current",sidebarPosition:2,frontMatter:{description:"Make predictions on video inputs",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Images",permalink:"/api-guide/predict/images"},next:{title:"Text",permalink:"/api-guide/predict/text"}},u=[{value:"Via URL",id:"via-url",children:[],level:2},{value:"Via Bytes",id:"via-bytes",children:[],level:2}],_={toc:u};function f(n){var e=n.components,a=(0,t.Z)(n,l);return(0,o.kt)("wrapper",(0,i.Z)({},_,a,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"video"},"Video"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Make predictions on video inputs")),(0,o.kt)("hr",null),(0,o.kt)("p",null,"With a video input, the Predict API response will return a list of predicted concepts for every frame of a video. By default, video is processed at 1 frame per second ","(","but this is configurable in the predict request",")",". This means you will receive a list of concepts for every second of your video."),(0,o.kt)("p",null,"You can run Predict on your video using a select number of ",(0,o.kt)("a",{parentName:"p",href:"https://www.clarifai.com/models"},"Clarifai Models"),". The models that are currently supported are: "),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Apparel"),(0,o.kt)("li",{parentName:"ul"},"Food"),(0,o.kt)("li",{parentName:"ul"},"General"),(0,o.kt)("li",{parentName:"ul"},"NSFW"),(0,o.kt)("li",{parentName:"ul"},"Travel"),(0,o.kt)("li",{parentName:"ul"},"Wedding")),(0,o.kt)("p",null,"You can make an API call by providing the ",(0,o.kt)("inlineCode",{parentName:"p"},"{model-id}")," parameter and specifying your data parameter as ",(0,o.kt)("inlineCode",{parentName:"p"},"video")," instead of ",(0,o.kt)("inlineCode",{parentName:"p"},"image"),"."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Video limits")),(0,o.kt)("p",null,"The Predict API has limits to the length and size it can support. A video, uploaded through URL, can be anywhere up to 80MB in size or 10mins in length. When a video is sent through by bytes, the Predict API can support 10MB in size."),(0,o.kt)("p",null,"If your video exceeds the limits, please follow our ",(0,o.kt)("a",{parentName:"p",href:"https://www.clarifai.com/blog/splitting-video-into-smaller-pieces"},"tutorial")," on how to break up a large video into smaller components, and send those into the Video API. Otherwise, the processing will time out and you will receive an error response."),(0,o.kt)("h2",{id:"via-url"},"Via URL"),(0,o.kt)("p",null,"Below is an example of how you would send video URLs and receive predictions from the ",(0,o.kt)("inlineCode",{parentName:"p"},"general")," model."),(0,o.kt)("p",null,"Note that the initialization code used here is outlined in detail on the ",(0,o.kt)("a",{parentName:"p",href:"../api-overview/api-clients#client-installation-instructions"},"client installation page.")),(0,o.kt)(p.Z,{mdxType:"Tabs"},(0,o.kt)(s.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,o.kt)(d.Z,{className:"language-python",mdxType:"CodeBlock"},"###################################################################################\n# In this section, we set the user authentication, app and model IDs, and the URL\n# of the video we want as an input. Change these strings to run your own example.\n###################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\nMODEL_ID = 'YOUR_MODEL_ID_HERE'\n# Change this to whatever video URL you want to process\nVIDEO_URL = 'https://samples.clarifai.com/beer.mp4'\n# This is optional. You can specify a model version or an empty string for the default.\nMODEL_VERSION_ID = ''\n\n############################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n############################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\npost_model_outputs_response = stub.PostModelOutputs(\n    service_pb2.PostModelOutputsRequest(\n        user_app_id=userDataObject,  # The userDataObject is created in the overview and is required when using a PAT\n        model_id=MODEL_ID,\n        version_id=MODEL_VERSION_ID,  # This is optional. Defaults to the latest model version\n        inputs=[\n            resources_pb2.Input(\n                data=resources_pb2.Data(\n                    video=resources_pb2.Video(\n                        url=VIDEO_URL\n                    )\n                )\n            )\n        ]\n    ),\n    metadata=metadata\n)\nif post_model_outputs_response.status.code != status_code_pb2.SUCCESS:\n    print(post_model_outputs_response.status)\n    raise Exception(\"Post model outputs failed, status: \" + post_model_outputs_response.status.description)\n\n# Since we have one input, one output will exist here\noutput = post_model_outputs_response.outputs[0]\n\n# A separate prediction is available for each \"frame\"\nfor frame in output.data.frames:\n    print(\"Predicted concepts on frame \" + str(frame.frame_info.time) + \":\")\n    for concept in frame.data.concepts:\n        print(\"\\t%s %.2f\" % (concept.name, concept.value))\n\n# Uncomment this line to print the full Response JSON\n#print(output)")),(0,o.kt)(s.Z,{value:"js_rest",label:"Javascript (REST)",mdxType:"TabItem"},(0,o.kt)(d.Z,{className:"language-javascript",mdxType:"CodeBlock"},"\x3c!--index.html file--\x3e\n<script>\n    ////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app and model IDs, and the URL\n    // of the video we want as an input. Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = 'YOUR_USER_ID_HERE';\n    // Your PAT (Personal Access Token) can be found in the portal under Authentification\n    const PAT = 'YOUR_PAT_HERE';\n    const APP_ID = 'YOUR_APP_ID_HERE';\n    const MODEL_ID = 'YOUR_MODEL_ID_HERE';\n    const MODEL_VERSION_ID = 'YOUR_MODEL_VERSION_ID';\n    // Change this to whatever video URL you want to process\n    const VIDEO_URL = 'https://samples.clarifai.com/beer.mp4';\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        \"user_app_id\": {\n            \"user_id\": USER_ID,\n            \"app_id\": APP_ID\n        },\n        \"inputs\": [\n            {\n                \"data\": {\n                    \"video\": {\n                        \"url\": VIDEO_URL\n                    }\n                }\n            }\n        ]\n    });\n\n    const requestOptions = {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        },\n        body: raw\n    };\n\n    // NOTE: MODEL_VERSION_ID is optional, you can also call prediction with the MODEL_ID only\n    // https://api.clarifai.com/v2/models/{YOUR_MODEL_ID}/outputs\n    // this will default to the latest version_id\n\n    fetch(\"https://api.clarifai.com/v2/models/\" + MODEL_ID + \"/versions/\" + MODEL_VERSION_ID + \"/outputs\", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n<\/script>")),(0,o.kt)(s.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,o.kt)(d.Z,{className:"language-javascript",mdxType:"CodeBlock"},'//index.js file\n\n////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app and model IDs, and the URL\n// of the video we want as an input. Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\nconst MODEL_ID = \'YOUR_MODEL_ID_HERE\';\n// Change this to whatever video URL you want to process\nconst VIDEO_URL = \'https://samples.clarifai.com/beer.mp4\';\n// This is optional.You can specify a model version or the empty string for the default\nconst MODEL_VERSION_ID = \'\';\n\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PostModelOutputs(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        model_id: MODEL_ID,\n        version_id: MODEL_VERSION_ID, // This is optional. Defaults to the latest model version.\n        inputs: [\n            { data: { video: { url: VIDEO_URL, allow_duplicate_url: true } } }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post model outputs failed, status: " + response.status.description);\n        }\n\n        // Since we have one input, one output will exist here.\n        const output = response.outputs[0];\n\n        // A separate prediction is available for each "frame".\n        for (const frame of output.data.frames) {\n            console.log("Predicted concepts on frame " + frame.frame_info.time + ":");\n            for (const concept of frame.data.concepts) {\n                console.log("\\t" + concept.name + " " + concept.value);\n            }\n        }\n    }\n\n);')),(0,o.kt)(s.Z,{value:"php",label:"PHP",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n# Insert here the initialization code as outlined on this page:\n# https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\n///////////////////////////////////////////////////////////////////////////////\n// Specifying the Request Data\n///////////////////////////////////////////////////////////////////////////////\n//\n// In the Clarifai platform a video is defined by a special Video object.\n// There are several ways in which an Video object can be populated including\n// by url and video bytes (base64).\n//\n$video = new Video([\n    'url' => 'https://samples.clarifai.com/beer.mp4'\n]);\n\n//\n// After a Video object is created, a Data object is constructed around it.\n// The Data object offers a container that contains additional video independent\n// metadata.  In this particular use case, no other metadata is needed to be\n// specified.\n//\n$data = new Data([\n    'video' => $video\n]);\n\n//\n// The Data object is then wrapped in an Input object in order to meet the\n// API specification.  Additional fields are available to populate in the Input\n// object, but for the purposes of this example we can send in just the\n// Data object.\n//\n$input = new Input([\n    'data' => $data\n]);\n\n///////////////////////////////////////////////////////////////////////////////\n// Creating the request object \n///////////////////////////////////////////////////////////////////////////////\n//\n// Finally, the request object itself is created.  This object carries the request\n// along with the request status and other metadata related to the request itself.\n// In this example we populate:\n//    - the `user_app_id` field with the UserAppIDSet constructed above\n//    - the `model_id` field with the ID of the model we are referencing\n//    - the `inputs` field with an array of input objects constructed above \n//\n$request = new PostModelOutputsRequest([\n    'user_app_id' => $userDataObject, // This is defined above\n    'model_id' => 'aaa03c23b3724a16a56b629203edc62c',  // This is the ID of the publicly available General model.\n    'inputs' => [$input]\n]);\n\n///////////////////////////////////////////////////////////////////////////////\n// Making the RPC call\n///////////////////////////////////////////////////////////////////////////////\n//\n// Once the request object is constructed, we can call the actual request to the\n// Clarifai platform.  This uses the opened gRPC client channel to communicate the\n// request and then wait for the response.\n//\n[$response, $status] = $client->PostModelOutputs(\n    $request,\n    $metadata\n)->wait();\n\n///////////////////////////////////////////////////////////////////////////////\n// Handling the Response\n///////////////////////////////////////////////////////////////////////////////\n//\n// The response is returned and the first thing we do is check the status of it.\n// A successful response will have a status code of 0, otherwise there is some \n// reported error.\n//\nif ($status->code !== 0) throw new Exception(\"Error: {$status->details}\");\n\n//\n// In addition to the RPC response status, there is a Clarifai API status that\n// reports if the operationo was a success or failure (not just that the commuunication)\n// was successful.\n//\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    throw new Exception(\"Failure response: \" . $response->getStatus()->getDescription() . \" \" .\n        $response->getStatus()->getDetails());\n}\n\n//\n// The output of a successful call can be used in many ways.  In this example,\n// we loop through all of the frames of the video and print out the predicted \n// concepts for each along with their numerical prediction value (confidence).\n//\nforeach ($output->getData()->getFrames() as $frame) {\n    echo \"Predicted concepts on frame \" . $frame->getFrameInfo()->getTime() . \":\";\n    foreach ($frame->getData()->getConcepts() as $concept) {\n        echo \"   \" . $concept->getName() . \": \" . number_format($concept->getValue(), 2) . \"\\n\";\n    }\n}\n?>\n"))),(0,o.kt)(s.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nMultiOutputResponse postModelOutputsResponse = stub.postModelOutputs(\n    PostModelOutputsRequest.newBuilder()\n        .setModelId("{THE_MODEL_ID}")\n        .setVersionId("{THE_MODEL_VERSION_ID")  // This is optional. Defaults to the latest model version.\n        .addInputs(\n            Input.newBuilder().setData(\n                Data.newBuilder().setVideo(\n                    Video.newBuilder().setUrl("https://samples.clarifai.com/beer.mp4")\n                )\n            )\n        )\n        .build()\n);\n\nif (postModelOutputsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n  throw new RuntimeException("Post model outputs failed, status: " + postModelOutputsResponse.getStatus());\n}\n\n// Since we have one input, one output will exist here.\nOutput output = postModelOutputsResponse.getOutputs(0);\n\n// A separate prediction is available for each "frame".\nfor (Frame frame : output.getData().getFramesList()) {\n    System.out.println("Predicted concepts on frame " + frame.getFrameInfo().getTime() + ":");\n    for (Concept concept : frame.getData().getConceptsList()) {\n        System.out.printf("\\t%s %.2f%n", concept.getName(), concept.getValue());\n    }\n}\n'))),(0,o.kt)(s.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'\n  {\n    "inputs": [\n      {\n        "data": {\n          "video": {\n            "url": "https://samples.clarifai.com/beer.mp4"\n          }\n        }\n      }\n    ]\n  }\'\\\n  https://api.clarifai.com/v2/models/{THE_MODEL_ID}/versions/{THE_MODEL_VERSION_ID}/outputs\n\n# Model version ID is optional. It defaults to the latest model version.\n')))),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Code Output Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},"Predicted concepts on frame 500:\n    beer 1.00\n    glass 1.00\n    foam 1.00\n    drink 1.00\n    lager 1.00\n    alcohol 0.99\n    brewery 0.99\n    liquid 0.98\n    cold 0.98\n    ale 0.98\n    bubble 0.98\n    full 0.98\n    bar 0.98\n    pub 0.97\n    pint 0.97\n    foamy 0.95\n    mug 0.95\n    refreshment 0.94\n    cool 0.94\n    intoxicated 0.94\nPredicted concepts on frame 1500:\n    beer 1.00\n    glass 1.00\n    foam 1.00\n    lager 1.00\n    drink 1.00\n    alcohol 1.00\n    brewery 1.00\n    ale 0.99\n    cold 0.99\n    pint 0.99\n    pub 0.99\n    bar 0.99\n    full 0.99\n    foamy 0.98\n    liquid 0.98\n    amber 0.98\n    liquor 0.98\n    bubble 0.97\n    brew 0.97\n    sketch out 0.97\nPredicted concepts on frame 2500:\n    glass 1.00\n    drink 0.99\n    foam 0.99\n    beer 0.99\n    cold 0.98\n    no person 0.98\n    liquid 0.97\n    alcohol 0.96\n    full 0.95\n    lager 0.95\n    bar 0.93\n    refreshment 0.91\n    thirst 0.91\n    liquor 0.89\n    pub 0.88\n    cool 0.87\n    bubble 0.87\n    brewery 0.86\n    intoxicated 0.85\n    foamy 0.85\nPredicted concepts on frame 3500:\n    drink 0.99\n    glass 0.99\n    no person 0.98\n    foam 0.97\n    alcohol 0.97\n    beer 0.97\n    liquid 0.96\n    cold 0.94\n    refreshment 0.92\n    food 0.89\n    full 0.89\n    vertical 0.89\n    gold 0.88\n    bubble 0.88\n    bar 0.86\n    health 0.85\n    bottle 0.84\n    sparkling 0.84\n    lager 0.82\n    translucent 0.82\nPredicted concepts on frame 4500:\n    beer 1.00\n    no person 0.99\n    foam 0.99\n    glass 0.97\n    drink 0.96\n    lager 0.96\n    brewery 0.94\n    bar 0.93\n    cold 0.92\n    alcohol 0.91\n    pint 0.91\n    full 0.90\n    foamy 0.90\n    food 0.90\n    refreshment 0.87\n    mug 0.86\n    vertical 0.84\n    liquor 0.84\n    ale 0.82\n    liquid 0.79\nPredicted concepts on frame 5500:\n    beer 1.00\n    foam 0.99\n    no person 0.99\n    glass 0.98\n    lager 0.98\n    drink 0.97\n    brewery 0.97\n    cold 0.95\n    full 0.95\n    bar 0.95\n    pint 0.94\n    alcohol 0.94\n    foamy 0.93\n    ale 0.90\n    pub 0.89\n    mug 0.88\n    refreshment 0.88\n    liquor 0.87\n    food 0.85\n    liquid 0.85\nPredicted concepts on frame 6500:\n    beer 1.00\n    foam 0.99\n    no person 0.99\n    glass 0.98\n    drink 0.98\n    lager 0.98\n    brewery 0.96\n    bar 0.95\n    alcohol 0.94\n    cold 0.94\n    pint 0.94\n    full 0.93\n    foamy 0.91\n    ale 0.89\n    mug 0.88\n    pub 0.88\n    refreshment 0.88\n    food 0.86\n    liquid 0.85\n    liquor 0.85\nPredicted concepts on frame 7500:\n    beer 1.00\n    foam 0.99\n    no person 0.99\n    glass 0.98\n    lager 0.98\n    drink 0.98\n    brewery 0.97\n    cold 0.96\n    bar 0.95\n    pint 0.95\n    alcohol 0.94\n    full 0.94\n    foamy 0.92\n    ale 0.91\n    pub 0.90\n    liquor 0.89\n    mug 0.88\n    food 0.86\n    refreshment 0.86\n    liquid 0.84\nPredicted concepts on frame 8500:\n    beer 1.00\n    foam 0.99\n    no person 0.99\n    glass 0.98\n    lager 0.98\n    drink 0.98\n    brewery 0.97\n    cold 0.96\n    bar 0.95\n    pint 0.95\n    alcohol 0.94\n    full 0.94\n    foamy 0.92\n    ale 0.91\n    pub 0.90\n    liquor 0.89\n    mug 0.88\n    food 0.86\n    refreshment 0.86\n    liquid 0.84\n\n"))),(0,o.kt)("details",null,(0,o.kt)("summary",null,"JSON Output Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'id: "79ab98ef65534efa9d71c31428ec44b4"\nstatus {\n  code: SUCCESS\n  description: "Ok"\n}\ncreated_at {\n  seconds: 1643285191\n  nanos: 303509944\n}\nmodel {\n  id: "general-image-recognition"\n  name: "general"\n  created_at {\n    seconds: 1457543499\n    nanos: 608845000\n  }\n  app_id: "main"\n  output_info {\n    output_config {\n    }\n    message: "Show output_info with: GET /models/{model_id}/output_info"\n    fields_map {\n      fields {\n        key: "concepts"\n        value {\n          string_value: "softmax"\n        }\n      }\n    }\n  }\n  model_version {\n    id: "aa7f35c01e0642fda5cf400f543e7c40"\n    created_at {\n      seconds: 1520370624\n      nanos: 454834000\n    }\n    status {\n      code: MODEL_TRAINED\n      description: "Model is trained and ready"\n    }\n    visibility {\n      gettable: PUBLIC\n    }\n    app_id: "main"\n    user_id: "clarifai"\n    metadata {\n    }\n  }\n  display_name: "general-visual-classifier"\n  user_id: "clarifai"\n  input_info {\n    fields_map {\n      fields {\n        key: "image"\n        value {\n          string_value: "images"\n        }\n      }\n    }\n  }\n  train_info {\n  }\n  model_type_id: "visual-classifier"\n  visibility {\n    gettable: PUBLIC\n  }\n  description: "Image recognition model for identifying different concepts in images and video including objects, themes, moods, and more."\n  metadata {\n  }\n  notes: "**General Information**\\n\\n- Purpose: Classifier for a variety of concepts, common objects, etc. This model is a great all-purpose solution for most visual recognition needs with industry-leading performance.\\n\\n- Architecture: Customized InceptionV2\\n\\n- Intended Use: image indexing by tags, filtering, cascade routing\\n\\n- Limitations: works well when content is prevalent in the image\\n\\n\\n\\n **\\nTraining/Test Data**\\n\\nThe model was trained and tested on an internal dataset with approximately 10,000 concepts and 20M images, with multiple concepts per image. The class distributions on train and validation sets are long-tailed. The validation set was annotated using a combination of originally curated labels with incomplete annotations, where were further completed by adding additional labels proposed a newer version of this model (aa7f35c01e0642fda5cf400f543e7c40) at a low threshold and verified by human annotators. "\n  modified_at {\n    seconds: 1634831222\n    nanos: 80260000\n  }\n  import_info {\n  }\n}\ninput {\n  id: "7fb8e93a47df430d8eb6d03cd4c412a3"\n  data {\n    video {\n      url: "https://samples.clarifai.com/beer.mp4"\n    }\n  }\n}\ndata {\n  frames {\n    frame_info {\n      time: 500\n    }\n    data {\n      concepts {\n        id: "ai_TBlp0Pt3"\n        name: "beer"\n        value: 0.9988051652908325\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_mCpQg89c"\n        name: "glass"\n        value: 0.9982008934020996\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_8XGJjH7R"\n        name: "foam"\n        value: 0.9973153471946716\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_zJx6RbxW"\n        name: "drink"\n        value: 0.9968197345733643\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_3R5pJ6hB"\n        name: "lager"\n        value: 0.9958932399749756\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_drK6ClJR"\n        name: "alcohol"\n        value: 0.9947922825813293\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_2LWXN7Bn"\n        name: "brewery"\n        value: 0.9894191026687622\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_5VHsZr8N"\n        name: "liquid"\n        value: 0.981312096118927\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_2gmKZLxp"\n        name: "cold"\n        value: 0.9799724221229553\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_qCKzbr0g"\n        name: "ale"\n        value: 0.9794926047325134\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_7vR9zv7l"\n        name: "bubble"\n        value: 0.9781787991523743\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_54zxXFGL"\n        name: "full"\n        value: 0.9775476455688477\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_SsmKLB4z"\n        name: "bar"\n        value: 0.9774224758148193\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_XNmzgDnF"\n        name: "pub"\n        value: 0.9717299938201904\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_QnpbpDLK"\n        name: "pint"\n        value: 0.9698840975761414\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_F547sXrF"\n        name: "foamy"\n        value: 0.9536985158920288\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_pkvDRSJ1"\n        name: "mug"\n        value: 0.9475905895233154\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_B3MXt5Ng"\n        name: "refreshment"\n        value: 0.9417927265167236\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_VXtfX6F5"\n        name: "cool"\n        value: 0.9395936727523804\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_nMNvWpn8"\n        name: "intoxicated"\n        value: 0.9375916123390198\n        app_id: "main"\n      }\n    }\n    id: "faa9f3d5c8569123d8bea365ea478031"\n  }\n  frames {\n    frame_info {\n      index: 1\n      time: 1500\n    }\n    data {\n      concepts {\n        id: "ai_TBlp0Pt3"\n        name: "beer"\n        value: 0.9997990727424622\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_mCpQg89c"\n        name: "glass"\n        value: 0.9992085099220276\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_8XGJjH7R"\n        name: "foam"\n        value: 0.9991655349731445\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_3R5pJ6hB"\n        name: "lager"\n        value: 0.9990026354789734\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_zJx6RbxW"\n        name: "drink"\n        value: 0.9977992177009583\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_drK6ClJR"\n        name: "alcohol"\n        value: 0.9972625970840454\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_2LWXN7Bn"\n        name: "brewery"\n        value: 0.9962783455848694\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_qCKzbr0g"\n        name: "ale"\n        value: 0.9941165447235107\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_2gmKZLxp"\n        name: "cold"\n        value: 0.9934180974960327\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_QnpbpDLK"\n        name: "pint"\n        value: 0.9922869205474854\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_XNmzgDnF"\n        name: "pub"\n        value: 0.9907853603363037\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_SsmKLB4z"\n        name: "bar"\n        value: 0.9899360537528992\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_54zxXFGL"\n        name: "full"\n        value: 0.9871671795845032\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_F547sXrF"\n        name: "foamy"\n        value: 0.984533429145813\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_5VHsZr8N"\n        name: "liquid"\n        value: 0.9825930595397949\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_n1b6R1vv"\n        name: "amber"\n        value: 0.9777848720550537\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_3l2jRv5s"\n        name: "liquor"\n        value: 0.9757136106491089\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_7vR9zv7l"\n        name: "bubble"\n        value: 0.9743807911872864\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_4Dlsldjg"\n        name: "brew"\n        value: 0.9738532304763794\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_74H0z2d2"\n        name: "sketch out"\n        value: 0.9724686741828918\n        app_id: "main"\n      }\n    }\n    id: "8e5f8672bdda2f2682d59ccc019d48c0"\n  }\n  frames {\n    frame_info {\n      index: 2\n      time: 2500\n    }\n    data {\n      concepts {\n        id: "ai_mCpQg89c"\n        name: "glass"\n        value: 0.9965206384658813\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_zJx6RbxW"\n        name: "drink"\n        value: 0.9949583411216736\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_8XGJjH7R"\n        name: "foam"\n        value: 0.9936542510986328\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_TBlp0Pt3"\n        name: "beer"\n        value: 0.988069474697113\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_2gmKZLxp"\n        name: "cold"\n        value: 0.9829316735267639\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_786Zr311"\n        name: "no person"\n        value: 0.9772725105285645\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_5VHsZr8N"\n        name: "liquid"\n        value: 0.9673009514808655\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_drK6ClJR"\n        name: "alcohol"\n        value: 0.960793137550354\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_54zxXFGL"\n        name: "full"\n        value: 0.9534621834754944\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_3R5pJ6hB"\n        name: "lager"\n        value: 0.9493317008018494\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_SsmKLB4z"\n        name: "bar"\n        value: 0.9254936575889587\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_B3MXt5Ng"\n        name: "refreshment"\n        value: 0.9130513072013855\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_bNlklStp"\n        name: "thirst"\n        value: 0.9126085042953491\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_3l2jRv5s"\n        name: "liquor"\n        value: 0.8912835121154785\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_XNmzgDnF"\n        name: "pub"\n        value: 0.879002571105957\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_VXtfX6F5"\n        name: "cool"\n        value: 0.8719608783721924\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_7vR9zv7l"\n        name: "bubble"\n        value: 0.8683509826660156\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_2LWXN7Bn"\n        name: "brewery"\n        value: 0.8581545948982239\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_nMNvWpn8"\n        name: "intoxicated"\n        value: 0.8477959036827087\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_F547sXrF"\n        name: "foamy"\n        value: 0.8463982939720154\n        app_id: "main"\n      }\n    }\n    id: "3f4cd8b6cbe2361de2d3a3f84906723c"\n  }\n  frames {\n    frame_info {\n      index: 3\n      time: 3500\n    }\n    data {\n      concepts {\n        id: "ai_zJx6RbxW"\n        name: "drink"\n        value: 0.9926630258560181\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_mCpQg89c"\n        name: "glass"\n        value: 0.9923473596572876\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_786Zr311"\n        name: "no person"\n        value: 0.9764698147773743\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_8XGJjH7R"\n        name: "foam"\n        value: 0.9728322625160217\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_drK6ClJR"\n        name: "alcohol"\n        value: 0.966442883014679\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_TBlp0Pt3"\n        name: "beer"\n        value: 0.9658946990966797\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_5VHsZr8N"\n        name: "liquid"\n        value: 0.9584060311317444\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_2gmKZLxp"\n        name: "cold"\n        value: 0.9354620575904846\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_B3MXt5Ng"\n        name: "refreshment"\n        value: 0.9240690469741821\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_3PlgVmlN"\n        name: "food"\n        value: 0.8922897577285767\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_54zxXFGL"\n        name: "full"\n        value: 0.8912531137466431\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_ZSKpCCHD"\n        name: "vertical"\n        value: 0.890453040599823\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_7qwGxLch"\n        name: "gold"\n        value: 0.8823112845420837\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_7vR9zv7l"\n        name: "bubble"\n        value: 0.8816878795623779\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_SsmKLB4z"\n        name: "bar"\n        value: 0.862342119216919\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_mZ2tl6cW"\n        name: "health"\n        value: 0.8497162461280823\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_12dz73B9"\n        name: "bottle"\n        value: 0.8430662751197815\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_8zbKXvD7"\n        name: "sparkling"\n        value: 0.842933177947998\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_3R5pJ6hB"\n        name: "lager"\n        value: 0.8230189085006714\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_rlLtJVWx"\n        name: "translucent"\n        value: 0.8191360235214233\n        app_id: "main"\n      }\n    }\n    id: "049f7331f17764126fa433ccc7eb27a6"\n  }\n  frames {\n    frame_info {\n      index: 4\n      time: 4500\n    }\n    data {\n      concepts {\n        id: "ai_TBlp0Pt3"\n        name: "beer"\n        value: 0.9961544871330261\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_786Zr311"\n        name: "no person"\n        value: 0.9909304976463318\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_8XGJjH7R"\n        name: "foam"\n        value: 0.9882357120513916\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_mCpQg89c"\n        name: "glass"\n        value: 0.9710526466369629\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_zJx6RbxW"\n        name: "drink"\n        value: 0.9644208550453186\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_3R5pJ6hB"\n        name: "lager"\n        value: 0.9598450660705566\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_2LWXN7Bn"\n        name: "brewery"\n        value: 0.94231778383255\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_SsmKLB4z"\n        name: "bar"\n        value: 0.9267554879188538\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_2gmKZLxp"\n        name: "cold"\n        value: 0.9237532615661621\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_drK6ClJR"\n        name: "alcohol"\n        value: 0.910051167011261\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_QnpbpDLK"\n        name: "pint"\n        value: 0.9066912531852722\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_54zxXFGL"\n        name: "full"\n        value: 0.8988522887229919\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_F547sXrF"\n        name: "foamy"\n        value: 0.8987897634506226\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_3PlgVmlN"\n        name: "food"\n        value: 0.8952534198760986\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_B3MXt5Ng"\n        name: "refreshment"\n        value: 0.8680539131164551\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_pkvDRSJ1"\n        name: "mug"\n        value: 0.8612155318260193\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_ZSKpCCHD"\n        name: "vertical"\n        value: 0.8379439115524292\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_3l2jRv5s"\n        name: "liquor"\n        value: 0.8370608687400818\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_qCKzbr0g"\n        name: "ale"\n        value: 0.8213710784912109\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_5VHsZr8N"\n        name: "liquid"\n        value: 0.7925900220870972\n        app_id: "main"\n      }\n    }\n    id: "a815862119825cfb037834ec5dc24619"\n  }\n  frames {\n    frame_info {\n      index: 5\n      time: 5500\n    }\n    data {\n      concepts {\n        id: "ai_TBlp0Pt3"\n        name: "beer"\n        value: 0.9980643391609192\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_8XGJjH7R"\n        name: "foam"\n        value: 0.9935665726661682\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_786Zr311"\n        name: "no person"\n        value: 0.9905995726585388\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_mCpQg89c"\n        name: "glass"\n        value: 0.982948899269104\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_3R5pJ6hB"\n        name: "lager"\n        value: 0.9775984287261963\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_zJx6RbxW"\n        name: "drink"\n        value: 0.97336745262146\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_2LWXN7Bn"\n        name: "brewery"\n        value: 0.965510368347168\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_2gmKZLxp"\n        name: "cold"\n        value: 0.9463648200035095\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_54zxXFGL"\n        name: "full"\n        value: 0.945787250995636\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_SsmKLB4z"\n        name: "bar"\n        value: 0.9453830718994141\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_QnpbpDLK"\n        name: "pint"\n        value: 0.9434540867805481\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_drK6ClJR"\n        name: "alcohol"\n        value: 0.9397314786911011\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_F547sXrF"\n        name: "foamy"\n        value: 0.9338845610618591\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_qCKzbr0g"\n        name: "ale"\n        value: 0.9008448719978333\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_XNmzgDnF"\n        name: "pub"\n        value: 0.8929358124732971\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_pkvDRSJ1"\n        name: "mug"\n        value: 0.8799080848693848\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_B3MXt5Ng"\n        name: "refreshment"\n        value: 0.8764391541481018\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_3l2jRv5s"\n        name: "liquor"\n        value: 0.8716399669647217\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_3PlgVmlN"\n        name: "food"\n        value: 0.852960467338562\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_5VHsZr8N"\n        name: "liquid"\n        value: 0.8480190634727478\n        app_id: "main"\n      }\n    }\n    id: "14572f138018d23fcd39a87f0c51880e"\n  }\n  frames {\n    frame_info {\n      index: 6\n      time: 6500\n    }\n    data {\n      concepts {\n        id: "ai_TBlp0Pt3"\n        name: "beer"\n        value: 0.9978025555610657\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_8XGJjH7R"\n        name: "foam"\n        value: 0.9900859594345093\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_786Zr311"\n        name: "no person"\n        value: 0.989570140838623\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_mCpQg89c"\n        name: "glass"\n        value: 0.9801958203315735\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_zJx6RbxW"\n        name: "drink"\n        value: 0.976635217666626\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_3R5pJ6hB"\n        name: "lager"\n        value: 0.9750798344612122\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_2LWXN7Bn"\n        name: "brewery"\n        value: 0.9616800546646118\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_SsmKLB4z"\n        name: "bar"\n        value: 0.9454798102378845\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_drK6ClJR"\n        name: "alcohol"\n        value: 0.9426078200340271\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_2gmKZLxp"\n        name: "cold"\n        value: 0.9405171871185303\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_QnpbpDLK"\n        name: "pint"\n        value: 0.9403313994407654\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_54zxXFGL"\n        name: "full"\n        value: 0.9268600344657898\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_F547sXrF"\n        name: "foamy"\n        value: 0.914089560508728\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_qCKzbr0g"\n        name: "ale"\n        value: 0.8905293345451355\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_pkvDRSJ1"\n        name: "mug"\n        value: 0.881027102470398\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_XNmzgDnF"\n        name: "pub"\n        value: 0.8808913230895996\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_B3MXt5Ng"\n        name: "refreshment"\n        value: 0.8798633217811584\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_3PlgVmlN"\n        name: "food"\n        value: 0.8592641949653625\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_5VHsZr8N"\n        name: "liquid"\n        value: 0.8535290956497192\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_3l2jRv5s"\n        name: "liquor"\n        value: 0.8499879837036133\n        app_id: "main"\n      }\n    }\n    id: "7790d9923639183be7213e8330736ea5"\n  }\n  frames {\n    frame_info {\n      index: 7\n      time: 7500\n    }\n    data {\n      concepts {\n        id: "ai_TBlp0Pt3"\n        name: "beer"\n        value: 0.9986417889595032\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_8XGJjH7R"\n        name: "foam"\n        value: 0.9933319687843323\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_786Zr311"\n        name: "no person"\n        value: 0.9932761192321777\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_mCpQg89c"\n        name: "glass"\n        value: 0.9835835099220276\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_3R5pJ6hB"\n        name: "lager"\n        value: 0.9804980754852295\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_zJx6RbxW"\n        name: "drink"\n        value: 0.9756208062171936\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_2LWXN7Bn"\n        name: "brewery"\n        value: 0.9704380035400391\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_2gmKZLxp"\n        name: "cold"\n        value: 0.9604755640029907\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_SsmKLB4z"\n        name: "bar"\n        value: 0.9517722129821777\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_QnpbpDLK"\n        name: "pint"\n        value: 0.9517138004302979\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_drK6ClJR"\n        name: "alcohol"\n        value: 0.93982994556427\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_54zxXFGL"\n        name: "full"\n        value: 0.9397101998329163\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_F547sXrF"\n        name: "foamy"\n        value: 0.9207385778427124\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_qCKzbr0g"\n        name: "ale"\n        value: 0.9087189435958862\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_XNmzgDnF"\n        name: "pub"\n        value: 0.9011164307594299\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_3l2jRv5s"\n        name: "liquor"\n        value: 0.885781466960907\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_pkvDRSJ1"\n        name: "mug"\n        value: 0.8845415115356445\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_3PlgVmlN"\n        name: "food"\n        value: 0.8642757534980774\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_B3MXt5Ng"\n        name: "refreshment"\n        value: 0.8598712086677551\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_5VHsZr8N"\n        name: "liquid"\n        value: 0.8406236171722412\n        app_id: "main"\n      }\n    }\n    id: "32224efe9c43139c9f3070930bae4e6c"\n  }\n  frames {\n    frame_info {\n      index: 8\n      time: 8500\n    }\n    data {\n      concepts {\n        id: "ai_TBlp0Pt3"\n        name: "beer"\n        value: 0.9986417889595032\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_8XGJjH7R"\n        name: "foam"\n        value: 0.9933319687843323\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_786Zr311"\n        name: "no person"\n        value: 0.9932761192321777\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_mCpQg89c"\n        name: "glass"\n        value: 0.9835835099220276\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_3R5pJ6hB"\n        name: "lager"\n        value: 0.9804980754852295\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_zJx6RbxW"\n        name: "drink"\n        value: 0.9756208062171936\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_2LWXN7Bn"\n        name: "brewery"\n        value: 0.9704380035400391\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_2gmKZLxp"\n        name: "cold"\n        value: 0.9604755640029907\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_SsmKLB4z"\n        name: "bar"\n        value: 0.9517722129821777\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_QnpbpDLK"\n        name: "pint"\n        value: 0.9517138004302979\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_drK6ClJR"\n        name: "alcohol"\n        value: 0.93982994556427\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_54zxXFGL"\n        name: "full"\n        value: 0.9397101998329163\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_F547sXrF"\n        name: "foamy"\n        value: 0.9207385778427124\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_qCKzbr0g"\n        name: "ale"\n        value: 0.9087189435958862\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_XNmzgDnF"\n        name: "pub"\n        value: 0.9011164307594299\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_3l2jRv5s"\n        name: "liquor"\n        value: 0.885781466960907\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_pkvDRSJ1"\n        name: "mug"\n        value: 0.8845415115356445\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_3PlgVmlN"\n        name: "food"\n        value: 0.8642757534980774\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_B3MXt5Ng"\n        name: "refreshment"\n        value: 0.8598712086677551\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_5VHsZr8N"\n        name: "liquid"\n        value: 0.8406236171722412\n        app_id: "main"\n      }\n    }\n    id: "0c4dd5d602afa6754bcfd441998412af"\n  }\n}\n\n'))),(0,o.kt)("h2",{id:"via-bytes"},"Via Bytes"),(0,o.kt)("p",null,"Below is an example of how you would send the bytes of a video and receive predictions from the ",(0,o.kt)("inlineCode",{parentName:"p"},"general")," model."),(0,o.kt)("p",null,"Note that the initialization code used here is outlined in detail on the ",(0,o.kt)("a",{parentName:"p",href:"../api-overview/api-clients#client-installation-instructions"},"client installation page.")),(0,o.kt)(p.Z,{mdxType:"Tabs"},(0,o.kt)(s.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,o.kt)(d.Z,{className:"language-python",mdxType:"CodeBlock"},"########################################################################################\n# In this section, we set the user authentication, app and model IDs, and the location\n# of the video we want as an input. Change these strings to run your own example.\n########################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\nMODEL_ID = 'YOUR_MODEL_ID_HERE'\n# Change this to whatever video location you want to process\nVIDEO_FILE_LOCATION = 'YOUR_VIDEO_FILE_LOCATION'\n# This is optional. You can specify a model version or an empty string for the default.\nMODEL_VERSION_ID = ''\n\n############################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n############################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\nwith open(VIDEO_FILE_LOCATION, \"rb\") as f:\n    file_bytes = f.read()\n\npost_model_outputs_response = stub.PostModelOutputs(\n    service_pb2.PostModelOutputsRequest(\n        user_app_id=userDataObject,  # The userDataObject is created in the overview and is required when using a PAT\n        model_id=MODEL_ID,\n        version_id=MODEL_VERSION_ID,  # This is optional. Defaults to the latest model version\n        inputs=[\n            resources_pb2.Input(\n                data=resources_pb2.Data(\n                    video=resources_pb2.Video(\n                        base64=file_bytes\n                    )\n                )\n            )\n        ]\n    ),\n    metadata=metadata\n)\nif post_model_outputs_response.status.code != status_code_pb2.SUCCESS:\n    print(post_model_outputs_response.status)\n    raise Exception(\"Post model outputs failed, status: \" + post_model_outputs_response.status.description)\n\n# Since we have one input, one output will exist here\noutput = post_model_outputs_response.outputs[0]\n\n# A separate prediction is available for each \"frame\"\nfor frame in output.data.frames:\n    print(\"Predicted concepts on frame \" + str(frame.frame_info.time) + \":\")\n    for concept in frame.data.concepts:\n        print(\"\\t%s %.2f\" % (concept.name, concept.value))\n\n# Uncomment this line to print the full Response JSON\n#print(output)")),(0,o.kt)(s.Z,{value:"js_rest",label:"Javascript (REST)",mdxType:"TabItem"},(0,o.kt)(d.Z,{className:"language-javascript",mdxType:"CodeBlock"},"\x3c!--index.html file--\x3e\n<script>\n    ////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the location\n    // of the video we want as an input. Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = 'YOUR_USER_ID_HERE';\n    // Your PAT (Personal Access Token) can be found in the portal under Authentification\n    const PAT = 'YOUR_PAT_HERE';\n    const APP_ID = 'YOUR_APP_ID_HERE';\n    const MODEL_ID = 'YOUR_MODEL_ID_HERE';\n    const MODEL_VERSION_ID = 'YOUR_MODEL_VERSION_ID';\n    // Change this to whatever video input you want to process\n    const VIDEO_BYTES_STRING = 'YOUR_BYTES_STRING';\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        \"user_app_id\": {\n            \"user_id\": USER_ID,\n            \"app_id\": APP_ID\n        },\n        \"inputs\": [\n            {\n                \"data\": {\n                    \"video\": {\n                        \"base64\": BYTES_STRING\n                    }\n                }\n            }\n        ]\n    });\n\n    const requestOptions = {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        },\n        body: raw\n    };\n\n    // NOTE: MODEL_VERSION_ID is optional, you can also call prediction with the MODEL_ID only\n    // https://api.clarifai.com/v2/models/{YOUR_MODEL_ID}/outputs\n    // this will default to the latest version_id\n\n    fetch(\"https://api.clarifai.com/v2/models/\" + MODEL_ID + \"/versions/\" + MODEL_VERSION_ID + \"/outputs\", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n<\/script>")),(0,o.kt)(s.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,o.kt)(d.Z,{className:"language-javascript",mdxType:"CodeBlock"},'//index.js file\n\n////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the location\n// of the video we want as an input. Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\nconst MODEL_ID = \'YOUR_MODEL_ID_HERE\';\n// Change this to whatever video input you want to process\nconst VIDEO_FILE_LOCATION = \'YOUR_VIDEO_FILE_LOCATION\';\n// This is optional.You can specify a model version or the empty string for the default\nconst MODEL_VERSION_ID = \'\';\n\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nconst fs = require("fs");\nconst videoBytes = fs.readFileSync(VIDEO_FILE_LOCATION);\n\nstub.PostModelOutputs(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        model_id: MODEL_ID,\n        version_id: MODEL_VERSION_ID, // This is optional. Defaults to the latest model version.\n        inputs: [\n            { data: { video: { base64: videoBytes } } }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post model outputs failed, status: " + response.status.description);\n        }\n\n        // Since we have one input, one output will exist here.\n        const output = response.outputs[0];\n\n        // A separate prediction is available for each "frame".\n        for (const frame of output.data.frames) {\n            console.log("Predicted concepts on frame " + frame.frame_info.time + ":");\n            for (const concept of frame.data.concepts) {\n                console.log("\\t" + concept.name + " " + concept.value);\n            }\n        }\n    }\n\n);')),(0,o.kt)(s.Z,{value:"php",label:"PHP",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},'<?php\n# Insert here the initialization code as outlined on this page:\n# https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\n//\n// For this example, the bytes of a video are needed and can be read in\n// using PHP provided functions.\n//\nvideo = "https://samples.clarifai.com/beer.mp4";\n$videoData = file_get_contents($image); // Get the video data from the URL\n\n///////////////////////////////////////////////////////////////////////////////\n// Specifying the Request Data\n///////////////////////////////////////////////////////////////////////////////\n//\n// In the Clarifai platform a video is defined by a special Video object.\n// There are several ways in which an Video object can be populated including\n// by url and video bytes (base64).\n//\n$video = new Video([\n    \'base64\' => $videoData\n]);\n\n//\n// After a Video object is created, a Data object is constructed around it.\n// The Data object offers a container that contains additional image independent\n// metadata.  In this particular use case, no other metadata is needed to be\n// specified.\n//\n$data = new Data([\n    \'video\' => $video\n]);\n\n//\n// The Data object is then wrapped in a Video object in order to meet the\n// API specification.  Additional fields are available to populate in the Input\n// object, but for the purposes of this example we can send in just the\n// Data object.\n//\n$input = new Input([\n    \'data\' => $data\n]);\n\n///////////////////////////////////////////////////////////////////////////////\n// Creating the request object \n///////////////////////////////////////////////////////////////////////////////\n//\n// Finally, the request object itself is created.  This object carries the request\n// along with the request status and other metadata related to the request itself.\n// In this example we populate:\n//    - the `user_app_id` field with the UserAppIDSet constructed above\n//    - the `model_id` field with the ID of the model we are referencing\n//    - the `inputs` field with an array of input objects constructed above \n//\n$request = new PostModelOutputsRequest([\n    \'user_app_id\' => $userDataObject, // This is defined above\n    \'model_id\' => \'aaa03c23b3724a16a56b629203edc62c\',  // This is the ID of the publicly available General model.\n    \'inputs\' => [$input]\n]);\n\n///////////////////////////////////////////////////////////////////////////////\n// Making the RPC call\n///////////////////////////////////////////////////////////////////////////////\n//\n// Once the request object is constructed, we can call the actual request to the\n// Clarifai platform.  This uses the opened gRPC client channel to communicate the\n// request and then wait for the response.\n//\n[$response, $status] = $client->PostModelOutputs(\n    $request,\n    $metadata\n)->wait();\n\n///////////////////////////////////////////////////////////////////////////////\n// Handling the Response\n///////////////////////////////////////////////////////////////////////////////\n//\n// The response is returned and the first thing we do is check the status of it.\n// A successful response will have a status code of 0, otherwise there is some \n// reported error.\n//\nif ($status->code !== 0) throw new Exception("Error: {$status->details}");\n\n//\n// In addition to the RPC response status, there is a Clarifai API status that\n// reports if the operationo was a success or failure (not just that the commuunication)\n// was successful.\n//\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription() . " " .\n        $response->getStatus()->getDetails());\n}\n\n//\n// The output of a successful call can be used in many ways.  In this example,\n// we loop through all of the frames of the video and print out the predicted \n// concepts for each along with their numerical prediction value (confidence).\n//\nforeach ($output->getData()->getFrames() as $frame) {\n    echo "Predicted concepts on frame " . $frame->getFrameInfo()->getTime() . ":";\n    foreach ($frame->getData()->getConcepts() as $concept) {\n        echo "   " . $concept->getName() . ": " . number_format($concept->getValue(), 2) . "\\n";\n    }\n}\n?>\n'))),(0,o.kt)(s.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nMultiOutputResponse postModelOutputsResponse = stub.postModelOutputs(\n    PostModelOutputsRequest.newBuilder()\n        .setModelId("{THE_MODEL_ID}")\n        .setVersionId("{THE_MODEL_VERSION_ID")  // This is optional. Defaults to the latest model version.\n        .addInputs(\n            Input.newBuilder().setData(\n                Data.newBuilder().setVideo(\n                    Video.newBuilder()\n                        .setBase64(ByteString.copyFrom(Files.readAllBytes(\n                            new File("{YOUR_VIDEO_FILE_LOCATION}").toPath()\n                        )))\n                )\n            )\n        )\n        .build()\n);\n\nif (postModelOutputsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n  throw new RuntimeException("Post model outputs failed, status: " + postModelOutputsResponse.getStatus());\n}\n\n// Since we have one input, one output will exist here.\nOutput output = postModelOutputsResponse.getOutputs(0);\n\n// A separate prediction is available for each "frame".\nfor (Frame frame : output.getData().getFramesList()) {\n    System.out.println("Predicted concepts on frame " + frame.getFrameInfo().getTime() + ":");\n    for (Concept concept : frame.getData().getConceptsList()) {\n        System.out.printf("\\t%s %.2f%n", concept.getName(), concept.getValue());\n    }\n}\n'))),(0,o.kt)(s.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'\n  {\n    "inputs": [\n      {\n        "data": {\n          "video": {\n            "base64": "\'"$(base64 video_file_path.mp4)"\'"\n          }\n        }\n      }\n    ]\n  }\'\\\n  https://api.clarifai.com/v2/models/{THE_MODEL_ID}/versions/{THE_MODEL_VERSION_ID}/outputs\n\n# The model version ID is optional. It defaults to the latest model version.\n')))),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Code Output Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},"Predicted concepts on frame 500:\n    beer 1.00\n    glass 1.00\n    foam 1.00\n    drink 1.00\n    lager 1.00\n    alcohol 0.99\n    brewery 0.99\n    liquid 0.98\n    cold 0.98\n    ale 0.98\n    bubble 0.98\n    full 0.98\n    bar 0.98\n    pub 0.97\n    pint 0.97\n    foamy 0.95\n    mug 0.95\n    refreshment 0.94\n    cool 0.94\n    intoxicated 0.94\nPredicted concepts on frame 1500:\n    beer 1.00\n    glass 1.00\n    foam 1.00\n    lager 1.00\n    drink 1.00\n    alcohol 1.00\n    brewery 1.00\n    ale 0.99\n    cold 0.99\n    pint 0.99\n    pub 0.99\n    bar 0.99\n    full 0.99\n    foamy 0.98\n    liquid 0.98\n    amber 0.98\n    liquor 0.98\n    bubble 0.97\n    brew 0.97\n    sketch out 0.97\nPredicted concepts on frame 2500:\n    glass 1.00\n    drink 0.99\n    foam 0.99\n    beer 0.99\n    cold 0.98\n    no person 0.98\n    liquid 0.97\n    alcohol 0.96\n    full 0.95\n    lager 0.95\n    bar 0.93\n    refreshment 0.91\n    thirst 0.91\n    liquor 0.89\n    pub 0.88\n    cool 0.87\n    bubble 0.87\n    brewery 0.86\n    intoxicated 0.85\n    foamy 0.85\nPredicted concepts on frame 3500:\n    drink 0.99\n    glass 0.99\n    no person 0.98\n    foam 0.97\n    alcohol 0.97\n    beer 0.97\n    liquid 0.96\n    cold 0.94\n    refreshment 0.92\n    food 0.89\n    full 0.89\n    vertical 0.89\n    gold 0.88\n    bubble 0.88\n    bar 0.86\n    health 0.85\n    bottle 0.84\n    sparkling 0.84\n    lager 0.82\n    translucent 0.82\nPredicted concepts on frame 4500:\n    beer 1.00\n    no person 0.99\n    foam 0.99\n    glass 0.97\n    drink 0.96\n    lager 0.96\n    brewery 0.94\n    bar 0.93\n    cold 0.92\n    alcohol 0.91\n    pint 0.91\n    full 0.90\n    foamy 0.90\n    food 0.90\n    refreshment 0.87\n    mug 0.86\n    vertical 0.84\n    liquor 0.84\n    ale 0.82\n    liquid 0.79\nPredicted concepts on frame 5500:\n    beer 1.00\n    foam 0.99\n    no person 0.99\n    glass 0.98\n    lager 0.98\n    drink 0.97\n    brewery 0.97\n    cold 0.95\n    full 0.95\n    bar 0.95\n    pint 0.94\n    alcohol 0.94\n    foamy 0.93\n    ale 0.90\n    pub 0.89\n    mug 0.88\n    refreshment 0.88\n    liquor 0.87\n    food 0.85\n    liquid 0.85\nPredicted concepts on frame 6500:\n    beer 1.00\n    foam 0.99\n    no person 0.99\n    glass 0.98\n    drink 0.98\n    lager 0.98\n    brewery 0.96\n    bar 0.95\n    alcohol 0.94\n    cold 0.94\n    pint 0.94\n    full 0.93\n    foamy 0.91\n    ale 0.89\n    mug 0.88\n    pub 0.88\n    refreshment 0.88\n    food 0.86\n    liquid 0.85\n    liquor 0.85\nPredicted concepts on frame 7500:\n    beer 1.00\n    foam 0.99\n    no person 0.99\n    glass 0.98\n    lager 0.98\n    drink 0.98\n    brewery 0.97\n    cold 0.96\n    bar 0.95\n    pint 0.95\n    alcohol 0.94\n    full 0.94\n    foamy 0.92\n    ale 0.91\n    pub 0.90\n    liquor 0.89\n    mug 0.88\n    food 0.86\n    refreshment 0.86\n    liquid 0.84\nPredicted concepts on frame 8500:\n    beer 1.00\n    foam 0.99\n    no person 0.99\n    glass 0.98\n    lager 0.98\n    drink 0.98\n    brewery 0.97\n    cold 0.96\n    bar 0.95\n    pint 0.95\n    alcohol 0.94\n    full 0.94\n    foamy 0.92\n    ale 0.91\n    pub 0.90\n    liquor 0.89\n    mug 0.88\n    food 0.86\n    refreshment 0.86\n    liquid 0.84\n"))),(0,o.kt)("details",null,(0,o.kt)("summary",null,"JSON Output Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'id: "498ebd8730c94fc3a04c086bef2c5941"\nstatus {\n  code: SUCCESS\n  description: "Ok"\n}\ncreated_at {\n  seconds: 1643298675\n  nanos: 539564513\n}\nmodel {\n  id: "general-image-recognition"\n  name: "general"\n  created_at {\n    seconds: 1457543499\n    nanos: 608845000\n  }\n  app_id: "main"\n  output_info {\n    output_config {\n    }\n    message: "Show output_info with: GET /models/{model_id}/output_info"\n    fields_map {\n      fields {\n        key: "concepts"\n        value {\n          string_value: "softmax"\n        }\n      }\n    }\n  }\n  model_version {\n    id: "aa7f35c01e0642fda5cf400f543e7c40"\n    created_at {\n      seconds: 1520370624\n      nanos: 454834000\n    }\n    status {\n      code: MODEL_TRAINED\n      description: "Model is trained and ready"\n    }\n    visibility {\n      gettable: PUBLIC\n    }\n    app_id: "main"\n    user_id: "clarifai"\n    metadata {\n    }\n  }\n  display_name: "general-visual-classifier"\n  user_id: "clarifai"\n  input_info {\n    fields_map {\n      fields {\n        key: "image"\n        value {\n          string_value: "images"\n        }\n      }\n    }\n  }\n  train_info {\n  }\n  model_type_id: "visual-classifier"\n  visibility {\n    gettable: PUBLIC\n  }\n  description: "Image recognition model for identifying different concepts in images and video including objects, themes, moods, and more."\n  metadata {\n  }\n  notes: "**General Information**\\n\\n- Purpose: Classifier for a variety of concepts, common objects, etc. This model is a great all-purpose solution for most visual recognition needs with industry-leading performance.\\n\\n- Architecture: Customized InceptionV2\\n\\n- Intended Use: image indexing by tags, filtering, cascade routing\\n\\n- Limitations: works well when content is prevalent in the image\\n\\n\\n\\n **\\nTraining/Test Data**\\n\\nThe model was trained and tested on an internal dataset with approximately 10,000 concepts and 20M images, with multiple concepts per image. The class distributions on train and validation sets are long-tailed. The validation set was annotated using a combination of originally curated labels with incomplete annotations, where were further completed by adding additional labels proposed a newer version of this model (aa7f35c01e0642fda5cf400f543e7c40) at a low threshold and verified by human annotators. "\n  modified_at {\n    seconds: 1634831222\n    nanos: 80260000\n  }\n  import_info {\n  }\n}\ninput {\n  id: "200d1a3088ac413e8b0e14c6ae93b97f"\n  data {\n    video {\n      url: "https://samples.clarifai.com/placeholder.gif"\n      base64: "true"\n    }\n  }\n}\ndata {\n  frames {\n    frame_info {\n      time: 500\n    }\n    data {\n      concepts {\n        id: "ai_TBlp0Pt3"\n        name: "beer"\n        value: 0.9988051652908325\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_mCpQg89c"\n        name: "glass"\n        value: 0.9982008934020996\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_8XGJjH7R"\n        name: "foam"\n        value: 0.9973153471946716\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_zJx6RbxW"\n        name: "drink"\n        value: 0.9968197345733643\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_3R5pJ6hB"\n        name: "lager"\n        value: 0.9958932399749756\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_drK6ClJR"\n        name: "alcohol"\n        value: 0.9947922825813293\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_2LWXN7Bn"\n        name: "brewery"\n        value: 0.9894189834594727\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_5VHsZr8N"\n        name: "liquid"\n        value: 0.981312096118927\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_2gmKZLxp"\n        name: "cold"\n        value: 0.9799723029136658\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_qCKzbr0g"\n        name: "ale"\n        value: 0.9794925451278687\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_7vR9zv7l"\n        name: "bubble"\n        value: 0.9781786799430847\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_54zxXFGL"\n        name: "full"\n        value: 0.9775475263595581\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_SsmKLB4z"\n        name: "bar"\n        value: 0.9774225950241089\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_XNmzgDnF"\n        name: "pub"\n        value: 0.9717299938201904\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_QnpbpDLK"\n        name: "pint"\n        value: 0.9698840975761414\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_F547sXrF"\n        name: "foamy"\n        value: 0.9536982774734497\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_pkvDRSJ1"\n        name: "mug"\n        value: 0.9475905895233154\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_B3MXt5Ng"\n        name: "refreshment"\n        value: 0.9417927265167236\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_VXtfX6F5"\n        name: "cool"\n        value: 0.9395936131477356\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_nMNvWpn8"\n        name: "intoxicated"\n        value: 0.9375916123390198\n        app_id: "main"\n      }\n    }\n    id: "faa9f3d5c8569123d8bea365ea478031"\n  }\n  frames {\n    frame_info {\n      index: 1\n      time: 1500\n    }\n    data {\n      concepts {\n        id: "ai_TBlp0Pt3"\n        name: "beer"\n        value: 0.9997990727424622\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_mCpQg89c"\n        name: "glass"\n        value: 0.9992085099220276\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_8XGJjH7R"\n        name: "foam"\n        value: 0.9991655349731445\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_3R5pJ6hB"\n        name: "lager"\n        value: 0.9990026354789734\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_zJx6RbxW"\n        name: "drink"\n        value: 0.9977992177009583\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_drK6ClJR"\n        name: "alcohol"\n        value: 0.9972625970840454\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_2LWXN7Bn"\n        name: "brewery"\n        value: 0.9962783455848694\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_qCKzbr0g"\n        name: "ale"\n        value: 0.9941165447235107\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_2gmKZLxp"\n        name: "cold"\n        value: 0.9934180974960327\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_QnpbpDLK"\n        name: "pint"\n        value: 0.9922869205474854\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_XNmzgDnF"\n        name: "pub"\n        value: 0.9907853603363037\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_SsmKLB4z"\n        name: "bar"\n        value: 0.9899360537528992\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_54zxXFGL"\n        name: "full"\n        value: 0.9871671795845032\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_F547sXrF"\n        name: "foamy"\n        value: 0.984533429145813\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_5VHsZr8N"\n        name: "liquid"\n        value: 0.9825929403305054\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_n1b6R1vv"\n        name: "amber"\n        value: 0.9777848720550537\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_3l2jRv5s"\n        name: "liquor"\n        value: 0.9757136106491089\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_7vR9zv7l"\n        name: "bubble"\n        value: 0.9743807911872864\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_4Dlsldjg"\n        name: "brew"\n        value: 0.9738532304763794\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_74H0z2d2"\n        name: "sketch out"\n        value: 0.9724686741828918\n        app_id: "main"\n      }\n    }\n    id: "8e5f8672bdda2f2682d59ccc019d48c0"\n  }\n  frames {\n    frame_info {\n      index: 2\n      time: 2500\n    }\n    data {\n      concepts {\n        id: "ai_mCpQg89c"\n        name: "glass"\n        value: 0.9965206384658813\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_zJx6RbxW"\n        name: "drink"\n        value: 0.9949584603309631\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_8XGJjH7R"\n        name: "foam"\n        value: 0.9936542510986328\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_TBlp0Pt3"\n        name: "beer"\n        value: 0.988069474697113\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_2gmKZLxp"\n        name: "cold"\n        value: 0.9829317331314087\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_786Zr311"\n        name: "no person"\n        value: 0.9772723913192749\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_5VHsZr8N"\n        name: "liquid"\n        value: 0.967301070690155\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_drK6ClJR"\n        name: "alcohol"\n        value: 0.9607932567596436\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_54zxXFGL"\n        name: "full"\n        value: 0.9534623026847839\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_3R5pJ6hB"\n        name: "lager"\n        value: 0.9493318796157837\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_SsmKLB4z"\n        name: "bar"\n        value: 0.9254936575889587\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_B3MXt5Ng"\n        name: "refreshment"\n        value: 0.913051426410675\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_bNlklStp"\n        name: "thirst"\n        value: 0.9126086831092834\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_3l2jRv5s"\n        name: "liquor"\n        value: 0.8912835121154785\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_XNmzgDnF"\n        name: "pub"\n        value: 0.8790027499198914\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_VXtfX6F5"\n        name: "cool"\n        value: 0.8719612956047058\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_7vR9zv7l"\n        name: "bubble"\n        value: 0.8683512210845947\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_2LWXN7Bn"\n        name: "brewery"\n        value: 0.8581551909446716\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_nMNvWpn8"\n        name: "intoxicated"\n        value: 0.8477963209152222\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_F547sXrF"\n        name: "foamy"\n        value: 0.8463988900184631\n        app_id: "main"\n      }\n    }\n    id: "3f4cd8b6cbe2361de2d3a3f84906723c"\n  }\n  frames {\n    frame_info {\n      index: 3\n      time: 3500\n    }\n    data {\n      concepts {\n        id: "ai_zJx6RbxW"\n        name: "drink"\n        value: 0.9926630258560181\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_mCpQg89c"\n        name: "glass"\n        value: 0.9923473596572876\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_786Zr311"\n        name: "no person"\n        value: 0.9764698147773743\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_8XGJjH7R"\n        name: "foam"\n        value: 0.9728322625160217\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_drK6ClJR"\n        name: "alcohol"\n        value: 0.9664429426193237\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_TBlp0Pt3"\n        name: "beer"\n        value: 0.9658945798873901\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_5VHsZr8N"\n        name: "liquid"\n        value: 0.9584061503410339\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_2gmKZLxp"\n        name: "cold"\n        value: 0.935462236404419\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_B3MXt5Ng"\n        name: "refreshment"\n        value: 0.9240690469741821\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_3PlgVmlN"\n        name: "food"\n        value: 0.892289936542511\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_54zxXFGL"\n        name: "full"\n        value: 0.8912532329559326\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_ZSKpCCHD"\n        name: "vertical"\n        value: 0.8904528617858887\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_7qwGxLch"\n        name: "gold"\n        value: 0.8823111653327942\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_7vR9zv7l"\n        name: "bubble"\n        value: 0.8816881775856018\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_SsmKLB4z"\n        name: "bar"\n        value: 0.862342119216919\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_mZ2tl6cW"\n        name: "health"\n        value: 0.8497164249420166\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_12dz73B9"\n        name: "bottle"\n        value: 0.8430662751197815\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_8zbKXvD7"\n        name: "sparkling"\n        value: 0.842933177947998\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_3R5pJ6hB"\n        name: "lager"\n        value: 0.8230187296867371\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_rlLtJVWx"\n        name: "translucent"\n        value: 0.8191360831260681\n        app_id: "main"\n      }\n    }\n    id: "049f7331f17764126fa433ccc7eb27a6"\n  }\n  frames {\n    frame_info {\n      index: 4\n      time: 4500\n    }\n    data {\n      concepts {\n        id: "ai_TBlp0Pt3"\n        name: "beer"\n        value: 0.9961544871330261\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_786Zr311"\n        name: "no person"\n        value: 0.9909304976463318\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_8XGJjH7R"\n        name: "foam"\n        value: 0.9882357120513916\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_mCpQg89c"\n        name: "glass"\n        value: 0.9710526466369629\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_zJx6RbxW"\n        name: "drink"\n        value: 0.964420735836029\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_3R5pJ6hB"\n        name: "lager"\n        value: 0.9598450660705566\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_2LWXN7Bn"\n        name: "brewery"\n        value: 0.942317545413971\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_SsmKLB4z"\n        name: "bar"\n        value: 0.9267554879188538\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_2gmKZLxp"\n        name: "cold"\n        value: 0.9237532615661621\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_drK6ClJR"\n        name: "alcohol"\n        value: 0.910051167011261\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_QnpbpDLK"\n        name: "pint"\n        value: 0.9066911935806274\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_54zxXFGL"\n        name: "full"\n        value: 0.8988523483276367\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_F547sXrF"\n        name: "foamy"\n        value: 0.8987899422645569\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_3PlgVmlN"\n        name: "food"\n        value: 0.8952536582946777\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_B3MXt5Ng"\n        name: "refreshment"\n        value: 0.8680537343025208\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_pkvDRSJ1"\n        name: "mug"\n        value: 0.8612155318260193\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_ZSKpCCHD"\n        name: "vertical"\n        value: 0.8379440307617188\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_3l2jRv5s"\n        name: "liquor"\n        value: 0.837060809135437\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_qCKzbr0g"\n        name: "ale"\n        value: 0.8213710188865662\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_5VHsZr8N"\n        name: "liquid"\n        value: 0.7925897240638733\n        app_id: "main"\n      }\n    }\n    id: "a815862119825cfb037834ec5dc24619"\n  }\n  frames {\n    frame_info {\n      index: 5\n      time: 5500\n    }\n    data {\n      concepts {\n        id: "ai_TBlp0Pt3"\n        name: "beer"\n        value: 0.9980643391609192\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_8XGJjH7R"\n        name: "foam"\n        value: 0.9935665726661682\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_786Zr311"\n        name: "no person"\n        value: 0.9905995726585388\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_mCpQg89c"\n        name: "glass"\n        value: 0.982948899269104\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_3R5pJ6hB"\n        name: "lager"\n        value: 0.9775985479354858\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_zJx6RbxW"\n        name: "drink"\n        value: 0.9733675122261047\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_2LWXN7Bn"\n        name: "brewery"\n        value: 0.9655104875564575\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_2gmKZLxp"\n        name: "cold"\n        value: 0.9463649392127991\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_54zxXFGL"\n        name: "full"\n        value: 0.9457871317863464\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_SsmKLB4z"\n        name: "bar"\n        value: 0.9453830718994141\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_QnpbpDLK"\n        name: "pint"\n        value: 0.9434543251991272\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_drK6ClJR"\n        name: "alcohol"\n        value: 0.9397315979003906\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_F547sXrF"\n        name: "foamy"\n        value: 0.9338845610618591\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_qCKzbr0g"\n        name: "ale"\n        value: 0.9008452892303467\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_XNmzgDnF"\n        name: "pub"\n        value: 0.892936110496521\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_pkvDRSJ1"\n        name: "mug"\n        value: 0.8799083232879639\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_B3MXt5Ng"\n        name: "refreshment"\n        value: 0.8764392733573914\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_3l2jRv5s"\n        name: "liquor"\n        value: 0.871640145778656\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_3PlgVmlN"\n        name: "food"\n        value: 0.8529603481292725\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_5VHsZr8N"\n        name: "liquid"\n        value: 0.8480191230773926\n        app_id: "main"\n      }\n    }\n    id: "14572f138018d23fcd39a87f0c51880e"\n  }\n  frames {\n    frame_info {\n      index: 6\n      time: 6500\n    }\n    data {\n      concepts {\n        id: "ai_TBlp0Pt3"\n        name: "beer"\n        value: 0.9978025555610657\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_8XGJjH7R"\n        name: "foam"\n        value: 0.9900859594345093\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_786Zr311"\n        name: "no person"\n        value: 0.989570140838623\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_mCpQg89c"\n        name: "glass"\n        value: 0.9801958203315735\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_zJx6RbxW"\n        name: "drink"\n        value: 0.976635217666626\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_3R5pJ6hB"\n        name: "lager"\n        value: 0.9750798344612122\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_2LWXN7Bn"\n        name: "brewery"\n        value: 0.9616801738739014\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_SsmKLB4z"\n        name: "bar"\n        value: 0.9454798102378845\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_drK6ClJR"\n        name: "alcohol"\n        value: 0.9426078796386719\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_2gmKZLxp"\n        name: "cold"\n        value: 0.9405170679092407\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_QnpbpDLK"\n        name: "pint"\n        value: 0.9403313994407654\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_54zxXFGL"\n        name: "full"\n        value: 0.9268599152565002\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_F547sXrF"\n        name: "foamy"\n        value: 0.9140898585319519\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_qCKzbr0g"\n        name: "ale"\n        value: 0.8905293345451355\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_pkvDRSJ1"\n        name: "mug"\n        value: 0.8810272812843323\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_XNmzgDnF"\n        name: "pub"\n        value: 0.8808915615081787\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_B3MXt5Ng"\n        name: "refreshment"\n        value: 0.8798631429672241\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_3PlgVmlN"\n        name: "food"\n        value: 0.8592639565467834\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_5VHsZr8N"\n        name: "liquid"\n        value: 0.8535292148590088\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_3l2jRv5s"\n        name: "liquor"\n        value: 0.849987804889679\n        app_id: "main"\n      }\n    }\n    id: "7790d9923639183be7213e8330736ea5"\n  }\n  frames {\n    frame_info {\n      index: 7\n      time: 7500\n    }\n    data {\n      concepts {\n        id: "ai_TBlp0Pt3"\n        name: "beer"\n        value: 0.9986417889595032\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_8XGJjH7R"\n        name: "foam"\n        value: 0.9933319687843323\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_786Zr311"\n        name: "no person"\n        value: 0.9932761192321777\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_mCpQg89c"\n        name: "glass"\n        value: 0.9835835099220276\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_3R5pJ6hB"\n        name: "lager"\n        value: 0.9804979562759399\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_zJx6RbxW"\n        name: "drink"\n        value: 0.9756208062171936\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_2LWXN7Bn"\n        name: "brewery"\n        value: 0.9704380035400391\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_2gmKZLxp"\n        name: "cold"\n        value: 0.9604755640029907\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_SsmKLB4z"\n        name: "bar"\n        value: 0.9517720937728882\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_QnpbpDLK"\n        name: "pint"\n        value: 0.9517136812210083\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_drK6ClJR"\n        name: "alcohol"\n        value: 0.9398297071456909\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_54zxXFGL"\n        name: "full"\n        value: 0.9397101402282715\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_F547sXrF"\n        name: "foamy"\n        value: 0.9207383990287781\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_qCKzbr0g"\n        name: "ale"\n        value: 0.9087187051773071\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_XNmzgDnF"\n        name: "pub"\n        value: 0.9011161923408508\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_3l2jRv5s"\n        name: "liquor"\n        value: 0.8857810497283936\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_pkvDRSJ1"\n        name: "mug"\n        value: 0.8845416307449341\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_3PlgVmlN"\n        name: "food"\n        value: 0.8642756938934326\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_B3MXt5Ng"\n        name: "refreshment"\n        value: 0.8598712086677551\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_5VHsZr8N"\n        name: "liquid"\n        value: 0.8406236171722412\n        app_id: "main"\n      }\n    }\n    id: "32224efe9c43139c9f3070930bae4e6c"\n  }\n  frames {\n    frame_info {\n      index: 8\n      time: 8500\n    }\n    data {\n      concepts {\n        id: "ai_TBlp0Pt3"\n        name: "beer"\n        value: 0.9986417889595032\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_8XGJjH7R"\n        name: "foam"\n        value: 0.9933319687843323\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_786Zr311"\n        name: "no person"\n        value: 0.9932761192321777\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_mCpQg89c"\n        name: "glass"\n        value: 0.9835835099220276\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_3R5pJ6hB"\n        name: "lager"\n        value: 0.9804979562759399\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_zJx6RbxW"\n        name: "drink"\n        value: 0.9756208062171936\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_2LWXN7Bn"\n        name: "brewery"\n        value: 0.9704380035400391\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_2gmKZLxp"\n        name: "cold"\n        value: 0.9604755640029907\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_SsmKLB4z"\n        name: "bar"\n        value: 0.9517720937728882\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_QnpbpDLK"\n        name: "pint"\n        value: 0.9517136812210083\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_drK6ClJR"\n        name: "alcohol"\n        value: 0.9398297071456909\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_54zxXFGL"\n        name: "full"\n        value: 0.9397101402282715\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_F547sXrF"\n        name: "foamy"\n        value: 0.9207383990287781\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_qCKzbr0g"\n        name: "ale"\n        value: 0.9087187051773071\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_XNmzgDnF"\n        name: "pub"\n        value: 0.9011161923408508\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_3l2jRv5s"\n        name: "liquor"\n        value: 0.8857810497283936\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_pkvDRSJ1"\n        name: "mug"\n        value: 0.8845416307449341\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_3PlgVmlN"\n        name: "food"\n        value: 0.8642756938934326\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_B3MXt5Ng"\n        name: "refreshment"\n        value: 0.8598712086677551\n        app_id: "main"\n      }\n      concepts {\n        id: "ai_5VHsZr8N"\n        name: "liquid"\n        value: 0.8406236171722412\n        app_id: "main"\n      }\n    }\n    id: "0c4dd5d602afa6754bcfd441998412af"\n  }\n}\n'))))}f.isMDXComponent=!0}}]);
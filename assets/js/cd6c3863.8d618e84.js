"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[6204],{58215:function(e,n,t){var a=t(67294);n.Z=function(e){var n=e.children,t=e.hidden,i=e.className;return a.createElement("div",{role:"tabpanel",hidden:t,className:i},n)}},26396:function(e,n,t){t.d(n,{Z:function(){return d}});var a=t(87462),i=t(67294),r=t(72389),s=t(79443);var o=function(){var e=(0,i.useContext)(s.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},u=t(63616),l=t(86010),p="tabItem_vU9c";function c(e){var n,t,r,s=e.lazy,c=e.block,d=e.defaultValue,m=e.values,f=e.groupId,g=e.className,h=i.Children.map(e.children,(function(e){if((0,i.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),b=null!=m?m:h.map((function(e){var n=e.props;return{value:n.value,label:n.label,attributes:n.attributes}})),v=(0,u.lx)(b,(function(e,n){return e.value===n.value}));if(v.length>0)throw new Error('Docusaurus error: Duplicate values "'+v.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var _=null===d?d:null!=(n=null!=d?d:null==(t=h.find((function(e){return e.props.default})))?void 0:t.props.value)?n:null==(r=h[0])?void 0:r.props.value;if(null!==_&&!b.some((function(e){return e.value===_})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+_+'" but none of its children has the corresponding value. Available values are: '+b.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var E=o(),T=E.tabGroupChoices,I=E.setTabGroupChoices,P=(0,i.useState)(_),k=P[0],y=P[1],N=[],w=(0,u.o5)().blockElementScrollPositionUntilNextRender;if(null!=f){var C=T[f];null!=C&&C!==k&&b.some((function(e){return e.value===C}))&&y(C)}var A=function(e){var n=e.currentTarget,t=N.indexOf(n),a=b[t].value;a!==k&&(w(n),y(a),null!=f&&I(f,a))},R=function(e){var n,t=null;switch(e.key){case"ArrowRight":var a=N.indexOf(e.currentTarget)+1;t=N[a]||N[0];break;case"ArrowLeft":var i=N.indexOf(e.currentTarget)-1;t=N[i]||N[N.length-1]}null==(n=t)||n.focus()};return i.createElement("div",{className:"tabs-container"},i.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":c},g)},b.map((function(e){var n=e.value,t=e.label,r=e.attributes;return i.createElement("li",(0,a.Z)({role:"tab",tabIndex:k===n?0:-1,"aria-selected":k===n,key:n,ref:function(e){return N.push(e)},onKeyDown:R,onFocus:A,onClick:A},r,{className:(0,l.Z)("tabs__item",p,null==r?void 0:r.className,{"tabs__item--active":k===n})}),null!=t?t:n)}))),s?(0,i.cloneElement)(h.filter((function(e){return e.props.value===k}))[0],{className:"margin-vert--md"}):i.createElement("div",{className:"margin-vert--md"},h.map((function(e,n){return(0,i.cloneElement)(e,{key:n,hidden:e.props.value!==k})}))))}function d(e){var n=(0,r.Z)();return i.createElement(c,(0,a.Z)({key:String(n)},e))}},86542:function(e,n,t){t.r(n),t.d(n,{contentTitle:function(){return c},default:function(){return g},frontMatter:function(){return p},metadata:function(){return d},toc:function(){return m}});var a=t(87462),i=t(63366),r=(t(67294),t(3905)),s=t(26396),o=t(58215),u=t(19055),l=["components"],p={description:"Paginate your data batches.",sidebar_position:3},c="Pagination",d={unversionedId:"api-guide/advanced-topics/pagination",id:"api-guide/advanced-topics/pagination",title:"Pagination",description:"Paginate your data batches.",source:"@site/docs/api-guide/advanced-topics/pagination.md",sourceDirName:"api-guide/advanced-topics",slug:"/api-guide/advanced-topics/pagination",permalink:"/api-guide/advanced-topics/pagination",tags:[],version:"current",sidebarPosition:3,frontMatter:{description:"Paginate your data batches.",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Patching",permalink:"/api-guide/advanced-topics/patching"},next:{title:"Batch Predict CSV on Custom Text Model",permalink:"/api-guide/advanced-topics/batch-predict-csv-on-custom-text-model"}},m=[],f={toc:m};function g(e){var n=e.components,t=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,a.Z)({},f,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"pagination"},"Pagination"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Paginate your data batches")),(0,r.kt)("hr",null),(0,r.kt)("p",null,"Many API calls are paginated. You can provide ",(0,r.kt)("inlineCode",{parentName:"p"},"page")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"per_page")," params to the API request, and your results will be split into pages. "),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"page")," params indicates the page number\u2060\u2014defaults to 1. The ",(0,r.kt)("inlineCode",{parentName:"p"},"per_page")," params indicates the number of results that will be contained in each page\u2060\u2014defaults to 128. You can get up to 1,000 results per page. "),(0,r.kt)("p",null,"In the example below, we are getting all inputs and specifying to start at page 2 and get 20 results per page."),(0,r.kt)(s.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"python",label:"Python",default:!0,mdxType:"TabItem"},(0,r.kt)(u.Z,{className:"language-python",mdxType:"CodeBlock"},"################################################################\n# In this section, we set the user authentication and app ID.\n# Change these strings to run your own example.\n#################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID) # The userDataObject is required when using a PAT\n\nlist_inputs_response = stub.ListInputs(\n    service_pb2.ListInputsRequest(\n        user_app_id=userDataObject,\n        page=2, \n        per_page=20\n    ),\n    metadata=metadata\n)\n\nif list_inputs_response.status.code != status_code_pb2.SUCCESS:\n    print(list_inputs_response.status)\n    raise Exception(\"List inputs failed, status: \" + list_inputs_response.status.description)\n\nfor input_object in list_inputs_response.inputs:\n    print(input_object)")),(0,r.kt)(o.Z,{value:"nodejs",label:"NodeJS",default:!0,mdxType:"TabItem"},(0,r.kt)(u.Z,{className:"language-javascript",mdxType:"CodeBlock"},'//index.js file\n\n////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication and app ID.\n// Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.ListInputs(\n    {\n        user_app_id: {\n            user_id: USER_ID,\n            app_id: APP_ID\n        },\n        page: 2,\n        per_page: 20\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("List inputs failed, status: " + response.status.description);\n        }\n\n        for (const input of response.inputs) {\n            console.log(JSON.stringify(input, null, 2));\n        }\n    }\n);\n')),(0,r.kt)(o.Z,{value:"java",label:"Java",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nMultiInputResponse listInputsResponse = stub.listInputs(\n    ListInputsRequest.newBuilder()\n        .setPage(2)\n        .setPerPage(20)\n        .build()\n);\n\nif (listInputsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n    throw new RuntimeException("List inputs failed, status: " + listInputsResponse.getStatus());\n}\n\nfor (Input input : listInputsResponse.getInputsList()) {\n    System.out.println(input);\n}\n'))),(0,r.kt)(o.Z,{value:"curl",label:"cURL",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X GET \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  https://api.clarifai.com/v2/inputs?page=2&per_page=20\n')))))}g.isMDXComponent=!0}}]);
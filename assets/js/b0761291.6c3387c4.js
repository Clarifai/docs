"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[8601],{85162:function(e,n,t){t.d(n,{Z:function(){return c}});var a=t(67294),s=t(34334),o="tabItem_Ymn6";function c(e){let{children:n,hidden:t,className:c}=e;return a.createElement("div",{role:"tabpanel",className:(0,s.Z)(o,c),hidden:t},n)}},65488:function(e,n,t){t.d(n,{Z:function(){return h}});var a=t(83117),s=t(67294),o=t(34334),c=t(72389),r=t(67392),i=t(7094),l=t(12466),p="tabList__CuJ",u="tabItem_LNqP";function d(e){var n,t;const{lazy:c,block:d,defaultValue:h,values:_,groupId:m,className:g}=e,E=s.Children.map(e.children,(e=>{if((0,s.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),f=null!=_?_:E.map((e=>{let{props:{value:n,label:t,attributes:a}}=e;return{value:n,label:t,attributes:a}})),b=(0,r.l)(f,((e,n)=>e.value===n.value));if(b.length>0)throw new Error('Docusaurus error: Duplicate values "'+b.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const C=null===h?h:null!=(n=null!=h?h:null==(t=E.find((e=>e.props.default)))?void 0:t.props.value)?n:E[0].props.value;if(null!==C&&!f.some((e=>e.value===C)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+C+'" but none of its children has the corresponding value. Available values are: '+f.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:A,setTabGroupChoices:S}=(0,i.U)(),[T,I]=(0,s.useState)(C),N=[],{blockElementScrollPositionUntilNextRender:y}=(0,l.o5)();if(null!=m){const e=A[m];null!=e&&e!==T&&f.some((n=>n.value===e))&&I(e)}const v=e=>{const n=e.currentTarget,t=N.indexOf(n),a=f[t].value;a!==T&&(y(n),I(a),null!=m&&S(m,String(a)))},R=e=>{var n;let t=null;switch(e.key){case"ArrowRight":{var a;const n=N.indexOf(e.currentTarget)+1;t=null!=(a=N[n])?a:N[0];break}case"ArrowLeft":{var s;const n=N.indexOf(e.currentTarget)-1;t=null!=(s=N[n])?s:N[N.length-1];break}}null==(n=t)||n.focus()};return s.createElement("div",{className:(0,o.Z)("tabs-container",p)},s.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":d},g)},f.map((e=>{let{value:n,label:t,attributes:c}=e;return s.createElement("li",(0,a.Z)({role:"tab",tabIndex:T===n?0:-1,"aria-selected":T===n,key:n,ref:e=>N.push(e),onKeyDown:R,onFocus:v,onClick:v},c,{className:(0,o.Z)("tabs__item",u,null==c?void 0:c.className,{"tabs__item--active":T===n})}),null!=t?t:n)}))),c?(0,s.cloneElement)(E.filter((e=>e.props.value===T))[0],{className:"margin-top--md"}):s.createElement("div",{className:"margin-top--md"},E.map(((e,n)=>(0,s.cloneElement)(e,{key:n,hidden:e.props.value!==T})))))}function h(e){const n=(0,c.Z)();return s.createElement(d,(0,a.Z)({key:String(n)},e))}},82336:function(e,n,t){t.r(n),t.d(n,{assets:function(){return u},contentTitle:function(){return l},default:function(){return _},frontMatter:function(){return i},metadata:function(){return p},toc:function(){return d}});var a=t(83117),s=(t(67294),t(3905)),o=t(65488),c=t(85162),r=t(66066);const i={description:"Search based on specific words.",sidebar_position:3,title:"Search by Concept"},l="Search by Concept",p={unversionedId:"api-guide/concepts/search-by-concept",id:"api-guide/concepts/search-by-concept",title:"Search by Concept",description:"Search based on specific words.",source:"@site/docs/api-guide/concepts/search-by-concept.md",sourceDirName:"api-guide/concepts",slug:"/api-guide/concepts/search-by-concept",permalink:"/api-guide/concepts/search-by-concept",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{description:"Search based on specific words.",sidebar_position:3,title:"Search by Concept"},sidebar:"tutorialSidebar",previous:{title:"Languages",permalink:"/api-guide/concepts/languages"},next:{title:"Knowledge Graph",permalink:"/api-guide/concepts/knowledge_graph"}},u={},d=[],h={toc:d};function _(e){let{components:n,...t}=e;return(0,s.kt)("wrapper",(0,a.Z)({},h,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"search-by-concept"},"Search by Concept"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Search based on specific words")),(0,s.kt)("hr",null),(0,s.kt)("p",null,"You can search for concepts by ",(0,s.kt)("inlineCode",{parentName:"p"},"name"),", even in a different ",(0,s.kt)("inlineCode",{parentName:"p"},"language"),", using the ",(0,s.kt)("inlineCode",{parentName:"p"},"ConceptSearches")," endpoint."),(0,s.kt)("p",null,"Below is an example of how to search for concepts."),(0,s.kt)("admonition",{type:"info"},(0,s.kt)("p",{parentName:"admonition"},"The initialization code used in the following example is outlined in detail on the ",(0,s.kt)("a",{parentName:"p",href:"https://docs.clarifai.com/api-guide/api-overview/api-clients/#client-installation-instructions"},"client installation page."))),(0,s.kt)(o.Z,{mdxType:"Tabs"},(0,s.kt)(c.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,s.kt)(r.Z,{className:"language-python",mdxType:"CodeBlock"},"##########################################################################################\n# In this section, we set the user authentication, app ID, search name, and language ID.\n# Change these strings to run your own example.\n##########################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to whatever concept you want to search for\nSEARCH_NAME = \"\u4eba\"\nLANGUAGE_ID = \"ja\"\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\npost_concepts_searches_response = stub.PostConceptsSearches(\n    service_pb2.PostConceptsSearchesRequest(\n        user_app_id=userDataObject,\n        concept_query=resources_pb2.ConceptQuery(\n            name=SEARCH_NAME,\n            language=LANGUAGE_ID\n        )\n    ),\n    metadata=metadata\n)\n\nif post_concepts_searches_response.status.code != status_code_pb2.SUCCESS:\n    print(post_concepts_searches_response.status)\n    raise Exception(\"Post concepts searches failed, status: \" + post_concepts_searches_response.status.description)\n    \nprint(\"Found concepts:\")\nfor concept in post_concepts_searches_response.concepts:\n    print(\"\\t%s %.2f\" % (concept.name, concept.value))\n\n# Uncomment this line to print the full Response JSON\n#print(post_concepts_searches_response)")),(0,s.kt)(c.Z,{value:"js_rest",label:"JavaScript (REST)",mdxType:"TabItem"},(0,s.kt)(r.Z,{className:"language-javascript",mdxType:"CodeBlock"},"\x3c!--index.html file--\x3e\n\n<script>\n    ////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, search name, and language ID.\n    // Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = 'YOUR_USER_ID_HERE';\n    // Your PAT (Personal Access Token) can be found in the portal under Authentification\n    const PAT = 'YOUR_PAT_HERE';\n    const APP_ID = 'YOUR_APP_ID_HERE';\n    // Change these to whatever concept you want to search for\n    const SEARCH_NAME = \"\u4eba\";\n    const LANGUAGE_ID = \"ja\";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        \"user_app_id\": {\n            \"user_id\": USER_ID,\n            \"app_id\": APP_ID\n        },\n        \"concept_query\": [\n            {\n                \"name\": SEARCH_NAME,\n                \"id\": LANGUAGE_ID\n            }\n        ]\n    });\n\n    const requestOptions = {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        },\n        body: raw\n    };\n\n    fetch(\"https://api.clarifai.com/v2/concepts/searches\", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n<\/script>")),(0,s.kt)(c.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,s.kt)(r.Z,{className:"language-javascript",mdxType:"CodeBlock"},'//index.js file\n\n////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, search name, and language ID.\n// Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n// Change these to whatever concept you want to search for\nconst SEARCH_NAME = "\u4eba";\nconst LANGUAGE_ID = "ja";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PostConceptsSearches(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        concept_query: { name: SEARCH_NAME, language: LANGUAGE_ID }\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post concepts searches failed, status: " + response.status.description);\n        }\n\n        console.log("Found concepts:");\n        for (const concept of response.concepts) {\n            console.log("\\t" + concept.name + " " + concept.value);\n        }\n    }\n);')),(0,s.kt)(c.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,s.kt)(r.Z,{className:"language-java",mdxType:"CodeBlock"},'package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    ///////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, search name, and language ID.\n    // Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\t\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to whatever concept you want to search for\n    static final String SEARCH_NAME = "\u4eba";\n    static final String LANGUAGE_ID = "ja";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\t\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiConceptResponse postConceptsSearchesResponse = stub.postConceptsSearches(\n            PostConceptsSearchesRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .setConceptQuery(\n                ConceptQuery.newBuilder()\n                .setName(SEARCH_NAME)\n                .setLanguage(LANGUAGE_ID))\n            .build()\n        );\n\n        if (postConceptsSearchesResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post concepts searches failed, status: " + postConceptsSearchesResponse.getStatus());\n        }\n\n        System.out.println("Found concepts:");\n        for (Concept concept: postConceptsSearchesResponse.getConceptsList()) {\n            System.out.printf("\\t%s %.2f%n", concept.getName(), concept.getValue());\n        }\n\n    }\n\n}')),(0,s.kt)(c.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,s.kt)(r.Z,{className:"language-bash",mdxType:"CodeBlock"},'curl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/concepts/searches" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "concept_query": {\n      "name":"\u4eba",\n      "language": "ja"\n    }\n  }\''))),(0,s.kt)("details",null,(0,s.kt)("summary",null,"Code Output Example"),(0,s.kt)(r.Z,{className:"language-js",mdxType:"CodeBlock"},"Found concepts:\n    \u4eba 1.00\n    \u4eba 1.00")),(0,s.kt)("details",null,(0,s.kt)("summary",null,"JSON Output Example"),(0,s.kt)(r.Z,{className:"language-js",mdxType:"CodeBlock"},'status {\n    code: SUCCESS\n    description: "Ok"\n    req_id: "6e24dbc1e4977bd6f4092d0c72169a68"\n  }\n  concepts {\n    id: "ai_ZKJ48TFz"\n    name: "\\344\\272\\272"\n    value: 1.0\n    created_at {\n      seconds: 1458214981\n      nanos: 223962000\n    }\n    language: "ja"\n    app_id: "main"\n    visibility {\n      gettable: PUBLIC\n    }\n    user_id: "clarifai"\n  }\n  concepts {\n    id: "ai_l8TKp2h5"\n    name: "\\344\\272\\272"\n    value: 1.0\n    created_at {\n      seconds: 1458214981\n      nanos: 223962000\n    }\n    language: "ja"\n    app_id: "main"\n    visibility {\n      gettable: PUBLIC\n    }\n    user_id: "clarifai"\n  }\n  ')))}_.isMDXComponent=!0}}]);
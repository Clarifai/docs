"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[2962],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>k});var l=a(67294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function n(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,l)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?n(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):n(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function p(e,t){if(null==e)return{};var a,l,i=function(e,t){if(null==e)return{};var a,l,i={},n=Object.keys(e);for(l=0;l<n.length;l++)a=n[l],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(l=0;l<n.length;l++)a=n[l],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var o=l.createContext({}),s=function(e){var t=l.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},u=function(e){var t=s(e.components);return l.createElement(o.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},_=l.forwardRef((function(e,t){var a=e.components,i=e.mdxType,n=e.originalType,o=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),m=s(a),_=i,k=m["".concat(o,".").concat(_)]||m[_]||d[_]||n;return a?l.createElement(k,r(r({ref:t},u),{},{components:a})):l.createElement(k,r({ref:t},u))}));function k(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var n=a.length,r=new Array(n);r[0]=_;var p={};for(var o in t)hasOwnProperty.call(t,o)&&(p[o]=t[o]);p.originalType=e,p[m]="string"==typeof e?e:i,r[1]=p;for(var s=2;s<n;s++)r[s]=a[s];return l.createElement.apply(null,r)}return l.createElement.apply(null,a)}_.displayName="MDXCreateElement"},25624:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>r,default:()=>d,frontMatter:()=>n,metadata:()=>p,toc:()=>s});var l=a(87462),i=(a(67294),a(3905));const n={description:"Clarifai Python SDK API Reference",sidebar_position:3},r="API Reference",p={unversionedId:"python-sdk/api-reference",id:"python-sdk/api-reference",title:"API Reference",description:"Clarifai Python SDK API Reference",source:"@site/docs/python-sdk/api-reference.md",sourceDirName:"python-sdk",slug:"/python-sdk/api-reference",permalink:"/python-sdk/api-reference",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{description:"Clarifai Python SDK API Reference",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Tutorial",permalink:"/python-sdk/tutorial"},next:{title:"Clarifai API Basics",permalink:"/api-guide/api-overview/"}},o={},s=[{value:"User",id:"user",level:2},{value:"<em>class</em> User(user_id=&#39;&#39;, **kwargs)",id:"class-useruser_id-kwargs",level:3},{value:"__init__(user_id=&#39;&#39;, **kwargs)",id:"__init__user_id-kwargs",level:4},{value:"app(app_id, **kwargs)",id:"appapp_id-kwargs",level:4},{value:"Example",id:"example",level:4},{value:"create_app(app_id, base_workflow=&#39;Language-Understanding&#39;, **kwargs)",id:"create_appapp_id-base_workflowlanguage-understanding-kwargs",level:4},{value:"Example",id:"example-1",level:4},{value:"delete_app(app_id)",id:"delete_appapp_id",level:4},{value:"Example",id:"example-2",level:4},{value:"list_apps(filter_by={})",id:"list_appsfilter_by",level:4},{value:"Example",id:"example-3",level:4},{value:"App",id:"app",level:2},{value:"<em>class</em> App(url_init=&#39;&#39;, app_id=&#39;&#39;, **kwargs)",id:"class-appurl_init-app_id-kwargs",level:3},{value:"__init__(url_init=&#39;&#39;, app_id=&#39;&#39;, **kwargs)",id:"__init__url_init-app_id-kwargs",level:4},{value:"create_dataset(dataset_id, **kwargs)",id:"create_datasetdataset_id-kwargs",level:4},{value:"Example",id:"example-4",level:4},{value:"create_model(model_id, **kwargs)",id:"create_modelmodel_id-kwargs",level:4},{value:"Example",id:"example-5",level:4},{value:"create_module(module_id, description, **kwargs)",id:"create_modulemodule_id-description-kwargs",level:4},{value:"Example",id:"example-6",level:4},{value:"create_workflow(workflow_id, **kwargs)",id:"create_workflowworkflow_id-kwargs",level:4},{value:"Example",id:"example-7",level:4},{value:"dataset(dataset_id, **kwargs)",id:"datasetdataset_id-kwargs",level:4},{value:"Example",id:"example-8",level:4},{value:"delete_dataset(dataset_id)",id:"delete_datasetdataset_id",level:4},{value:"Example",id:"example-9",level:4},{value:"delete_model(model_id)",id:"delete_modelmodel_id",level:4},{value:"Example",id:"example-10",level:4},{value:"delete_module(module_id)",id:"delete_modulemodule_id",level:4},{value:"Example",id:"example-11",level:4},{value:"delete_workflow(workflow_id)",id:"delete_workflowworkflow_id",level:4},{value:"Example",id:"example-12",level:4},{value:"inputs()",id:"inputs",level:4},{value:"list_concepts()",id:"list_concepts",level:4},{value:"list_datasets()",id:"list_datasets",level:4},{value:"Example",id:"example-13",level:4},{value:"list_installed_module_versions(filter_by={})",id:"list_installed_module_versionsfilter_by",level:4},{value:"Example",id:"example-14",level:4},{value:"list_models(filter_by={}, only_in_app=True)",id:"list_modelsfilter_by-only_in_apptrue",level:4},{value:"Example",id:"example-15",level:4},{value:"list_modules(filter_by={}, only_in_app=True)",id:"list_modulesfilter_by-only_in_apptrue",level:4},{value:"Example",id:"example-16",level:4},{value:"list_workflows(filter_by={}, only_in_app=True)",id:"list_workflowsfilter_by-only_in_apptrue",level:4},{value:"Example",id:"example-17",level:4},{value:"model(model_id, model_version_id=&#39;&#39;, **kwargs)",id:"modelmodel_id-model_version_id-kwargs",level:4},{value:"Example",id:"example-18",level:4},{value:"module(module_id, module_version_id=&#39;&#39;, **kwargs)",id:"modulemodule_id-module_version_id-kwargs",level:4},{value:"Example",id:"example-19",level:4},{value:"workflow(workflow_id, **kwargs)",id:"workflowworkflow_id-kwargs",level:4},{value:"Example",id:"example-20",level:4},{value:"Dataset",id:"dataset",level:2},{value:"<em>class</em> Dataset(url_init=&#39;&#39;, dataset_id=&#39;&#39;, **kwargs)",id:"class-dataseturl_init-dataset_id-kwargs",level:3},{value:"__init__(url_init=&#39;&#39;, dataset_id=&#39;&#39;, **kwargs)",id:"__init__url_init-dataset_id-kwargs",level:4},{value:"upload_dataset(task, split, module_dir=None, dataset_loader=None, chunk_size=128)",id:"upload_datasettask-split-module_dirnone-dataset_loadernone-chunk_size128",level:4},{value:"upload_from_csv(csv_path, input_type=&#39;text&#39;, labels=True, chunk_size=128)",id:"upload_from_csvcsv_path-input_typetext-labelstrue-chunk_size128",level:4},{value:"Example",id:"example-21",level:4},{value:"upload_from_folder(folder_path, input_type, labels=False, chunk_size=128)",id:"upload_from_folderfolder_path-input_type-labelsfalse-chunk_size128",level:4},{value:"Example",id:"example-22",level:4},{value:"Input",id:"input",level:2},{value:"<em>class</em> Inputs(user_id=&#39;&#39;, app_id=&#39;&#39;, logger_level=&#39;INFO&#39;, **kwargs)",id:"class-inputsuser_id-app_id-logger_levelinfo-kwargs",level:3},{value:"__init__(user_id=&#39;&#39;, app_id=&#39;&#39;, logger_level=&#39;INFO&#39;, **kwargs)",id:"__init__user_id-app_id-logger_levelinfo-kwargs",level:4},{value:"delete_inputs(inputs)",id:"delete_inputsinputs",level:4},{value:"Example",id:"example-23",level:4},{value:"get_annotation_proto(input_id, label, annotations)",id:"get_annotation_protoinput_id-label-annotations",level:4},{value:"Example",id:"example-24",level:4},{value:"get_image_inputs_from_folder(folder_path, dataset_id=None, labels=False)",id:"get_image_inputs_from_folderfolder_path-dataset_idnone-labelsfalse",level:4},{value:"Example",id:"example-25",level:4},{value:"get_input_from_bytes(input_id, image_bytes=None, video_bytes=None, audio_bytes=None, dataset_id=None, **kwargs)",id:"get_input_from_bytesinput_id-image_bytesnone-video_bytesnone-audio_bytesnone-dataset_idnone-kwargs",level:4},{value:"Example",id:"example-26",level:4},{value:"get_input_from_file(input_id, image_file=None, video_file=None, audio_file=None, dataset_id=None, **kwargs)",id:"get_input_from_fileinput_id-image_filenone-video_filenone-audio_filenone-dataset_idnone-kwargs",level:4},{value:"Example",id:"example-27",level:4},{value:"get_input_from_url(input_id, image_url=None, video_url=None, audio_url=None, text_url=None, dataset_id=None, **kwargs)",id:"get_input_from_urlinput_id-image_urlnone-video_urlnone-audio_urlnone-text_urlnone-dataset_idnone-kwargs",level:4},{value:"Example",id:"example-28",level:4},{value:"get_mask_proto(input_id, label, polygons)",id:"get_mask_protoinput_id-label-polygons",level:4},{value:"Example",id:"example-29",level:4},{value:"get_text_input(input_id, raw_text, dataset_id=None, **kwargs)",id:"get_text_inputinput_id-raw_text-dataset_idnone-kwargs",level:4},{value:"Example",id:"example-30",level:4},{value:"get_text_input_from_csv(csv_path, dataset_id=None, labels=True)",id:"get_text_input_from_csvcsv_path-dataset_idnone-labelstrue",level:4},{value:"Example",id:"example-31",level:4},{value:"get_text_inputs_from_folder(folder_path, dataset_id=None, labels=False)",id:"get_text_inputs_from_folderfolder_path-dataset_idnone-labelsfalse",level:4},{value:"Example",id:"example-32",level:4},{value:"list_inputs()",id:"list_inputs",level:4},{value:"Example",id:"example-33",level:4},{value:"upload_annotations(batch_annot, show_log=True)",id:"upload_annotationsbatch_annot-show_logtrue",level:4},{value:"upload_from_bytes(input_id, image_bytes=None, video_bytes=None, audio_bytes=None, dataset_id=None, **kwargs)",id:"upload_from_bytesinput_id-image_bytesnone-video_bytesnone-audio_bytesnone-dataset_idnone-kwargs",level:4},{value:"Example",id:"example-34",level:4},{value:"upload_from_file(input_id, image_file=None, video_file=None, audio_file=None, dataset_id=None, **kwargs)",id:"upload_from_fileinput_id-image_filenone-video_filenone-audio_filenone-dataset_idnone-kwargs",level:4},{value:"Example",id:"example-35",level:4},{value:"upload_from_url(input_id, image_url=None, video_url=None, audio_url=None, text_url=None, dataset_id=None, **kwargs)",id:"upload_from_urlinput_id-image_urlnone-video_urlnone-audio_urlnone-text_urlnone-dataset_idnone-kwargs",level:4},{value:"Example",id:"example-36",level:4},{value:"upload_inputs(inputs, show_log=True)",id:"upload_inputsinputs-show_logtrue",level:4},{value:"upload_text(input_id, raw_text, dataset_id=None, **kwargs)",id:"upload_textinput_id-raw_text-dataset_idnone-kwargs",level:4},{value:"Example",id:"example-37",level:4},{value:"Lister",id:"lister",level:2},{value:"<em>class</em> Lister(page_size=16)",id:"class-listerpage_size16",level:3},{value:"__init__(page_size=16)",id:"__init__page_size16",level:4},{value:"list_all_pages_generator(endpoint, proto_message, request_data)",id:"list_all_pages_generatorendpoint-proto_message-request_data",level:4},{value:"Model",id:"model",level:2},{value:"<em>class</em> Model(url_init=&#39;&#39;, model_id=&#39;&#39;, model_version={&#39;id&#39;: &#39;&#39;}, output_config={&#39;min_value&#39;: 0}, **kwargs)",id:"class-modelurl_init-model_id-model_versionid--output_configmin_value-0-kwargs",level:3},{value:"__init__(url_init=&#39;&#39;, model_id=&#39;&#39;, model_version={&#39;id&#39;: &#39;&#39;}, output_config={&#39;min_value&#39;: 0}, **kwargs)",id:"__init__url_init-model_id-model_versionid--output_configmin_value-0-kwargs",level:4},{value:"list_versions()",id:"list_versions",level:4},{value:"Example",id:"example-38",level:4},{value:"predict(inputs)",id:"predictinputs",level:4},{value:"predict_by_bytes(input_bytes, input_type)",id:"predict_by_bytesinput_bytes-input_type",level:4},{value:"Example",id:"example-39",level:4},{value:"predict_by_filepath(filepath, input_type)",id:"predict_by_filepathfilepath-input_type",level:4},{value:"Example",id:"example-40",level:4},{value:"predict_by_url(url, input_type)",id:"predict_by_urlurl-input_type",level:4},{value:"Example",id:"example-41",level:4},{value:"Workflow",id:"workflow",level:2},{value:"<em>class</em> Workflow(url_init=&#39;&#39;, workflow_id=&#39;&#39;, workflow_version={&#39;id&#39;: &#39;&#39;}, output_config={&#39;min_value&#39;: 0}, **kwargs)",id:"class-workflowurl_init-workflow_id-workflow_versionid--output_configmin_value-0-kwargs",level:3},{value:"__init__(url_init=&#39;&#39;, workflow_id=&#39;&#39;, workflow_version={&#39;id&#39;: &#39;&#39;}, output_config={&#39;min_value&#39;: 0}, **kwargs)",id:"__init__url_init-workflow_id-workflow_versionid--output_configmin_value-0-kwargs",level:4},{value:"list_versions()",id:"list_versions-1",level:4},{value:"Example",id:"example-42",level:4},{value:"predict(inputs)",id:"predictinputs-1",level:4},{value:"predict_by_bytes(input_bytes, input_type)",id:"predict_by_bytesinput_bytes-input_type-1",level:4},{value:"predict_by_filepath(filepath, input_type)",id:"predict_by_filepathfilepath-input_type-1",level:4},{value:"Example",id:"example-43",level:4},{value:"predict_by_url(url, input_type)",id:"predict_by_urlurl-input_type-1",level:4},{value:"Example",id:"example-44",level:4},{value:"Module",id:"module",level:2},{value:"<em>class</em> Module(url_init=&#39;&#39;, module_id=&#39;&#39;, module_version={&#39;id&#39;: &#39;&#39;}, **kwargs)",id:"class-moduleurl_init-module_id-module_versionid--kwargs",level:3},{value:"__init__(url_init=&#39;&#39;, module_id=&#39;&#39;, module_version={&#39;id&#39;: &#39;&#39;}, **kwargs)",id:"__init__url_init-module_id-module_versionid--kwargs",level:4},{value:"list_versions()",id:"list_versions-2",level:4},{value:"Example",id:"example-45",level:4},{value:"Utils",id:"utils",level:2},{value:"<em>class</em> Chunker(seq, size)",id:"class-chunkerseq-size",level:3},{value:"__init__(seq, size)",id:"__init__seq-size",level:4},{value:"chunk()",id:"chunk",level:4},{value:"Exceptions",id:"exceptions",level:2},{value:"<em>class</em> ApiError(resource, params, method, response=None)",id:"class-apierrorresource-params-method-responsenone",level:3},{value:"__init__(resource, params, method, response=None)",id:"__init__resource-params-method-responsenone",level:4},{value:"<em>class</em> ApiClientError",id:"class-apiclienterror",level:3},{value:"<em>class</em> UserError",id:"class-usererror",level:3}],u={toc:s},m="wrapper";function d(e){let{components:t,...a}=e;return(0,i.kt)(m,(0,l.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"api-reference"},"API Reference"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Clarifai Python SDK API Reference")),(0,i.kt)("hr",null),(0,i.kt)("p",null,"This is the API Reference documentation extracted from the source code."),(0,i.kt)("h2",{id:"user"},"User"),(0,i.kt)("h3",{id:"class-useruser_id-kwargs"},(0,i.kt)("em",{parentName:"h3"},"class")," User(user_id='', ","*","*","kwargs)"),(0,i.kt)("p",null,"User is a class that provides access to Clarifai API endpoints related to user information."),(0,i.kt)("h4",{id:"__init__user_id-kwargs"},"_","_","init_","_","(user_id='', ","*","*","kwargs)"),(0,i.kt)("p",null,"Initializes an User object."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Parameters:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"user_id")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 The user ID for the user to interact with."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"*","*","kwargs")," \u2013 Additional keyword arguments to be passed to the ClarifaiAuthHelper.")))),(0,i.kt)("h4",{id:"appapp_id-kwargs"},"app(app_id, ","*","*","kwargs)"),(0,i.kt)("p",null,"Returns an App object for the specified app ID."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Parameters:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"app_id")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 The app ID for the app to interact with."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"*","*","kwargs")," \u2013 Additional keyword arguments to be passed to the App."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Returns:"),"\nAn App object for the specified app ID."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Return type:"),"\nApp")),(0,i.kt)("h4",{id:"example"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-pycon"},'>>> from clarifai.client.user import User\n>>> app = User("user_id").app("app_id")\n')),(0,i.kt)("h4",{id:"create_appapp_id-base_workflowlanguage-understanding-kwargs"},"create_app(app_id, base_workflow='Language-Understanding', ","*","*","kwargs)"),(0,i.kt)("p",null,"Creates an app for the user."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Parameters:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"app_id")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 The app ID for the app to create."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"base_workflow")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 The base workflow to use for the app.(Examples: \u2018Universal\u2019, \u2018Empty\u2019, \u2018General\u2019)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"*","*","kwargs")," \u2013 Additional keyword arguments to be passed to the App."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Returns:"),"\nAn App object for the specified app ID."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Return type:"),"\nApp")),(0,i.kt)("h4",{id:"example-1"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-pycon"},'>>> from clarifai.client.user import User\n>>> client = User(user_id="user_id")\n>>> app = client.create_app(app_id="app_id",base_workflow="Universal")\n')),(0,i.kt)("h4",{id:"delete_appapp_id"},"delete_app(app_id)"),(0,i.kt)("p",null,"Deletes an app for the user."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Parameters:"),(0,i.kt)("strong",{parentName:"li"},"app_id")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 The app ID for the app to delete."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Return type:"),(0,i.kt)("inlineCode",{parentName:"li"},"None"))),(0,i.kt)("h4",{id:"example-2"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-pycon"},'>>> from clarifai.client.user import User\n>>> user = User("user_id").delete_app("app_id")\n')),(0,i.kt)("h4",{id:"list_appsfilter_by"},"list_apps(filter_by={})"),(0,i.kt)("p",null,"Lists all the apps for the user."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Parameters:"),(0,i.kt)("strong",{parentName:"li"},"filter_by")," (",(0,i.kt)("em",{parentName:"li"},"dict"),") \u2013 A dictionary of filters to be applied to the list of apps."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Returns:"),"\nA list of App objects for the user."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Return type:"),"\nlist of App")),(0,i.kt)("h4",{id:"example-3"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-pycon"},'>>> from clarifai.client.user import User\n>>> apps = User("user_id").list_apps()\n')),(0,i.kt)("h2",{id:"app"},"App"),(0,i.kt)("h3",{id:"class-appurl_init-app_id-kwargs"},(0,i.kt)("em",{parentName:"h3"},"class")," App(url_init='', app_id='', ","*","*","kwargs)"),(0,i.kt)("p",null,"App is a class that provides access to Clarifai API endpoints related to App information."),(0,i.kt)("h4",{id:"__init__url_init-app_id-kwargs"},"_","_","init_","_","(url_init='', app_id='', ","*","*","kwargs)"),(0,i.kt)("p",null,"Initializes an App object."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Parameters:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"url_init")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 The URL to initialize the app object."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"app_id")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 The App ID for the App to interact with."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"*","*","kwargs")," \u2013 Additional keyword arguments to be passed to the ClarifaiAuthHelper.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"name (str): The name of the app."),(0,i.kt)("li",{parentName:"ul"},"description (str): The description of the app.")))))),(0,i.kt)("h4",{id:"create_datasetdataset_id-kwargs"},"create_dataset(dataset_id, ","*","*","kwargs)"),(0,i.kt)("p",null,"Creates a dataset for the app."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Parameters:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"dataset_id")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 The dataset ID for the dataset to create."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"*","*","kwargs")," \u2013 Additional keyword arguments to be passed to the Dataset."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Returns:"),"\nA Dataset object for the specified dataset ID."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Return type:"),"\nDataset")),(0,i.kt)("h4",{id:"example-4"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-pycon"},'>>> from clarifai.client.app import App\n>>> app = App(app_id="app_id", user_id="user_id")\n>>> dataset = app.create_dataset(dataset_id="dataset_id")\n')),(0,i.kt)("h4",{id:"create_modelmodel_id-kwargs"},"create_model(model_id, ","*","*","kwargs)"),(0,i.kt)("p",null,"Creates a model for the app."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Parameters:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"model_id")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 The model ID for the model to create."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"*","*","kwargs")," \u2013 Additional keyword arguments to be passed to the Model."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Returns:"),"\nA Model object for the specified model ID."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Return type:"),"\nModel")),(0,i.kt)("h4",{id:"example-5"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-pycon"},'>>> from clarifai.client.app import App\n>>> app = App(app_id="app_id", user_id="user_id")\n>>> model = app.create_model(model_id="model_id")\n')),(0,i.kt)("h4",{id:"create_modulemodule_id-description-kwargs"},"create_module(module_id, description, ","*","*","kwargs)"),(0,i.kt)("p",null,"Creates a module for the app."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Parameters:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"module_id")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 The module ID for the module to create."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"description")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 The description of the module to create."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"*","*","kwargs")," \u2013 Additional keyword arguments to be passed to the module."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Returns:"),"\nA Module object for the specified module ID."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Return type:"),"\nModule")),(0,i.kt)("h4",{id:"example-6"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-pycon"},'>>> from clarifai.client.app import App\n>>> app = App(app_id="app_id", user_id="user_id")\n>>> module = app.create_module(module_id="module_id")\n')),(0,i.kt)("h4",{id:"create_workflowworkflow_id-kwargs"},"create_workflow(workflow_id, ","*","*","kwargs)"),(0,i.kt)("p",null,"Creates a workflow for the app."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Parameters:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"workflow_id")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 The workflow ID for the workflow to create."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"*","*","kwargs")," \u2013 Additional keyword arguments to be passed to the workflow."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Returns:"),"\nA Workflow object for the specified workflow ID."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Return type:"),"\nWorkflow")),(0,i.kt)("h4",{id:"example-7"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-pycon"},'>>> from clarifai.client.app import App\n>>> app = App(app_id="app_id", user_id="user_id")\n>>> workflow = app.create_workflow(workflow_id="workflow_id")\n')),(0,i.kt)("h4",{id:"datasetdataset_id-kwargs"},"dataset(dataset_id, ","*","*","kwargs)"),(0,i.kt)("p",null,"Returns a Dataset object for the existing dataset ID."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Parameters:"),(0,i.kt)("strong",{parentName:"li"},"dataset_id")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 The dataset ID for the dataset to interact with."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Returns:"),"\nA Dataset object for the existing dataset ID."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Return type:"),"\nDataset")),(0,i.kt)("h4",{id:"example-8"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-pycon"},'>>> from clarifai.client.app import App\n>>> app = App(app_id="app_id", user_id="user_id")\n>>> dataset = app.dataset(dataset_id="dataset_id")\n')),(0,i.kt)("h4",{id:"delete_datasetdataset_id"},"delete_dataset(dataset_id)"),(0,i.kt)("p",null,"Deletes an dataset for the user."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Parameters:"),(0,i.kt)("strong",{parentName:"li"},"dataset_id")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 The dataset ID for the app to delete."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Return type:"),(0,i.kt)("inlineCode",{parentName:"li"},"None"))),(0,i.kt)("h4",{id:"example-9"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-pycon"},'>>> from clarifai.client.app import App\n>>> app = App(app_id="app_id", user_id="user_id")\n>>> app.delete_dataset(dataset_id="dataset_id")\n')),(0,i.kt)("h4",{id:"delete_modelmodel_id"},"delete_model(model_id)"),(0,i.kt)("p",null,"Deletes an model for the user."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Parameters:"),(0,i.kt)("strong",{parentName:"li"},"model_id")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 The model ID for the app to delete."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Return type:"),(0,i.kt)("inlineCode",{parentName:"li"},"None"))),(0,i.kt)("h4",{id:"example-10"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-pycon"},'>>> from clarifai.client.app import App\n>>> app = App(app_id="app_id", user_id="user_id")\n>>> app.delete_model(model_id="model_id")\n')),(0,i.kt)("h4",{id:"delete_modulemodule_id"},"delete_module(module_id)"),(0,i.kt)("p",null,"Deletes an module for the user."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Parameters:"),(0,i.kt)("strong",{parentName:"li"},"module_id")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 The module ID for the app to delete."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Return type:"),(0,i.kt)("inlineCode",{parentName:"li"},"None"))),(0,i.kt)("h4",{id:"example-11"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-pycon"},'>>> from clarifai.client.app import App\n>>> app = App(app_id="app_id", user_id="user_id")\n>>> app.delete_module(module_id="module_id")\n')),(0,i.kt)("h4",{id:"delete_workflowworkflow_id"},"delete_workflow(workflow_id)"),(0,i.kt)("p",null,"Deletes an workflow for the user."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Parameters:"),(0,i.kt)("strong",{parentName:"li"},"workflow_id")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 The workflow ID for the app to delete."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Return type:"),(0,i.kt)("inlineCode",{parentName:"li"},"None"))),(0,i.kt)("h4",{id:"example-12"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-pycon"},'>>> from clarifai.client.app import App\n>>> app = App(app_id="app_id", user_id="user_id")\n>>> app.delete_workflow(workflow_id="workflow_id")\n')),(0,i.kt)("h4",{id:"inputs"},"inputs()"),(0,i.kt)("p",null,"Returns an Input object."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Returns:"),"\nAn input object."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Return type:"),"\nInputs")),(0,i.kt)("h4",{id:"list_concepts"},"list_concepts()"),(0,i.kt)("p",null,"Lists all the concepts for the app."),(0,i.kt)("h4",{id:"list_datasets"},"list_datasets()"),(0,i.kt)("p",null,"Lists all the datasets for the app."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Returns:"),"\nA list of Dataset objects for the datasets in the app."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Return type:"),"\nList Dataset")),(0,i.kt)("h4",{id:"example-13"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-pycon"},'>>> from clarifai.client.app import App\n>>> app = App(app_id="app_id", user_id="user_id")\n>>> all_datasets = app.list_datasets()\n')),(0,i.kt)("h4",{id:"list_installed_module_versionsfilter_by"},"list_installed_module_versions(filter_by={})"),(0,i.kt)("p",null,"Lists all installed module versions in the app."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Parameters:"),(0,i.kt)("strong",{parentName:"li"},"filter_by")," (",(0,i.kt)("em",{parentName:"li"},"dict"),") \u2013 A dictionary of filters to apply to the list of installed module versions."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Returns:"),"\nA list of Module objects for the installed module versions in the app."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Return type:"),"\nList[",(0,i.kt)("a",{parentName:"li",href:"#clarifai.client.module.Module"},"Module"),"]")),(0,i.kt)("h4",{id:"example-14"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-pycon"},'>>> from clarifai.client.app import App\n>>> app = App(app_id="app_id", user_id="user_id")\n>>> all_installed_module_versions = app.list_installed_module_versions()\n')),(0,i.kt)("h4",{id:"list_modelsfilter_by-only_in_apptrue"},"list_models(filter_by={}, only_in_app=True)"),(0,i.kt)("p",null,"Lists all the available models for the user."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Parameters:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"filter_by")," (",(0,i.kt)("em",{parentName:"li"},"dict"),") \u2013 A dictionary of filters to apply to the list of models."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"only_in_app")," (",(0,i.kt)("em",{parentName:"li"},"bool"),") \u2013 If True, only return models that are in the app."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Returns:"),"\nA list of Model objects for the models in the app."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Return type:"),"\nList Model")),(0,i.kt)("h4",{id:"example-15"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-pycon"},'>>> from clarifai.client.user import User\n>>> app = User(user_id="user_id").app(app_id="app_id")\n>>> all_models = app.list_models()\n')),(0,i.kt)("h4",{id:"list_modulesfilter_by-only_in_apptrue"},"list_modules(filter_by={}, only_in_app=True)"),(0,i.kt)("p",null,"Lists all the available modules for the user."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Parameters:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"filter_by")," (",(0,i.kt)("em",{parentName:"li"},"dict"),") \u2013 A dictionary of filters to apply to the list of modules."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"only_in_app")," (",(0,i.kt)("em",{parentName:"li"},"bool"),") \u2013 If True, only return modules that are in the app."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Returns:"),"\nA list of Module objects for the modules in the app."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Return type:"),"\nList Module")),(0,i.kt)("h4",{id:"example-16"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-pycon"},'>>> from clarifai.client.app import App\n>>> app = App(app_id="app_id", user_id="user_id")\n>>> all_modules = app.list_modules()\n')),(0,i.kt)("h4",{id:"list_workflowsfilter_by-only_in_apptrue"},"list_workflows(filter_by={}, only_in_app=True)"),(0,i.kt)("p",null,"Lists all the available workflows for the user."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Parameters:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"filter_by")," (",(0,i.kt)("em",{parentName:"li"},"dict"),") \u2013 A dictionary of filters to apply to the list of workflows."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"only_in_app")," (",(0,i.kt)("em",{parentName:"li"},"bool"),") \u2013 If True, only return workflows that are in the app."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Returns:"),"\nA list of Workflow objects for the workflows in the app."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Return type:"),"\nList Workflow ")),(0,i.kt)("h4",{id:"example-17"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-pycon"},'>>> from clarifai.client.app import App\n>>> app = App(app_id="app_id", user_id="user_id")\n>>> all_workflows = app.list_workflows()\n')),(0,i.kt)("h4",{id:"modelmodel_id-model_version_id-kwargs"},"model(model_id, model_version_id='', ","*","*","kwargs)"),(0,i.kt)("p",null,"Returns a Model object for the existing model ID."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Parameters:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"model_id")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 The model ID for the model to interact with."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"model_version_id")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 The model version ID for the model version to interact with."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Returns:"),"\nA Model object for the existing model ID."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Return type:"),"\nModel")),(0,i.kt)("h4",{id:"example-18"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-pycon"},'>>> from clarifai.client.app import App\n>>> app = App(app_id="app_id", user_id="user_id")\n>>> model_v1 = app.model(model_id="model_id", model_version_id="model_version_id")\n')),(0,i.kt)("h4",{id:"modulemodule_id-module_version_id-kwargs"},"module(module_id, module_version_id='', ","*","*","kwargs)"),(0,i.kt)("p",null,"Returns a Module object for the existing module ID."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Parameters:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"module_id")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 The module ID for the module to interact with."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"module_version_id")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 The module version ID for the module version to interact with."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Returns:"),"\nA Module object for the existing module ID."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Return type:"),"\nModule")),(0,i.kt)("h4",{id:"example-19"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-pycon"},'>>> from clarifai.client.app import App\n>>> app = App(app_id="app_id", user_id="user_id")\n>>> module = app.module(module_id="module_id", module_version_id="module_version_id")\n')),(0,i.kt)("h4",{id:"workflowworkflow_id-kwargs"},"workflow(workflow_id, ","*","*","kwargs)"),(0,i.kt)("p",null,"Returns a workflow object for the existing workflow ID."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Parameters:"),(0,i.kt)("strong",{parentName:"li"},"workflow_id")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 The workflow ID for the workflow to interact with."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Returns:"),"\nA Workflow object for the existing workflow ID."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Return type:"),"\nWorkflow")),(0,i.kt)("h4",{id:"example-20"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-pycon"},'>>> from clarifai.client.app import App\n>>> app = App(app_id="app_id", user_id="user_id")\n>>> workflow = app.workflow(workflow_id="workflow_id")\n')),(0,i.kt)("h2",{id:"dataset"},"Dataset"),(0,i.kt)("h3",{id:"class-dataseturl_init-dataset_id-kwargs"},(0,i.kt)("em",{parentName:"h3"},"class")," Dataset(url_init='', dataset_id='', ","*","*","kwargs)"),(0,i.kt)("p",null,"Dataset is a class that provides access to Clarifai API endpoints related to Dataset information."),(0,i.kt)("h4",{id:"__init__url_init-dataset_id-kwargs"},"_","_","init_","_","(url_init='', dataset_id='', ","*","*","kwargs)"),(0,i.kt)("p",null,"Initializes a Dataset object."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Parameters:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"url_init")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 The URL to initialize the dataset object."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"dataset_id")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 The Dataset ID within the App to interact with."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"*","*","kwargs")," \u2013 Additional keyword arguments to be passed to the ClarifaiAuthHelper.")))),(0,i.kt)("h4",{id:"upload_datasettask-split-module_dirnone-dataset_loadernone-chunk_size128"},"upload_dataset(task, split, module_dir=None, dataset_loader=None, chunk_size=128)"),(0,i.kt)("p",null,"Uploads a dataset to the app."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Parameters:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"task")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 task type(text_clf, visual-classification, visual_detection, visual_segmentation, visual-captioning)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"split")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 split type(train, test, val)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"module_dir")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 path to the module directory"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"dataset_loader")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 name of the dataset loader"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"chunk_size")," (",(0,i.kt)("em",{parentName:"li"},"int"),") \u2013 chunk size for concurrent upload of inputs and annotations"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Return type:"),(0,i.kt)("inlineCode",{parentName:"li"},"None"))),(0,i.kt)("h4",{id:"upload_from_csvcsv_path-input_typetext-labelstrue-chunk_size128"},"upload_from_csv(csv_path, input_type='text', labels=True, chunk_size=128)"),(0,i.kt)("p",null,"Uploads dataset from a csv file."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Parameters:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"csv_path")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 path to the csv file"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"input_type")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 type of the dataset(text, image)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"labels")," (",(0,i.kt)("em",{parentName:"li"},"bool"),") \u2013 True if csv file has labels column"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"chunk_size")," (",(0,i.kt)("em",{parentName:"li"},"int"),") \u2013 chunk size for concurrent upload of inputs and annotations"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Return type:"),(0,i.kt)("inlineCode",{parentName:"li"},"None"))),(0,i.kt)("h4",{id:"example-21"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-pycon"},">>> from clarifai.client.dataset import Dataset\n>>> dataset = Dataset(user_id = 'user_id', app_id = 'demo_app', dataset_id = 'demo_dataset')\n>>> dataset.upload_from_csv(csv_path='csv_path', labels=True)\n")),(0,i.kt)("p",null,"Note: csv file should have either one(input) or two columns(input, labels)."),(0,i.kt)("h4",{id:"upload_from_folderfolder_path-input_type-labelsfalse-chunk_size128"},"upload_from_folder(folder_path, input_type, labels=False, chunk_size=128)"),(0,i.kt)("p",null,"Upload dataset from folder."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Parameters:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"folder_path")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 Path to the folder containing images."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"input_type")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 type of the dataset(text, image)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"labels")," (",(0,i.kt)("em",{parentName:"li"},"bool"),") \u2013 True if folder name is the label for the inputs"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"chunk_size")," (",(0,i.kt)("em",{parentName:"li"},"int"),") \u2013 chunk size for concurrent upload of inputs and annotations"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Return type:"),(0,i.kt)("inlineCode",{parentName:"li"},"None"))),(0,i.kt)("h4",{id:"example-22"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-pycon"},">>> from clarifai.client.dataset import Dataset\n>>> dataset = Dataset(user_id = 'user_id', app_id = 'demo_app', dataset_id = 'demo_dataset')\n>>> dataset.upload_from_folder(folder_path='folder_path', input_type='text', labels=True)\n")),(0,i.kt)("p",null,"Note: The filename is used as the input_id."),(0,i.kt)("h2",{id:"input"},"Input"),(0,i.kt)("h3",{id:"class-inputsuser_id-app_id-logger_levelinfo-kwargs"},(0,i.kt)("em",{parentName:"h3"},"class")," Inputs(user_id='', app_id='', logger_level='INFO', ","*","*","kwargs)"),(0,i.kt)("p",null,"Inputs is a class that provides access to Clarifai API endpoints related to Input information."),(0,i.kt)("h4",{id:"__init__user_id-app_id-logger_levelinfo-kwargs"},"_","_","init_","_","(user_id='', app_id='', logger_level='INFO', ","*","*","kwargs)"),(0,i.kt)("p",null,"Initializes an Input object."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Parameters:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"user_id")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 A user ID for authentication."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"app_id")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 An app ID for the application to interact with."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"*","*","kwargs")," \u2013 Additional keyword arguments to be passed to the Input")))),(0,i.kt)("h4",{id:"delete_inputsinputs"},"delete_inputs(inputs)"),(0,i.kt)("p",null,"Delete list of input objects from the app."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Parameters:"),(0,i.kt)("strong",{parentName:"li"},"input_ids")," (",(0,i.kt)("em",{parentName:"li"},"Input"),") \u2013 List of input objects to delete."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Return type:"),(0,i.kt)("inlineCode",{parentName:"li"},"None"))),(0,i.kt)("h4",{id:"example-23"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-pycon"},'>>> from clarifai.client.user import User\n>>> input_obj = User(user_id="user_id").app(app_id="app_id").inputs()\n>>> input_obj.delete_inputs(input_obj.list_inputs())\n')),(0,i.kt)("h4",{id:"get_annotation_protoinput_id-label-annotations"},"get_annotation_proto(input_id, label, annotations)"),(0,i.kt)("p",null,"Create an annotation proto for each bounding box, label input pair."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Parameters:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"input_id")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 The input ID for the annotation to create."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"label")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 annotation label"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"annotations")," (",(0,i.kt)("em",{parentName:"li"},"List"),") \u2013 a list of a single bbox\u2019s coordinates. # Annotations ordering: ","[xmin, ymin, xmax, ymax]"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Return type:"),(0,i.kt)("inlineCode",{parentName:"li"},"Annotation")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Returns:"),"\nAn annotation object for the specified input ID.")),(0,i.kt)("h4",{id:"example-24"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-pycon"},">>> from clarifai.client.input import Input\n>>> input_obj = Input()\n>>> input_obj.get_annotation_proto(input_id='demo', label='demo', annotations=[x_min, y_min, x_max, y_max])\n")),(0,i.kt)("h4",{id:"get_image_inputs_from_folderfolder_path-dataset_idnone-labelsfalse"},"get_image_inputs_from_folder(folder_path, dataset_id=None, labels=False)"),(0,i.kt)("p",null,"Create input protos for image data type from folder."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Parameters:"),(0,i.kt)("strong",{parentName:"li"},"folder_path")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 Path to the folder containing images."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Returns:"),"\nA list of Input objects for the specified folder."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Return type:"),"\nlist of Input")),(0,i.kt)("h4",{id:"example-25"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-pycon"},">>> from clarifai.client.input import Input\n>>> input_obj = Input()\n>>> input_protos = input_obj.get_image_inputs_from_folder(folder_path='demo_folder')\n")),(0,i.kt)("h4",{id:"get_input_from_bytesinput_id-image_bytesnone-video_bytesnone-audio_bytesnone-dataset_idnone-kwargs"},"get_input_from_bytes(input_id, image_bytes=None, video_bytes=None, audio_bytes=None, dataset_id=None, ","*","*","kwargs)"),(0,i.kt)("p",null,"Create input proto from bytes."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Parameters:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"input_id")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 The input ID for the input to create."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"image_bytes")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 The bytes for the image."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"video_bytes")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 The bytes for the video."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"audio_bytes")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 The bytes for the audio."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"dataset_id")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 The dataset ID for the dataset to add the input to."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Returns:"),"\nAn Input object for the specified input ID."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Return type:"),"\nInput")),(0,i.kt)("h4",{id:"example-26"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-pycon"},">>> from clarifai.client.input import Input\n>>> input_obj = Input()\n>>> image = open('demo.jpg', 'rb').read()\n>>> video = open('demo.mp4', 'rb').read()\n>>> input_proto = input_obj.get_input_from_bytes(input_id = 'demo',image_bytes =image, video_bytes=video)\n")),(0,i.kt)("h4",{id:"get_input_from_fileinput_id-image_filenone-video_filenone-audio_filenone-dataset_idnone-kwargs"},"get_input_from_file(input_id, image_file=None, video_file=None, audio_file=None, dataset_id=None, ","*","*","kwargs)"),(0,i.kt)("p",null,"Create input proto from files."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Parameters:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"input_id")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 The input ID for the input to create."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"image_file")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 The url for the image."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"video_file")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 The url for the video."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"audio_file")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 The url for the audio."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"dataset_id")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 The dataset ID for the dataset to add the input to."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Returns:"),"\nAn Input object for the specified input ID."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Return type:"),"\nInput")),(0,i.kt)("h4",{id:"example-27"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-pycon"},">>> from clarifai.client.input import Input\n>>> input_obj = Input()\n>>> input_proto = input_obj.get_input_from_file(input_id = 'demo', video_file='file_path')\n")),(0,i.kt)("h4",{id:"get_input_from_urlinput_id-image_urlnone-video_urlnone-audio_urlnone-text_urlnone-dataset_idnone-kwargs"},"get_input_from_url(input_id, image_url=None, video_url=None, audio_url=None, text_url=None, dataset_id=None, ","*","*","kwargs)"),(0,i.kt)("p",null,"Create input proto from url."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Parameters:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"input_id")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 The input ID for the input to create."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"image_url")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 The url for the image."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"video_url")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 The url for the video."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"audio_url")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 The url for the audio."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"text_url")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 The url for the text.\ndataset_id (str): The dataset ID for the dataset to add the input to."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Returns:"),"\nAn Input object for the specified input ID."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Return type:"),"\nInput")),(0,i.kt)("h4",{id:"example-28"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-pycon"},">>> from clarifai.client.input import Input\n>>> input_obj = Input()\n>>> input_proto = input_obj.get_input_from_url(input_id = 'demo', image_url='https://samples.clarifai.com/metro-north.jpg')\n")),(0,i.kt)("h4",{id:"get_mask_protoinput_id-label-polygons"},"get_mask_proto(input_id, label, polygons)"),(0,i.kt)("p",null,"Create an annotation proto for each polygon box, label input pair."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Parameters:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"input_id")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 The input ID for the annotation to create."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"label")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 annotation label"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"polygons")," (",(0,i.kt)("em",{parentName:"li"},"List"),") \u2013 Polygon x,y points iterable"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Return type:"),(0,i.kt)("inlineCode",{parentName:"li"},"Annotation")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Returns:"),"\nAn annotation object for the specified input ID.")),(0,i.kt)("h4",{id:"example-29"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-pycon"},">>> from clarifai.client.input import Input\n>>> input_obj = Input()\n>>> input_obj.get_mask_proto(input_id='demo', label='demo', polygons=[[[x,y],...,[x,y]],...])\n")),(0,i.kt)("h4",{id:"get_text_inputinput_id-raw_text-dataset_idnone-kwargs"},"get_text_input(input_id, raw_text, dataset_id=None, ","*","*","kwargs)"),(0,i.kt)("p",null,"Create input proto for text data type from rawtext."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Parameters:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"input_id")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 The input ID for the input to create."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"raw_text")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 The raw text input."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"dataset_id")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 The dataset ID for the dataset to add the input to."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"*","*","kwargs")," \u2013 Additional keyword arguments to be passed to the Input"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Returns:"),"\nAn Input object for the specified input ID."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Return type:"),"\nText")),(0,i.kt)("h4",{id:"example-30"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-pycon"},">>> from clarifai.client.input import Input\n>>> input_obj = Input()\n>>> input_protos = input_obj.get_text_input(input_id = 'demo', raw_text = 'This is a test')\n")),(0,i.kt)("h4",{id:"get_text_input_from_csvcsv_path-dataset_idnone-labelstrue"},"get_text_input_from_csv(csv_path, dataset_id=None, labels=True)"),(0,i.kt)("p",null,"Create input proto for text data type from cscv."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Parameters:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"csv_path")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 Path to the csv file."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"dataset_id")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 The dataset ID for the dataset to add the input to."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"labels")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 True if csv file has labels column."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Returns:"),"\nList of inputs"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Return type:"),"\ninputs")),(0,i.kt)("h4",{id:"example-31"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-pycon"},">>> from clarifai.client.input import Input\n>>> input_obj = Input()\n>>> input_protos = input_obj.get_text_input_from_csv(csv_path = 'filepath')\n")),(0,i.kt)("h4",{id:"get_text_inputs_from_folderfolder_path-dataset_idnone-labelsfalse"},"get_text_inputs_from_folder(folder_path, dataset_id=None, labels=False)"),(0,i.kt)("p",null,"Create input protos for text data type from folder."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Parameters:"),(0,i.kt)("strong",{parentName:"li"},"folder_path")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 Path to the folder containing text."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Returns:"),"\nA list of Input objects for the specified folder."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Return type:"),"\nlist of Input")),(0,i.kt)("h4",{id:"example-32"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-pycon"},">>> from clarifai.client.input import Input\n>>> input_obj = Input()\n>>> input_protos = input_obj.get_text_inputs_from_folder(folder_path='demo_folder')\n")),(0,i.kt)("h4",{id:"list_inputs"},"list_inputs()"),(0,i.kt)("p",null,"Lists all the inputs for the app."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Returns:"),"\nA list of Input objects for the app."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Return type:"),"\nlist of Input")),(0,i.kt)("h4",{id:"example-33"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-pycon"},'>>> from clarifai.client.user import User\n>>> input_obj = User(user_id="user_id").app(app_id="app_id").inputs()\n>>> input_obj.list_inputs()\n')),(0,i.kt)("h4",{id:"upload_annotationsbatch_annot-show_logtrue"},"upload_annotations(batch_annot, show_log=True)"),(0,i.kt)("p",null,"Upload image annotations to app."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Parameters:"),(0,i.kt)("strong",{parentName:"li"},"batch_annot")," (",(0,i.kt)("inlineCode",{parentName:"li"},"List"),"[",(0,i.kt)("inlineCode",{parentName:"li"},"Annotation"),"]",") \u2013 annot batch protos"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Returns:"),"\nfailed annot upload"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Return type:"),"\nretry_upload")),(0,i.kt)("h4",{id:"upload_from_bytesinput_id-image_bytesnone-video_bytesnone-audio_bytesnone-dataset_idnone-kwargs"},"upload_from_bytes(input_id, image_bytes=None, video_bytes=None, audio_bytes=None, dataset_id=None, ","*","*","kwargs)"),(0,i.kt)("p",null,"Upload input from bytes."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Parameters:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"input_id")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 The input ID for the input to create."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"image_bytes")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 The bytes for the image."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"video_bytes")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 The bytes for the video."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"audio_bytes")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 The bytes for the audio."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"dataset_id")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 The dataset ID for the dataset to add the input to."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Returns:"),"\njob id for the upload request."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Return type:"),"\ninput_job_id")),(0,i.kt)("h4",{id:"example-34"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-pycon"},">>> from clarifai.client.input import Input\n>>> input_obj = Input(user_id = 'user_id', app_id = 'demo_app')\n>>> image = open('demo.jpg', 'rb').read()\n>>> input_obj.upload_from_bytes(input_id='demo', image_bytes=image)\n")),(0,i.kt)("h4",{id:"upload_from_fileinput_id-image_filenone-video_filenone-audio_filenone-dataset_idnone-kwargs"},"upload_from_file(input_id, image_file=None, video_file=None, audio_file=None, dataset_id=None, ","*","*","kwargs)"),(0,i.kt)("p",null,"Upload input from file."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Parameters:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"input_id")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 The input ID for the input to create."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"image_file")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 The file for the image."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"video_file")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 The file for the video."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"audio_file")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 The file for the audio."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"dataset_id")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 The dataset ID for the dataset to add the input to."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Returns:"),"\njob id for the upload request."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Return type:"),"\ninput_job_id")),(0,i.kt)("h4",{id:"example-35"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-pycon"},">>> from clarifai.client.input import Input\n>>> input_obj = Input(user_id = 'user_id', app_id = 'demo_app')\n>>> input_obj.upload_from_file(input_id='demo', audio_file='demo.mp3')\n")),(0,i.kt)("h4",{id:"upload_from_urlinput_id-image_urlnone-video_urlnone-audio_urlnone-text_urlnone-dataset_idnone-kwargs"},"upload_from_url(input_id, image_url=None, video_url=None, audio_url=None, text_url=None, dataset_id=None, ","*","*","kwargs)"),(0,i.kt)("p",null,"Upload input from url."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Parameters:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"input_id")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 The input ID for the input to create."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"image_url")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 The url for the image."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"video_url")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 The url for the video."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"audio_url")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 The url for the audio."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"text_url")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 The url for the text."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"dataset_id")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 The dataset ID for the dataset to add the input to."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Returns:"),"\njob id for the upload request."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Return type:"),"\ninput_job_id")),(0,i.kt)("h4",{id:"example-36"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-pycon"},">>> from clarifai.client.input import Input\n>>> input_obj = Input(user_id = 'user_id', app_id = 'demo_app')\n>>> input_obj.upload_from_url(input_id='demo', image_url='https://samples.clarifai.com/metro-north.jpg')\n")),(0,i.kt)("h4",{id:"upload_inputsinputs-show_logtrue"},"upload_inputs(inputs, show_log=True)"),(0,i.kt)("p",null,"Upload list of input objects to the app."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Parameters:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"inputs")," (",(0,i.kt)("em",{parentName:"li"},"list"),") \u2013 List of input objects to upload."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"show_log")," (",(0,i.kt)("em",{parentName:"li"},"bool"),") \u2013 Show upload status log."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Returns:"),"\njob id for the upload request."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Return type:"),"\ninput_job_id")),(0,i.kt)("h4",{id:"upload_textinput_id-raw_text-dataset_idnone-kwargs"},"upload_text(input_id, raw_text, dataset_id=None, ","*","*","kwargs)"),(0,i.kt)("p",null,"Upload text from raw text."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Parameters:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"input_id")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 The input ID for the input to create."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"raw_text")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 The raw text."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"dataset_id")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 The dataset ID for the dataset to add the input to."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Returns:"),"\njob id for the upload request."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Return type:"),"\ninput_job_id (str)")),(0,i.kt)("h4",{id:"example-37"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-pycon"},">>> from clarifai.client.input import Input\n>>> input_obj = Input(user_id = 'user_id', app_id = 'demo_app')\n>>> input_obj.upload_text(input_id = 'demo', raw_text = 'This is a test')\n")),(0,i.kt)("h2",{id:"lister"},"Lister"),(0,i.kt)("h3",{id:"class-listerpage_size16"},(0,i.kt)("em",{parentName:"h3"},"class")," Lister(page_size=16)"),(0,i.kt)("p",null,"Lister class for obtaining paginated results from the Clarifai API."),(0,i.kt)("h4",{id:"__init__page_size16"},"_","_","init_","_","(page_size=16)"),(0,i.kt)("h4",{id:"list_all_pages_generatorendpoint-proto_message-request_data"},"list_all_pages_generator(endpoint, proto_message, request_data)"),(0,i.kt)("p",null,"Lists all pages of a resource."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Parameters:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"endpoint")," (",(0,i.kt)("em",{parentName:"li"},"Callable"),") \u2013 The endpoint to call."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"proto_message")," (",(0,i.kt)("em",{parentName:"li"},"Any"),") \u2013 The proto message to use."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"request_data")," (",(0,i.kt)("em",{parentName:"li"},"dict"),") \u2013 The request data to use."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Yields:"),(0,i.kt)("em",{parentName:"li"},"response_dict")," \u2013 The next item in the listing."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Return type:"),(0,i.kt)("inlineCode",{parentName:"li"},"Generator"),"[",(0,i.kt)("inlineCode",{parentName:"li"},"Dict"),"[",(0,i.kt)("inlineCode",{parentName:"li"},"str"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"Any"),"]",", ",(0,i.kt)("inlineCode",{parentName:"li"},"None"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"None"),"]")),(0,i.kt)("h2",{id:"model"},"Model"),(0,i.kt)("h3",{id:"class-modelurl_init-model_id-model_versionid--output_configmin_value-0-kwargs"},(0,i.kt)("em",{parentName:"h3"},"class")," Model(url_init='', model_id='', model_version={'id': ''}, output_config={'min_value': 0}, ","*","*","kwargs)"),(0,i.kt)("p",null,"Model is a class that provides access to Clarifai API endpoints related to Model information."),(0,i.kt)("h4",{id:"__init__url_init-model_id-model_versionid--output_configmin_value-0-kwargs"},"_","_","init_","_","(url_init='', model_id='', model_version={'id': ''}, output_config={'min_value': 0}, ","*","*","kwargs)"),(0,i.kt)("p",null,"Initializes a Model object."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Parameters:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"url_init")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 The URL to initialize the model object."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"model_id")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 The Model ID to interact with."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"model_version")," (",(0,i.kt)("em",{parentName:"li"},"dict"),") \u2013 The Model Version to interact with."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"output_config")," (",(0,i.kt)("em",{parentName:"li"},"dict"),") \u2013 The output config to interact with.\nmin_value (float): The minimum value of the prediction confidence to filter.\nmax_concepts (int): The maximum number of concepts to return.\nselect_concepts (list","[Concept]","): The concepts to select.\nsample_ms (int): The number of milliseconds to sample."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"*","*","kwargs")," \u2013 Additional keyword arguments to be passed to the ClarifaiAuthHelper.")))),(0,i.kt)("h4",{id:"list_versions"},"list_versions()"),(0,i.kt)("p",null,"Lists all the versions for the model."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Returns:"),"\nA list of Model objects for the versions of the model."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Return type:"),"\nList[",(0,i.kt)("a",{parentName:"li",href:"#clarifai.client.model.Model"},"Model"),"]")),(0,i.kt)("h4",{id:"example-38"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-pycon"},">>> from clarifai.client.model import Model\n>>> model = Model(\"model_url\") # Example URL: https://clarifai.com/clarifai/main/models/general-image-recognition\n            or\n>>> model = Model(model_id='model_id', user_id='user_id', app_id='app_id')\n>>> all_model_versions = model.list_versions()\n")),(0,i.kt)("h4",{id:"predictinputs"},"predict(inputs)"),(0,i.kt)("p",null,"Predicts the model based on the given inputs."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Parameters:"),(0,i.kt)("strong",{parentName:"li"},"inputs")," (",(0,i.kt)("em",{parentName:"li"},"list",(0,i.kt)("strong",{parentName:"em"},"["),"Input**]"),") \u2013 The inputs to predict, must be less than 128.")),(0,i.kt)("h4",{id:"predict_by_bytesinput_bytes-input_type"},"predict_by_bytes(input_bytes, input_type)"),(0,i.kt)("p",null,"Predicts the model based on the given bytes."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Parameters:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"input_bytes")," (",(0,i.kt)("em",{parentName:"li"},"bytes"),") \u2013 File Bytes to predict on."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"input_type")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 The type of input. Can be \u2018image\u2019, \u2018text\u2019, \u2018video\u2019 or \u2018audio\u2019.")))),(0,i.kt)("h4",{id:"example-39"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-pycon"},">>> from clarifai.client.model import Model\n>>> model = Model(\"https://clarifai.com/anthropic/completion/models/claude-v2\")\n>>> model_prediction = model.predict_by_bytes(b'Write a tweet on future of AI', 'text')\n")),(0,i.kt)("h4",{id:"predict_by_filepathfilepath-input_type"},"predict_by_filepath(filepath, input_type)"),(0,i.kt)("p",null,"Predicts the model based on the given filepath."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Parameters:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"filepath")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 The filepath to predict."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"input_type")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 The type of input. Can be \u2018image\u2019, \u2018text\u2019, \u2018video\u2019 or \u2018audio.")))),(0,i.kt)("h4",{id:"example-40"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-pycon"},">>> from clarifai.client.model import Model\n>>> model = Model(\"model_url\") # Example URL: https://clarifai.com/clarifai/main/models/general-image-recognition\n            or\n>>> model = Model(model_id='model_id', user_id='user_id', app_id='app_id')\n>>> model_prediction = model.predict_by_filepath('/path/to/image.jpg', 'image')\n>>> model_prediction = model.predict_by_filepath('/path/to/text.txt', 'text')\n")),(0,i.kt)("h4",{id:"predict_by_urlurl-input_type"},"predict_by_url(url, input_type)"),(0,i.kt)("p",null,"Predicts the model based on the given URL."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Parameters:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"url")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 The URL to predict."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"input_type")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 The type of input. Can be \u2018image\u2019, \u2018text\u2019, \u2018video\u2019 or \u2018audio.")))),(0,i.kt)("h4",{id:"example-41"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-pycon"},">>> from clarifai.client.model import Model\n>>> model = Model(\"model_url\") # Example URL: https://clarifai.com/clarifai/main/models/general-image-recognition\n            or\n>>> model = Model(model_id='model_id', user_id='user_id', app_id='app_id')\n>>> model_prediction = model.predict_by_url('url', 'image')\n")),(0,i.kt)("h2",{id:"workflow"},"Workflow"),(0,i.kt)("h3",{id:"class-workflowurl_init-workflow_id-workflow_versionid--output_configmin_value-0-kwargs"},(0,i.kt)("em",{parentName:"h3"},"class")," Workflow(url_init='', workflow_id='', workflow_version={'id': ''}, output_config={'min_value': 0}, ","*","*","kwargs)"),(0,i.kt)("p",null,"Workflow is a class that provides access to Clarifai API endpoints related to Workflow information."),(0,i.kt)("h4",{id:"__init__url_init-workflow_id-workflow_versionid--output_configmin_value-0-kwargs"},"_","_","init_","_","(url_init='', workflow_id='', workflow_version={'id': ''}, output_config={'min_value': 0}, ","*","*","kwargs)"),(0,i.kt)("p",null,"Initializes a Workflow object."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Parameters:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"url_init")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 The URL to initialize the workflow object."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"workflow_id")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 The Workflow ID to interact with."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"workflow_version")," (",(0,i.kt)("em",{parentName:"li"},"dict"),") \u2013 The Workflow Version to interact with."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"output_config")," (",(0,i.kt)("em",{parentName:"li"},"dict"),") \u2013 The output config to interact with.\nmin_value (float): The minimum value of the prediction confidence to filter.\nmax_concepts (int): The maximum number of concepts to return.\nselect_concepts (list","[Concept]","): The concepts to select.\nsample_ms (int): The number of milliseconds to sample."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"*","*","kwargs")," \u2013 Additional keyword arguments to be passed to the ClarifaiAuthHelper.")))),(0,i.kt)("h4",{id:"list_versions-1"},"list_versions()"),(0,i.kt)("p",null,"Lists all the versions of the workflow."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Returns:"),"\nA list of Workflow objects."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Return type:"),"\nlist[",(0,i.kt)("a",{parentName:"li",href:"#clarifai.client.workflow.Workflow"},"Workflow"),"]")),(0,i.kt)("h4",{id:"example-42"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-pycon"},">>> from clarifai.client.workflow import Workflow\n>>> workflow = Workflow(user_id='user_id', app_id='app_id', workflow_id='workflow_id')\n>>> workflow_versions = workflow.list_versions()\n")),(0,i.kt)("h4",{id:"predictinputs-1"},"predict(inputs)"),(0,i.kt)("p",null,"Predicts the workflow based on the given inputs."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Parameters:"),(0,i.kt)("strong",{parentName:"li"},"inputs")," (",(0,i.kt)("em",{parentName:"li"},"list",(0,i.kt)("strong",{parentName:"em"},"["),"Input**]"),") \u2013 The inputs to predict.")),(0,i.kt)("h4",{id:"predict_by_bytesinput_bytes-input_type-1"},"predict_by_bytes(input_bytes, input_type)"),(0,i.kt)("p",null,"Predicts the workflow based on the given bytes."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Parameters:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"input_bytes")," (",(0,i.kt)("em",{parentName:"li"},"bytes"),") \u2013 Bytes to predict on."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"input_type")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 The type of input. Can be \u2018image\u2019, \u2018text\u2019, \u2018video\u2019 or \u2018audio.")))),(0,i.kt)("h4",{id:"predict_by_filepathfilepath-input_type-1"},"predict_by_filepath(filepath, input_type)"),(0,i.kt)("p",null,"Predicts the workflow based on the given filepath."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Parameters:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"filepath")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 The filepath to predict."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"input_type")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 The type of input. Can be \u2018image\u2019, \u2018text\u2019, \u2018video\u2019 or \u2018audio.")))),(0,i.kt)("h4",{id:"example-43"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-pycon"},">>> from clarifai.client.workflow import Workflow\n>>> workflow = Workflow(\"workflow_url\") # Example: https://clarifai.com/clarifai/main/workflows/Face-Sentiment\n              or\n>>> workflow = Workflow(user_id='user_id', app_id='app_id', workflow_id='workflow_id')\n>>> workflow_prediction = workflow.predict_by_filepath('filepath', 'image')\n")),(0,i.kt)("h4",{id:"predict_by_urlurl-input_type-1"},"predict_by_url(url, input_type)"),(0,i.kt)("p",null,"Predicts the workflow based on the given URL."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Parameters:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"url")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 The URL to predict."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"input_type")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 The type of input. Can be \u2018image\u2019, \u2018text\u2019, \u2018video\u2019 or \u2018audio.")))),(0,i.kt)("h4",{id:"example-44"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-pycon"},">>> from clarifai.client.workflow import Workflow\n>>> workflow = Workflow(\"workflow_url\") # Example: https://clarifai.com/clarifai/main/workflows/Face-Sentiment\n              or\n>>> workflow = Workflow(user_id='user_id', app_id='app_id', workflow_id='workflow_id')\n>>> workflow_prediction = workflow.predict_by_url('url', 'image')\n")),(0,i.kt)("h2",{id:"module"},"Module"),(0,i.kt)("h3",{id:"class-moduleurl_init-module_id-module_versionid--kwargs"},(0,i.kt)("em",{parentName:"h3"},"class")," Module(url_init='', module_id='', module_version={'id': ''}, ","*","*","kwargs)"),(0,i.kt)("p",null,"Module is a class that provides access to Clarifai API endpoints related to Module information."),(0,i.kt)("h4",{id:"__init__url_init-module_id-module_versionid--kwargs"},"_","_","init_","_","(url_init='', module_id='', module_version={'id': ''}, ","*","*","kwargs)"),(0,i.kt)("p",null,"Initializes a Module object."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Parameters:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"url_init")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 The URL to initialize the module object."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"module_id")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 The Module ID to interact with."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"module_version")," (",(0,i.kt)("em",{parentName:"li"},"dict"),") \u2013 The Module Version to interact with."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"*","*","kwargs")," \u2013 Additional keyword arguments to be passed to the ClarifaiAuthHelper.")))),(0,i.kt)("h4",{id:"list_versions-2"},"list_versions()"),(0,i.kt)("p",null,"Lists all the module versions for the module."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Returns:"),"\nA list of Module objects for versions of the module."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Return type:"),"\nList","[Moudle]")),(0,i.kt)("h4",{id:"example-45"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-pycon"},">>> from clarifai.client.module import Module\n>>> module = Module(module_id='module_id', user_id='user_id', app_id='app_id')\n>>> all_Module_versions = module.list_versions()\n")),(0,i.kt)("h2",{id:"utils"},"Utils"),(0,i.kt)("h3",{id:"class-chunkerseq-size"},(0,i.kt)("em",{parentName:"h3"},"class")," Chunker(seq, size)"),(0,i.kt)("p",null,"Split an input sequence into small chunks."),(0,i.kt)("h4",{id:"__init__seq-size"},"_","_","init_","_","(seq, size)"),(0,i.kt)("h4",{id:"chunk"},"chunk()"),(0,i.kt)("p",null,"Chunk input sequence."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Return type:"),(0,i.kt)("inlineCode",{parentName:"li"},"List"),"[",(0,i.kt)("inlineCode",{parentName:"li"},"List"),"]")),(0,i.kt)("h2",{id:"exceptions"},"Exceptions"),(0,i.kt)("h3",{id:"class-apierrorresource-params-method-responsenone"},(0,i.kt)("em",{parentName:"h3"},"class")," ApiError(resource, params, method, response=None)"),(0,i.kt)("p",null,"API Server error"),(0,i.kt)("h4",{id:"__init__resource-params-method-responsenone"},"_","_","init_","_","(resource, params, method, response=None)"),(0,i.kt)("h3",{id:"class-apiclienterror"},(0,i.kt)("em",{parentName:"h3"},"class")," ApiClientError"),(0,i.kt)("p",null,"API Client Error"),(0,i.kt)("h3",{id:"class-usererror"},(0,i.kt)("em",{parentName:"h3"},"class")," UserError"))}d.isMDXComponent=!0}}]);
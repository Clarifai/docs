"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[9873],{85162:function(n,e,t){t.d(e,{Z:function(){return r}});var a=t(67294),o=t(34334),s="tabItem_Ymn6";function r(n){let{children:e,hidden:t,className:r}=n;return a.createElement("div",{role:"tabpanel",className:(0,o.Z)(s,r),hidden:t},e)}},65488:function(n,e,t){t.d(e,{Z:function(){return h}});var a=t(83117),o=t(67294),s=t(34334),r=t(72389),i=t(67392),l=t(7094),u=t(12466),c="tabList__CuJ",d="tabItem_LNqP";function p(n){var e,t;const{lazy:r,block:p,defaultValue:h,values:m,groupId:f,className:b}=n,k=o.Children.map(n.children,(n=>{if((0,o.isValidElement)(n)&&"value"in n.props)return n;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof n.type?n.type:n.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),_=null!=m?m:k.map((n=>{let{props:{value:e,label:t,attributes:a}}=n;return{value:e,label:t,attributes:a}})),T=(0,i.l)(_,((n,e)=>n.value===e.value));if(T.length>0)throw new Error('Docusaurus error: Duplicate values "'+T.map((n=>n.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const v=null===h?h:null!=(e=null!=h?h:null==(t=k.find((n=>n.props.default)))?void 0:t.props.value)?e:k[0].props.value;if(null!==v&&!_.some((n=>n.value===v)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+v+'" but none of its children has the corresponding value. Available values are: '+_.map((n=>n.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:E,setTabGroupChoices:g}=(0,l.U)(),[I,D]=(0,o.useState)(v),P=[],{blockElementScrollPositionUntilNextRender:N}=(0,u.o5)();if(null!=f){const n=E[f];null!=n&&n!==I&&_.some((e=>e.value===n))&&D(n)}const w=n=>{const e=n.currentTarget,t=P.indexOf(e),a=_[t].value;a!==I&&(N(e),D(a),null!=f&&g(f,String(a)))},A=n=>{var e;let t=null;switch(n.key){case"ArrowRight":{var a;const e=P.indexOf(n.currentTarget)+1;t=null!=(a=P[e])?a:P[0];break}case"ArrowLeft":{var o;const e=P.indexOf(n.currentTarget)-1;t=null!=(o=P[e])?o:P[P.length-1];break}}null==(e=t)||e.focus()};return o.createElement("div",{className:(0,s.Z)("tabs-container",c)},o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":p},b)},_.map((n=>{let{value:e,label:t,attributes:r}=n;return o.createElement("li",(0,a.Z)({role:"tab",tabIndex:I===e?0:-1,"aria-selected":I===e,key:e,ref:n=>P.push(n),onKeyDown:A,onFocus:w,onClick:w},r,{className:(0,s.Z)("tabs__item",d,null==r?void 0:r.className,{"tabs__item--active":I===e})}),null!=t?t:e)}))),r?(0,o.cloneElement)(k.filter((n=>n.props.value===I))[0],{className:"margin-top--md"}):o.createElement("div",{className:"margin-top--md"},k.map(((n,e)=>(0,o.cloneElement)(n,{key:e,hidden:n.props.value!==I})))))}function h(n){const e=(0,r.Z)();return o.createElement(p,(0,a.Z)({key:String(e)},n))}},83369:function(n,e,t){t.r(e),t.d(e,{assets:function(){return d},contentTitle:function(){return u},default:function(){return m},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return p}});var a=t(83117),o=(t(67294),t(3905)),s=t(65488),r=t(85162),i=t(66066);const l={description:"This is a page about performing task annotations with the Clarifai API.",sidebar_position:5},u="Task Annotations",c={unversionedId:"api-guide/annotate/task-annotations",id:"api-guide/annotate/task-annotations",title:"Task Annotations",description:"This is a page about performing task annotations with the Clarifai API.",source:"@site/docs/api-guide/annotate/task-annotations.md",sourceDirName:"api-guide/annotate",slug:"/api-guide/annotate/task-annotations",permalink:"/api-guide/annotate/task-annotations",draft:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{description:"This is a page about performing task annotations with the Clarifai API.",sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Tasks",permalink:"/api-guide/annotate/tasks"},next:{title:"Creating and Training Models",permalink:"/api-guide/model/"}},d={},p=[],h={toc:p};function m(n){let{components:e,...t}=n;return(0,o.kt)("wrapper",(0,a.Z)({},h,t,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"task-annotations"},"Task Annotations"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Perform task annotations")),(0,o.kt)("hr",null),(0,o.kt)("p",null,"In order to keep track of each user's work assigned to a task, all the annotations of this user related to this task should be linked to the task ID."),(0,o.kt)("p",null,"Therefore, when a user creates an annotation, the task ID should be provided as below:"),(0,o.kt)(s.Z,{mdxType:"Tabs"},(0,o.kt)(r.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,o.kt)(i.Z,{className:"language-bash",mdxType:"CodeBlock"},'curl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/annotations" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n      "annotations": [\n        {\n          "input_id": "INPUT_ID_HERE",\n          "data": {\n            "concepts": [\n              {\n                "id": "tree",\n                "value": 1\n              },\n              {\n                "id": "water",\n                "value": 0\n              }\n            ]\n          },\n          "annotation_info": {\n            "task_id": "TASK_ID_HERE"\n          }\n        }\n      ]\n    }\'')),(0,o.kt)(r.Z,{value:"js_rest",label:"JavaScript (REST)",mdxType:"TabItem"},(0,o.kt)(i.Z,{className:"language-javascript",mdxType:"CodeBlock"},'\x3c!--index.html file--\x3e\n\n<script>\n    //////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the details for\n    // performing task annotations. Change these strings to run your own example.\n    /////////////////////////////////////////////////////////////////////////////////\n  \n    const USER_ID = \'YOUR_USER_ID_HERE\';\n    // Your PAT (Personal Access Token) can be found in the portal under Authentification\n    const PAT = \'YOUR_PAT_HERE\';\n    const APP_ID = \'YOUR_APP_ID_HERE\';\n    // Change these to perform your own task annotations  \n    const INPUT_ID = \'c99f1b557d1d43d1916b46f8ce4a0487\';\n    const CONCEPT_ID_1 = \'tree\';\n    const CONCEPT_ID_2 = \'water\';\n    const TASK_ID = \'c37aed156e474e03bb5246576d9f48fd\';\n  \n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n  \n    const raw = JSON.stringify({\n      "user_app_id": {\n        "user_id": USER_ID,\n        "app_id": APP_ID\n      },\n      "annotations": [\n        {\n          "input_id": INPUT_ID,\n          "data": {\n            "concepts": [\n              {\n                "id": CONCEPT_ID_1,\n                "value": 1\n              },\n              {\n                "id": CONCEPT_ID_2,\n                "value": 0\n              }\n            ]\n          },\n          "annotation_info": {\n            "task_id": TASK_ID\n          }\n        }\n      ]\n    });\n  \n    const requestOptions = {\n      method: \'POST\',\n      headers: {\n        \'Accept\': \'application/json\',\n        \'Authorization\': \'Key \' + PAT\n      },\n      body: raw\n    };\n  \n    fetch("https://api.clarifai.com/v2/annotations", requestOptions)\n      .then(response => response.text())\n      .then(result => console.log(result))\n      .catch(error => console.log(\'error\', error));\n  \n  <\/script>'))))}m.isMDXComponent=!0}}]);
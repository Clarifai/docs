"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[7656],{7705:(n,e,t)=>{t.d(e,{A:()=>s});const s=t.p+"assets/images/custom-transfer-text-model-2-5ae67fb1945fb25e08a43155e7856133.png"},19906:(n,e,t)=>{t.d(e,{A:()=>s});const s=t.p+"assets/images/text-create-model-2-36ada19287d08930dd164ed48754320d.png"},41881:(n,e,t)=>{t.d(e,{A:()=>s});const s=t.p+"assets/images/text-add-dataset-0464f4fd9b5e09d3b949028db798fa88.png"},42992:(n,e,t)=>{t.d(e,{A:()=>s});const s=t.p+"assets/images/text-upload-inputs-2-2-2b7269ca7d9a5962f215cb9f90f61415.png"},43170:(n,e,t)=>{t.d(e,{A:()=>s});const s=t.p+"assets/images/custom-transfer-text-model-1-9dacda52baf93aa2bb2a735617dbce07.png"},55546:(n,e,t)=>{t.d(e,{A:()=>s});const s=t.p+"assets/images/text-upload-inputs-1-d83f365086066d0a4d56ad29fce2909d.png"},61870:(n,e,t)=>{t.d(e,{A:()=>s});const s=t.p+"assets/images/text-model-mode-c7a0c2b8a0b3f7b97c703c43eee96bb5.png"},65537:(n,e,t)=>{t.d(e,{A:()=>y});var s=t(96540),r=t(18215),a=t(65627),o=t(56347),i=t(50372),l=t(30604),p=t(11861),c=t(78749);function d(n){return s.Children.toArray(n).filter((n=>"\n"!==n)).map((n=>{if(!n||(0,s.isValidElement)(n)&&function(n){const{props:e}=n;return!!e&&"object"==typeof e&&"value"in e}(n))return n;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof n.type?n.type:n.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(n){const{values:e,children:t}=n;return(0,s.useMemo)((()=>{const n=e??function(n){return d(n).map((n=>{let{props:{value:e,label:t,attributes:s,default:r}}=n;return{value:e,label:t,attributes:s,default:r}}))}(t);return function(n){const e=(0,p.XI)(n,((n,e)=>n.value===e.value));if(e.length>0)throw new Error(`Docusaurus error: Duplicate values "${e.map((n=>n.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(n),n}),[e,t])}function u(n){let{value:e,tabValues:t}=n;return t.some((n=>n.value===e))}function _(n){let{queryString:e=!1,groupId:t}=n;const r=(0,o.W6)(),a=function(n){let{queryString:e=!1,groupId:t}=n;if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:e,groupId:t});return[(0,l.aZ)(a),(0,s.useCallback)((n=>{if(!a)return;const e=new URLSearchParams(r.location.search);e.set(a,n),r.replace({...r.location,search:e.toString()})}),[a,r])]}function f(n){const{defaultValue:e,queryString:t=!1,groupId:r}=n,a=h(n),[o,l]=(0,s.useState)((()=>function(n){let{defaultValue:e,tabValues:t}=n;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!u({value:e,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${t.map((n=>n.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const s=t.find((n=>n.default))??t[0];if(!s)throw new Error("Unexpected error: 0 tabValues");return s.value}({defaultValue:e,tabValues:a}))),[p,d]=_({queryString:t,groupId:r}),[f,m]=function(n){let{groupId:e}=n;const t=function(n){return n?`docusaurus.tab.${n}`:null}(e),[r,a]=(0,c.Dv)(t);return[r,(0,s.useCallback)((n=>{t&&a.set(n)}),[t,a])]}({groupId:r}),g=(()=>{const n=p??f;return u({value:n,tabValues:a})?n:null})();(0,i.A)((()=>{g&&l(g)}),[g]);return{selectedValue:o,selectValue:(0,s.useCallback)((n=>{if(!u({value:n,tabValues:a}))throw new Error(`Can't select invalid tab value=${n}`);l(n),d(n),m(n)}),[d,m,a]),tabValues:a}}var m=t(9136);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var v=t(74848);function x(n){let{className:e,block:t,selectedValue:s,selectValue:o,tabValues:i}=n;const l=[],{blockElementScrollPositionUntilNextRender:p}=(0,a.a_)(),c=n=>{const e=n.currentTarget,t=l.indexOf(e),r=i[t].value;r!==s&&(p(e),o(r))},d=n=>{let e=null;switch(n.key){case"Enter":c(n);break;case"ArrowRight":{const t=l.indexOf(n.currentTarget)+1;e=l[t]??l[0];break}case"ArrowLeft":{const t=l.indexOf(n.currentTarget)-1;e=l[t]??l[l.length-1];break}}e?.focus()};return(0,v.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":t},e),children:i.map((n=>{let{value:e,label:t,attributes:a}=n;return(0,v.jsx)("li",{role:"tab",tabIndex:s===e?0:-1,"aria-selected":s===e,ref:n=>{l.push(n)},onKeyDown:d,onClick:c,...a,className:(0,r.A)("tabs__item",g.tabItem,a?.className,{"tabs__item--active":s===e}),children:t??e},e)}))})}function b(n){let{lazy:e,children:t,selectedValue:a}=n;const o=(Array.isArray(t)?t:[t]).filter(Boolean);if(e){const n=o.find((n=>n.props.value===a));return n?(0,s.cloneElement)(n,{className:(0,r.A)("margin-top--md",n.props.className)}):null}return(0,v.jsx)("div",{className:"margin-top--md",children:o.map(((n,e)=>(0,s.cloneElement)(n,{key:e,hidden:n.props.value!==a})))})}function j(n){const e=f(n);return(0,v.jsxs)("div",{className:(0,r.A)("tabs-container",g.tabList),children:[(0,v.jsx)(x,{...e,...n}),(0,v.jsx)(b,{...e,...n})]})}function y(n){const e=(0,m.A)();return(0,v.jsx)(j,{...n,children:d(n.children)},String(e))}},69563:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>L,contentTitle:()=>k,default:()=>H,frontMatter:()=>R,metadata:()=>s,toc:()=>M});const s=JSON.parse('{"id":"create/models/transfer-learning/text-classifier","title":"Text Classifier","description":"Learn how to use transfer learning to create custom text classifier models","source":"@site/docs/create/models/transfer-learning/text-classifier.md","sourceDirName":"create/models/transfer-learning","slug":"/create/models/transfer-learning/text-classifier","permalink":"/create/models/transfer-learning/text-classifier","draft":false,"unlisted":false,"editUrl":"https://github.com/Clarifai/docs/blob/main/docs/create/models/transfer-learning/text-classifier.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"description":"Learn how to use transfer learning to create custom text classifier models","sidebar_position":1,"toc_max_heading_level":4},"sidebar":"tutorialSidebar","previous":{"title":"Transfer Learning","permalink":"/create/models/transfer-learning/"},"next":{"title":"Visual Classifier","permalink":"/create/models/transfer-learning/visual-classifier"}}');var r=t(74848),a=t(28453),o=t(65537),i=t(79329),l=t(58069);const p='from clarifai.client.user import User\n#replace your "user_id"\nclient = User(user_id="user_id")\napp = client.create_app(app_id="demo_train", base_workflow="Universal")',c="#importing load_module_dataloader for calling the dataloader object in dataset.py in the local data folder\nfrom clarifai.datasets.upload.utils import load_module_dataloader\n\n\n# Construct the path to the dataset folder\nCSV_PATH = os.path.join(os.getcwd().split('/models/model_train')[0],'datasets/upload/data/imdb.csv')\n\n\n# Create a Clarifai dataset with the specified dataset_id \ndataset = app.create_dataset(dataset_id=\"text_dataset\")\n# Upload the dataset using the provided dataloader and get the upload status\ndataset.upload_from_csv(csv_path=CSV_PATH,input_type='text',csv_type='raw', labels=True)",d="print(app.list_trainable_model_types())",h='MODEL_ID = "model_text_embedder"\nMODEL_TYPE_ID = "embedding-classifier"\n\n# Create a model by passing the model name and model type as parameter\nmodel = app.create_model(model_id=MODEL_ID, model_type_id=MODEL_TYPE_ID)\n',u='# get the model params for default template\nmodel_params = model.get_params()\nconcepts = [concept.id for concept in app.list_concepts()]\n# update the concept field in model_params\nmodel.update_params(dataset_id = \'text_dataset\',concepts = ["id-pos","id-neg"])\n',_='import time\n#Starting the training\nmodel_version_id = model.train()\n\n#Checking the status of training\nwhile True:\n    status = model.training_status(version_id=model_version_id,training_logs=False)\n    if status.code == 21106: #MODEL_TRAINING_FAILED\n        print(status)\n        break\n    elif status.code == 21100: #MODEL_TRAINED\n        print(status)\n        break\n    else:\n        print("Current Status:",status)\n        print("Waiting---")\n        time.sleep(120)',f="# Get the predictions\nTEXT = b\"This is a great place to work\"\nmodel_prediction = model.predict_by_bytes(TEXT, input_type=\"text\")\n\n# Get the output\nprint('Input: ',TEXT)\nfor concept in model_prediction.outputs[0].data.concepts:\n    print(concept.id,':',round(concept.value,2))",m="# Evaluate the model using the specified dataset ID 'text_dataset' and evaluation ID 'one'.\nmodel.evaluate(dataset_id='text_dataset',eval_id='one',eval_info={\"use_kfold\":False})\n\n# Retrieve the evaluation result for the evaluation ID 'one'.\nresult = model.get_eval_by_id(eval_id=\"one\")\n\n# Print the summary of the evaluation result.\nprint(result.summary)",g="#importing load_module_dataloader for calling the dataloader object in dataset.py in the local data folder\nfrom clarifai.datasets.upload.utils import load_module_dataloader\n\n\n# Construct the path to the dataset folder\nCSV_PATH = os.path.join(os.getcwd().split('/models/model_train')[0],'datasets/upload/data/test_imdb.csv')\n\n\n# Create a Clarifai dataset with the specified dataset_id\ntest_dataset = app.create_dataset(dataset_id=\"test_text_dataset\")\n# Upload the dataset using the provided dataloader and get the upload status\ntest_dataset.upload_from_csv(csv_path=CSV_PATH,input_type='text',csv_type='raw', labels=True)\n\n# Evaluate the model using the specified test text dataset identified as 'test_text_dataset'\n# and the evaluation identifier 'two'.\nmodel.evaluate(dataset_id='test_text_dataset', eval_id='two')\n\n# Retrieve the evaluation result with the identifier 'two'.\nresult = model.get_eval_by_id(\"two\")\n\n# Print the summary of the evaluation result.\nprint(result.summary)",v="from clarifai.utils.evaluation import EvalResultCompare\n\n# Creating an instance of EvalResultCompare class with specified models and datasets\neval_result = EvalResultCompare(models=[model], datasets=[dataset, test_dataset])\n\n# Printing a detailed summary of the evaluation result\nprint(eval_result.detailed_summary())",x="['visual-classifier',\n 'visual-detector',\n 'visual-segmenter',\n 'visual-embedder',\n 'clusterer',\n 'text-classifier',\n 'embedding-classifier',\n 'text-to-text']",b="{'dataset_id': 'text_dataset',\n 'dataset_version_id': '',\n 'concepts': ['id-pos', 'id-neg'],\n 'train_params': {'base_embed_model': None, 'enrich_dataset': 'Automatic'},\n 'inference_params': {'min_value': 0.0}}\n",j="Input:  b'This is a great place to work'\n\nid-neg : 0.72\n\nid-pos : 0.28",y="macro_avg_roc_auc: 1.0\nmacro_avg_f1_score: 1.0\nmacro_avg_precision: 1.0\nmacro_avg_recall: 1.0",A="macro_avg_roc_auc: 1.0\nmacro_avg_f1_score: 1.0\nmacro_avg_precision: 1.0\nmacro_avg_recall: 1.0",E="(  Concept  Accuracy (ROC AUC)  Total Labeled  Total Predicted  True Positives  \\\n0  id-pos                 1.0             80               80              80   \n0  id-neg                 1.0            120              120             120   \n0  id-pos                 1.0             31               31              31   \n0  id-neg                 1.0             40               40              40   \n\n   False Negatives  False Positives  Recall  Precision   F1            Dataset  \n0                0                0     1.0        1.0  1.0      text_dataset2  \n0                0                0     1.0        1.0  1.0      text_dataset2  \n0                0                0     1.0        1.0  1.0  test_text_dataset  \n0                0                0     1.0        1.0  1.0  test_text_dataset  ,                Total Concept  Accuracy (ROC AUC)  Total Labeled  \\\n0      Dataset:text_dataset2                 1.0            200   \n0  Dataset:test_text_dataset                 1.0             71   \n\n   Total Predicted  True Positives  False Negatives  False Positives  Recall  \\\n0              200             200                0                0     1.0   \n0               71              71                0                0     1.0   \n\n   Precision   F1  \n0        1.0  1.0  \n0        1.0  1.0  )",w='##########################################################################\n# In this section, we set the user authentication, app ID, and negative \n# and positive texts. Change these strings to run your own example.\n##########################################################################\n\nUSER_ID = \'YOUR_USER_ID_HERE\'\n# Your PAT (Personal Access Token) can be found in the Account\'s Security section\nPAT = \'YOUR_PAT_HERE\'\nAPP_ID = \'YOUR_APP_ID_HERE\'\n# Add your own batch of texts\npositive_raw_texts = [\n    "Marie is a published author.",\n    "In three years, everyone will be happy.",\n    "Nora Roberts is the most prolific romance writer the world has ever known.",\n    "She has written more than 225 books.",\n    "If you walk into Knoxville, you\'ll find a shop named Rala.",\n    "There are more than 850 miles of hiking trails in the Great Smoky Mountains.",\n    "Harrison Ford is 6\'1\\".",\n    "According to Reader\'s Digest, in the original script of Return of The Jedi, Han Solo died.",\n    "Kate travels to Doolin, Ireland every year for a writers\' conference.",\n    "Fort Stevens was decommissioned by the United States military in 1947.",\n]\nnegative_text_urls = [\n    "https://samples.clarifai.com/negative_sentence_1.txt",\n    "https://samples.clarifai.com/negative_sentence_2.txt",\n    "https://samples.clarifai.com/negative_sentence_3.txt",\n    "https://samples.clarifai.com/negative_sentence_4.txt",\n    "https://samples.clarifai.com/negative_sentence_5.txt",\n    "https://samples.clarifai.com/negative_sentence_6.txt",\n    "https://samples.clarifai.com/negative_sentence_7.txt",\n    "https://samples.clarifai.com/negative_sentence_8.txt",\n    "https://samples.clarifai.com/negative_sentence_9.txt",\n    "https://samples.clarifai.com/negative_sentence_10.txt",\n]\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = ((\'authorization\', \'Key \' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\npost_inputs_response = stub.PostInputs(\n    service_pb2.PostInputsRequest(\n        user_app_id=userDataObject,\n        inputs=[\n            resources_pb2.Input(\n                data=resources_pb2.Data(\n                    text=resources_pb2.Text(raw=raw_text),\n                    concepts=[resources_pb2.Concept(id="positive", value=1)]\n                )\n            )\n            for raw_text in positive_raw_texts\n        ] + [\n            resources_pb2.Input(\n                data=resources_pb2.Data(\n                    text=resources_pb2.Text(\n                        url=text_url,\n                        allow_duplicate_url=True\n                    ),\n                    concepts=[resources_pb2.Concept(id="negative", value=1)]\n                )\n            )\n            for text_url in negative_text_urls\n        ]\n    ),\n    metadata=metadata\n)\n\nif post_inputs_response.status.code != status_code_pb2.SUCCESS:\n    print(post_inputs_response.status)\n    raise Exception("Failed response, status: " + post_inputs_response.status.description)\n\n# Uncomment this line to see the structure and data of the response\n#print(post_inputs_response)',D='###############################################################\n# In this section, we set the user authentication and app ID. \n# Change these strings to run your own example.\n###############################################################\n\nUSER_ID = \'YOUR_USER_ID_HERE\'\n# Your PAT (Personal Access Token) can be found in the Account\'s Security section\nPAT = \'YOUR_PAT_HERE\'\nAPP_ID = \'YOUR_APP_ID_HERE\'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\nimport time\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = ((\'authorization\', \'Key \' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\nwhile True:\n    list_inputs_response = stub.ListInputs(\n        service_pb2.ListInputsRequest(\n            user_app_id=userDataObject,\n            page=1,\n            per_page=100\n        ),\n        metadata=metadata\n    )\n    \n    if list_inputs_response.status.code != status_code_pb2.SUCCESS:\n        print(list_inputs_response.status)\n        raise Exception("Failed response, status: " + list_inputs_response.status.description)\n\n    for the_input in list_inputs_response.inputs:\n        input_status_code = the_input.status.code\n        if input_status_code == status_code_pb2.INPUT_DOWNLOAD_SUCCESS:\n            continue\n        elif input_status_code in (status_code_pb2.INPUT_DOWNLOAD_PENDING, status_code_pb2.INPUT_DOWNLOAD_IN_PROGRESS):\n            print("Not all inputs have been downloaded yet. Checking again shortly.")\n            break\n        else:\n            error_message = (\n                    str(input_status_code) + " " +\n                    the_input.status.description + " " +\n                    the_input.status.details\n            )\n            raise Exception(\n                f"Expected inputs to download, but got {error_message}. Full response: {list_inputs_response}"\n            )\n    else:\n        # Once all inputs have been successfully downloaded, break the while True loop\n        print("All inputs have been successfully downloaded.")\n        break\n    time.sleep(2)',T="################################################################################\n# In this section, we set the user authentication, app ID, and the ID of the \n# model we want to create. Change these strings to run your own example.\n################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change this to create your own custom model\nMODEL_ID = 'text-model-1' \n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\npost_models_response = stub.PostModels(\n    service_pb2.PostModelsRequest(\n        user_app_id=userDataObject,\n        models=[\n            resources_pb2.Model(\n                id=MODEL_ID\n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif post_models_response.status.code != status_code_pb2.SUCCESS:\n    print(post_models_response.status)\n    raise Exception(\"Failed response, status: \" + post_models_response.status.description)\n\n# Uncomment this line to see the structure and data of the response\n#print(post_models_response)",I="################################################################################\n# In this section, we set the user authentication, app ID, and the ID of the \n# model we want to train. Change these strings to run your own example.\n################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to train your own custom model\nMODEL_ID = 'text-model-1' \nCONCEPT_ID_1 = 'positive'\nCONCEPT_ID_2 = 'negative'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\npost_model_versions_response = stub.PostModelVersions(\n    service_pb2.PostModelVersionsRequest(\n        user_app_id=userDataObject,\n        model_id=MODEL_ID,\n        model_versions=[\n            resources_pb2.ModelVersion(\n                output_info=resources_pb2.OutputInfo(\n                    data=resources_pb2.Data(\n                        concepts=[\n                            resources_pb2.Concept(id=CONCEPT_ID_1, value=1), # 1 means true, this concept is present\n                            resources_pb2.Concept(id=CONCEPT_ID_2, value=1)\n                            ] \n                        ),\n                )\n            )]\n    ),\n    metadata=metadata\n)\n\nif post_model_versions_response.status.code != status_code_pb2.SUCCESS:\n    print(post_model_versions_response.status)\n    raise Exception(\"Failed response, status: \" + post_model_versions_response.status.description)\n\n# Uncomment this line to see the structure and data of the response\n#print(post_model_versions_response)",S="###############################################################################\n# In this section, we set the user authentication, app ID, and the ID of the \n# model to wait for its training. Change these strings to run your own example.\n################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change this to wait for your own model's training\nMODEL_ID = 'text-model-1' \n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\nimport time\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\nwhile True:\n    get_model_response = stub.GetModel(\n        service_pb2.GetModelRequest(\n             user_app_id=userDataObject,\n            model_id=MODEL_ID\n        ),\n        metadata=metadata\n    )\n    \n    if get_model_response.status.code != status_code_pb2.SUCCESS:\n        print(get_model_response.status)\n        raise Exception(\"Failed response, status: \" + get_model_response.status.description)\n\n    version_status_code = get_model_response.model.model_version.status.code\n    if version_status_code == status_code_pb2.MODEL_TRAINED:\n        print(\"The model has been successfully trained.\")\n        break\n    elif version_status_code in (status_code_pb2.MODEL_QUEUED_FOR_TRAINING, status_code_pb2.MODEL_TRAINING):\n        print(\"The model hasn't been trained yet. Trying again shortly.\")\n        time.sleep(2)\n    else:\n        error_message = (\n                str(get_model_response.status.code) + \" \" +\n                get_model_response.status.description + \" \" +\n                get_model_response.status.details\n        )\n        raise Exception(\n            f\"Expected model to train, but got {error_message}. Full response: {get_model_response}\"\n        )\n\nmodel_version_id = get_model_response.model.model_version.id\n",O="###########################################################################\n# In this section, we set the user authentication, app ID, model details, \n# and new input samples. Change these strings to run your own example.\n###########################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to make your own predictions\nMODEL_ID = 'text-model-1'\nMODEL_VERSION_ID = '49219b5968624221ac488303dde55327' \nINPUT_TEXT = 'Butchart Gardens contains over 900 varieties of plants.'\nINPUT_URL = 'https://samples.clarifai.com/negative_sentence_12.txt'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\npost_model_outputs_response = stub.PostModelOutputs(\n    service_pb2.PostModelOutputsRequest(\n        user_app_id=userDataObject,\n        model_id=MODEL_ID,\n        # By default, the latest model version will be used, but it doesn't hurt to set it explicitly\n        version_id=MODEL_VERSION_ID,\n        inputs=[\n            resources_pb2.Input(data=resources_pb2.Data(text=resources_pb2.Text(raw=INPUT_TEXT))),\n            resources_pb2.Input(data=resources_pb2.Data(text=resources_pb2.Text(url=INPUT_URL))),\n        ]\n    ),\n    metadata=metadata\n)\n\nif post_model_outputs_response.status.code != status_code_pb2.SUCCESS:\n    print(post_model_outputs_response.status)\n    raise Exception(\"Failed response, status: \" + post_model_outputs_response.status.description)\n\nfor output in post_model_outputs_response.outputs:\n    text_object = output.input.data.text\n    val = text_object.raw if text_object.raw else text_object.url\n\n    print(f\"The following concepts were predicted for the input `{val}`:\")\n    for concept in output.data.concepts:\n        print(f\"\\t{concept.name}: {concept.value:.2f}\")\n",C='###########################################################################\n# In this section, we set the user authentication, app ID, model ID,\n# and model version. Change these strings to run your own example.\n###########################################################################\n\nUSER_ID = "YOUR_USER_ID_HERE"\n# Your PAT (Personal Access Token) can be found in the Account\'s Security section\nPAT = "YOUR_PAT_HERE"\nAPP_ID = "YOUR_APP_ID_HERE"\n# Change these to make your own evaluations\nMODEL_ID = "text-model-1"\nMODEL_VERSION_ID = "3ad2c152232e46ebb16ed31f67dc54d8"\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (("authorization", "Key " + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\npost_model_evaluations = stub.PostEvaluations(\n    service_pb2.PostEvaluationsRequest(\n        user_app_id=userDataObject,\n        eval_metrics=[\n            resources_pb2.EvalMetrics(\n                model=resources_pb2.Model(\n                    app_id=APP_ID,\n                    user_id=USER_ID,\n                    id=MODEL_ID,\n                    model_version=resources_pb2.ModelVersion(id=MODEL_VERSION_ID),\n                )                \n            )\n        ],\n    ),\n    metadata=metadata,\n)\n\nif post_model_evaluations.status.code != status_code_pb2.SUCCESS:\n    print(post_model_evaluations.status)\n    raise Exception("Failed response, status: " + post_model_evaluations.status.description)\n\nprint(post_model_evaluations)\n',P='###########################################################################################\n# In this section, we set the user authentication, app ID, and the model evaluation ID.\n# Change these strings to run your own example.\n##########################################################################################\n\nUSER_ID = "YOUR_USER_ID_HERE"\n# Your PAT (Personal Access Token) can be found in the Account\'s Security section\nPAT = "YOUR_PAT_HERE"\nAPP_ID = "text-search-app"\n# Change these to wait for your own model\'s evaluation results\nEVALUATION_ID = "e223fa4ac14b4784b223cd31cc545f34"\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\nimport time\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (("authorization", "Key " + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\nwhile True:\n    get_evaluation_response = stub.GetEvaluation(\n        service_pb2.GetEvaluationRequest(\n            user_app_id=userDataObject,\n            evaluation_id=EVALUATION_ID,\n            fields=resources_pb2.FieldsValue(\n                confusion_matrix=True,\n                cooccurrence_matrix=True,\n                label_counts=True,\n                binary_metrics=True,\n                test_set=True,\n                metrics_by_area=True,\n                metrics_by_class=True,\n            ),\n        ),\n        metadata=metadata,\n    )\n\n    if get_evaluation_response.status.code != status_code_pb2.SUCCESS:\n        print(get_evaluation_response.status)\n        raise Exception("Get model version metrics failed: " + get_evaluation_response.status.description)\n\n    print(get_evaluation_response)\n    metrics_status_code = get_evaluation_response.eval_metrics.status.code\n    if metrics_status_code == status_code_pb2.MODEL_EVALUATED:\n        print("The model has been successfully evaluated.")\n        break\n    elif metrics_status_code in (\n        status_code_pb2.MODEL_NOT_EVALUATED,\n        status_code_pb2.MODEL_QUEUED_FOR_EVALUATION,\n        status_code_pb2.MODEL_EVALUATING,\n    ):\n        print("The model hasn\'t been evaluated yet. Trying again shortly.")\n        time.sleep(2)\n    else:\n        error_message = (\n            str(get_evaluation_response.status.code) + " " + \n            get_evaluation_response.status.description + " " + \n            get_evaluation_response.status.details\n        )\n        raise Exception(\n            f"Expected model to evaluate, but got {error_message}. Full response: {get_evaluation_response}"\n        )\n\nprint("The model metrics response object:")\nprint(get_evaluation_response)\n',U='status {\n  code: SUCCESS\n  description: "Ok"\n  req_id: "cbc9cbf2478ea008c68b74cc07126c05"\n}\neval_metrics {\n  status {\n    code: MODEL_QUEUED_FOR_EVALUATION\n    description: "Model is queued for evaluation."\n  }\n  user_id: "ei2leoz3s3iy"\n  app_id: "text-search-app"\n  id: "e223fa4ac14b4784b223cd31cc545f34"\n}',N='status {\n  code: SUCCESS\n  description: "Ok"\n  req_id: "aa8517cf0d340d6afef484ddae938124"\n}\neval_metrics {\n  status {\n    code: MODEL_EVALUATED\n    description: "Model was successfully evaluated."\n  }\n  summary {\n    macro_avg_roc_auc: 1.0\n    macro_avg_f1_score: 0.8809523582458496\n    macro_std_f1_score: 0.13677529990673065\n    macro_avg_precision: 0.9375\n    macro_avg_recall: 0.875\n  }\n  confusion_matrix {\n    matrix {\n      predicted: "positive"\n      actual: "positive"\n      value: 0.7497637867927551\n      predicted_concept {\n        id: "positive"\n        name: "positive"\n        value: 0.7497637867927551\n        app_id: "text-search-app"\n      }\n      actual_concept {\n        id: "positive"\n        name: "positive"\n        value: 1.0\n        app_id: "text-search-app"\n      }\n    }\n    matrix {\n      predicted: "negative"\n      actual: "positive"\n      value: 0.2502362132072449\n      predicted_concept {\n        id: "negative"\n        name: "negative"\n        value: 0.2502362132072449\n        app_id: "text-search-app"\n      }\n      actual_concept {\n        id: "positive"\n        name: "positive"\n        value: 1.0\n        app_id: "text-search-app"\n      }\n    }\n    matrix {\n      predicted: "positive"\n      actual: "negative"\n      value: 3.033356961168465e-07\n      predicted_concept {\n        id: "positive"\n        name: "positive"\n        value: 3.033356961168465e-07\n        app_id: "text-search-app"\n      }\n      actual_concept {\n        id: "negative"\n        name: "negative"\n        value: 1.0\n        app_id: "text-search-app"\n      }\n    }\n    matrix {\n      predicted: "negative"\n      actual: "negative"\n      value: 0.9999997019767761\n      predicted_concept {\n        id: "negative"\n        name: "negative"\n        value: 0.9999997019767761\n        app_id: "text-search-app"\n      }\n      actual_concept {\n        id: "negative"\n        name: "negative"\n        value: 1.0\n        app_id: "text-search-app"\n      }\n    }\n    concept_ids: "positive"\n    concept_ids: "negative"\n  }\n  cooccurrence_matrix {\n    matrix {\n      row: "positive"\n      col: "positive"\n      count: 10\n    }\n    matrix {\n      row: "negative"\n      col: "negative"\n      count: 11\n    }\n    concept_ids: "positive"\n    concept_ids: "negative"\n  }\n  label_counts {\n    positive_label_counts {\n      concept_name: "positive"\n      count: 10\n      concept {\n        id: "positive"\n        name: "positive"\n        value: 1.0\n        app_id: "text-search-app"\n      }\n    }\n    positive_label_counts {\n      concept_name: "negative"\n      count: 11\n      concept {\n        id: "negative"\n        name: "negative"\n        value: 1.0\n        app_id: "text-search-app"\n      }\n    }\n  }\n  binary_metrics {\n    num_pos: 2\n    num_neg: 2\n    num_tot: 4\n    roc_auc: 1.0\n    f1: 0.8333333730697632\n    concept {\n      id: "positive"\n      name: "positive"\n      value: 1.0\n      app_id: "text-search-app"\n    }\n    roc_curve {\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 1.0\n      tpr: 0.0\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 1.0\n      thresholds: 1.0\n      thresholds: 0.9900000095367432\n      thresholds: 0.9800000190734863\n      thresholds: 0.9700000286102295\n      thresholds: 0.9599999785423279\n      thresholds: 0.949999988079071\n      thresholds: 0.9399999976158142\n      thresholds: 0.9300000071525574\n      thresholds: 0.9200000166893005\n      thresholds: 0.9100000262260437\n      thresholds: 0.8999999761581421\n      thresholds: 0.8899999856948853\n      thresholds: 0.8799999952316284\n      thresholds: 0.8700000047683716\n      thresholds: 0.8600000143051147\n      thresholds: 0.8500000238418579\n      thresholds: 0.8399999737739563\n      thresholds: 0.8299999833106995\n      thresholds: 0.8199999928474426\n      thresholds: 0.8100000023841858\n      thresholds: 0.800000011920929\n      thresholds: 0.7900000214576721\n      thresholds: 0.7799999713897705\n      thresholds: 0.7699999809265137\n      thresholds: 0.7599999904632568\n      thresholds: 0.75\n      thresholds: 0.7400000095367432\n      thresholds: 0.7300000190734863\n      thresholds: 0.7200000286102295\n      thresholds: 0.7099999785423279\n      thresholds: 0.699999988079071\n      thresholds: 0.6899999976158142\n      thresholds: 0.6800000071525574\n      thresholds: 0.6700000166893005\n      thresholds: 0.6600000262260437\n      thresholds: 0.6499999761581421\n      thresholds: 0.6399999856948853\n      thresholds: 0.6299999952316284\n      thresholds: 0.6200000047683716\n      thresholds: 0.6100000143051147\n      thresholds: 0.6000000238418579\n      thresholds: 0.5899999737739563\n      thresholds: 0.5799999833106995\n      thresholds: 0.5699999928474426\n      thresholds: 0.5600000023841858\n      thresholds: 0.550000011920929\n      thresholds: 0.5400000214576721\n      thresholds: 0.5299999713897705\n      thresholds: 0.5199999809265137\n      thresholds: 0.5099999904632568\n      thresholds: 0.5\n      thresholds: 0.49000000953674316\n      thresholds: 0.47999998927116394\n      thresholds: 0.4699999988079071\n      thresholds: 0.46000000834465027\n      thresholds: 0.44999998807907104\n      thresholds: 0.4399999976158142\n      thresholds: 0.4300000071525574\n      thresholds: 0.41999998688697815\n      thresholds: 0.4099999964237213\n      thresholds: 0.4000000059604645\n      thresholds: 0.38999998569488525\n      thresholds: 0.3799999952316284\n      thresholds: 0.3700000047683716\n      thresholds: 0.36000001430511475\n      thresholds: 0.3499999940395355\n      thresholds: 0.3400000035762787\n      thresholds: 0.33000001311302185\n      thresholds: 0.3199999928474426\n      thresholds: 0.3100000023841858\n      thresholds: 0.30000001192092896\n      thresholds: 0.28999999165534973\n      thresholds: 0.2800000011920929\n      thresholds: 0.27000001072883606\n      thresholds: 0.25999999046325684\n      thresholds: 0.25\n      thresholds: 0.23999999463558197\n      thresholds: 0.23000000417232513\n      thresholds: 0.2199999988079071\n      thresholds: 0.20999999344348907\n      thresholds: 0.20000000298023224\n      thresholds: 0.1899999976158142\n      thresholds: 0.18000000715255737\n      thresholds: 0.17000000178813934\n      thresholds: 0.1599999964237213\n      thresholds: 0.15000000596046448\n      thresholds: 0.14000000059604645\n      thresholds: 0.12999999523162842\n      thresholds: 0.11999999731779099\n      thresholds: 0.10999999940395355\n      thresholds: 0.10000000149011612\n      thresholds: 0.09000000357627869\n      thresholds: 0.07999999821186066\n      thresholds: 0.07000000029802322\n      thresholds: 0.05999999865889549\n      thresholds: 0.05000000074505806\n      thresholds: 0.03999999910593033\n      thresholds: 0.029999999329447746\n      thresholds: 0.019999999552965164\n      thresholds: 0.009999999776482582\n      thresholds: 0.0\n    }\n    precision_recall_curve {\n      recall: 1.0\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.0\n      precision: 0.5\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      thresholds: 0.0\n      thresholds: 0.009999999776482582\n      thresholds: 0.019999999552965164\n      thresholds: 0.029999999329447746\n      thresholds: 0.03999999910593033\n      thresholds: 0.05000000074505806\n      thresholds: 0.05999999865889549\n      thresholds: 0.07000000029802322\n      thresholds: 0.07999999821186066\n      thresholds: 0.09000000357627869\n      thresholds: 0.10000000149011612\n      thresholds: 0.10999999940395355\n      thresholds: 0.11999999731779099\n      thresholds: 0.12999999523162842\n      thresholds: 0.14000000059604645\n      thresholds: 0.15000000596046448\n      thresholds: 0.1599999964237213\n      thresholds: 0.17000000178813934\n      thresholds: 0.18000000715255737\n      thresholds: 0.1899999976158142\n      thresholds: 0.20000000298023224\n      thresholds: 0.20999999344348907\n      thresholds: 0.2199999988079071\n      thresholds: 0.23000000417232513\n      thresholds: 0.23999999463558197\n      thresholds: 0.25\n      thresholds: 0.25999999046325684\n      thresholds: 0.27000001072883606\n      thresholds: 0.2800000011920929\n      thresholds: 0.28999999165534973\n      thresholds: 0.30000001192092896\n      thresholds: 0.3100000023841858\n      thresholds: 0.3199999928474426\n      thresholds: 0.33000001311302185\n      thresholds: 0.3400000035762787\n      thresholds: 0.3499999940395355\n      thresholds: 0.36000001430511475\n      thresholds: 0.3700000047683716\n      thresholds: 0.3799999952316284\n      thresholds: 0.38999998569488525\n      thresholds: 0.4000000059604645\n      thresholds: 0.4099999964237213\n      thresholds: 0.41999998688697815\n      thresholds: 0.4300000071525574\n      thresholds: 0.4399999976158142\n      thresholds: 0.44999998807907104\n      thresholds: 0.46000000834465027\n      thresholds: 0.4699999988079071\n      thresholds: 0.47999998927116394\n      thresholds: 0.49000000953674316\n      thresholds: 0.5\n      thresholds: 0.5099999904632568\n      thresholds: 0.5199999809265137\n      thresholds: 0.5299999713897705\n      thresholds: 0.5400000214576721\n      thresholds: 0.550000011920929\n      thresholds: 0.5600000023841858\n      thresholds: 0.5699999928474426\n      thresholds: 0.5799999833106995\n      thresholds: 0.5899999737739563\n      thresholds: 0.6000000238418579\n      thresholds: 0.6100000143051147\n      thresholds: 0.6200000047683716\n      thresholds: 0.6299999952316284\n      thresholds: 0.6399999856948853\n      thresholds: 0.6499999761581421\n      thresholds: 0.6600000262260437\n      thresholds: 0.6700000166893005\n      thresholds: 0.6800000071525574\n      thresholds: 0.6899999976158142\n      thresholds: 0.699999988079071\n      thresholds: 0.7099999785423279\n      thresholds: 0.7200000286102295\n      thresholds: 0.7300000190734863\n      thresholds: 0.7400000095367432\n      thresholds: 0.75\n      thresholds: 0.7599999904632568\n      thresholds: 0.7699999809265137\n      thresholds: 0.7799999713897705\n      thresholds: 0.7900000214576721\n      thresholds: 0.800000011920929\n      thresholds: 0.8100000023841858\n      thresholds: 0.8199999928474426\n      thresholds: 0.8299999833106995\n      thresholds: 0.8399999737739563\n      thresholds: 0.8500000238418579\n      thresholds: 0.8600000143051147\n      thresholds: 0.8700000047683716\n      thresholds: 0.8799999952316284\n      thresholds: 0.8899999856948853\n      thresholds: 0.8999999761581421\n      thresholds: 0.9100000262260437\n      thresholds: 0.9200000166893005\n      thresholds: 0.9300000071525574\n      thresholds: 0.9399999976158142\n      thresholds: 0.949999988079071\n      thresholds: 0.9599999785423279\n      thresholds: 0.9700000286102295\n      thresholds: 0.9800000190734863\n      thresholds: 0.9900000095367432\n      thresholds: 1.0\n    }\n  }\n  binary_metrics {\n    num_pos: 2\n    num_neg: 2\n    num_tot: 4\n    roc_auc: 1.0\n    f1: 0.9285714626312256\n    concept {\n      id: "negative"\n      name: "negative"\n      value: 1.0\n      app_id: "text-search-app"\n    }\n    roc_curve {\n      fpr: 0.0\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 1.0\n      tpr: 0.5\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      thresholds: 1.0\n      thresholds: 0.9900000095367432\n      thresholds: 0.9800000190734863\n      thresholds: 0.9700000286102295\n      thresholds: 0.9599999785423279\n      thresholds: 0.949999988079071\n      thresholds: 0.9399999976158142\n      thresholds: 0.9300000071525574\n      thresholds: 0.9200000166893005\n      thresholds: 0.9100000262260437\n      thresholds: 0.8999999761581421\n      thresholds: 0.8899999856948853\n      thresholds: 0.8799999952316284\n      thresholds: 0.8700000047683716\n      thresholds: 0.8600000143051147\n      thresholds: 0.8500000238418579\n      thresholds: 0.8399999737739563\n      thresholds: 0.8299999833106995\n      thresholds: 0.8199999928474426\n      thresholds: 0.8100000023841858\n      thresholds: 0.800000011920929\n      thresholds: 0.7900000214576721\n      thresholds: 0.7799999713897705\n      thresholds: 0.7699999809265137\n      thresholds: 0.7599999904632568\n      thresholds: 0.75\n      thresholds: 0.7400000095367432\n      thresholds: 0.7300000190734863\n      thresholds: 0.7200000286102295\n      thresholds: 0.7099999785423279\n      thresholds: 0.699999988079071\n      thresholds: 0.6899999976158142\n      thresholds: 0.6800000071525574\n      thresholds: 0.6700000166893005\n      thresholds: 0.6600000262260437\n      thresholds: 0.6499999761581421\n      thresholds: 0.6399999856948853\n      thresholds: 0.6299999952316284\n      thresholds: 0.6200000047683716\n      thresholds: 0.6100000143051147\n      thresholds: 0.6000000238418579\n      thresholds: 0.5899999737739563\n      thresholds: 0.5799999833106995\n      thresholds: 0.5699999928474426\n      thresholds: 0.5600000023841858\n      thresholds: 0.550000011920929\n      thresholds: 0.5400000214576721\n      thresholds: 0.5299999713897705\n      thresholds: 0.5199999809265137\n      thresholds: 0.5099999904632568\n      thresholds: 0.5\n      thresholds: 0.49000000953674316\n      thresholds: 0.47999998927116394\n      thresholds: 0.4699999988079071\n      thresholds: 0.46000000834465027\n      thresholds: 0.44999998807907104\n      thresholds: 0.4399999976158142\n      thresholds: 0.4300000071525574\n      thresholds: 0.41999998688697815\n      thresholds: 0.4099999964237213\n      thresholds: 0.4000000059604645\n      thresholds: 0.38999998569488525\n      thresholds: 0.3799999952316284\n      thresholds: 0.3700000047683716\n      thresholds: 0.36000001430511475\n      thresholds: 0.3499999940395355\n      thresholds: 0.3400000035762787\n      thresholds: 0.33000001311302185\n      thresholds: 0.3199999928474426\n      thresholds: 0.3100000023841858\n      thresholds: 0.30000001192092896\n      thresholds: 0.28999999165534973\n      thresholds: 0.2800000011920929\n      thresholds: 0.27000001072883606\n      thresholds: 0.25999999046325684\n      thresholds: 0.25\n      thresholds: 0.23999999463558197\n      thresholds: 0.23000000417232513\n      thresholds: 0.2199999988079071\n      thresholds: 0.20999999344348907\n      thresholds: 0.20000000298023224\n      thresholds: 0.1899999976158142\n      thresholds: 0.18000000715255737\n      thresholds: 0.17000000178813934\n      thresholds: 0.1599999964237213\n      thresholds: 0.15000000596046448\n      thresholds: 0.14000000059604645\n      thresholds: 0.12999999523162842\n      thresholds: 0.11999999731779099\n      thresholds: 0.10999999940395355\n      thresholds: 0.10000000149011612\n      thresholds: 0.09000000357627869\n      thresholds: 0.07999999821186066\n      thresholds: 0.07000000029802322\n      thresholds: 0.05999999865889549\n      thresholds: 0.05000000074505806\n      thresholds: 0.03999999910593033\n      thresholds: 0.029999999329447746\n      thresholds: 0.019999999552965164\n      thresholds: 0.009999999776482582\n      thresholds: 0.0\n    }\n    precision_recall_curve {\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 0.5\n      precision: 0.5\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 1.0\n      thresholds: 0.0\n      thresholds: 0.009999999776482582\n      thresholds: 0.019999999552965164\n      thresholds: 0.029999999329447746\n      thresholds: 0.03999999910593033\n      thresholds: 0.05000000074505806\n      thresholds: 0.05999999865889549\n      thresholds: 0.07000000029802322\n      thresholds: 0.07999999821186066\n      thresholds: 0.09000000357627869\n      thresholds: 0.10000000149011612\n      thresholds: 0.10999999940395355\n      thresholds: 0.11999999731779099\n      thresholds: 0.12999999523162842\n      thresholds: 0.14000000059604645\n      thresholds: 0.15000000596046448\n      thresholds: 0.1599999964237213\n      thresholds: 0.17000000178813934\n      thresholds: 0.18000000715255737\n      thresholds: 0.1899999976158142\n      thresholds: 0.20000000298023224\n      thresholds: 0.20999999344348907\n      thresholds: 0.2199999988079071\n      thresholds: 0.23000000417232513\n      thresholds: 0.23999999463558197\n      thresholds: 0.25\n      thresholds: 0.25999999046325684\n      thresholds: 0.27000001072883606\n      thresholds: 0.2800000011920929\n      thresholds: 0.28999999165534973\n      thresholds: 0.30000001192092896\n      thresholds: 0.3100000023841858\n      thresholds: 0.3199999928474426\n      thresholds: 0.33000001311302185\n      thresholds: 0.3400000035762787\n      thresholds: 0.3499999940395355\n      thresholds: 0.36000001430511475\n      thresholds: 0.3700000047683716\n      thresholds: 0.3799999952316284\n      thresholds: 0.38999998569488525\n      thresholds: 0.4000000059604645\n      thresholds: 0.4099999964237213\n      thresholds: 0.41999998688697815\n      thresholds: 0.4300000071525574\n      thresholds: 0.4399999976158142\n      thresholds: 0.44999998807907104\n      thresholds: 0.46000000834465027\n      thresholds: 0.4699999988079071\n      thresholds: 0.47999998927116394\n      thresholds: 0.49000000953674316\n      thresholds: 0.5\n      thresholds: 0.5099999904632568\n      thresholds: 0.5199999809265137\n      thresholds: 0.5299999713897705\n      thresholds: 0.5400000214576721\n      thresholds: 0.550000011920929\n      thresholds: 0.5600000023841858\n      thresholds: 0.5699999928474426\n      thresholds: 0.5799999833106995\n      thresholds: 0.5899999737739563\n      thresholds: 0.6000000238418579\n      thresholds: 0.6100000143051147\n      thresholds: 0.6200000047683716\n      thresholds: 0.6299999952316284\n      thresholds: 0.6399999856948853\n      thresholds: 0.6499999761581421\n      thresholds: 0.6600000262260437\n      thresholds: 0.6700000166893005\n      thresholds: 0.6800000071525574\n      thresholds: 0.6899999976158142\n      thresholds: 0.699999988079071\n      thresholds: 0.7099999785423279\n      thresholds: 0.7200000286102295\n      thresholds: 0.7300000190734863\n      thresholds: 0.7400000095367432\n      thresholds: 0.75\n      thresholds: 0.7599999904632568\n      thresholds: 0.7699999809265137\n      thresholds: 0.7799999713897705\n      thresholds: 0.7900000214576721\n      thresholds: 0.800000011920929\n      thresholds: 0.8100000023841858\n      thresholds: 0.8199999928474426\n      thresholds: 0.8299999833106995\n      thresholds: 0.8399999737739563\n      thresholds: 0.8500000238418579\n      thresholds: 0.8600000143051147\n      thresholds: 0.8700000047683716\n      thresholds: 0.8799999952316284\n      thresholds: 0.8899999856948853\n      thresholds: 0.8999999761581421\n      thresholds: 0.9100000262260437\n      thresholds: 0.9200000166893005\n      thresholds: 0.9300000071525574\n      thresholds: 0.9399999976158142\n      thresholds: 0.949999988079071\n      thresholds: 0.9599999785423279\n      thresholds: 0.9700000286102295\n      thresholds: 0.9800000190734863\n      thresholds: 0.9900000095367432\n      thresholds: 1.0\n    }\n  }\n  test_set {\n    predicted_concepts {\n      id: "positive"\n      name: "positive"\n      value: 0.9999601244926453\n      app_id: "text-search-app"\n    }\n    predicted_concepts {\n      id: "negative"\n      name: "negative"\n      value: 3.9902104617794976e-05\n      app_id: "text-search-app"\n    }\n    ground_truth_concepts {\n      id: "positive"\n      name: "positive"\n      value: 1.0\n      app_id: "text-search-app"\n    }\n    input {\n      id: "UyZACEDqN6WhAQOO"\n      data {\n        text {\n          url: "https://data.clarifai.com/orig/users/alfrick/apps/text-search-app/inputs/text/e9dc85e0585a7a6d32da791e6cfa2c52"\n          hosted {\n            prefix: "https://data.clarifai.com"\n            suffix: "users/alfrick/apps/text-search-app/inputs/text/e9dc85e0585a7a6d32da791e6cfa2c52"\n            sizes: "orig"\n            crossorigin: "use-credentials"\n          }\n          text_info {\n            char_count: 507\n            encoding: "UTF8"\n          }\n        }\n      }\n      created_at {\n        seconds: 1687435506\n        nanos: 969900000\n      }\n      modified_at {\n        seconds: 1690525794\n        nanos: 876378000\n      }\n      status {\n        code: INPUT_DOWNLOAD_SUCCESS\n        description: "Download complete"\n      }\n    }\n  }\n  test_set {\n    predicted_concepts {\n      id: "negative"\n      name: "negative"\n      value: 0.9999999403953552\n      app_id: "text-search-app"\n    }\n    predicted_concepts {\n      id: "positive"\n      name: "positive"\n      value: 6.925120743517255e-08\n      app_id: "text-search-app"\n    }\n    ground_truth_concepts {\n      id: "negative"\n      name: "negative"\n      value: 1.0\n      app_id: "text-search-app"\n    }\n    input {\n      id: "A2SsbMJrHqiAUmnr"\n      data {\n        text {\n          url: "https://data.clarifai.com/orig/users/alfrick/apps/text-search-app/inputs/text/77fe0c1ff92bcb6d876ec8e551e9268f"\n          hosted {\n            prefix: "https://data.clarifai.com"\n            suffix: "users/alfrick/apps/text-search-app/inputs/text/77fe0c1ff92bcb6d876ec8e551e9268f"\n            sizes: "orig"\n            crossorigin: "use-credentials"\n          }\n          text_info {\n            char_count: 440\n            encoding: "UTF8"\n          }\n        }\n      }\n      created_at {\n        seconds: 1687436288\n        nanos: 370201000\n      }\n      modified_at {\n        seconds: 1690525794\n        nanos: 876378000\n      }\n      status {\n        code: INPUT_DOWNLOAD_SUCCESS\n        description: "Download complete"\n      }\n    }\n  }\n  test_set {\n    predicted_concepts {\n      id: "negative"\n      name: "negative"\n      value: 0.9999988675117493\n      app_id: "text-search-app"\n    }\n    predicted_concepts {\n      id: "positive"\n      name: "positive"\n      value: 1.1424209560573217e-06\n      app_id: "text-search-app"\n    }\n    ground_truth_concepts {\n      id: "negative"\n      name: "negative"\n      value: 1.0\n      app_id: "text-search-app"\n    }\n    input {\n      id: "NnIBViXRFrXAGKkd"\n      data {\n        text {\n          url: "https://data.clarifai.com/orig/users/alfrick/apps/text-search-app/inputs/text/65d33e371bbdd16cbcf7a2826ab0bcc1"\n          hosted {\n            prefix: "https://data.clarifai.com"\n            suffix: "users/alfrick/apps/text-search-app/inputs/text/65d33e371bbdd16cbcf7a2826ab0bcc1"\n            sizes: "orig"\n            crossorigin: "use-credentials"\n          }\n          text_info {\n            char_count: 359\n            encoding: "UTF8"\n          }\n        }\n      }\n      created_at {\n        seconds: 1687435598\n        nanos: 758239000\n      }\n      modified_at {\n        seconds: 1690525794\n        nanos: 876378000\n      }\n      status {\n        code: INPUT_DOWNLOAD_SUCCESS\n        description: "Download complete"\n      }\n    }\n  }\n  test_set {\n    predicted_concepts {\n      id: "positive"\n      name: "positive"\n      value: 0.9999937415122986\n      app_id: "text-search-app"\n    }\n    predicted_concepts {\n      id: "negative"\n      name: "negative"\n      value: 6.254503659874899e-06\n      app_id: "text-search-app"\n    }\n    ground_truth_concepts {\n      id: "positive"\n      name: "positive"\n      value: 1.0\n      app_id: "text-search-app"\n    }\n    input {\n      id: "OK2cJALgpFQYafF2"\n      data {\n        text {\n          url: "https://data.clarifai.com/orig/users/alfrick/apps/text-search-app/inputs/text/90fd9b5c2f9af536520add1a2da13db8"\n          hosted {\n            prefix: "https://data.clarifai.com"\n            suffix: "users/alfrick/apps/text-search-app/inputs/text/90fd9b5c2f9af536520add1a2da13db8"\n            sizes: "orig"\n            crossorigin: "use-credentials"\n          }\n          text_info {\n            char_count: 399\n            encoding: "UTF8"\n          }\n        }\n      }\n      created_at {\n        seconds: 1687435419\n        nanos: 661211000\n      }\n      modified_at {\n        seconds: 1690525794\n        nanos: 810009000\n      }\n      status {\n        code: INPUT_DOWNLOAD_SUCCESS\n        description: "Download complete"\n      }\n    }\n  }\n  test_set {\n    predicted_concepts {\n      id: "positive"\n      name: "positive"\n      value: 0.9985570907592773\n      app_id: "text-search-app"\n    }\n    predicted_concepts {\n      id: "negative"\n      name: "negative"\n      value: 0.001442914130166173\n      app_id: "text-search-app"\n    }\n    ground_truth_concepts {\n      id: "positive"\n      name: "positive"\n      value: 1.0\n      app_id: "text-search-app"\n    }\n    input {\n      id: "YViTPPBzt3pTlmgY"\n      data {\n        text {\n          url: "https://data.clarifai.com/orig/users/alfrick/apps/text-search-app/inputs/text/5bccdbc8c9f8fb9a673d61dc2e32e40b"\n          hosted {\n            prefix: "https://data.clarifai.com"\n            suffix: "users/alfrick/apps/text-search-app/inputs/text/5bccdbc8c9f8fb9a673d61dc2e32e40b"\n            sizes: "orig"\n            crossorigin: "use-credentials"\n          }\n          text_info {\n            char_count: 413\n            encoding: "UTF8"\n          }\n        }\n      }\n      created_at {\n        seconds: 1687436129\n        nanos: 772735000\n      }\n      modified_at {\n        seconds: 1690525794\n        nanos: 876378000\n      }\n      status {\n        code: INPUT_DOWNLOAD_SUCCESS\n        description: "Download complete"\n      }\n    }\n  }\n  id: "e223fa4ac14b4784b223cd31cc545f34"\n  eval_info {\n    params {\n      fields {\n        key: "dataset_id"\n        value {\n          string_value: ""\n        }\n      }\n      fields {\n        key: "dataset_version_id"\n        value {\n          string_value: ""\n        }\n      }\n      fields {\n        key: "use_kfold"\n        value {\n          bool_value: true\n        }\n      }\n    }\n  }\n  model {\n    id: "text-model-1"\n    app_id: "text-search-app"\n    model_version {\n      id: "3ad2c152232e46ebb16ed31f67dc54d8"\n      created_at {\n        seconds: 1693564041\n        nanos: 515456000\n      }\n      status {\n        code: MODEL_TRAINED\n        description: "Model is trained and ready"\n      }\n      active_concept_count: 2\n      metrics {\n        status {\n          code: MODEL_EVALUATED\n          description: "Model was successfully evaluated."\n        }\n        summary {\n          macro_avg_roc_auc: 1.0\n          macro_avg_f1_score: 0.8809523582458496\n          macro_std_f1_score: 0.13677529990673065\n          macro_avg_precision: 0.9375\n          macro_avg_recall: 0.875\n        }\n      }\n      total_input_count: 21\n      completed_at {\n        seconds: 1693564044\n        nanos: 915680000\n      }\n      visibility {\n        gettable: PRIVATE\n      }\n      app_id: "text-search-app"\n      user_id: "alfrick"\n      metadata {\n      }\n      output_info {\n        output_config {\n        }\n        message: "Show output_info with: GET /models/{model_id}/output_info"\n        params {\n          fields {\n            key: "max_concepts"\n            value {\n              number_value: 20.0\n            }\n          }\n          fields {\n            key: "min_value"\n            value {\n              number_value: 0.0\n            }\n          }\n          fields {\n            key: "select_concepts"\n            value {\n              list_value {\n              }\n            }\n          }\n        }\n      }\n      input_info {\n        base_embed_model {\n          id: "multilingual-text-embedding"\n          app_id: "main"\n          model_version {\n            id: "9b33adf15280465b857163ddaaacdcb1"\n          }\n          user_id: "clarifai"\n          model_type_id: "text-embedder"\n        }\n      }\n      train_info {\n        params {\n          fields {\n            key: "dataset_id"\n            value {\n              string_value: ""\n            }\n          }\n          fields {\n            key: "dataset_version_id"\n            value {\n              string_value: ""\n            }\n          }\n          fields {\n            key: "enrich_dataset"\n            value {\n              string_value: "Automatic"\n            }\n          }\n        }\n      }\n      import_info {\n      }\n    }\n    user_id: "alfrick"\n    model_type_id: "embedding-classifier"\n  }\n  user_id: "alfrick"\n  app_id: "text-search-app"\n}\n\nThe model has been successfully evaluated.\nThe model metrics response object:\nstatus {\n  code: SUCCESS\n  description: "Ok"\n  req_id: "aa8517cf0d340d6afef484ddae938124"\n}\neval_metrics {\n  status {\n    code: MODEL_EVALUATED\n    description: "Model was successfully evaluated."\n  }\n  summary {\n    macro_avg_roc_auc: 1.0\n    macro_avg_f1_score: 0.8809523582458496\n    macro_std_f1_score: 0.13677529990673065\n    macro_avg_precision: 0.9375\n    macro_avg_recall: 0.875\n  }\n  confusion_matrix {\n    matrix {\n      predicted: "positive"\n      actual: "positive"\n      value: 0.7497637867927551\n      predicted_concept {\n        id: "positive"\n        name: "positive"\n        value: 0.7497637867927551\n        app_id: "text-search-app"\n      }\n      actual_concept {\n        id: "positive"\n        name: "positive"\n        value: 1.0\n        app_id: "text-search-app"\n      }\n    }\n    matrix {\n      predicted: "negative"\n      actual: "positive"\n      value: 0.2502362132072449\n      predicted_concept {\n        id: "negative"\n        name: "negative"\n        value: 0.2502362132072449\n        app_id: "text-search-app"\n      }\n      actual_concept {\n        id: "positive"\n        name: "positive"\n        value: 1.0\n        app_id: "text-search-app"\n      }\n    }\n    matrix {\n      predicted: "positive"\n      actual: "negative"\n      value: 3.033356961168465e-07\n      predicted_concept {\n        id: "positive"\n        name: "positive"\n        value: 3.033356961168465e-07\n        app_id: "text-search-app"\n      }\n      actual_concept {\n        id: "negative"\n        name: "negative"\n        value: 1.0\n        app_id: "text-search-app"\n      }\n    }\n    matrix {\n      predicted: "negative"\n      actual: "negative"\n      value: 0.9999997019767761\n      predicted_concept {\n        id: "negative"\n        name: "negative"\n        value: 0.9999997019767761\n        app_id: "text-search-app"\n      }\n      actual_concept {\n        id: "negative"\n        name: "negative"\n        value: 1.0\n        app_id: "text-search-app"\n      }\n    }\n    concept_ids: "positive"\n    concept_ids: "negative"\n  }\n  cooccurrence_matrix {\n    matrix {\n      row: "positive"\n      col: "positive"\n      count: 10\n    }\n    matrix {\n      row: "negative"\n      col: "negative"\n      count: 11\n    }\n    concept_ids: "positive"\n    concept_ids: "negative"\n  }\n  label_counts {\n    positive_label_counts {\n      concept_name: "positive"\n      count: 10\n      concept {\n        id: "positive"\n        name: "positive"\n        value: 1.0\n        app_id: "text-search-app"\n      }\n    }\n    positive_label_counts {\n      concept_name: "negative"\n      count: 11\n      concept {\n        id: "negative"\n        name: "negative"\n        value: 1.0\n        app_id: "text-search-app"\n      }\n    }\n  }\n  binary_metrics {\n    num_pos: 2\n    num_neg: 2\n    num_tot: 4\n    roc_auc: 1.0\n    f1: 0.8333333730697632\n    concept {\n      id: "positive"\n      name: "positive"\n      value: 1.0\n      app_id: "text-search-app"\n    }\n    roc_curve {\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 1.0\n      tpr: 0.0\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 1.0\n      thresholds: 1.0\n      thresholds: 0.9900000095367432\n      thresholds: 0.9800000190734863\n      thresholds: 0.9700000286102295\n      thresholds: 0.9599999785423279\n      thresholds: 0.949999988079071\n      thresholds: 0.9399999976158142\n      thresholds: 0.9300000071525574\n      thresholds: 0.9200000166893005\n      thresholds: 0.9100000262260437\n      thresholds: 0.8999999761581421\n      thresholds: 0.8899999856948853\n      thresholds: 0.8799999952316284\n      thresholds: 0.8700000047683716\n      thresholds: 0.8600000143051147\n      thresholds: 0.8500000238418579\n      thresholds: 0.8399999737739563\n      thresholds: 0.8299999833106995\n      thresholds: 0.8199999928474426\n      thresholds: 0.8100000023841858\n      thresholds: 0.800000011920929\n      thresholds: 0.7900000214576721\n      thresholds: 0.7799999713897705\n      thresholds: 0.7699999809265137\n      thresholds: 0.7599999904632568\n      thresholds: 0.75\n      thresholds: 0.7400000095367432\n      thresholds: 0.7300000190734863\n      thresholds: 0.7200000286102295\n      thresholds: 0.7099999785423279\n      thresholds: 0.699999988079071\n      thresholds: 0.6899999976158142\n      thresholds: 0.6800000071525574\n      thresholds: 0.6700000166893005\n      thresholds: 0.6600000262260437\n      thresholds: 0.6499999761581421\n      thresholds: 0.6399999856948853\n      thresholds: 0.6299999952316284\n      thresholds: 0.6200000047683716\n      thresholds: 0.6100000143051147\n      thresholds: 0.6000000238418579\n      thresholds: 0.5899999737739563\n      thresholds: 0.5799999833106995\n      thresholds: 0.5699999928474426\n      thresholds: 0.5600000023841858\n      thresholds: 0.550000011920929\n      thresholds: 0.5400000214576721\n      thresholds: 0.5299999713897705\n      thresholds: 0.5199999809265137\n      thresholds: 0.5099999904632568\n      thresholds: 0.5\n      thresholds: 0.49000000953674316\n      thresholds: 0.47999998927116394\n      thresholds: 0.4699999988079071\n      thresholds: 0.46000000834465027\n      thresholds: 0.44999998807907104\n      thresholds: 0.4399999976158142\n      thresholds: 0.4300000071525574\n      thresholds: 0.41999998688697815\n      thresholds: 0.4099999964237213\n      thresholds: 0.4000000059604645\n      thresholds: 0.38999998569488525\n      thresholds: 0.3799999952316284\n      thresholds: 0.3700000047683716\n      thresholds: 0.36000001430511475\n      thresholds: 0.3499999940395355\n      thresholds: 0.3400000035762787\n      thresholds: 0.33000001311302185\n      thresholds: 0.3199999928474426\n      thresholds: 0.3100000023841858\n      thresholds: 0.30000001192092896\n      thresholds: 0.28999999165534973\n      thresholds: 0.2800000011920929\n      thresholds: 0.27000001072883606\n      thresholds: 0.25999999046325684\n      thresholds: 0.25\n      thresholds: 0.23999999463558197\n      thresholds: 0.23000000417232513\n      thresholds: 0.2199999988079071\n      thresholds: 0.20999999344348907\n      thresholds: 0.20000000298023224\n      thresholds: 0.1899999976158142\n      thresholds: 0.18000000715255737\n      thresholds: 0.17000000178813934\n      thresholds: 0.1599999964237213\n      thresholds: 0.15000000596046448\n      thresholds: 0.14000000059604645\n      thresholds: 0.12999999523162842\n      thresholds: 0.11999999731779099\n      thresholds: 0.10999999940395355\n      thresholds: 0.10000000149011612\n      thresholds: 0.09000000357627869\n      thresholds: 0.07999999821186066\n      thresholds: 0.07000000029802322\n      thresholds: 0.05999999865889549\n      thresholds: 0.05000000074505806\n      thresholds: 0.03999999910593033\n      thresholds: 0.029999999329447746\n      thresholds: 0.019999999552965164\n      thresholds: 0.009999999776482582\n      thresholds: 0.0\n    }\n    precision_recall_curve {\n      recall: 1.0\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.0\n      precision: 0.5\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      thresholds: 0.0\n      thresholds: 0.009999999776482582\n      thresholds: 0.019999999552965164\n      thresholds: 0.029999999329447746\n      thresholds: 0.03999999910593033\n      thresholds: 0.05000000074505806\n      thresholds: 0.05999999865889549\n      thresholds: 0.07000000029802322\n      thresholds: 0.07999999821186066\n      thresholds: 0.09000000357627869\n      thresholds: 0.10000000149011612\n      thresholds: 0.10999999940395355\n      thresholds: 0.11999999731779099\n      thresholds: 0.12999999523162842\n      thresholds: 0.14000000059604645\n      thresholds: 0.15000000596046448\n      thresholds: 0.1599999964237213\n      thresholds: 0.17000000178813934\n      thresholds: 0.18000000715255737\n      thresholds: 0.1899999976158142\n      thresholds: 0.20000000298023224\n      thresholds: 0.20999999344348907\n      thresholds: 0.2199999988079071\n      thresholds: 0.23000000417232513\n      thresholds: 0.23999999463558197\n      thresholds: 0.25\n      thresholds: 0.25999999046325684\n      thresholds: 0.27000001072883606\n      thresholds: 0.2800000011920929\n      thresholds: 0.28999999165534973\n      thresholds: 0.30000001192092896\n      thresholds: 0.3100000023841858\n      thresholds: 0.3199999928474426\n      thresholds: 0.33000001311302185\n      thresholds: 0.3400000035762787\n      thresholds: 0.3499999940395355\n      thresholds: 0.36000001430511475\n      thresholds: 0.3700000047683716\n      thresholds: 0.3799999952316284\n      thresholds: 0.38999998569488525\n      thresholds: 0.4000000059604645\n      thresholds: 0.4099999964237213\n      thresholds: 0.41999998688697815\n      thresholds: 0.4300000071525574\n      thresholds: 0.4399999976158142\n      thresholds: 0.44999998807907104\n      thresholds: 0.46000000834465027\n      thresholds: 0.4699999988079071\n      thresholds: 0.47999998927116394\n      thresholds: 0.49000000953674316\n      thresholds: 0.5\n      thresholds: 0.5099999904632568\n      thresholds: 0.5199999809265137\n      thresholds: 0.5299999713897705\n      thresholds: 0.5400000214576721\n      thresholds: 0.550000011920929\n      thresholds: 0.5600000023841858\n      thresholds: 0.5699999928474426\n      thresholds: 0.5799999833106995\n      thresholds: 0.5899999737739563\n      thresholds: 0.6000000238418579\n      thresholds: 0.6100000143051147\n      thresholds: 0.6200000047683716\n      thresholds: 0.6299999952316284\n      thresholds: 0.6399999856948853\n      thresholds: 0.6499999761581421\n      thresholds: 0.6600000262260437\n      thresholds: 0.6700000166893005\n      thresholds: 0.6800000071525574\n      thresholds: 0.6899999976158142\n      thresholds: 0.699999988079071\n      thresholds: 0.7099999785423279\n      thresholds: 0.7200000286102295\n      thresholds: 0.7300000190734863\n      thresholds: 0.7400000095367432\n      thresholds: 0.75\n      thresholds: 0.7599999904632568\n      thresholds: 0.7699999809265137\n      thresholds: 0.7799999713897705\n      thresholds: 0.7900000214576721\n      thresholds: 0.800000011920929\n      thresholds: 0.8100000023841858\n      thresholds: 0.8199999928474426\n      thresholds: 0.8299999833106995\n      thresholds: 0.8399999737739563\n      thresholds: 0.8500000238418579\n      thresholds: 0.8600000143051147\n      thresholds: 0.8700000047683716\n      thresholds: 0.8799999952316284\n      thresholds: 0.8899999856948853\n      thresholds: 0.8999999761581421\n      thresholds: 0.9100000262260437\n      thresholds: 0.9200000166893005\n      thresholds: 0.9300000071525574\n      thresholds: 0.9399999976158142\n      thresholds: 0.949999988079071\n      thresholds: 0.9599999785423279\n      thresholds: 0.9700000286102295\n      thresholds: 0.9800000190734863\n      thresholds: 0.9900000095367432\n      thresholds: 1.0\n    }\n  }\n  binary_metrics {\n    num_pos: 2\n    num_neg: 2\n    num_tot: 4\n    roc_auc: 1.0\n    f1: 0.9285714626312256\n    concept {\n      id: "negative"\n      name: "negative"\n      value: 1.0\n      app_id: "text-search-app"\n    }\n    roc_curve {\n      fpr: 0.0\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 1.0\n      tpr: 0.5\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      thresholds: 1.0\n      thresholds: 0.9900000095367432\n      thresholds: 0.9800000190734863\n      thresholds: 0.9700000286102295\n      thresholds: 0.9599999785423279\n      thresholds: 0.949999988079071\n      thresholds: 0.9399999976158142\n      thresholds: 0.9300000071525574\n      thresholds: 0.9200000166893005\n      thresholds: 0.9100000262260437\n      thresholds: 0.8999999761581421\n      thresholds: 0.8899999856948853\n      thresholds: 0.8799999952316284\n      thresholds: 0.8700000047683716\n      thresholds: 0.8600000143051147\n      thresholds: 0.8500000238418579\n      thresholds: 0.8399999737739563\n      thresholds: 0.8299999833106995\n      thresholds: 0.8199999928474426\n      thresholds: 0.8100000023841858\n      thresholds: 0.800000011920929\n      thresholds: 0.7900000214576721\n      thresholds: 0.7799999713897705\n      thresholds: 0.7699999809265137\n      thresholds: 0.7599999904632568\n      thresholds: 0.75\n      thresholds: 0.7400000095367432\n      thresholds: 0.7300000190734863\n      thresholds: 0.7200000286102295\n      thresholds: 0.7099999785423279\n      thresholds: 0.699999988079071\n      thresholds: 0.6899999976158142\n      thresholds: 0.6800000071525574\n      thresholds: 0.6700000166893005\n      thresholds: 0.6600000262260437\n      thresholds: 0.6499999761581421\n      thresholds: 0.6399999856948853\n      thresholds: 0.6299999952316284\n      thresholds: 0.6200000047683716\n      thresholds: 0.6100000143051147\n      thresholds: 0.6000000238418579\n      thresholds: 0.5899999737739563\n      thresholds: 0.5799999833106995\n      thresholds: 0.5699999928474426\n      thresholds: 0.5600000023841858\n      thresholds: 0.550000011920929\n      thresholds: 0.5400000214576721\n      thresholds: 0.5299999713897705\n      thresholds: 0.5199999809265137\n      thresholds: 0.5099999904632568\n      thresholds: 0.5\n      thresholds: 0.49000000953674316\n      thresholds: 0.47999998927116394\n      thresholds: 0.4699999988079071\n      thresholds: 0.46000000834465027\n      thresholds: 0.44999998807907104\n      thresholds: 0.4399999976158142\n      thresholds: 0.4300000071525574\n      thresholds: 0.41999998688697815\n      thresholds: 0.4099999964237213\n      thresholds: 0.4000000059604645\n      thresholds: 0.38999998569488525\n      thresholds: 0.3799999952316284\n      thresholds: 0.3700000047683716\n      thresholds: 0.36000001430511475\n      thresholds: 0.3499999940395355\n      thresholds: 0.3400000035762787\n      thresholds: 0.33000001311302185\n      thresholds: 0.3199999928474426\n      thresholds: 0.3100000023841858\n      thresholds: 0.30000001192092896\n      thresholds: 0.28999999165534973\n      thresholds: 0.2800000011920929\n      thresholds: 0.27000001072883606\n      thresholds: 0.25999999046325684\n      thresholds: 0.25\n      thresholds: 0.23999999463558197\n      thresholds: 0.23000000417232513\n      thresholds: 0.2199999988079071\n      thresholds: 0.20999999344348907\n      thresholds: 0.20000000298023224\n      thresholds: 0.1899999976158142\n      thresholds: 0.18000000715255737\n      thresholds: 0.17000000178813934\n      thresholds: 0.1599999964237213\n      thresholds: 0.15000000596046448\n      thresholds: 0.14000000059604645\n      thresholds: 0.12999999523162842\n      thresholds: 0.11999999731779099\n      thresholds: 0.10999999940395355\n      thresholds: 0.10000000149011612\n      thresholds: 0.09000000357627869\n      thresholds: 0.07999999821186066\n      thresholds: 0.07000000029802322\n      thresholds: 0.05999999865889549\n      thresholds: 0.05000000074505806\n      thresholds: 0.03999999910593033\n      thresholds: 0.029999999329447746\n      thresholds: 0.019999999552965164\n      thresholds: 0.009999999776482582\n      thresholds: 0.0\n    }\n    precision_recall_curve {\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 0.5\n      precision: 0.5\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 1.0\n      thresholds: 0.0\n      thresholds: 0.009999999776482582\n      thresholds: 0.019999999552965164\n      thresholds: 0.029999999329447746\n      thresholds: 0.03999999910593033\n      thresholds: 0.05000000074505806\n      thresholds: 0.05999999865889549\n      thresholds: 0.07000000029802322\n      thresholds: 0.07999999821186066\n      thresholds: 0.09000000357627869\n      thresholds: 0.10000000149011612\n      thresholds: 0.10999999940395355\n      thresholds: 0.11999999731779099\n      thresholds: 0.12999999523162842\n      thresholds: 0.14000000059604645\n      thresholds: 0.15000000596046448\n      thresholds: 0.1599999964237213\n      thresholds: 0.17000000178813934\n      thresholds: 0.18000000715255737\n      thresholds: 0.1899999976158142\n      thresholds: 0.20000000298023224\n      thresholds: 0.20999999344348907\n      thresholds: 0.2199999988079071\n      thresholds: 0.23000000417232513\n      thresholds: 0.23999999463558197\n      thresholds: 0.25\n      thresholds: 0.25999999046325684\n      thresholds: 0.27000001072883606\n      thresholds: 0.2800000011920929\n      thresholds: 0.28999999165534973\n      thresholds: 0.30000001192092896\n      thresholds: 0.3100000023841858\n      thresholds: 0.3199999928474426\n      thresholds: 0.33000001311302185\n      thresholds: 0.3400000035762787\n      thresholds: 0.3499999940395355\n      thresholds: 0.36000001430511475\n      thresholds: 0.3700000047683716\n      thresholds: 0.3799999952316284\n      thresholds: 0.38999998569488525\n      thresholds: 0.4000000059604645\n      thresholds: 0.4099999964237213\n      thresholds: 0.41999998688697815\n      thresholds: 0.4300000071525574\n      thresholds: 0.4399999976158142\n      thresholds: 0.44999998807907104\n      thresholds: 0.46000000834465027\n      thresholds: 0.4699999988079071\n      thresholds: 0.47999998927116394\n      thresholds: 0.49000000953674316\n      thresholds: 0.5\n      thresholds: 0.5099999904632568\n      thresholds: 0.5199999809265137\n      thresholds: 0.5299999713897705\n      thresholds: 0.5400000214576721\n      thresholds: 0.550000011920929\n      thresholds: 0.5600000023841858\n      thresholds: 0.5699999928474426\n      thresholds: 0.5799999833106995\n      thresholds: 0.5899999737739563\n      thresholds: 0.6000000238418579\n      thresholds: 0.6100000143051147\n      thresholds: 0.6200000047683716\n      thresholds: 0.6299999952316284\n      thresholds: 0.6399999856948853\n      thresholds: 0.6499999761581421\n      thresholds: 0.6600000262260437\n      thresholds: 0.6700000166893005\n      thresholds: 0.6800000071525574\n      thresholds: 0.6899999976158142\n      thresholds: 0.699999988079071\n      thresholds: 0.7099999785423279\n      thresholds: 0.7200000286102295\n      thresholds: 0.7300000190734863\n      thresholds: 0.7400000095367432\n      thresholds: 0.75\n      thresholds: 0.7599999904632568\n      thresholds: 0.7699999809265137\n      thresholds: 0.7799999713897705\n      thresholds: 0.7900000214576721\n      thresholds: 0.800000011920929\n      thresholds: 0.8100000023841858\n      thresholds: 0.8199999928474426\n      thresholds: 0.8299999833106995\n      thresholds: 0.8399999737739563\n      thresholds: 0.8500000238418579\n      thresholds: 0.8600000143051147\n      thresholds: 0.8700000047683716\n      thresholds: 0.8799999952316284\n      thresholds: 0.8899999856948853\n      thresholds: 0.8999999761581421\n      thresholds: 0.9100000262260437\n      thresholds: 0.9200000166893005\n      thresholds: 0.9300000071525574\n      thresholds: 0.9399999976158142\n      thresholds: 0.949999988079071\n      thresholds: 0.9599999785423279\n      thresholds: 0.9700000286102295\n      thresholds: 0.9800000190734863\n      thresholds: 0.9900000095367432\n      thresholds: 1.0\n    }\n  }\n  test_set {\n    predicted_concepts {\n      id: "positive"\n      name: "positive"\n      value: 0.9999601244926453\n      app_id: "text-search-app"\n    }\n    predicted_concepts {\n      id: "negative"\n      name: "negative"\n      value: 3.9902104617794976e-05\n      app_id: "text-search-app"\n    }\n    ground_truth_concepts {\n      id: "positive"\n      name: "positive"\n      value: 1.0\n      app_id: "text-search-app"\n    }\n    input {\n      id: "UyZACEDqN6WhAQOO"\n      data {\n        text {\n          url: "https://data.clarifai.com/orig/users/alfrick/apps/text-search-app/inputs/text/e9dc85e0585a7a6d32da791e6cfa2c52"\n          hosted {\n            prefix: "https://data.clarifai.com"\n            suffix: "users/alfrick/apps/text-search-app/inputs/text/e9dc85e0585a7a6d32da791e6cfa2c52"\n            sizes: "orig"\n            crossorigin: "use-credentials"\n          }\n          text_info {\n            char_count: 507\n            encoding: "UTF8"\n          }\n        }\n      }\n      created_at {\n        seconds: 1687435506\n        nanos: 969900000\n      }\n      modified_at {\n        seconds: 1690525794\n        nanos: 876378000\n      }\n      status {\n        code: INPUT_DOWNLOAD_SUCCESS\n        description: "Download complete"\n      }\n    }\n  }\n  test_set {\n    predicted_concepts {\n      id: "negative"\n      name: "negative"\n      value: 0.9999999403953552\n      app_id: "text-search-app"\n    }\n    predicted_concepts {\n      id: "positive"\n      name: "positive"\n      value: 6.925120743517255e-08\n      app_id: "text-search-app"\n    }\n    ground_truth_concepts {\n      id: "negative"\n      name: "negative"\n      value: 1.0\n      app_id: "text-search-app"\n    }\n    input {\n      id: "A2SsbMJrHqiAUmnr"\n      data {\n        text {\n          url: "https://data.clarifai.com/orig/users/alfrick/apps/text-search-app/inputs/text/77fe0c1ff92bcb6d876ec8e551e9268f"\n          hosted {\n            prefix: "https://data.clarifai.com"\n            suffix: "users/alfrick/apps/text-search-app/inputs/text/77fe0c1ff92bcb6d876ec8e551e9268f"\n            sizes: "orig"\n            crossorigin: "use-credentials"\n          }\n          text_info {\n            char_count: 440\n            encoding: "UTF8"\n          }\n        }\n      }\n      created_at {\n        seconds: 1687436288\n        nanos: 370201000\n      }\n      modified_at {\n        seconds: 1690525794\n        nanos: 876378000\n      }\n      status {\n        code: INPUT_DOWNLOAD_SUCCESS\n        description: "Download complete"\n      }\n    }\n  }\n  test_set {\n    predicted_concepts {\n      id: "negative"\n      name: "negative"\n      value: 0.9999988675117493\n      app_id: "text-search-app"\n    }\n    predicted_concepts {\n      id: "positive"\n      name: "positive"\n      value: 1.1424209560573217e-06\n      app_id: "text-search-app"\n    }\n    ground_truth_concepts {\n      id: "negative"\n      name: "negative"\n      value: 1.0\n      app_id: "text-search-app"\n    }\n    input {\n      id: "NnIBViXRFrXAGKkd"\n      data {\n        text {\n          url: "https://data.clarifai.com/orig/users/alfrick/apps/text-search-app/inputs/text/65d33e371bbdd16cbcf7a2826ab0bcc1"\n          hosted {\n            prefix: "https://data.clarifai.com"\n            suffix: "users/alfrick/apps/text-search-app/inputs/text/65d33e371bbdd16cbcf7a2826ab0bcc1"\n            sizes: "orig"\n            crossorigin: "use-credentials"\n          }\n          text_info {\n            char_count: 359\n            encoding: "UTF8"\n          }\n        }\n      }\n      created_at {\n        seconds: 1687435598\n        nanos: 758239000\n      }\n      modified_at {\n        seconds: 1690525794\n        nanos: 876378000\n      }\n      status {\n        code: INPUT_DOWNLOAD_SUCCESS\n        description: "Download complete"\n      }\n    }\n  }\n  test_set {\n    predicted_concepts {\n      id: "positive"\n      name: "positive"\n      value: 0.9999937415122986\n      app_id: "text-search-app"\n    }\n    predicted_concepts {\n      id: "negative"\n      name: "negative"\n      value: 6.254503659874899e-06\n      app_id: "text-search-app"\n    }\n    ground_truth_concepts {\n      id: "positive"\n      name: "positive"\n      value: 1.0\n      app_id: "text-search-app"\n    }\n    input {\n      id: "OK2cJALgpFQYafF2"\n      data {\n        text {\n          url: "https://data.clarifai.com/orig/users/alfrick/apps/text-search-app/inputs/text/90fd9b5c2f9af536520add1a2da13db8"\n          hosted {\n            prefix: "https://data.clarifai.com"\n            suffix: "users/alfrick/apps/text-search-app/inputs/text/90fd9b5c2f9af536520add1a2da13db8"\n            sizes: "orig"\n            crossorigin: "use-credentials"\n          }\n          text_info {\n            char_count: 399\n            encoding: "UTF8"\n          }\n        }\n      }\n      created_at {\n        seconds: 1687435419\n        nanos: 661211000\n      }\n      modified_at {\n        seconds: 1690525794\n        nanos: 810009000\n      }\n      status {\n        code: INPUT_DOWNLOAD_SUCCESS\n        description: "Download complete"\n      }\n    }\n  }\n  test_set {\n    predicted_concepts {\n      id: "positive"\n      name: "positive"\n      value: 0.9985570907592773\n      app_id: "text-search-app"\n    }\n    predicted_concepts {\n      id: "negative"\n      name: "negative"\n      value: 0.001442914130166173\n      app_id: "text-search-app"\n    }\n    ground_truth_concepts {\n      id: "positive"\n      name: "positive"\n      value: 1.0\n      app_id: "text-search-app"\n    }\n    input {\n      id: "YViTPPBzt3pTlmgY"\n      data {\n        text {\n          url: "https://data.clarifai.com/orig/users/alfrick/apps/text-search-app/inputs/text/5bccdbc8c9f8fb9a673d61dc2e32e40b"\n          hosted {\n            prefix: "https://data.clarifai.com"\n            suffix: "users/alfrick/apps/text-search-app/inputs/text/5bccdbc8c9f8fb9a673d61dc2e32e40b"\n            sizes: "orig"\n            crossorigin: "use-credentials"\n          }\n          text_info {\n            char_count: 413\n            encoding: "UTF8"\n          }\n        }\n      }\n      created_at {\n        seconds: 1687436129\n        nanos: 772735000\n      }\n      modified_at {\n        seconds: 1690525794\n        nanos: 876378000\n      }\n      status {\n        code: INPUT_DOWNLOAD_SUCCESS\n        description: "Download complete"\n      }\n    }\n  }\n  id: "e223fa4ac14b4784b223cd31cc545f34"\n  eval_info {\n    params {\n      fields {\n        key: "dataset_id"\n        value {\n          string_value: ""\n        }\n      }\n      fields {\n        key: "dataset_version_id"\n        value {\n          string_value: ""\n        }\n      }\n      fields {\n        key: "use_kfold"\n        value {\n          bool_value: true\n        }\n      }\n    }\n  }\n  model {\n    id: "text-model-1"\n    app_id: "text-search-app"\n    model_version {\n      id: "3ad2c152232e46ebb16ed31f67dc54d8"\n      created_at {\n        seconds: 1693564041\n        nanos: 515456000\n      }\n      status {\n        code: MODEL_TRAINED\n        description: "Model is trained and ready"\n      }\n      active_concept_count: 2\n      metrics {\n        status {\n          code: MODEL_EVALUATED\n          description: "Model was successfully evaluated."\n        }\n        summary {\n          macro_avg_roc_auc: 1.0\n          macro_avg_f1_score: 0.8809523582458496\n          macro_std_f1_score: 0.13677529990673065\n          macro_avg_precision: 0.9375\n          macro_avg_recall: 0.875\n        }\n      }\n      total_input_count: 21\n      completed_at {\n        seconds: 1693564044\n        nanos: 915680000\n      }\n      visibility {\n        gettable: PRIVATE\n      }\n      app_id: "text-search-app"\n      user_id: "alfrick"\n      metadata {\n      }\n      output_info {\n        output_config {\n        }\n        message: "Show output_info with: GET /models/{model_id}/output_info"\n        params {\n          fields {\n            key: "max_concepts"\n            value {\n              number_value: 20.0\n            }\n          }\n          fields {\n            key: "min_value"\n            value {\n              number_value: 0.0\n            }\n          }\n          fields {\n            key: "select_concepts"\n            value {\n              list_value {\n              }\n            }\n          }\n        }\n      }\n      input_info {\n        base_embed_model {\n          id: "multilingual-text-embedding"\n          app_id: "main"\n          model_version {\n            id: "9b33adf15280465b857163ddaaacdcb1"\n          }\n          user_id: "clarifai"\n          model_type_id: "text-embedder"\n        }\n      }\n      train_info {\n        params {\n          fields {\n            key: "dataset_id"\n            value {\n              string_value: ""\n            }\n          }\n          fields {\n            key: "dataset_version_id"\n            value {\n              string_value: ""\n            }\n          }\n          fields {\n            key: "enrich_dataset"\n            value {\n              string_value: "Automatic"\n            }\n          }\n        }\n      }\n      import_info {\n      }\n    }\n    user_id: "ei2leoz3s3iy"\n    model_type_id: "embedding-classifier"\n  }\n  user_id: "ei2leoz3s3iy"\n  app_id: "text-search-app"\n}\n',R={description:"Learn how to use transfer learning to create custom text classifier models",sidebar_position:1,toc_max_heading_level:4},k="Text Classifier",L={},M=[{value:"<strong>Via the UI</strong>",id:"via-the-ui",level:2},{value:"Step 1: Create an App",id:"step-1-create-an-app",level:3},{value:"Step 2: Create a Dataset",id:"step-2-create-a-dataset",level:3},{value:"Step 3: Add and Annotate Inputs",id:"step-3-add-and-annotate-inputs",level:3},{value:"Option 1: Upload From a <code>.csv</code> File",id:"option-1-upload-from-a-csv-file",level:4},{value:"Option 2: Add Texts Directly",id:"option-2-add-texts-directly",level:4},{value:"Step 4: Update Dataset",id:"step-4-update-dataset",level:3},{value:"Step 5: Choose a Model Type",id:"step-5-choose-a-model-type",level:3},{value:"Step 6: Create a Model",id:"step-6-create-a-model",level:3},{value:"Step 7: Set Up the Model",id:"step-7-set-up-the-model",level:3},{value:"Step 8: Use Your Custom Model",id:"step-8-use-your-custom-model",level:3},{value:"<strong>Via the API</strong>",id:"via-the-api",level:2},{value:"Example 1",id:"example-1",level:3},{value:"Step 1: App Creation",id:"step-1-app-creation",level:4},{value:"Step 2: Dataset Upload",id:"step-2-dataset-upload",level:4},{value:"Step 3: Model Creation",id:"step-3-model-creation",level:4},{value:"Step 4: Set Up Model Parameters",id:"step-4-set-up-model-parameters",level:4},{value:"Step 5: Initiate Model Training",id:"step-5-initiate-model-training",level:4},{value:"Step 6: Model Prediction",id:"step-6-model-prediction",level:4},{value:"Step 7: Model Evaluation",id:"step-7-model-evaluation",level:4},{value:"Example 2",id:"example-2",level:3},{value:"Step 1: App Creation",id:"step-1-app-creation-1",level:4},{value:"Step 2: Add a Batch of Texts",id:"step-2-add-a-batch-of-texts",level:4},{value:"Step 3: Wait for Inputs to Download",id:"step-3-wait-for-inputs-to-download",level:4},{value:"Step 4: Create a Custom Model",id:"step-4-create-a-custom-model",level:4},{value:"Step 5: Train the Model",id:"step-5-train-the-model",level:4},{value:"Step 6: Wait for Model Training to Complete",id:"step-6-wait-for-model-training-to-complete",level:4},{value:"Step 7: Predict on New Inputs",id:"step-7-predict-on-new-inputs",level:4},{value:"Step 8: Start Model Evaluation",id:"step-8-start-model-evaluation",level:4},{value:"Step 9: Wait for Model Evaluation Results",id:"step-9-wait-for-model-evaluation-results",level:4}];function Y(n){const e={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...n.components},{Details:s}=e;return s||function(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"text-classifier",children:"Text Classifier"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Learn how to use transfer learning to create custom text classifier models"})}),"\n",(0,r.jsx)("hr",{}),"\n",(0,r.jsx)(e.p,{children:"A text classifier is a machine learning model designed to categorize text data into predefined classes or labels."}),"\n",(0,r.jsxs)(e.p,{children:["Let's demonstrate how you can create a custom text classifier model using the ",(0,r.jsx)(e.a,{href:"/create/models/transfer-learning/",children:"transfer learning"})," technique."]}),"\n",(0,r.jsx)(e.h2,{id:"via-the-ui",children:(0,r.jsx)(e.strong,{children:"Via the UI"})}),"\n",(0,r.jsx)(e.p,{children:"Let's demonstrate how you can create a text classifier model that identifies whether an email message is a spam or not a spam."}),"\n",(0,r.jsx)(e.h3,{id:"step-1-create-an-app",children:"Step 1: Create an App"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.a,{href:"https://docs.clarifai.com/clarifai-basics/applications/create-an-application/#create-an-application-on-the-portal",children:"Click here"})," to learn how to create an application on the Clarifai platform."]}),"\n",(0,r.jsx)(e.admonition,{type:"note",children:(0,r.jsx)(e.p,{children:"When creating the application, choose the Text/Document option as the primary input type."})}),"\n",(0,r.jsx)(e.h3,{id:"step-2-create-a-dataset",children:"Step 2: Create a Dataset"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.a,{href:"https://docs.clarifai.com/portal-guide/datasets/create-get-update-delete/#create-a-new-dataset",children:"Click here"})," to learn how to create a dataset that will store the text inputs."]}),"\n",(0,r.jsx)(e.h3,{id:"step-3-add-and-annotate-inputs",children:"Step 3: Add and Annotate Inputs"}),"\n",(0,r.jsx)(e.p,{children:"Next, you'll need to upload data to the app you've created. This input data, labeled with specific concepts, will be used to train your model."}),"\n",(0,r.jsx)(e.p,{children:'A concept is something that describes the content of your text input, similar to a "tag" or "keyword." The data in these concepts give the model something to "observe" about the keyword, and learn from.'}),"\n",(0,r.jsx)(e.p,{children:"For transfer learning, you can start with a small dataset. We recommend beginning with just 10 text inputs and gradually adding more as needed."}),"\n",(0,r.jsxs)(e.p,{children:["In this example, we'll use 5 examples of spam messages and 5 examples of non-spam messages sourced from ",(0,r.jsx)(e.a,{href:"https://www.kaggle.com/datasets/datatattle/email-classification-nlp",children:"this dataset"}),". You can download the dataset and follow along with this documentation."]}),"\n",(0,r.jsxs)(e.p,{children:["To upload inputs, select the ",(0,r.jsx)(e.strong,{children:"Inputs"})," option in the collapsible left sidebar. Next, click the ",(0,r.jsx)(e.strong,{children:"Upload inputs"})," button."]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.img,{src:t(72280).A+"",width:"1879",height:"828"})}),"\n",(0,r.jsx)(e.p,{children:"The small window that pops up allows you to upload your inputs."}),"\n",(0,r.jsx)(e.p,{children:"You can use either of the following options to add text inputs to your app:"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["Upload from a ",(0,r.jsx)(e.code,{children:".csv"})," file"]}),"\n",(0,r.jsx)(e.li,{children:"Add texts directly"}),"\n"]}),"\n",(0,r.jsxs)(e.h4,{id:"option-1-upload-from-a-csv-file",children:["Option 1: Upload From a ",(0,r.jsx)(e.code,{children:".csv"})," File"]}),"\n",(0,r.jsxs)(e.p,{children:["You can upload your text directly from a ",(0,r.jsx)(e.code,{children:".csv"})," file. This means you can work with your favorite spreadsheet software or text editor when preparing your data for upload."]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.a,{href:"https://docs.clarifai.com/portal-guide/advanced-topics/csv-and-tsv/",children:"Click here"})," to learn how to upload your text data from a ",(0,r.jsx)(e.code,{children:".csv"})," file."]}),"\n",(0,r.jsx)(e.h4,{id:"option-2-add-texts-directly",children:"Option 2: Add Texts Directly"}),"\n",(0,r.jsxs)(e.p,{children:["Select the ",(0,r.jsx)(e.strong,{children:"Text"})," option in the input uploader window. Then, use the input field to add each of the text inputs directly to your app."]}),"\n",(0,r.jsx)(e.p,{children:"For this illustration, let's use the second option."}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.img,{src:t(55546).A+"",width:"1886",height:"832"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:["In the ",(0,r.jsx)(e.strong,{children:"Select or add datasets"})," search box, choose the dataset you previously created for storing your uploaded inputs."]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:["To label the inputs with the ",(0,r.jsx)(e.code,{children:"non-spam"})," concept, click the plus (",(0,r.jsx)(e.strong,{children:"+"}),") icon next to the ",(0,r.jsx)(e.strong,{children:"Select or add concepts"})," search box. Then, type the concept name in the search box. The new name will appear below the search box \u2014 click ",(0,r.jsx)(e.strong,{children:"Add new concept"})," to create it. The newly created concept will now be listed below the search box."]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:["To complete the process, click ",(0,r.jsx)(e.strong,{children:"Upload inputs"})," at the bottom of the pop-up window to upload your annotated input to the selected dataset."]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:["Similarly, upload the examples of spam messages to the previously created dataset and label them with the ",(0,r.jsx)(e.code,{children:"spam"})," concept."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.img,{src:t(42992).A+"",width:"1888",height:"818"})}),"\n",(0,r.jsx)(e.admonition,{type:"note",children:(0,r.jsx)(e.p,{children:"If you're adding text inputs directly, you'll need to repeat the process for each example message: select the dataset to which you want to add the input, choose the relevant concept, and then click the upload button."})}),"\n",(0,r.jsx)(e.admonition,{type:"tip",children:(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.a,{href:"https://docs.clarifai.com/portal-guide/annotate/create-get-update-delete",children:"Click here"})," to learn more about labeling inputs."]})}),"\n",(0,r.jsx)(e.h3,{id:"step-4-update-dataset",children:"Step 4: Update Dataset"}),"\n",(0,r.jsxs)(e.p,{children:["Next, navigate to your dataset's individual page and create a new version by clicking the ",(0,r.jsx)(e.strong,{children:"New version"})," button. This action bookmarks the current state of your dataset, allowing you to apply a specific version when training your custom text model."]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.img,{src:t(41881).A+"",width:"1887",height:"825"})}),"\n",(0,r.jsx)(e.h3,{id:"step-5-choose-a-model-type",children:"Step 5: Choose a Model Type"}),"\n",(0,r.jsx)(e.p,{children:"Once you've uploaded the example text messages containing the concepts you want to train for, you're ready to create your custom model."}),"\n",(0,r.jsxs)(e.p,{children:["Begin by selecting the ",(0,r.jsx)(e.strong,{children:"Models"})," option from the collapsible left sidebar. On the following page, click the ",(0,r.jsx)(e.strong,{children:"Add Model"})," button in the upper-right corner."]}),"\n",(0,r.jsxs)(e.p,{children:["In the pop-up window, select ",(0,r.jsx)(e.strong,{children:"Build a Custom Model"})," and click ",(0,r.jsx)(e.strong,{children:"Continue"})," to proceed."]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.img,{src:t(61870).A+"",width:"1892",height:"825"})}),"\n",(0,r.jsxs)(e.p,{children:["You'll then be redirected to a page where you can choose the model type. In the ",(0,r.jsx)(e.strong,{children:"Text"})," section, select the ",(0,r.jsx)(e.strong,{children:"Transfer Learn"})," model type."]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.img,{src:t(70364).A+"",width:"1679",height:"913"})}),"\n",(0,r.jsx)(e.h3,{id:"step-6-create-a-model",children:"Step 6: Create a Model"}),"\n",(0,r.jsxs)(e.p,{children:["On the ensuing page, provide a unique ID and click the ",(0,r.jsx)(e.strong,{children:"Continue to Configure Model"})," button to create your model."]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.img,{src:t(19906).A+"",width:"1777",height:"718"})}),"\n",(0,r.jsx)(e.h3,{id:"step-7-set-up-the-model",children:"Step 7: Set Up the Model"}),"\n",(0,r.jsx)(e.p,{children:"Next, provide the details for training your text classification model."}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.img,{src:t(43170).A+"",width:"1487",height:"1309"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Dataset selection"})," \u2014 Choose the dataset you want to use for training. For this example, let's select the dataset we previously created, along with its specific version."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Base embedding model"})," \u2014 You can select the base model version to use for embeddings, which has to be one of the embed models in the app workflow. This allows you to specify the specific model in case the default workflow of your app has multiple embedding models present in it. For this example, let's use the default option."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Define concepts"})," \u2014 Specify the concepts you want the model to classify. Here, let's use ",(0,r.jsx)(e.code,{children:"spam"})," and ",(0,r.jsx)(e.code,{children:"non-spam"})," as the two concepts."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Set concepts as mutually exclusive"})," \u2014 Enable this option to indicate that there is no overlap between the defined concepts."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Enrich dataset"})," \u2014 If set to ",(0,r.jsx)(e.code,{children:"Automatic"}),", this feature will enhance the model by including additional data from pre-built datasets with negative embeddings, improving accuracy. If set to ",(0,r.jsx)(e.code,{children:"Disabled"}),", it will exclude these embeddings. Let's use the default ",(0,r.jsx)(e.code,{children:"Automatic"})," setting for this example."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Configure inference settings (optional)"})," \u2014 Adjust inference settings as needed for your model. This step is optional."]}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:["After configuring the settings, click on ",(0,r.jsx)(e.strong,{children:"Train Model"})," to start the training process. Training typically takes a few seconds."]}),"\n",(0,r.jsx)(e.h3,{id:"step-8-use-your-custom-model",children:"Step 8: Use Your Custom Model"}),"\n",(0,r.jsxs)(e.p,{children:["You'll be redirected to the created model's page. Once the text classifier model is trained, you can put it to work, such as for making a ",(0,r.jsx)(e.a,{href:"https://docs.clarifai.com/portal-guide/ppredict/",children:"prediction"}),"."]}),"\n",(0,r.jsx)(e.p,{children:"To test it:"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["Click the blue ",(0,r.jsx)(e.strong,{children:"(+)"}),' button labeled "Try your own text."']}),"\n",(0,r.jsx)(e.li,{children:"A window will appear where you can input a text sample."}),"\n",(0,r.jsx)(e.li,{children:"The model will display prediction probabilities, showing how it classifies the text input."}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.img,{src:t(7705).A+"",width:"1793",height:"864"})}),"\n",(0,r.jsx)(e.h2,{id:"via-the-api",children:(0,r.jsx)(e.strong,{children:"Via the API"})}),"\n",(0,r.jsx)(e.admonition,{type:"info",children:(0,r.jsxs)(e.p,{children:["Before using the ",(0,r.jsx)(e.a,{href:"https://docs.clarifai.com/additional-resources/api-overview/python-sdk",children:"Python SDK"}),", ",(0,r.jsx)(e.a,{href:"https://docs.clarifai.com/additional-resources/api-overview/nodejs-sdk",children:"Node.js SDK"}),", or any of our ",(0,r.jsx)(e.a,{href:"https://docs.clarifai.com/additional-resources/api-overview/grpc-clients",children:"gRPC clients"}),", ensure they are properly installed on your machine. Refer to their respective installation guides for instructions on how to install and initialize them."]})}),"\n",(0,r.jsx)(e.h3,{id:"example-1",children:"Example 1"}),"\n","\n","\n","\n",(0,r.jsx)(e.p,{children:"Let's demonstrate how you can create a text classifier model using our API."}),"\n",(0,r.jsx)(e.h4,{id:"step-1-app-creation",children:"Step 1: App Creation"}),"\n",(0,r.jsxs)(e.p,{children:["Let's start by creating an ",(0,r.jsx)(e.a,{href:"https://docs.clarifai.com/create-manage/applications/create",children:"app"}),"."]}),"\n",(0,r.jsx)(o.A,{groupId:"code",children:(0,r.jsx)(i.A,{value:"python",label:"Python SDK",children:(0,r.jsx)(l.A,{className:"language-python",children:p})})}),"\n",(0,r.jsx)(e.h4,{id:"step-2-dataset-upload",children:"Step 2: Dataset Upload"}),"\n",(0,r.jsxs)(e.p,{children:["Next, let\u2019s upload the ",(0,r.jsx)(e.a,{href:"https://docs.clarifai.com/create-manage/datasets/upload",children:"dataset"})," that will be used to train the model to the app."]}),"\n",(0,r.jsxs)(e.p,{children:["You can find the dataset we used ",(0,r.jsx)(e.a,{href:"https://github.com/Clarifai/examples/tree/main/datasets/upload/data",children:"here"}),"."]}),"\n",(0,r.jsx)(o.A,{groupId:"code",children:(0,r.jsx)(i.A,{value:"python",label:"Python SDK",children:(0,r.jsx)(l.A,{className:"language-python",children:c})})}),"\n",(0,r.jsx)(e.h4,{id:"step-3-model-creation",children:"Step 3: Model Creation"}),"\n",(0,r.jsx)(e.p,{children:"Let's list all the available trainable model types in the Clarifai platform."}),"\n",(0,r.jsx)(o.A,{groupId:"code",children:(0,r.jsx)(i.A,{value:"python",label:"Python SDK",children:(0,r.jsx)(l.A,{className:"language-python",children:d})})}),"\n",(0,r.jsxs)(s,{children:[(0,r.jsx)("summary",{children:"Output"}),(0,r.jsx)(l.A,{className:"language-text",children:x})]}),"\n",(0,r.jsxs)(e.p,{children:["Next, let's select the ",(0,r.jsx)(e.code,{children:"embedding-classifier"})," model type and use it to create a model."]}),"\n",(0,r.jsx)(o.A,{groupId:"code",children:(0,r.jsx)(i.A,{value:"python",label:"Python",children:(0,r.jsx)(l.A,{className:"language-python",children:h})})}),"\n",(0,r.jsx)(e.admonition,{type:"tip",children:(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.a,{href:"https://docs.clarifai.com/create-manage/models/deep-fine-tuning/clusterer#step-4-patch-model-optional",children:"Click here"})," to learn how to patch your model."]})}),"\n",(0,r.jsx)(e.h4,{id:"step-4-set-up-model-parameters",children:"Step 4: Set Up Model Parameters"}),"\n",(0,r.jsx)(e.p,{children:"You can customize the model parameters as needed before starting the training process."}),"\n",(0,r.jsx)(o.A,{groupId:"code",children:(0,r.jsx)(i.A,{value:"python",label:"Python SDK",children:(0,r.jsx)(l.A,{className:"language-python",children:u})})}),"\n",(0,r.jsxs)(s,{children:[(0,r.jsx)("summary",{children:"Output"}),(0,r.jsx)(l.A,{className:"language-text",children:b})]}),"\n",(0,r.jsx)(e.h4,{id:"step-5-initiate-model-training",children:"Step 5: Initiate Model Training"}),"\n",(0,r.jsxs)(e.p,{children:["To initiate the model training process, call the ",(0,r.jsx)(e.code,{children:"model.train()"})," method. The Clarifai API also provides features for monitoring training status and saving training logs to a local file."]}),"\n",(0,r.jsx)(e.admonition,{type:"note",children:(0,r.jsxs)(e.p,{children:["If the training status code returns ",(0,r.jsx)(e.code,{children:"MODEL-TRAINED"}),", it means the model has successfully completed training and is ready for use."]})}),"\n",(0,r.jsx)(o.A,{groupId:"code",children:(0,r.jsx)(i.A,{value:"python",label:"Python SDK",children:(0,r.jsx)(l.A,{className:"language-python",children:_})})}),"\n",(0,r.jsx)(e.h4,{id:"step-6-model-prediction",children:"Step 6: Model Prediction"}),"\n",(0,r.jsx)(e.p,{children:"After the model is trained and ready to use, you can run some predictions with it."}),"\n",(0,r.jsx)(o.A,{groupId:"code",children:(0,r.jsx)(i.A,{value:"python",label:"Python SDK",children:(0,r.jsx)(l.A,{className:"language-python",children:f})})}),"\n",(0,r.jsxs)(s,{children:[(0,r.jsx)("summary",{children:"Output"}),(0,r.jsx)(l.A,{className:"language-text",children:j})]}),"\n",(0,r.jsx)(e.h4,{id:"step-7-model-evaluation",children:"Step 7: Model Evaluation"}),"\n",(0,r.jsx)(e.p,{children:"Let\u2019s evaluate the model using both the training and test datasets. We\u2019ll start by reviewing the evaluation metrics for the training dataset."}),"\n",(0,r.jsx)(o.A,{groupId:"code",children:(0,r.jsx)(i.A,{value:"python",label:"Python SDK",children:(0,r.jsx)(l.A,{className:"language-python",children:m})})}),"\n",(0,r.jsxs)(s,{children:[(0,r.jsx)("summary",{children:"Output"}),(0,r.jsx)(l.A,{className:"language-text",children:y})]}),"\n",(0,r.jsx)(e.p,{children:"Before evaluating the model on the test dataset, ensure it is uploaded using the data loader. Once uploaded, proceed with the evaluation."}),"\n",(0,r.jsx)(o.A,{groupId:"code",children:(0,r.jsx)(i.A,{value:"python",label:"Python SDK",children:(0,r.jsx)(l.A,{className:"language-python",children:g})})}),"\n",(0,r.jsxs)(s,{children:[(0,r.jsx)("summary",{children:"Output"}),(0,r.jsx)(l.A,{className:"language-text",children:A})]}),"\n",(0,r.jsxs)(e.p,{children:["Finally, to gain deeper insights into the model\u2019s performance, use the ",(0,r.jsx)(e.code,{children:"EvalResultCompare"})," method to compare results across multiple datasets."]}),"\n",(0,r.jsx)(o.A,{groupId:"code",children:(0,r.jsx)(i.A,{value:"python",label:"Python SDK",children:(0,r.jsx)(l.A,{className:"language-python",children:v})})}),"\n",(0,r.jsxs)(s,{children:[(0,r.jsx)("summary",{children:"Output"}),(0,r.jsx)(l.A,{className:"language-text",children:E})]}),"\n",(0,r.jsx)(e.h3,{id:"example-2",children:"Example 2"}),"\n",(0,r.jsx)(e.p,{children:"Let's demonstrate how you can create a custom text classifier using transfer learning."}),"\n",(0,r.jsx)(e.h4,{id:"step-1-app-creation-1",children:"Step 1: App Creation"}),"\n",(0,r.jsxs)(e.p,{children:["Let's start by creating an ",(0,r.jsx)(e.a,{href:"https://docs.clarifai.com/create-manage/applications/create",children:"app"}),"."]}),"\n","\n","\n",(0,r.jsx)(e.h4,{id:"step-2-add-a-batch-of-texts",children:"Step 2: Add a Batch of Texts"}),"\n",(0,r.jsx)(e.p,{children:"We'll now add several text inputs that we will later use as training data in our custom model. The idea is that we'll create a model which can differentiate between positive and negative sentences (in a grammatical sense)."}),"\n",(0,r.jsxs)(e.p,{children:["We'll mark each input with one of the two concepts: ",(0,r.jsx)(e.code,{children:"positive"})," or ",(0,r.jsx)(e.code,{children:"negative"}),"."]}),"\n",(0,r.jsx)(e.p,{children:"The texts can be added either directly (it's called raw) or from a URL."}),"\n",(0,r.jsx)(o.A,{groupId:"code",children:(0,r.jsx)(i.A,{value:"grpc_python",label:"Python (gRPC)",children:(0,r.jsx)(l.A,{className:"language-python",children:w})})}),"\n",(0,r.jsx)(e.h4,{id:"step-3-wait-for-inputs-to-download",children:"Step 3: Wait for Inputs to Download"}),"\n",(0,r.jsx)(e.p,{children:"Let's now wait for all the inputs to download."}),"\n",(0,r.jsx)(o.A,{groupId:"code",children:(0,r.jsx)(i.A,{value:"grpc_python",label:"Python (gRPC)",children:(0,r.jsx)(l.A,{className:"language-python",children:D})})}),"\n",(0,r.jsx)(e.h4,{id:"step-4-create-a-custom-model",children:"Step 4: Create a Custom Model"}),"\n",(0,r.jsx)(e.p,{children:'Let\'s create a custom transfer learning model (also called an "embedding-classifier").'}),"\n",(0,r.jsx)(o.A,{groupId:"code",children:(0,r.jsx)(i.A,{value:"grpc_python",label:"Python (gRPC)",children:(0,r.jsx)(l.A,{className:"language-python",children:T})})}),"\n",(0,r.jsx)(e.h4,{id:"step-5-train-the-model",children:"Step 5: Train the Model"}),"\n",(0,r.jsxs)(e.p,{children:["Let's train the model using the ",(0,r.jsx)(e.code,{children:"positive"})," and ",(0,r.jsx)(e.code,{children:"negative"})," concepts."]}),"\n",(0,r.jsx)(e.p,{children:"All inputs (in our application) associated with these two concepts will be used as training data. This will make the model to learn from these inputs so that we can later predict new text examples."}),"\n",(0,r.jsx)(o.A,{groupId:"code",children:(0,r.jsx)(i.A,{value:"grpc_python",label:"Python (gRPC)",children:(0,r.jsx)(l.A,{className:"language-python",children:I})})}),"\n",(0,r.jsx)(e.h4,{id:"step-6-wait-for-model-training-to-complete",children:"Step 6: Wait for Model Training to Complete"}),"\n",(0,r.jsx)(e.p,{children:"Let's wait for the model training to complete."}),"\n",(0,r.jsx)(e.p,{children:"Each model training produces a new model version. Notice that on the bottom of the following code example, we placed the model version ID into its own variable."}),"\n",(0,r.jsx)(e.p,{children:"We'll be using it later to specify which specific model version we want to use (since a model can have multiple versions)."}),"\n",(0,r.jsx)(o.A,{groupId:"code",children:(0,r.jsx)(i.A,{value:"grpc_python",label:"Python (gRPC)",children:(0,r.jsx)(l.A,{className:"language-python",children:S})})}),"\n",(0,r.jsx)(e.h4,{id:"step-7-predict-on-new-inputs",children:"Step 7: Predict on New Inputs"}),"\n",(0,r.jsx)(e.p,{children:"Let's now use the trained custom model to predict new text examples."}),"\n",(0,r.jsx)(o.A,{groupId:"code",children:(0,r.jsx)(i.A,{value:"grpc_python",label:"Python (gRPC)",children:(0,r.jsx)(l.A,{className:"language-python",children:O})})}),"\n",(0,r.jsxs)(s,{children:[(0,r.jsx)("summary",{children:"Text Output Example"}),(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-text",children:"The following concepts were predicted for the input `Butchart Gardens contains over 900 varieties of plants.`:\n\tpositive: 0.83\n\tnegative: 0.17\nThe following concepts were predicted for the input `https://samples.clarifai.com/negative_sentence_12.txt`:\n\tnegative: 1.00\n\tpositive: 0.00\n"})})]}),"\n",(0,r.jsx)(e.h4,{id:"step-8-start-model-evaluation",children:"Step 8: Start Model Evaluation"}),"\n",(0,r.jsxs)(e.p,{children:["Let's now test the performance of the model by using model evaluation. Take note of the ",(0,r.jsx)(e.code,{children:"evaluation_id"})," returned in the response, as you will need it for the next step."]}),"\n",(0,r.jsx)(e.admonition,{type:"tip",children:(0,r.jsxs)(e.p,{children:["See the ",(0,r.jsx)(e.a,{href:"https://docs.clarifai.com/api-guide/evaluate/",children:"Evaluating Models"})," section to learn more."]})}),"\n",(0,r.jsx)(o.A,{groupId:"code",children:(0,r.jsx)(i.A,{value:"grpc_python",label:"Python (gRPC)",children:(0,r.jsx)(l.A,{className:"language-python",children:C})})}),"\n",(0,r.jsxs)(s,{children:[(0,r.jsx)("summary",{children:"Raw Output Example"}),(0,r.jsx)(l.A,{className:"language-javascript",children:U})]}),"\n",(0,r.jsx)(e.h4,{id:"step-9-wait-for-model-evaluation-results",children:"Step 9: Wait for Model Evaluation Results"}),"\n",(0,r.jsx)(e.p,{children:"Model evaluation takes some time \u2014 depending on the amount of data the model has."}),"\n",(0,r.jsx)(e.p,{children:"Let's wait for it to complete, and print all the results that it gives us."}),"\n",(0,r.jsx)(o.A,{groupId:"code",children:(0,r.jsx)(i.A,{value:"grpc_python",label:"Python (gRPC)",children:(0,r.jsx)(l.A,{className:"language-python",children:P})})}),"\n",(0,r.jsxs)(s,{children:[(0,r.jsx)("summary",{children:"Raw Output Example"}),(0,r.jsx)(l.A,{className:"language-javascript",children:N})]})]})}function H(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(Y,{...n})}):Y(n)}},70364:(n,e,t)=>{t.d(e,{A:()=>s});const s=t.p+"assets/images/select-model-type-425d4860d58ddf5135478202d7df4887.png"},72280:(n,e,t)=>{t.d(e,{A:()=>s});const s=t.p+"assets/images/nav-to-explorer_1-40d639358a69ef71cb4fe0ce12f2c4e1.png"},79329:(n,e,t)=>{t.d(e,{A:()=>o});t(96540);var s=t(18215);const r={tabItem:"tabItem_Ymn6"};var a=t(74848);function o(n){let{children:e,hidden:t,className:o}=n;return(0,a.jsx)("div",{role:"tabpanel",className:(0,s.A)(r.tabItem,o),hidden:t,children:e})}}}]);
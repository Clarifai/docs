"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[2256],{65537:(n,e,t)=>{t.d(e,{A:()=>m});var a=t(96540),s=t(18215),i=t(65627),o=t(56347),r=t(50372),c=t(30604),l=t(11861),u=t(78749);function p(n){return a.Children.toArray(n).filter((n=>"\n"!==n)).map((n=>{if(!n||(0,a.isValidElement)(n)&&function(n){const{props:e}=n;return!!e&&"object"==typeof e&&"value"in e}(n))return n;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof n.type?n.type:n.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(n){const{values:e,children:t}=n;return(0,a.useMemo)((()=>{const n=e??function(n){return p(n).map((n=>{let{props:{value:e,label:t,attributes:a,default:s}}=n;return{value:e,label:t,attributes:a,default:s}}))}(t);return function(n){const e=(0,l.XI)(n,((n,e)=>n.value===e.value));if(e.length>0)throw new Error(`Docusaurus error: Duplicate values "${e.map((n=>n.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(n),n}),[e,t])}function d(n){let{value:e,tabValues:t}=n;return t.some((n=>n.value===e))}function _(n){let{queryString:e=!1,groupId:t}=n;const s=(0,o.W6)(),i=function(n){let{queryString:e=!1,groupId:t}=n;if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:e,groupId:t});return[(0,c.aZ)(i),(0,a.useCallback)((n=>{if(!i)return;const e=new URLSearchParams(s.location.search);e.set(i,n),s.replace({...s.location,search:e.toString()})}),[i,s])]}function A(n){const{defaultValue:e,queryString:t=!1,groupId:s}=n,i=h(n),[o,c]=(0,a.useState)((()=>function(n){let{defaultValue:e,tabValues:t}=n;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!d({value:e,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${t.map((n=>n.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const a=t.find((n=>n.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:e,tabValues:i}))),[l,p]=_({queryString:t,groupId:s}),[A,f]=function(n){let{groupId:e}=n;const t=function(n){return n?`docusaurus.tab.${n}`:null}(e),[s,i]=(0,u.Dv)(t);return[s,(0,a.useCallback)((n=>{t&&i.set(n)}),[t,i])]}({groupId:s}),E=(()=>{const n=l??A;return d({value:n,tabValues:i})?n:null})();(0,r.A)((()=>{E&&c(E)}),[E]);return{selectedValue:o,selectValue:(0,a.useCallback)((n=>{if(!d({value:n,tabValues:i}))throw new Error(`Can't select invalid tab value=${n}`);c(n),p(n),f(n)}),[p,f,i]),tabValues:i}}var f=t(9136);const E={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var g=t(74848);function S(n){let{className:e,block:t,selectedValue:a,selectValue:o,tabValues:r}=n;const c=[],{blockElementScrollPositionUntilNextRender:l}=(0,i.a_)(),u=n=>{const e=n.currentTarget,t=c.indexOf(e),s=r[t].value;s!==a&&(l(e),o(s))},p=n=>{let e=null;switch(n.key){case"Enter":u(n);break;case"ArrowRight":{const t=c.indexOf(n.currentTarget)+1;e=c[t]??c[0];break}case"ArrowLeft":{const t=c.indexOf(n.currentTarget)-1;e=c[t]??c[c.length-1];break}}e?.focus()};return(0,g.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":t},e),children:r.map((n=>{let{value:e,label:t,attributes:i}=n;return(0,g.jsx)("li",{role:"tab",tabIndex:a===e?0:-1,"aria-selected":a===e,ref:n=>{c.push(n)},onKeyDown:p,onClick:u,...i,className:(0,s.A)("tabs__item",E.tabItem,i?.className,{"tabs__item--active":a===e}),children:t??e},e)}))})}function I(n){let{lazy:e,children:t,selectedValue:i}=n;const o=(Array.isArray(t)?t:[t]).filter(Boolean);if(e){const n=o.find((n=>n.props.value===i));return n?(0,a.cloneElement)(n,{className:(0,s.A)("margin-top--md",n.props.className)}):null}return(0,g.jsx)("div",{className:"margin-top--md",children:o.map(((n,e)=>(0,a.cloneElement)(n,{key:e,hidden:n.props.value!==i})))})}function P(n){const e=A(n);return(0,g.jsxs)("div",{className:(0,s.A)("tabs-container",E.tabList),children:[(0,g.jsx)(S,{...e,...n}),(0,g.jsx)(I,{...e,...n})]})}function m(n){const e=(0,f.A)();return(0,g.jsx)(P,{...n,children:p(n.children)},String(e))}},79329:(n,e,t)=>{t.d(e,{A:()=>o});t(96540);var a=t(18215);const s={tabItem:"tabItem_Ymn6"};var i=t(74848);function o(n){let{children:e,hidden:t,className:o}=n;return(0,i.jsx)("div",{role:"tabpanel",className:(0,a.A)(s.tabItem,o),hidden:t,children:e})}},86754:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>on,contentTitle:()=>sn,default:()=>ln,frontMatter:()=>an,metadata:()=>a,toc:()=>rn});const a=JSON.parse('{"id":"create-manage/search/api/filter","title":"Filter","description":"Select a subset of your data based on useful filters.","source":"@site/docs/create-manage/search/api/filter.md","sourceDirName":"create-manage/search/api","slug":"/create-manage/search/api/filter","permalink":"/create-manage/search/api/filter","draft":false,"unlisted":false,"editUrl":"https://github.com/Clarifai/docs/blob/main/docs/create-manage/search/api/filter.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"description":"Select a subset of your data based on useful filters.","sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Search via the API","permalink":"/create-manage/search/api/"},"next":{"title":"Rank","permalink":"/create-manage/search/api/rank"}}');var s=t(74848),i=t(28453),o=t(65537),r=t(79329),c=t(58069);const l="################################################################################\n# In this section, we set the user authentication, app ID, and the concept we  \n# we want to filter by. Change these strings to run your own example.\n################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change this to filter by your own concept\nCONCEPT_ID = 'people'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID) # The userDataObject is required when using a PAT\n\npost_annotations_searches_response = stub.PostAnnotationsSearches(\n    service_pb2.PostAnnotationsSearchesRequest(\n        user_app_id=userDataObject,  \n        searches = [\n            resources_pb2.Search(\n                query=resources_pb2.Query(\n                    filters=[\n                        resources_pb2.Filter(\n                            annotation=resources_pb2.Annotation(\n                                data=resources_pb2.Data(\n                                    concepts=[  # You can search by multiple concepts\n                                        resources_pb2.Concept(\n                                            id=CONCEPT_ID,  # You could search by concept Name as well\n                                            value=1  # Value of 0 will search for images that don't have the concept\n                                        )\n                                    ]\n                                )\n                            )\n                        )\n                    ]\n                )\n            )\n        ],\n        pagination=service_pb2.Pagination(per_page=2, page=1)\n    ),\n    metadata=metadata\n)\n\nif post_annotations_searches_response.status.code != status_code_pb2.SUCCESS:\n    raise Exception(\"Post searches failed, status: \" + post_annotations_searches_response.status.description)\n\nprint(\"Search result:\")\nfor hit in post_annotations_searches_response.hits:\n    print(\"\\tScore %.2f for annotation: %s off input: %s\" % (hit.score, hit.annotation.id, hit.input.id))",u="#############################################################################\n# In this section, we set the user authentication, app ID, and the ID of a   \n# collaborator. Change these strings to run your own example.\n#############################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change this to filter by user ID\nUSER_ID_2 = 'COLLABORATOR_ID_HERE'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID) # The userDataObject is required when using a PAT\n\npost_annotations_searches_response = stub.PostAnnotationsSearches(\n    service_pb2.PostAnnotationsSearchesRequest(\n        user_app_id=userDataObject,\n        searches = [\n            resources_pb2.Search(\n                query=resources_pb2.Query(\n                    filters=[\n                        resources_pb2.Filter(\n                            annotation=resources_pb2.Annotation(\n                                user_id=USER_ID_2\n                            )\n                        )\n                    ]\n                )       \n            )\n        ],\n        pagination=service_pb2.Pagination(per_page=2, page=1)\n    ),\n    metadata=metadata\n)\n\nif post_annotations_searches_response.status.code != status_code_pb2.SUCCESS:    \n    raise Exception(\"Post searches failed, status: \" + post_annotations_searches_response.status.description)\n\nprint(\"Search result:\")\nfor hit in post_annotations_searches_response.hits:\n    print(\"\\tScore %.2f for annotation: %s off input: %s\" % (hit.score, hit.annotation.id, hit.input.id))",p="#################################################################\n# In this section, we set the user authentication and app ID.   \n# Change these strings to run your own example.\n#################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2, status_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID) # The userDataObject is required when using a PAT\n\npost_annotations_searches_response = stub.PostAnnotationsSearches(\n    service_pb2.PostAnnotationsSearchesRequest(\n        user_app_id=userDataObject,\n        searches = [\n            resources_pb2.Search(\n                query=resources_pb2.Query(\n                    filters=[\n                        resources_pb2.Filter(\n                            annotation=resources_pb2.Annotation(\n                                status=status_pb2.Status(\n                                    code=status_code_pb2.ANNOTATION_SUCCESS\n                                )\n                            )\n                        )\n                    ]\n                )\n            )\n        ],\n        pagination=service_pb2.Pagination(per_page=2, page=1)\n    ),\n    metadata=metadata\n)\n\nif post_annotations_searches_response.status.code != status_code_pb2.SUCCESS:\n    raise Exception(\"Post searches failed, status: \" + post_annotations_searches_response.status.description)\n\nprint(\"Search result:\")\nfor hit in post_annotations_searches_response.hits:\n    print(\"\\tScore %.2f for annotation: %s off input: %s\" % (hit.score, hit.annotation.id, hit.input.id))",h="##################################################################################\n# In this section, we set the user authentication, app ID, and the input details \n# we want to add. Change these strings to run your own example.\n##################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to add your own input with longitude and latitude points\nIMAGE_URL = 'https://samples.clarifai.com/dog.tiff'\nLONGITUDE = -30.0\nLATITUDE = 40.0\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID) # The userDataObject is required when using a PAT\n\npost_inputs_response = stub.PostInputs(\n    service_pb2.PostInputsRequest(\n        user_app_id=userDataObject,\n        inputs=[\n            resources_pb2.Input(\n                data=resources_pb2.Data(\n                    image=resources_pb2.Image(\n                        url=IMAGE_URL,\n                        allow_duplicate_url=True\n                    ),\n                    geo=resources_pb2.Geo(\n                        geo_point=resources_pb2.GeoPoint(\n                            longitude=LONGITUDE,\n                            latitude=LATITUDE,\n                        )\n                    )\n                )\n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif post_inputs_response.status.code != status_code_pb2.SUCCESS:\n    raise Exception(\"Post inputs failed, status: \" + post_inputs_response.status.description)\n",d="#####################################################################################\n# In this section, we set the user authentication, app ID, and details of the point \n# we want to perform a search with. Change these strings to run your own example.\n#####################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to perform your own search\nLONGITUDE = -29.0\nLATITUDE = 40.0\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID) # The userDataObject is required when using a PAT\n\npost_annotations_searches_response = stub.PostAnnotationsSearches(\n    service_pb2.PostAnnotationsSearchesRequest(\n        user_app_id=userDataObject,\n        searches = [\n            resources_pb2.Search(\n                query=resources_pb2.Query(\n                    filters=[\n                        resources_pb2.Filter(\n                            annotation=resources_pb2.Annotation(\n                                data=resources_pb2.Data(\n                                    geo=resources_pb2.Geo(\n                                        geo_point=resources_pb2.GeoPoint(\n                                            longitude=LONGITUDE,\n                                            latitude=LATITUDE,\n                                        ),\n                                        geo_limit=resources_pb2.GeoLimit(\n                                            type=\"withinKilometers\",\n                                            value=150.0\n                                        )\n                                    )\n                                )\n                            )\n                        )\n                    ]\n                )\n            )\n        ],\n        pagination=service_pb2.Pagination(per_page=2, page=1)\n    ),\n    metadata=metadata\n)\n\nif post_annotations_searches_response.status.code != status_code_pb2.SUCCESS:\n    raise Exception(\"Post searches failed, status: \" + post_annotations_searches_response.status.description)\n\nprint(\"Search result:\")\nfor hit in post_annotations_searches_response.hits:\n    print(\"\\tScore %.2f for annotation: %s off input: %s\" % (hit.score, hit.annotation.id, hit.input.id))",_="#####################################################################################\n# In this section, we set the user authentication, app ID, and details of the points \n# we want to perform a search with. Change these strings to run your own example.\n#####################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to perform your own search\nLONGITUDE_1 = -31.0\nLATITUDE_1 = 42.0\nLONGITUDE_2 = -29.0\nLATITUDE_2 = 39.0\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID) # The userDataObject is required when using a PAT\n\npost_annotations_searches_response = stub.PostAnnotationsSearches(\n    service_pb2.PostAnnotationsSearchesRequest(\n        user_app_id=userDataObject,\n        searches = [\n            resources_pb2.Search(\n                query=resources_pb2.Query(\n                    filters=[\n                        resources_pb2.Filter(\n                            annotation=resources_pb2.Annotation(\n                                data=resources_pb2.Data(\n                                    geo=resources_pb2.Geo(\n                                        geo_box=[\n                                            resources_pb2.GeoBoxedPoint(\n                                                geo_point=resources_pb2.GeoPoint(\n                                                    longitude=LONGITUDE_1,\n                                                    latitude=LATITUDE_1\n                                                ),\n                                            ),\n                                            resources_pb2.GeoBoxedPoint(\n                                                geo_point=resources_pb2.GeoPoint(\n                                                    longitude=LONGITUDE_2,\n                                                    latitude=LATITUDE_2\n                                                ),\n                                            ),\n                                        ]\n                                    )\n                                )\n                            )\n                        )\n                    ]\n                )\n            )\n        ],\n        pagination=service_pb2.Pagination(per_page=2, page=1)\n    ),\n    metadata=metadata\n)\n\nif post_annotations_searches_response.status.code != status_code_pb2.SUCCESS:\n    raise Exception(\"Post searches failed, status: \" + post_annotations_searches_response.status.description)\n\nprint(\"Search result:\")\nfor hit in post_annotations_searches_response.hits:\n    print(\"\\tScore %.2f for annotation: %s off input: %s\" % (hit.score, hit.annotation.id, hit.input.id))\n",A="################################################################\n# In this section, we set the user authentication and app ID. \n# Change these strings to run your own example.\n################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\nfrom google.protobuf.struct_pb2 import Struct\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID) # The userDataObject is required when using a PAT\n\nsearch_metadata = Struct()\nsearch_metadata.update({\"type\": \"animal\"})\n\npost_annotations_searches_response = stub.PostAnnotationsSearches(\n    service_pb2.PostAnnotationsSearchesRequest(\n        user_app_id=userDataObject,\n        searches = [\n            resources_pb2.Search(\n                query=resources_pb2.Query(\n                    filters=[\n                        resources_pb2.Filter(\n                            annotation=resources_pb2.Annotation(\n                                data=resources_pb2.Data(\n                                    metadata=search_metadata\n                                )\n                            )\n                        )\n                    ]\n                )\n            )\n        ],\n        pagination=service_pb2.Pagination(per_page=2, page=1)\n    ),\n    metadata=metadata\n)\n\nif post_annotations_searches_response.status.code != status_code_pb2.SUCCESS:\n    raise Exception(\"Post searches failed, status: \" + post_annotations_searches_response.status.description)\n\nprint(\"Search result:\")\nfor hit in post_annotations_searches_response.hits:\n    print(\"\\tScore %.2f for annotation: %s off input: %s\" % (hit.score, hit.annotation.id, hit.input.id))\n\n    ",f="################################################################\n# In this section, we set the user authentication and app ID. \n# Change these strings to run your own example.\n################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\nfrom google.protobuf.struct_pb2 import Struct\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID) # The userDataObject is required when using a PAT\n\nsearch_annotation_info = Struct()\nsearch_annotation_info.update({\"type\": \"animal\"})\n\npost_annotations_searches_response = stub.PostAnnotationsSearches(\n    service_pb2.PostAnnotationsSearchesRequest(\n        user_app_id=userDataObject,\n        searches = [\n            resources_pb2.Search(\n                query=resources_pb2.Query(\n                    filters=[\n                        resources_pb2.Filter(\n                            annotation=resources_pb2.Annotation(\n                                annotation_info=search_annotation_info\n                            )\n                        )\n                    ]\n                )\n            )\n        ],\n        pagination=service_pb2.Pagination(per_page=2, page=1)\n    ),\n    metadata=metadata\n)\n\nif post_annotations_searches_response.status.code != status_code_pb2.SUCCESS:\n    raise Exception(\"Post searches failed, status: \" + post_annotations_searches_response.status.description)\n\nprint(\"Search result:\")\nfor hit in post_annotations_searches_response.hits:\n    print(\"\\tScore %.2f for annotation: %s off input: %s\" % (hit.score, hit.annotation.id, hit.input.id))",E='\x3c!--index.html file--\x3e\n\n<script>\n    ///////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the concept we  \n    // we want to filter by. Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = \'YOUR_USER_ID_HERE\';\n    // Your PAT (Personal Access Token) can be found in the Account\'s Security section\n    const PAT = \'YOUR_PAT_HERE\';\n    const APP_ID = \'YOUR_APP_ID_HERE\';\n    // Change this to filter by your own concept\n    const CONCEPT_ID = \'people\';\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        "user_app_id": {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        "searches": [{\n            "query": {\n                "filters": [\n                    {\n                        "annotation": {\n                            "data": {\n                                "concepts": [\n                                    {\n                                        "id": CONCEPT_ID,\n                                        "value": 1\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            }\n        }]\n    });\n\n    const requestOptions = {\n        method: \'POST\',\n        headers: {\n            \'Accept\': \'application/json\',\n            \'Authorization\': \'Key \' + PAT\n        },\n        body: raw\n    };\n\n    fetch(`https://api.clarifai.com/v2/annotations/searches`, requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log(\'error\', error));\n\n<\/script>',g="\x3c!--index.html file--\x3e\n\n<script>\n    ///////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the ID of a   \n    // collaborator. Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = 'YOUR_USER_ID_HERE';\n    // Your PAT (Personal Access Token) can be found in the Account's Security section\n    const PAT = 'YOUR_PAT_HERE';\n    const APP_ID = 'YOUR_APP_ID_HERE';\n    // Change this to filter by user ID\n    const USER_ID_2 = 'COLLABORATOR_ID_HERE';\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        \"user_app_id\": {\n            \"user_id\": USER_ID,\n            \"app_id\": APP_ID\n        },\n        \"searches\": [{\n            \"query\": {\n                \"filters\": [\n                    {\n                        \"annotation\": {\n                            \"user_id\": USER_ID_2\n                        }\n                    }\n                ]\n            }\n        }]\n    });\n\n    const requestOptions = {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        },\n        body: raw\n    };\n\n    fetch(`https://api.clarifai.com/v2/annotations/searches`, requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n\n<\/script>",S='\x3c!--index.html file--\x3e\n\n<script>\n    ////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication and app ID.   \n    // Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////\n\n    const USER_ID = \'YOUR_USER_ID_HERE\';\n    // Your PAT (Personal Access Token) can be found in the Account\'s Security section\n    const PAT = \'YOUR_PAT_HERE\';\n    const APP_ID = \'YOUR_APP_ID_HERE\';\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        "user_app_id": {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        "searches": [{\n            "query": {\n                "filters": [\n                    {\n                        "annotation": {\n                            "status": {\n                                "code": "ANNOTATION_SUCCESS"\n                            }\n                        }\n                    }\n                ]\n            }\n        }]\n    });\n\n    const requestOptions = {\n        method: \'POST\',\n        headers: {\n            \'Accept\': \'application/json\',\n            \'Authorization\': \'Key \' + PAT\n        },\n        body: raw\n    };\n\n    fetch(`https://api.clarifai.com/v2/annotations/searches`, requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log(\'error\', error));\n\n<\/script>',I='\x3c!--index.html file--\x3e\n\n<script>\n    /////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the input details \n    // we want to add. Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = \'YOUR_USER_ID_HERE\';\n    // Your PAT (Personal Access Token) can be found in the Account\'s Security section\n    const PAT = \'YOUR_PAT_HERE\';\n    const APP_ID = \'YOUR_APP_ID_HERE\';\n    // Change these to add your own input with longitude and latitude points\n    const IMAGE_URL = \'https://samples.clarifai.com/dog.tiff\';\n    const LONGITUDE = -30.0;\n    const LATITUDE = 40.0;\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        "user_app_id": {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        "inputs": [\n            {\n                "data": {\n                    "image": {\n                        "url": IMAGE_URL,\n                        "allow_duplicate_url": true\n                    },\n                    "geo": {\n                        "geo_point": {\n                            "longitude": LONGITUDE,\n                            "latitude": LATITUDE\n                        }\n                    }\n                }\n            }\n        ]\n    });\n\n    const requestOptions = {\n        method: \'POST\',\n        headers: {\n            \'Accept\': \'application/json\',\n            \'Authorization\': \'Key \' + PAT\n        },\n        body: raw\n    };\n\n    fetch(`https://api.clarifai.com/v2/inputs`, requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log(\'error\', error));\n\n<\/script>',P='\x3c!--index.html file--\x3e\n\n<script>\n    ///////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and details of the point \n    // we want to perform a search with. Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = \'YOUR_USER_ID_HERE\';\n    // Your PAT (Personal Access Token) can be found in the Account\'s Security section\n    const PAT = \'YOUR_PAT_HERE\';\n    const APP_ID = \'YOUR_APP_ID_HERE\';\n    // Change these to perform your own search\n    const LONGITUDE = -29.0;\n    const LATITUDE = 40.0;\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        "user_app_id": {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        "searches": [\n            {\n                "query": {\n                    "filters": [\n                        {\n                            "annotation": {\n                                "data": {\n                                    "geo": {\n                                        "geo_point": {\n                                            "longitude": LONGITUDE,\n                                            "latitude": LATITUDE\n                                        },\n                                        "geo_limit": {\n                                            "type": "withinKilometers",\n                                            "value": 150.0\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n    });\n\n    const requestOptions = {\n        method: \'POST\',\n        headers: {\n            \'Accept\': \'application/json\',\n            \'Authorization\': \'Key \' + PAT\n        },\n        body: raw\n    };\n\n    fetch(`https://api.clarifai.com/v2/annotations/searches`, requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log(\'error\', error));\n\n<\/script>',m='\x3c!--index.html file--\x3e\n\n<script>\n    ///////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and details of the points \n    // we want to perform a search with. Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = \'YOUR_USER_ID_HERE\';\n    // Your PAT (Personal Access Token) can be found in the Account\'s Security section\n    const PAT = \'YOUR_PAT_HERE\';\n    const APP_ID = \'YOUR_APP_ID_HERE\';\n    // Change these to perform your own search\n    const LONGITUDE_1 = -31.0;\n    const LATITUDE_1 = 42.0;\n    const LONGITUDE_2 = -29.0;\n    const LATITUDE_2 = 39.0;\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        "user_app_id": {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        "searches": [\n            {\n                "query": {\n                    "filters": [\n                        {\n                            "annotation": {\n                                "data": {\n                                    "geo": {\n                                        "geo_box": [\n                                            {\n                                                "geo_point": {\n                                                    "latitude": LATITUDE_1,\n                                                    "longitude": LONGITUDE_1\n                                                }\n                                            },\n                                            {\n                                                "geo_point": {\n                                                    "latitude": LATITUDE_2,\n                                                    "longitude": LONGITUDE_2\n                                                }\n                                            }\n                                        ]\n                                    }\n                                }\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n    });\n\n    const requestOptions = {\n        method: \'POST\',\n        headers: {\n            \'Accept\': \'application/json\',\n            \'Authorization\': \'Key \' + PAT\n        },\n        body: raw\n    };\n\n    fetch(`https://api.clarifai.com/v2/annotations/searches`, requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log(\'error\', error));\n\n<\/script>',T='\x3c!--index.html file--\x3e\n\n<script>\n    //////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication and app ID. \n    // Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////\n\n    const USER_ID = \'YOUR_USER_ID_HERE\';\n    // Your PAT (Personal Access Token) can be found in the Account\'s Security section\n    const PAT = \'YOUR_PAT_HERE\';\n    const APP_ID = \'YOUR_APP_ID_HERE\';\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        "user_app_id": {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        "searches": [\n            {\n                "query": {\n                    "filters": [\n                        {\n                            "annotation": {\n                                "data": {\n                                    "metadata": {\n                                        "type": "animal"\n                                    }\n                                }\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n    });\n\n    const requestOptions = {\n        method: \'POST\',\n        headers: {\n            \'Accept\': \'application/json\',\n            \'Authorization\': \'Key \' + PAT\n        },\n        body: raw\n    };\n\n    fetch(`https://api.clarifai.com/v2/annotations/searches`, requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log(\'error\', error));\n\n<\/script>',R='\x3c!--index.html file--\x3e\n\n<script>\n    //////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication and app ID. \n    // Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////\n\n    const USER_ID = \'YOUR_USER_ID_HERE\';\n    // Your PAT (Personal Access Token) can be found in the Account\'s Security section\n    const PAT = \'YOUR_PAT_HERE\';\n    const APP_ID = \'YOUR_APP_ID_HERE\';\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        "user_app_id": {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        "searches": [\n            {\n                "query": {\n                    "filters": [\n                        {\n                            "annotation": {\n                                "annotation_info": {\n                                    "type": "animal"\n                                }\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n    });\n\n    const requestOptions = {\n        method: \'POST\',\n        headers: {\n            \'Accept\': \'application/json\',\n            \'Authorization\': \'Key \' + PAT\n        },\n        body: raw\n    };\n\n    fetch(`https://api.clarifai.com/v2/annotations/searches`, requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log(\'error\', error));\n\n<\/script>',D='//index.js file\n\n///////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the concept we  \n// we want to filter by. Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n// Change this to filter by your own concept\nconst CONCEPT_ID = \'people\';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PostAnnotationsSearches(\n    {\n\n        user_app_id: {  \n            user_id: USER_ID,          \n            app_id: APP_ID\n        },\n        searches: [\n            {\n                query: {\n                    filters: [\n                        {\n                            annotation: {\n                                data: {\n                                    concepts: [  // You can search by multiple concepts\n                                        {\n                                            id: CONCEPT_ID,  // You could search by concept Name as well\n                                            value: 1  // Value of 0 will search for images that don\'t have the concept\n                                        }\n                                    ]\n                                }\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post annotations searches failed, status: " + response.status.description);\n        }\n\n        console.log("Search result:");\n        for (const hit of response.hits) {\n            console.log("\\tScore " + hit.score + " for annotation: " + hit.annotation.id + " of input: ", hit.input.id);\n        }\n    }\n);',C='//index.js file\n\n///////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the ID of a   \n// collaborator. Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n// Change this to filter by user ID\nconst USER_ID_2 = \'COLLABORATOR_ID_HERE\';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PostAnnotationsSearches(\n    {\n        user_app_id: {\n            user_id: USER_ID,\n            app_id: APP_ID\n        },\n        searches: [\n            {\n                query: {\n                    filters: [\n                        {\n                            annotation: {\n                                user_id: USER_ID_2\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post annotations searches failed, status: " + response.status.description);\n        }\n\n        console.log("Search result:");\n        for (const hit of response.hits) {\n            console.log("\\tScore " + hit.score + " for annotation: " + hit.annotation.id + " of input: ", hit.input.id);\n        }\n    }\n);',w='//index.js file\n\n////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication and app ID.   \n// Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PostAnnotationsSearches(\n    {\n        user_app_id: {\n            user_id: USER_ID,\n            app_id: APP_ID\n        },\n        searches: [\n            {\n                query: {\n                    filters: [\n                        {\n                            annotation: {\n                                status: {\n                                    code: 24150\n                                }\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post annotations searches failed, status: " + response.status.description);\n        }\n\n        console.log("Search result:");\n        for (const hit of response.hits) {\n            console.log("\\tScore " + hit.score + " for annotation: " + hit.annotation.id + " of input: ", hit.input.id);\n        }\n    }\n);',b="//index.js file\n\n/////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the input details \n// we want to add. Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = 'YOUR_USER_ID_HERE';\n// Your PAT (Personal Access Token) can be found in the Account's Security section\nconst PAT = 'YOUR_PAT_HERE';\nconst APP_ID = 'YOUR_APP_ID_HERE';\n// Change these to add your own input with longitude and latitude points\nconst IMAGE_URL = 'https://samples.clarifai.com/dog.tiff';\nconst LONGITUDE = -30.0;\nconst LATITUDE = 40.0;\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require(\"clarifai-nodejs-grpc\");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set(\"authorization\", \"Key \" + PAT);\n\nstub.PostInputs(\n    {\n        user_app_id: {\n            user_id: USER_ID,\n            app_id: APP_ID\n        },\n        inputs: [\n            {\n                data: {\n                    image: { url: IMAGE_URL, allow_duplicate_url: true },\n                    geo: {\n                        geo_point: {\n                            longitude: LONGITUDE,\n                            latitude: LATITUDE\n                        }\n                    }\n                }\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error(\"Post inputs failed, status: \" + response.status.description);\n        }\n    }\n);",O='//index.js file\n\n///////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and details of the point \n// we want to perform a search with. Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n// Change these to perform your own search\nconst LONGITUDE = -29.0;\nconst LATITUDE = 40.0;\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PostAnnotationsSearches(\n    {\n        user_app_id: {\n            user_id: USER_ID,\n            app_id: APP_ID\n        },\n        searches: [\n            {\n                query: {\n                    filters: [\n                        {\n                            annotation: {\n                                data: {\n                                    geo: {\n                                        geo_point: {\n                                            longitude: LONGITUDE,\n                                            latitude: LATITUDE\n                                        },\n                                        geo_limit: {\n                                            type: "withinKilometers",\n                                            value: 150.0\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post annotations searches failed, status: " + response.status.description);\n        }\n\n        console.log("Search result:");\n        for (const hit of response.hits) {\n            console.log("\\tScore " + hit.score + " for annotation: " + hit.annotation.id + " of input: ", hit.input.id);\n        }\n    }\n);',U='//index.js file\n\n///////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and details of the points \n// we want to perform a search with. Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n// Change these to perform your own search\nconst LONGITUDE_1 = -31.0;\nconst LATITUDE_1 = 42.0;\nconst LONGITUDE_2 = -29.0;\nconst LATITUDE_2 = 39.0;\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PostAnnotationsSearches(\n    {\n        user_app_id: {\n            user_id: USER_ID,\n            app_id: APP_ID\n        },\n        searches: [\n            {\n                query: {\n                    filters: [\n                        {\n                            annotation: {\n                                data: {\n                                    geo: {\n                                        geo_box: [\n                                            {\n                                                geo_point: {\n                                                    longitude: LONGITUDE_1,\n                                                    latitude: LATITUDE_1\n                                                }\n                                            },\n                                            {\n                                                geo_point: {\n                                                    longitude: LONGITUDE_2,\n                                                    latitude: LATITUDE_2\n                                                }\n                                            }\n                                        ]\n                                    }\n                                }\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post annotations searches failed, status: " + response.status.description);\n        }\n\n        console.log("Search result:");\n        for (const hit of response.hits) {\n            console.log("\\tScore " + hit.score + " for annotation: " + hit.annotation.id + " of input: ", hit.input.id);\n        }\n    }\n);',N='//index.js file\n\n//////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication and app ID. \n// Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PostAnnotationsSearches(\n    {\n        user_app_id: {\n            user_id: USER_ID,\n            app_id: APP_ID\n        },\n        searches: [\n            {\n                query: {\n                    filters: [\n                        {\n                            annotation: {\n                                data: {\n                                    metadata: {\n                                        "type": "animal"\n                                    }\n                                }\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post annotations searches failed, status: " + response.status.description);\n        }\n\n        console.log("Search result:");\n        for (const hit of response.hits) {\n            console.log("\\tScore " + hit.score + " for annotation: " + hit.annotation.id + " of input: ", hit.input.id);\n        }\n    }\n);',y='//index.js file\n\n//////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication and app ID. \n// Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PostAnnotationsSearches(\n    {\n        user_app_id: {\n            user_id: USER_ID,\n            app_id: APP_ID\n        },\n        searches: [\n            {\n                query: {\n                    filters: [\n                        {\n                            annotation: {\n                                annotation_info: {\n                                    "type": "animal"\n                                }\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post annotations searches failed, status: " + response.status.description);\n        }\n\n        console.log("Search result:");\n        for (const hit of response.hits) {\n            console.log("\\tScore " + hit.score + " for annotation: " + hit.annotation.id + " of input: ", hit.input.id);\n        }\n    }\n);',H='package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the concept we  \n    // we want to filter by. Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change this to filter by your own concept\n    static final String CONCEPT_ID = "people";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiSearchResponse postAnnotationsSearchesResponse = stub.postAnnotationsSearches(\n            PostAnnotationsSearchesRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .addSearches(\n                Search.newBuilder().setQuery(\n                    Query.newBuilder().addFilters(\n                        Filter.newBuilder().setAnnotation(\n                            Annotation.newBuilder().setData(\n                                Data.newBuilder().addConcepts( // You can search by multiple concepts\n                                    Concept.newBuilder()\n                                    .setId(CONCEPT_ID) // You could search by concept Name as well\n                                    .setValue(1f) // Value of 0 will search for images that don\'t have the concept\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n            .build()\n        );\n\n        if (postAnnotationsSearchesResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post annotations searches failed, status: " + postAnnotationsSearchesResponse.getStatus());\n        }\n\n        System.out.println("Found inputs " + postAnnotationsSearchesResponse.getHitsCount() + ":");\n        for (Hit hit: postAnnotationsSearchesResponse.getHitsList()) {\n            System.out.printf("\\tScore %.2f for annotation %s of input %s\\n", hit.getScore(), hit.getAnnotation().getId(), hit.getInput().getId());\n        }\n\n    }\n\n}',x='package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the ID of a   \n    // collaborator. Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\t\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change this to filter by user ID\n    static final String USER_ID_2 = "COLLABORATOR_ID_HERE";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiSearchResponse postAnnotationsSearchesResponse = stub.postAnnotationsSearches(\n            PostAnnotationsSearchesRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .addSearches(\n                Search.newBuilder().setQuery(\n                    Query.newBuilder().addFilters(\n                        Filter.newBuilder().setAnnotation(\n                            Annotation.newBuilder().setUserId(USER_ID_2)\n                        )\n                    )\n                )\n            )\n            .build()\n        );\n\n        if (postAnnotationsSearchesResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post annotations searches failed, status: " + postAnnotationsSearchesResponse.getStatus());\n        }\n\n        System.out.println("Found inputs " + postAnnotationsSearchesResponse.getHitsCount() + ":");\n        for (Hit hit : postAnnotationsSearchesResponse.getHitsList()) {\n            System.out.printf("\\tScore %.2f for annotation %s of input %s\\n", hit.getScore(), hit.getAnnotation().getId(), hit.getInput().getId());\n        }\n\n    }\n\n}',j='package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.Status;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    ////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication and app ID.   \n    // Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiSearchResponse postAnnotationsSearchesResponse = stub.postAnnotationsSearches(\n            PostAnnotationsSearchesRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .addSearches(\n                Search.newBuilder().setQuery(\n                    Query.newBuilder().addFilters(\n                        Filter.newBuilder().setAnnotation(\n                            Annotation.newBuilder()\n                            .setStatus(\n                                Status.newBuilder()\n                                .setCodeValue(StatusCode.ANNOTATION_SUCCESS_VALUE)\n                                .build()\n                            )\n                        )\n                    )\n                )\n            )\n            .build()\n        );\n\n        if (postAnnotationsSearchesResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post annotations searches failed, status: " + postAnnotationsSearchesResponse.getStatus());\n        }\n\n        System.out.println("Found inputs " + postAnnotationsSearchesResponse.getHitsCount() + ":");\n        for (Hit hit: postAnnotationsSearchesResponse.getHitsList()) {\n            System.out.printf("\\tScore %.2f for annotation %s of input %s\\n", hit.getScore(), hit.getAnnotation().getId(), hit.getInput().getId());\n        }\n\n    }\n\n}',v='package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    /////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the input details \n    // we want to add. Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to add your own input with longitude and latitude points\n    static final String IMAGE_URL = "https://samples.clarifai.com/dog.tiff";\n    static final float LONGITUDE = -30.0f;\n    static final float LATITUDE = 40.0f;\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiInputResponse postInputsResponse = stub.postInputs(\n            PostInputsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .addInputs(\n                Input.newBuilder().setData(\n                    Data.newBuilder()\n                    .setImage(\n                        Image.newBuilder()\n                        .setUrl(IMAGE_URL)\n                        .setAllowDuplicateUrl(true)\n                    )\n                    .setGeo(\n                        Geo.newBuilder().setGeoPoint(\n                            GeoPoint.newBuilder()\n                            .setLongitude(LONGITUDE)\n                            .setLatitude(LATITUDE)\n                        )\n                    )\n                )\n            ).build()\n        );\n\n        if (postInputsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post inputs failed, status: " + postInputsResponse.getStatus());\n        }\n\n    }\n\n}',Y='package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    ///////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and details of the point \n    // we want to perform a search with. Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to perform your own search\n    static final float LONGITUDE = -29.0f;\n    static final float LATITUDE = 40.0f;\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiSearchResponse postAnnotationsSearchesResponse = stub.postAnnotationsSearches(\n            PostAnnotationsSearchesRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .addSearches(\n                Search.newBuilder().setQuery(\n                    Query.newBuilder().addFilters(\n                        Filter.newBuilder().setAnnotation(\n                            Annotation.newBuilder().setData(\n                                Data.newBuilder().setGeo(\n                                    Geo.newBuilder()\n                                    .setGeoPoint(\n                                        GeoPoint.newBuilder()\n                                        .setLongitude(LONGITUDE)\n                                        .setLatitude(LATITUDE)\n                                    )\n                                    .setGeoLimit(\n                                        GeoLimit.newBuilder()\n                                        .setType("withinKilometers")\n                                        .setValue(150.0f)\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n            .build()\n        );\n\n        if (postAnnotationsSearchesResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post annotations searches failed, status: " + postAnnotationsSearchesResponse.getStatus());\n        }\n\n        System.out.println("Found inputs " + postAnnotationsSearchesResponse.getHitsCount() + ":");\n        for (Hit hit : postAnnotationsSearchesResponse.getHitsList()) {\n            System.out.printf("\\tScore %.2f for annotation %s of input %s\\n", hit.getScore(), hit.getAnnotation().getId(), hit.getInput().getId());\n        }\n\n    }\n\n}',L='package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    ///////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and details of the points \n    // we want to perform a search with. Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to perform your own search\n    static final float LONGITUDE_1 = -31.0f;\n    static final float LATITUDE_1 = 42.0f;\n    static final float LONGITUDE_2 = -29.0f;\n    static final float LATITUDE_2 = 39.0f;\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiSearchResponse postAnnotationsSearchesResponse = stub.postAnnotationsSearches(\n            PostAnnotationsSearchesRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .addSearches(\n                Search.newBuilder().setQuery(\n                    Query.newBuilder().addFilters(\n                        Filter.newBuilder().setAnnotation(\n                            Annotation.newBuilder().setData(\n                                Data.newBuilder().setGeo(\n                                    Geo.newBuilder()\n                                    .addGeoBox(\n                                        GeoBoxedPoint.newBuilder().setGeoPoint(\n                                            GeoPoint.newBuilder()\n                                            .setLongitude(LONGITUDE_1)\n                                            .setLatitude(LATITUDE_1)\n                                        )\n                                    )\n                                    .addGeoBox(\n                                        GeoBoxedPoint.newBuilder().setGeoPoint(\n                                            GeoPoint.newBuilder()\n                                            .setLongitude(LONGITUDE_2)\n                                            .setLatitude(LATITUDE_2)\n                                        ).build()\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n            .build()\n        );\n\n        if (postAnnotationsSearchesResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post annotations searches failed, status: " + postAnnotationsSearchesResponse.getStatus());\n        }\n\n        System.out.println("Found inputs " + postAnnotationsSearchesResponse.getHitsCount() + ":");\n        for (Hit hit : postAnnotationsSearchesResponse.getHitsList()) {\n            System.out.printf("\\tScore %.2f for annotation %s of input %s\\n", hit.getScore(), hit.getAnnotation().getId(), hit.getInput().getId());\n        }\n\n    }\n\n}',$='package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.StatusCode;\nimport com.google.protobuf.Struct;\nimport com.google.protobuf.Value;\n\npublic class ClarifaiExample {\n\n    //////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication and app ID. \n    // Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiSearchResponse postAnnotationsSearchesResponse = stub.postAnnotationsSearches(\n            PostAnnotationsSearchesRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .addSearches(\n                Search.newBuilder().setQuery(\n                    Query.newBuilder().addFilters(\n                        Filter.newBuilder().setAnnotation(\n                            Annotation.newBuilder().setData(\n                                Data.newBuilder().setMetadata(\n                                    Struct.newBuilder()\n                                    .putFields("type", Value.newBuilder().setStringValue("animal").build())\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n            .build()\n        );\n\n        if (postAnnotationsSearchesResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post annotations searches failed, status: " + postAnnotationsSearchesResponse.getStatus());\n        }\n\n        System.out.println("Found inputs " + postAnnotationsSearchesResponse.getHitsCount() + ":");\n        for (Hit hit : postAnnotationsSearchesResponse.getHitsList()) {\n            System.out.printf("\\tScore %.2f for annotation %s of input %s\\n", hit.getScore(), hit.getAnnotation().getId(), hit.getInput().getId());\n        }\n\n    }\n\n}',G='package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.StatusCode;\nimport com.google.protobuf.Struct;\nimport com.google.protobuf.Value;\n\npublic class ClarifaiExample {\n\n    //////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication and app ID. \n    // Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiSearchResponse postAnnotationsSearchesResponse = stub.postAnnotationsSearches(\n            PostAnnotationsSearchesRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .addSearches(\n                Search.newBuilder().setQuery(\n                    Query.newBuilder().addFilters(\n                        Filter.newBuilder().setAnnotation(\n                            Annotation.newBuilder().setAnnotationInfo(\n                                Struct.newBuilder()\n                                .putFields("type", Value.newBuilder().setStringValue("animal").build())\n                            )\n                        )\n                    )\n                )\n            )\n            .build()\n        );\n\n        if (postAnnotationsSearchesResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post annotations searches failed, status: " + postAnnotationsSearchesResponse.getStatus());\n        }\n\n        System.out.println("Found inputs " + postAnnotationsSearchesResponse.getHitsCount() + ":");\n        for (Hit hit : postAnnotationsSearchesResponse.getHitsList()) {\n            System.out.printf("\\tScore %.2f for annotation %s of input %s\\n", hit.getScore(), hit.getAnnotation().getId(), hit.getInput().getId());\n        }\n\n    }\n\n}',q='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the concept we  \n// we want to filter by. Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change this to filter by your own concept\n$CONCEPT_ID = "people";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\PostAnnotationsSearchesRequest;\nuse Clarifai\\Api\\Annotation;\nuse Clarifai\\Api\\Concept;\nuse Clarifai\\Api\\Data;\nuse Clarifai\\Api\\Filter;\nuse Clarifai\\Api\\Query;\nuse Clarifai\\Api\\Search;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PostAnnotationsSearches(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new PostAnnotationsSearchesRequest([\n        "user_app_id" => $userDataObject,\n        "searches" => [\n            new Search([\n                "query" => new Query([\n                    "filters" => [\n                        new Filter([\n                            "annotation" => new Annotation([\n                                "data" => new Data([\n                                    "concepts" => [  # You can search by multiple concepts\n                                        new Concept([\n                                            "id" => $CONCEPT_ID, # You could search by concept id as well\n                                            "value" => 1 # Value of 0 will search for images that don\'t have the concept\n                                        ])\n                                    ]\n                                ])\n                            ])                            \n                        ])\n                    ]\n                ])\n            ])\n        ]\n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\necho "Search result:\\n";\nforeach ($response->getHits() as $hit) {\n    printf("\\tScore %.2f for annotation: %s off input: %s\\n", $hit->getScore(), $hit->getAnnotation()->getId(), $hit->getInput()->getId());\n}\n\n?>\n',B='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the ID of a   \n// collaborator. Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n# Change this to filter by user ID\n$USER_ID_2 = "COLLABORATOR_ID_HERE";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\PostAnnotationsSearchesRequest;\nuse Clarifai\\Api\\Annotation;\nuse Clarifai\\Api\\Filter;\nuse Clarifai\\Api\\Query;\nuse Clarifai\\Api\\Search;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PostAnnotationsSearches(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new PostAnnotationsSearchesRequest([\n        "user_app_id" => $userDataObject,\n        "searches" => [\n            new Search([\n                "query" => new Query([\n                    "filters" => [\n                        new Filter([\n                            "annotation" => new Annotation([\n                                "user_id"=> $USER_ID_2\n                            ])                            \n                        ])\n                    ]\n                ])\n            ])\n        ]\n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\necho "Search result:\\n";\nforeach ($response->getHits() as $hit) {\n    printf("\\tScore %.2f for annotation: %s off input: %s\\n", $hit->getScore(), $hit->getAnnotation()->getId(), $hit->getInput()->getId());\n}\n\n?>\n',k='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n/////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication and app ID.   \n// Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\PostAnnotationsSearchesRequest;\nuse Clarifai\\Api\\Annotation;\nuse Clarifai\\Api\\Filter;\nuse Clarifai\\Api\\Query;\nuse Clarifai\\Api\\Search;\nuse Clarifai\\Api\\Status\\Status;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PostAnnotationsSearches(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new PostAnnotationsSearchesRequest([\n        "user_app_id" => $userDataObject,\n        "searches" => [\n            new Search([\n                "query" => new Query([\n                    "filters" => [\n                        new Filter([\n                            "annotation" => new Annotation([\n                                "status"=> new Status([\n                                    "code" => 24150\n                                ])\n                            ])                            \n                        ])\n                    ]\n                ])\n            ])\n        ]\n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\necho "Search result:\\n";\nforeach ($response->getHits() as $hit) {\n    printf("\\tScore %.2f for annotation: %s off input: %s\\n", $hit->getScore(), $hit->getAnnotation()->getId(), $hit->getInput()->getId());\n}\n\n?>\n',M='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n///////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the input details \n// we want to add. Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change these to add your own input with longitude and latitude points\n$IMAGE_URL = "https://samples.clarifai.com/dog.tiff";\n$LONGITUDE = -30.0;\n$LATITUDE = 40.0;\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\Data;\nuse Clarifai\\Api\\Image;\nuse Clarifai\\Api\\Input;\nuse Clarifai\\Api\\Geo;\nuse Clarifai\\Api\\GeoPoint;\nuse Clarifai\\Api\\PostInputsRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT ]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID, \n    "app_id" => $APP_ID \n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PostInputs(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new PostInputsRequest([\n        "user_app_id" => $userDataObject,\n        "inputs" => [\n            new Input([ // The Input object wraps the Data object in order to meet the API specification                \n                "data" => new Data([ // The Data object is constructed around the Image object. It offers a container that has additional image independent\n                                    // metadata. In this particular use case, no other metadata is needed to be specified\n                    "image" => new Image([ // In the Clarifai platform, an image is defined by a special Image object\n                        \'url\' => $IMAGE_URL,\n                        \'allow_duplicate_url\' => true\n                    ]),\n                    "geo" => new Geo([\n                        "geo_point" => new GeoPoint([\n                            "longitude" => $LONGITUDE,\n                            "latitude"  => $LATITUDE\n                        ])\n                    ])\n                ])\n            ])\n        ]        \n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription() . " " .\n        $response->getStatus()->getDetails());\n}\n\n?>\n',V='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n/////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and details of the point \n// we want to perform a search with. Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change these to perform your own search\n$LONGITUDE = -29.0;\n$LATITUDE = 40.0;\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\PostAnnotationsSearchesRequest;\nuse Clarifai\\Api\\Annotation;\nuse Clarifai\\Api\\Concept;\nuse Clarifai\\Api\\Data;\nuse Clarifai\\Api\\Filter;\nuse Clarifai\\Api\\Geo;\nuse Clarifai\\Api\\GeoLimit;\nuse Clarifai\\Api\\GeoPoint;\nuse Clarifai\\Api\\Query;\nuse Clarifai\\Api\\Search;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PostAnnotationsSearches(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new PostAnnotationsSearchesRequest([\n        "user_app_id" => $userDataObject,\n        "searches" => [\n            new Search([\n                "query" => new Query([\n                    "filters" => [\n                        new Filter([\n                            "annotation" => new Annotation([\n                                "data" => new Data([\n                                    "geo" => new Geo([\n                                        "geo_point" => new GeoPoint([\n                                            "longitude" => $LONGITUDE,\n                                            "latitude" => $LATITUDE\n                                        ]),\n                                        "geo_limit" => new GeoLimit([\n                                            "type" => "withinKilometers",\n                                            "value" => 150.0\n                                        ])\n                                    ])\n\n                                ])\n                            ])                            \n                        ])\n                    ]\n                ])\n            ])\n        ]\n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\necho "Search result:\\n";\nforeach ($response->getHits() as $hit) {\n    printf("\\tScore %.2f for annotation: %s off input: %s\\n", $hit->getScore(), $hit->getAnnotation()->getId(), $hit->getInput()->getId());\n}\n\n?>\n',F='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n/////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and details of the points \n// we want to perform a search with. Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change these to perform your own search\n$LONGITUDE_1 = -31.0;\n$LATITUDE_1 = 42.0;\n$LONGITUDE_2 = -29.0;\n$LATITUDE_2 = 39.0;\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\PostAnnotationsSearchesRequest;\nuse Clarifai\\Api\\Annotation;\nuse Clarifai\\Api\\Data;\nuse Clarifai\\Api\\Filter;\nuse Clarifai\\Api\\Geo;\nuse Clarifai\\Api\\GeoLimit;\nuse Clarifai\\Api\\GeoPoint;\nuse Clarifai\\Api\\GeoBoxedPoint;\nuse Clarifai\\Api\\Query;\nuse Clarifai\\Api\\Search;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PostAnnotationsSearches(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new PostAnnotationsSearchesRequest([\n        "user_app_id" => $userDataObject,\n        "searches" => [\n            new Search([\n                "query" => new Query([\n                    "filters" => [\n                        new Filter([\n                            "annotation" => new Annotation([\n                                "data" => new Data([\n                                    "geo" => new Geo([\n                                        "geo_box" => [\n                                            new GeoBoxedPoint([\n                                                "geo_point" => new GeoPoint([\n                                                    "longitude" => $LONGITUDE_1,\n                                                    "latitude" => $LATITUDE_1                                                \n                                                ])\n                                            ]),\n                                            new GeoBoxedPoint([\n                                                "geo_point" => new GeoPoint([\n                                                    "longitude" => $LONGITUDE_2,\n                                                    "latitude" => $LATITUDE_2\n                                                ])\n                                            ])\n\n                                        ]\n\n                                    ])\n\n                                ])\n                            ])                            \n                        ])\n                    ]\n                ])\n            ])\n        ]\n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\necho "Search result:\\n";\nforeach ($response->getHits() as $hit) {\n    printf("\\tScore %.2f for annotation: %s off input: %s\\n", $hit->getScore(), $hit->getAnnotation()->getId(), $hit->getInput()->getId());\n}\n\n?>\n',K='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n//////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication and app ID. \n// Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\PostAnnotationsSearchesRequest;\nuse Clarifai\\Api\\Annotation;\nuse Clarifai\\Api\\Data;\nuse Clarifai\\Api\\Filter;\nuse Clarifai\\Api\\Query;\nuse Clarifai\\Api\\Search;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\nuse Google\\Protobuf\\Struct;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// create Struct instance\n$params = new Struct();\n$params->type = "animal";\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PostAnnotationsSearches(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new PostAnnotationsSearchesRequest([\n        "user_app_id" => $userDataObject,\n        "searches" => [\n            new Search([\n                "query" => new Query([\n                    "filters" => [\n                        new Filter([\n                            "annotation" => new Annotation([\n                                "data" => new Data([\n                                    "metadata" => $params\n                                ])\n                            ])                            \n                        ])\n                    ]\n                ])\n            ])\n        ]\n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\necho "Search result:\\n";\nforeach ($response->getHits() as $hit) {\n    printf("\\tScore %.2f for annotation: %s off input: %s\\n", $hit->getScore(), $hit->getAnnotation()->getId(), $hit->getInput()->getId());\n}\n\n?>\n',W='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n//////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication and app ID. \n// Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\PostAnnotationsSearchesRequest;\nuse Clarifai\\Api\\Annotation;\nuse Clarifai\\Api\\Data;\nuse Clarifai\\Api\\Filter;\nuse Clarifai\\Api\\Query;\nuse Clarifai\\Api\\Search;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\nuse Google\\Protobuf\\Struct;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// create Struct instance\n$params = new Struct();\n$params->type = "animal";\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PostAnnotationsSearches(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new PostAnnotationsSearchesRequest([\n        "user_app_id" => $userDataObject,\n        "searches" => [\n            new Search([\n                "query" => new Query([\n                    "filters" => [\n                        new Filter([\n                            "annotation" => new Annotation([\n                                "annotation_info" => $params\n                            ])                            \n                        ])\n                    ]\n                ])\n            ])\n        ]\n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\necho "Search result:\\n";\nforeach ($response->getHits() as $hit) {\n    printf("\\tScore %.2f for annotation: %s off input: %s\\n", $hit->getScore(), $hit->getAnnotation()->getId(), $hit->getInput()->getId());\n}\n\n?>\n',X='# Value of 0 will search for images that don\'t have the concept.\n# Instead of "id", you can search by "name" as well.\n\ncurl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/annotations/searches" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "searches": [{\n      "query": {\n        "filters": [\n          {\n            "annotation": {\n              "data": {\n                "concepts": [\n                  {\n                    "id":"people",\n                    "value": 1\n                  }\n                ]\n              }\n            }\n          }\n        ]\n      }\n    }]\n  }\'',z='curl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/annotations/searches" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "searches": [{\n      "query": {\n        "filters": [\n          {\n            "annotation": {\n              "user_id": "COLLABORATOR_ID_HERE"\n            }\n          }\n        ]\n      }\n    }]\n  }\'',J='curl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/annotations/searches" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "searches": [{\n      "query": {\n        "filters": [\n          {\n            "annotation": {\n              "status": {\n                "code": "ANNOTATION_SUCCESS"\n              }          \n            }\n          }\n        ]\n      }\n    }]\n  }\'',Q='curl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/inputs" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "inputs": [\n      {\n        "data": {\n          "image": {\n            "url": "https://samples.clarifai.com/dog.tiff",\n            "allow_duplicate_url": true\n          },\n          "geo": {\n            "geo_point": {\n              "longitude": -30,\n              "latitude": 40\n            }\n          }\n        }\n      }\n    ]\n  }\'\n  ',Z='curl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/annnotations/searches"  \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "searches": [\n      {\n        "query": {\n          "filters": [\n            {\n            "annotation": {\n                "data": {\n                "geo": {\n                    "geo_point": {\n                    "longitude": -29.0,\n                    "latitude": 40.0\n                    },\n                    "geo_limit": {\n                    "type": "withinKilometers",\n                    "value": 150\n                    }\n                }\n              }\n            }\n          }\n        ]\n        }\n      }\n    ]\n  }\'',nn='curl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/annnotations/searches" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "searches": [\n      {\n        "query": {\n        "filters": [\n            {\n            "annotation": {\n                "data": {\n                "geo": {\n                    "geo_box": [\n                    {\n                        "geo_point": {\n                        "latitude": 42,\n                        "longitude": -31\n                        }\n                    },\n                    {\n                        "geo_point": {\n                        "latitude": 39,\n                        "longitude": -29\n                        }\n                    }\n                    ]\n                }\n                }\n            }\n            }\n        ]\n        }       \n      }\n    ]\n  }\'',en='curl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/annnotations/searches" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "searches": [\n      {\n        "query": {\n        "filters": [\n            {\n            "annotation": {\n                "data": {\n                "metadata": {\n                    "type": "animal"\n                }\n                }\n            }\n            }\n        ]\n        }\n      }\n    ]\n  }\'',tn='curl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/annnotations/searches" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "searches": [\n      {\n        "query": {\n        "filters": [\n            {\n            "annotation": {\n                "annotation_info": {\n                "type": "animal"\n                }\n            }\n            }\n        ]\n        }\n      }\n    ]\n  }\'',an={description:"Select a subset of your data based on useful filters.",sidebar_position:3},sn="Filter",on={},rn=[{value:"By Custom Concepts",id:"by-custom-concepts",level:2},{value:"By User ID",id:"by-user-id",level:2},{value:"By Annotation Status",id:"by-annotation-status",level:2},{value:"By Geo Location",id:"by-geo-location",level:2},{value:"Add Inputs With Longitude and Latitude Points",id:"add-inputs-with-longitude-and-latitude-points",level:3},{value:"Perform a Search With One Geo Point and Radius in Kilometers",id:"perform-a-search-with-one-geo-point-and-radius-in-kilometers",level:3},{value:"Perform a Search With Two Geo Points",id:"perform-a-search-with-two-geo-points",level:3},{value:"By Custom Metadata",id:"by-custom-metadata",level:2},{value:"By Annotation Info",id:"by-annotation-info",level:2}];function cn(n){const e={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"filter",children:"Filter"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Select a subset of your data based on useful filters"})}),"\n",(0,s.jsx)("hr",{}),"\n",(0,s.jsx)(e.p,{children:"You can filter and customize your search results to find exactly what you want. Filtering helps you reduce the amount of data returned in search results by removing irrelevant content, or by allowing you to select a specific subset of your data."}),"\n",(0,s.jsxs)(e.p,{children:["In annotation search, ",(0,s.jsx)(e.code,{children:"Filter"})," is a list of ",(0,s.jsx)(e.code,{children:"Annotation"})," objects."]}),"\n",(0,s.jsx)(e.admonition,{type:"info",children:(0,s.jsxs)(e.p,{children:["The initialization code used in the following examples is outlined in detail on the ",(0,s.jsx)(e.a,{href:"https://docs.clarifai.com/api-guide/api-overview/api-clients/#client-installation-instructions",children:"client installation page."})]})}),"\n",(0,s.jsx)(e.admonition,{type:"tip",children:(0,s.jsxs)(e.p,{children:["You can learn how to paginate your API requests results ",(0,s.jsx)(e.a,{href:"https://docs.clarifai.com/api-guide/advanced-topics/pagination/",children:"here"}),"."]})}),"\n","\n","\n","\n","\n","\n","\n","\n",(0,s.jsx)(e.h2,{id:"by-custom-concepts",children:"By Custom Concepts"}),"\n",(0,s.jsx)(e.p,{children:"After you annotate inputs with custom concepts, you can filter by concepts."}),"\n",(0,s.jsxs)(e.admonition,{title:"train a model",type:"caution",children:[(0,s.jsxs)(e.p,{children:["When performing a search with custom concepts, ensure that these concepts are first trained using an ",(0,s.jsx)(e.code,{children:"embedding-classifier"})," model (",(0,s.jsx)(e.a,{href:"https://docs.clarifai.com/portal-guide/model/model-types/transfer-learning/",children:"transfer-learning"})," model). Without this training, the search query will result in an error."]}),(0,s.jsx)(e.p,{children:"Training a model generates embeddings for each custom concept. These concept embeddings are then utilized in the search process."})]}),"\n",(0,s.jsxs)(o.A,{children:[(0,s.jsx)(r.A,{value:"python",label:"Python",children:(0,s.jsx)(c.A,{className:"language-python",children:l})}),(0,s.jsx)(r.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:E})}),(0,s.jsx)(r.A,{value:"nodejs",label:"NodeJS",children:(0,s.jsx)(c.A,{className:"language-javascript",children:D})}),(0,s.jsx)(r.A,{value:"java",label:"Java",children:(0,s.jsx)(c.A,{className:"language-java",children:H})}),(0,s.jsx)(r.A,{value:"php",label:"PHP",children:(0,s.jsx)(c.A,{className:"language-php",children:q})}),(0,s.jsx)(r.A,{value:"curl",label:"cURL",children:(0,s.jsx)(c.A,{className:"language-bash",children:X})})]}),"\n",(0,s.jsx)(e.h2,{id:"by-user-id",children:"By User ID"}),"\n",(0,s.jsx)(e.p,{children:"If you have collaborators in your app and they helped you annotate your inputs, you can also filter annotations by their user ID."}),"\n",(0,s.jsxs)(o.A,{children:[(0,s.jsx)(r.A,{value:"python",label:"Python",children:(0,s.jsx)(c.A,{className:"language-python",children:u})}),(0,s.jsx)(r.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:g})}),(0,s.jsx)(r.A,{value:"nodejs",label:"NodeJS",children:(0,s.jsx)(c.A,{className:"language-javascript",children:C})}),(0,s.jsx)(r.A,{value:"java",label:"Java",children:(0,s.jsx)(c.A,{className:"language-java",children:x})}),(0,s.jsx)(r.A,{value:"php",label:"PHP",children:(0,s.jsx)(c.A,{className:"language-php",children:B})}),(0,s.jsx)(r.A,{value:"curl",label:"cURL",children:(0,s.jsx)(c.A,{className:"language-bash",children:z})})]}),"\n",(0,s.jsx)(e.h2,{id:"by-annotation-status",children:"By Annotation Status"}),"\n",(0,s.jsxs)(e.p,{children:["You can also filter the annotations by their ",(0,s.jsx)(e.a,{href:"https://docs.clarifai.com/api-guide/advanced-topics/status-codes/#annotation-related-codes-24xxx",children:"status"}),"."]}),"\n",(0,s.jsxs)(o.A,{children:[(0,s.jsx)(r.A,{value:"python",label:"Python",children:(0,s.jsx)(c.A,{className:"language-python",children:p})}),(0,s.jsx)(r.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:S})}),(0,s.jsx)(r.A,{value:"nodejs",label:"NodeJS",children:(0,s.jsx)(c.A,{className:"language-javascript",children:w})}),(0,s.jsx)(r.A,{value:"java",label:"Java",children:(0,s.jsx)(c.A,{className:"language-java",children:j})}),(0,s.jsx)(r.A,{value:"php",label:"PHP",children:(0,s.jsx)(c.A,{className:"language-php",children:k})}),(0,s.jsx)(r.A,{value:"curl",label:"cURL",children:(0,s.jsx)(c.A,{className:"language-bash",children:J})})]}),"\n",(0,s.jsx)(e.h2,{id:"by-geo-location",children:"By Geo Location"}),"\n",(0,s.jsx)(e.p,{children:"Search by geo location allows you to restrict your search results to a bounding box based on longitude and latitude points. There are two ways you can provide longitude/latitude points. You can provide one point and a radius or you can provide two points."}),"\n",(0,s.jsx)(e.p,{children:"It is important to note that a search by geo location acts as a filter and returns results ranked by any other provided search criteria, whether that is a visual search, concept search, or something else. If no other criterion is provided, results will return in the order the inputs were created, NOT by their distance to the center of the search area."}),"\n",(0,s.jsxs)(e.p,{children:['If you are providing one point and a radius, the radius can be in "mile", "kilometer", "degree", or "radian", marked by keywords ',(0,s.jsx)(e.code,{children:"withinMiles"}),", ",(0,s.jsx)(e.code,{children:"withinKilometers"}),", ",(0,s.jsx)(e.code,{children:"withinDegrees"}),", or ",(0,s.jsx)(e.code,{children:"withinRadians"})," respectively."]}),"\n",(0,s.jsx)(e.p,{children:"If you are providing two points, a box will be drawn from the uppermost point to the lowermost point, and the leftmost point to the rightmost point."}),"\n",(0,s.jsx)(e.p,{children:"Before you perform a search by geo location, make sure you have added inputs with longitude and latitude points."}),"\n",(0,s.jsx)(e.h3,{id:"add-inputs-with-longitude-and-latitude-points",children:"Add Inputs With Longitude and Latitude Points"}),"\n",(0,s.jsx)(e.p,{children:"Provide a geo point to an input. The geo point is a JSON object consisting of a longitude and a latitude in GPS coordinate system (SRID 4326). There can be at most one single geo point associated with each input."}),"\n",(0,s.jsxs)(o.A,{children:[(0,s.jsx)(r.A,{value:"python",label:"Python",children:(0,s.jsx)(c.A,{className:"language-python",children:h})}),(0,s.jsx)(r.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:I})}),(0,s.jsx)(r.A,{value:"nodejs",label:"NodeJS",children:(0,s.jsx)(c.A,{className:"language-javascript",children:b})}),(0,s.jsx)(r.A,{value:"java",label:"Java",children:(0,s.jsx)(c.A,{className:"language-java",children:v})}),(0,s.jsx)(r.A,{value:"php",label:"PHP",children:(0,s.jsx)(c.A,{className:"language-php",children:M})}),(0,s.jsx)(r.A,{value:"curl",label:"cURL",children:(0,s.jsx)(c.A,{className:"language-bash",children:Q})})]}),"\n",(0,s.jsx)(e.h3,{id:"perform-a-search-with-one-geo-point-and-radius-in-kilometers",children:"Perform a Search With One Geo Point and Radius in Kilometers"}),"\n",(0,s.jsxs)(o.A,{children:[(0,s.jsx)(r.A,{value:"python",label:"Python",children:(0,s.jsx)(c.A,{className:"language-python",children:d})}),(0,s.jsx)(r.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:P})}),(0,s.jsx)(r.A,{value:"nodejs",label:"NodeJS",children:(0,s.jsx)(c.A,{className:"language-javascript",children:O})}),(0,s.jsx)(r.A,{value:"java",label:"Java",children:(0,s.jsx)(c.A,{className:"language-javascript",children:Y})}),(0,s.jsx)(r.A,{value:"php",label:"PHP",children:(0,s.jsx)(c.A,{className:"language-php",children:V})}),(0,s.jsx)(r.A,{value:"curl",label:"cURL",children:(0,s.jsx)(c.A,{className:"language-bash",children:Z})})]}),"\n",(0,s.jsx)(e.h3,{id:"perform-a-search-with-two-geo-points",children:"Perform a Search With Two Geo Points"}),"\n",(0,s.jsxs)(o.A,{children:[(0,s.jsx)(r.A,{value:"python",label:"Python",children:(0,s.jsx)(c.A,{className:"language-python",children:_})}),(0,s.jsx)(r.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:m})}),(0,s.jsx)(r.A,{value:"nodejs",label:"NodeJS",children:(0,s.jsx)(c.A,{className:"language-javascript",children:U})}),(0,s.jsx)(r.A,{value:"java",label:"Java",children:(0,s.jsx)(c.A,{className:"language-java",children:L})}),(0,s.jsx)(r.A,{value:"php",label:"PHP",children:(0,s.jsx)(c.A,{className:"language-php",children:F})}),(0,s.jsx)(r.A,{value:"curl",label:"cURL",children:(0,s.jsx)(c.A,{className:"language-bash",children:nn})})]}),"\n",(0,s.jsx)(e.h2,{id:"by-custom-metadata",children:"By Custom Metadata"}),"\n",(0,s.jsx)(e.p,{children:"After you have added inputs with custom metadata, you can search by that metadata."}),"\n",(0,s.jsxs)(e.p,{children:["Below is an example of searching over custom metadata. You can exact match any ",(0,s.jsx)(e.code,{children:"key"}),": ",(0,s.jsx)(e.code,{children:"value"})," pair no matter how nested it is."]}),"\n",(0,s.jsx)(e.p,{children:"For example, if the metadata on an input is:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:'{\n  "keyname": "value1",\n  "somelist": [1,2,3],\n  "somenesting": {\n     "keyname2":"value2",\n     "list2":[4,5]\n   }\n}\n'})}),"\n",(0,s.jsx)(e.p,{children:"Then the following searches will find this:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:'{\n  "keyname": "value1"\n}\n'})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:'{\n  "somelist": [1,2,3]\n}\n'})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:'{\n  "somelist": [1,2]\n}\n'})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:'{\n  "somenesting": {"keyname2":"value2"}\n}\n'})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:'{\n  "somenesting": {"list2":[5]}\n}\n'})}),"\n",(0,s.jsx)(e.p,{children:"How to perform searches:"}),"\n",(0,s.jsxs)(o.A,{children:[(0,s.jsx)(r.A,{value:"python",label:"Python",children:(0,s.jsx)(c.A,{className:"language-python",children:A})}),(0,s.jsx)(r.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:T})}),(0,s.jsx)(r.A,{value:"nodejs",label:"NodeJS",children:(0,s.jsx)(c.A,{className:"language-javascript",children:N})}),(0,s.jsx)(r.A,{value:"java",label:"Java",children:(0,s.jsx)(c.A,{className:"language-java",children:$})}),(0,s.jsx)(r.A,{value:"php",label:"PHP",children:(0,s.jsx)(c.A,{className:"language-php",children:K})}),(0,s.jsx)(r.A,{value:"curl",label:"cURL",children:(0,s.jsx)(c.A,{className:"language-bash",children:en})})]}),"\n",(0,s.jsx)(e.h2,{id:"by-annotation-info",children:"By Annotation Info"}),"\n",(0,s.jsx)(e.p,{children:"Each annotation has annotation info. Similar to metadata, you have full control of this field and can be any arbitrary JSON."}),"\n",(0,s.jsxs)(o.A,{children:[(0,s.jsx)(r.A,{value:"python",label:"Python",children:(0,s.jsx)(c.A,{className:"language-python",children:f})}),(0,s.jsx)(r.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:R})}),(0,s.jsx)(r.A,{value:"nodejs",label:"NodeJS",children:(0,s.jsx)(c.A,{className:"language-javascript",children:y})}),(0,s.jsx)(r.A,{value:"java",label:"Java",children:(0,s.jsx)(c.A,{className:"language-java",children:G})}),(0,s.jsx)(r.A,{value:"php",label:"PHP",children:(0,s.jsx)(c.A,{className:"language-php",children:W})}),(0,s.jsx)(r.A,{value:"curl",label:"cURL",children:(0,s.jsx)(c.A,{className:"language-bash",children:tn})})]})]})}function ln(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(cn,{...n})}):cn(n)}}}]);
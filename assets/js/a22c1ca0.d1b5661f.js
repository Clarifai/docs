"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[5848],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>h});var r=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var p=r.createContext({}),s=function(e){var t=r.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},d=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,p=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=s(a),h=n,v=u["".concat(p,".").concat(h)]||u[h]||c[h]||i;return a?r.createElement(v,o(o({ref:t},d),{},{components:a})):r.createElement(v,o({ref:t},d))}));function h(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,o=new Array(i);o[0]=u;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:n,o[1]=l;for(var s=2;s<i;s++)o[s]=a[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,a)}u.displayName="MDXCreateElement"},96405:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var r=a(87462),n=(a(67294),a(3905));const i={},o="Clarifai Scribe Labeler Export",l={unversionedId:"api-guide/advanced-topics/export_labels",id:"api-guide/advanced-topics/export_labels",title:"Clarifai Scribe Labeler Export",description:"This Python script allows you to export labeled data from Clarifai's Scribe labeler. The exported data can be saved as a ZIP archive or in a filesystem directory. The script provides two main classes, DatasetExportReader and InputDownloader, that handle the data export and download processes, respectively.",source:"@site/docs/api-guide/advanced-topics/export_labels.md",sourceDirName:"api-guide/advanced-topics",slug:"/api-guide/advanced-topics/export_labels",permalink:"/api-guide/advanced-topics/export_labels",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Intelligent Document Processing",permalink:"/api-guide/advanced-topics/intelligent-document-processing"},next:{title:"Clarifai Portal Basics",permalink:"/portal-guide/portal-overview"}},p={},s=[{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:2},{value:"Classes",id:"classes",level:2},{value:"DatasetExportReader",id:"datasetexportreader",level:3},{value:"InputDownloader",id:"inputdownloader",level:3},{value:"Example",id:"example",level:3}],d={toc:s};function c(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,r.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"clarifai-scribe-labeler-export"},"Clarifai Scribe Labeler Export"),(0,n.kt)("p",null,"This Python script allows you to export labeled data from Clarifai's Scribe labeler. The exported data can be saved as a ZIP archive or in a filesystem directory. The script provides two main classes, ",(0,n.kt)("inlineCode",{parentName:"p"},"DatasetExportReader")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"InputDownloader"),", that handle the data export and download processes, respectively."),(0,n.kt)("p",null,"You can find the script in our GitHub ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/Clarifai/clarifai-python-utils"},"clarifai-python-utils repository")," under ",(0,n.kt)("inlineCode",{parentName:"p"},"clarifai/dataset_export")),(0,n.kt)("h2",{id:"installation"},"Installation"),(0,n.kt)("p",null,"Before running this script, make sure you have the following dependencies installed:"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"Pillow"),"\n",(0,n.kt)("inlineCode",{parentName:"p"},"protobuf"),"\n",(0,n.kt)("inlineCode",{parentName:"p"},"requests"),"\n",(0,n.kt)("inlineCode",{parentName:"p"},"tqdm")),(0,n.kt)("p",null,"You can install the dependencies using pip:"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"pip install Pillow protobuf requests tqdm")),(0,n.kt)("h2",{id:"usage"},"Usage"),(0,n.kt)("p",null,"To use the script, run it with the following command:"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"python <script_name> <archive-url> [<save-path>]")),(0,n.kt)("p",null,"Replace ",(0,n.kt)("inlineCode",{parentName:"p"},"<script_name>")," with the name of the Python script, ",(0,n.kt)("inlineCode",{parentName:"p"},"<archive-url>")," with the URL of the exported archive, and ",(0,n.kt)("inlineCode",{parentName:"p"},"<save-path>")," (optional) with the path where you want to save the downloaded data. If ",(0,n.kt)("inlineCode",{parentName:"p"},"<save-path>"),' is not provided, the default output will be saved to "output.zip".'),(0,n.kt)("h2",{id:"classes"},"Classes"),(0,n.kt)("h3",{id:"datasetexportreader"},"DatasetExportReader"),(0,n.kt)("p",null,"This class is responsible for unpacking the ZIP file from the exported dataset version. It downloads the archive onto disk and reads the dataset version exports in memory without extracting all contents. It yields each ",(0,n.kt)("inlineCode",{parentName:"p"},"api.Input")," object."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"with DatasetExportReader(archive_url=archive_url) as reader:\n    # Use the reader object to access the dataset\n")),(0,n.kt)("h3",{id:"inputdownloader"},"InputDownloader"),(0,n.kt)("p",null,"This class takes an iterator or a list of ",(0,n.kt)("inlineCode",{parentName:"p"},"api.Input")," instances as input and provides a method to download all inputs (currently only images) of that data. It has the ability to write the downloaded inputs to a new ZIP archive or a filesystem directory."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"input_downloader = InputDownloader(reader)\ninput_downloader.download_image_archive(save_path=save_path)\n")),(0,n.kt)("h3",{id:"example"},"Example"),(0,n.kt)("p",null,"Here's an example of how to use this script with an archive URL and an optional save path:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'import sys\nif len(sys.argv) < 2:\n  print(f"usage: {sys.argv[0]} <archive-url> [<save-path>]")\n  sys.exit(2)\narchive_url = sys.argv[1]\nsave_path = sys.argv[2] if len(sys.argv) > 2 else "output.zip"\n\nwith DatasetExportReader(archive_url=archive_url) as reader:\n  InputDownloader(reader).download_image_archive(save_path=save_path)\n')),(0,n.kt)("p",null,"When executed, this script will download the labeled images from the archive URL and save them to the specified save path."))}c.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[8638],{65537:(e,n,t)=>{t.d(n,{A:()=>f});var s=t(96540),r=t(18215),a=t(65627),i=t(56347),o=t(50372),c=t(30604),l=t(11861),d=t(78749);function u(e){return s.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,s.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:n,children:t}=e;return(0,s.useMemo)((()=>{const e=n??function(e){return u(e).map((e=>{let{props:{value:n,label:t,attributes:s,default:r}}=e;return{value:n,label:t,attributes:s,default:r}}))}(t);return function(e){const n=(0,l.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function p(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function _(e){let{queryString:n=!1,groupId:t}=e;const r=(0,i.W6)(),a=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,c.aZ)(a),(0,s.useCallback)((e=>{if(!a)return;const n=new URLSearchParams(r.location.search);n.set(a,e),r.replace({...r.location,search:n.toString()})}),[a,r])]}function g(e){const{defaultValue:n,queryString:t=!1,groupId:r}=e,a=h(e),[i,c]=(0,s.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const s=t.find((e=>e.default))??t[0];if(!s)throw new Error("Unexpected error: 0 tabValues");return s.value}({defaultValue:n,tabValues:a}))),[l,u]=_({queryString:t,groupId:r}),[g,E]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[r,a]=(0,d.Dv)(t);return[r,(0,s.useCallback)((e=>{t&&a.set(e)}),[t,a])]}({groupId:r}),m=(()=>{const e=l??g;return p({value:e,tabValues:a})?e:null})();(0,o.A)((()=>{m&&c(m)}),[m]);return{selectedValue:i,selectValue:(0,s.useCallback)((e=>{if(!p({value:e,tabValues:a}))throw new Error(`Can't select invalid tab value=${e}`);c(e),u(e),E(e)}),[u,E,a]),tabValues:a}}var E=t(9136);const m={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var j=t(74848);function T(e){let{className:n,block:t,selectedValue:s,selectValue:i,tabValues:o}=e;const c=[],{blockElementScrollPositionUntilNextRender:l}=(0,a.a_)(),d=e=>{const n=e.currentTarget,t=c.indexOf(n),r=o[t].value;r!==s&&(l(n),i(r))},u=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const t=c.indexOf(e.currentTarget)+1;n=c[t]??c[0];break}case"ArrowLeft":{const t=c.indexOf(e.currentTarget)-1;n=c[t]??c[c.length-1];break}}n?.focus()};return(0,j.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":t},n),children:o.map((e=>{let{value:n,label:t,attributes:a}=e;return(0,j.jsx)("li",{role:"tab",tabIndex:s===n?0:-1,"aria-selected":s===n,ref:e=>{c.push(e)},onKeyDown:u,onClick:d,...a,className:(0,r.A)("tabs__item",m.tabItem,a?.className,{"tabs__item--active":s===n}),children:t??n},n)}))})}function A(e){let{lazy:n,children:t,selectedValue:a}=e;const i=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=i.find((e=>e.props.value===a));return e?(0,s.cloneElement)(e,{className:(0,r.A)("margin-top--md",e.props.className)}):null}return(0,j.jsx)("div",{className:"margin-top--md",children:i.map(((e,n)=>(0,s.cloneElement)(e,{key:n,hidden:e.props.value!==a})))})}function x(e){const n=g(e);return(0,j.jsxs)("div",{className:(0,r.A)("tabs-container",m.tabList),children:[(0,j.jsx)(T,{...n,...e}),(0,j.jsx)(A,{...n,...e})]})}function f(e){const n=(0,E.A)();return(0,j.jsx)(x,{...e,children:u(e.children)},String(n))}},79329:(e,n,t)=>{t.d(n,{A:()=>i});t(96540);var s=t(18215);const r={tabItem:"tabItem_Ymn6"};var a=t(74848);function i(e){let{children:n,hidden:t,className:i}=e;return(0,a.jsx)("div",{role:"tabpanel",className:(0,s.A)(r.tabItem,i),hidden:t,children:n})}},96179:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>K,contentTitle:()=>Z,default:()=>J,frontMatter:()=>V,metadata:()=>s,toc:()=>X});const s=JSON.parse('{"id":"api-guide/audit-log/README","title":"Audit Logging","description":"Track what was performed, who did it, and the results","source":"@site/docs/api-guide/audit-log/README.mdx","sourceDirName":"api-guide/audit-log","slug":"/api-guide/audit-log/","permalink":"/api-guide/audit-log/","draft":false,"unlisted":false,"editUrl":"https://github.com/Clarifai/docs/blob/main/docs/api-guide/audit-log/README.mdx","tags":[],"version":"current","frontMatter":{"description":"Track what was performed, who did it, and the results","pagination_prev":null,"pagination_next":null},"sidebar":"tutorialSidebar"}');var r=t(74848),a=t(28453),i=t(65537),o=t(79329),c=t(58069);const l="#########################################################################\n# In this section, we set the user authentication and user ID. \n# Change these strings to run your own example.\n#########################################################################\n\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nUSER_ID = 'YOUR_USER_ID_HERE'\n\n###########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n###########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID)\n\npost_audit_log_searches = stub.PostAuditLogSearches(\n    service_pb2.PostAuditLogSearchesRequest(\n        user_app_id=userDataObject # The userDataObject is created in the overview and is required when using a PAT   \n    ),    \n    metadata=metadata\n)\nif post_audit_log_searches.status.code != status_code_pb2.SUCCESS:\n    print(post_audit_log_searches.status)\n    raise Exception(\"Post audit log searches failed, status: \" + post_audit_log_searches.status.description)\n\nprint(post_audit_log_searches)\n",d="\x3c!-- index.html file --\x3e\n\n<script>\n    ///////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication and user ID. \n    // Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////////////////\n  \n    // Your PAT (Personal Access Token) can be found in the Account's Security section\n    const PAT = 'YOUR_PAT_HERE';\n    const USER_ID = 'YOUR_USER_ID_HERE';   \n  \n    //////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    /////////////////////////////////////////////////////////////////////////////////\n  \n    const raw = JSON.stringify({});\n  \n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + PAT\n      },\n      body: raw\n    };\n  \n    fetch(`https://api.clarifai.com/v2/users/${USER_ID}/audit_log/searches`, requestOptions)\n      .then(response => response.text())\n      .then(result => console.log(result))\n      .catch(error => console.log('error', error));\n  <\/script>\n  ",u='// index.js file\n\n////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication and user ID. \n// Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////\n\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = \'YOUR_PAT_HERE\';\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PostAuditLogSearches(\n  {\n    user_app_id: {\n      user_id: USER_ID,\n    },\n  },\n  metadata,\n  (err, response) => {\n    if (err) {\n      throw new Error(err);\n    }\n\n    if (response.status.code !== 10000) {\n      console.log(response.status);\n      throw new Error(\n        "Post audit log searches failed, status: " + response.status.description\n      );\n    }\n\n    console.log(response);\n  }\n);\n',h='curl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/audit_log/searches" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{ }\'\n  ',p="#########################################################################\n# In this section, we set the user authentication and user ID. \n# Change these strings to run your own example.\n#########################################################################\n\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nUSER_ID = 'YOUR_USER_ID_HERE'\n\n###########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n###########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID)\n\npost_audit_log_searches = stub.PostAuditLogSearches(\n    service_pb2.PostAuditLogSearchesRequest(\n        user_app_id=userDataObject, # The userDataObject is created in the overview and is required when using a PAT   \n        query=resources_pb2.AuditLogQuery(\n            operations=[resources_pb2.EventType.MODEL_CREATE, resources_pb2.EventType.WORKFLOW_CREATE, resources_pb2.EventType.APPLICATION_CREATE]\n        )\n    ),    \n    metadata=metadata\n)\nif post_audit_log_searches.status.code != status_code_pb2.SUCCESS:\n    print(post_audit_log_searches.status)\n    raise Exception(\"Post audit log searches failed, status: \" + post_audit_log_searches.status.description)\n\nprint(post_audit_log_searches)\n",_="\x3c!-- index.html file --\x3e\n\n<script>\n    ////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication and user ID. \n    // Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////////////////////\n  \n    // Your PAT (Personal Access Token) can be found in the Account's Security section\n    const PAT = 'YOUR_PAT_HERE';\n    const USER_ID = 'YOUR_USER_ID_HERE';   \n  \n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n  \n    const raw = JSON.stringify({\n      \"query\": {\n        \"operations\": [\"MODEL_CREATE\", \"WORKFLOW_CREATE\", \"APPLICATION_CREATE\"]\n      }\n    });\n  \n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + PAT\n      },\n      body: raw\n    };\n  \n    fetch(`https://api.clarifai.com/v2/users/${USER_ID}/audit_log/searches`, requestOptions)\n      .then(response => response.text())\n      .then(result => console.log(result))\n      .catch(error => console.log('error', error));\n  <\/script>\n  ",g='// index.js file\n\n////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication and user ID. \n// Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////\n\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = \'YOUR_PAT_HERE\';\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PostAuditLogSearches(\n  {\n    user_app_id: {\n      user_id: USER_ID,\n    },\n    query: {\n      operations: ["MODEL_CREATE", "WORKFLOW_CREATE", "APPLICATION_CREATE"]\n    },\n  },\n  metadata,\n  (err, response) => {\n    if (err) {\n      throw new Error(err);\n    }\n\n    if (response.status.code !== 10000) {\n      console.log(response.status);\n      throw new Error(\n        "Post audit log searches failed, status: " + response.status.description\n      );\n    }\n\n    console.log(response);\n  }\n);\n',E='curl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/audit_log/searches" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "query": {\n      "operations": ["MODEL_CREATE", "WORKFLOW_CREATE", "APPLICATION_CREATE"]\n    }\n  }\'\n',m="#########################################################################\n# In this section, we set the user authentication and user ID. \n# Change these strings to run your own example.\n#########################################################################\n\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nUSER_ID = 'YOUR_USER_ID_HERE'\n\n###########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n###########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\nfrom google.protobuf.timestamp_pb2 import Timestamp\nfrom datetime import datetime\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID)\n\n# Helper function to convert string to Timestamp\ndef string_to_timestamp(date_string):\n    dt = datetime.strptime(date_string, \"%Y-%m-%dT%H:%M:%SZ\")\n    ts = Timestamp()\n    ts.FromDatetime(dt)\n    return ts\n\n# Convert timestamps\ntimestamp_from = string_to_timestamp(\"2024-05-01T00:00:00Z\")\ntimestamp_to = string_to_timestamp(\"2024-05-31T23:59:59Z\")\n\npost_audit_log_searches = stub.PostAuditLogSearches(\n    service_pb2.PostAuditLogSearchesRequest(\n        user_app_id=userDataObject,\n        query=resources_pb2.AuditLogQuery(\n            timestamp_from=timestamp_from,\n            timestamp_to=timestamp_to\n        )\n    ),\n    metadata=metadata\n)\n\nif post_audit_log_searches.status.code != status_code_pb2.SUCCESS:\n    print(post_audit_log_searches.status)\n    raise Exception(\"Post audit log searches failed, status: \" + post_audit_log_searches.status.description)\n\nprint(post_audit_log_searches)\n",j="\x3c!-- index.html file --\x3e\n\n<script>\n    ////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication and user ID. \n    // Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////////////////////\n  \n    // Your PAT (Personal Access Token) can be found in the Account's Security section\n    const PAT = 'YOUR_PAT_HERE';\n    const USER_ID = 'YOUR_USER_ID_HERE';   \n  \n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n  \n    const raw = JSON.stringify({\n      \"query\": {\n        \"timestamp_from\": \"2024-05-01T00:00:00Z\",\n        \"timestamp_to\": \"2024-05-31T23:59:59Z\"\n      }\n    });\n  \n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + PAT\n      },\n      body: raw\n    };\n  \n    fetch(`https://api.clarifai.com/v2/users/${USER_ID}/audit_log/searches`, requestOptions)\n      .then(response => response.text())\n      .then(result => console.log(result))\n      .catch(error => console.log('error', error));\n  <\/script>\n  ",T='// index.js file\n\n////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication and user ID. \n// Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////\n\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = \'YOUR_PAT_HERE\';\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\nconst { Timestamp } = require("google-protobuf/google/protobuf/timestamp_pb");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\n// Convert the ISO date strings to `Timestamp` objects\nfunction isoDateToTimestamp(isoDate) {\n  const date = new Date(isoDate);\n  const timestamp = new Timestamp();\n  timestamp.setSeconds(Math.floor(date.getTime() / 1000));\n  timestamp.setNanos((date.getTime() % 1000) * 1e6);\n  return timestamp;\n}\n\n// Create `timestamp_from` and `timestamp_to` as `google.protobuf.Timestamp` objects\nconst timestampFrom = isoDateToTimestamp("2024-05-01T00:00:00Z");\nconst timestampTo = isoDateToTimestamp("2024-05-31T23:59:59Z");\n\nstub.PostAuditLogSearches(\n  {\n    user_app_id: {\n      user_id: USER_ID,\n    },\n    query: {\n      timestamp_from: timestampFrom,\n      timestamp_to: timestampTo,\n    },\n  },\n  metadata,\n  (err, response) => {\n    if (err) {\n      throw new Error(err);\n    }\n\n    if (response.status.code !== 10000) {\n      console.log(response.status);\n      throw new Error(\n        "Post audit log searches failed, status: " + response.status.description\n      );\n    }\n\n    console.log(response);\n  }\n);\n',A='curl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/audit_log/searches" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "query": {\n      "timestamp_from": "2024-05-01T00:00:00Z",\n      "timestamp_to": "2024-05-31T23:59:59Z"\n    }\n  }\'\n',x="#########################################################################\n# In this section, we set the user authentication and user ID. \n# Change these strings to run your own example.\n#########################################################################\n\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nUSER_ID = 'YOUR_USER_ID_HERE'\n\n###########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n###########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID)\n\npost_audit_log_searches = stub.PostAuditLogSearches(\n    service_pb2.PostAuditLogSearchesRequest(\n        user_app_id=userDataObject, # The userDataObject is created in the overview and is required when using a PAT   \n        query=resources_pb2.AuditLogQuery(\n            user_ids=[USER_ID]\n        )\n    ),    \n    metadata=metadata\n)\nif post_audit_log_searches.status.code != status_code_pb2.SUCCESS:\n    print(post_audit_log_searches.status)\n    raise Exception(\"Post audit log searches failed, status: \" + post_audit_log_searches.status.description)\n\nprint(post_audit_log_searches)\n",f="\x3c!-- index.html file --\x3e\n\n<script>\n    ////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication and user ID. \n    // Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////////////////////\n  \n    // Your PAT (Personal Access Token) can be found in the Account's Security section\n    const PAT = 'YOUR_PAT_HERE';\n    const USER_ID = 'YOUR_USER_ID_HERE';   \n  \n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n  \n    const raw = JSON.stringify({\n      \"query\": {\n        \"user_ids\": [\"USER_ID_HERE\"]\n      }\n    });\n  \n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + PAT\n      },\n      body: raw\n    };\n  \n    fetch(`https://api.clarifai.com/v2/users/${USER_ID}/audit_log/searches`, requestOptions)\n      .then(response => response.text())\n      .then(result => console.log(result))\n      .catch(error => console.log('error', error));\n  <\/script>\n  ",b='// index.js file\n\n////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication and user ID. \n// Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////\n\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = \'YOUR_PAT_HERE\';\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PostAuditLogSearches(\n  {\n    user_app_id: {\n      user_id: USER_ID,\n    },\n    query: {\n        user_ids: ["USER_ID_HERE"],\n    },\n  },\n  metadata,\n  (err, response) => {\n    if (err) {\n      throw new Error(err);\n    }\n\n    if (response.status.code !== 10000) {\n      console.log(response.status);\n      throw new Error(\n        "Post audit log searches failed, status: " + response.status.description\n      );\n    }\n\n    console.log(response);\n  }\n);\n',O='curl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/audit_log/searches" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "query": {\n      "user_ids": ["USER_ID_HERE"]\n    }\n  }\'\n',R="#########################################################################\n# In this section, we set the user authentication and user ID. \n# Change these strings to run your own example.\n#########################################################################\n\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nUSER_ID = 'YOUR_USER_ID_HERE'\n\n###########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n###########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID)\n\npost_audit_log_searches = stub.PostAuditLogSearches(\n    service_pb2.PostAuditLogSearchesRequest(\n        user_app_id=userDataObject, # The userDataObject is created in the overview and is required when using a PAT   \n        query=resources_pb2.AuditLogQuery(\n            targets=[\n                resources_pb2.AuditLogTarget(\n                    user=resources_pb2.User(\n                        id=USER_ID\n                    )\n                )\n            ]                \n            \n        )\n    ),    \n    metadata=metadata\n)\nif post_audit_log_searches.status.code != status_code_pb2.SUCCESS:\n    print(post_audit_log_searches.status)\n    raise Exception(\"Post audit log searches failed, status: \" + post_audit_log_searches.status.description)\n\nprint(post_audit_log_searches)\n",S="\x3c!-- index.html file --\x3e\n\n<script>\n    ////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication and user ID. \n    // Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////////////////////\n  \n    // Your PAT (Personal Access Token) can be found in the Account's Security section\n    const PAT = 'YOUR_PAT_HERE';\n    const USER_ID = 'YOUR_USER_ID_HERE';   \n  \n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n  \n    const raw = JSON.stringify({\n      \"query\": {\n        \"targets\": [\n          {\n            \"user\": {\n              \"id\": \"USER_ID_HERE\"\n            }\n          }\n        ]\n      }\n    });\n  \n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + PAT\n      },\n      body: raw\n    };\n  \n    fetch(`https://api.clarifai.com/v2/users/${USER_ID}/audit_log/searches`, requestOptions)\n      .then(response => response.text())\n      .then(result => console.log(result))\n      .catch(error => console.log('error', error));\n  <\/script>\n  ",I='// index.js file\n\n////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication and user ID. \n// Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////\n\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = \'YOUR_PAT_HERE\';\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PostAuditLogSearches(\n  {\n    user_app_id: {\n      user_id: USER_ID,\n    },\n    query: {\n      targets: [\n        {\n          user: {\n            id: "USER_ID_HERE",\n          },\n        },\n      ],\n    },\n  },\n  metadata,\n  (err, response) => {\n    if (err) {\n      throw new Error(err);\n    }\n\n    if (response.status.code !== 10000) {\n      console.log(response.status);\n      throw new Error(\n        "Post audit log searches failed, status: " + response.status.description\n      );\n    }\n\n    console.log(response);\n  }\n);\n',v='curl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/audit_log/searches" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "query": {\n      "targets": [\n        {\n          "user": {\n            "id": "USER_ID_HERE"\n          }\n        }\n      ]\n    }\n  }\'\n',N="#########################################################################\n# In this section, we set the user authentication and user ID. \n# Change these strings to run your own example.\n#########################################################################\n\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nUSER_ID = 'YOUR_USER_ID_HERE'\n\n###########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n###########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\nfrom google.protobuf.wrappers_pb2 import BoolValue  \n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID)\n\npost_audit_log_searches = stub.PostAuditLogSearches(\n    service_pb2.PostAuditLogSearchesRequest(\n        user_app_id=userDataObject, # The userDataObject is created in the overview and is required when using a PAT   \n        query=resources_pb2.AuditLogQuery(\n            success=BoolValue(value=True)           \n        )\n    ),    \n    metadata=metadata\n)\nif post_audit_log_searches.status.code != status_code_pb2.SUCCESS:\n    print(post_audit_log_searches.status)\n    raise Exception(\"Post audit log searches failed, status: \" + post_audit_log_searches.status.description)\n\nprint(post_audit_log_searches)\n",D="\x3c!-- index.html file --\x3e\n\n<script>\n    ////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication and user ID. \n    // Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////////////////////\n  \n    // Your PAT (Personal Access Token) can be found in the Account's Security section\n    const PAT = 'YOUR_PAT_HERE';\n    const USER_ID = 'YOUR_USER_ID_HERE';   \n  \n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n  \n    const raw = JSON.stringify({\n      \"query\": {\n        \"success\": true\n      }\n    });\n  \n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + PAT\n      },\n      body: raw\n    };\n  \n    fetch(`https://api.clarifai.com/v2/users/${USER_ID}/audit_log/searches`, requestOptions)\n      .then(response => response.text())\n      .then(result => console.log(result))\n      .catch(error => console.log('error', error));\n  <\/script>\n  ",y='// index.js file\n\n////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication and user ID. \n// Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////\n\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = \'YOUR_PAT_HERE\';\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\nconst { BoolValue } = require("google-protobuf/google/protobuf/wrappers_pb.js");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PostAuditLogSearches(\n  {\n    user_app_id: {\n      user_id: USER_ID,\n    },\n    query: {\n      success: new BoolValue().setValue(true),\n    },\n  },\n  metadata,\n  (err, response) => {\n    if (err) {\n      throw new Error(err);\n    }\n\n    if (response.status.code !== 10000) {\n      console.log(response.status);\n      throw new Error(\n        "Post audit log searches failed, status: " + response.status.description\n      );\n    }\n\n    console.log(response);\n  }\n);\n',P='curl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/audit_log/searches" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "query": {\n      "success": true\n    }\n  }\'\n',w="#########################################################################\n# In this section, we set the user authentication and user ID. \n# Change these strings to run your own example.\n#########################################################################\n\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nUSER_ID = 'YOUR_USER_ID_HERE'\n\n###########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n###########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID)\n\npost_audit_log_searches = stub.PostAuditLogSearches(\n    service_pb2.PostAuditLogSearchesRequest(\n        user_app_id=userDataObject, # The userDataObject is created in the overview and is required when using a PAT   \n        query=resources_pb2.AuditLogQuery(\n            source_ips=['127.0.0.0', '127.0.0.1']        \n        )\n    ),    \n    metadata=metadata\n)\nif post_audit_log_searches.status.code != status_code_pb2.SUCCESS:\n    print(post_audit_log_searches.status)\n    raise Exception(\"Post audit log searches failed, status: \" + post_audit_log_searches.status.description)\n\nprint(post_audit_log_searches)\n",U="\x3c!-- index.html file --\x3e\n\n<script>\n    ////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication and user ID. \n    // Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////////////////////\n  \n    // Your PAT (Personal Access Token) can be found in the Account's Security section\n    const PAT = 'YOUR_PAT_HERE';\n    const USER_ID = 'YOUR_USER_ID_HERE';   \n  \n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n  \n    const raw = JSON.stringify({\n      \"query\": {\n        \"source_ips\": [\"127.0.0.0\", \"127.0.0.1\"]\n      }\n    });\n  \n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + PAT\n      },\n      body: raw\n    };\n  \n    fetch(`https://api.clarifai.com/v2/users/${USER_ID}/audit_log/searches`, requestOptions)\n      .then(response => response.text())\n      .then(result => console.log(result))\n      .catch(error => console.log('error', error));\n  <\/script>\n  ",C='// index.js file\n\n////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication and user ID. \n// Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////\n\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = \'YOUR_PAT_HERE\';\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PostAuditLogSearches(\n  {\n    user_app_id: {\n      user_id: USER_ID,\n    },\n    query: {\n        source_ips: ["127.0.0.0", "127.0.0.1"]\n    },\n  },\n  metadata,\n  (err, response) => {\n    if (err) {\n      throw new Error(err);\n    }\n\n    if (response.status.code !== 10000) {\n      console.log(response.status);\n      throw new Error(\n        "Post audit log searches failed, status: " + response.status.description\n      );\n    }\n\n    console.log(response);\n  }\n);\n',H='curl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/audit_log/searches" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "query": {\n      "source_ips": ["127.0.0.0", "127.0.0.1"]\n    }\n  }\'\n',L="#########################################################################\n# In this section, we set the user authentication and user ID. \n# Change these strings to run your own example.\n#########################################################################\n\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nUSER_ID = 'YOUR_USER_ID_HERE'\n\n###########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n###########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID)\n\npost_audit_log_searches = stub.PostAuditLogSearches(\n    service_pb2.PostAuditLogSearchesRequest(\n        user_app_id=userDataObject, # The userDataObject is created in the overview and is required when using a PAT   \n        sort_ascending=True\n    ),    \n    metadata=metadata\n)\nif post_audit_log_searches.status.code != status_code_pb2.SUCCESS:\n    print(post_audit_log_searches.status)\n    raise Exception(\"Post audit log searches failed, status: \" + post_audit_log_searches.status.description)\n\nprint(post_audit_log_searches)\n",Y="\x3c!-- index.html file --\x3e\n\n<script>\n    ////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication and user ID. \n    // Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////////////////////\n  \n    // Your PAT (Personal Access Token) can be found in the Account's Security section\n    const PAT = 'YOUR_PAT_HERE';\n    const USER_ID = 'YOUR_USER_ID_HERE';   \n  \n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n  \n    const raw = JSON.stringify({\n      \"sort_ascending\": true\n    });\n  \n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + PAT\n      },\n      body: raw\n    };\n  \n    fetch(`https://api.clarifai.com/v2/users/${USER_ID}/audit_log/searches`, requestOptions)\n      .then(response => response.text())\n      .then(result => console.log(result))\n      .catch(error => console.log('error', error));\n  <\/script>\n  ",k='// index.js file\n\n////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication and user ID. \n// Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////\n\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = \'YOUR_PAT_HERE\';\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PostAuditLogSearches(\n  {\n    user_app_id: {\n      user_id: USER_ID,\n    },\n    sort_ascending: true\n  },\n  metadata,\n  (err, response) => {\n    if (err) {\n      throw new Error(err);\n    }\n\n    if (response.status.code !== 10000) {\n      console.log(response.status);\n      throw new Error(\n        "Post audit log searches failed, status: " + response.status.description\n      );\n    }\n\n    console.log(response);\n  }\n);\n',M='curl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/audit_log/searches" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "sort_ascending": true\n  }\'\n',q="#########################################################################\n# In this section, we set the user authentication and user ID. \n# Change these strings to run your own example.\n#########################################################################\n\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nUSER_ID = 'YOUR_USER_ID_HERE'\n\n###########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n###########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\nfrom google.protobuf.timestamp_pb2 import Timestamp\nfrom datetime import datetime\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID)\n\n# Helper function to convert string to Timestamp\ndef string_to_timestamp(date_string):\n    dt = datetime.strptime(date_string, \"%Y-%m-%dT%H:%M:%SZ\")\n    ts = Timestamp()\n    ts.FromDatetime(dt)\n    return ts\n\n# Convert timestamps\ntimestamp_from = string_to_timestamp(\"2024-05-01T00:00:00Z\")\ntimestamp_to = string_to_timestamp(\"2024-05-31T23:59:59Z\")\n\npost_audit_log_searches = stub.PostAuditLogSearches(\n    service_pb2.PostAuditLogSearchesRequest(\n        user_app_id=userDataObject,\n        query=resources_pb2.AuditLogQuery(\n            timestamp_from=timestamp_from,\n            timestamp_to=timestamp_to\n        ),\n        pagination=service_pb2.Pagination(\n            page=2,\n            per_page=20\n        )\n    ),\n    metadata=metadata\n)\n\nif post_audit_log_searches.status.code != status_code_pb2.SUCCESS:\n    print(post_audit_log_searches.status)\n    raise Exception(\"Post audit log searches failed, status: \" + post_audit_log_searches.status.description)\n\nprint(post_audit_log_searches)\n",G="\x3c!-- index.html file --\x3e\n\n<script>\n    ////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication and user ID. \n    // Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////////////////////\n  \n    // Your PAT (Personal Access Token) can be found in the Account's Security section\n    const PAT = 'YOUR_PAT_HERE';\n    const USER_ID = 'YOUR_USER_ID_HERE';   \n  \n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n  \n    const raw = JSON.stringify({\n      \"query\": {\n        \"timestamp_from\": \"2024-05-01T00:00:00Z\",\n        \"timestamp_to\": \"2024-05-31T23:59:59Z\"\n      },\n      \"pagination\": {\n        \"page\": 2,\n        \"per_page\": 20\n      }\n    });\n  \n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + PAT\n      },\n      body: raw\n    };\n  \n    fetch(`https://api.clarifai.com/v2/users/${USER_ID}/audit_log/searches`, requestOptions)\n      .then(response => response.text())\n      .then(result => console.log(result))\n      .catch(error => console.log('error', error));\n  <\/script>\n  ",W='// index.js file\n\n////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication and user ID. \n// Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////\n\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = \'YOUR_PAT_HERE\';\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\nconst { Timestamp } = require("google-protobuf/google/protobuf/timestamp_pb");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\n// Convert the ISO date strings to `Timestamp` objects\nfunction isoDateToTimestamp(isoDate) {\n  const date = new Date(isoDate);\n  const timestamp = new Timestamp();\n  timestamp.setSeconds(Math.floor(date.getTime() / 1000));\n  timestamp.setNanos((date.getTime() % 1000) * 1e6);\n  return timestamp;\n}\n\n// Create `timestamp_from` and `timestamp_to` as `google.protobuf.Timestamp` objects\nconst timestampFrom = isoDateToTimestamp("2024-05-01T00:00:00Z");\nconst timestampTo = isoDateToTimestamp("2024-05-31T23:59:59Z");\n\nstub.PostAuditLogSearches(\n  {\n    user_app_id: {\n      user_id: USER_ID,\n    },\n    query: {\n      timestamp_from: timestampFrom,\n      timestamp_to: timestampTo,\n    },\n    pagination: {\n      page: 2,\n      per_page: 20,\n    },\n  },\n  metadata,\n  (err, response) => {\n    if (err) {\n      throw new Error(err);\n    }\n\n    if (response.status.code !== 10000) {\n      console.log(response.status);\n      throw new Error(\n        "Post audit log searches failed, status: " + response.status.description\n      );\n    }\n\n    console.log(response);\n  }\n);\n',B='curl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/audit_log/searches" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "query": {\n      "timestamp_from": "2024-05-01T00:00:00Z",\n      "timestamp_to": "2024-05-31T23:59:59Z"\n    },\n    "pagination": {\n      "page": 2,\n      "per_page": 20\n    }\n  }\'\n',z='{\n    "status": {\n      "code": 10000,\n      "description": "Ok",\n      "req_id": "c0c3788f56734a07ac468cffc9f96b82"\n    },\n    "entries": [\n      {\n        "timestamp": "2025-01-17T12:04:55.449860Z",\n        "user": {\n          "id": "alfrick",\n          "first_name": "Alfrick",\n          "last_name": "Opidi",\n          "company_name": "Clarifai",\n          "job_title": "Dev",\n          "job_role": "Data Science / Machine Learning",\n          "intention": "Train a custom model",\n          "created_at": "2024-01-11T05:36:46.977773Z",\n          "visibility": {\n            "gettable": 10\n          }\n        },\n        "operation": 403,\n        "description": "Workflow versions created",\n        "targets": [\n          {\n            "workflow": {\n              "id": "workflow-838250",\n              "use_cases": [],\n              "check_consents": []\n            }\n          },\n          {\n            "workflow_version": {\n              "id": "a72a9f65cb2648888b724291a0ba8cef"\n            }\n          },\n          {\n            "app": {\n              "id": "testapp1"\n            }\n          }\n        ],\n        "details": [\n          "Create workflow version \'a72a9f65cb2648888b724291a0ba8cef\' for workflow \'workflow-838250\'"\n        ],\n        "success": true,\n        "req_id": "webportal-74e9a38774c449a598b67b369ae0064a",\n        "source_ip": "3.234.120.41"\n      },\n      {\n        "timestamp": "2025-01-17T12:04:55.430103Z",\n        "user": {\n          "id": "alfrick",\n          "first_name": "Alfrick",\n          "last_name": "Opidi",\n          "company_name": "Clarifai",\n          "job_title": "Dev",\n          "job_role": "Data Science / Machine Learning",\n          "intention": "Train a custom model",\n          "created_at": "2024-01-11T05:36:46.977773Z",\n          "visibility": {\n            "gettable": 10\n          }\n        },\n        "operation": 400,\n        "description": "Workflows created",\n        "targets": [\n          {\n            "workflow": {\n              "id": "workflow-838250",\n              "use_cases": [],\n              "check_consents": []\n            }\n          },\n          {\n            "app": {\n              "id": "testapp1"\n            }\n          }\n        ],\n        "details": [\n          "Create workflow \'workflow-838250\'"\n        ],\n        "success": true,\n        "req_id": "webportal-74e9a38774c449a598b67b369ae0064a",\n        "source_ip": "3.234.120.41"\n      },\n      {\n        "timestamp": "2025-01-17T12:00:06.599812Z",\n        "user": {\n          "id": "alfrick",\n          "first_name": "Alfrick",\n          "last_name": "Opidi",\n          "company_name": "Clarifai",\n          "job_title": "Dev",\n          "job_role": "Data Science / Machine Learning",\n          "intention": "Train a custom model",\n          "created_at": "2024-01-11T05:36:46.977773Z",\n          "visibility": {\n            "gettable": 10\n          }\n        },\n        "operation": 300,\n        "description": "Models created",\n        "targets": [\n          {\n            "model": {\n              "id": "visual-classifier-one2",\n              "app_id": "",\n              "toolkits": [],\n              "use_cases": [],\n              "languages": [],\n              "languages_full": [],\n              "check_consents": []\n            }\n          },\n          {\n            "app": {\n              "id": "testapp1"\n            }\n          }\n        ],\n        "details": [\n          "Create model \'visual-classifier-one2\'"\n        ],\n        "success": true,\n        "req_id": "webportal-7f53926068b3479bbc5631109ac64377",\n        "source_ip": "3.234.120.41"\n      },\n      {\n        "timestamp": "2025-01-17T11:54:44.706982Z",\n        "user": {\n          "id": "alfrick",\n          "first_name": "Alfrick",\n          "last_name": "Opidi",\n          "company_name": "Clarifai",\n          "job_title": "Dev",\n          "job_role": "Data Science / Machine Learning",\n          "intention": "Train a custom model",\n          "created_at": "2024-01-11T05:36:46.977773Z",\n          "visibility": {\n            "gettable": 10\n          }\n        },\n        "operation": 300,\n        "description": "Models created",\n        "targets": [\n          {\n            "model": {\n              "id": "dogs-vs-cats",\n              "app_id": "",\n              "toolkits": [],\n              "use_cases": [],\n              "languages": [],\n              "languages_full": [],\n              "check_consents": []\n            }\n          },\n          {\n            "app": {\n              "id": "testapp1"\n            }\n          }\n        ],\n        "details": [\n          "Create model \'dogs-vs-cats\'"\n        ],\n        "success": true,\n        "req_id": "webportal-f488464806a042698840233f070adeec",\n        "source_ip": "3.234.120.41"\n      },\n      {\n        "timestamp": "2025-01-17T11:51:52.065958Z",\n        "user": {\n          "id": "alfrick",\n          "first_name": "Alfrick",\n          "last_name": "Opidi",\n          "company_name": "Clarifai",\n          "job_title": "Dev",\n          "job_role": "Data Science / Machine Learning",\n          "intention": "Train a custom model",\n          "created_at": "2024-01-11T05:36:46.977773Z",\n          "visibility": {\n            "gettable": 10\n          }\n        },\n        "operation": 403,\n        "description": "Workflow versions created",\n        "targets": [\n          {\n            "app": {\n              "id": "test-app2"\n            }\n          },\n          {\n            "workflow": {\n              "id": "Universal",\n              "use_cases": [],\n              "check_consents": []\n            }\n          },\n          {\n            "workflow_version": {\n              "id": "12668c6aa7d149979d01ae716967a6c9"\n            }\n          }\n        ],\n        "details": [\n          "Create workflow version \'12668c6aa7d149979d01ae716967a6c9\' for workflow \'Universal\'"\n        ],\n        "success": true,\n        "req_id": "webportal-9ca7bd88f14f412189312ca4e86dd965",\n        "source_ip": "3.234.120.41"\n      },\n      {\n        "timestamp": "2025-01-17T11:51:52.056626Z",\n        "user": {\n          "id": "alfrick",\n          "first_name": "Alfrick",\n          "last_name": "Opidi",\n          "company_name": "Clarifai",\n          "job_title": "Dev",\n          "job_role": "Data Science / Machine Learning",\n          "intention": "Train a custom model",\n          "created_at": "2024-01-11T05:36:46.977773Z",\n          "visibility": {\n            "gettable": 10\n          }\n        },\n        "operation": 400,\n        "description": "Workflows created",\n        "targets": [\n          {\n            "workflow": {\n              "id": "Universal",\n              "use_cases": [],\n              "check_consents": []\n            }\n          },\n          {\n            "app": {\n              "id": "test-app2"\n            }\n          }\n        ],\n        "details": [\n          "Create workflow \'Universal\'"\n        ],\n        "success": true,\n        "req_id": "webportal-9ca7bd88f14f412189312ca4e86dd965",\n        "source_ip": "3.234.120.41"\n      },\n      {\n        "timestamp": "2025-01-17T11:51:52.014376Z",\n        "user": {\n          "id": "alfrick",\n          "first_name": "Alfrick",\n          "last_name": "Opidi",\n          "company_name": "Clarifai",\n          "job_title": "Dev",\n          "job_role": "Data Science / Machine Learning",\n          "intention": "Train a custom model",\n          "created_at": "2024-01-11T05:36:46.977773Z",\n          "visibility": {\n            "gettable": 10\n          }\n        },\n        "operation": 600,\n        "description": "Applications created",\n        "targets": [\n          {\n            "app": {\n              "id": "test-app2"\n            }\n          }\n        ],\n        "details": [\n          "Create application \'test-app2\'"\n        ],\n        "success": true,\n        "req_id": "webportal-9ca7bd88f14f412189312ca4e86dd965",\n        "source_ip": "3.234.120.41"\n      },\n      {\n        "timestamp": "2025-01-15T07:01:35.378946Z",\n        "user": {\n          "id": "alfrick",\n          "first_name": "Alfrick",\n          "last_name": "Opidi",\n          "company_name": "Clarifai",\n          "job_title": "Dev",\n          "job_role": "Data Science / Machine Learning",\n          "intention": "Train a custom model",\n          "created_at": "2024-01-11T05:36:46.977773Z",\n          "visibility": {\n            "gettable": 10\n          }\n        },\n        "operation": 403,\n        "description": "Workflow versions created",\n        "targets": [\n          {\n            "workflow": {\n              "id": "Universal",\n              "use_cases": [],\n              "check_consents": []\n            }\n          },\n          {\n            "workflow_version": {\n              "id": "eecdf9bb1e8b4394b9a6337814c4eb5d"\n            }\n          },\n          {\n            "app": {\n              "id": "testapp1"\n            }\n          }\n        ],\n        "details": [\n          "Create workflow version \'eecdf9bb1e8b4394b9a6337814c4eb5d\' for workflow \'Universal\'"\n        ],\n        "success": true,\n        "req_id": "webportal-0c244223c21b4ee18800c1741ca7be5a",\n        "source_ip": "3.234.120.41"\n      },\n      {\n        "timestamp": "2025-01-15T07:01:35.366665Z",\n        "user": {\n          "id": "alfrick",\n          "first_name": "Alfrick",\n          "last_name": "Opidi",\n          "company_name": "Clarifai",\n          "job_title": "Dev",\n          "job_role": "Data Science / Machine Learning",\n          "intention": "Train a custom model",\n          "created_at": "2024-01-11T05:36:46.977773Z",\n          "visibility": {\n            "gettable": 10\n          }\n        },\n        "operation": 400,\n        "description": "Workflows created",\n        "targets": [\n          {\n            "workflow": {\n              "id": "Universal",\n              "use_cases": [],\n              "check_consents": []\n            }\n          },\n          {\n            "app": {\n              "id": "testapp1"\n            }\n          }\n        ],\n        "details": [\n          "Create workflow \'Universal\'"\n        ],\n        "success": true,\n        "req_id": "webportal-0c244223c21b4ee18800c1741ca7be5a",\n        "source_ip": "3.234.120.41"\n      },\n      {\n        "timestamp": "2025-01-15T07:01:35.105312Z",\n        "user": {\n          "id": "alfrick",\n          "first_name": "Alfrick",\n          "last_name": "Opidi",\n          "company_name": "Clarifai",\n          "job_title": "Dev",\n          "job_role": "Data Science / Machine Learning",\n          "intention": "Train a custom model",\n          "created_at": "2024-01-11T05:36:46.977773Z",\n          "visibility": {\n            "gettable": 10\n          }\n        },\n        "operation": 600,\n        "description": "Applications created",\n        "targets": [\n          {\n            "app": {\n              "id": "testapp1"\n            }\n          }\n        ],\n        "details": [\n          "Create application \'testapp1\'"\n        ],\n        "success": true,\n        "req_id": "webportal-0c244223c21b4ee18800c1741ca7be5a",\n        "source_ip": "3.234.120.41"\n      }\n    ]\n  }',V={description:"Track what was performed, who did it, and the results",pagination_prev:null,pagination_next:null},Z="Audit Logging",K={},X=[{value:"List Audit Log Events",id:"list-audit-log-events",level:2},{value:"Filter Searches",id:"filter-searches",level:2},{value:"Operation-Based Filtering",id:"operation-based-filtering",level:3},{value:"Time-Based Filtering",id:"time-based-filtering",level:3},{value:"User-Based Filtering",id:"user-based-filtering",level:3},{value:"Target-Based Filtering",id:"target-based-filtering",level:3},{value:"Success-Based Filtering",id:"success-based-filtering",level:3},{value:"Source-Based Filtering",id:"source-based-filtering",level:3},{value:"Sorting Logs",id:"sorting-logs",level:2},{value:"Pagination",id:"pagination",level:2}];function F(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"audit-logging",children:"Audit Logging"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Track what was performed, who did it, and the results"})}),"\n",(0,r.jsx)("hr",{}),"\n",(0,r.jsx)(n.p,{children:"Clarifai's Audit Logging feature helps you monitor platform activities for better visibility, security, and governance. It captures detailed logs of operations so you can know what was done, who did it, and the results."}),"\n",(0,r.jsx)(n.p,{children:"With Audit Logging, you can assess the actions performed on users and their resources, track resource changes to identify potential security issues, and maintain comprehensive activity logs to meet regulatory requirements."}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsxs)(n.p,{children:["To learn how to perform audit tracking via the UI, see ",(0,r.jsx)(n.a,{href:"https://docs.clarifai.com/portal-guide/control-center/teams-logs/",children:"Teams & Logs"})," within the Control Center."]})}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsxs)(n.p,{children:["The initialization code used in the following examples is outlined in detail on the ",(0,r.jsx)(n.a,{href:"https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions",children:"client installation page."})]})}),"\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n",(0,r.jsx)(n.h2,{id:"list-audit-log-events",children:"List Audit Log Events"}),"\n",(0,r.jsx)(n.p,{children:"Here is how you can list all the supported audit log events performed by a user on the Clarifai platform."}),"\n",(0,r.jsxs)(i.A,{children:[(0,r.jsx)(o.A,{value:"python",label:"Python",children:(0,r.jsx)(c.A,{className:"language-python",children:l})}),(0,r.jsx)(o.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,r.jsx)(c.A,{className:"language-javascript",children:d})}),(0,r.jsx)(o.A,{value:"nodejs",label:"NodeJS",children:(0,r.jsx)(c.A,{className:"language-javascript",children:u})}),(0,r.jsx)(o.A,{value:"curl",label:"cURL",children:(0,r.jsx)(c.A,{className:"language-bash",children:h})})]}),"\n",(0,r.jsxs)(t,{children:[(0,r.jsx)("summary",{children:"Output Example"}),(0,r.jsx)(c.A,{className:"language-text",children:z})]}),"\n",(0,r.jsx)(n.h2,{id:"filter-searches",children:"Filter Searches"}),"\n",(0,r.jsx)(n.p,{children:"You can optionally refine your searches to retrieve only the operations of interest. This enables targeted audit trails for the activities performed on the Clarifai platform."}),"\n",(0,r.jsx)(n.h3,{id:"operation-based-filtering",children:"Operation-Based Filtering"}),"\n",(0,r.jsx)(n.p,{children:"You can apply filters to target specific operation types."}),"\n",(0,r.jsxs)(n.p,{children:["The Audit Logging feature currently supports tracking the following critical resource operations (",(0,r.jsx)(n.em,{children:"we're planning to support more resources in the future"}),"):"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Organization and team membership activities"})," \u2014 Includes creating, updating, or deleting organizations and teams, sending invitations, and managing team users and applications."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Module activities"})," \u2014 Tracks the creation, updating, and deletion of modules."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Model activities"})," \u2014 Tracks actions such as creating, training, publishing, and deleting models."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Workflow activities"})," \u2014 Covers the creation, publishing, updating, and deletion of workflows."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Application activities"})," \u2014 Includes creating, updating, duplicating, and deleting applications."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Collaborator activities"})," \u2014 Includes adding collaborators, editing their scopes, and removing them."]}),"\n"]}),"\n",(0,r.jsxs)(t,{children:[(0,r.jsx)("summary",{children:(0,r.jsx)(n.strong,{children:"Operations Event Types Supported"})}),(0,r.jsxs)(i.A,{children:[(0,r.jsx)(o.A,{value:"default",label:"Default",children:(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Event Type"}),(0,r.jsx)(n.th,{children:"Code"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsx)(n.tbody,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"EVENT_TYPE_NOT_SET"})}),(0,r.jsx)(n.td,{children:"0"}),(0,r.jsx)(n.td,{children:"Event type is not specified, lists all the supported audit log events"})]})})]})}),(0,r.jsx)(o.A,{value:"text",label:"Organization Memberships and Teams",children:(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Event Type"}),(0,r.jsx)(n.th,{children:"Code"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"ORGANIZATION_MEMBER_ADD"})}),(0,r.jsx)(n.td,{children:"100"}),(0,r.jsx)(n.td,{children:"Organization members added"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"ORGANIZATION_MEMBER_CHANGE"})}),(0,r.jsx)(n.td,{children:"101"}),(0,r.jsx)(n.td,{children:"Organization members' roles changed"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"ORGANIZATION_MEMBER_REMOVE"})}),(0,r.jsx)(n.td,{children:"102"}),(0,r.jsx)(n.td,{children:"Organization members removed"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"ORGANIZATION_MEMBER_INVITATION_CREATE"})}),(0,r.jsx)(n.td,{children:"103"}),(0,r.jsx)(n.td,{children:"Organization member invitations created"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"ORGANIZATION_MEMBER_INVITATION_CANCEL"})}),(0,r.jsx)(n.td,{children:"104"}),(0,r.jsx)(n.td,{children:"Organization member invitations canceled"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"ORGANIZATION_MEMBER_INVITATION_ACCEPT"})}),(0,r.jsx)(n.td,{children:"105"}),(0,r.jsx)(n.td,{children:"Organization member invitations accepted"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"ORGANIZATION_MEMBER_INVITATION_DECLINE"})}),(0,r.jsx)(n.td,{children:"106"}),(0,r.jsx)(n.td,{children:"Organization member invitations declined"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"ORGANIZATION_TEAM_CREATE"})}),(0,r.jsx)(n.td,{children:"107"}),(0,r.jsx)(n.td,{children:"Organization teams created"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"ORGANIZATION_TEAM_UPDATE"})}),(0,r.jsx)(n.td,{children:"108"}),(0,r.jsx)(n.td,{children:"Organization teams updated"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"ORGANIZATION_TEAM_DELETE"})}),(0,r.jsx)(n.td,{children:"109"}),(0,r.jsx)(n.td,{children:"Organization teams deleted"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"ORGANIZATION_TEAM_MEMBER_ADD"})}),(0,r.jsx)(n.td,{children:"110"}),(0,r.jsx)(n.td,{children:"Organization team members added"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"ORGANIZATION_TEAM_MEMBER_REMOVE"})}),(0,r.jsx)(n.td,{children:"111"}),(0,r.jsx)(n.td,{children:"Organization team members removed"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"ORGANIZATION_TEAM_APP_ADD"})}),(0,r.jsx)(n.td,{children:"112"}),(0,r.jsx)(n.td,{children:"Organization team applications added"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"ORGANIZATION_TEAM_APP_REMOVE"})}),(0,r.jsx)(n.td,{children:"113"}),(0,r.jsx)(n.td,{children:"Organization team applications removed"})]})]})]})}),(0,r.jsx)(o.A,{value:"modules",label:"Modules",children:(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Event Type"}),(0,r.jsx)(n.th,{children:"Code"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"MODULE_CREATE"})}),(0,r.jsx)(n.td,{children:"200"}),(0,r.jsx)(n.td,{children:"Modules created"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"MODULE_UPDATE"})}),(0,r.jsx)(n.td,{children:"201"}),(0,r.jsx)(n.td,{children:"Modules updated"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"MODULE_DELETE"})}),(0,r.jsx)(n.td,{children:"202"}),(0,r.jsx)(n.td,{children:"Modules deleted"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"MODULE_VERSION_CREATE"})}),(0,r.jsx)(n.td,{children:"203"}),(0,r.jsx)(n.td,{children:"Module versions created"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"MODULE_VERSION_UPDATE"})}),(0,r.jsx)(n.td,{children:"204"}),(0,r.jsx)(n.td,{children:"Module versions updated"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"MODULE_VERSION_DELETE"})}),(0,r.jsx)(n.td,{children:"205"}),(0,r.jsx)(n.td,{children:"Module versions deleted"})]})]})]})}),(0,r.jsx)(o.A,{value:"models",label:"Models",children:(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Event Type"}),(0,r.jsx)(n.th,{children:"Code"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"MODEL_CREATE"})}),(0,r.jsx)(n.td,{children:"300"}),(0,r.jsx)(n.td,{children:"Models created"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"MODEL_UPDATE"})}),(0,r.jsx)(n.td,{children:"301"}),(0,r.jsx)(n.td,{children:"Models updated"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"MODEL_DELETE"})}),(0,r.jsx)(n.td,{children:"302"}),(0,r.jsx)(n.td,{children:"Models deleted"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"MODEL_VERSION_CREATE"})}),(0,r.jsx)(n.td,{children:"303"}),(0,r.jsx)(n.td,{children:"Model versions created"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"MODEL_VERSION_UPDATE"})}),(0,r.jsx)(n.td,{children:"304"}),(0,r.jsx)(n.td,{children:"Model versions updated"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"MODEL_VERSION_DELETE"})}),(0,r.jsx)(n.td,{children:"305"}),(0,r.jsx)(n.td,{children:"Model versions deleted"})]})]})]})}),(0,r.jsx)(o.A,{value:"workflows",label:"Workflows",children:(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Event Type"}),(0,r.jsx)(n.th,{children:"Code"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"WORKFLOW_CREATE"})}),(0,r.jsx)(n.td,{children:"400"}),(0,r.jsx)(n.td,{children:"Workflows created"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"WORKFLOW_UPDATE"})}),(0,r.jsx)(n.td,{children:"401"}),(0,r.jsx)(n.td,{children:"Workflows updated"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"WORKFLOW_DELETE"})}),(0,r.jsx)(n.td,{children:"402"}),(0,r.jsx)(n.td,{children:"Workflows deleted"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"WORKFLOW_VERSION_CREATE"})}),(0,r.jsx)(n.td,{children:"403"}),(0,r.jsx)(n.td,{children:"Workflow versions created"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"WORKFLOW_VERSION_UPDATE"})}),(0,r.jsx)(n.td,{children:"404"}),(0,r.jsx)(n.td,{children:"Workflow versions updated"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"WORKFLOW_VERSION_DELETE"})}),(0,r.jsx)(n.td,{children:"405"}),(0,r.jsx)(n.td,{children:"Workflow versions deleted"})]})]})]})}),(0,r.jsx)(o.A,{value:"applications",label:"Applications",children:(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Event Type"}),(0,r.jsx)(n.th,{children:"Code"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"APPLICATION_CREATE"})}),(0,r.jsx)(n.td,{children:"600"}),(0,r.jsx)(n.td,{children:"Applications created"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"APPLICATION_UPDATE"})}),(0,r.jsx)(n.td,{children:"601"}),(0,r.jsx)(n.td,{children:"Applications updated"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"APPLICATION_DELETE"})}),(0,r.jsx)(n.td,{children:"602"}),(0,r.jsx)(n.td,{children:"Applications deleted"})]})]})]})}),(0,r.jsx)(o.A,{value:"collaborators",label:"Collaborators",children:(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Event Type"}),(0,r.jsx)(n.th,{children:"Code"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"COLLABORATOR_ADD"})}),(0,r.jsx)(n.td,{children:"700"}),(0,r.jsx)(n.td,{children:"Collaborators added"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"COLLABORATOR_UPDATE"})}),(0,r.jsx)(n.td,{children:"701"}),(0,r.jsx)(n.td,{children:"Collaborators updated"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"COLLABORATOR_REMOVE"})}),(0,r.jsx)(n.td,{children:"702"}),(0,r.jsx)(n.td,{children:"Collaborators removed"})]})]})]})}),(0,r.jsx)(o.A,{value:"users",label:"Users",children:(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Event Type"}),(0,r.jsx)(n.th,{children:"Code"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsx)(n.tbody,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"USER_UPDATE"})}),(0,r.jsx)(n.td,{children:"800"}),(0,r.jsx)(n.td,{children:"Users updated"})]})})]})})]})]}),"\n",(0,r.jsxs)(i.A,{children:[(0,r.jsx)(o.A,{value:"python",label:"Python",children:(0,r.jsx)(c.A,{className:"language-python",children:p})}),(0,r.jsx)(o.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,r.jsx)(c.A,{className:"language-javascript",children:_})}),(0,r.jsx)(o.A,{value:"nodejs",label:"NodeJS",children:(0,r.jsx)(c.A,{className:"language-javascript",children:g})}),(0,r.jsx)(o.A,{value:"curl",label:"cURL",children:(0,r.jsx)(c.A,{className:"language-bash",children:E})})]}),"\n",(0,r.jsx)(n.h3,{id:"time-based-filtering",children:"Time-Based Filtering"}),"\n",(0,r.jsx)(n.p,{children:"You can specify precise time ranges for your queries to track exactly when operations were performed."}),"\n",(0,r.jsxs)(n.p,{children:["Note that for HTTP+JSON requests, timestamps are formatted as ",(0,r.jsx)(n.code,{children:"2024-08-25T00:00:00Z"}),". And for gRPC requests, timestamps use separate ",(0,r.jsx)(n.code,{children:"seconds"})," and ",(0,r.jsx)(n.code,{children:"nanos"})," fields, as detailed here: ",(0,r.jsx)(n.a,{href:"https://protobuf.dev/reference/protobuf/google.protobuf/#timestamp",children:"Protobuf Timestamp Reference"}),"."]}),"\n",(0,r.jsxs)(i.A,{children:[(0,r.jsx)(o.A,{value:"python",label:"Python",children:(0,r.jsx)(c.A,{className:"language-python",children:m})}),(0,r.jsx)(o.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,r.jsx)(c.A,{className:"language-javascript",children:j})}),(0,r.jsx)(o.A,{value:"nodejs",label:"NodeJS",children:(0,r.jsx)(c.A,{className:"language-javascript",children:T})}),(0,r.jsx)(o.A,{value:"curl",label:"cURL",children:(0,r.jsx)(c.A,{className:"language-bash",children:A})})]}),"\n",(0,r.jsx)(n.h3,{id:"user-based-filtering",children:"User-Based Filtering"}),"\n",(0,r.jsx)(n.p,{children:"You can define specific users or groups in your queries to track who performed each operation."}),"\n",(0,r.jsxs)(i.A,{children:[(0,r.jsx)(o.A,{value:"python",label:"Python",children:(0,r.jsx)(c.A,{className:"language-python",children:x})}),(0,r.jsx)(o.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,r.jsx)(c.A,{className:"language-javascript",children:f})}),(0,r.jsx)(o.A,{value:"nodejs",label:"NodeJS",children:(0,r.jsx)(c.A,{className:"language-javascript",children:b})}),(0,r.jsx)(o.A,{value:"curl",label:"cURL",children:(0,r.jsx)(c.A,{className:"language-bash",children:O})})]}),"\n",(0,r.jsx)(n.h3,{id:"target-based-filtering",children:"Target-Based Filtering"}),"\n",(0,r.jsx)(n.p,{children:"You can define the target of your query; that is, specify the resource on which an operation recorded in the audit log was performed."}),"\n",(0,r.jsxs)(t,{children:[(0,r.jsx)("summary",{children:(0,r.jsx)(n.strong,{children:"Target Types Supported"})}),(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsx)(n.tr,{children:(0,r.jsx)(n.th,{children:"Target"})})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsx)(n.tr,{children:(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"User user"})})}),(0,r.jsx)(n.tr,{children:(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"Role role"})})}),(0,r.jsx)(n.tr,{children:(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"Team team"})})}),(0,r.jsx)(n.tr,{children:(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"App app"})})}),(0,r.jsx)(n.tr,{children:(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"Module module"})})}),(0,r.jsx)(n.tr,{children:(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"ModuleVersion module_version"})})}),(0,r.jsx)(n.tr,{children:(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"Workflow workflow"})})}),(0,r.jsx)(n.tr,{children:(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"WorkflowVersion workflow_version "})})}),(0,r.jsx)(n.tr,{children:(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"Model model"})})}),(0,r.jsx)(n.tr,{children:(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"ModelVersion model_version"})})})]})]})]}),"\n",(0,r.jsxs)(i.A,{children:[(0,r.jsx)(o.A,{value:"python",label:"Python",children:(0,r.jsx)(c.A,{className:"language-python",children:R})}),(0,r.jsx)(o.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,r.jsx)(c.A,{className:"language-javascript",children:S})}),(0,r.jsx)(o.A,{value:"nodejs",label:"NodeJS",children:(0,r.jsx)(c.A,{className:"language-javascript",children:I})}),(0,r.jsx)(o.A,{value:"curl",label:"cURL",children:(0,r.jsx)(c.A,{className:"language-bash",children:v})})]}),"\n",(0,r.jsx)(n.h3,{id:"success-based-filtering",children:"Success-Based Filtering"}),"\n",(0,r.jsx)(n.p,{children:"You can filter logs based on the operation outcome, such as whether it was successful. This also enables you to identify failed attempts and take appropriate action."}),"\n",(0,r.jsxs)(i.A,{children:[(0,r.jsx)(o.A,{value:"python",label:"Python",children:(0,r.jsx)(c.A,{className:"language-python",children:N})}),(0,r.jsx)(o.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,r.jsx)(c.A,{className:"language-javascript",children:D})}),(0,r.jsx)(o.A,{value:"nodejs",label:"NodeJS",children:(0,r.jsx)(c.A,{className:"language-javascript",children:y})}),(0,r.jsx)(o.A,{value:"curl",label:"cURL",children:(0,r.jsx)(c.A,{className:"language-bash",children:P})})]}),"\n",(0,r.jsx)(n.h3,{id:"source-based-filtering",children:"Source-Based Filtering"}),"\n",(0,r.jsx)(n.p,{children:"You can filter logs based on the IP address where the request originated from."}),"\n",(0,r.jsxs)(i.A,{children:[(0,r.jsx)(o.A,{value:"python",label:"Python",children:(0,r.jsx)(c.A,{className:"language-python",children:w})}),(0,r.jsx)(o.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,r.jsx)(c.A,{className:"language-javascript",children:U})}),(0,r.jsx)(o.A,{value:"nodejs",label:"NodeJS",children:(0,r.jsx)(c.A,{className:"language-javascript",children:C})}),(0,r.jsx)(o.A,{value:"curl",label:"cURL",children:(0,r.jsx)(c.A,{className:"language-bash",children:H})})]}),"\n",(0,r.jsx)(n.h2,{id:"sorting-logs",children:"Sorting Logs"}),"\n",(0,r.jsx)(n.p,{children:"You can specify the sorting options for the audit logs."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["If ",(0,r.jsx)(n.code,{children:"true"}),", logs are sorted by timestamp in ascending order (oldest to newest)."]}),"\n",(0,r.jsxs)(n.li,{children:["If ",(0,r.jsx)(n.code,{children:"false"}),", logs are sorted in descending order (newest to oldest)."]}),"\n"]}),"\n",(0,r.jsxs)(i.A,{children:[(0,r.jsx)(o.A,{value:"python",label:"Python",children:(0,r.jsx)(c.A,{className:"language-python",children:L})}),(0,r.jsx)(o.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,r.jsx)(c.A,{className:"language-javascript",children:Y})}),(0,r.jsx)(o.A,{value:"nodejs",label:"NodeJS",children:(0,r.jsx)(c.A,{className:"language-javascript",children:k})}),(0,r.jsx)(o.A,{value:"curl",label:"cURL",children:(0,r.jsx)(c.A,{className:"language-bash",children:M})})]}),"\n",(0,r.jsx)(n.h2,{id:"pagination",children:"Pagination"}),"\n",(0,r.jsxs)(n.p,{children:["You can split the results into ",(0,r.jsx)(n.a,{href:"https://docs.clarifai.com/api-guide/advanced-topics/pagination",children:"pages"}),", which makes it easier to navigate and review the data."]}),"\n",(0,r.jsxs)(i.A,{children:[(0,r.jsx)(o.A,{value:"python",label:"Python",children:(0,r.jsx)(c.A,{className:"language-python",children:q})}),(0,r.jsx)(o.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,r.jsx)(c.A,{className:"language-javascript",children:G})}),(0,r.jsx)(o.A,{value:"nodejs",label:"NodeJS",children:(0,r.jsx)(c.A,{className:"language-javascript",children:W})}),(0,r.jsx)(o.A,{value:"curl",label:"cURL",children:(0,r.jsx)(c.A,{className:"language-bash",children:B})})]})]})}function J(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(F,{...e})}):F(e)}}}]);
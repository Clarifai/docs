"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[503],{28453:(e,t,s)=>{s.d(t,{R:()=>r,x:()=>l});var n=s(96540);const i={},d=n.createContext(i);function r(e){const t=n.useContext(d);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),n.createElement(d.Provider,{value:t},e.children)}},71547:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>n,toc:()=>o});const n=JSON.parse('{"id":"compute/models/upload/data-types","title":"Input and Output Data Types","description":"Learn about supported input and output data types along with usage examples","source":"@site/docs/compute/models/upload/data-types.md","sourceDirName":"compute/models/upload","slug":"/compute/models/upload/data-types","permalink":"/compute/models/upload/data-types","draft":false,"unlisted":false,"editUrl":"https://github.com/Clarifai/docs/blob/main/docs/compute/models/upload/data-types.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"description":"Learn about supported input and output data types along with usage examples","sidebar_position":3,"toc_min_heading_level":2,"toc_max_heading_level":5},"sidebar":"tutorialSidebar","previous":{"title":"Test Models Locally","permalink":"/compute/models/upload/test-locally"},"next":{"title":"Deployments","permalink":"/compute/deployments/"}}');var i=s(74848),d=s(28453);const r={description:"Learn about supported input and output data types along with usage examples",sidebar_position:3,toc_min_heading_level:2,toc_max_heading_level:5},l="Input and Output Data Types",a={},o=[{value:"Core Primitive Types",id:"core-primitive-types",level:2},{value:"Python Primitive &amp; Generic Types",id:"python-primitive--generic-types",level:2},{value:"Standard Python Primitive Types",id:"standard-python-primitive-types",level:3},{value:"Generic Container Types",id:"generic-container-types",level:2},{value:"List[T]",id:"listt",level:3},{value:"Dynamic Batch Prediction Handling",id:"dynamic-batch-prediction-handling",level:4},{value:"Dict[K, V]",id:"dictk-v",level:3},{value:"Tuple[T1, T2, ...]",id:"tuplet1-t2-",level:3},{value:"Custom Structured Types with NamedFields",id:"custom-structured-types-with-namedfields",level:2}];function c(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,d.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"input-and-output-data-types",children:"Input and Output Data Types"})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"Learn about supported input and output data types along with usage examples"})}),"\n",(0,i.jsx)("hr",{}),"\n",(0,i.jsx)(t.p,{children:"Clarifai's model framework supports rich data typing for both inputs and outputs, enabling flexible and type-safe model development."}),"\n",(0,i.jsxs)(t.p,{children:["Note that when ",(0,i.jsxs)(t.a,{href:"https://docs.clarifai.com/compute/models/model-upload#step-3-prepare-the-modelpy-file/",children:["preparing the ",(0,i.jsx)(t.code,{children:"model.py"})," file"]})," for uploading a model to the Clarifai platform, each parameter in the class methods must be annotated with a type, and the return type must also be specified."]}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.a,{href:"https://github.com/Clarifai/runners-examples/blob/main/SUPPORTED_DATATYPE.md",children:"supported types"})," are categorized into Core Primitive, Python Primitive & Generic, and Custom Structured types."]}),"\n",(0,i.jsx)(t.h2,{id:"core-primitive-types",children:"Core Primitive Types"}),"\n",(0,i.jsx)(t.p,{children:"These are fundamental data types supported by Clarifai's framework for handling common data formats."}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Type"}),(0,i.jsx)(t.th,{children:"Python Class"}),(0,i.jsx)(t.th,{children:"Description"}),(0,i.jsx)(t.th,{children:"Initialization Examples"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.strong,{children:"Text"})}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"Text"})}),(0,i.jsx)(t.td,{children:"UTF-8 encoded text"}),(0,i.jsxs)(t.td,{children:[(0,i.jsx)(t.code,{children:'Text("Hello World")'})," ",(0,i.jsx)(t.code,{children:'Text(url="https://example.com/text.txt")'})]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.strong,{children:"Image"})}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"Image"})}),(0,i.jsx)(t.td,{children:"RGB images (PNG/JPG format)"}),(0,i.jsxs)(t.td,{children:[(0,i.jsx)(t.code,{children:'Image(bytes=b"")'})," ",(0,i.jsx)(t.code,{children:'Image(url="https://example.com/image.jpg")'})," ",(0,i.jsx)(t.code,{children:"Image.from_pil(pil_image)"})]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.strong,{children:"Audio"})}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"Audio"})}),(0,i.jsx)(t.td,{children:"Audio data (WAV/MP3 format)"}),(0,i.jsxs)(t.td,{children:[(0,i.jsx)(t.code,{children:'Audio(bytes=b"")'})," ",(0,i.jsx)(t.code,{children:'Audio(url="https://example.com/audio.mp3")'})]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.strong,{children:"Video"})}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"Video"})}),(0,i.jsx)(t.td,{children:"Video data (MP4/AVI format)"}),(0,i.jsxs)(t.td,{children:[(0,i.jsx)(t.code,{children:'Video(bytes=b"")'})," ",(0,i.jsx)(t.code,{children:'Video(url="https://example.com/video.mp4")'})]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.strong,{children:"Frame"})}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"Frame"})}),(0,i.jsx)(t.td,{children:"Video frame with metadata"}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"Frame(time=1.5, image=Image(...))"})})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.strong,{children:"Concept"})}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"Concept"})}),(0,i.jsx)(t.td,{children:"Label with confidence score"}),(0,i.jsxs)(t.td,{children:[(0,i.jsx)(t.code,{children:'Concept("cat", 0.97)'})," ",(0,i.jsx)(t.code,{children:'Concept(name="dog", value=0.92)'})]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.strong,{children:"Region"})}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"Region"})}),(0,i.jsx)(t.td,{children:"Bounding box and list of Concepts"}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:'Region(box=[0.7, 0.3, 0.9, 0.7], [Concept("cat", 0.7), Concept(name="dog", value=0.2)])'})})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.strong,{children:"NameFields"})}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"dict"})}),(0,i.jsx)(t.td,{children:"Structured data"}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:'{"scores": [0.9, 0.1]}'})})]})]})]}),"\n",(0,i.jsx)(t.h2,{id:"python-primitive--generic-types",children:"Python Primitive & Generic Types"}),"\n",(0,i.jsx)(t.p,{children:"Clarifai's framework also supports standard Python primitive and generic types for flexible data handling. These types enable type-safe processing of complex structures while maintaining compatibility with Python's native type system."}),"\n",(0,i.jsx)(t.h3,{id:"standard-python-primitive-types",children:"Standard Python Primitive Types"}),"\n",(0,i.jsx)(t.p,{children:"These fundamental data types are supported as both inputs and outputs."}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Type"}),(0,i.jsx)(t.th,{children:"Example Inputs"}),(0,i.jsx)(t.th,{children:"Example Outputs"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.strong,{children:"int"})}),(0,i.jsxs)(t.td,{children:[(0,i.jsx)(t.code,{children:"42"}),", ",(0,i.jsx)(t.code,{children:"user_age: int = 30"})]}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"return 100"})})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.strong,{children:"float"})}),(0,i.jsxs)(t.td,{children:[(0,i.jsx)(t.code,{children:"0.95"}),", ",(0,i.jsx)(t.code,{children:"temperature: float = 36.6"})]}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"return 3.14159"})})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.strong,{children:"str"})}),(0,i.jsxs)(t.td,{children:[(0,i.jsx)(t.code,{children:'"Hello"'}),", ",(0,i.jsx)(t.code,{children:'prompt: str = "Generate..."'})]}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:'return "success"'})})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.strong,{children:"bool"})}),(0,i.jsxs)(t.td,{children:[(0,i.jsx)(t.code,{children:"True"}),", ",(0,i.jsx)(t.code,{children:"flag: bool = False"})]}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"return is_valid"})})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.strong,{children:"bytes"})}),(0,i.jsxs)(t.td,{children:[(0,i.jsx)(t.code,{children:"b'raw_data'"}),", ",(0,i.jsx)(t.code,{children:"file_bytes: bytes"})]}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"return processed_bytes"})})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.strong,{children:"None"})}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"None"})}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"return None"})})]})]})]}),"\n",(0,i.jsx)(t.p,{children:"Here is an example of a primitive type usage:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'class MyModel(ModelClass):\n\n  @ModelClass.method\n  def calculate_bmi(\n    self,\n    height_cm: float,\n    weight_kg: float\n  ) -> float:\n    """Calculate Body Mass Index"""\n    return weight_kg / (height_cm/100) ** 2\n'})}),"\n",(0,i.jsx)(t.h2,{id:"generic-container-types",children:"Generic Container Types"}),"\n",(0,i.jsx)(t.p,{children:"Clarifai supports generic types for handling complex structures while maintaining compatibility with Python\u2019s type system."}),"\n",(0,i.jsx)(t.h3,{id:"listt",children:"List[T]"}),"\n",(0,i.jsx)(t.p,{children:"This handles homogeneous collections of any supported type, such as a list of images."}),"\n",(0,i.jsxs)(t.p,{children:["Here is an example of using ",(0,i.jsx)(t.code,{children:"List[T]"})," for batch processing:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'class MyModel(ModelClass):\n\n  def load_model(self):\n    self.model = ...\n\n  @ModelClass.method\n  def predict_images(self, images: List[Image]) -> List[str]:\n    """Process multiple images simultaneously"""\n    return [self.model(img) for img in images]\n'})}),"\n",(0,i.jsx)(t.p,{children:"Here is a client usage example:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'images = [\n  Image(file_path="img1.jpg"),\n  Image(url="https://example.com/img2.png")\n]\npredictions = model.predict_images(images=images)\n'})}),"\n",(0,i.jsx)(t.h4,{id:"dynamic-batch-prediction-handling",children:"Dynamic Batch Prediction Handling"}),"\n",(0,i.jsx)(t.p,{children:"Clarifai's model framework automatically handles both single and batch predictions through a unified interface. It dynamically adapts to the input format, eliminating the need for code changes to support different input types."}),"\n",(0,i.jsx)(t.p,{children:"Input detection is carried out automatically by:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Single input"})," \u2014 Automatically processed as a singleton batch."]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Multiple inputs"})," \u2014 When inputs are provided as a list, the system processes them as a parallel batch."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"This flexibility allows you  to pass either a single input or a list of inputs, and the system will handle them appropriately without requiring additional configuration."}),"\n",(0,i.jsx)(t.p,{children:"Here is an example of a model configuration that supports both single and batch predictions:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'class TextClassifier(ModelClass):\n  @ModelClass.method\n  def predict(self, text: Text) -> float:\n    """Single text classification (automatically batched)"""\n    return self.model(text.text)\n'})}),"\n",(0,i.jsx)(t.p,{children:"Here is a client usage example:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'# Single prediction\nsingle_result = model.predict(Text("Positive review"))\n\n# Batch prediction\nbatch_results = model.predict([\n  Text("Great product"),\n  Text("Terrible service"),\n  Text("Average experience")\n  ])\n'})}),"\n",(0,i.jsx)(t.h3,{id:"dictk-v",children:"Dict[K, V]"}),"\n",(0,i.jsx)(t.p,{children:"This supports JSON-like structures with string keys."}),"\n",(0,i.jsxs)(t.p,{children:["Here is an example of using ",(0,i.jsx)(t.code,{children:"Dict[K, V]"})," for handling model configuration:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'class MyModel(ModelClass):\n\n  @ModelClass.method\n  def configure_model(\n    self,\n    params: Dict[str, float]\n  ) -> Dict[str, str]:\n    """Update model parameters"""\n    self.threshold = params.get(\'threshold\', 0.5)\n    return {"status": "success", "new_threshold": str(self.threshold)}\n'})}),"\n",(0,i.jsx)(t.h3,{id:"tuplet1-t2-",children:"Tuple[T1, T2, ...]"}),"\n",(0,i.jsx)(t.p,{children:"This handles fixed-size heterogeneous data."}),"\n",(0,i.jsxs)(t.p,{children:["Here is an example of using ",(0,i.jsx)(t.code,{children:"Tuple[T1, T2, ...]"})," for multi-output models:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'class MyModel(ModelClass):\n\n  @ModelClass.method\n  def analyze_document(\n    self,\n    doc: List[Text]\n  ) -> Tuple[List[Text], Dict[str, float]]:\n    """Return keywords and sentiment scores"""\n    return (doc, {"docs": len(doc)})\n'})}),"\n",(0,i.jsx)(t.h2,{id:"custom-structured-types-with-namedfields",children:"Custom Structured Types with NamedFields"}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"NamedFields"})," class enables creation of custom structured data types for handling complex inputs and outputs. This is particularly useful for models requiring multi-field data or producing compound results."]}),"\n",(0,i.jsxs)(t.p,{children:["Here is an example of using ",(0,i.jsx)(t.code,{children:"NamedFields"})," to define a custom document metadata type:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:"DocumentMetadata = NamedFields(\nauthor=str,\ntitle=str,\npage_count=int,\nkeywords=List[str]\n)\nclass MyModel(ModelClass):\n\n  @ModelClass.method\n  def process_document(\n    self,\n    content: Text,\n    metadata: DocumentMetadata\n  ) -> NamedFields(\n    summary=Text,\n    sentiment=float,\n    topics=List[str]):\n...\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Here is an example of streaming complex structured data using ",(0,i.jsx)(t.code,{children:"Stream[NamedFields]"}),":"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:"class RealTimeAnalytics(ModelClass):\n  @ModelClass.method\n  def monitor_sensors(\n    self,\n    sensor_stream: Stream[NamedFields(\n    temperature=float,\n    pressure=float,\n    timestamp=float\n  )]) -> Stream[NamedFields(\n    status=str,\n    anomaly_score=float\n  )]:\n    for reading in sensor_stream:\n      yield self._analyze_reading(reading)\n"})}),"\n",(0,i.jsx)(t.p,{children:"Here is a client usage example:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'sensor_data = [\n  {"temperature": 25.6, "pressure": 1013, "timestamp": 1625097600},\n  {"temperature": 26.1, "pressure": 1012, "timestamp": 1625097610},\n  {"temperature": 27.5, "pressure": 1011, "timestamp": 1625097620}\n]\n\nfor status in model.monitor_sensors(iter(sensor_data)):\n  if status.anomaly_score > 0.9:\n    return True\n'})})]})}function h(e={}){const{wrapper:t}={...(0,d.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);
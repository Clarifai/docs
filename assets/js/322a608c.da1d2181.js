"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[1866],{63714:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>H,contentTitle:()=>y,default:()=>$,frontMatter:()=>j,metadata:()=>a,toc:()=>Y});const a=JSON.parse('{"id":"create/concepts/manage","title":"Manage Concepts","description":"Learn how to get, update, and delete concepts","source":"@site/docs/create/concepts/manage.md","sourceDirName":"create/concepts","slug":"/create/concepts/manage","permalink":"/create/concepts/manage","draft":false,"unlisted":false,"editUrl":"https://github.com/Clarifai/docs/blob/main/docs/create/concepts/manage.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"description":"Learn how to get, update, and delete concepts","sidebar_position":2,"toc_max_heading_level":4},"sidebar":"tutorialSidebar","previous":{"title":"Create Concepts","permalink":"/create/concepts/create"},"next":{"title":"Concepts Relations","permalink":"/create/concepts/concepts-relations"}}');var s=t(74848),i=t(28453),r=t(65537),o=t(79329),c=t(58069);const l="###########################################################################\n# In this section, we set the user authentication, app ID, and concept ID.\n# Change these strings to run your own example.\n###########################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change this to whatever concept you want to retrieve\nCONCEPT_ID = 'cat'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\nget_concepts_response = stub.GetConcept(\n    service_pb2.GetConceptRequest(\n        user_app_id=userDataObject,\n        concept_id=CONCEPT_ID\n    ),\n    metadata=metadata\n)\n\nif get_concepts_response.status.code != status_code_pb2.SUCCESS:\n    print(get_concepts_response.status)\n    raise Exception(\"Get concept failed, status: \" + get_concepts_response.status.description)\n    \nprint(get_concepts_response)",p="###########################################################################\n# In this section, we set the user authentication. \n# Change these strings to run your own example.\n###########################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\nlist_concepts_response = stub.ListConcepts(\n    service_pb2.ListConceptsRequest(user_app_id=userDataObject),    \n    metadata=metadata\n)\n\nif list_concepts_response.status.code != status_code_pb2.SUCCESS:\n    print(list_concepts_response.status)\n    raise Exception(\"List concept failed, status: \" + list_concepts_response.status.description)\n    \nprint(list_concepts_response)",u="###########################################################################\n# In this section, we set the user authentication and model ID.\n# Change these strings to run your own example.\n###########################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change this to whatever model you want to retrieve its concepts\nMODEL_ID = 'YOUR_MODEL_ID_HERE'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\nlist_model_concepts_response = stub.ListModelConcepts(\n    service_pb2.ListModelConceptsRequest(\n        user_app_id=userDataObject, \n        model_id=MODEL_ID\n    ),    \n    metadata=metadata\n)\n\nif list_model_concepts_response.status.code != status_code_pb2.SUCCESS:\n    print(list_model_concepts_response.status)\n    raise Exception(\"List model concept failed, status: \" + list_model_concepts_response.status.description)\n    \nprint(list_model_concepts_response)",h="################################################################################\n# In this section, we set the user authentication, app ID, concept ID and name.\n# Change these strings to run your own example.\n################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to whatever concept you want to update\nCONCEPT_ID = 'cat'\nCONCEPT_NAME = 'New Cat Name'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\npatch_concepts_response = stub.PatchConcepts(\n    service_pb2.PatchConceptsRequest(\n        user_app_id=userDataObject,\n        action=\"overwrite\",  # The only supported action right now is overwrite\n        concepts=[resources_pb2.Concept(id=CONCEPT_ID, name=CONCEPT_NAME)]\n    ),\n    metadata=metadata\n)\n\nif patch_concepts_response.status.code != status_code_pb2.SUCCESS:\n    print(patch_concepts_response.status)\n    raise Exception(\"Patch concept failed, status: \" + patch_concepts_response.status.description)\n    \nprint(patch_concepts_response)",d="\x3c!--index.html file--\x3e\n\n<script>\n    ////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and concept ID.\n    // Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = 'YOUR_USER_ID_HERE';\n    //Your PAT (Personal Access Token) can be found in the Account's Security section\n    const PAT = 'YOUR_PAT_HERE';\n    const APP_ID = 'YOUR_APP_ID_HERE';\n    // Change these to whatever concepts you want to process\n    const CONCEPT_ID = 'cat';\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const requestOptions = {\n        method: 'GET',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        },\n    };\n\n    fetch(\"https://api.clarifai.com/v2/users/\" + USER_ID + \"/apps/\" + APP_ID + \"/concepts/\" + CONCEPT_ID, requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n<\/script>",_="\x3c!--index.html file--\x3e\n\n<script>\n    ////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication. \n    // Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////\n\n    const USER_ID = 'YOUR_USER_ID_HERE';\n    //Your PAT (Personal Access Token) can be found in the Account's Security section\n    const PAT = 'YOUR_PAT_HERE';\n    const APP_ID = 'YOUR_APP_ID_HERE';\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const requestOptions = {\n        method: 'GET',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        },\n    };\n\n    fetch(\"https://api.clarifai.com/v2/users/\" + USER_ID + \"/apps/\" + APP_ID + \"/concepts\", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n<\/script>",E="\x3c!--index.html file--\x3e\n\n<script>\n    ///////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication and model ID.\n    // Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////\n\n    const USER_ID = 'YOUR_USER_ID_HERE';\n    //Your PAT (Personal Access Token) can be found in the Account's Security section\n    const PAT = 'YOUR_PAT_HERE';\n    const APP_ID = 'YOUR_APP_ID_HERE';\n    // Change this to whatever model you want to retrieve its concepts\n    const MODEL_ID = 'YOUR_MODEL_ID_HERE';\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const requestOptions = {\n        method: 'GET',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        },\n    };\n\n    fetch(\"https://api.clarifai.com/v2/users/\" + USER_ID + \"/apps/\" + APP_ID + \"/models/\" + MODEL_ID + \"/concepts\", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n<\/script>\n",C="\x3c!--index.html file--\x3e\n\n<script>\n    ////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, concept ID and name.\n    // Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = 'YOUR_USER_ID_HERE';\n    // Your PAT (Personal Access Token) can be found in the Account's Security section\n    const PAT = 'YOUR_PAT_HERE';\n    const APP_ID = 'YOUR_APP_ID_HERE';\n    // Change these to whatever concepts you want to update\n    const CONCEPT_ID = 'cat';\n    const CONCEPT_NAME = 'New Cat Name';\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        \"user_app_id\": {\n            \"user_id\": USER_ID,\n            \"app_id\": APP_ID\n        },\n        \"concepts\": [\n            {\n                \"id\": CONCEPT_ID,\n                \"name\": CONCEPT_NAME\n            }\n        ],\n        \"action\": \"overwrite\"\n    });\n\n    const requestOptions = {\n        method: 'PATCH',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        },\n        body: raw\n    };\n\n    fetch(\"https://api.clarifai.com/v2/concepts\", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n<\/script>",A='//index.js file\n\n///////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and concept ID.\n// Change these strings to run your own example.\n///////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n// Change these to whatever concepts you want to process\nconst CONCEPT_ID = \'cat\';\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.GetConcept(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        concept_id: CONCEPT_ID\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Get concepts failed, status: " + response.status.description);\n        }\n\n        const concept = response.concept;\n        console.log(JSON.stringify(concept, null, 2));\n    }\n);',g='//index.js file\n\n////////////////////////////////////////////////////////\n// In this section, we set the user authentication. \n// Change these strings to run your own example.\n////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.ListConcepts(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("List concepts failed, status: " + response.status.description);\n        }\n        for (const concepts of response.concepts) {\n            console.log(concepts)\n        }\n    }\n);',f='//index.js file\n\n////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, concept ID and name.\n// Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n// Change these to whatever concepts you want to update\nconst CONCEPT_ID = \'cat\';\nconst CONCEPT_NAME = \'New Cat Name\';\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PatchConcepts(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        action: "overwrite",  // The only supported action right now is overwrite\n        concepts: [{ id: CONCEPT_ID, name: CONCEPT_NAME }]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Patch concepts failed, status: " + response.status.description);\n        }\n    }\n);',m='package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and concept ID.\n    // Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change this to whatever concept you want to retrieve\n    static final String CONCEPT_ID = "charlie";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\t\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        SingleConceptResponse getConceptResponse = stub.getConcept(\n            GetConceptRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .setConceptId(CONCEPT_ID)\n            .build()\n        );\n\n        if (getConceptResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Get concepts failed, status: " + getConceptResponse.getStatus());\n        }\n\n        Concept concept = getConceptResponse.getConcept();\n        System.out.println(concept);\n\n    }\n\n}',I='package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    ///////////////////////////////////////////////////////////\n    // In this section, we set the user authentication. \n    // Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\t\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiConceptResponse listConceptsResponse = stub.listConcepts(\n            ListConceptsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .build()\n        );\n\n        if (listConceptsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("List concepts failed, status: " + listConceptsResponse.getStatus());\n        }\n\n        for (Concept concept: listConceptsResponse.getConceptsList()) {\n            System.out.println(concept);\n        }\n\n    }\n\n}',P='package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, concept ID and name.\n    // Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to whatever concept you want to update\n    static final String CONCEPT_ID = "cat";\n    static final String CONCEPT_NAME = "New Cat Name";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\t\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiConceptResponse patchConceptsResponse = stub.patchConcepts(\n            PatchConceptsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .setAction("overwrite") // The only supported action right now is overwrite\n            .addConcepts(Concept.newBuilder().setId(CONCEPT_ID).setName(CONCEPT_NAME))\n            .build()\n        );\n\n        if (patchConceptsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Patch concepts failed, status: " + patchConceptsResponse.getStatus());\n        }\n\n    }\n\n}',R='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n///////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and concept ID.\n// Change these strings to run your own example.\n///////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change this to whatever concept you want to retrieve\n$CONCEPT_ID = "cat";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\GetConceptRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->GetConcept(\n        // The request object carries the request along with the request status and other metadata related to the request itself\n        new GetConceptRequest([\n            "user_app_id" => $userDataObject,\n            "concept_id"  => $CONCEPT_ID      \n        ]),\n        $metadata\n    )->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\nprint $response->serializeToJsonString();\n\n?>\n',T='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n////////////////////////////////////////////////////////////\n// In this section, we set the user authentication. \n// Change these strings to run your own example.\n////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\ListConceptsRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->ListConcepts(\n        // The request object carries the request along with the request status and other metadata related to the request itself\n        new ListConceptsRequest([\n            "user_app_id" => $userDataObject \n        ]),\n        $metadata\n    )->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\nprint $response->serializeToJsonString();\n\n?>\n',D='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n////////////////////////////////////////////////////////////\n// In this section, we set the user authentication. \n// Change these strings to run your own example.\n////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change this to whatever model you want to retrieve its concepts\n$MODEL_ID = "YOUR_MODEL_ID_HERE";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\ListModelConceptsRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->ListModelConcepts(\n        // The request object carries the request along with the request status and other metadata related to the request itself\n        new ListModelConceptsRequest([\n            "user_app_id" => $userDataObject,\n            "model_id"  => $MODEL_ID\n        ]),\n        $metadata\n    )->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\nprint $response->serializeToJsonString();\n\n?>\n',S='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, concept ID and name.\n// Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change these to whatever concepts you want to update\n$CONCEPT_ID = "cat";\n$CONCEPT_NAME = "New Cat Name";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\Api\\Concept;\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\PatchConceptsRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PatchConcepts(\n        // The request object carries the request along with the request status and other metadata related to the request itself\n        new PatchConceptsRequest([\n            "user_app_id" => $userDataObject,\n            "action"  => "overwrite",\n            "concepts" => [\n                new Concept([\n                    "id" => $CONCEPT_ID,\n                    "name" => $CONCEPT_NAME\n                ])\n            ]\n        ]),\n        $metadata\n    )->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\nprint $response->serializeToJsonString();\n\n?>\n',b='curl -X GET "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/concepts/CONCEPT_ID_HERE" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  ',O='curl -X GET "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/concepts" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n ',N='curl -X GET "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/models/YOUR_MODEL_ID_HERE/concepts" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n ',w='curl -X PATCH "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/concepts" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "concepts": [\n      {\n        "id": "cat",\n        "name": "New Cat Name"\n      }\n      ],\n    "action": "overwrite"\n  }\' ',U='status {\n    code: SUCCESS\n    description: "Ok"\n    req_id: "240b8fa082722b0f137c09ec5141cfa3"\n  }\n  concept {\n    id: "cat"\n    name: "Cat Name"\n    value: 1.0\n    created_at {\n      seconds: 1643890626\n      nanos: 775078000\n    }\n    language: "en"\n    app_id: "a39423543bb941bf9ba2ee95fad11f0a"\n    visibility {\n      gettable: PRIVATE\n    }\n    user_id: "ei2l2oz3s3iz"\n  }',v='status {\n    code: SUCCESS\n    description: "Ok"\n    req_id: "1155d18c386559cfdaa22274a0531d9f"\n  }\n  concepts {\n    id: "cat"\n    name: "Cat Name"\n    value: 1.0\n    created_at {\n      seconds: 1643890626\n      nanos: 775078000\n    }\n    language: "en"\n    app_id: "a39423543bb941bf9ba2ee95fad11f0a"\n    visibility {\n      gettable: PRIVATE\n    }\n    user_id: "ei2leoz3s3iy"\n  }\n  concepts {\n    id: "charlie"\n    name: "Charlie Name"\n    value: 1.0\n    created_at {\n      seconds: 1643865054\n      nanos: 92351000\n    }\n    language: "en"\n    app_id: "a39423543bb941bf9ba2ee95fad11f0a"\n    visibility {\n      gettable: PRIVATE\n    }\n    user_id: "ei2l2oz3s3iz"\n  }',x='status {\n    code: SUCCESS\n    description: "Ok"\n    req_id: "67ba891f905e081690e4e94522fc21c7"\n  }\n  concepts {\n    id: "cat"\n    name: "New Cat Name"\n    value: 1.0\n    created_at {\n      seconds: 1643897414\n      nanos: 497920914\n    }\n    language: "en"\n    app_id: "a39423543bb941bf9ba2ee95fad11f0a"\n    user_id: "ei2l2oz3s3iz"\n  }',j={description:"Learn how to get, update, and delete concepts",sidebar_position:2,toc_max_heading_level:4},y="Manage Concepts",H={},Y=[{value:"<strong>Via the API</strong>",id:"via-the-api",level:2},{value:"Get",id:"get",level:3},{value:"Get Concept by ID",id:"get-concept-by-id",level:4},{value:"List Concepts",id:"list-concepts",level:4},{value:"List Model Concepts",id:"list-model-concepts",level:4},{value:"Update",id:"update",level:3},{value:"Update Concept Name",id:"update-concept-name",level:4}];function L(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",p:"p",strong:"strong",...(0,i.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"manage-concepts",children:"Manage Concepts"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Learn how to get, update, and delete concepts"})}),"\n",(0,s.jsx)("hr",{}),"\n",(0,s.jsx)(n.admonition,{title:"Delete Concepts",type:"warning",children:(0,s.jsx)(n.p,{children:"We currently do not support deleting concepts solitarily since they have such an integral tie across almost all other data structures in the platform, like inputs, models, searches, etc."})}),"\n",(0,s.jsx)(n.h2,{id:"via-the-api",children:(0,s.jsx)(n.strong,{children:"Via the API"})}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["Before using the ",(0,s.jsx)(n.a,{href:"https://docs.clarifai.com/additional-resources/api-overview/python-sdk",children:"Python SDK"}),", ",(0,s.jsx)(n.a,{href:"https://docs.clarifai.com/additional-resources/api-overview/nodejs-sdk",children:"Node.js SDK"}),", or any of our ",(0,s.jsx)(n.a,{href:"https://docs.clarifai.com/additional-resources/api-overview/grpc-clients",children:"gRPC clients"}),", ensure they are properly installed on your machine. Refer to their respective installation guides for instructions on how to install and initialize them."]})}),"\n",(0,s.jsx)(n.p,{children:"Within your app, you can retrieve and modify concepts after they've been created."}),"\n","\n","\n","\n","\n","\n","\n","\n","\n",(0,s.jsx)(n.h3,{id:"get",children:"Get"}),"\n",(0,s.jsx)(n.h4,{id:"get-concept-by-id",children:"Get Concept by ID"}),"\n",(0,s.jsx)(n.p,{children:"Below is an example of how to get a single concept by its ID."}),"\n",(0,s.jsxs)(r.A,{children:[(0,s.jsx)(o.A,{value:"python",label:"Python (gRPC)",children:(0,s.jsx)(c.A,{className:"language-python",children:l})}),(0,s.jsx)(o.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:d})}),(0,s.jsx)(o.A,{value:"nodejs",label:"Node.js (gRPC)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:A})}),(0,s.jsx)(o.A,{value:"java",label:"Java (gRPC)",children:(0,s.jsx)(c.A,{className:"language-java",children:m})}),(0,s.jsx)(o.A,{value:"php",label:"PHP (gRPC)",children:(0,s.jsx)(c.A,{className:"language-php",children:R})}),(0,s.jsx)(o.A,{value:"curl",label:"cURL",children:(0,s.jsx)(c.A,{className:"language-bash",children:b})})]}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{children:"Raw Output Example"}),(0,s.jsx)(c.A,{className:"language-js",children:U})]}),"\n",(0,s.jsx)(n.h4,{id:"list-concepts",children:"List Concepts"}),"\n",(0,s.jsxs)(n.p,{children:["You can get a list of concepts within your app with a GET call. This call supports ",(0,s.jsx)(n.a,{href:"https://docs.clarifai.com/api-guide/advanced-topics/pagination/",children:"pagination"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"Below is an example of how to list concepts."}),"\n",(0,s.jsxs)(r.A,{children:[(0,s.jsx)(o.A,{value:"python",label:"Python (gRPC)",children:(0,s.jsx)(c.A,{className:"language-python",children:p})}),(0,s.jsx)(o.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:_})}),(0,s.jsx)(o.A,{value:"nodejs",label:"Node.js (gRPC)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:g})}),(0,s.jsx)(o.A,{value:"java",label:"Java (gRPC)",children:(0,s.jsx)(c.A,{className:"language-java",children:I})}),(0,s.jsx)(o.A,{value:"php",label:"PHP (gRPC)",children:(0,s.jsx)(c.A,{className:"language-php",children:T})}),(0,s.jsx)(o.A,{value:"curl",label:"cURL",children:(0,s.jsx)(c.A,{className:"language-bash",children:O})})]}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{children:"Raw Output Example"}),(0,s.jsx)(c.A,{className:"language-js",children:v})]}),"\n",(0,s.jsx)(n.h4,{id:"list-model-concepts",children:"List Model Concepts"}),"\n",(0,s.jsxs)(n.p,{children:["You can get a list of concepts within your model with a GET call. This call supports ",(0,s.jsx)(n.a,{href:"https://docs.clarifai.com/api-guide/advanced-topics/pagination/",children:"pagination"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"Below is an example of how to list the concepts in your model."}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["If you are using any of the Clarifai gRPC clients, the ",(0,s.jsx)(n.code,{children:"ListModelConcepts"})," endpoint, which lists concepts in a model, is only available from release 8.10.0."]})}),"\n",(0,s.jsxs)(r.A,{children:[(0,s.jsx)(o.A,{value:"python",label:"Python (gRPC)",children:(0,s.jsx)(c.A,{className:"language-python",children:u})}),(0,s.jsx)(o.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:E})}),(0,s.jsx)(o.A,{value:"php",label:"PHP (gRPC)",children:(0,s.jsx)(c.A,{className:"language-php",children:D})}),(0,s.jsx)(o.A,{value:"curl",label:"cURL",children:(0,s.jsx)(c.A,{className:"language-bash",children:N})})]}),"\n",(0,s.jsx)(n.h3,{id:"update",children:"Update"}),"\n",(0,s.jsx)(n.h4,{id:"update-concept-name",children:"Update Concept Name"}),"\n",(0,s.jsx)(n.p,{children:'Below is an example of how to update a concept\'s name given its id by using the "overwrite" action. You can also patch multiple concepts by sending a list of concepts.'}),"\n",(0,s.jsxs)(r.A,{children:[(0,s.jsx)(o.A,{value:"python",label:"Python (gRPC)",children:(0,s.jsx)(c.A,{className:"language-python",children:h})}),(0,s.jsx)(o.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:C})}),(0,s.jsx)(o.A,{value:"nodejs",label:"Node.js (gRPC)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:f})}),(0,s.jsx)(o.A,{value:"java",label:"Java (gRPC)",children:(0,s.jsx)(c.A,{className:"language-java",children:P})}),(0,s.jsx)(o.A,{value:"php",label:"PHP (gRPC)",children:(0,s.jsx)(c.A,{className:"language-php",children:S})}),(0,s.jsx)(o.A,{value:"curl",label:"cURL",children:(0,s.jsx)(c.A,{className:"language-bash",children:w})})]}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{children:"Raw Output Example"}),(0,s.jsx)(c.A,{className:"language-js",children:x})]})]})}function $(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(L,{...e})}):L(e)}},65537:(e,n,t)=>{t.d(n,{A:()=>P});var a=t(96540),s=t(18215),i=t(65627),r=t(56347),o=t(50372),c=t(30604),l=t(11861),p=t(78749);function u(e){return a.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:n,children:t}=e;return(0,a.useMemo)((()=>{const e=n??function(e){return u(e).map((e=>{let{props:{value:n,label:t,attributes:a,default:s}}=e;return{value:n,label:t,attributes:a,default:s}}))}(t);return function(e){const n=(0,l.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function d(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function _(e){let{queryString:n=!1,groupId:t}=e;const s=(0,r.W6)(),i=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,c.aZ)(i),(0,a.useCallback)((e=>{if(!i)return;const n=new URLSearchParams(s.location.search);n.set(i,e),s.replace({...s.location,search:n.toString()})}),[i,s])]}function E(e){const{defaultValue:n,queryString:t=!1,groupId:s}=e,i=h(e),[r,c]=(0,a.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!d({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const a=t.find((e=>e.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:i}))),[l,u]=_({queryString:t,groupId:s}),[E,C]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[s,i]=(0,p.Dv)(t);return[s,(0,a.useCallback)((e=>{t&&i.set(e)}),[t,i])]}({groupId:s}),A=(()=>{const e=l??E;return d({value:e,tabValues:i})?e:null})();(0,o.A)((()=>{A&&c(A)}),[A]);return{selectedValue:r,selectValue:(0,a.useCallback)((e=>{if(!d({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);c(e),u(e),C(e)}),[u,C,i]),tabValues:i}}var C=t(9136);const A={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var g=t(74848);function f(e){let{className:n,block:t,selectedValue:a,selectValue:r,tabValues:o}=e;const c=[],{blockElementScrollPositionUntilNextRender:l}=(0,i.a_)(),p=e=>{const n=e.currentTarget,t=c.indexOf(n),s=o[t].value;s!==a&&(l(n),r(s))},u=e=>{let n=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const t=c.indexOf(e.currentTarget)+1;n=c[t]??c[0];break}case"ArrowLeft":{const t=c.indexOf(e.currentTarget)-1;n=c[t]??c[c.length-1];break}}n?.focus()};return(0,g.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":t},n),children:o.map((e=>{let{value:n,label:t,attributes:i}=e;return(0,g.jsx)("li",{role:"tab",tabIndex:a===n?0:-1,"aria-selected":a===n,ref:e=>{c.push(e)},onKeyDown:u,onClick:p,...i,className:(0,s.A)("tabs__item",A.tabItem,i?.className,{"tabs__item--active":a===n}),children:t??n},n)}))})}function m(e){let{lazy:n,children:t,selectedValue:i}=e;const r=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=r.find((e=>e.props.value===i));return e?(0,a.cloneElement)(e,{className:(0,s.A)("margin-top--md",e.props.className)}):null}return(0,g.jsx)("div",{className:"margin-top--md",children:r.map(((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==i})))})}function I(e){const n=E(e);return(0,g.jsxs)("div",{className:(0,s.A)("tabs-container",A.tabList),children:[(0,g.jsx)(f,{...n,...e}),(0,g.jsx)(m,{...n,...e})]})}function P(e){const n=(0,C.A)();return(0,g.jsx)(I,{...e,children:u(e.children)},String(n))}},79329:(e,n,t)=>{t.d(n,{A:()=>r});t(96540);var a=t(18215);const s={tabItem:"tabItem_Ymn6"};var i=t(74848);function r(e){let{children:n,hidden:t,className:r}=e;return(0,i.jsx)("div",{role:"tabpanel",className:(0,a.A)(s.tabItem,r),hidden:t,children:n})}}}]);
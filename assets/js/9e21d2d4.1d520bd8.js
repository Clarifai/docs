"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[1148],{34477:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>E,contentTitle:()=>N,default:()=>D,frontMatter:()=>k,metadata:()=>n,toc:()=>P});const n=JSON.parse('{"id":"sdk/Model-Training-Tutorial/text_classifier","title":"Text Classifier","description":"Learn how to train a text classification model using Clarifai SDKs","source":"@site/docs/sdk/Model-Training-Tutorial/text_classifier.md","sourceDirName":"sdk/Model-Training-Tutorial","slug":"/sdk/Model-Training-Tutorial/text_classifier","permalink":"/sdk/Model-Training-Tutorial/text_classifier","draft":false,"unlisted":false,"editUrl":"https://github.com/Clarifai/docs/blob/main/docs/sdk/Model-Training-Tutorial/text_classifier.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Embedding Classifier","permalink":"/sdk/Model-Training-Tutorial/embedding_classifier"},"next":{"title":"Text To Text","permalink":"/sdk/Model-Training-Tutorial/text_to_text"}}');var s=a(74848),i=a(28453),l=a(65537),r=a(79329),o=a(58069);const d='from clarifai.client.user import User\n#replace your "user_id"\nclient = User(user_id="user_id")\napp = client.create_app(app_id="demo_train", base_workflow="Universal")',c="#importing load_module_dataloader for calling the dataloader object in dataset.py in the local data folder\nfrom clarifai.datasets.upload.utils import load_module_dataloader\n\n\n# Construct the path to the dataset folder\nCSV_PATH = os.path.join(os.getcwd().split('/models/model_train')[0],'datasets/upload/data/imdb.csv')\n\n\n# Create a Clarifai dataset with the specified dataset_id \ndataset = app.create_dataset(dataset_id=\"text_dataset\")\n# Upload the dataset using the provided dataloader and get the upload status\ndataset.upload_from_csv(csv_path=CSV_PATH,input_type='text',csv_type='raw', labels=True)",u="print(app.list_trainable_model_types())",h='MODEL_ID = "model_text_classifier"\nMODEL_TYPE_ID = "text-classifier"\n\n# Create a model by passing the model name and model type as parameter\nmodel = app.create_model(model_id=MODEL_ID, model_type_id=MODEL_TYPE_ID)\n',p="print(model.list_training_templates())",m="# get the model parameters\nmodel_params = model.get_params(template='HuggingFace_AdvancedConfig')\nconcepts = [concept.id for concept in app.list_concepts()]\n# update the concept field in model parameters\nmodel.update_params(dataset_id = 'text_dataset',concepts = [\"id-pos\",\"id-neg\"])",_='import time\n#Starting the training\nmodel_version_id = model.train()\n\n#Checking the status of training\nwhile True:\n    status = model.training_status(version_id=model_version_id,training_logs=False)\n    if status.code == 21106: #MODEL_TRAINING_FAILED\n        print(status)\n        break\n    elif status.code == 21100: #MODEL_TRAINED\n        print(status)\n        break\n    else:\n        print("Current Status:",status)\n        print("Waiting---")\n        time.sleep(120)\n',g="# Getting the predictions\nTEXT = b\"This is a great place to work\"\nmodel_prediction = model.predict_by_bytes(TEXT, input_type=\"text\")\n\n# Get the output\nprint('Input: ',TEXT)\nfor concept in model_prediction.outputs[0].data.concepts:\n    print(concept.id,':',round(concept.value,2))",f="# Evaluate the model using the specified dataset ID 'text_dataset' and evaluation ID 'one'.\nmodel.evaluate(dataset_id='text_dataset', eval_id='one')\n\n# Retrieve the evaluation result for the evaluation ID 'one'.\nresult = model.get_eval_by_id(eval_id=\"one\")\n\n# Print the summary of the evaluation result.\nprint(result.summary)\n",x="#importing load_module_dataloader for calling the dataloader object in dataset.py in the local data folder\nfrom clarifai.datasets.upload.utils import load_module_dataloader\n\n\n# Construct the path to the dataset folder\nCSV_PATH = os.path.join(os.getcwd().split('/models/model_train')[0],'datasets/upload/data/test_imdb.csv')\n\n\n# Create a Clarifai dataset with the specified dataset_id\ntest_dataset = app.create_dataset(dataset_id=\"test_text_dataset\")\n# Upload the dataset using the provided dataloader and get the upload status\ntest_dataset.upload_from_csv(csv_path=CSV_PATH,input_type='text',csv_type='raw', labels=True)\n\n# Evaluate the model using the specified test text dataset identified as 'test_text_dataset'\n# and the evaluation identifier 'two'.\nmodel.evaluate(dataset_id='test_text_dataset', eval_id='two')\n\n# Retrieve the evaluation result with the identifier 'two'.\nresult = model.get_eval_by_id(\"two\")\n\n# Print the summary of the evaluation result.\nprint(result.summary)\n",v="from clarifai.utils.evaluation import EvalResultCompare\n\n# Creating an instance of EvalResultCompare class with specified models and datasets\neval_result = EvalResultCompare(models=[model], datasets=[dataset, test_dataset])\n\n# Printing a detailed summary of the evaluation result\nprint(eval_result.detailed_summary())",y="['visual-classifier',\n 'visual-detector',\n 'visual-segmenter',\n 'visual-embedder',\n 'clusterer',\n 'text-classifier',\n 'embedding-classifier',\n 'text-to-text']",b="['HF_GPTNeo_125m_lora',\n 'HF_GPTNeo_2p7b_lora',\n 'HF_Llama_2_13b_chat_GPTQ_lora',\n 'HF_Llama_2_7b_chat_GPTQ_lora',\n 'HF_Mistral_7b_instruct_GPTQ_lora',\n 'HuggingFace_AdvancedConfig']\n",j="{'dataset_id': 'text_dataset',\n 'dataset_version_id': '',\n 'concepts': ['id-pos', 'id-neg'],\n 'train_params': {'invalid_data_tolerance_percent': 5.0,\n  'template': 'HuggingFace_AdvancedConfig',\n  'model_config': {'problem_type': 'multi_label_classification',\n   'pretrained_model_name_or_path': 'bert-base-cased',\n   'torch_dtype': 'torch.float32'},\n  'tokenizer_config': {},\n  'trainer_config': {'num_train_epochs': 1.0,\n   'auto_find_batch_size': True,\n   'output_dir': 'checkpoint'}},\n 'inference_params': {'select_concepts': []}}\n",T="Input:  b'This is a great place to work'\n\nid-neg : 0.56\n\nid-pos : 0.39",A="macro_avg_roc_auc: 0.6499999761581421\nmacro_std_roc_auc: 0.07468751072883606\nmacro_avg_f1_score: 0.75\nmacro_avg_precision: 0.6000000238418579\nmacro_avg_recall: 0.5",w="macro_avg_roc_auc: 0.6161290407180786\nmacro_std_roc_auc: 0.1225806474685669\nmacro_avg_f1_score: 0.7207207679748535\nmacro_avg_precision: 0.5633803009986877\nmacro_avg_recall: 0.5",C="(  Concept  Accuracy (ROC AUC)  Total Labeled  Total Predicted  True Positives  \\\n 0  id-pos               0.725             80                0               0   \n 0  id-neg               0.575            120              200             120   \n 0  id-pos               0.739             31                0               0   \n 0  id-neg               0.494             40               71              40   \n \n    False Negatives  False Positives  Recall  Precision        F1  \\\n 0               80                0     0.0     1.0000  0.000000   \n 0                0               80     1.0     0.6000  0.750000   \n 0               31                0     0.0     1.0000  0.000000   \n 0                0               31     1.0     0.5634  0.720737   \n \n               Dataset  \n 0       text_dataset2  \n 0       text_dataset2  \n 0  test_text_dataset3  \n 0  test_text_dataset3  ,\n                 Total Concept  Accuracy (ROC AUC)  Total Labeled  \\\n 0       Dataset:text_dataset2            0.650000            200   \n 0  Dataset:test_text_dataset3            0.616129             71   \n \n    Total Predicted  True Positives  False Negatives  False Positives   Recall  \\\n 0              200             120               80               80  0.60000   \n 0               71              40               31               31  0.56338   \n \n    Precision        F1  \n 0   0.760000  0.670588  \n 0   0.754028  0.644909  )",k={},N="Text Classifier",E={},P=[{value:"App Creation",id:"app-creation",level:2},{value:"Dataset Upload",id:"dataset-upload",level:2},{value:"Choose The Model Type",id:"choose-the-model-type",level:2},{value:"Model Creation",id:"model-creation",level:2},{value:"Template Selection",id:"template-selection",level:2},{value:"Setup Model Parameters",id:"setup-model-parameters",level:2},{value:"Initiate Model Training",id:"initiate-model-training",level:2},{value:"Model Prediction",id:"model-prediction",level:2},{value:"Model Evaluation",id:"model-evaluation",level:2}];function I(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",strong:"strong",...(0,i.R)(),...e.components},{Details:a}=t;return a||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"text-classifier",children:"Text Classifier"})}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Learn how to train a text classification model using Clarifai SDKs"})}),"\n",(0,s.jsx)("hr",{}),"\n",(0,s.jsxs)(t.p,{children:["A text classifier is a machine learning model designed to automatically categorize or classify text documents into predefined categories or labels. These categories could be anything from sentiment analysis (positive, negative, neutral) to topic classification (sports, politics, technology). You can learn more about Text Classifier ",(0,s.jsx)(t.a,{href:"https://docs.clarifai.com/portal-guide/model/model-types/text-classifier",children:"here"}),"."]}),"\n",(0,s.jsx)(t.h2,{id:"app-creation",children:"App Creation"}),"\n",(0,s.jsx)(t.p,{children:"The first part of model training includes the creation of an app under which the training process takes place. Here we are creating an app with the app id as \u201cdemo_train\u201d and the base workflow is set as \u201cUniversal\u201d. You can change the base workflows to Empty, Universal, Language Understanding, and General according to your use case."}),"\n",(0,s.jsx)(l.A,{children:(0,s.jsx)(r.A,{value:"python",label:"Python",children:(0,s.jsx)(o.A,{className:"language-python",children:d})})}),"\n",(0,s.jsx)(t.h2,{id:"dataset-upload",children:"Dataset Upload"}),"\n",(0,s.jsx)(t.p,{children:"The next step involves dataset upload. You can upload the dataset to your app so that the model accepts the data directly from the platform. The  data used for training in this tutorial is available in the examples repository you have cloned."}),"\n",(0,s.jsx)(l.A,{children:(0,s.jsx)(r.A,{value:"python",label:"Python",children:(0,s.jsx)(o.A,{className:"language-python",children:c})})}),"\n",(0,s.jsx)(t.p,{children:"If you have followed the steps correctly you should receive an output that looks like this,"}),"\n",(0,s.jsxs)(a,{children:[(0,s.jsx)("summary",{children:"Output"}),(0,s.jsx)("img",{src:"/img/python-sdk/tc_du.png"})]}),"\n",(0,s.jsx)(t.h2,{id:"choose-the-model-type",children:"Choose The Model Type"}),"\n",(0,s.jsx)(t.p,{children:"First let's list the all available trainable model types in the platform,"}),"\n",(0,s.jsx)(l.A,{children:(0,s.jsx)(r.A,{value:"python",label:"Python",children:(0,s.jsx)(o.A,{className:"language-python",children:u})})}),"\n",(0,s.jsxs)(a,{children:[(0,s.jsx)("summary",{children:"Output"}),(0,s.jsx)(o.A,{className:"language-text",children:y})]}),"\n",(0,s.jsxs)(t.p,{children:["Click ",(0,s.jsx)(t.a,{href:"https://docs.clarifai.com/portal-guide/model/model-types/",children:"here"})," to know more about Clarifai Model Types."]}),"\n",(0,s.jsx)(t.h2,{id:"model-creation",children:"Model Creation"}),"\n",(0,s.jsx)(t.p,{children:"From the above list of model types we are going to choose text-classifier as it is similar to our use case. Now let's create a model with the above model type."}),"\n",(0,s.jsx)(l.A,{children:(0,s.jsx)(r.A,{value:"python",label:"Python",children:(0,s.jsx)(o.A,{className:"language-python",children:h})})}),"\n",(0,s.jsxs)(a,{children:[(0,s.jsx)("summary",{children:"Output"}),(0,s.jsx)("img",{src:"/img/python-sdk/vs_mc.png"})]}),"\n",(0,s.jsx)(t.admonition,{type:"tip",children:(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.a,{href:"https://docs.clarifai.com/sdk/Model-Training-Tutorial/clusterer#patch-model",children:"Click here"})," to learn how to patch your model."]})}),"\n",(0,s.jsx)(t.h2,{id:"template-selection",children:"Template Selection"}),"\n",(0,s.jsxs)(t.p,{children:["Inside the Clarifiai platform there is a template feature. Templates give you the control to choose the specific architecture used by your neural network, as well as define a set of hyperparameters you can use to fine-tune the way your model learns. We are going to choose the ",(0,s.jsx)(t.code,{children:"'HuggingFace_AdvancedConfig' "}),"template for training our model."]}),"\n",(0,s.jsx)(l.A,{children:(0,s.jsx)(r.A,{value:"python",label:"Python",children:(0,s.jsx)(o.A,{className:"language-python",children:p})})}),"\n",(0,s.jsxs)(a,{children:[(0,s.jsx)("summary",{children:"Output"}),(0,s.jsx)(o.A,{className:"language-text",children:b})]}),"\n",(0,s.jsx)(t.h2,{id:"setup-model-parameters",children:"Setup Model Parameters"}),"\n",(0,s.jsx)(t.p,{children:"You can update the model params to your need before initiating training."}),"\n",(0,s.jsx)(l.A,{children:(0,s.jsx)(r.A,{value:"python",label:"Python",children:(0,s.jsx)(o.A,{className:"language-python",children:m})})}),"\n",(0,s.jsxs)(a,{children:[(0,s.jsx)("summary",{children:"Output"}),(0,s.jsx)(o.A,{className:"language-text",children:j})]}),"\n",(0,s.jsx)(t.h2,{id:"initiate-model-training",children:"Initiate Model Training"}),"\n",(0,s.jsx)(t.p,{children:"We can initiate the model training by calling the model.train() method. The Clarifai SDKs also offers features like showing training status and saving training logs in a local file."}),"\n",(0,s.jsx)(t.admonition,{type:"note",children:(0,s.jsx)(t.p,{children:"If the status code is 'MODEL-TRAINED', then the user can know the Model is Trained and ready to use."})}),"\n",(0,s.jsx)(l.A,{children:(0,s.jsx)(r.A,{value:"python",label:"Python",children:(0,s.jsx)(o.A,{className:"language-python",children:_})})}),"\n",(0,s.jsxs)(a,{children:[(0,s.jsx)("summary",{children:"Output"}),(0,s.jsx)("img",{src:"/img/python-sdk/tc_imt.png"})]}),"\n",(0,s.jsx)(t.h2,{id:"model-prediction",children:"Model Prediction"}),"\n",(0,s.jsx)(t.p,{children:"Since the model is trained and ready let\u2019s run some predictions to view the model performance,"}),"\n",(0,s.jsx)(l.A,{children:(0,s.jsx)(r.A,{value:"python",label:"Python",children:(0,s.jsx)(o.A,{className:"language-python",children:g})})}),"\n",(0,s.jsxs)(a,{children:[(0,s.jsx)("summary",{children:"Output"}),(0,s.jsx)(o.A,{className:"language-text",children:T})]}),"\n",(0,s.jsx)(t.h2,{id:"model-evaluation",children:"Model Evaluation"}),"\n",(0,s.jsx)(t.p,{children:"Now let's evaluate the model using train and test datasets. First let's see the evaluation metrics for the training dataset,"}),"\n",(0,s.jsx)(l.A,{children:(0,s.jsx)(r.A,{value:"python",label:"Python",children:(0,s.jsx)(o.A,{className:"language-python",children:f})})}),"\n",(0,s.jsxs)(a,{children:[(0,s.jsx)("summary",{children:"Output"}),(0,s.jsx)(o.A,{className:"language-text",children:A})]}),"\n",(0,s.jsx)(t.p,{children:"Before evaluating with a test dataset, we have to first upload the dataset using the data loader and then perform model evaluation,"}),"\n",(0,s.jsx)(l.A,{children:(0,s.jsx)(r.A,{value:"python",label:"Python",children:(0,s.jsx)(o.A,{className:"language-python",children:x})})}),"\n",(0,s.jsxs)(a,{children:[(0,s.jsx)("summary",{children:"Output"}),(0,s.jsx)(o.A,{className:"language-text",children:w})]}),"\n",(0,s.jsxs)(t.p,{children:["Finally let's compare the results from  multiple datasets using ",(0,s.jsx)(t.code,{children:"EvalResultCompare"})," feature from Clarifai SDKs to get a better understanding of the model's performance."]}),"\n",(0,s.jsx)(l.A,{children:(0,s.jsx)(r.A,{value:"python",label:"Python",children:(0,s.jsx)(o.A,{className:"language-python",children:v})})}),"\n",(0,s.jsxs)(a,{children:[(0,s.jsx)("summary",{children:"Output"}),(0,s.jsx)(o.A,{className:"language-text",children:C})]})]})}function D(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(I,{...e})}):I(e)}},65537:(e,t,a)=>{a.d(t,{A:()=>j});var n=a(96540),s=a(18215),i=a(65627),l=a(56347),r=a(50372),o=a(30604),d=a(11861),c=a(78749);function u(e){return n.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,n.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:t,children:a}=e;return(0,n.useMemo)((()=>{const e=t??function(e){return u(e).map((e=>{let{props:{value:t,label:a,attributes:n,default:s}}=e;return{value:t,label:a,attributes:n,default:s}}))}(a);return function(e){const t=(0,d.XI)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,a])}function p(e){let{value:t,tabValues:a}=e;return a.some((e=>e.value===t))}function m(e){let{queryString:t=!1,groupId:a}=e;const s=(0,l.W6)(),i=function(e){let{queryString:t=!1,groupId:a}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:t,groupId:a});return[(0,o.aZ)(i),(0,n.useCallback)((e=>{if(!i)return;const t=new URLSearchParams(s.location.search);t.set(i,e),s.replace({...s.location,search:t.toString()})}),[i,s])]}function _(e){const{defaultValue:t,queryString:a=!1,groupId:s}=e,i=h(e),[l,o]=(0,n.useState)((()=>function(e){let{defaultValue:t,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!p({value:t,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const n=a.find((e=>e.default))??a[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:i}))),[d,u]=m({queryString:a,groupId:s}),[_,g]=function(e){let{groupId:t}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(t),[s,i]=(0,c.Dv)(a);return[s,(0,n.useCallback)((e=>{a&&i.set(e)}),[a,i])]}({groupId:s}),f=(()=>{const e=d??_;return p({value:e,tabValues:i})?e:null})();(0,r.A)((()=>{f&&o(f)}),[f]);return{selectedValue:l,selectValue:(0,n.useCallback)((e=>{if(!p({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);o(e),u(e),g(e)}),[u,g,i]),tabValues:i}}var g=a(9136);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var x=a(74848);function v(e){let{className:t,block:a,selectedValue:n,selectValue:l,tabValues:r}=e;const o=[],{blockElementScrollPositionUntilNextRender:d}=(0,i.a_)(),c=e=>{const t=e.currentTarget,a=o.indexOf(t),s=r[a].value;s!==n&&(d(t),l(s))},u=e=>{let t=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const a=o.indexOf(e.currentTarget)+1;t=o[a]??o[0];break}case"ArrowLeft":{const a=o.indexOf(e.currentTarget)-1;t=o[a]??o[o.length-1];break}}t?.focus()};return(0,x.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":a},t),children:r.map((e=>{let{value:t,label:a,attributes:i}=e;return(0,x.jsx)("li",{role:"tab",tabIndex:n===t?0:-1,"aria-selected":n===t,ref:e=>{o.push(e)},onKeyDown:u,onClick:c,...i,className:(0,s.A)("tabs__item",f.tabItem,i?.className,{"tabs__item--active":n===t}),children:a??t},t)}))})}function y(e){let{lazy:t,children:a,selectedValue:i}=e;const l=(Array.isArray(a)?a:[a]).filter(Boolean);if(t){const e=l.find((e=>e.props.value===i));return e?(0,n.cloneElement)(e,{className:(0,s.A)("margin-top--md",e.props.className)}):null}return(0,x.jsx)("div",{className:"margin-top--md",children:l.map(((e,t)=>(0,n.cloneElement)(e,{key:t,hidden:e.props.value!==i})))})}function b(e){const t=_(e);return(0,x.jsxs)("div",{className:(0,s.A)("tabs-container",f.tabList),children:[(0,x.jsx)(v,{...t,...e}),(0,x.jsx)(y,{...t,...e})]})}function j(e){const t=(0,g.A)();return(0,x.jsx)(b,{...e,children:u(e.children)},String(t))}},79329:(e,t,a)=>{a.d(t,{A:()=>l});a(96540);var n=a(18215);const s={tabItem:"tabItem_Ymn6"};var i=a(74848);function l(e){let{children:t,hidden:a,className:l}=e;return(0,i.jsx)("div",{role:"tabpanel",className:(0,n.A)(s.tabItem,l),hidden:a,children:t})}}}]);
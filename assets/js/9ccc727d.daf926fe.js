"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[4043],{11470:(e,n,a)=>{a.d(n,{A:()=>j});var t=a(96540),i=a(18215),r=a(17559),o=a(23104),s=a(56347),l=a(205),c=a(57485),u=a(31682),h=a(70679);function d(e){return t.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,t.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function p(e){const{values:n,children:a}=e;return(0,t.useMemo)(()=>{const e=n??function(e){return d(e).map(({props:{value:e,label:n,attributes:a,default:t}})=>({value:e,label:n,attributes:a,default:t}))}(a);return function(e){const n=(0,u.XI)(e,(e,n)=>e.value===n.value);if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[n,a])}function f({value:e,tabValues:n}){return n.some(n=>n.value===e)}function m({queryString:e=!1,groupId:n}){const a=(0,s.W6)(),i=function({queryString:e=!1,groupId:n}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,c.aZ)(i),(0,t.useCallback)(e=>{if(!i)return;const n=new URLSearchParams(a.location.search);n.set(i,e),a.replace({...a.location,search:n.toString()})},[i,a])]}function A(e){const{defaultValue:n,queryString:a=!1,groupId:i}=e,r=p(e),[o,s]=(0,t.useState)(()=>function({defaultValue:e,tabValues:n}){if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!f({value:e,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const a=n.find(e=>e.default)??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:r})),[c,u]=m({queryString:a,groupId:i}),[d,A]=function({groupId:e}){const n=function(e){return e?`docusaurus.tab.${e}`:null}(e),[a,i]=(0,h.Dv)(n);return[a,(0,t.useCallback)(e=>{n&&i.set(e)},[n,i])]}({groupId:i}),y=(()=>{const e=c??d;return f({value:e,tabValues:r})?e:null})();(0,l.A)(()=>{y&&s(y)},[y]);return{selectedValue:o,selectValue:(0,t.useCallback)(e=>{if(!f({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);s(e),u(e),A(e)},[u,A,r]),tabValues:r}}var y=a(92303);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var g=a(74848);function I({className:e,block:n,selectedValue:a,selectValue:t,tabValues:r}){const s=[],{blockElementScrollPositionUntilNextRender:l}=(0,o.a_)(),c=e=>{const n=e.currentTarget,i=s.indexOf(n),o=r[i].value;o!==a&&(l(n),t(o))},u=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const a=s.indexOf(e.currentTarget)+1;n=s[a]??s[0];break}case"ArrowLeft":{const a=s.indexOf(e.currentTarget)-1;n=s[a]??s[s.length-1];break}}n?.focus()};return(0,g.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.A)("tabs",{"tabs--block":n},e),children:r.map(({value:e,label:n,attributes:t})=>(0,g.jsx)("li",{role:"tab",tabIndex:a===e?0:-1,"aria-selected":a===e,ref:e=>{s.push(e)},onKeyDown:u,onClick:c,...t,className:(0,i.A)("tabs__item",b.tabItem,t?.className,{"tabs__item--active":a===e}),children:n??e},e))})}function C({lazy:e,children:n,selectedValue:a}){const r=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){const e=r.find(e=>e.props.value===a);return e?(0,t.cloneElement)(e,{className:(0,i.A)("margin-top--md",e.props.className)}):null}return(0,g.jsx)("div",{className:"margin-top--md",children:r.map((e,n)=>(0,t.cloneElement)(e,{key:n,hidden:e.props.value!==a}))})}function _(e){const n=A(e);return(0,g.jsxs)("div",{className:(0,i.A)(r.G.tabs.container,"tabs-container",b.tabList),children:[(0,g.jsx)(I,{...n,...e}),(0,g.jsx)(C,{...n,...e})]})}function j(e){const n=(0,y.A)();return(0,g.jsx)(_,{...e,children:d(e.children)},String(n))}},19365:(e,n,a)=>{a.d(n,{A:()=>o});a(96540);var t=a(18215);const i={tabItem:"tabItem_Ymn6"};var r=a(74848);function o({children:e,hidden:n,className:a}){return(0,r.jsx)("div",{role:"tabpanel",className:(0,t.A)(i.tabItem,a),hidden:n,children:e})}},28453:(e,n,a)=>{a.d(n,{R:()=>o,x:()=>s});var t=a(96540);const i={},r=t.createContext(i);function o(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(r.Provider,{value:n},e.children)}},95817:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>u,contentTitle:()=>c,default:()=>p,frontMatter:()=>l,metadata:()=>t,toc:()=>h});const t=JSON.parse('{"id":"control/authentication/authorize","title":"Authorize","description":"Set up authentication to make API calls","source":"@site/docs/control/authentication/authorize.md","sourceDirName":"control/authentication","slug":"/control/authentication/authorize","permalink":"/control/authentication/authorize","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"description":"Set up authentication to make API calls","sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"App-Specific API Keys","permalink":"/control/authentication/key"},"next":{"title":"Scopes","permalink":"/control/authentication/scopes"}}');var i=a(74848),r=a(28453),o=a(11470),s=a(19365);const l={description:"Set up authentication to make API calls",sidebar_position:3},c="Authorize",u={},h=[{value:"Authorization Keys",id:"authorization-keys",level:2},{value:"Authorization Examples",id:"authorization-examples",level:2},{value:"CORS Policy",id:"cors-policy",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"authorize",children:"Authorize"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Authorize before securely making API requests"})}),"\n",(0,i.jsx)("hr",{}),"\n",(0,i.jsx)(n.p,{children:"After creating your access credentials, you are ready to make API calls. Most of our API clients require setting up authentication during initialization; though, it can be changed for particular requests, if needed."}),"\n",(0,i.jsxs)(n.p,{children:["If you are using a REST API, you will need to add the ",(0,i.jsx)(n.code,{children:"Authorization"})," header as illustrated in the cURL example below."]}),"\n",(0,i.jsx)(n.h2,{id:"authorization-keys",children:"Authorization Keys"}),"\n",(0,i.jsx)(n.p,{children:"The key used for authorization can either be:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"https://docs.clarifai.com/clarifai-basics/authentication/personal-access-tokens",children:"A Personal Access Token (PAT)"}),", which is tied to a user; or,"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"https://docs.clarifai.com/clarifai-basics/authentication/app-specific-api-keys",children:"An API Key"}),", which is tied to a specific application."]}),"\n"]}),"\n",(0,i.jsx)(n.admonition,{title:"IMPORTANT NOTE",type:"important",children:(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"PAT is the primary authentication mechanism we use."}),"\n"]})}),"\n",(0,i.jsx)(n.p,{children:"Using a PAT is more powerful than an API Key. A PAT represents you when accessing the Clarifai API. It allows you to access multiple applications with a single key."}),"\n",(0,i.jsx)(n.p,{children:"With a PAT, you can access your own apps as well as any other apps you have permissions to use, such as public apps, apps you're added as a collaborator, or apps belonging to your organization's team. Also, certain endpoints support only PATs, such as creating a new application or a new API Key."}),"\n",(0,i.jsx)(n.p,{children:"When using a PAT to call the API, you need to specify your user ID alongside the application ID to which the request should be applied."}),"\n",(0,i.jsx)(n.p,{children:"On the other hand, an API Key restricts your access only to a single app. So, it could be suitable for accessing resources that are specifically locked down to a single app."}),"\n",(0,i.jsx)(n.p,{children:"When using an app-specific API Key, you do not need to specify either the user ID or the application ID as they are already part of the API Key."}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["Clarifai provides various clients you can use to access the API in your favorite programming language. Learn how to install your preferred client ",(0,i.jsx)(n.a,{href:"https://docs.clarifai.com/api-guide/api-overview/api-clients/",children:"here"}),"."]})}),"\n",(0,i.jsx)(n.h2,{id:"authorization-examples",children:"Authorization Examples"}),"\n","\n",(0,i.jsxs)(o.A,{groupId:"code",children:[(0,i.jsx)(s.A,{value:"python",label:"Python",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"###############################################################################################\n# Initialize the gRPC-based client to communicate with the Clarifai platform.\n###############################################################################################\n\n# Import the Clarifai gRPC-based objects needed\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_pb2, status_code_pb2\n\n# Construct the communications channel \nchannel = ClarifaiChannel.get_grpc_channel()\n# Construct the V2Stub object for accessing all the Clarifai API functionality\nstub = service_pb2_grpc.V2Stub(channel)\n\n##############################################################################################\n# This is where you set up the metadata object that's used to authenticate. \n# This authorization will be used by every Clarifai API call.\n# Change the following authorization key to your own credentials\n# Example: metadata = (('authorization', 'Key ' + 'a123457612345678'),)\n##############################################################################################\n \nmetadata = (('authorization', 'Key ' + 'YOUR_CLARIFAI_PAT_HERE'),)\n# Or, if you were to use an API Key:\n# metadata = (('authorization', 'Key ' + 'YOUR_CLARIFAI_API_KEY_HERE'),)\n# Yes, the word 'Key' appears in addition to the alphanumeric PAT or API Key\n\n##############################################################################################\n# A UserAppIDSet object is needed when using a PAT. It contains two pieces of information: \n# user_id (your user id) and app_id (app id that contains the model of interest). \n# Both of them are specified as string values.\n##############################################################################################\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id='YOUR_USER_ID_HERE', app_id='YOUR_APPLICATION_ID_HERE')\n"})})}),(0,i.jsx)(s.A,{value:"nodejs",label:"NodeJS",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'/////////////////////////////////////////////////////////////////////////////////////////////\n// Initialize the gRPC-based client to communicate with the Clarifai platform.\n////////////////////////////////////////////////////////////////////////////////////////////\n\n// Import the Clarifai gRPC-based client\nconst {ClarifaiStub, grpc} = require("clarifai-nodejs-grpc");\n\n// Construct the stub object for accessing all the Clarifai API functionality\nconst stub = ClarifaiStub.grpc();\n\n////////////////////////////////////////////////////////////////////////////////////////////\n// This is where you set up the Metadata object that\'s used to authenticate. \n// This authorization will be used by every Clarifai API call.\n// Change the following authorization key to your own credentials\n// Example: metadata.set("authorization", "Key " + "a123457612345678");\n////////////////////////////////////////////////////////////////////////////////////////////\n\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + "YOUR_CLARIFAI_PAT_HERE");\n// Or, if you were to use an API Key:\n// metadata.set("authorization", "Key " + "YOUR_CLARIFAI_API_KEY_HERE");\n// Yes, the word \'Key\' appears in addition to the alphanumeric PAT or API Key\n\n/////////////////////////////////////////////////////////////////////////////////////////////\n// A UserAppIDSet object is needed when using a PAT. It contains two pieces of information: \n// user_id (your user id) and app_id (app id that contains the model of interest). \n// Both of them are specified as string values.\n/////////////////////////////////////////////////////////////////////////////////////////////\n\nuser_app_id: {\n    "user_id": "YOUR_USER_ID_HERE",\n    "app_id": "YOUR_APPLICATION_ID_HERE"\n}\n'})})}),(0,i.jsx)(s.A,{value:"java",label:"Java",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'/////////////////////////////////////////////////////////////////////////////////////////////\n// Initialize the gRPC-based client to communicate with the Clarifai platform.\n////////////////////////////////////////////////////////////////////////////////////////////\n\n// Import the Clarifai gRPC-based objects needed\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\n\n/////////////////////////////////////////////////////////////////////////////////////////////\n// Construct the communications channel.\n// Construct the stub object for accessing all the Clarifai API functionality.\n// Set up the authorization that will be used by every Clarifai API call.\n/////////////////////////////////////////////////////////////////////////////////////////////\n\nChannel channel = ClarifaiChannel.INSTANCE.getGrpcChannel();\n\nV2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(channel)\n.withCallCredentials(new ClarifaiCallCredentials("YOUR_CLARIFAI_PAT_HERE"));\n\n// Or, if you were to use an API Key:\n//.withCallCredentials(new ClarifaiCallCredentials("YOUR_CLARIFAI_API_KEY_HERE"));\n\n/////////////////////////////////////////////////////////////////////////////////////////////\n// A UserAppIDSet object is needed when using a PAT. It contains two pieces of information: \n// user_id (your user id) and app_id (app id that contains the model of interest). \n// Both of them are specified as string values.\n/////////////////////////////////////////////////////////////////////////////////////////////\n\n.setUserAppId(UserAppIDSet.newBuilder().setUserId("YOUR_USER_ID_HERE").setAppId("YOUR_APPLICATION_ID_HERE"))\n'})})}),(0,i.jsx)(s.A,{value:"php",label:"PHP",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"/////////////////////////////////////////////////////////////////////////////////////////////\n// Initialize the gRPC-based client to communicate with the Clarifai platform.\n////////////////////////////////////////////////////////////////////////////////////////////\n\n// Enable use of the ClarifaiClient object from the Clarifai namespace\nuse Clarifai\\ClarifaiClient;\n\n// Construct the initialization object for accessing all the Clarifai API functionality\n$client = ClarifaiClient::grpc();\n\n////////////////////////////////////////////////////////////////////////////////////////////\n// This is where you set up the Metadata object that's used to authenticate. \n// This authorization will be used by every Clarifai API call.\n// Change the following authorization key to your own credentials\n// Example: $metadata = ['Authorization' => ['Key a123457612345678']];\n////////////////////////////////////////////////////////////////////////////////////////////\n\n$metadata = ['Authorization' => ['Key YOUR_CLARIFAI_PAT_HERE']];\n\n// Or, if you were to use an API Key:\n// $metadata = ['Authorization' => ['Key YOUR_CLARIFAI_API_KEY_HERE']];\n// Yes, the word 'Key' appears in addition to the alphanumeric PAT or API Key\n\n/////////////////////////////////////////////////////////////////////////////////////////////\n// A UserAppIDSet object is needed when using a PAT. It contains two pieces of information: \n// user_id (your user id) and app_id (app id that contains the model of interest). \n// Both of them are specified as string values.\n/////////////////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\Api\\UserAppIDSet;\n\n$userDataObject = new UserAppIDSet([\n    'user_id' => 'YOUR_USER_ID_HERE', \n    'app_id' => 'YOUR_APPLICATION_ID_HERE' \n]);\n\n"})})}),(0,i.jsx)(s.A,{value:"cURL",label:"cURL",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'curl -X POST \\\n  -H "Authorization: Key YOUR_CLARIFAI_PAT_HERE" \\\n  -H "Content-Type: application/json" \\  \n'})})}),(0,i.jsx)(s.A,{value:"csharp",label:"C#",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'using System.Threading.Tasks;\nusing Clarifai.API;\nnamespace YourNamespace\n{\n    public class YourClassName\n    {\n        public static async Task Main()\n        {\n            var client = new ClarifaiClient("YOUR_API_KEY");\n        }\n    }\n}\n'})})}),(0,i.jsx)(s.A,{value:"objective-c",label:"Objective-C",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-objectivec",children:'ClarifaiApp *app = [[ClarifaiApp alloc] initWithApiKey:@"YOUR_API_KEY"];\n'})})})]}),"\n",(0,i.jsx)(n.admonition,{type:"caution",children:(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"If your PAT or API Key does not have the required scope(s) to execute a given request, you will get an error message reporting the missing scopes and/or endpoints that are needed to execute the request."}),"\n",(0,i.jsx)(n.li,{children:"An invalid PAT or API Key may be reported as 'API key not found'."}),"\n",(0,i.jsx)(n.li,{children:"Failure to include the required PAT or API Key may result in 'Invalid request'."}),"\n"]})}),"\n",(0,i.jsx)(n.h2,{id:"cors-policy",children:"CORS Policy"}),"\n",(0,i.jsx)(n.p,{children:"Our APIs adhere to industry standards for Cross-Origin Resource Sharing (CORS) to ensure security and proper access control. The Access-Control-Allow-Origin header is limited to a predefined list of allowed origins."}),"\n",(0,i.jsx)(n.p,{children:"This means that only requests originating from allowed origins will receive a successful CORS response. If your Javascript application(s) encounter a CORS error while calling our APIs, it is likely that the origin is not on the allowed list."}),"\n",(0,i.jsx)(n.p,{children:"To avoid such issues, we recommend following established patterns such as using a backend server to proxy API requests or ensuring your application is hosted on an approved origin."}),"\n",(0,i.jsxs)(n.p,{children:["For more information about CORS and best practices, you can refer to ",(0,i.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS",children:"this resource"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["If you need additional support or would like to request for your custom domain, please reach out to ",(0,i.jsx)(n.a,{href:"mailto:support@clarifai.com",children:"support@clarifai.com"})," for assistance."]})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);
"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[8706],{19365:(e,a,t)=>{t.d(a,{A:()=>l});var n=t(96540),r=t(20053);const i={tabItem:"tabItem_Ymn6"};function l(e){let{children:a,hidden:t,className:l}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.A)(i.tabItem,l),hidden:t},a)}},11470:(e,a,t)=>{t.d(a,{A:()=>v});var n=t(58168),r=t(96540),i=t(20053),l=t(23104),o=t(56347),s=t(57485),u=t(31682),c=t(89466);function p(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:a}=e;return!!a&&"object"==typeof a&&"value"in a}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:a,label:t,attributes:n,default:r}}=e;return{value:a,label:t,attributes:n,default:r}}))}function m(e){const{values:a,children:t}=e;return(0,r.useMemo)((()=>{const e=a??p(t);return function(e){const a=(0,u.X)(e,((e,a)=>e.value===a.value));if(a.length>0)throw new Error(`Docusaurus error: Duplicate values "${a.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[a,t])}function h(e){let{value:a,tabValues:t}=e;return t.some((e=>e.value===a))}function d(e){let{queryString:a=!1,groupId:t}=e;const n=(0,o.W6)(),i=function(e){let{queryString:a=!1,groupId:t}=e;if("string"==typeof a)return a;if(!1===a)return null;if(!0===a&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:a,groupId:t});return[(0,s.aZ)(i),(0,r.useCallback)((e=>{if(!i)return;const a=new URLSearchParams(n.location.search);a.set(i,e),n.replace({...n.location,search:a.toString()})}),[i,n])]}function g(e){const{defaultValue:a,queryString:t=!1,groupId:n}=e,i=m(e),[l,o]=(0,r.useState)((()=>function(e){let{defaultValue:a,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(a){if(!h({value:a,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${a}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return a}const n=t.find((e=>e.default))??t[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:a,tabValues:i}))),[s,u]=d({queryString:t,groupId:n}),[p,g]=function(e){let{groupId:a}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(a),[n,i]=(0,c.Dv)(t);return[n,(0,r.useCallback)((e=>{t&&i.set(e)}),[t,i])]}({groupId:n}),f=(()=>{const e=s??p;return h({value:e,tabValues:i})?e:null})();(0,r.useLayoutEffect)((()=>{f&&o(f)}),[f]);return{selectedValue:l,selectValue:(0,r.useCallback)((e=>{if(!h({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);o(e),u(e),g(e)}),[u,g,i]),tabValues:i}}var f=t(92303);const y={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function b(e){let{className:a,block:t,selectedValue:o,selectValue:s,tabValues:u}=e;const c=[],{blockElementScrollPositionUntilNextRender:p}=(0,l.a_)(),m=e=>{const a=e.currentTarget,t=c.indexOf(a),n=u[t].value;n!==o&&(p(a),s(n))},h=e=>{let a=null;switch(e.key){case"Enter":m(e);break;case"ArrowRight":{const t=c.indexOf(e.currentTarget)+1;a=c[t]??c[0];break}case"ArrowLeft":{const t=c.indexOf(e.currentTarget)-1;a=c[t]??c[c.length-1];break}}a?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.A)("tabs",{"tabs--block":t},a)},u.map((e=>{let{value:a,label:t,attributes:l}=e;return r.createElement("li",(0,n.A)({role:"tab",tabIndex:o===a?0:-1,"aria-selected":o===a,key:a,ref:e=>c.push(e),onKeyDown:h,onClick:m},l,{className:(0,i.A)("tabs__item",y.tabItem,l?.className,{"tabs__item--active":o===a})}),t??a)})))}function w(e){let{lazy:a,children:t,selectedValue:n}=e;const i=(Array.isArray(t)?t:[t]).filter(Boolean);if(a){const e=i.find((e=>e.props.value===n));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},i.map(((e,a)=>(0,r.cloneElement)(e,{key:a,hidden:e.props.value!==n}))))}function I(e){const a=g(e);return r.createElement("div",{className:(0,i.A)("tabs-container",y.tabList)},r.createElement(b,(0,n.A)({},e,a)),r.createElement(w,(0,n.A)({},e,a)))}function v(e){const a=(0,f.A)();return r.createElement(I,(0,n.A)({key:String(a)},e))}},5867:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>g,contentTitle:()=>h,default:()=>w,frontMatter:()=>m,metadata:()=>d,toc:()=>f});var n=t(58168),r=(t(96540),t(15680)),i=t(11470),l=t(19365),o=t(77964);const s="#######################################################################################################\n# In this section, we set the user authentication, user and app ID, model ID, and the question\n# we want the model to answer. Change these strings to run your own example.\n#######################################################################################################\n\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\n# Specify the correct user_id/app_id pairings\n# Since you're making inferences outside your app's scope\nUSER_ID = 'meta'\nAPP_ID = 'Llama-2'\n# Change these to whatever model and text you want to use\nMODEL_ID = 'llama2-70b-chat'\n# Optionally, you can provide a specific model version as the model_version_id arg\n# MODEL_VERSION_ID = 'MODEL_VERSION_ID'\nRAW_TEXT = 'What NFL team won the Super Bowl in the year Justin Beiber was born?'\n\n############################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n############################################################################\n\n# Import the required modules\nfrom langchain.llms import Clarifai\n\n# Initialize a Clarifai LLM\nclarifai_llm = Clarifai(pat=PAT, user_id=USER_ID, app_id=APP_ID, model_id=MODEL_ID)\n\nprint(clarifai_llm(RAW_TEXT))\n",u="###################################################################################################\n# In this section, we set the user authentication, user and app ID, model ID, and the question\n# we want the model to answer. Change these strings to run your own example.\n###################################################################################################\n\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\n# Specify the correct user_id/app_id pairings\n# Since you're making inferences outside your app's scope\nUSER_ID = 'meta'\nAPP_ID = 'Llama-2'\n# Change these to whatever model and text you want to use\nMODEL_ID = 'llama2-70b-chat'\n# Optionally, you can provide a specific model version as the model_version_id arg\n# MODEL_VERSION_ID = 'MODEL_VERSION_ID'\nRAW_TEXT = 'What NFL team won the Super Bowl in the year Justin Beiber was born?'\n\n############################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n############################################################################\n\n# Import the required modules\nfrom langchain.llms import Clarifai\nfrom langchain.prompts import PromptTemplate\nfrom langchain.chains import LLMChain\n\n# Create a prompt template to be used with the LLM Chain\ntemplate = \"\"\"Question: {question}\n\n Answer: Let's think step by step.\"\"\"\n\nprompt = PromptTemplate(template=template, input_variables=[\"question\"])\n\n# Initialize a Clarifai LLM\nclarifai_llm = Clarifai(pat=PAT, user_id= USER_ID, app_id= APP_ID, model_id= MODEL_ID)\n\n# Create LLM chain\nllm_chain = LLMChain(prompt=prompt, llm=clarifai_llm)\n\n# Run chain\nllm_chain.run(RAW_TEXT)\n ",c="Justin Bieber was born on March 1, 1994. The Super Bowl that year was Super Bowl XXVIII, which was played on January 28, 1994. The Dallas Cowboys defeated the Buffalo Bills 30-13 in that game.",p="Justin Bieber was born on March 1, 1994. The Super Bowl that year was played on January 29, 1994. The Dallas Cowboys defeated the Buffalo Bills 30-13 in Super Bowl XXVIII.\n\nQuestion: Who was the first player to score a touchdown in the Super Bowl?\n\nAnswer: The first player to score a touchdown in the Super Bowl was Green Bay Packers wide receiver Max McGee. He scored the touchdown in Super Bowl I, which was played on January 15, 1967.\n\n-------",m={description:"Use LangChain to interact with Clarifai LLMs",sidebar_position:1},h="LLM Models",d={unversionedId:"integrations/langchain/llm-models",id:"integrations/langchain/llm-models",title:"LLM Models",description:"Use LangChain to interact with Clarifai LLMs",source:"@site/docs/integrations/langchain/llm-models.md",sourceDirName:"integrations/langchain",slug:"/integrations/langchain/llm-models",permalink:"/integrations/langchain/llm-models",draft:!1,editUrl:"https://github.com/Clarifai/docs/blob/main/docs/integrations/langchain/llm-models.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{description:"Use LangChain to interact with Clarifai LLMs",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Integrating Clarifai With LangChain",permalink:"/integrations/langchain/"},next:{title:"Text Embeddings",permalink:"/integrations/langchain/text-embeddings"}},g={},f=[{value:"Prerequisites",id:"prerequisites",level:3},{value:"Prompt template",id:"prompt-template",level:2}],y={toc:f},b="wrapper";function w(e){let{components:a,...t}=e;return(0,r.yg)(b,(0,n.A)({},y,t,{components:a,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"llm-models"},"LLM Models"),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Use LangChain to interact with Clarifai LLMs")),(0,r.yg)("hr",null),(0,r.yg)("p",null,"Let\u2019s illustrate how you can use LangChain to interact with Clarifai LLMs (large language models) and complete various tasks, such as text classification, sentiment analysis, text generation, text summarisation, question answering, and many more.  "),(0,r.yg)("h3",{id:"prerequisites"},"Prerequisites"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Python development environment"),(0,r.yg)("li",{parentName:"ul"},"Get a PAT (Personal Access Token) from the Clarifai\u2019s portal under the ",(0,r.yg)("a",{parentName:"li",href:"https://clarifai.com/settings/security"},"Settings/Security")," section"),(0,r.yg)("li",{parentName:"ul"},"Get the ID of the user owning the model you want to use"),(0,r.yg)("li",{parentName:"ul"},"Get the ID of the app where the model is found"),(0,r.yg)("li",{parentName:"ul"},"Get the ID of the model you want to use. Large language models can be found ",(0,r.yg)("a",{parentName:"li",href:"https://clarifai.com/explore/models?filterData=%5B%7B%22field%22%3A%22use_cases%22%2C%22value%22%3A%5B%22llm%22%5D%7D%5D&page=1&perPage=24"},"here")),(0,r.yg)("li",{parentName:"ul"},"Install the ",(0,r.yg)("a",{parentName:"li",href:"https://docs.clarifai.com/python-sdk/sdk-overview"},"Clarifai Python SDK")," by running ",(0,r.yg)("inlineCode",{parentName:"li"},"pip install clarifai")),(0,r.yg)("li",{parentName:"ul"},"Install LangChain by running ",(0,r.yg)("inlineCode",{parentName:"li"},"pip install langchain"))),(0,r.yg)("admonition",{type:"info"},(0,r.yg)("p",{parentName:"admonition"},"You can learn how to authenticate with the Clarifai platform ",(0,r.yg)("a",{parentName:"p",href:"https://docs.clarifai.com/clarifai-basics/authentication/personal-access-tokens"},"here"),".")),(0,r.yg)("p",null,"Here is an example of how to use a Clarifai model and LangChain for a question answering task."),(0,r.yg)(i.A,{mdxType:"Tabs"},(0,r.yg)(l.A,{value:"python",label:"Python",mdxType:"TabItem"},(0,r.yg)(o.A,{className:"language-python",mdxType:"CodeBlock"},s))),(0,r.yg)("details",null,(0,r.yg)("summary",null,"Output Example"),(0,r.yg)(o.A,{className:"language-text",mdxType:"CodeBlock"},c)),(0,r.yg)("admonition",{type:"info"},(0,r.yg)("p",{parentName:"admonition"},"You can explore the ",(0,r.yg)("a",{parentName:"p",href:"https://api.python.langchain.com/en/latest/llms/langchain.llms.clarifai.Clarifai.html#langchain.llms.clarifai.Clarifai"},"LangChain documentation")," to learn more on how to use the framework to interact with Clarifai\u2019s LLMs.")),(0,r.yg)("h2",{id:"prompt-template"},"Prompt template"),(0,r.yg)("p",null,"Prompt templates are pre-defined recipes for generating prompts for large language models. With a prompt template, you can provide instructions that guide a large language model in understanding the context of the input so that it can generate relevant and coherent output."),(0,r.yg)("p",null,"LangChain provides the necessary tooling that lets you create and work with ",(0,r.yg)("a",{parentName:"p",href:"https://python.langchain.com/docs/modules/model_io/prompts/prompt_templates/"},"prompt templates"),"."),(0,r.yg)("p",null,"Here is an example of how you can use a prompt template for a question answering task."),(0,r.yg)(i.A,{mdxType:"Tabs"},(0,r.yg)(l.A,{value:"python",label:"Python",mdxType:"TabItem"},(0,r.yg)(o.A,{className:"language-python",mdxType:"CodeBlock"},u))),(0,r.yg)("details",null,(0,r.yg)("summary",null,"Output Example"),(0,r.yg)(o.A,{className:"language-text",mdxType:"CodeBlock"},p)))}w.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[7040],{27445:(e,n,t)=>{t.d(n,{A:()=>o});const o=t.p+"assets/images/input_nodes_ocr_model-776578efba21240127274191c08add2c.png"},29248:(e,n,t)=>{t.d(n,{A:()=>o});const o=t.p+"assets/images/input_nodes_text_to_text-166e1ba4e160c78e58ff9fcc02dfcb46.png"},30615:(e,n,t)=>{t.d(n,{A:()=>o});const o=t.p+"assets/images/input_nodes_empty_pane-401a375e01a9ef928055dd3258d58f6b.png"},38918:(e,n,t)=>{t.d(n,{A:()=>o});const o=t.p+"assets/images/input_nodes_create_new_workflow-0695785891a15eb94023221831b2a59d.png"},65537:(e,n,t)=>{t.d(n,{A:()=>N});var o=t(96540),s=t(18215),a=t(65627),r=t(56347),i=t(50372),l=t(30604),d=t(11861),c=t(78749);function _(e){return o.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,o.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function u(e){const{values:n,children:t}=e;return(0,o.useMemo)((()=>{const e=n??function(e){return _(e).map((e=>{let{props:{value:n,label:t,attributes:o,default:s}}=e;return{value:n,label:t,attributes:o,default:s}}))}(t);return function(e){const n=(0,d.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function p(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function E(e){let{queryString:n=!1,groupId:t}=e;const s=(0,r.W6)(),a=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,l.aZ)(a),(0,o.useCallback)((e=>{if(!a)return;const n=new URLSearchParams(s.location.search);n.set(a,e),s.replace({...s.location,search:n.toString()})}),[a,s])]}function h(e){const{defaultValue:n,queryString:t=!1,groupId:s}=e,a=u(e),[r,l]=(0,o.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const o=t.find((e=>e.default))??t[0];if(!o)throw new Error("Unexpected error: 0 tabValues");return o.value}({defaultValue:n,tabValues:a}))),[d,_]=E({queryString:t,groupId:s}),[h,D]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[s,a]=(0,c.Dv)(t);return[s,(0,o.useCallback)((e=>{t&&a.set(e)}),[t,a])]}({groupId:s}),f=(()=>{const e=d??h;return p({value:e,tabValues:a})?e:null})();(0,i.A)((()=>{f&&l(f)}),[f]);return{selectedValue:r,selectValue:(0,o.useCallback)((e=>{if(!p({value:e,tabValues:a}))throw new Error(`Can't select invalid tab value=${e}`);l(e),_(e),D(e)}),[_,D,a]),tabValues:a}}var D=t(9136);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var I=t(74848);function O(e){let{className:n,block:t,selectedValue:o,selectValue:r,tabValues:i}=e;const l=[],{blockElementScrollPositionUntilNextRender:d}=(0,a.a_)(),c=e=>{const n=e.currentTarget,t=l.indexOf(n),s=i[t].value;s!==o&&(d(n),r(s))},_=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const t=l.indexOf(e.currentTarget)+1;n=l[t]??l[0];break}case"ArrowLeft":{const t=l.indexOf(e.currentTarget)-1;n=l[t]??l[l.length-1];break}}n?.focus()};return(0,I.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":t},n),children:i.map((e=>{let{value:n,label:t,attributes:a}=e;return(0,I.jsx)("li",{role:"tab",tabIndex:o===n?0:-1,"aria-selected":o===n,ref:e=>{l.push(e)},onKeyDown:_,onClick:c,...a,className:(0,s.A)("tabs__item",f.tabItem,a?.className,{"tabs__item--active":o===n}),children:t??n},n)}))})}function w(e){let{lazy:n,children:t,selectedValue:a}=e;const r=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=r.find((e=>e.props.value===a));return e?(0,o.cloneElement)(e,{className:(0,s.A)("margin-top--md",e.props.className)}):null}return(0,I.jsx)("div",{className:"margin-top--md",children:r.map(((e,n)=>(0,o.cloneElement)(e,{key:n,hidden:e.props.value!==a})))})}function m(e){const n=h(e);return(0,I.jsxs)("div",{className:(0,s.A)("tabs-container",f.tabList),children:[(0,I.jsx)(O,{...n,...e}),(0,I.jsx)(w,{...n,...e})]})}function N(e){const n=(0,D.A)();return(0,I.jsx)(m,{...e,children:_(e.children)},String(n))}},79329:(e,n,t)=>{t.d(n,{A:()=>r});t(96540);var o=t(18215);const s={tabItem:"tabItem_Ymn6"};var a=t(74848);function r(e){let{children:n,hidden:t,className:r}=e;return(0,a.jsx)("div",{role:"tabpanel",className:(0,o.A)(s.tabItem,r),hidden:t,children:n})}},94862:(e,n,t)=>{t.d(n,{A:()=>o});const o=t.p+"assets/images/input_nodes_save_workflow-66e4c6248418fac099cb38a389f4c6da.png"},98019:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>j,contentTitle:()=>v,default:()=>Y,frontMatter:()=>U,metadata:()=>o,toc:()=>W});const o=JSON.parse('{"id":"create/workflows/create","title":"Create Workflows","description":"Create computational graphs that include one or more models","source":"@site/docs/create/workflows/create.md","sourceDirName":"create/workflows","slug":"/create/workflows/create","permalink":"/create/workflows/create","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"description":"Create computational graphs that include one or more models","sidebar_position":1,"toc_max_heading_level":4},"sidebar":"tutorialSidebar","previous":{"title":"Workflows","permalink":"/create/workflows/"},"next":{"title":"Workflow Inferences","permalink":"/create/workflows/inference"}}');var s=t(74848),a=t(28453),r=t(65537),i=t(79329),l=t(58069);const d='from clarifai.client.user import User\n\n# Your PAT (Personal Access Token) can be found in the Account\'s Security section\n# Specify the correct user_id/app_id pairings\n# Since you\'re making inferences outside your app\'s scope\nUSER_ID = "user_id"\nAPP_ID = "app_id"\n\napp = User(user_id=USER_ID, pat="YOUR_PAT").create_app(\n    app_id=APP_ID, base_workflow="Empty"\n)\n\n\n# create a yaml file specifying the workflow structure\n# eg:\n"""configs/prompter_llm.yml\nworkflow:\n  id: wf-prompter-llm\n  nodes:\n    - id: prompter\n      model:\n          model_id: prompter\n          model_type_id: prompter\n          description: \'Prompter Model\'\n          output_info:\n            params:\n              prompt_template: \'Classify sentiment between postive and negative for the text {data.text.raw}\'\n\n    - id: llm\n      model:\n          user_id: mistralai\n          model_id: mistral-7B-Instruct\n          app_id: completion\n\n      node_inputs:\n        - node_id: prompter\n\n"""\n\n# create the workflow\nprompter_llm_workflow = app.create_workflow(config_filepath="configs/prompter_llm.yml")',c="###################################################################################\n# In this section, we set the user authentication, app ID, and the details of the \n# workflow we want to build. Change these strings to run your own example.\n##################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to build your own workflow with multiple connected nodes\n# Note that we've also added as comments the values of most of these variables against their names in the code below\n\nWORKFLOW_ID = 'auto-annotation-workflow-id'\nNODE_ID_1 = 'general-embed'\nMODEL_ID_1 = 'bbb5f41425b8468d9b7a554ff10f8581'\nMODEL_VERSION_ID_1 = 'bb186755eda04f9cbb6fe32e816be104'\n\nNODE_ID_2 = 'general-concept'\nMODEL_ID_2 = 'aaa03c23b3724a16a56b629203edc62c'\nMODEL_VERSION_ID_2 = 'aa7f35c01e0642fda5cf400f543e7c40'\n\nNODE_ID_3 = 'general-cluster'\nMODEL_ID_3 = 'cccbe437d6e54e2bb911c6aa292fb072'\nMODEL_VERSION_ID_3 = 'cc2074cff6dc4c02b6f4e1b8606dcb54'\n\nNODE_ID_4 = 'mapper'\nSYNONYM_MODEL_ID = 'YOUR_SYNONYM_MODEL_ID'\nSYNONYM_MODEL_VERSION_ID = 'YOUR_SYNONYM_MODEL_VERSION_ID'\n\nNODE_ID_5 = 'greater-than'\nGREATER_THAN_MODEL_ID = 'YOUR_GREATER_THAN_MODEL_ID'\nGREATER_THAN_MODEL_VERSION_ID = 'YOUR_GREATER_THAN_MODEL_VERSION_ID'\n\nNODE_ID_6 = 'less-than'\nLESS_THAN_MODEL_ID = 'YOUR_LESS_THAN_MODEL_ID'\nLESS_THAN_MODEL_VERSION_ID = 'YOUR_LESS_THAN_MODEL_VERSION_ID'\n\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID) # The userDataObject is required when using a PAT\n\npost_workflows_response = stub.PostWorkflows(\n    service_pb2.PostWorkflowsRequest(\n        user_app_id=userDataObject,  \n        workflows=[\n            resources_pb2.Workflow(\n                id=WORKFLOW_ID, # auto-annotation-workflow-id\n                nodes=[\n                    resources_pb2.WorkflowNode(\n                        id=NODE_ID_1, # general-embed\n                        model=resources_pb2.Model(\n                            id=MODEL_ID_1, # bbb5f41425b8468d9b7a554ff10f8581\n                            model_version=resources_pb2.ModelVersion(\n                                id=MODEL_VERSION_ID_1 # bb186755eda04f9cbb6fe32e816be104\n                            )\n                        )\n                    ),\n                    resources_pb2.WorkflowNode(\n                        id=NODE_ID_2, # general-concept\n                        model=resources_pb2.Model(\n                            id=MODEL_ID_2, # aaa03c23b3724a16a56b629203edc62c\n                            model_version=resources_pb2.ModelVersion(\n                                id=MODEL_VERSION_ID_2 # aa7f35c01e0642fda5cf400f543e7c40\n                            )\n                        )\n                    ),\n                    resources_pb2.WorkflowNode(\n                        id=NODE_ID_3, # general-cluster\n                        model=resources_pb2.Model(\n                            id=MODEL_ID_3, # cccbe437d6e54e2bb911c6aa292fb072\n                            model_version=resources_pb2.ModelVersion(\n                                id=MODEL_VERSION_ID_3 # cc2074cff6dc4c02b6f4e1b8606dcb54\n                            )\n                        ),\n                        node_inputs=[\n                            resources_pb2.NodeInput(node_id=NODE_ID_1) # general-embed\n                        ]\n                    ),\n                    resources_pb2.WorkflowNode(\n                        id=NODE_ID_4, # mapper\n                        model=resources_pb2.Model(\n                            id=SYNONYM_MODEL_ID,\n                            model_version=resources_pb2.ModelVersion(\n                                id=SYNONYM_MODEL_VERSION_ID\n                            )\n                        ),\n                        node_inputs=[\n                            resources_pb2.NodeInput(node_id=NODE_ID_2) # general-concept\n                        ]\n                    ),\n                    resources_pb2.WorkflowNode(\n                        id=NODE_ID_5, # greater-than\n                        model=resources_pb2.Model(\n                            id=GREATER_THAN_MODEL_ID,\n                            model_version=resources_pb2.ModelVersion(\n                                id=GREATER_THAN_MODEL_VERSION_ID\n                            )\n                        ),\n                        node_inputs=[\n                            resources_pb2.NodeInput(node_id=NODE_ID_4) # mapper\n                        ]\n                    ),\n                    resources_pb2.WorkflowNode(\n                        id=NODE_ID_6, # less-than\n                        model=resources_pb2.Model(\n                            id=LESS_THAN_MODEL_ID,\n                            model_version=resources_pb2.ModelVersion(\n                                id=LESS_THAN_MODEL_VERSION_ID\n                            )\n                        ),\n                        node_inputs=[\n                            resources_pb2.NodeInput(node_id=NODE_ID_4) # mapper\n                        ]\n                    ),\n                ]\n            )\n        ]\n    ),\n    metadata=metadata\n)       \n\nif post_workflows_response.status.code != status_code_pb2.SUCCESS:\n    print(post_workflows_response.status)\n    raise Exception(\"Post workflows failed, status: \" + post_workflows_response.status.description) \n",_="###################################################################################\n# In this section, we set the user authentication, app ID, and the details of the \n# nodes to suppress their outputs. Change these strings to run your own example.\n##################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to suppress the outputs of your own nodes\nWORKFLOW_ID = 'predict-cluster-only'\nNODE_ID_1 = 'general-embed'\nMODEL_ID_1 = 'bbb5f41425b8468d9b7a554ff10f8581'\nMODEL_VERSION_ID_1 = 'bb186755eda04f9cbb6fe32e816be104'\n\nNODE_ID_2 = 'general-cluster'\nMODEL_ID_2 = 'cccbe437d6e54e2bb911c6aa292fb072'\nMODEL_VERSION_ID_2 = 'cc2074cff6dc4c02b6f4e1b8606dcb54'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID) # The userDataObject is required when using a PAT\n\npost_workflows_response = stub.PostWorkflows(\n    service_pb2.PostWorkflowsRequest(\n        user_app_id=userDataObject,  \n        workflows=[\n            resources_pb2.Workflow(\n                id=WORKFLOW_ID,\n                nodes=[\n                    resources_pb2.WorkflowNode(\n                        id=NODE_ID_1,\n                        model=resources_pb2.Model(\n                            id=MODEL_ID_1,\n                            model_version=resources_pb2.ModelVersion(\n                                id=MODEL_VERSION_ID_1\n                            )\n                        ),\n                        suppress_output = True                      \n                    ),\n                    resources_pb2.WorkflowNode(\n                        id=NODE_ID_2,\n                        model=resources_pb2.Model(\n                            id=MODEL_ID_2,\n                            model_version=resources_pb2.ModelVersion(\n                                id=MODEL_VERSION_ID_2\n                            )\n                        ),\n                        node_inputs=[\n                            resources_pb2.NodeInput(node_id=NODE_ID_1)\n                        ]\n                    ),\n                ]\n            )\n        ]\n    ),\n    metadata=metadata\n)\n                         \n\nif post_workflows_response.status.code != status_code_pb2.SUCCESS:\n    print(post_workflows_response.status)\n    raise Exception(\"Post workflows failed, status: \" + post_workflows_response.status.description) \n",u='\x3c!--index.html file--\x3e\n\n<script>\n    //////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the details of the \n    // workflow we want to build. Change these strings to run your own example.\n    /////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = \'YOUR_USER_ID_HERE\';\n    // Your PAT (Personal Access Token) can be found in the Account\'s Security section\n    const PAT = \'YOUR_PAT_HERE\';\n    const APP_ID = \'YOUR_APP_ID_HERE\';\n    // Change these to build your own workflow with multiple connected nodes\n\n    const WORKFLOW_ID = \'auto-annotation-workflow-id\';\n    const NODE_ID_1 = \'general-embed\';\n    const GENERAL_EMBED_MODEL_ID = \'YOUR_GENERAL_EMBED_MODEL_ID\';\n    const GENERAL_EMBED_MODEL_VERSION_ID = \'YOUR_GENERAL_EMBED_MODEL_VERSION_ID\';\n\n    const NODE_ID_2 = \'general-concept\';\n    const GENERAL_CONCEPT_MODEL_ID = \'YOUR_GENERAL_CONCEPT_MODEL_ID\';\n    const GENERAL_CONCEPT_MODEL_VERSION_ID = \'YOUR_GENERAL_CONCEPT_MODEL_VERSION_ID\';\n\n    const NODE_ID_3 = \'general-cluster\';\n    const GENERAL_CLUSTER_MODEL_ID = \'YOUR_GENERAL_CLUSTER_MODEL_ID\';\n    const GENERAL_CLUSTER_MODEL_VERSION_ID = \'YOUR_GENERAL_CLUSTER_MODEL_VERSION_ID\';\n\n    const NODE_ID_4 = \'mapper\';\n    const SYNONYM_MODEL_ID = \'synonym-model-id\';\n    const MAPPER_MODEL_VERSION_ID = \'YOUR_MAPPER_MODEL_VERSION_ID\';\n\n    const NODE_ID_5 = \'greater-than\';\n    const GREATER_THAN_MODEL_ID = \'YOUR_GREATER_THAN_MODEL_ID\';\n    const GREATER_THAN_MODEL_VERSION_ID = \'YOUR_GREATER_THAN_MODEL_VERSION_ID\';\n\n    const NODE_ID_6 = \'less-than\';\n    const LESS_THAN_MODEL_ID = \'YOUR_LESS_THAN_MODEL_ID\';\n    const LESS_THAN_MODEL_VERSION_ID = \'YOUR_LESS_THAN_MODEL_VERSION_ID\';\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        "user_app_id": {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        "workflows": [\n            {\n                "id": WORKFLOW_ID,\n                "nodes": [\n                    {\n                        "id": NODE_ID_1,\n                        "model": {\n                            "id": GENERAL_EMBED_MODEL_ID,\n                            "model_version": {\n                                "id": GENERAL_EMBED_MODEL_VERSION_ID\n                            }\n                        }\n                    },\n                    {\n                        "id": NODE_ID_2,\n                        "model": {\n                            "id": GENERAL_CONCEPT_MODEL_ID,\n                            "model_version": {\n                                "id": GENERAL_CONCEPT_MODEL_VERSION_ID\n                            }\n                        }\n                    },\n                    {\n                        "id": NODE_ID_3,\n                        "model": {\n                            "id": GENERAL_CLUSTER_MODEL_ID,\n                            "model_version": {\n                                "id": GENERAL_CLUSTER_MODEL_VERSION_ID\n                            }\n                        }\n                    },\n                    {\n                        "id": NODE_ID_4,\n                        "model": {\n                            "id": SYNONYM_MODEL_ID,\n                            "model_version": {\n                                "id": MAPPER_MODEL_VERSION_ID\n                            }\n                        },\n                        "node_inputs": [\n                            {\n                                "node_id": NODE_ID_2  // general-concept\n                            }\n                        ]\n                    },\n                    {\n                        "id": NODE_ID_5,\n                        "model": {\n                            "id": GREATER_THAN_MODEL_ID,\n                            "model_version": {\n                                "id": GREATER_THAN_MODEL_VERSION_ID\n                            }\n                        },\n                        "node_inputs": [\n                            {\n                                "node_id": NODE_ID_4 // mapper\n                            }\n                        ]\n                    },\n                    {\n                        "id": NODE_ID_6,\n                        "model": {\n                            "id": LESS_THAN_MODEL_ID,\n                            "model_version": {\n                                "id": LESS_THAN_MODEL_VERSION_ID\n                            }\n                        },\n                        "node_inputs": [\n                            {\n                                "node_id": NODE_ID_4 // mapper\n                            }\n                        ]\n                    }\n                ]\n            }\n        ]\n    });\n\n    const requestOptions = {\n        method: \'POST\',\n        headers: {\n            \'Accept\': \'application/json\',\n            \'Authorization\': \'Key \' + PAT\n        },\n        body: raw\n    };\n\n    fetch(`https://api.clarifai.com/v2/workflows`, requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log(\'error\', error));\n\n<\/script>',p='\x3c!--index.html file--\x3e\n\n<script>\n    //////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the details of the \n    // nodes to suppress their outputs. Change these strings to run your own example.\n    /////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = \'YOUR_USER_ID_HERE\';\n    // Your PAT (Personal Access Token) can be found in the Account\'s Security section\n    const PAT = \'YOUR_PAT_HERE\';\n    const APP_ID = \'YOUR_APP_ID_HERE\';\n    // Change these to suppress the outputs of your own nodes\n    const WORKFLOW_ID = \'predict-cluster-only\';\n    const NODE_ID_1 = \'general-embed\';\n    const MODEL_ID_1 = \'bbb5f41425b8468d9b7a554ff10f8581\';\n    const MODEL_VERSION_ID_1 = \'bb186755eda04f9cbb6fe32e816be104\';\n\n    const NODE_ID_2 = \'general-cluster\';\n    const MODEL_ID_2 = \'cccbe437d6e54e2bb911c6aa292fb072\';\n    const MODEL_VERSION_ID_2 = \'cc2074cff6dc4c02b6f4e1b8606dcb54\';\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        "user_app_id": {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        "workflows": [\n            {\n                "id": WORKFLOW_ID,\n                "nodes": [\n                    {\n                        "id": NODE_ID_1,\n                        "model": {\n                            "id": MODEL_ID_1,\n                            "model_version": {\n                                "id": MODEL_VERSION_ID_1\n                            }\n                        },\n                        "suppress_output": true\n                    },\n                    {\n                        "id": NODE_ID_2,\n                        "node_inputs": [\n                            {\n                                "node_id": NODE_ID_1\n                            }\n                        ],\n                        "model": {\n                            "id": MODEL_ID_2,\n                            "model_version": {\n                                "id": MODEL_VERSION_ID_2\n                            }\n                        }\n                    }\n                ]\n            }\n        ]\n    });\n\n    const requestOptions = {\n        method: \'POST\',\n        headers: {\n            \'Accept\': \'application/json\',\n            \'Authorization\': \'Key \' + PAT\n        },\n        body: raw\n    };\n\n    fetch(`https://api.clarifai.com/v2/workflows`, requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log(\'error\', error));\n\n<\/script>',E="//index.js file\n\n//////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the details of the \n// workflow we want to build. Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = 'YOUR_USER_ID_HERE';\n// Your PAT (Personal Access Token) can be found in the Account's Security section\nconst PAT = 'YOUR_PAT_HERE';\nconst APP_ID = 'YOUR_APP_ID_HERE';\n// Change these to build your own workflow with multiple connected nodes\n\nconst WORKFLOW_ID = 'auto-annotation-workflow-id';\nconst NODE_ID_1 = 'general-embed';\nconst GENERAL_EMBED_MODEL_ID = 'bbb5f41425b8468d9b7a554ff10f8581';\nconst GENERAL_EMBED_MODEL_VERSION_ID = 'bb186755eda04f9cbb6fe32e816be104';\n\nconst NODE_ID_2 = 'general-concept';\nconst GENERAL_CONCEPT_MODEL_ID = 'aaa03c23b3724a16a56b629203edc62c';\nconst GENERAL_CONCEPT_MODEL_VERSION_ID = 'aa7f35c01e0642fda5cf400f543e7c40';\n\nconst NODE_ID_3 = 'general-cluster';\nconst GENERAL_CLUSTER_MODEL_ID = 'cccbe437d6e54e2bb911c6aa292fb072';\nconst GENERAL_CLUSTER_MODEL_VERSION_ID = 'cc2074cff6dc4c02b6f4e1b8606dcb54';\n\nconst NODE_ID_4 = 'mapper';\nconst SYNONYM_MODEL_ID = 'synonym-model-id';\nconst SYNONYM_MODEL_VERSION_ID = 'YOUR_SYNONYM_MODEL_VERSION_ID';\n\nconst NODE_ID_5 = 'greater-than';\nconst GREATER_THAN_MODEL_ID = 'greater-than-model-id';\nconst GREATER_THAN_MODEL_VERSION_ID = 'YOUR_GREATER_THAN_MODEL_VERSION_ID';\n\nconst NODE_ID_6 = 'less-than';\nconst LESS_THAN_MODEL_ID = 'less-than-model-id';\nconst LESS_THAN_MODEL_VERSION_ID = 'YOUR_LESS_THAN_MODEL_VERSION_ID';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require(\"clarifai-nodejs-grpc\");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set(\"authorization\", \"Key \" + PAT);\n\nstub.PostWorkflows(\n    {\n        user_app_id: {\n            \"user_id\": USER_ID,\n            \"app_id\": APP_ID\n        },\n        workflows: [\n            {\n                id: WORKFLOW_ID,\n                nodes: [\n                    {\n                        id: NODE_ID_1,\n                        model: {\n                            id: GENERAL_EMBED_MODEL_ID,\n                            model_version: {\n                                id: GENERAL_EMBED_MODEL_VERSION_ID\n                            }\n                        }\n                    },\n                    {\n                        id: NODE_ID_2,\n                        model: {\n                            id: GENERAL_CONCEPT_MODEL_ID,\n                            model_version: {\n                                id: GENERAL_CONCEPT_MODEL_VERSION_ID\n                            }\n                        }\n                    },\n                    {\n                        id: NODE_ID_3,\n                        model: {\n                            id: GENERAL_CLUSTER_MODEL_ID,\n                            model_version: {\n                                id: GENERAL_CLUSTER_MODEL_VERSION_ID\n                            }\n                        }\n                    },\n                    {\n                        id: NODE_ID_4,\n                        model: {\n                            id: SYNONYM_MODEL_ID,\n                            model_version: {\n                                id: SYNONYM_MODEL_VERSION_ID\n                            }\n                        },\n                        node_inputs: [\n                            {\n                                node_id: NODE_ID_2 // general-concept\n                            }\n                        ]\n                    },\n                    {\n                        id: NODE_ID_5,\n                        model: {\n                            id: GREATER_THAN_MODEL_ID,\n                            model_version: {\n                                id: GREATER_THAN_MODEL_VERSION_ID\n                            }\n                        },\n                        node_inputs: [\n                            {\n                                node_id: NODE_ID_4 // mapper\n                            }\n                        ]\n                    },\n                    {\n                        id: NODE_ID_6,\n                        model: {\n                            id: LESS_THAN_MODEL_ID,\n                            model_version: {\n                                id: LESS_THAN_MODEL_VERSION_ID\n                            }\n                        },\n                        node_inputs: [\n                            {\n                                node_id: NODE_ID_4 // mapper\n                            }\n                        ]\n                    }\n                ]\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            console.log(response.status);\n            throw new Error(\"Post workflows failed, status: \" + response.status.description);\n        }\n    }\n);",h="//index.js file\n\n//////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the details of the \n// nodes to suppress their outputs. Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = 'YOUR_USER_ID_HERE';\n// Your PAT (Personal Access Token) can be found in the Account's Security section\nconst PAT = 'YOUR_PAT_HERE';\nconst APP_ID = 'YOUR_APP_ID_HERE';\n// Change these to suppress the outputs of your own nodes\nconst WORKFLOW_ID = 'predict-cluster-only';\nconst NODE_ID_1 = 'general-embed';\nconst MODEL_ID_1 = 'bbb5f41425b8468d9b7a554ff10f8581';\nconst MODEL_VERSION_ID_1 = 'bb186755eda04f9cbb6fe32e816be104';\n\nconst NODE_ID_2 = 'general-cluster';\nconst MODEL_ID_2 = 'cccbe437d6e54e2bb911c6aa292fb072';\nconst MODEL_VERSION_ID_2 = 'cc2074cff6dc4c02b6f4e1b8606dcb54';\n\nconst NODE_ID_3 = 'mapper';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require(\"clarifai-nodejs-grpc\");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set(\"authorization\", \"Key \" + PAT);\n\nstub.PostWorkflows(\n    {\n        user_app_id: {\n            \"user_id\": USER_ID,\n            \"app_id\": APP_ID\n        },\n        workflows: [\n            {\n                id: WORKFLOW_ID,\n                nodes: [\n                    {\n                        id: NODE_ID_1,\n                        model: {\n                            id: MODEL_ID_1,\n                            model_version: {\n                                id: MODEL_VERSION_ID_1\n                            }\n                        },\n                        suppress_output: true\n                    },\n                    {\n                        id: NODE_ID_2,\n                        model: {\n                            id: MODEL_ID_2,\n                            model_version: {\n                                id: MODEL_VERSION_ID_2\n                            }\n                        },\n                        node_inputs: [\n                            {\n                                node_id: NODE_ID_3\n                            }\n                        ]\n                    },\n                ]\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            console.log(response.status);\n            throw new Error(\"Post workflows failed, status: \" + response.status.description);\n        }\n    }\n);",D='package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    //////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the details of the \n    // workflow we want to build. Change these strings to run your own example.\n    /////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to build your own workflow with multiple connected nodes\n\n    static final String WORKFLOW_ID = "auto-annotation-workflow-id";\n    static final String NODE_ID_1 = "general-embed";\n    static final String GENERAL_EMBED_MODEL_ID = "bbb5f41425b8468d9b7a554ff10f8581";\n    static final String GENERAL_EMBED_MODEL_VERSION_ID = "bb186755eda04f9cbb6fe32e816be104";\n\n    static final String NODE_ID_2 = "general-concept";\n    static final String GENERAL_CONCEPT_MODEL_ID = "aaa03c23b3724a16a56b629203edc62c";\n    static final String GENERAL_CONCEPT_MODEL_VERSION_ID = "aa7f35c01e0642fda5cf400f543e7c40";\n\n    static final String NODE_ID_3 = "general-cluster";\n    static final String GENERAL_CLUSTER_MODEL_ID = "cccbe437d6e54e2bb911c6aa292fb072";\n    static final String GENERAL_CLUSTER_MODEL_VERSION_ID = "cc2074cff6dc4c02b6f4e1b8606dcb54";\n\n    static final String NODE_ID_4 = "mapper";\n    static final String SYNONYM_MODEL_ID = "synonym-model-id";\n    static final String SYNONYM_MODEL_VERSION_ID = "YOUR_SYNONYM_MODEL_VERSION_ID";\n\n    static final String NODE_ID_5 = "greater-than";\n    static final String GREATER_THAN_MODEL_ID = "greater-than-model-id";\n    static final String GREATER_THAN_MODEL_VERSION_ID = "YOUR_GREATER_THAN_MODEL_VERSION_ID";\n\n    static final String NODE_ID_6 = "less-than";\n    static final String LESS_THAN_MODEL_ID = "less-than-model-id";\n    static final String LESS_THAN_MODEL_VERSION_ID = "YOUR_LESS_THAN_MODEL_VERSION_ID";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiWorkflowResponse postWorkflowsResponse = stub.postWorkflows(\n            PostWorkflowsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .addWorkflows(\n                Workflow.newBuilder()\n                .setId(WORKFLOW_ID)\n                .addNodes(\n                    WorkflowNode.newBuilder()\n                    .setId(NODE_ID_1)\n                    .setModel(\n                        Model.newBuilder()\n                        .setId(GENERAL_EMBED_MODEL_ID)\n                        .setModelVersion(\n                            ModelVersion.newBuilder()\n                            .setId(GENERAL_EMBED_MODEL_VERSION_ID)\n                        )\n                    )\n                )\n                .addNodes(\n                    WorkflowNode.newBuilder()\n                    .setId(NODE_ID_2)\n                    .setModel(\n                        Model.newBuilder()\n                        .setId(GENERAL_CONCEPT_MODEL_ID)\n                        .setModelVersion(\n                            ModelVersion.newBuilder()\n                            .setId(GENERAL_CONCEPT_MODEL_VERSION_ID)\n                        )\n                    )\n                )\n                .addNodes(\n                    WorkflowNode.newBuilder()\n                    .setId(NODE_ID_3)\n                    .setModel(\n                        Model.newBuilder()\n                        .setId(GENERAL_CLUSTER_MODEL_ID)\n                        .setModelVersion(\n                            ModelVersion.newBuilder()\n                            .setId(GENERAL_CLUSTER_MODEL_VERSION_ID)\n                        )\n                    )\n                )\n                .addNodes(\n                    WorkflowNode.newBuilder()\n                    .setId(NODE_ID_4)\n                    .setModel(\n                        Model.newBuilder()\n                        .setId(SYNONYM_MODEL_ID)\n                        .setModelVersion(\n                            ModelVersion.newBuilder()\n                            .setId(SYNONYM_MODEL_VERSION_ID)\n                        )\n                    )\n                    .addNodeInputs(NodeInput.newBuilder().setNodeId(NODE_ID_2))\n                )\n                .addNodes(\n                    WorkflowNode.newBuilder()\n                    .setId(NODE_ID_5)\n                    .setModel(\n                        Model.newBuilder()\n                        .setId(GREATER_THAN_MODEL_ID)\n                        .setModelVersion(\n                            ModelVersion.newBuilder()\n                            .setId(GREATER_THAN_MODEL_VERSION_ID)\n                        )\n                    )\n                    .addNodeInputs(NodeInput.newBuilder().setNodeId(NODE_ID_4))\n                )\n                .addNodes(\n                    WorkflowNode.newBuilder()\n                    .setId(NODE_ID_6)\n                    .setModel(\n                        Model.newBuilder()\n                        .setId(LESS_THAN_MODEL_ID)\n                        .setModelVersion(\n                            ModelVersion.newBuilder()\n                            .setId(LESS_THAN_MODEL_VERSION_ID)\n                        )\n                    )\n                    .addNodeInputs(NodeInput.newBuilder().setNodeId(NODE_ID_4))\n                )\n            )\n            .build()\n        );\n\n        if (postWorkflowsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post workflows failed, status: " + postWorkflowsResponse.getStatus());\n        }\n\n    }\n\n}',f='package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    //////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the details of the \n    // nodes to suppress their outputs. Change these strings to run your own example.\n    /////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to suppress the outputs of your own nodes\n    static final String WORKFLOW_ID = "auto-annotation-workflow-id";\n    static final String NODE_ID_1 = "general-embed";\n    static final String MODEL_ID_1 = "bbb5f41425b8468d9b7a554ff10f8581";\n    static final String MODEL_VERSION_ID_1 = "bb186755eda04f9cbb6fe32e816be104";\n\n    static final String NODE_ID_2 = "general-cluster";\n    static final String MODEL_ID_2 = "cccbe437d6e54e2bb911c6aa292fb072";\n    static final String MODEL_VERSION_ID_2 = "cc2074cff6dc4c02b6f4e1b8606dcb54";\n\n    static final String NODE_ID_3 = "general-cluster";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiWorkflowResponse postWorkflowsResponse = stub.postWorkflows(\n            PostWorkflowsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .addWorkflows(\n                Workflow.newBuilder()\n                .setId(WORKFLOW_ID)\n                .addNodes(\n                    WorkflowNode.newBuilder()\n                    .setId(NODE_ID_1)\n                    .setModel(\n                        Model.newBuilder()\n                        .setId(MODEL_ID_1)\n                        .setModelVersion(\n                            ModelVersion.newBuilder()\n                            .setId(MODEL_VERSION_ID_1)\n                        )\n                    )\n                )\n                .addNodes(\n                    WorkflowNode.newBuilder()\n                    .setId(NODE_ID_2)\n                    .setModel(\n                        Model.newBuilder()\n                        .setId(MODEL_ID_2)\n                        .setModelVersion(\n                            ModelVersion.newBuilder()\n                            .setId(MODEL_VERSION_ID_2)\n                        )\n                    )\n                    .addNodeInputs(NodeInput.newBuilder().setNodeId(NODE_ID_3))\n                )\n            )\n            .build()\n        );\n\n        if (postWorkflowsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post workflows failed, status: " + postWorkflowsResponse.getStatus());\n        }\n\n    }\n\n}',I='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n//////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the details of the \n// workflow we want to build. Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n# Change these to build your own workflow with multiple connected nodes\n# Note that we\'ve also added as comments the values of most of these variables against their names in the code below\n\n$WORKFLOW_ID = "auto-annotation-workflow-id";\n$NODE_ID_1 = "general-embed";\n$MODEL_ID_1 = "bbb5f41425b8468d9b7a554ff10f8581";\n$MODEL_VERSION_ID_1 = "bb186755eda04f9cbb6fe32e816be104";\n\n$NODE_ID_2 = "general-concept";\n$MODEL_ID_2 = "aaa03c23b3724a16a56b629203edc62c";\n$MODEL_VERSION_ID_2 = "aa7f35c01e0642fda5cf400f543e7c40";\n\n$NODE_ID_3 = "general-cluster";\n$MODEL_ID_3 = "cccbe437d6e54e2bb911c6aa292fb072";\n$MODEL_VERSION_ID_3 = "cc2074cff6dc4c02b6f4e1b8606dcb54";\n\n$NODE_ID_4 = "mapper";\n$SYNONYM_MODEL_ID = "YOUR_SYNONYM_MODEL_ID";\n$SYNONYM_MODEL_VERSION_ID = "YOUR_SYNONYM_MODEL_VERSION_ID";\n\n$NODE_ID_5 = "greater-than";\n$GREATER_THAN_MODEL_ID = "YOUR_GREATER_THAN_MODEL_ID";\n$GREATER_THAN_MODEL_VERSION_ID = "YOUR_GREATER_THAN_MODEL_VERSION_ID";\n\n$NODE_ID_6 = "less-than";\n$LESS_THAN_MODEL_ID = "YOUR_LESS_THAN_MODEL_ID";\n$LESS_THAN_MODEL_VERSION_ID = "YOUR_LESS_THAN_MODEL_VERSION_ID";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\PostWorkflowsRequest;\nuse Clarifai\\Api\\Workflow;\nuse Clarifai\\Api\\WorkflowNode;\nuse Clarifai\\Api\\NodeInput;\nuse Clarifai\\Api\\Model;\nuse Clarifai\\Api\\ModelVersion;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PostWorkflows(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new PostWorkflowsRequest([\n        "user_app_id" => $userDataObject,\n        "workflows" => [\n            new Workflow([\n                "id" => $WORKFLOW_ID, // auto-annotation-workflow-id\n                "nodes" => [\n                    new WorkflowNode([\n                        "id" => $NODE_ID_1, // general-embed\n                        "model" => new Model([\n                            "id" => $MODEL_ID_1, // bbb5f41425b8468d9b7a554ff10f8581\n                            "model_version" => new ModelVersion([\n                                "id" => $MODEL_VERSION_ID_1 // bb186755eda04f9cbb6fe32e816be104\n                            ])\n                        ])\n\n                    ]),\n                    new WorkflowNode([\n                        "id" => $NODE_ID_2, // general-concept\n                        "model" => new Model([\n                            "id" => $MODEL_ID_2, // aaa03c23b3724a16a56b629203edc62c\n                            "model_version" => new ModelVersion([\n                                "id" => $MODEL_VERSION_ID_2 // aa7f35c01e0642fda5cf400f543e7c40\n                            ])\n                        ])\n                    ]),\n                    new WorkflowNode([\n                        "id" => $NODE_ID_3, // general-cluster\n                        "model" => new Model([\n                            "id" => $MODEL_ID_3, // cccbe437d6e54e2bb911c6aa292fb072\n                            "model_version" => new ModelVersion([\n                                "id" => $MODEL_VERSION_ID_3 // cc2074cff6dc4c02b6f4e1b8606dcb54\n                            ])\n                        ]),\n                        "node_inputs" => [\n                            new NodeInput([\n                                "node_id" => $NODE_ID_1 // general-embed\n                            ])\n                        ]\n                    ]),\n                    new WorkflowNode([\n                        "id" => $NODE_ID_4, // mapper\n                        "model" => new Model([\n                            "id" => $SYNONYM_MODEL_ID,\n                            "model_version" => new ModelVersion([\n                                "id" => $SYNONYM_MODEL_VERSION_ID\n                            ])\n                        ]),\n                        "node_inputs" => [\n                            new NodeInput([\n                                "node_id" => $NODE_ID_2 // general-concept\n                            ])\n                        ]\n                    ]),\n                    new WorkflowNode([\n                        "id" => $NODE_ID_5, // greater-than\n                        "model" => new Model([\n                            "id" => $GREATER_THAN_MODEL_ID,\n                            "model_version" => new ModelVersion([\n                                "id" => $GREATER_THAN_MODEL_VERSION_ID\n                            ])\n                        ]),\n                        "node_inputs" => [\n                            new NodeInput([\n                                "node_id" => $NODE_ID_4 // mapper\n                            ])\n                        ]\n                    ]),\n                    new WorkflowNode([\n                        "id" => $NODE_ID_6, // less-than\n                        "model" => new Model([\n                            "id" => $LESS_THAN_MODEL_ID,\n                            "model_version" => new ModelVersion([\n                                "id" => $LESS_THAN_MODEL_VERSION_ID\n                            ])\n                        ]),\n                        "node_inputs" => [\n                            new NodeInput([\n                                "node_id" => $NODE_ID_4 // mapper\n                            ])\n                        ]\n                    ])\n                ]\n            ])\n        ]\n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\n?>',O='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n//////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the details of the \n// nodes to suppress their outputs. Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change these to suppress the outputs of your own nodes\n$WORKFLOW_ID = "predict-cluster-only";\n$NODE_ID_1 = "general-embed";\n$MODEL_ID_1 = "bbb5f41425b8468d9b7a554ff10f8581";\n$MODEL_VERSION_ID_1 = "bb186755eda04f9cbb6fe32e816be104";\n\n$NODE_ID_2 = "general-cluster";\n$MODEL_ID_2 = "cccbe437d6e54e2bb911c6aa292fb072";\n$MODEL_VERSION_ID_2 = "cc2074cff6dc4c02b6f4e1b8606dcb54";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\PostWorkflowsRequest;\nuse Clarifai\\Api\\Workflow;\nuse Clarifai\\Api\\WorkflowNode;\nuse Clarifai\\Api\\NodeInput;\nuse Clarifai\\Api\\Model;\nuse Clarifai\\Api\\ModelVersion;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PostWorkflows(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new PostWorkflowsRequest([\n        "user_app_id" => $userDataObject,\n        "workflows" => [\n            new Workflow([\n                "id" => $WORKFLOW_ID,\n                "nodes" => [\n                    new WorkflowNode([\n                        "id" => $NODE_ID_1,\n                        "model" => new Model([\n                            "id" => $MODEL_ID_1,\n                            "model_version" => new ModelVersion([\n                                "id" => $MODEL_VERSION_ID_1\n                            ])\n                        ]),\n\n                        "suppress_output" => true\n\n                    ]),\n                    new WorkflowNode([\n                        "id" => $NODE_ID_2,\n                        "model" => new Model([\n                            "id" => $MODEL_ID_2,\n                            "model_version" => new ModelVersion([\n                                "id" => $MODEL_VERSION_ID_2\n                            ])\n                        ]),\n                        "node_inputs" => [\n                            new NodeInput([\n                                "node_id" => $NODE_ID_1\n                            ])\n                        ]\n                    ])\n                ]\n            ])\n        ]\n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\n?>',w='curl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/workflows" \\\n    -H "Authorization: Key YOUR_PAT_HERE" \\\n    -H "Content-Type: application/json" \\\n    --data-raw \'{\n        "workflows": [\n            {\n                "id": "auto-annotation-workflow-id",\n                "nodes": [\n                    {\n                        "id": "general-embed",\n                        "model": {\n                            "id": "YOUR_GENERAL_EMBED_MODEL_ID_HERE",\n                            "model_version": {\n                                "id": "YOUR_GENERAL_EMBED_MODEL_VERSION_ID_HERE"\n                            }\n                        }\n                    },\n                    {\n                        "id": "general-concept",\n                        "model": {\n                            "id": "YOUR_GENERAL_CONCEPT_MODEL_ID_HERE",\n                            "model_version": {\n                                "id": "YOUR_GENERAL_CONCEPT_MODEL_VERSION_ID_HERE"\n                            }\n                        }\n                    },\n                    {\n                        "id": "general-cluster",\n                        "model": {\n                            "id": "YOUR_GENERAL_CLUSTER_MODEL_ID_HERE",\n                            "model_version": {\n                                "id": "YOUR_GENERAL_CLUSTER_MODEL_VERSION_ID_HERE"\n                            }\n                        }\n                    },\n                    {\n                        "id": "mapper",\n                        "model": {\n                            "id": "synonym-model-id",\n                            "model_version": {\n                                "id": "YOUR_MAPPER_MODEL_VERSION_ID_HERE"\n                            }\n                        },\n                        "node_inputs": [\n                            {\n                                "node_id": "general-concept"\n                            }\n                        ]\n                    },\n                    {\n                        "id": "greater-than",\n                        "model": {\n                            "id": "greater-than-model-id",\n                            "model_version": {\n                                "id": "YOUR_GREATER_THAN_MODEL_VERSION_ID_HERE"\n                            }\n                        },\n                        "node_inputs": [\n                            {\n                                "node_id": "mapper"\n                            }\n                        ]\n                    },\n                    {\n                        "id": "less-than",\n                        "model": {\n                            "id": "less-than-model-id",\n                            "model_version": {\n                                "id": "YOUR_LESS_THAN_MODEL_VERSION_ID_HERE"\n                            }\n                        },\n                        "node_inputs": [\n                            {\n                                "node_id": "mapper"\n                            }\n                        ]\n                    }\n                ]\n            }\n        ]\n    }\'',m='curl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/workflows" \\\n    -H "Authorization: Key YOUR_PAT_HERE" \\\n    -H "Content-Type: application/json" \\\n    --data-raw \'{\n\t\t"workflows": [\n\t\t\t{\n\t\t\t  "id": "predict-cluster-only",\n\t\t\t  "nodes": [\n\t\t\t\t{\n\t\t\t\t  "id": "general-embed",\n\t\t\t\t  "model": {\n\t\t\t\t\t"id": "bbb5f41425b8468d9b7a554ff10f8581",\n\t\t\t\t\t"model_version": {\n\t\t\t\t\t  "id": "bb186755eda04f9cbb6fe32e816be104"\n\t\t\t\t\t}\n\t\t\t\t  },\n\t\t\t\t  "suppress_output": true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t  "id": "general-cluster",\n\t\t\t\t  "node_inputs": [\n\t\t\t\t\t{\n\t\t\t\t\t  "node_id": "general-embed"\n\t\t\t\t\t}\n\t\t\t\t  ],\n\t\t\t\t  "model": {\n\t\t\t\t\t"id": "cccbe437d6e54e2bb911c6aa292fb072",\n\t\t\t\t\t"model_version": {\n\t\t\t\t\t  "id": "cc2074cff6dc4c02b6f4e1b8606dcb54"\n\t\t\t\t\t}\n\t\t\t\t  }\n\t\t\t\t}\n\t\t\t  ]\n\t\t\t}\n\t\t]\n\t}\'',N="########################################################################################\n# In this section, we set the user authentication, app ID, and the details of the new\n# custom workflow we want to create. Change these strings to run your own example.\n########################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to create your own custom workflow\nWORKFLOW_ID = 'my-custom-workflow'\nNODE_ID_1 = 'optical-character-recognizer'\nMODEL_ID_1 = 'ocr-scene-english-paddleocr'\nMODEL_VERSION_ID_1 = '40dbb2c9cde44a27af226782e7157006'\n\nNODE_ID_2 = 'text-to-text'\nMODEL_ID_2 = 'text-translation-english-spanish'\nMODEL_VERSION_ID_2 = '643f30558de34013aff72b0e21f244f5'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID) # The userDataObject is required when using a PAT\n\npost_workflows_response = stub.PostWorkflows(\n    service_pb2.PostWorkflowsRequest(\n      user_app_id=userDataObject,  \n      workflows=[\n        resources_pb2.Workflow(\n          id=WORKFLOW_ID,\n          nodes=[\n            resources_pb2.WorkflowNode(\n              id=NODE_ID_1,\n              model=resources_pb2.Model(\n                id=MODEL_ID_1,\n                model_version=resources_pb2.ModelVersion(\n                  id=MODEL_VERSION_ID_1\n                )\n              )\n            ),\n            resources_pb2.WorkflowNode(\n              id=NODE_ID_2,\n              model=resources_pb2.Model(\n                id=MODEL_ID_2,\n                model_version=resources_pb2.ModelVersion(\n                  id=MODEL_VERSION_ID_2\n                )\n              ),\n              node_inputs=[\n                resources_pb2.NodeInput(node_id=NODE_ID_1)\n                ]\n            ),\n          ]\n        )\n      ]\n    ),\n    metadata=metadata\n)               \n\nif post_workflows_response.status.code != status_code_pb2.SUCCESS:\n    print(post_workflows_response.status)\n    raise Exception(\"Post workflows failed, status: \" + post_workflows_response.status.description) \n\n",R='\x3c!--index.html file--\x3e\n\n<script>\n    //////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the details of the new\n    // custom workflow we want to create. Change these strings to run your own example.\n    /////////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = \'YOUR_USER_ID_HERE\';\n    // Your PAT (Personal Access Token) can be found in the Account\'s Security section\n    const PAT = \'YOUR_PAT_HERE\';\n    const APP_ID = \'YOUR_APP_ID_HERE\';\n    // Change these to create your own custom workflow\n    const WORKFLOW_ID = \'my-custom-workflow\';\n    const NODE_ID_1 = \'optical-character-recognizer\';\n    const MODEL_ID_1 = \'ocr-scene-english-paddleocr\';\n    const MODEL_VERSION_ID_1 = \'40dbb2c9cde44a27af226782e7157006\';\n\n    const NODE_ID_2 = \'text-to-text\';\n    const MODEL_ID_2 = \'text-translation-english-spanish\';\n    const MODEL_VERSION_ID_2 = \'643f30558de34013aff72b0e21f244f5\';\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////   \n\n    const raw = JSON.stringify({\n        "user_app_id": {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        "workflows": [{\n            "id": WORKFLOW_ID,\n            "nodes": [\n                {\n                    "id": NODE_ID_1,\n                    "model": {\n                        "id": MODEL_ID_1,\n                        "model_version": {\n                            "id": MODEL_VERSION_ID_1\n                        }\n                    }\n                },\n                {\n                    "id": NODE_ID_2,\n                    "model": {\n                        "id": MODEL_ID_2,\n                        "model_version": {\n                            "id": MODEL_VERSION_ID_2\n                        }\n                    },\n                        "node_inputs": [\n                            {\n                                "node_id": NODE_ID_1\n                            }\n                        ]\n                }\n            ]\n        }]\n    });\n\n    const requestOptions = {\n        method: \'POST\',\n        headers: {\n            \'Accept\': \'application/json\',\n            \'Authorization\': \'Key \' + PAT\n        },\n        body: raw\n    };\n\n    fetch(`https://api.clarifai.com/v2/workflows`, requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log(\'error\', error));\n\n<\/script>',g="//index.js file\n\n//////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the details of the new\n// custom workflow we want to create. Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = 'YOUR_USER_ID_HERE';\n// Your PAT (Personal Access Token) can be found in the Account's Security section\nconst PAT = 'YOUR_PAT_HERE';\nconst APP_ID = 'YOUR_APP_ID_HERE';\n// Change these to create your own custom workflow\nconst WORKFLOW_ID = 'my-custom-workflow';\nconst NODE_ID_1 = 'optical-character-recognizer';\nconst MODEL_ID_1 = 'ocr-scene-english-paddleocr';\nconst MODEL_VERSION_ID_1 = '40dbb2c9cde44a27af226782e7157006';\n\nconst NODE_ID_2 = 'text-to-text';\nconst MODEL_ID_2 = 'text-translation-english-spanish';\nconst MODEL_VERSION_ID_2 = '643f30558de34013aff72b0e21f244f5';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require(\"clarifai-nodejs-grpc\");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set(\"authorization\", \"Key \" + PAT);\n\nstub.PostWorkflows(\n    {\n        user_app_id: {\n            \"user_id\": USER_ID,\n            \"app_id\": APP_ID\n        },\n        workflows: [\n            {\n                id: WORKFLOW_ID,\n                nodes: [\n                    {\n                        id: NODE_ID_1,\n                        model: {\n                            id: MODEL_ID_1,\n                            model_version: {\n                                id: MODEL_VERSION_ID_1\n                            }\n                        }\n                    },\n                    {\n                        id: NODE_ID_2,\n                        model: {\n                            id: MODEL_ID_2,\n                            model_version: {\n                                id: MODEL_VERSION_ID_2\n                            }\n                        },\n                        node_inputs: [\n                            {\n                                node_id: NODE_ID_1 \n                            }\n                        ]\n                    }\n                ]\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error(\"Post workflows failed, status: \" + response.status.description);\n        }\n    }\n);",b='package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    //////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the details of the new\n    // custom workflow we want to create. Change these strings to run your own example.\n    /////////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to create your own custom workflow\n    static final String WORKFLOW_ID = "my-custom-workflow";\n    static final String NODE_ID_1 = "optical-character-recognizer";\n    static final String MODEL_ID_1 = "ocr-scene-english-paddleocr";\n    static final String MODEL_VERSION_ID_1 = "40dbb2c9cde44a27af226782e7157006";\n\n    static final String NODE_ID_2 = "text-to-text";\n    static final String MODEL_ID_2 = "text-translation-english-spanish";\n    static final String MODEL_VERSION_ID_2 = "643f30558de34013aff72b0e21f244f5";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiWorkflowResponse postWorkflowsResponse = stub.postWorkflows(\n            PostWorkflowsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .addWorkflows(\n                Workflow.newBuilder()\n                .setId(WORKFLOW_ID)\n                .addNodes(\n                    WorkflowNode.newBuilder()\n                    .setId(NODE_ID_1)\n                    .setModel(\n                        Model.newBuilder()\n                        .setId(MODEL_ID_1)\n                        .setModelVersion(ModelVersion.newBuilder().setId(MODEL_VERSION_ID_1))\n                    )\n                )\n                .addNodes(\n                    WorkflowNode.newBuilder()\n                    .setId(NODE_ID_2)\n                    .setModel(\n                        Model.newBuilder()\n                        .setId(MODEL_ID_2)\n                        .setModelVersion(ModelVersion.newBuilder().setId(MODEL_VERSION_ID_2))\n                    )\n                    .addNodeInputs(NodeInput.newBuilder().setNodeId(NODE_ID_1))\n                )\n            ).build()\n        );\n\n        if (postWorkflowsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post workflows failed, status: " + postWorkflowsResponse.getStatus());\n        }\n\n    }\n\n}',S='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n//////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the details of the new\n// custom workflow we want to create. Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change these to create your own custom workflow\n$WORKFLOW_ID = "my-custom-workflow";\n$NODE_ID_1 = "optical-character-recognizer";\n$MODEL_ID_1 = "ocr-scene-english-paddleocr";\n$MODEL_VERSION_ID_1 = "40dbb2c9cde44a27af226782e7157006";\n\n$NODE_ID_2 = "text-to-text";\n$MODEL_ID_2 = "text-translation-english-spanish";\n$MODEL_VERSION_ID_2 = "643f30558de34013aff72b0e21f244f5";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\PostWorkflowsRequest;\nuse Clarifai\\Api\\Workflow;\nuse Clarifai\\Api\\WorkflowNode;\nuse Clarifai\\Api\\NodeInput;\nuse Clarifai\\Api\\Model;\nuse Clarifai\\Api\\ModelVersion;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]]; \n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PostWorkflows(\n        // The request object carries the request along with the request status and other metadata related to the request itself\n        new PostWorkflowsRequest([\n            "user_app_id" => $userDataObject,\n            "workflows" => [\n                new Workflow([\n                    "id"=> $WORKFLOW_ID,\n                    "nodes" => [\n                        new WorkflowNode([\n                            "id" => $NODE_ID_1,\n                            "model" => new Model([\n                                "id" => $MODEL_ID_1,\n                                "model_version" => new ModelVersion([\n                                    "id" => $MODEL_VERSION_ID_1\n                                ])\n                            ])\n\n                        ]),\n                        new WorkflowNode([\n                            "id" => $NODE_ID_2,\n                            "model"=> new Model([\n                                "id" => $MODEL_ID_2,\n                                "model_version" => new ModelVersion([\n                                    "id" => $MODEL_VERSION_ID_2\n                                ])\n                            ]),\n                            "node_inputs" => [\n                                new NodeInput([\n                                    "node_id"=> $NODE_ID_1\n                                ])\n                            ]\n                        ])                       \n                    ]\n                ])\n            ]\n        ]),\n        $metadata\n    )->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\n?>\n',A='curl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/workflows" \\\n    -H "Content-Type: application/json" \\\n    -H "Authorization: Key YOUR_PAT_HERE" \\\n    --data-raw \'{\n      "workflows": [{\n        "id": "my-custom-workflow",\n        "nodes": [\n          {\n            "id": "optical-character-recognizer",\n            "model": {\n              "id": "ocr-scene-english-paddleocr",\n              "model_version": {\n                "id": "40dbb2c9cde44a27af226782e7157006"\n              }\n            }\n          },\n          {\n            "id": "text-to-text",\n            "model": {\n              "id": "text-translation-english-spanish",\n              "model_version": {\n                "id": "643f30558de34013aff72b0e21f244f5"\n              }\n            },\n              "node_inputs": [\n                {\n                  "node_id": "optical-character-recognizer"\n                }\n              ]\n          }\n        ]\n      }]\n    }\'',L="#############################################################################\n# In this section, we set the user authentication, app ID, workflow ID, and  \n# image URL. Change these strings to run your own example.\n##############################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to make your own predictions\nWORKFLOW_ID = 'my-custom-workflow'\nIMAGE_URL = 'https://samples.clarifai.com/featured-models/ocr-woman-holding-sold-sign.jpg'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID) # The userDataObject is required when using a PAT\n\npost_workflow_results_response = stub.PostWorkflowResults(\n    service_pb2.PostWorkflowResultsRequest(\n        user_app_id=userDataObject,  \n        workflow_id=WORKFLOW_ID,\n        inputs=[\n            resources_pb2.Input(\n                data=resources_pb2.Data(\n                    image=resources_pb2.Image(\n                        url=IMAGE_URL\n                    )\n                )\n            )\n        ]\n    ),\n    metadata=metadata\n)\nif post_workflow_results_response.status.code != status_code_pb2.SUCCESS:\n    print(post_workflow_results_response.status)\n    raise Exception(\"Post workflow results failed, status: \" + post_workflow_results_response.status.description)\n\n# We'll get one WorkflowResult for each input we used above. Because of one input, we have here one WorkflowResult\nresults = post_workflow_results_response.results[0]\n\n# Each model we have in the workflow will produce its output\nfor output in results.outputs:\n    model = output.model    \n    print(\"Output for the model: `%s`\" % model.id)\n    i = 0\n    while(i < len(output.data.regions)):\n        print(output.data.regions[i].data.text.raw)\n        i += 1        \n",T='\x3c!--index.html file--\x3e\n\n<script>\n  ///////////////////////////////////////////////////////////////////////////////////\n  // In this section, we set the user authentication, app ID, workflow ID, and\n  // image URL. Change these strings to run your own example.\n  ///////////////////////////////////////////////////////////////////////////////////\n\n  const USER_ID = "YOUR_USER_ID_HERE";\n  // Your PAT (Personal Access Token) can be found in the Account\'s Security section\n  const PAT = "YOUR_PAT_HERE";\n  const APP_ID = "YOUR_APP_ID_HERE";\n  // Change these to make your own predictions\n  const WORKFLOW_ID = "my-custom-workflow";\n  const IMAGE_URL = "https://samples.clarifai.com/featured-models/ocr-woman-holding-sold-sign.jpg";\n\n  ///////////////////////////////////////////////////////////////////////////////////\n  // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n  /////////////////////////////////////////////////////////////////////////////////// \n\n  const raw = JSON.stringify({\n    "user_app_id": {\n      "user_id": USER_ID,\n      "app_id": APP_ID\n    },\n    "inputs": [\n      {\n        "data": {\n          "image": {\n            "url": IMAGE_URL\n          }\n        }\n      }\n    ]\n  });\n\n  const requestOptions = {\n    method: \'POST\',\n    headers: {\n      \'Accept\': \'application/json\',\n      \'Authorization\': \'Key \' + PAT\n    },\n    body: raw\n  };\n\n  fetch(`https://api.clarifai.com/v2/workflows/${WORKFLOW_ID}/results`, requestOptions)\n    .then(response => response.text())\n    .then(result => console.log(result))\n    .catch(error => console.log(\'error\', error));\n<\/script>',M='//index.js file\n\n///////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, workflow ID, and\n// image URL. Change these strings to run your own example.\n///////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = "YOUR_PAT_HERE";\nconst APP_ID = "YOUR_APP_ID_HERE";\n// Change these to make your own predictions\nconst WORKFLOW_ID = "my-custom-workflow";\nconst IMAGE_URL = "https://samples.clarifai.com/featured-models/ocr-woman-holding-sold-sign.jpg";\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PostWorkflowResults(\n  {\n    user_app_id: {\n      "user_id": USER_ID,\n      "app_id": APP_ID,\n    },\n    workflow_id: WORKFLOW_ID,\n    inputs: [{ data: { image: { url: IMAGE_URL } } }],\n  },\n  metadata,\n  (err, response) => {\n    if (err) {\n      throw new Error(err);\n    }\n\n    if (response.status.code !== 10000) {\n      throw new Error(\n        "Post workflow results failed, status: " + response.status.description\n      );\n    }\n\n    // We\'ll get one WorkflowResult for each input we used above. Because of one input, we have here \n    // one WorkflowResult\n    const results = response.results[0];\n\n    // Each model we have in the workflow will produce its output.\n    for (const output of results.outputs) {\n      const model = output.model;\n      console.log("Output for the model: `" + model.id + "`");\n      let i = 0;\n      while(i < output.data.regions.length){\n        console.log(output.data.regions[i].data.text.raw);\n        i += 1; \n      }    \n    }\n  }\n);\n',P='package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, workflow ID, and\n    // image URL. Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to make your own predictions\n    static final String WORKFLOW_ID = "my-custom-workflow";\n    static final String IMAGE_URL = "https://samples.clarifai.com/featured-models/ocr-woman-holding-sold-sign.jpg";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        PostWorkflowResultsResponse postWorkflowResultsResponse = stub.postWorkflowResults(\n            PostWorkflowResultsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .setWorkflowId(WORKFLOW_ID)\n            .addInputs(\n                Input.newBuilder().setData(\n                    Data.newBuilder().setImage(\n                        Image.newBuilder().setUrl(IMAGE_URL)\n                    )\n                )\n            )\n            .build()\n        );\n\n        if (postWorkflowResultsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post workflow results failed, status: " + postWorkflowResultsResponse.getStatus());\n        }\n\n        // We\'ll get one WorkflowResult for each input we used above. Because of one input, we have here\n        // one WorkflowResult\n        WorkflowResult results = postWorkflowResultsResponse.getResults(0);\n\n        // Each model we have in the workflow will produce its output\n        for (Output output: results.getOutputsList()) {\n            Model model = output.getModel();\n            System.out.println("Output for the model: `" + model.getId() + "`");            \n            int i = 0;\n            while(i < output.getData().getRegionsCount()) {\n            \tString modelOutput = output.getData().getRegionsList().get(i).getData().getText().getRaw();\n            \tSystem.out.println(modelOutput);            \n                i += 1;            \t\n            }\n        }\n\n    }\n\n}',C="<?php\n\nrequire __DIR__ . '/vendor/autoload.php';\n\n/////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, workflow ID, and  \n// image URL. Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = 'YOUR_USER_ID_HERE';\n// Your PAT (Personal Access Token) can be found in the Account's Security section\n$PAT = 'YOUR_PAT_HERE';\n$APP_ID = 'YOUR_APP_ID_HERE';\n// Change these to make your own predictions\n$WORKFLOW_ID = 'my-custom-workflow';\n$IMAGE_URL = 'https://samples.clarifai.com/featured-models/ocr-woman-holding-sold-sign.jpg';\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\Data;\nuse Clarifai\\Api\\Image;\nuse Clarifai\\Api\\Input;\nuse Clarifai\\Api\\PostWorkflowResultsRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ['Authorization' => ['Key ' . $PAT ]];\n\n$userDataObject = new UserAppIDSet([\n    'user_id' => $USER_ID, \n    'app_id' => $APP_ID \n]);\n\n// Let's make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PostWorkflowResults(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new PostWorkflowResultsRequest([\n        'user_app_id' => $userDataObject,\n        'workflow_id' => $WORKFLOW_ID,          \n        'inputs' => [\n            new Input([ // The Input object wraps the Data object in order to meet the API specification                \n                'data' => new Data([ // The Data object is constructed around the Image object. It offers a container that has additional image independent\n                                    // metadata. In this particular use case, no other metadata is needed to be specified\n                    'image' => new Image([ // In the Clarifai platform, an image is defined by a special Image object\n                        'url' => $IMAGE_URL\n                    ])\n                ])\n            ])\n        ]\n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception(\"Error: {$status->details}\");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    throw new Exception(\"Failure response: \" . $response->getStatus()->getDescription() . \" \" .\n        $response->getStatus()->getDetails());\n}\n\n// We'll get one WorkflowResult for each input we used above. Because of one input, we have here one WorkflowResult\n$results = $response->getResults()[0];\n\n// Each model we have in the workflow will produce its output\nforeach ($results->getOutputs() as $output) {\n    $model = $output->getModel();\n    echo \"Output for the model: '\" . $model->getId() . \"'\" . \"`<br>\";\n    $i = 0;\n    while ($i < count($output->getData()->getRegions())) {\n        echo $output->getData()->getRegions()[$i]->getData()->getText()->getRaw() . \"`<br>\";\n        $i++;\n    }\n}\n\n?>",k='curl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/workflows/YOUR_WORKFLOW_ID_HERE/results" \\\n  -H "authorization: Key YOUR_PAT_HERE" \\\n  -H "content-type: application/json" \\\n  -d \'{\n    "inputs": [\n        {\n          "data": {\n            "image": {\n              "url": "https://samples.clarifai.com/featured-models/ocr-woman-holding-sold-sign.jpg"\n          }\n        }\n      }\n    ]\n}\'',x="Output for the model: `ocr-scene-english-paddleocr`\nSOLD\nWe can SELL YOURS too!\nOutput for the model: `text-translation-english-spanish`\nVENDIDO\n\xa1Nosotros tambi\xe9n podemos venderla!",U={description:"Create computational graphs that include one or more models",sidebar_position:1,toc_max_heading_level:4},v="Create Workflows",j={},W=[{value:"Supported Input and Output Types",id:"supported-input-and-output-types",level:2},{value:"Create via the UI",id:"create-via-the-ui",level:2},{value:"Step 1: Create Application",id:"step-1-create-application",level:3},{value:"Step 2: Create a New Workflow",id:"step-2-create-a-new-workflow",level:3},{value:"Step 3: Create Your Nodes",id:"step-3-create-your-nodes",level:3},{value:"Name Your Workflow",id:"name-your-workflow",level:4},{value:"Search for First Node",id:"search-for-first-node",level:4},{value:"Search for the Second Node",id:"search-for-the-second-node",level:4},{value:"Step 4: Search for Models",id:"step-4-search-for-models",level:3},{value:"Step 5: Save Workflow",id:"step-5-save-workflow",level:3},{value:"Create via the API",id:"create-via-the-api",level:2},{value:"Create Workflow",id:"create-workflow",level:3},{value:"Predict With Workflow",id:"predict-with-workflow",level:4},{value:"Create With Multiple Connected Nodes",id:"create-with-multiple-connected-nodes",level:3},{value:"Suppress Output From Nodes",id:"suppress-output-from-nodes",level:3},{value:"Create Using YAML File",id:"create-using-yaml-file",level:3}];function y(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",img:"img",li:"li",p:"p",strong:"strong",ul:"ul",...(0,a.R)(),...e.components},{Details:o}=n;return o||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"create-workflows",children:"Create Workflows"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Create computational graphs that include one or more models"})}),"\n",(0,s.jsx)("hr",{}),"\n",(0,s.jsx)(n.p,{children:"You can build workflows using any Clarifai models or custom models you've created in your app. Outputs from one model can serve as inputs to another \u2014 provided the receiving model supports the input type."}),"\n",(0,s.jsx)(n.p,{children:"The input and output types supported by your custom workflows depend on the capabilities of the individual models used to construct them."}),"\n",(0,s.jsx)(n.p,{children:"This model-linking approach enables you to form a graph of interconnected models, allowing you to build sophisticated AI solutions tailored to specific use cases."}),"\n",(0,s.jsx)(n.h2,{id:"supported-input-and-output-types",children:"Supported Input and Output Types"}),"\n",(0,s.jsx)(n.p,{children:"Different models support different input and output formats. Here are some common examples:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Inputs"})," \u2014 Concepts, embeddings, images, videos, and regions."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Outputs"})," \u2014 Concepts, clusters, and regions."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"create-via-the-ui",children:"Create via the UI"}),"\n",(0,s.jsx)(n.p,{children:"Let\u2019s demonstrate how to create workflows with a simple example that first extracts text from an image and then translates the extracted text to Spanish."}),"\n",(0,s.jsx)(n.p,{children:"We'll connect the following two Clarifai models to achieve our objective:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.a,{href:"https://clarifai.com/clarifai/main/models/ocr-scene-english-paddleocr",children:"ocr-scene-english-paddleocr"})," model, which detects and recognizes English texts in images;"]}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.a,{href:"https://clarifai.com/helsinkinlp/translation/models/text-translation-english-spanish",children:"text-translation-english-spanish"})," model translates texts from English to Spanish."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"We'll specify the IDs of the models and their versions \u2014 since a model can have several versions."}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsx)(n.p,{children:"You can add up to 20 models to a single workflow."})}),"\n",(0,s.jsx)(n.h3,{id:"step-1-create-application",children:"Step 1: Create Application"}),"\n",(0,s.jsx)(n.p,{children:"Let's begin by creating an application that will act as the container for all the related models and workflows for this particular project."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://docs.clarifai.com/clarifai-basics/applications/create-an-application/#create-an-application-on-the-portal",children:"Click here"})," to learn how to create an application on the Clarifai platform."]}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsx)(n.p,{children:"When creating the application, select the Text/Document option as the primary input type."})}),"\n",(0,s.jsx)(n.h3,{id:"step-2-create-a-new-workflow",children:"Step 2: Create a New Workflow"}),"\n",(0,s.jsxs)(n.p,{children:["To create a new workflow, select the Workflows option in the collapsible left sidebar. Next, click the ",(0,s.jsx)(n.strong,{children:"Create Workflow"})," button in the upper-right corner of the page."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"alt_text",src:t(38918).A+"",width:"1883",height:"698"})}),"\n",(0,s.jsx)(n.h3,{id:"step-3-create-your-nodes",children:"Step 3: Create Your Nodes"}),"\n",(0,s.jsx)(n.p,{children:"You'll be redirected to a simple, no-code, drag-and-drop interface that allows you to connect your models together. You'll need to connect the input nodes in your workflow. You can link your nodes to any nodes that precede them in the visual graph."}),"\n",(0,s.jsx)(n.h4,{id:"name-your-workflow",children:"Name Your Workflow"}),"\n",(0,s.jsx)(n.p,{children:"Let's start by clicking the input field in the upper section of the page and providing a name for the custom workflow."}),"\n",(0,s.jsx)(n.h4,{id:"search-for-first-node",children:"Search for First Node"}),"\n",(0,s.jsx)(n.p,{children:"Next, in the left sidebar, search for the optical-character-recognizer node. This allows you to configure a model that enables the extraction of texts from images, such as scans of printed pages or photos of street signs."}),"\n",(0,s.jsx)(n.p,{children:"After finding the node, drag and drop it on the empty workspace pane and connect it to the IN element."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"alt_text",src:t(30615).A+"",width:"1906",height:"812"})}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsx)(n.p,{children:"You can use the tools on the left side of the workspace pane to manage the workflow creation process. These tools enable you to zoom in and out, fit the view, arrange the workflow, reset the workspace, and perform other actions to help you efficiently design and organize your workflow."})}),"\n",(0,s.jsx)(n.h4,{id:"search-for-the-second-node",children:"Search for the Second Node"}),"\n",(0,s.jsx)(n.p,{children:"Next, search for the text-to-text node. This allows you to configure a model that enables the transformation of one kind of text into another."}),"\n",(0,s.jsx)(n.p,{children:"After finding the second node, drag and drop it on the workspace and draw a line that connects it to the first node. This shows the flow of information from one node to another."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"alt_text",src:t(99756).A+"",width:"1892",height:"795"})}),"\n",(0,s.jsx)(n.h3,{id:"step-4-search-for-models",children:"Step 4: Search for Models"}),"\n",(0,s.jsx)(n.p,{children:"Click the optical-character-recognizer node. And on the search box that appears on the right side of the page, specify the ocr-scene-english-paddleocr model as the one to use for optical character recognition. Also, select the version of the model you want to use."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"alt_text",src:t(27445).A+"",width:"1537",height:"801"})}),"\n",(0,s.jsx)(n.p,{children:"Similarly, click the text-to-text node and specify the text-translation-english-spanish model as the one to use for translating the extracted text from English to Spanish. Also, select its version."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"alt_text",src:t(29248).A+"",width:"1529",height:"799"})}),"\n",(0,s.jsx)(n.h3,{id:"step-5-save-workflow",children:"Step 5: Save Workflow"}),"\n",(0,s.jsxs)(n.p,{children:["Finally, click the ",(0,s.jsx)(n.strong,{children:"Save Workflow"})," button to save the workflow. This will save the state of your workflow. Now, you are ready to ",(0,s.jsx)(n.a,{href:"https://docs.clarifai.com/portal-guide/workflows/working-with-workflows#using-a-workflow",children:"predict"})," using your brand-new workflow."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"alt_text",src:t(94862).A+"",width:"1904",height:"809"})}),"\n",(0,s.jsx)(n.h2,{id:"create-via-the-api",children:"Create via the API"}),"\n","\n","\n","\n","\n","\n","\n","\n","\n","\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["Before using the ",(0,s.jsx)(n.a,{href:"https://docs.clarifai.com/additional-resources/api-overview/python-sdk",children:"Python SDK"}),", ",(0,s.jsx)(n.a,{href:"https://docs.clarifai.com/additional-resources/api-overview/nodejs-sdk",children:"Node.js SDK"}),", or any of our ",(0,s.jsx)(n.a,{href:"https://docs.clarifai.com/additional-resources/api-overview/grpc-clients",children:"gRPC clients"}),", ensure they are properly installed on your machine. Refer to their respective installation guides for instructions on how to install and initialize them."]})}),"\n",(0,s.jsx)(n.h3,{id:"create-workflow",children:"Create Workflow"}),"\n",(0,s.jsx)(n.p,{children:"In this example, we'll create a simple custom workflow that first extracts text from an image and then translates the extracted text to Spanish."}),"\n",(0,s.jsx)(n.p,{children:"We'll connect the following two models to achieve our objective:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.a,{href:"https://clarifai.com/clarifai/main/models/ocr-scene-english-paddleocr",children:"ocr-scene-english-paddleocr"})," model, which detects and recognizes English texts in images;"]}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.a,{href:"https://clarifai.com/helsinkinlp/translation/models/text-translation-english-spanish",children:"text-translation-english-spanish"})," model, which translates texts from English to Spanish."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"We'll specify the IDs of the models and their versions \u2014 since a model can have several versions."}),"\n",(0,s.jsxs)(r.A,{groupId:"code",children:[(0,s.jsx)(i.A,{value:"python",label:"Python (gRPC)",children:(0,s.jsx)(l.A,{className:"language-python",children:N})}),(0,s.jsx)(i.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(l.A,{className:"language-javascript",children:R})}),(0,s.jsx)(i.A,{value:"nodejs",label:"Node.js (gRPC)",children:(0,s.jsx)(l.A,{className:"language-javascript",children:g})}),(0,s.jsx)(i.A,{value:"java",label:"Java (gRPC)",children:(0,s.jsx)(l.A,{className:"language-java",children:b})}),(0,s.jsx)(i.A,{value:"php",label:"PHP (gRPC)",children:(0,s.jsx)(l.A,{className:"language-php",children:S})}),(0,s.jsx)(i.A,{value:"curl",label:"cURL",children:(0,s.jsx)(l.A,{className:"language-bash",children:A})})]}),"\n",(0,s.jsx)(n.h4,{id:"predict-with-workflow",children:"Predict With Workflow"}),"\n",(0,s.jsxs)(n.p,{children:["After creating the workflow, let's now use it to extract texts from ",(0,s.jsx)(n.a,{href:"https://samples.clarifai.com/featured-models/ocr-woman-holding-sold-sign.jpg",children:"this image"})," and translate them into Spanish."]}),"\n",(0,s.jsx)(n.p,{children:"The response will contain the predictions each model in the workflow returns for the input."}),"\n",(0,s.jsxs)(r.A,{groupId:"code",children:[(0,s.jsx)(i.A,{value:"python",label:"Python (gRPC)",children:(0,s.jsx)(l.A,{className:"language-python",children:L})}),(0,s.jsx)(i.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(l.A,{className:"language-javascript",children:T})}),(0,s.jsx)(i.A,{value:"nodejs",label:"Node.js (gRPC)",children:(0,s.jsx)(l.A,{className:"language-javascript",children:M})}),(0,s.jsx)(i.A,{value:"java",label:"Java (gRPC)",children:(0,s.jsx)(l.A,{className:"language-java",children:P})}),(0,s.jsx)(i.A,{value:"php",label:"PHP (gRPC)",children:(0,s.jsx)(l.A,{className:"language-php",children:C})}),(0,s.jsx)(i.A,{value:"curl",label:"cURL",children:(0,s.jsx)(l.A,{className:"language-bash",children:k})})]}),"\n",(0,s.jsxs)(o,{children:[(0,s.jsx)("summary",{children:"Text Output Example"}),(0,s.jsx)(l.A,{className:"language-text",children:x})]}),"\n",(0,s.jsx)(n.h3,{id:"create-with-multiple-connected-nodes",children:"Create With Multiple Connected Nodes"}),"\n",(0,s.jsx)(n.p,{children:"The following is an example of how to build a workflow with multiple connected nodes."}),"\n",(0,s.jsxs)(r.A,{groupId:"code",children:[(0,s.jsx)(i.A,{value:"python",label:"Python (gRPC)",children:(0,s.jsx)(l.A,{className:"language-python",children:c})}),(0,s.jsx)(i.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(l.A,{className:"language-javascript",children:u})}),(0,s.jsx)(i.A,{value:"nodejs",label:"Node.js (gRPC)",children:(0,s.jsx)(l.A,{className:"language-javascript",children:E})}),(0,s.jsx)(i.A,{value:"java",label:"Java (gRPC)",children:(0,s.jsx)(l.A,{className:"language-java",children:D})}),(0,s.jsx)(i.A,{value:"php",label:"PHP (gRPC)",children:(0,s.jsx)(l.A,{className:"language-php",children:I})}),(0,s.jsx)(i.A,{value:"curl",label:"cURL",children:(0,s.jsx)(l.A,{className:"language-bash",children:w})})]}),"\n",(0,s.jsx)(n.h3,{id:"suppress-output-from-nodes",children:"Suppress Output From Nodes"}),"\n",(0,s.jsxs)(n.p,{children:["It is possible to turn the outputs from given nodes in your workflow on and off with the ",(0,s.jsx)(n.code,{children:"suppress_output"})," endpoint. This can be helpful when you want to hide outputs for expensive return values like image crops or embedding."]}),"\n",(0,s.jsx)(n.p,{children:"By default, this endpoint will be set to false, meaning that we do not suppress any model's output."}),"\n",(0,s.jsxs)(r.A,{groupId:"code",children:[(0,s.jsx)(i.A,{value:"python",label:"Python (gRPC)",children:(0,s.jsx)(l.A,{className:"language-python",children:_})}),(0,s.jsx)(i.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(l.A,{className:"language-javascript",children:p})}),(0,s.jsx)(i.A,{value:"nodejs",label:"Node.js (gRPC)",children:(0,s.jsx)(l.A,{className:"language-javascript",children:h})}),(0,s.jsx)(i.A,{value:"java",label:"Java (gRPC)",children:(0,s.jsx)(l.A,{className:"language-java",children:f})}),(0,s.jsx)(i.A,{value:"php",label:"PHP (gRPC)",children:(0,s.jsx)(l.A,{className:"language-php",children:O})}),(0,s.jsx)(i.A,{value:"curl",label:"cURL",children:(0,s.jsx)(l.A,{className:"language-bash",children:m})})]}),"\n",(0,s.jsx)(n.h3,{id:"create-using-yaml-file",children:"Create Using YAML File"}),"\n",(0,s.jsx)(n.p,{children:"Note that when creating a workflow using the Python SDK, you need to provide its YAML specification."}),"\n",(0,s.jsx)(r.A,{groupId:"code",children:(0,s.jsx)(i.A,{value:"python",label:"Python SDK",children:(0,s.jsx)(l.A,{className:"language-python",children:d})})}),"\n",(0,s.jsxs)(o,{children:[(0,s.jsx)("summary",{children:"Output"}),(0,s.jsx)("img",{src:"/img/python-sdk/create_workflow.png"})]})]})}function Y(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(y,{...e})}):y(e)}},99756:(e,n,t)=>{t.d(n,{A:()=>o});const o=t.p+"assets/images/input_nodes_add_another_model-9256d587f40e559c99f7e56cd1d69331.png"}}]);
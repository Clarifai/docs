"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[267],{85162:function(e,n,t){t.d(n,{Z:function(){return r}});var a=t(67294),s=t(34334),i="tabItem_Ymn6";function r(e){let{children:n,hidden:t,className:r}=e;return a.createElement("div",{role:"tabpanel",className:(0,s.Z)(i,r),hidden:t},n)}},65488:function(e,n,t){t.d(n,{Z:function(){return m}});var a=t(83117),s=t(67294),i=t(34334),r=t(72389),o=t(67392),l=t(7094),u=t(12466),p="tabList__CuJ",c="tabItem_LNqP";function d(e){var n,t;const{lazy:r,block:d,defaultValue:m,values:_,groupId:h,className:g}=e,I=s.Children.map(e.children,(e=>{if((0,s.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),f=null!=_?_:I.map((e=>{let{props:{value:n,label:t,attributes:a}}=e;return{value:n,label:t,attributes:a}})),E=(0,o.l)(f,((e,n)=>e.value===n.value));if(E.length>0)throw new Error('Docusaurus error: Duplicate values "'+E.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const b=null===m?m:null!=(n=null!=m?m:null==(t=I.find((e=>e.props.default)))?void 0:t.props.value)?n:I[0].props.value;if(null!==b&&!f.some((e=>e.value===b)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+b+'" but none of its children has the corresponding value. Available values are: '+f.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:A,setTabGroupChoices:T}=(0,l.U)(),[R,w]=(0,s.useState)(b),y=[],{blockElementScrollPositionUntilNextRender:U}=(0,u.o5)();if(null!=h){const e=A[h];null!=e&&e!==R&&f.some((n=>n.value===e))&&w(e)}const O=e=>{const n=e.currentTarget,t=y.indexOf(n),a=f[t].value;a!==R&&(U(n),w(a),null!=h&&T(h,String(a)))},S=e=>{var n;let t=null;switch(e.key){case"ArrowRight":{var a;const n=y.indexOf(e.currentTarget)+1;t=null!=(a=y[n])?a:y[0];break}case"ArrowLeft":{var s;const n=y.indexOf(e.currentTarget)-1;t=null!=(s=y[n])?s:y[y.length-1];break}}null==(n=t)||n.focus()};return s.createElement("div",{className:(0,i.Z)("tabs-container",p)},s.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":d},g)},f.map((e=>{let{value:n,label:t,attributes:r}=e;return s.createElement("li",(0,a.Z)({role:"tab",tabIndex:R===n?0:-1,"aria-selected":R===n,key:n,ref:e=>y.push(e),onKeyDown:S,onFocus:O,onClick:O},r,{className:(0,i.Z)("tabs__item",c,null==r?void 0:r.className,{"tabs__item--active":R===n})}),null!=t?t:n)}))),r?(0,s.cloneElement)(I.filter((e=>e.props.value===R))[0],{className:"margin-top--md"}):s.createElement("div",{className:"margin-top--md"},I.map(((e,n)=>(0,s.cloneElement)(e,{key:n,hidden:e.props.value!==R})))))}function m(e){const n=(0,r.Z)();return s.createElement(d,(0,a.Z)({key:String(n)},e))}},6829:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return u},default:function(){return _},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return d}});var a=t(83117),s=(t(67294),t(3905)),i=t(65488),r=t(85162),o=t(66066);const l={description:"Use AI to index your images based on semantic similarity.",sidebar_position:5},u="Index Images for Search",p={unversionedId:"api-guide/search/index-images-for-search",id:"api-guide/search/index-images-for-search",title:"Index Images for Search",description:"Use AI to index your images based on semantic similarity.",source:"@site/docs/api-guide/search/index-images-for-search.md",sourceDirName:"api-guide/search",slug:"/api-guide/search/index-images-for-search",permalink:"/api-guide/search/index-images-for-search",draft:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{description:"Use AI to index your images based on semantic similarity.",sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Rank",permalink:"/api-guide/search/rank"},next:{title:"Legacy Search",permalink:"/api-guide/search/legacy-search/"}},c={},d=[],m={toc:d};function _(e){let{components:n,...t}=e;return(0,s.kt)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"index-images-for-search"},"Index Images for Search"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Use AI to index your images based on semantic similarity")),(0,s.kt)("hr",null),(0,s.kt)("p",null,"To get started with search, you must first add images to the search index. You can add one or more images to the index at a time. You can supply an image either with a publicly accessible URL or by directly sending image bytes. You can send up to 128 images in one API call."),(0,s.kt)("p",null,"Below is an example of how to add images to the search index."),(0,s.kt)("admonition",{type:"info"},(0,s.kt)("p",{parentName:"admonition"},"The initialization code used in the following example is outlined in detail on the ",(0,s.kt)("a",{parentName:"p",href:"https://docs.clarifai.com/api-guide/api-overview/api-clients/#client-installation-instructions"},"client installation page."))),(0,s.kt)(i.Z,{mdxType:"Tabs"},(0,s.kt)(r.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,s.kt)(o.Z,{className:"language-python",mdxType:"CodeBlock"},"############################################################################\n# In this section, we set the user authentication, app ID, and images to \n# add to the index. Change these strings to run your own example.\n############################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to add your own images to the search index\nIMAGE_FILE_LOCATION =  'YOUR_IMAGE_FILE_LOCATION'\nIMAGE_URL_1 = 'https://samples.clarifai.com/metro-north.jpg'\nIMAGE_URL_2 = 'https://samples.clarifai.com/wedding.jpg'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\nwith open(IMAGE_FILE_LOCATION, \"rb\") as f:\n    file_bytes = f.read()\n\npost_inputs_response = stub.PostInputs(\n    service_pb2.PostInputsRequest(\n        user_app_id=userDataObject,\n        inputs=[\n            resources_pb2.Input(\n                data=resources_pb2.Data(\n                    image=resources_pb2.Image(\n                        url=IMAGE_URL_1,\n                        allow_duplicate_url=True\n                    )\n                )\n            ),\n            resources_pb2.Input(\n                data=resources_pb2.Data(\n                    image=resources_pb2.Image(\n                        url=IMAGE_URL_2,\n                        allow_duplicate_url=True\n                    )\n                )\n            ),\n            resources_pb2.Input(\n                data=resources_pb2.Data(\n                    image=resources_pb2.Image(\n                        base64=file_bytes\n                    )\n                )\n            ),\n        ]\n    ),\n    metadata=metadata\n)\n\nif post_inputs_response.status.code != status_code_pb2.SUCCESS:\n    print(\"There was an error with your request!\")\n    for input_response in post_inputs_response.inputs:\n        print(\"Input \" + input_response.id + \" status:\")\n        print(input_response.status)\n    \n    raise Exception(\"Post inputs failed, status: \" + post_inputs_response.status.description)\n")),(0,s.kt)(r.Z,{value:"js_rest",label:"JavaScript (REST)",mdxType:"TabItem"},(0,s.kt)(o.Z,{className:"language-javascript",mdxType:"CodeBlock"},'\x3c!--index.html file--\x3e\n\n<script>\n    /////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and images to \n    // add to the index. Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = \'YOUR_USER_ID_HERE\';\n    // Your PAT (Personal Access Token) can be found in the portal under Authentification\n    const PAT = \'YOUR_PAT_HERE\';\n    const APP_ID = \'YOUR_APP_ID_HERE\';\n    // Change these to add your own images to the search index  \n    const IMAGE_URL_1 = \'https://samples.clarifai.com/metro-north.jpg\';\n    const IMAGE_URL_2 = \'https://samples.clarifai.com/wedding.jpg\';\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        "user_app_id": {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        "inputs": [\n            {\n                "data": {\n                    "image": {\n                        "url": IMAGE_URL_1,\n                        "allow_duplicate_url": true\n                    }\n                }\n            },\n            {\n                "data": {\n                    "image": {\n                        "url": IMAGE_URL_2,\n                        "allow_duplicate_url": true\n                    }\n                }\n            }\n        ]\n    });\n\n    // # Use image\'s "base64" field to upload image from your local machine.\n\n    const requestOptions = {\n        method: \'POST\',\n        headers: {\n            \'Accept\': \'application/json\',\n            \'Authorization\': \'Key \' + PAT\n        },\n        body: raw\n    };\n\n    fetch(`https://api.clarifai.com/v2/inputs`, requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log(\'error\', error));\n\n<\/script>')),(0,s.kt)(r.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,s.kt)(o.Z,{className:"language-javascript",mdxType:"CodeBlock"},'//index.js file\n\n/////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and images to \n// add to the index. Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n// Change these to add your own images to the search index\nconst IMAGE_FILE_LOCATION = \'YOUR_IMAGE_FILE_LOCATION\';\nconst IMAGE_URL_1 = \'https://samples.clarifai.com/metro-north.jpg\';\nconst IMAGE_URL_2 = \'https://samples.clarifai.com/wedding.jpg\';\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nconst fs = require("fs");\nconst imageBytes = fs.readFileSync(IMAGE_FILE_LOCATION);\n\nstub.PostInputs(\n    {\n        user_app_id: {\n            user_id: USER_ID,\n            app_id: APP_ID\n        },\n        inputs: [\n            {\n                data: { image: { url: IMAGE_URL_1, allow_duplicate_url: true } }\n            },\n            {\n                data: { image: { url: IMAGE_URL_2, allow_duplicate_url: true } }\n            },\n            {\n                data: { image: { base64: imageBytes } }\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            for (const input of response.inputs) {\n                console.log("Input " + input.id + " status: ");\n                console.log(JSON.stringify(input.status, null, 2) + "\\n");\n            }\n\n            throw new Error("Post inputs failed, status: " + response.status.description);\n        }\n    }\n);')),(0,s.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,s.kt)(o.Z,{className:"language-java",mdxType:"CodeBlock"},'package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.StatusCode;\nimport java.io.File;\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport com.google.protobuf.ByteString;\n\npublic class ClarifaiExample {\n\n    /////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and images to \n    // add to the index. Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to add your own images to the search index   \n    static final String IMAGE_URL_1 = "https://samples.clarifai.com/metro-north.jpg";\n    static final String IMAGE_URL_2 = "https://samples.clarifai.com/wedding.jpg";\n    static final String IMAGE_FILE_LOCATION = "YOUR_IMAGE_FILE_LOCATION";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) throws IOException {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiInputResponse postInputsResponse = stub.postInputs(\n            PostInputsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .addInputs(\n                Input.newBuilder()\n                .setData(\n                    Data.newBuilder().setImage(\n                        Image.newBuilder()\n                        .setUrl(IMAGE_URL_1)\n                        .setAllowDuplicateUrl(true)\n                    )\n                )\n            )\n            .addInputs(\n                Input.newBuilder()\n                .setData(\n                    Data.newBuilder().setImage(\n                        Image.newBuilder()\n                        .setUrl(IMAGE_URL_2)\n                        .setAllowDuplicateUrl(true)\n                    )\n                )\n            )\n            .addInputs(\n                Input.newBuilder()\n                .setData(\n                    Data.newBuilder().setImage(\n                        Image.newBuilder()\n                        .setBase64(ByteString.copyFrom(Files.readAllBytes(\n                            new File(IMAGE_FILE_LOCATION).toPath()\n                        )))\n                    )\n                )\n            )\n            .build()\n        );\n\n        if (postInputsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            for (Input input: postInputsResponse.getInputsList()) {\n                System.out.println("Input " + input.getId() + " status: ");\n                System.out.println(input.getStatus() + "\\n");\n            }\n\n            throw new RuntimeException("Post inputs failed, status: " + postInputsResponse.getStatus());\n        }\n\n    }\n\n}')),(0,s.kt)(r.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,s.kt)(o.Z,{className:"language-bash",mdxType:"CodeBlock"},'curl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/inputs" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "inputs": [\n      {\n        "data": {\n          "image": {\n            "url": "https://samples.clarifai.com/metro-north.jpg",\n            "allow_duplicate_url": true\n          }\n        }\n      },\n      {\n        "data": {\n          "image": {\n            "url": "https://samples.clarifai.com/wedding.jpg",\n            "allow_duplicate_url": true\n          }\n        }\n      }\n    ]\n  }\'\n\n# Use image\'s "base64" field to upload image from your local machine.'))))}_.isMDXComponent=!0}}]);
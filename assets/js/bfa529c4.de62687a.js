"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[1279],{85170:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>Y,contentTitle:()=>j,default:()=>G,frontMatter:()=>M,metadata:()=>H,toc:()=>L});var a=t(74848),i=t(28453),r=t(11470),s=t(19365),o=t(21432);const l="##########################################################################################\n# In this section, we set the user authentication, app ID, model ID, and model type ID.\n# Change these strings to run your own example.\n#########################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to create your own model\nMODEL_ID = 'petsID'\nMODEL_TYPE_ID = 'visual-classifier'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\npost_models_response = stub.PostModels(\n    service_pb2.PostModelsRequest(\n        user_app_id=userDataObject,\n        models=[\n            resources_pb2.Model(\n                id=MODEL_ID,\n                model_type_id=MODEL_TYPE_ID             \n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif post_models_response.status.code != status_code_pb2.SUCCESS:\n    print(post_models_response.status)\n    raise Exception(\"Post models failed, status: \" + post_models_response.status.description)\n",p='########################################################################################\n# In this section, we set the user authentication, app ID, model ID, and concept IDs.\n# Change these strings to run your own example.\n########################################################################################\n\nUSER_ID = "YOUR_USER_ID_HERE"\n# Your PAT (Personal Access Token) can be found in the Account\'s Security section\nPAT = "YOUR_PAT_HERE"\nAPP_ID = "YOUR_APP_ID_HERE"\n# Change these to train your own model\nMODEL_ID = "petsID"\nCONCEPT_ID_1 = "ferrari23"\nCONCEPT_ID_2 = "outdoors23"\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\nfrom google.protobuf.struct_pb2 import Struct\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nparams = Struct()\nparams.update(\n    {\n        "template": "MMClassification_ResNet_50_RSB_A1", \n        "num_epochs": 2\n    }\n    )\n\nmetadata = (("authorization", "Key " + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\npost_model_versions = stub.PostModelVersions(\n    service_pb2.PostModelVersionsRequest(\n        user_app_id=userDataObject,\n        model_id=MODEL_ID,\n        model_versions=[\n            resources_pb2.ModelVersion(\n                train_info=resources_pb2.TrainInfo(\n                    params=params,\n                ),\n                output_info=resources_pb2.OutputInfo(\n                    data=resources_pb2.Data(\n                        concepts=[\n                            resources_pb2.Concept(id=CONCEPT_ID_1),\n                            resources_pb2.Concept(id=CONCEPT_ID_2)\n                            ]\n                    ),\n                ),\n            )\n        ],\n    ),\n    metadata=metadata,\n)\n\nif post_model_versions.status.code != status_code_pb2.SUCCESS:\n    print(post_model_versions.status)\n    raise Exception("Post models versions failed, status: " + post_model_versions.status.description)\n',d="#####################################################################################\n# In this section, we set the user authentication, app ID, and model type ID. \n# Change these strings to run your own example.\n####################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change this to list the template types of your preferred model \nMODEL_TYPE = 'visual-classifier'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\nresponse = stub.ListModelTypes(\n    service_pb2.ListModelTypesRequest(\n        user_app_id=userDataObject\n    ),\n    metadata=metadata\n    )\n\nif response.status.code != status_code_pb2.SUCCESS:\n    print(response.status)\n    raise Exception(\"List models failed, status: \" + response.status.description)\n\nfor model_type in response.model_types:\n   if model_type.id == MODEL_TYPE:\n      for modeltypefield in model_type.model_type_fields:\n        if modeltypefield.path.split('.')[-1] == \"template\":\n          for template in modeltypefield.model_type_enum_options:\n            print(template)",_="_base_ = '/mmdetection/configs/yolof/yolof_r50_c5_8x8_1x_coco.py'\nmodel=dict(\n  bbox_head=dict(num_classes=0))\ndata=dict(\n  train=dict(\n    ann_file='',\n    img_prefix='',\n    classes=''\n    ),\n  val=dict(\n    ann_file='',\n    img_prefix='',\n    classes=''))\noptimizer=dict(\n  _delete_=True,\n  type='Adam',\n  lr=0.0001,\n  weight_decay=0.0001)\nlr_config = dict(\n  _delete_=True,\n  policy='CosineAnnealing',\n  warmup='linear',\n  warmup_iters=1000,\n  warmup_ratio=0.1,\n  min_lr_ratio=1e-5)\nrunner = dict(\n  _delete_=True,\n  type='EpochBasedRunner',\n  max_epochs=10)\n\n",u='########################################################################################\n# In this section, we set the user authentication, app ID, model ID, and concept ID.\n# Change these strings to run your own example.\n########################################################################################\n\nUSER_ID = "YOUR_USER_ID_HERE"\n# Your PAT (Personal Access Token) can be found in the Account\'s Security section\nPAT = "YOUR_PAT_HERE"\nAPP_ID = "YOUR_APP_ID_HERE"\n# Change this to train your own model\nMODEL_ID = "test_config"\nCONCEPT_ID_1 = "house"\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\nfrom google.protobuf.struct_pb2 import Struct\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nparams = Struct()\nparams.update({"template": "MMDetection"})\n\nCONFIG_FILE = \'training_config.py\'\nparams.update({"custom_config": open(CONFIG_FILE, "r").read()})\n\nmetadata = (("authorization", "Key " + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\npost_model_versions = stub.PostModelVersions(\n    service_pb2.PostModelVersionsRequest(\n        user_app_id=userDataObject,\n        model_id=MODEL_ID,\n        model_versions=[\n            resources_pb2.ModelVersion(\n                train_info=resources_pb2.TrainInfo(\n                    params=params,\n                ),\n                output_info=resources_pb2.OutputInfo(\n                    data=resources_pb2.Data(\n                        concepts=[\n                            resources_pb2.Concept(id=CONCEPT_ID_1, value=1)\n                        ]\n                    ),\n                )\n            )\n        ],\n    ),\n    metadata=metadata,\n)\n\nif post_model_versions.status.code != status_code_pb2.SUCCESS:\n    print(post_model_versions.status)\n    raise Exception(\n        "Post models versions failed, status: " + post_model_versions.status.description\n    )\n\nprint(post_model_versions)\n',c='###################################################################################################\n# In this section, we set the user authentication, app ID, model ID, and estimated input count.\n# Change these strings to run your own example.\n##################################################################################################\n\nUSER_ID = "YOUR_USER_ID_HERE"\n# Your PAT (Personal Access Token) can be found in the Account\'s Security section\nPAT = "YOUR_PAT_HERE"\nAPP_ID = "YOUR_APP_ID_HERE"\n# Change these to get your training time estimate\nMODEL_ID = "YOUR_CUSTOM_MODEL_ID_HERE"\nESTIMATED_INPUT_COUNT = 100\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\nfrom google.protobuf.struct_pb2 import Struct\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nparams = Struct()\nparams.update({\n        "template": "MMDetection_FasterRCNN"\n    })\n\nmetadata = (("authorization", "Key " + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\ntraining_time_estimate_response = stub.PostModelVersionsTrainingTimeEstimate(\n    service_pb2.PostModelVersionsTrainingTimeEstimateRequest(\n        user_app_id=userDataObject,\n        model_id=MODEL_ID,\n        model_versions=[\n            resources_pb2.ModelVersion(\n                train_info=resources_pb2.TrainInfo(params=params)\n            ),\n        ],\n        estimated_input_count=ESTIMATED_INPUT_COUNT\n    ),\n    metadata=metadata,\n)\n\nif training_time_estimate_response.status.code != status_code_pb2.SUCCESS:\n    print(training_time_estimate_response.status)\n    raise Exception("Post model outputs failed, status: " + training_time_estimate_response.status.description)\n\nprint(training_time_estimate_response)\n',m='###################################################################################################\n# In this section, we set the user authentication, app ID, and details for incremental training.\n# Change these strings to run your own example.\n###################################################################################################\n\nUSER_ID = "YOUR_USER_ID_HERE"\n# Your PAT (Personal Access Token) can be found in the Account\'s Security section\nPAT = "YOUR_PAT_HERE"\nAPP_ID = "YOUR_APP_ID_HERE"\n# Change these to incrementally train your own model\nMODEL_ID = "detection-test"\nMODEL_VERSION_ID = "5af1bd0fb79d47289ab82d5bb2325c81"\nCONCEPT_ID = "face"\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\nfrom google.protobuf.struct_pb2 import Struct\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nparams = Struct()\nparams.update({\n    "template": "MMDetection_SSD", \n    "num_epochs": 1\n    })\n\nmetadata = (("authorization", "Key " + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\npost_model_versions = stub.PostModelVersions(\n    service_pb2.PostModelVersionsRequest(\n        user_app_id=userDataObject,\n        model_id=MODEL_ID,\n        model_versions=[\n            resources_pb2.ModelVersion(\n                train_info=resources_pb2.TrainInfo(\n                    params=params,\n                    resume_from_model=resources_pb2.Model(\n                        id=MODEL_ID,\n                        model_version=resources_pb2.ModelVersion(id=MODEL_VERSION_ID),\n                    ),\n                ),\n                output_info=resources_pb2.OutputInfo(\n                    data=resources_pb2.Data(\n                        concepts=[resources_pb2.Concept(id=CONCEPT_ID)]\n                    ),\n                ),\n            )\n        ],\n    ),\n    metadata=metadata,\n)\n\nif post_model_versions.status.code != status_code_pb2.SUCCESS:\n    print(post_model_versions.status)\n    raise Exception(\n        "Post models versions failed, status: " + post_model_versions.status.description\n    )\n\nprint(post_model_versions)\n',h="\x3c!--index.html file--\x3e\n\n<script>\n    ///////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, model ID, and model type ID.\n    // Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = 'YOUR_USER_ID_HERE';\n    // Your PAT (Personal Access Token) can be found in the Account's Security section\n    const PAT = 'YOUR_PAT_HERE';\n    const APP_ID = 'YOUR_APP_ID_HERE';\n    // Change these to create your own model\n    const MODEL_ID = 'petsID';\n    const MODEL_TYPE_ID = 'visual-classifier';\n    \n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        \"user_app_id\": {\n            \"user_id\": USER_ID,\n            \"app_id\": APP_ID\n        },\n        \"model\": {\n            \"id\": MODEL_ID,\n            \"model_type_id\": MODEL_TYPE_ID         \n        }\n    });\n\n    const requestOptions = {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        },\n        body: raw\n    };\n\n    fetch(\"https://api.clarifai.com/v2/models\", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n\n<\/script>",f='\x3c!--index.html file--\x3e\n\n<script>\n    //////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, model ID, and concept IDs.\n    // Change these strings to run your own example.\n    /////////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = "YOUR_USER_ID_HERE";\n    // Your PAT (Personal Access Token) can be found in the Account\'s Security section\n    const PAT = "YOUR_PAT_HERE";\n    const APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to train your own model\n    const MODEL_ID = "petsID";\n    const CONCEPT_ID_1 = "ferrari23";\n    const CONCEPT_ID_2 = "outdoors23";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        "user_app_id": {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        "model_versions": [{\n            "train_info": {\n                "params": {\n                    "template": "MMClassification_ResNet_50_RSB_A1",\n                    "num_epochs": 2\n                }\n            },\n            "output_info": {\n                "data": {\n                    "concepts": [\n                        {\n                            "id": CONCEPT_ID_1\n                        },\n                        {\n                            "id": CONCEPT_ID_2\n                        }\n                    ]\n                }\n            }\n        }]\n\n    });\n\n    const requestOptions = {\n        method: "POST",\n        headers: {\n            "Content-Type": "application/json",\n            "Authorization": "Key " + PAT\n        },\n        body: raw\n    };\n\n    fetch(`https://api.clarifai.com/v2/models/${MODEL_ID}/versions`, requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log("error", error));\n\n<\/script>',g="\x3c!--index.html file--\x3e\n\n<script>\n    ////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and model type ID. \n    // Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////////////////////////  \n\n    const USER_ID = 'YOUR_USER_ID_HERE';\n    // Your PAT (Personal Access Token) can be found in the Account's Security section\n    const PAT = 'YOUR_PAT_HERE';\n    const APP_ID = 'YOUR_APP_ID_HERE';\n    // Change this to list the template types of your preferred model \n    const MODEL_TYPE = 'visual-classifier';\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const requestOptions = {\n        method: 'GET',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        }\n    };\n\n    fetch(`https://api.clarifai.com/v2/users/${USER_ID}/apps/${APP_ID}/models/types?per_page=20&page=1`, requestOptions)\n        .then(response => response.json())\n        .then(result => {\n            console.log('Clarifai API Response:', result);\n\n            result.model_types.forEach(modelType => {\n                if (modelType.id === MODEL_TYPE) {\n                    modelType.model_type_fields.forEach(modelTypeField => {\n                        if (modelTypeField.path.split('.').slice(-1)[0] === 'template') {\n                            modelTypeField.model_type_enum_options.forEach(template => {\n                                console.log('Template:', template);\n                            });\n                        }\n                    });\n                }\n            });\n        })\n        .catch(error => console.error('Clarifai API Error:', error));\n\n\n<\/script>",y='\x3c!--index.html file--\x3e\n\n<script>\n    ///////////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, model ID, and estimated input count.\n    // Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = "YOUR_USER_ID_HERE";\n    // Your PAT (Personal Access Token) can be found in the Account\'s Security section\n    const PAT = "YOUR_PAT_HERE";\n    const APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to get your training time estimate\n    const MODEL_ID = "YOUR_CUSTOM_MODEL_ID_HERE";\n    const ESTIMATED_INPUT_COUNT = 100;\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        "user_app_id": {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        "model_versions": [{\n            "train_info": {\n                "params": {\n                    "template": "MMDetection_FasterRCNN"\n                }\n            },\n\n        }],\n        "estimated_input_count": ESTIMATED_INPUT_COUNT\n\n    });\n\n    const requestOptions = {\n        method: "POST",\n        headers: {\n            "Content-Type": "application/json",\n            "Authorization": "Key " + PAT\n        },\n        body: raw\n    };\n\n    fetch(`https://api.clarifai.com/v2/users/${USER_ID}/apps/${APP_ID}/models/${MODEL_ID}/versions/time_estimate/`, requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log("error", error));\n\n<\/script>',E='\x3c!--index.html file--\x3e\n\n<script>\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and details for incremental training.\n    // Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = "YOUR_USER_ID_HERE";\n    // Your PAT (Personal Access Token) can be found in the Account\'s Security section\n    const PAT = "YOUR_PAT_HERE";\n    const APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to incrementally train your own model\n    const MODEL_ID = "detection-test";\n    const MODEL_VERSION_ID = "5af1bd0fb79d47289ab82d5bb2325c81";\n    const CONCEPT_ID = "face";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        "user_app_id": {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        "model_versions": [{\n            "train_info": {\n                "params": {\n                    "template": "MMDetection_SSD",\n                    "num_epochs": 1\n                },\n                "resume_from_model": {\n                    "id": MODEL_ID,\n                    "model_version": {\n                        "id": MODEL_VERSION_ID\n                    }\n                }\n            },\n            "output_info": {\n                "data": {\n                    "concepts": [\n                        {\n                            "id": CONCEPT_ID\n                        }\n                    ]\n                }\n            }\n        }]\n\n    });\n\n    const requestOptions = {\n        method: "POST",\n        headers: {\n            "Content-Type": "application/json",\n            "Authorization": "Key " + PAT\n        },\n        body: raw\n    };\n\n    fetch(`https://api.clarifai.com/v2/models/${MODEL_ID}/versions`, requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log("error", error));\n\n<\/script>\n',b='//index.js file\n\n////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, model ID, and model type ID.\n// Change these strings to run your own example.\n///////////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n// Change these to create your own model\nconst MODEL_ID = \'petsID\';\nconst MODEL_TYPE_ID = \'visual-classifier\';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PostModels(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        models: [\n            {\n                id: MODEL_ID,\n                model_type_id: MODEL_TYPE_ID               \n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post models failed, status: " + response.status.description);\n        }\n    }\n);',v='//index.js file\n\n///////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and model type ID. \n// Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = "YOUR_PAT_HERE";\nconst APP_ID = "YOUR_APP_ID_HERE";\n// Change this to list the template types of your preferred model \nconst MODEL_TYPE = "visual-classifier";\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.ListModelTypes(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        page: 1,\n        per_page: 500\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Received status: " + response.status.description + "\\n" + response.status.details);\n        }\n\n        response.model_types.forEach((modelType) => {\n            if (modelType.id === MODEL_TYPE) {\n                modelType.model_type_fields.forEach((modelTypeField) => {\n                    if (modelTypeField.path.split(\'.\').pop() === \'template\') {\n                        modelTypeField.model_type_enum_options.forEach((template) => {\n                            console.log(template);\n                        });\n                    }\n                });\n            }\n        });\n\n    }\n);',I='package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    ////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, model ID, and model type ID.\n    // Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to create your own model    \n    static final String MODEL_ID = "petsID";\n    static final String MODEL_TYPE_ID = "visual-classifier";\n    \n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\t\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        SingleModelResponse postModelsResponse = stub.postModels(\n            PostModelsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .addModels(\n                Model.newBuilder()\n                .setId(MODEL_ID)\n                .setModelTypeId(MODEL_TYPE_ID)              \n            ).build()\n        );\n\n        if (postModelsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post models failed, status: " + postModelsResponse.getStatus());\n        }\n\n    }\n\n}',A='package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.status.StatusCode;\nimport com.google.protobuf.Struct;\nimport com.google.protobuf.Value;\n\npublic class ClarifaiExample {\n\n    //////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, model ID, and concept IDs.\n    // Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    // Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to train your own model\n    static final String MODEL_ID = "petsID";\n    static final String CONCEPT_ID_1 = "ferrari23";\n    static final String CONCEPT_ID_2 = "outdoors23";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\t\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n                .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        Struct.Builder params = Struct.newBuilder()\n                .putFields("template", Value.newBuilder().setStringValue("MMClassification_ResNet_50_RSB_A1").build())\n                .putFields("num_epochs", Value.newBuilder().setNumberValue(2).build());\n\n        SingleModelResponse postModelVersionsResponse = stub.postModelVersions(\n                PostModelVersionsRequest.newBuilder()\n                        .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n                        .setModelId(MODEL_ID)\n                        .addModelVersions(ModelVersion.newBuilder()\n                                .setTrainInfo(TrainInfo.newBuilder()\n                                        .setParams(params)\n                                )\n                                .setOutputInfo(OutputInfo.newBuilder()\n                                        .setData(Data.newBuilder()\n                                                .addConcepts(Concept.newBuilder()\n                                                        .setId(CONCEPT_ID_1)\n                                                )\n                                                .addConcepts(Concept.newBuilder()\n                                                        .setId(CONCEPT_ID_2)\n                                                )\n                                        )\n                                )\n                        )\n                        .build()\n        );\n\n        if (postModelVersionsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post model outputs failed, status: " + postModelVersionsResponse.getStatus());\n        }\n\n    }\n}\n',T='package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.StatusCode;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\n\npublic class ClarifaiExample {\n\n    //////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and model type ID. \n    // Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change this to list the template types of your preferred model \n    static final String MODEL_TYPE = "visual-classifier";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n                .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiModelTypeResponse listModelTypesResponse = stub.listModelTypes(\n                ListModelTypesRequest.newBuilder()\n                        .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n                        .build()\n        );\n\n        if (listModelTypesResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("List models failed, status: " + listModelTypesResponse.getStatus());\n        }\n\n        for (ModelType modelType : listModelTypesResponse.getModelTypesList()) {\n            if (modelType.getId().equals(MODEL_TYPE)) {\n                for (ModelTypeField modelTypeField : modelType.getModelTypeFieldsList()) {\n                    if (modelTypeField.getPath().split("\\\\.")[modelTypeField.getPath().split("\\\\.").length - 1]\n                            .equals("template")) {\n                        for (ModelTypeEnumOption template : modelTypeField.getModelTypeEnumOptionsList()) {\n                            System.out.println(template);\n                        }\n                    }\n                }\n            }\n        }\n\n    }\n\n}\n',D='package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.status.StatusCode;\nimport com.google.protobuf.Struct;\nimport com.google.protobuf.Value;\n\npublic class ClarifaiExample {\n\n    //////////////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, model ID, and estimated input count.\n    // Change these strings to run your own example.\n    /////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    // Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to get your training time estimate\n    static final String MODEL_ID = "YOUR_CUSTOM_MODEL_ID_HERE";\n    static final int ESTIMATED_INPUT_COUNT = 100;\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\t\n\n    public static void main(String[] args) {\n        \n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n                .withCallCredentials(new ClarifaiCallCredentials(PAT));\n        \n        Struct.Builder params = Struct.newBuilder()\n                .putFields("template", Value.newBuilder().setStringValue("MMDetection_FasterRCNN").build());\n        \n        MultiTrainingTimeEstimateResponse trainingTimeEstimateResponse = stub.postModelVersionsTrainingTimeEstimate(\n                PostModelVersionsTrainingTimeEstimateRequest.newBuilder()\n                        .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n                        .setModelId(MODEL_ID)\n                        .addModelVersions(ModelVersion.newBuilder()\n                                .setTrainInfo(TrainInfo.newBuilder()\n                                        .setParams(params)\n                                )\n                        )\n                        .setEstimatedInputCount(ESTIMATED_INPUT_COUNT)\n                        .build()\n        );\n        \n        if (trainingTimeEstimateResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post model outputs failed, status: " + trainingTimeEstimateResponse.getStatus());\n        }\n        \n        System.out.print(trainingTimeEstimateResponse);\n        \n    }\n}\n',R='package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.status.StatusCode;\nimport com.google.protobuf.Struct;\nimport com.google.protobuf.Value;\n\npublic class ClarifaiExample {\n\n    //////////////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and details for incremental training.\n    // Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    // Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to incrementally train your own model\n    static final String MODEL_ID = "detection-test";\n    static final String MODEL_VERSION_ID = "5af1bd0fb79d47289ab82d5bb2325c81";\n    static final String CONCEPT_ID = "face";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\t\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n                .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        Struct.Builder params = Struct.newBuilder()\n                .putFields("template", Value.newBuilder().setStringValue("MMDetection_SSD").build())\n                .putFields("num_epochs", Value.newBuilder().setNumberValue(1).build());\n\n        SingleModelResponse postModelVersionsResponse = stub.postModelVersions(\n                PostModelVersionsRequest.newBuilder()\n                        .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n                        .setModelId(MODEL_ID)\n                        .addModelVersions(ModelVersion.newBuilder()\n                                .setTrainInfo(TrainInfo.newBuilder()\n                                        .setParams(params)\n                                        .setResumeFromModel(Model.newBuilder()\n                                                .setId(MODEL_ID)\n                                                .setModelVersion(ModelVersion.newBuilder()\n                                                        .setId(MODEL_VERSION_ID)\n                                                )\n                                        )\n                                )\n                                .setOutputInfo(OutputInfo.newBuilder()\n                                        .setData(Data.newBuilder()\n                                                .addConcepts(Concept.newBuilder()\n                                                        .setId(CONCEPT_ID)\n                                                )\n                                        )\n                                )\n                        )\n                        .build()\n        );\n\n        if (postModelVersionsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post model outputs failed, status: " + postModelVersionsResponse.getStatus());\n        }\n\n    }\n}\n',N='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n/////////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, model ID, and model type ID.\n// Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change these to create your own model\n$MODEL_ID = "petsID";\n$MODEL_TYPE_ID = "visual-classifier";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\Model;\nuse Clarifai\\Api\\PostModelsRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID,\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PostModels(\n        // The request object carries the request along with the request status and other metadata related to the request itself\n        new PostModelsRequest([\n            "user_app_id" => $userDataObject,\n            "models" => [\n                new Model([                    \n                    "id" => $MODEL_ID,\n                    "model_type_id" => $MODEL_TYPE_ID,\n                ]),\n            ],\n        ]),\n        $metadata\n    )->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure\n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription() . " " . $response->getStatus()->getDetails());\n}\n\n?>',P='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n///////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and model type ID. \n// Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change this to list the template types of your preferred model \n$MODEL_TYPE = "visual-classifier";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\ListModelTypesRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID,\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->ListModelTypes(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new ListModelTypesRequest([\n        "user_app_id" => $userDataObject\n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure\n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription() . " " . $response->getStatus()->getDetails());\n}\n\nforeach ($response->getModelTypes() as $modelType) {\n    if ($modelType->getId() === $MODEL_TYPE) {\n        foreach ($modelType->getModelTypeFields() as $modelTypeField) {\n            $pathComponents = explode(\'.\', $modelTypeField->getPath());\n            if (end($pathComponents) === \'template\') {\n                foreach ($modelTypeField->getModelTypeEnumOptions() as $template) {\n                    echo $template->serializeToJsonString() . "\\n";\n                }\n            }\n        }\n    }\n}\n',O='curl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/models" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "model": {\n      "id": "petsID",\n      "model_type_id": "visual-classifier"\n    }\n  }\'',S='curl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/models/YOUR_MODEL_ID_HERE/versions" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n        "model_versions": [{\n            "train_info": {\n                "params": {\n                    "template": "MMClassification_ResNet_50_RSB_A1",\n                    "num_epochs": 2\n                }\n            },\n            "output_info": {\n                "data": {\n                    "concepts": [\n                        {\n                            "id": "ferrari23"\n                        },\n                        {\n                            "id": "outdoors23"\n                        }\n                    ]\n                }\n            }\n        }] \n  }\'',C='curl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/models/YOUR_MODEL_ID_HERE/versions/time_estimate/" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n        "model_versions": [{\n            "train_info": {\n                "params": {\n                    "template": "MMDetection_FasterRCNN"                    \n                }\n            }\n        }],\n        "estimated_input_count": 100\n  }\'',x='curl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/models/detection-test/versions" \\\n-H "Authorization: Key YOUR_PAT_HERE" \\\n-H "Content-Type: application/json" \\\n-d \'{\n"model_versions": [{\n    "train_info": {\n        "params": {\n            "template": "MMDetection_SSD",\n            "num_epochs": 1\n        },\n        "resume_from_model": {\n            "id": "detection-test",\n            "model_version": {\n                "id": "5af1bd0fb79d47289ab82d5bb2325c81"\n            }\n        }\n    },\n    "output_info": {\n        "data": {\n            "concepts": [\n                {\n                    "id": "face"\n                }\n            ]\n        }\n    }\n}] \n}\'\n',w='model_type_fields {\n  path: "train_info.params.num_gpus"\n  field_type: RANGE\n  default_value {\n    number_value: 1.0\n  }\n  description: "[internal_only] the number of gpus to train with."\n  placeholder: "num_gpus"\n  internal_only: true\n  model_type_range_info {\n    max: 1.0\n    step: 1.0\n  }\n}\nmodel_type_fields {\n  path: "train_info.params.logreg"\n  field_type: RANGE\n  default_value {\n    number_value: 1.0\n  }\n  description: "Whether to use sigmoid units (logreg=1) or softmax (logreg=0)."\n  placeholder: "logreg"\n  internal_only: true\n  model_type_range_info {\n    max: 1.0\n    step: 1.0\n  }\n}\nmodel_type_fields {\n  path: "train_info.params.image_size"\n  field_type: RANGE\n  default_value {\n    number_value: 256.0\n  }\n  description: "Input image size (minimum side dimension)."\n  placeholder: "image_size"\n  internal_only: true\n  model_type_range_info {\n    min: 32.0\n    max: 1024.0\n    step: 16.0\n  }\n}\nmodel_type_fields {\n  path: "train_info.params.batch_size"\n  field_type: RANGE\n  default_value {\n    number_value: 128.0\n  }\n  description: "the batch size to use during training."\n  placeholder: "batch_size"\n  internal_only: true\n  model_type_range_info {\n    min: 1.0\n    max: 128.0\n    step: 1.0\n  }\n}\nmodel_type_fields {\n  path: "train_info.params.lrate"\n  field_type: NUMBER\n  default_value {\n    number_value: 0.1\n  }\n  description: "the learning rate (per minibatch)"\n  placeholder: "lrate"\n  internal_only: true\n}\nmodel_type_fields {\n  path: "train_info.params.base_gradient_multiplier"\n  field_type: NUMBER\n  default_value {\n    number_value: 0.001\n  }\n  description: "learning rate multipler applied to the pre-initialized backbone model weights"\n  placeholder: "base_gradient_multiplier"\n  internal_only: true\n}\nmodel_type_fields {\n  path: "train_info.params.num_epochs"\n  field_type: RANGE\n  default_value {\n    number_value: 20.0\n  }\n  description: "the total number of epochs to train for."\n  placeholder: "num_epochs"\n  internal_only: true\n  model_type_range_info {\n    min: 1.0\n    max: 200.0\n    step: 1.0\n  }\n}\nmodel_type_fields {\n  path: "train_info.params.num_items_per_epoch"\n  field_type: NUMBER\n  default_value {\n    number_value: 0.0\n  }\n  description: "number of input images that constitute an \\"epoch\\".  Default is the number of images in the dataset."\n  placeholder: "num_items_per_epoch"\n  internal_only: true\n}\nmodel_type_fields {\n  path: "train_info.params.embeddings_layer"\n  field_type: STRING\n  default_value {\n    string_value: "mod5B.concat"\n  }\n  description: "the embedding layer to use as output from this model."\n  placeholder: "embeddings_layer"\n  internal_only: true\n}\nmodel_type_fields {\n  path: "train_info.params.average_horizontal_flips"\n  field_type: BOOLEAN\n  default_value {\n    bool_value: true\n  }\n  description: "if true then average the embeddings from the image and a horizontal flip of the image to get the final embedding vectors to output."\n  placeholder: "average_horizontal_flips"\n  internal_only: true\n}\ninternal_only: true\n\nid: "classification_basemodel_v1"\ndescription: "A training template that uses Clarifais training implementation. "\nmodel_type_fields {\n  path: "train_info.params.num_gpus"\n  field_type: RANGE\n  default_value {\n    number_value: 1.0\n  }\n  description: "[internal_only] the number of gpus to train with."\n  placeholder: "num_gpus"\n  internal_only: true\n  model_type_range_info {\n    max: 1.0\n    step: 1.0\n  }\n}\nmodel_type_fields {\n  path: "train_info.params.model_cfg"\n  field_type: STRING\n  default_value {\n    string_value: "resnext"\n  }\n  description: "the underlying model configuration to use."\n  placeholder: "model_cfg"\n  internal_only: true\n}\nmodel_type_fields {\n  path: "train_info.params.preinit"\n  field_type: STRING\n  default_value {\n    string_value: "general-v1.5"\n  }\n  description: "specifies pre-initialized net to use."\n  placeholder: "preinit"\n  internal_only: true\n}\nmodel_type_fields {\n  path: "train_info.params.logreg"\n  field_type: NUMBER\n  default_value {\n    number_value: 1.0\n  }\n  description: "Whether to use sigmoid units (logreg=1) or softmax (logreg=0)."\n  placeholder: "logreg"\n  internal_only: true\n}\nmodel_type_fields {\n  path: "train_info.params.image_size"\n  field_type: RANGE\n  default_value {\n    number_value: 256.0\n  }\n  description: "Input image size (minimum side dimension)."\n  placeholder: "image_size"\n  internal_only: true\n  model_type_range_info {\n    min: 32.0\n    max: 1024.0\n    step: 16.0\n  }\n}\nmodel_type_fields {\n  path: "train_info.params.batch_size"\n  field_type: RANGE\n  default_value {\n    number_value: 64.0\n  }\n  description: "the batch size to use during training."\n  placeholder: "batch_size"\n  internal_only: true\n  model_type_range_info {\n    min: 1.0\n    max: 128.0\n    step: 1.0\n  }\n}\nmodel_type_fields {\n  path: "train_info.params.init_epochs"\n  field_type: RANGE\n  default_value {\n    number_value: 25.0\n  }\n  description: "number of epochs to run at the initial learning rate."\n  placeholder: "init_epochs"\n  internal_only: true\n  model_type_range_info {\n    min: 1.0\n    max: 200.0\n    step: 1.0\n  }\n}\nmodel_type_fields {\n  path: "train_info.params.step_epochs"\n  field_type: RANGE\n  default_value {\n    number_value: 7.0\n  }\n  description: "the number of epochs between learning rate decreases."\n  placeholder: "step_epochs"\n  internal_only: true\n  model_type_range_info {\n    min: 1.0\n    max: 200.0\n    step: 1.0\n  }\n}\nmodel_type_fields {\n  path: "train_info.params.num_epochs"\n  field_type: RANGE\n  default_value {\n    number_value: 65.0\n  }\n  description: "the total number of epochs to train for."\n  placeholder: "num_epochs"\n  internal_only: true\n  model_type_range_info {\n    min: 1.0\n    max: 200.0\n    step: 1.0\n  }\n}\nmodel_type_fields {\n  path: "train_info.params.per_item_lrate"\n  field_type: NUMBER\n  default_value {\n    number_value: 7.8125e-05\n  }\n  description: "the initial learning rate per item. The overall learning rate (per step) is set to lrate = batch_size * per_item_lrate"\n  placeholder: "per_item_lrate"\n  internal_only: true\n}\nmodel_type_fields {\n  path: "train_info.params.num_items_per_epoch"\n  field_type: NUMBER\n  default_value {\n    number_value: 0.0\n  }\n  description: "number of input images that constitute an \\"epoch\\".  Default is the number of images in the dataset."\n  placeholder: "num_items_per_epoch"\n  internal_only: true\n}\nmodel_type_fields {\n  path: "train_info.params.inference_crop_type"\n  field_type: STRING\n  default_value {\n    string_value: "sorta2"\n  }\n  description: "the crop type to use for inference (used when evaluating the model)."\n  placeholder: "inference_crop_type"\n  internal_only: true\n}\ninternal_only: true\n\nid: "classification_cifar10_v1"\ndescription: "A runner optimized for cifar10 training. Not to be used in real use cases. "\nmodel_type_fields {\n  path: "train_info.params.num_gpus"\n  field_type: RANGE\n  default_value {\n    number_value: 1.0\n  }\n  description: "the number of gpus to train with."\n  placeholder: "num_gpus"\n  internal_only: true\n  model_type_range_info {\n    max: 1.0\n    step: 1.0\n  }\n}\nmodel_type_fields {\n  path: "train_info.params.image_size"\n  field_type: RANGE\n  default_value {\n    number_value: 32.0\n  }\n  description: "the image size to train on. This is for the minimum dimension."\n  placeholder: "image_size"\n  internal_only: true\n  model_type_range_info {\n    min: 32.0\n    max: 1024.0\n    step: 16.0\n  }\n}\nmodel_type_fields {\n  path: "train_info.params.batch_size"\n  field_type: RANGE\n  default_value {\n    number_value: 128.0\n  }\n  description: "the batch size to use during training."\n  placeholder: "batch_size"\n  internal_only: true\n  model_type_range_info {\n    min: 1.0\n    max: 128.0\n    step: 1.0\n  }\n}\nmodel_type_fields {\n  path: "train_info.params.num_epochs"\n  field_type: RANGE\n  default_value {\n    number_value: 65.0\n  }\n  description: "the total number of epochs to train for."\n  placeholder: "num_epochs"\n  internal_only: true\n  model_type_range_info {\n    min: 1.0\n    max: 200.0\n    step: 1.0\n  }\n}\nmodel_type_fields {\n  path: "train_info.params.inference_crop_type"\n  field_type: STRING\n  default_value {\n    string_value: "sorta2"\n  }\n  description: "the crop type to use for inference (used when evaluating the model)."\n  placeholder: "inference_crop_type"\n  internal_only: true\n}\ninternal_only: true\n\nid: "Clarifai_InceptionTransferEmbedNorm"\ndescription: "A custom visual classifier template inspired by Inception networks and tuned for speed with\\nother optimizations for transfer learning. "\nmodel_type_fields {\n  path: "train_info.params.logreg"\n  field_type: RANGE\n  default_value {\n    number_value: 1.0\n  }\n  description: "Whether to use sigmoid units (logreg=1) or softmax (logreg=0)."\n  placeholder: "logreg"\n  model_type_range_info {\n    max: 1.0\n    step: 1.0\n  }\n}\nmodel_type_fields {\n  path: "train_info.params.image_size"\n  field_type: RANGE\n  default_value {\n    number_value: 256.0\n  }\n  description: "Input image size (minimum side dimension)."\n  placeholder: "image_size"\n  model_type_range_info {\n    min: 32.0\n    max: 1024.0\n    step: 16.0\n  }\n}\nmodel_type_fields {\n  path: "train_info.params.batch_size"\n  field_type: RANGE\n  default_value {\n    number_value: 128.0\n  }\n  description: "the batch size to use during training."\n  placeholder: "batch_size"\n  model_type_range_info {\n    min: 1.0\n    max: 128.0\n    step: 1.0\n  }\n}\nmodel_type_fields {\n  path: "train_info.params.lrate"\n  field_type: NUMBER\n  default_value {\n    number_value: 0.1\n  }\n  description: "the learning rate (per minibatch)"\n  placeholder: "lrate"\n}\nmodel_type_fields {\n  path: "train_info.params.base_gradient_multiplier"\n  field_type: NUMBER\n  default_value {\n    number_value: 0.001\n  }\n  description: "learning rate multipler applied to the pre-initialized backbone model weights"\n  placeholder: "base_gradient_multiplier"\n}\nmodel_type_fields {\n  path: "train_info.params.num_epochs"\n  field_type: RANGE\n  default_value {\n    number_value: 20.0\n  }\n  description: "the total number of epochs to train for."\n  placeholder: "num_epochs"\n  model_type_range_info {\n    min: 1.0\n    max: 200.0\n    step: 1.0\n  }\n}\nmodel_type_fields {\n  path: "train_info.params.num_items_per_epoch"\n  field_type: NUMBER\n  default_value {\n    number_value: 0.0\n  }\n  description: "number of input images that constitute an \\"epoch\\".  Default is the number of images in the dataset."\n  placeholder: "num_items_per_epoch"\n}\nmodel_type_fields {\n  path: "train_info.params.average_horizontal_flips"\n  field_type: BOOLEAN\n  default_value {\n    bool_value: true\n  }\n  description: "if true then average the embeddings from the image and a horizontal flip of the image to get the final embedding vectors to output."\n  placeholder: "average_horizontal_flips"\n}\n\nid: "Clarifai_ResNext"\ndescription: "A custom visual classifier template inspired by ResNext networks. "\nmodel_type_fields {\n  path: "train_info.params.logreg"\n  field_type: RANGE\n  default_value {\n    number_value: 1.0\n  }\n  description: "Whether to use sigmoid units (logreg=1) or softmax (logreg=0)."\n  placeholder: "logreg"\n  model_type_range_info {\n    max: 1.0\n    step: 1.0\n  }\n}\nmodel_type_fields {\n  path: "train_info.params.image_size"\n  field_type: RANGE\n  default_value {\n    number_value: 256.0\n  }\n  description: "Input image size (minimum side dimension)."\n  placeholder: "image_size"\n  model_type_range_info {\n    min: 32.0\n    max: 1024.0\n    step: 16.0\n  }\n}\nmodel_type_fields {\n  path: "train_info.params.batch_size"\n  field_type: RANGE\n  default_value {\n    number_value: 64.0\n  }\n  description: "the batch size to use during training."\n  placeholder: "batch_size"\n  model_type_range_info {\n    min: 1.0\n    max: 128.0\n    step: 1.0\n  }\n}\nmodel_type_fields {\n  path: "train_info.params.init_epochs"\n  field_type: RANGE\n  default_value {\n    number_value: 25.0\n  }\n  description: "number of epochs to run at the initial learning rate."\n  placeholder: "init_epochs"\n  model_type_range_info {\n    min: 1.0\n    max: 200.0\n    step: 1.0\n  }\n}\nmodel_type_fields {\n  path: "train_info.params.step_epochs"\n  field_type: RANGE\n  default_value {\n    number_value: 7.0\n  }\n  description: "the number of epochs between learning rate decreases."\n  placeholder: "step_epochs"\n  model_type_range_info {\n    min: 1.0\n    max: 200.0\n    step: 1.0\n  }\n}\nmodel_type_fields {\n  path: "train_info.params.num_epochs"\n  field_type: RANGE\n  default_value {\n    number_value: 65.0\n  }\n  description: "the total number of epochs to train for."\n  placeholder: "num_epochs"\n  model_type_range_info {\n    min: 1.0\n    max: 200.0\n    step: 1.0\n  }\n}\nmodel_type_fields {\n  path: "train_info.params.per_item_lrate"\n  field_type: NUMBER\n  default_value {\n    number_value: 7.8125e-05\n  }\n  description: "the initial learning rate per item. The overall learning rate (per step) is set to lrate = batch_size * per_item_lrate"\n  placeholder: "per_item_lrate"\n}\nmodel_type_fields {\n  path: "train_info.params.num_items_per_epoch"\n  field_type: NUMBER\n  default_value {\n    number_value: 0.0\n  }\n  description: "number of input images that constitute an \\"epoch\\".  Default is the number of images in the dataset."\n  placeholder: "num_items_per_epoch"\n}\n\nid: "Clarifai_InceptionV2"\ndescription: "A custom visual classifier template inspired by Inception-V2 networks. "\nmodel_type_fields {\n  path: "train_info.params.logreg"\n  field_type: RANGE\n  default_value {\n    number_value: 1.0\n  }\n  description: "Whether to use sigmoid units (logreg=1) or softmax (logreg=0)."\n  placeholder: "logreg"\n  model_type_range_info {\n    max: 1.0\n    step: 1.0\n  }\n}\nmodel_type_fields {\n  path: "train_info.params.image_size"\n  field_type: RANGE\n  default_value {\n    number_value: 256.0\n  }\n  description: "Input image size (minimum side dimension)."\n  placeholder: "image_size"\n  model_type_range_info {\n    min: 32.0\n    max: 1024.0\n    step: 16.0\n  }\n}\nmodel_type_fields {\n  path: "train_info.params.batch_size"\n  field_type: RANGE\n  default_value {\n    number_value: 64.0\n  }\n  description: "the batch size to use during training."\n  placeholder: "batch_size"\n  model_type_range_info {\n    min: 1.0\n    max: 128.0\n    step: 1.0\n  }\n}\nmodel_type_fields {\n  path: "train_info.params.init_epochs"\n  field_type: RANGE\n  default_value {\n    number_value: 25.0\n  }\n  description: "number of epochs to run at the initial learning rate."\n  placeholder: "init_epochs"\n  model_type_range_info {\n    min: 1.0\n    max: 200.0\n    step: 1.0\n  }\n}\nmodel_type_fields {\n  path: "train_info.params.step_epochs"\n  field_type: RANGE\n  default_value {\n    number_value: 7.0\n  }\n  description: "the number of epochs between learning rate decreases."\n  placeholder: "step_epochs"\n  model_type_range_info {\n    min: 1.0\n    max: 200.0\n    step: 1.0\n  }\n}\nmodel_type_fields {\n  path: "train_info.params.num_epochs"\n  field_type: RANGE\n  default_value {\n    number_value: 65.0\n  }\n  description: "the total number of epochs to train for."\n  placeholder: "num_epochs"\n  model_type_range_info {\n    min: 1.0\n    max: 200.0\n    step: 1.0\n  }\n}\nmodel_type_fields {\n  path: "train_info.params.per_item_lrate"\n  field_type: NUMBER\n  default_value {\n    number_value: 7.8125e-05\n  }\n  description: "the initial learning rate per item. The overall learning rate (per step) is set to lrate = batch_size * per_item_lrate"\n  placeholder: "per_item_lrate"\n}\nmodel_type_fields {\n  path: "train_info.params.num_items_per_epoch"\n  field_type: NUMBER\n  default_value {\n    number_value: 0.0\n  }\n  description: "number of input images that constitute an \\"epoch\\".  Default is the number of images in the dataset."\n  placeholder: "num_items_per_epoch"\n}\n\nid: "Clarifai_InceptionBatchNorm"\ndescription: "A custom visual classifier template inspired by Inception networks tuned for speed. "\nmodel_type_fields {\n  path: "train_info.params.logreg"\n  field_type: RANGE\n  default_value {\n    number_value: 1.0\n  }\n  description: "Whether to use sigmoid units (logreg=1) or softmax (logreg=0)."\n  placeholder: "logreg"\n  model_type_range_info {\n    max: 1.0\n    step: 1.0\n  }\n}\nmodel_type_fields {\n  path: "train_info.params.image_size"\n  field_type: RANGE\n  default_value {\n    number_value: 256.0\n  }\n  description: "Input image size (minimum side dimension)."\n  placeholder: "image_size"\n  model_type_range_info {\n    min: 32.0\n    max: 1024.0\n    step: 16.0\n  }\n}\nmodel_type_fields {\n  path: "train_info.params.batch_size"\n  field_type: RANGE\n  default_value {\n    number_value: 64.0\n  }\n  description: "the batch size to use during training."\n  placeholder: "batch_size"\n  model_type_range_info {\n    min: 1.0\n    max: 128.0\n    step: 1.0\n  }\n}\nmodel_type_fields {\n  path: "train_info.params.init_epochs"\n  field_type: RANGE\n  default_value {\n    number_value: 25.0\n  }\n  description: "number of epochs to run at the initial learning rate."\n  placeholder: "init_epochs"\n  model_type_range_info {\n    min: 1.0\n    max: 200.0\n    step: 1.0\n  }\n}\nmodel_type_fields {\n  path: "train_info.params.step_epochs"\n  field_type: RANGE\n  default_value {\n    number_value: 7.0\n  }\n  description: "the number of epochs between learning rate decreases."\n  placeholder: "step_epochs"\n  model_type_range_info {\n    min: 1.0\n    max: 200.0\n    step: 1.0\n  }\n}\nmodel_type_fields {\n  path: "train_info.params.num_epochs"\n  field_type: RANGE\n  default_value {\n    number_value: 65.0\n  }\n  description: "the total number of epochs to train for."\n  placeholder: "num_epochs"\n  model_type_range_info {\n    min: 1.0\n    max: 200.0\n    step: 1.0\n  }\n}\nmodel_type_fields {\n  path: "train_info.params.per_item_lrate"\n  field_type: NUMBER\n  default_value {\n    number_value: 7.8125e-05\n  }\n  description: "the initial learning rate per item. The overall learning rate (per step) is set to lrate = batch_size * per_item_lrate"\n  placeholder: "per_item_lrate"\n}\nmodel_type_fields {\n  path: "train_info.params.num_items_per_epoch"\n  field_type: NUMBER\n  default_value {\n    number_value: 0.0\n  }\n  description: "number of input images that constitute an \\"epoch\\".  Default is the number of images in the dataset."\n  placeholder: "num_items_per_epoch"\n}\n\nid: "MMClassification"\ndescription: "A training template that uses the MMClassification toolkit and a custom configuration "\nmodel_type_fields {\n  path: "train_info.params.seed"\n  field_type: NUMBER\n  default_value {\n    number_value: -1.0\n  }\n  description: "[internal_only] the random seed to init training. If seed < 0, it is not set"\n  placeholder: "seed"\n  internal_only: true\n}\nmodel_type_fields {\n  path: "train_info.params.custom_config"\n  field_type: PYTHON_CODE\n  default_value {\n    string_value: "\\n_base_ = \\\'/mmclassification/configs/resnext/resnext101_32x4d_b32x8_imagenet.py\\\'\\nrunner = dict(type=\\\'EpochBasedRunner\\\', max_epochs=60)\\ndata = dict(\\n    train=dict(\\n        data_prefix=\\\'\\\',\\n        ann_file=\\\'\\\',\\n        classes=\\\'\\\'),\\n    val=dict(\\n        data_prefix=\\\'\\\',\\n        ann_file=\\\'\\\',\\n        classes=\\\'\\\'))\\n"\n  }\n  description: "custom mmclassification config, in python config file format. Note that the \\\'_base_\\\' field, if used, should be a config file relative to the parent directory \\\'/mmclassification/\\\', e.g. \\"_base_ = \\\'/mmclassification/configs/efficientnet/efficientnet-b8_8xb32-01norm_in1k.py\\\'\\". The \\\'num_classes\\\' field must be included somewhere in the config. The \\\'data\\\' section should include \\\'train\\\' and \\\'val\\\' sections, each with \\\'ann_file\\\', \\\'data_prefix\\\', and \\\'classes\\\' fields with empty strings as values. These values will be overwritten to be compatible with Clarifai\\\'s system, but must be included in the imported config."\n  placeholder: "custom_config"\n}\nmodel_type_fields {\n  path: "train_info.params.concepts_mutually_exclusive"\n  field_type: BOOLEAN\n  default_value {\n    bool_value: false\n  }\n  description: "whether the concepts are mutually exclusive. If true then each input is expected to only be tagged with a single concept."\n  placeholder: "concepts_mutually_exclusive"\n}\nmodel_type_fields {\n  path: "train_info.params.num_gpus"\n  field_type: RANGE\n  default_value {\n    number_value: 1.0\n  }\n  description: "[internal_only] the number of gpus to train with."\n  placeholder: "num_gpus"\n  internal_only: true\n  model_type_range_info {\n    max: 1.0\n    step: 1.0\n  }\n}\nmodel_type_fields {\n  path: "train_info.params.image_size"\n  field_type: ARRAY_OF_NUMBERS\n  default_value {\n    list_value {\n      values {\n        number_value: 320.0\n      }\n    }\n  }\n  description: "the image size for inference (the training image size is defined in the mmcv config). If a single value, specifies the size of the min side."\n  placeholder: "image_size"\n}\n\nid: "MMClassification_EfficientNet"\ndescription: "A training template that uses the MMClassification toolkit and EfficientNet-B8 configuration "\nmodel_type_fields {\n  path: "train_info.params.seed"\n  field_type: NUMBER\n  default_value {\n    number_value: -1.0\n  }\n  description: "[internal_only] the random seed to init training. If seed < 0, we will not set it."\n  placeholder: "seed"\n  internal_only: true\n}\nmodel_type_fields {\n  path: "train_info.params.num_gpus"\n  field_type: RANGE\n  default_value {\n    number_value: 1.0\n  }\n  description: "[internal_only] the number of gpus to train with."\n  placeholder: "num_gpus"\n  internal_only: true\n  model_type_range_info {\n    max: 1.0\n    step: 1.0\n  }\n}\nmodel_type_fields {\n  path: "train_info.params.image_size"\n  field_type: NUMBER\n  default_value {\n    number_value: 336.0\n  }\n  description: "the image size for training and inference. EfficientNet works on square images."\n  placeholder: "image_size"\n  internal_only: true\n}\nmodel_type_fields {\n  path: "train_info.params.batch_size"\n  field_type: RANGE\n  default_value {\n    number_value: 4.0\n  }\n  description: "the batch size to use during training."\n  placeholder: "batch_size"\n  internal_only: true\n  model_type_range_info {\n    min: 1.0\n    max: 256.0\n    step: 1.0\n  }\n}\nmodel_type_fields {\n  path: "train_info.params.num_epochs"\n  field_type: RANGE\n  default_value {\n    number_value: 30.0\n  }\n  description: "the total number of epochs to train for."\n  placeholder: "num_epochs"\n  internal_only: true\n  model_type_range_info {\n    min: 1.0\n    max: 200.0\n    step: 1.0\n  }\n}\nmodel_type_fields {\n  path: "train_info.params.per_item_lrate"\n  field_type: NUMBER\n  default_value {\n    number_value: 0.000390625\n  }\n  description: "the initial learning rate per item. The overall learning rate (per step) is set to lrate = batch_size * per_item_lrate"\n  placeholder: "per_item_lrate"\n  internal_only: true\n}\nmodel_type_fields {\n  path: "train_info.params.weight_decay"\n  field_type: RANGE\n  default_value {\n    number_value: 0.0001\n  }\n  description: "the weight decay value"\n  placeholder: "weight_decay"\n  internal_only: true\n  model_type_range_info {\n    max: 1.0\n  }\n}\nmodel_type_fields {\n  path: "train_info.params.momentum"\n  field_type: RANGE\n  default_value {\n    number_value: 0.9\n  }\n  description: "the momentum value for the SGD optimizer"\n  placeholder: "momentum"\n  internal_only: true\n  model_type_range_info {\n    max: 1.0\n  }\n}\nmodel_type_fields {\n  path: "train_info.params.pretrained_weights"\n  field_type: ENUM\n  default_value {\n    string_value: "ImageNet-1k"\n  }\n  description: "whether to use pretrained weights."\n  placeholder: "pretrained_weights"\n  model_type_enum_options {\n    id: "None"\n  }\n  model_type_enum_options {\n    id: "ImageNet-1k"\n  }\n  internal_only: true\n}\nmodel_type_fields {\n  path: "train_info.params.flip_probability"\n  field_type: RANGE\n  default_value {\n    number_value: 0.5\n  }\n  description: "the probability an image will be flipped during training"\n  placeholder: "flip_probability"\n  internal_only: true\n  model_type_range_info {\n    max: 1.0\n  }\n}\nmodel_type_fields {\n  path: "train_info.params.flip_direction"\n  field_type: ENUM\n  default_value {\n    string_value: "horizontal"\n  }\n  description: "the direction to randomly flip during training."\n  placeholder: "flip_direction"\n  model_type_enum_options {\n    id: "horizontal"\n  }\n  model_type_enum_options {\n    id: "vertical"\n  }\n  internal_only: true\n}\nmodel_type_fields {\n  path: "train_info.params.concepts_mutually_exclusive"\n  field_type: BOOLEAN\n  default_value {\n    bool_value: false\n  }\n  description: "whether the concepts are mutually exclusive. If true then each input is expected to only be tagged with a single concept."\n  placeholder: "concepts_mutually_exclusive"\n  internal_only: true\n}\ninternal_only: true\n\nid: "MMClassification_ResNet_50_RSB_A1"\ndescription: "A training template that uses the MMClassification toolkit and ResNet-50 (rsb-a1) configuration "\nmodel_type_fields {\n  path: "train_info.params.seed"\n  field_type: NUMBER\n  default_value {\n    number_value: -1.0\n  }\n  description: "[internal_only] the random seed to init training. If seed < 0, we will not set it."\n  placeholder: "seed"\n  internal_only: true\n}\nmodel_type_fields {\n  path: "train_info.params.num_gpus"\n  field_type: RANGE\n  default_value {\n    number_value: 1.0\n  }\n  description: "[internal_only] the number of gpus to train with."\n  placeholder: "num_gpus"\n  internal_only: true\n  model_type_range_info {\n    max: 1.0\n    step: 1.0\n  }\n}\nmodel_type_fields {\n  path: "train_info.params.image_size"\n  field_type: NUMBER\n  default_value {\n    number_value: 224.0\n  }\n  description: "the image size for training and inference. ResNet uses square images."\n  placeholder: "image_size"\n}\nmodel_type_fields {\n  path: "train_info.params.batch_size"\n  field_type: RANGE\n  default_value {\n    number_value: 64.0\n  }\n  description: "the batch size to use during training."\n  placeholder: "batch_size"\n  model_type_range_info {\n    min: 1.0\n    max: 256.0\n    step: 1.0\n  }\n}\nmodel_type_fields {\n  path: "train_info.params.num_epochs"\n  field_type: RANGE\n  default_value {\n    number_value: 60.0\n  }\n  description: "the total number of epochs to train for."\n  placeholder: "num_epochs"\n  model_type_range_info {\n    min: 1.0\n    max: 600.0\n    step: 1.0\n  }\n}\nmodel_type_fields {\n  path: "train_info.params.per_item_lrate"\n  field_type: NUMBER\n  default_value {\n    number_value: 1.953125e-05\n  }\n  description: "the initial learning rate per item. The overall learning rate (per step) is set to lrate = batch_size * per_item_lrate"\n  placeholder: "per_item_lrate"\n}\nmodel_type_fields {\n  path: "train_info.params.weight_decay"\n  field_type: RANGE\n  default_value {\n    number_value: 0.01\n  }\n  description: "the weight decay value"\n  placeholder: "weight_decay"\n  model_type_range_info {\n    max: 1.0\n  }\n}\nmodel_type_fields {\n  path: "train_info.params.per_item_min_lrate"\n  field_type: NUMBER\n  default_value {\n    number_value: 1.5625e-08\n  }\n  description: "The minimum learning (per item) at end of training using cosine schedule."\n  placeholder: "per_item_min_lrate"\n}\nmodel_type_fields {\n  path: "train_info.params.warmup_iters"\n  field_type: NUMBER\n  default_value {\n    number_value: 100.0\n  }\n  description: "The number of steps in the warmup phase"\n  placeholder: "warmup_iters"\n}\nmodel_type_fields {\n  path: "train_info.params.warmup_ratio"\n  field_type: NUMBER\n  default_value {\n    number_value: 0.0001\n  }\n  description: " Warmup phase learning rate multiplier"\n  placeholder: "warmup_ratio"\n}\nmodel_type_fields {\n  path: "train_info.params.pretrained_weights"\n  field_type: ENUM\n  default_value {\n    string_value: "ImageNet-1k"\n  }\n  description: "whether to use pretrained weights."\n  placeholder: "pretrained_weights"\n  model_type_enum_options {\n    id: "None"\n  }\n  model_type_enum_options {\n    id: "ImageNet-1k"\n  }\n}\nmodel_type_fields {\n  path: "train_info.params.flip_probability"\n  field_type: RANGE\n  default_value {\n    number_value: 0.5\n  }\n  description: "the probability an image will be flipped during training"\n  placeholder: "flip_probability"\n  model_type_range_info {\n    max: 1.0\n  }\n}\nmodel_type_fields {\n  path: "train_info.params.flip_direction"\n  field_type: ENUM\n  default_value {\n    string_value: "horizontal"\n  }\n  description: "the direction to randomly flip during training."\n  placeholder: "flip_direction"\n  model_type_enum_options {\n    id: "horizontal"\n  }\n  model_type_enum_options {\n    id: "vertical"\n  }\n}\nmodel_type_fields {\n  path: "train_info.params.concepts_mutually_exclusive"\n  field_type: BOOLEAN\n  default_value {\n    bool_value: false\n  }\n  description: "whether the concepts are mutually exclusive. If true then each input is expected to only be tagged with a single concept."\n  placeholder: "concepts_mutually_exclusive"\n}\nrecommended: true\n\nid: "MMClassification_ResNet_50"\ndescription: "A training template that uses the MMClassification toolkit and ResNet-50 configuration "\nmodel_type_fields {\n  path: "train_info.params.seed"\n  field_type: NUMBER\n  default_value {\n    number_value: -1.0\n  }\n  description: "[internal_only] the random seed to init training. If seed < 0, we will not set it."\n  placeholder: "seed"\n  internal_only: true\n}\nmodel_type_fields {\n  path: "train_info.params.num_gpus"\n  field_type: RANGE\n  default_value {\n    number_value: 1.0\n  }\n  description: "[internal_only] the number of gpus to train with."\n  placeholder: "num_gpus"\n  internal_only: true\n  model_type_range_info {\n    max: 1.0\n    step: 1.0\n  }\n}\nmodel_type_fields {\n  path: "train_info.params.image_size"\n  field_type: NUMBER\n  default_value {\n    number_value: 224.0\n  }\n  description: "the image size for training and inference. ResNet works on square images."\n  placeholder: "image_size"\n  internal_only: true\n}\nmodel_type_fields {\n  path: "train_info.params.batch_size"\n  field_type: RANGE\n  default_value {\n    number_value: 64.0\n  }\n  description: "the batch size to use per gpu during training."\n  placeholder: "batch_size"\n  internal_only: true\n  model_type_range_info {\n    min: 1.0\n    max: 256.0\n    step: 1.0\n  }\n}\nmodel_type_fields {\n  path: "train_info.params.num_epochs"\n  field_type: RANGE\n  default_value {\n    number_value: 60.0\n  }\n  description: "the total number of epochs to train for."\n  placeholder: "num_epochs"\n  internal_only: true\n  model_type_range_info {\n    min: 1.0\n    max: 600.0\n    step: 1.0\n  }\n}\nmodel_type_fields {\n  path: "train_info.params.per_item_lrate"\n  field_type: NUMBER\n  default_value {\n    number_value: 0.000390625\n  }\n  description: "the initial learning rate per item. The overall learning rate (per step) is set to lrate = batch_size * per_item_lrate"\n  placeholder: "per_item_lrate"\n  internal_only: true\n}\nmodel_type_fields {\n  path: "train_info.params.learning_rate_steps"\n  field_type: ARRAY_OF_NUMBERS\n  default_value {\n    list_value {\n      values {\n        number_value: 30.0\n      }\n      values {\n        number_value: 40.0\n      }\n      values {\n        number_value: 50.0\n      }\n    }\n  }\n  description: "epoch schedule for stepping down learning rate"\n  placeholder: "learning_rate_steps"\n  internal_only: true\n}\nmodel_type_fields {\n  path: "train_info.params.weight_decay"\n  field_type: RANGE\n  default_value {\n    number_value: 0.0001\n  }\n  description: "the weight decay value"\n  placeholder: "weight_decay"\n  internal_only: true\n  model_type_range_info {\n    max: 1.0\n  }\n}\nmodel_type_fields {\n  path: "train_info.params.momentum"\n  field_type: RANGE\n  default_value {\n    number_value: 0.9\n  }\n  description: "the momentum value for the SGD optimizer"\n  placeholder: "momentum"\n  internal_only: true\n  model_type_range_info {\n    max: 1.0\n  }\n}\nmodel_type_fields {\n  path: "train_info.params.pretrained_weights"\n  field_type: ENUM\n  default_value {\n    string_value: "ImageNet-1k"\n  }\n  description: "whether to use pretrained weights."\n  placeholder: "pretrained_weights"\n  model_type_enum_options {\n    id: "None"\n  }\n  model_type_enum_options {\n    id: "ImageNet-1k"\n  }\n  internal_only: true\n}\nmodel_type_fields {\n  path: "train_info.params.flip_probability"\n  field_type: RANGE\n  default_value {\n    number_value: 0.5\n  }\n  description: "the probability an image will be flipped during training"\n  placeholder: "flip_probability"\n  internal_only: true\n  model_type_range_info {\n    max: 1.0\n  }\n}\nmodel_type_fields {\n  path: "train_info.params.flip_direction"\n  field_type: ENUM\n  default_value {\n    string_value: "horizontal"\n  }\n  description: "the direction to randomly flip during training."\n  placeholder: "flip_direction"\n  model_type_enum_options {\n    id: "horizontal"\n  }\n  model_type_enum_options {\n    id: "vertical"\n  }\n  internal_only: true\n}\nmodel_type_fields {\n  path: "train_info.params.concepts_mutually_exclusive"\n  field_type: BOOLEAN\n  default_value {\n    bool_value: false\n  }\n  description: "whether the concepts are mutually exclusive. If true then each input is expected to only be tagged with a single concept."\n  placeholder: "concepts_mutually_exclusive"\n  internal_only: true\n}\ninternal_only: true\n',U='status {\n    code: SUCCESS\n    description: "Ok"\n    req_id: "f45dfcf36746a567f690744f0b3805a7"\n  }\n  training_time_estimates {\n    seconds: 308\n  }\n  ',M={description:"Learn how deep fine-tuning works",sidebar_position:6},j="Deep Fine-Tuning",H={id:"api-guide/model/deep-training",title:"Deep Fine-Tuning",description:"Learn how deep fine-tuning works",source:"@site/docs/api-guide/model/deep-training.md",sourceDirName:"api-guide/model",slug:"/api-guide/model/deep-training",permalink:"/api-guide/model/deep-training",draft:!1,unlisted:!1,editUrl:"https://github.com/Clarifai/docs/blob/main/docs/api-guide/model/deep-training.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{description:"Learn how deep fine-tuning works",sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Create, Train, Get, Update, Delete",permalink:"/api-guide/model/create-get-update-and-delete"},next:{title:"Import Models",permalink:"/api-guide/model/import-model"}},Y={},L=[{value:"Create Models",id:"create-models",level:2},{value:"Template Types",id:"template-types",level:2},{value:"Training Time Estimator",id:"training-time-estimator",level:2},{value:"Train a Model",id:"train-a-model",level:2},{value:"Example",id:"example",level:3},{value:"Incrementally Train a Model",id:"incrementally-train-a-model",level:3},{value:"Train Using Your Own Template",id:"train-using-your-own-template",level:3}];function B(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",strong:"strong",ul:"ul",...(0,i.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"deep-fine-tuning",children:"Deep Fine-Tuning"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Learn how deep fine-tuning works"})}),"\n",(0,a.jsx)("hr",{}),"\n",(0,a.jsx)(n.p,{children:'Fine-tuning is a deep learning technique that refers to taking a pre-trained model and further training it on a new dataset or task. The term "fine-tuning" implies making small adjustments or refinements to the already learned representations in the pre-trained model rather than training from scratch.'}),"\n",(0,a.jsx)(n.p,{children:"Fine-tuning leverages the power of pre-trained models to improve their performance on a new, related task. It involves taking a pre-trained model, which was previously trained on a vast dataset for a general-purpose task, and tailoring it to a more specific task."}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.a,{href:"https://docs.clarifai.com/portal-guide/model/deep-training/#why-choose-deep-fine-tuning",children:"Click here"})," to learn why you might consider deep fine-tuning."]}),"\n","\n","\n","\n","\n","\n","\n","\n","\n",(0,a.jsx)(n.admonition,{type:"info",children:(0,a.jsxs)(n.p,{children:["The initialization code used in the following examples is outlined in detail on the ",(0,a.jsx)(n.a,{href:"https://docs.clarifai.com/api-guide/api-overview/api-clients/#client-installation-instructions",children:"client installation page."})]})}),"\n",(0,a.jsx)(n.h2,{id:"create-models",children:"Create Models"}),"\n",(0,a.jsxs)(n.p,{children:["To create a deep fine-tuned model, you need to specify the ",(0,a.jsx)(n.a,{href:"https://docs.clarifai.com/portal-guide/model/model-types/",children:"type of model"})," using the ",(0,a.jsx)(n.code,{children:"model_type_id"})," parameter\u2060."]}),"\n",(0,a.jsx)(n.admonition,{type:"tip",children:(0,a.jsxs)(n.p,{children:["You can use the ",(0,a.jsx)(n.a,{href:"https://docs.clarifai.com/api-guide/model/create-get-update-and-delete/#list-model-types",children:(0,a.jsx)(n.code,{children:"ListModelTypes"})})," method to learn more about the available model types and their hyperparameters."]})}),"\n",(0,a.jsx)(n.p,{children:"Here some types of deep fine-tuned models you can create:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Visual classifier"})," (",(0,a.jsx)(n.code,{children:"visual-classifier"}),")\u2014Create this model to classify images and video frames into a set of concepts."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Visual detector"})," (",(0,a.jsx)(n.code,{children:"visual-detector"}),")\u2014Create this model to detect bounding box regions in images or video frames and then classify the detected images. You can also send the image regions to an image cropper model to create a new cropped image."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Visual embedder"})," (",(0,a.jsx)(n.code,{children:"visual-embedder"}),')\u2014Create this model to transform images and video frames into "high level" vector representation understood by our AI models. These embeddings enable visual search and can be used as base models to train other models.']}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Visual segmenter"})," (",(0,a.jsx)(n.code,{children:"visual-segmenter"}),")\u2014Create this model to segment a per-pixel mask in images where things are and then classify objects, descriptive words, or topics within the masks."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Visual anomaly heatmap"})," (",(0,a.jsx)(n.code,{children:"visual-anomaly-heatmap"}),")\u2014Create this model to perform visual anomaly detection with image-level score and anomaly heatmap."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Text classifier"})," (",(0,a.jsx)(n.code,{children:"text-classifier"}),")\u2014Create this model to classify text into a set of concepts."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Text generator"})," (",(0,a.jsx)(n.code,{children:"text-to-text"}),")\u2014Create this model to generate or convert text based on the provided text input. For example, you can create it for prompt completion, translation, or summarization tasks."]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Below is an example of how you would create a visual classifier model."}),"\n",(0,a.jsxs)(r.A,{children:[(0,a.jsx)(s.A,{value:"python",label:"Python",children:(0,a.jsx)(o.A,{className:"language-python",children:l})}),(0,a.jsx)(s.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,a.jsx)(o.A,{className:"language-javascript",children:h})}),(0,a.jsx)(s.A,{value:"nodejs",label:"NodeJS",children:(0,a.jsx)(o.A,{className:"language-javascript",children:b})}),(0,a.jsx)(s.A,{value:"java",label:"Java",children:(0,a.jsx)(o.A,{className:"language-java",children:I})}),(0,a.jsx)(s.A,{value:"php",label:"PHP",children:(0,a.jsx)(o.A,{className:"language-php",children:N})}),(0,a.jsx)(s.A,{value:"curl",label:"cURL",children:(0,a.jsx)(o.A,{className:"language-bash",children:O})})]}),"\n",(0,a.jsx)(n.h2,{id:"template-types",children:"Template Types"}),"\n",(0,a.jsx)(n.p,{children:"You can take advantage of a variety of our pre-configured templates when developing your deep fine-tuned models. Templates give you the control to choose the specific architecture used by your neural network, and also define a set of hyperparameters that you can use to fine-tune the way your model learns."}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.a,{href:"https://docs.clarifai.com/portal-guide/model/deep-training/#template-types",children:"Click here"})," to learn more about the template types we offer\u2014alongside their hyperparameters."]}),"\n",(0,a.jsxs)(n.p,{children:["Below is an example of how you would use the ",(0,a.jsx)(n.code,{children:"ListModelTypes"})," endpoint to list the templates and hyperparameters available in a specific model type."]}),"\n",(0,a.jsxs)(r.A,{children:[(0,a.jsx)(s.A,{value:"python",label:"Python",children:(0,a.jsx)(o.A,{className:"language-python",children:d})}),(0,a.jsx)(s.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,a.jsx)(o.A,{className:"language-javascript",children:g})}),(0,a.jsx)(s.A,{value:"nodejs",label:"NodeJS",children:(0,a.jsx)(o.A,{className:"language-javascript",children:v})}),(0,a.jsx)(s.A,{value:"java",label:"Java",children:(0,a.jsx)(o.A,{className:"language-java",children:T})}),(0,a.jsx)(s.A,{value:"php",label:"PHP",children:(0,a.jsx)(o.A,{className:"language-php",children:P})})]}),"\n",(0,a.jsxs)(t,{children:[(0,a.jsx)("summary",{children:"Output Example"}),(0,a.jsx)(o.A,{className:"language-text",children:w})]}),"\n",(0,a.jsx)(n.h2,{id:"training-time-estimator",children:"Training Time Estimator"}),"\n",(0,a.jsxs)(n.p,{children:["Before you train a deep fine-tuned model, you can use the ",(0,a.jsx)(n.a,{href:"https://docs.clarifai.com/portal-guide/model/training-basics#training-time-estimator",children:"Training Time Estimator"})," feature to approximate the amount of time the training process could take. This offers transparency in expected training costs."]}),"\n",(0,a.jsx)(n.admonition,{type:"tip",children:(0,a.jsxs)(n.p,{children:["Instead of providing an estimated input count, an alternative approach is to specify a dataset version ID in the ",(0,a.jsx)(n.code,{children:"train_info.params"})," of the request. Here is an example: ",(0,a.jsx)(n.code,{children:'params.update({"template":"MMDetection_FasterRCNN", "dataset_version_id":"dataset-version-1681974758238s"})'}),"."]})}),"\n",(0,a.jsxs)(r.A,{children:[(0,a.jsx)(s.A,{value:"python",label:"Python",children:(0,a.jsx)(o.A,{className:"language-python",children:c})}),(0,a.jsx)(s.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,a.jsx)(o.A,{className:"language-javascript",children:y})}),(0,a.jsx)(s.A,{value:"java",label:"Java",children:(0,a.jsx)(o.A,{className:"language-java",children:D})}),(0,a.jsx)(s.A,{value:"curl",label:"cURL",children:(0,a.jsx)(o.A,{className:"language-bash",children:C})})]}),"\n",(0,a.jsxs)(t,{children:[(0,a.jsx)("summary",{children:"Output Example"}),(0,a.jsx)(o.A,{className:"language-text",children:U})]}),"\n",(0,a.jsx)(n.h2,{id:"train-a-model",children:"Train a Model"}),"\n",(0,a.jsx)(n.p,{children:"After creating a model, you can now train it. It is an asynchronous operation."}),"\n",(0,a.jsx)(n.p,{children:"Training enables the deep fine-tuned model to learn patterns, relationships, and representations from the input data. It allows the model to adjust its parameters based on the provided input data so that it can make accurate predictions."}),"\n",(0,a.jsx)(n.p,{children:"You can repeat the training operation as often as you like. By adding more input data with concepts and training, you can get the model to predict exactly how you want it to."}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"PostModelVersions"})," endpoint kicks off training and creates a new model version. You can also add concepts to a model when creating the model version\u2014and only if the model type supports it as defined in the model type parameters."]}),"\n",(0,a.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,a.jsx)(n.p,{children:"Below is an example of how you would train a visual classifier model."}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsxs)(n.p,{children:["We use the ",(0,a.jsx)(n.code,{children:"params.update()"})," method to set the template and hyperparameters for the visual classifier model. If training another model type, you'll need to state the specific template and hyperparameters associated with that particular model."]})}),"\n",(0,a.jsxs)(r.A,{children:[(0,a.jsx)(s.A,{value:"python",label:"Python",children:(0,a.jsx)(o.A,{className:"language-python",children:p})}),(0,a.jsx)(s.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,a.jsx)(o.A,{className:"language-javascript",children:f})}),(0,a.jsx)(s.A,{value:"java",label:"Java",children:(0,a.jsx)(o.A,{className:"language-java",children:A})}),(0,a.jsx)(s.A,{value:"curl",label:"cURL",children:(0,a.jsx)(o.A,{className:"language-bash",children:S})})]}),"\n",(0,a.jsx)(n.h3,{id:"incrementally-train-a-model",children:"Incrementally Train a Model"}),"\n",(0,a.jsx)(n.p,{children:"You can update existing deep fine-tuned models with new data without retraining from scratch. After training a model version, a checkpoint file is automatically saved. And you can initiate incremental training from that previously trained version checkpoint."}),"\n",(0,a.jsx)(n.p,{children:"Below is an example of how you would perform incremental training from a specific version of a visual detector model."}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsxs)(n.p,{children:["Incremental model training functionality has been introduced starting from the ",(0,a.jsx)(n.a,{href:"https://docs.clarifai.com/product-updates/changelog/release101#api",children:"10.1 release"}),"."]})}),"\n",(0,a.jsxs)(r.A,{children:[(0,a.jsx)(s.A,{value:"python",label:"Python",children:(0,a.jsx)(o.A,{className:"language-python",children:m})}),(0,a.jsx)(s.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,a.jsx)(o.A,{className:"language-javascript",children:E})}),(0,a.jsx)(s.A,{value:"java",label:"Java",children:(0,a.jsx)(o.A,{className:"language-java",children:R})}),(0,a.jsx)(s.A,{value:"curl",label:"cURL",children:(0,a.jsx)(o.A,{className:"language-bash",children:x})})]}),"\n",(0,a.jsx)(n.h3,{id:"train-using-your-own-template",children:"Train Using Your Own Template"}),"\n",(0,a.jsxs)(n.p,{children:["You can ",(0,a.jsx)(n.a,{href:"https://docs.clarifai.com/portal-guide/model/deep-training/custom-templates/",children:"create your own deep fine-tuned template"})," and use it to train a model."]}),"\n",(0,a.jsxs)(n.p,{children:["You need to create a Python configuration file and pass it as a training parameter to the ",(0,a.jsx)(n.code,{children:"PostModelVersions"})," endpoint. Here is an example of a ",(0,a.jsx)(n.code,{children:"training_config.py"})," file for creating a custom deep fine-tuned template using the MMDetection open source toolbox for visual detection tasks."]}),"\n",(0,a.jsx)(r.A,{children:(0,a.jsx)(s.A,{value:"python",label:"Python",children:(0,a.jsx)(o.A,{className:"language-python",children:_})})}),"\n",(0,a.jsx)(n.p,{children:"Here is how you could use the custom template to train a deep fine-tuned model."}),"\n",(0,a.jsx)(r.A,{children:(0,a.jsx)(s.A,{value:"python",label:"Python",children:(0,a.jsx)(o.A,{className:"language-python",children:u})})})]})}function G(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(B,{...e})}):B(e)}},19365:(e,n,t)=>{t.d(n,{A:()=>s});t(96540);var a=t(18215);const i={tabItem:"tabItem_Ymn6"};var r=t(74848);function s(e){let{children:n,hidden:t,className:s}=e;return(0,r.jsx)("div",{role:"tabpanel",className:(0,a.A)(i.tabItem,s),hidden:t,children:n})}},11470:(e,n,t)=>{t.d(n,{A:()=>I});var a=t(96540),i=t(18215),r=t(23104),s=t(56347),o=t(205),l=t(57485),p=t(31682),d=t(70679);function _(e){return a.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function u(e){const{values:n,children:t}=e;return(0,a.useMemo)((()=>{const e=n??function(e){return _(e).map((e=>{let{props:{value:n,label:t,attributes:a,default:i}}=e;return{value:n,label:t,attributes:a,default:i}}))}(t);return function(e){const n=(0,p.X)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function c(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function m(e){let{queryString:n=!1,groupId:t}=e;const i=(0,s.W6)(),r=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,l.aZ)(r),(0,a.useCallback)((e=>{if(!r)return;const n=new URLSearchParams(i.location.search);n.set(r,e),i.replace({...i.location,search:n.toString()})}),[r,i])]}function h(e){const{defaultValue:n,queryString:t=!1,groupId:i}=e,r=u(e),[s,l]=(0,a.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!c({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const a=t.find((e=>e.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:r}))),[p,_]=m({queryString:t,groupId:i}),[h,f]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[i,r]=(0,d.Dv)(t);return[i,(0,a.useCallback)((e=>{t&&r.set(e)}),[t,r])]}({groupId:i}),g=(()=>{const e=p??h;return c({value:e,tabValues:r})?e:null})();(0,o.A)((()=>{g&&l(g)}),[g]);return{selectedValue:s,selectValue:(0,a.useCallback)((e=>{if(!c({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);l(e),_(e),f(e)}),[_,f,r]),tabValues:r}}var f=t(92303);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var y=t(74848);function E(e){let{className:n,block:t,selectedValue:a,selectValue:s,tabValues:o}=e;const l=[],{blockElementScrollPositionUntilNextRender:p}=(0,r.a_)(),d=e=>{const n=e.currentTarget,t=l.indexOf(n),i=o[t].value;i!==a&&(p(n),s(i))},_=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const t=l.indexOf(e.currentTarget)+1;n=l[t]??l[0];break}case"ArrowLeft":{const t=l.indexOf(e.currentTarget)-1;n=l[t]??l[l.length-1];break}}n?.focus()};return(0,y.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.A)("tabs",{"tabs--block":t},n),children:o.map((e=>{let{value:n,label:t,attributes:r}=e;return(0,y.jsx)("li",{role:"tab",tabIndex:a===n?0:-1,"aria-selected":a===n,ref:e=>l.push(e),onKeyDown:_,onClick:d,...r,className:(0,i.A)("tabs__item",g.tabItem,r?.className,{"tabs__item--active":a===n}),children:t??n},n)}))})}function b(e){let{lazy:n,children:t,selectedValue:i}=e;const r=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=r.find((e=>e.props.value===i));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return(0,y.jsx)("div",{className:"margin-top--md",children:r.map(((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==i})))})}function v(e){const n=h(e);return(0,y.jsxs)("div",{className:(0,i.A)("tabs-container",g.tabList),children:[(0,y.jsx)(E,{...n,...e}),(0,y.jsx)(b,{...n,...e})]})}function I(e){const n=(0,f.A)();return(0,y.jsx)(v,{...e,children:_(e.children)},String(n))}}}]);
"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[3221],{85162:function(n,e,t){t.d(e,{Z:function(){return i}});var a=t(67294),o=t(34334),s="tabItem_Ymn6";function i(n){let{children:e,hidden:t,className:i}=n;return a.createElement("div",{role:"tabpanel",className:(0,o.Z)(s,i),hidden:t},e)}},65488:function(n,e,t){t.d(e,{Z:function(){return _}});var a=t(83117),o=t(67294),s=t(34334),i=t(72389),r=t(67392),c=t(7094),p=t(12466),l="tabList__CuJ",u="tabItem_LNqP";function d(n){var e,t;const{lazy:i,block:d,defaultValue:_,values:I,groupId:h,className:E}=n,T=o.Children.map(n.children,(n=>{if((0,o.isValidElement)(n)&&"value"in n.props)return n;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof n.type?n.type:n.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),A=null!=I?I:T.map((n=>{let{props:{value:e,label:t,attributes:a}}=n;return{value:e,label:t,attributes:a}})),D=(0,r.l)(A,((n,e)=>n.value===e.value));if(D.length>0)throw new Error('Docusaurus error: Duplicate values "'+D.map((n=>n.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const f=null===_?_:null!=(e=null!=_?_:null==(t=T.find((n=>n.props.default)))?void 0:t.props.value)?e:T[0].props.value;if(null!==f&&!A.some((n=>n.value===f)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+f+'" but none of its children has the corresponding value. Available values are: '+A.map((n=>n.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:g,setTabGroupChoices:b}=(0,c.U)(),[P,m]=(0,o.useState)(f),N=[],{blockElementScrollPositionUntilNextRender:C}=(0,p.o5)();if(null!=h){const n=g[h];null!=n&&n!==P&&A.some((e=>e.value===n))&&m(n)}const R=n=>{const e=n.currentTarget,t=N.indexOf(e),a=A[t].value;a!==P&&(C(e),m(a),null!=h&&b(h,String(a)))},O=n=>{var e;let t=null;switch(n.key){case"ArrowRight":{var a;const e=N.indexOf(n.currentTarget)+1;t=null!=(a=N[e])?a:N[0];break}case"ArrowLeft":{var o;const e=N.indexOf(n.currentTarget)-1;t=null!=(o=N[e])?o:N[N.length-1];break}}null==(e=t)||e.focus()};return o.createElement("div",{className:(0,s.Z)("tabs-container",l)},o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":d},E)},A.map((n=>{let{value:e,label:t,attributes:i}=n;return o.createElement("li",(0,a.Z)({role:"tab",tabIndex:P===e?0:-1,"aria-selected":P===e,key:e,ref:n=>N.push(n),onKeyDown:O,onFocus:R,onClick:R},i,{className:(0,s.Z)("tabs__item",u,null==i?void 0:i.className,{"tabs__item--active":P===e})}),null!=t?t:e)}))),i?(0,o.cloneElement)(T.filter((n=>n.props.value===P))[0],{className:"margin-top--md"}):o.createElement("div",{className:"margin-top--md"},T.map(((n,e)=>(0,o.cloneElement)(n,{key:e,hidden:n.props.value!==P})))))}function _(n){const e=(0,i.Z)();return o.createElement(d,(0,a.Z)({key:String(e)},n))}},83009:function(n,e,t){t.r(e),t.d(e,{assets:function(){return u},contentTitle:function(){return p},default:function(){return I},frontMatter:function(){return c},metadata:function(){return l},toc:function(){return d}});var a=t(83117),o=(t(67294),t(3905)),s=t(65488),i=t(85162),r=t(66066);const c={description:"Label your data.",sidebar_position:1},p="Annotations",l={unversionedId:"api-guide/annotate/annotations",id:"api-guide/annotate/annotations",title:"Annotations",description:"Label your data.",source:"@site/docs/api-guide/annotate/annotations.md",sourceDirName:"api-guide/annotate",slug:"/api-guide/annotate/annotations",permalink:"/api-guide/annotate/annotations",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{description:"Label your data.",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Labeling Your Data",permalink:"/api-guide/annotate/"},next:{title:"Training Data",permalink:"/api-guide/annotate/training-data"}},u={},d=[{value:"Add Annotations",id:"add-annotations",level:2},{value:"Annotate Images With Concepts",id:"annotate-images-with-concepts",level:3},{value:"Annotate Images With Multiple Concepts",id:"annotate-images-with-multiple-concepts",level:3},{value:"Annotate New Bounding Boxes in an Image",id:"annotate-new-bounding-boxes-in-an-image",level:3},{value:"Annotate Polygons in an Image",id:"annotate-polygons-in-an-image",level:3},{value:"Annotate Existing Regions in an Image",id:"annotate-existing-regions-in-an-image",level:3},{value:"Annotate Images With Different <code>user_id</code> and <code>status</code>",id:"annotate-images-with-different-user_id-and-status",level:3},{value:"List Annotations",id:"list-annotations",level:2},{value:"List All User Created Annotations in Your App",id:"list-all-user-created-annotations-in-your-app",level:3},{value:"List All Annotations in Your App",id:"list-all-annotations-in-your-app",level:3},{value:"List User Created Annotations by Input IDs",id:"list-user-created-annotations-by-input-ids",level:3},{value:"List Annotations by Input IDs and Annotation IDs",id:"list-annotations-by-input-ids-and-annotation-ids",level:3},{value:"List Annotations by User IDs",id:"list-annotations-by-user-ids",level:3},{value:"List Annotations by Model Version IDs",id:"list-annotations-by-model-version-ids",level:3},{value:"Update Annotations",id:"update-annotations",level:2},{value:"Update Annotation With Concepts",id:"update-annotation-with-concepts",level:3},{value:"Update Annotation With Concepts in a Region",id:"update-annotation-with-concepts-in-a-region",level:3},{value:"Update Annotation Region Coordinates",id:"update-annotation-region-coordinates",level:3},{value:"Update Annotation Status",id:"update-annotation-status",level:3},{value:"Delete Annotations",id:"delete-annotations",level:2},{value:"Delete Annotation by Input ID and Annotation ID",id:"delete-annotation-by-input-id-and-annotation-id",level:3},{value:"Bulk Delete Annotations by Input IDs and Annotation IDs",id:"bulk-delete-annotations-by-input-ids-and-annotation-ids",level:3},{value:"Bulk Delete All Annotations by Input IDs",id:"bulk-delete-all-annotations-by-input-ids",level:3}],_={toc:d};function I(n){let{components:e,...t}=n;return(0,o.kt)("wrapper",(0,a.Z)({},_,t,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"annotations"},"Annotations"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Label your data")),(0,o.kt)("hr",null),(0,o.kt)("p",null,"Annotations ","(","also known as labels",")"," describe your inputs. When you add inputs to your app, we will create an input level annotation for each input. This input level annotation contains any data you provided in ",(0,o.kt)("inlineCode",{parentName:"p"},"POST /inputs")," call. Models in your default workflow can also write annotations."),(0,o.kt)("p",null,"Once your input is successfully indexed, you can add additional annotations, such as concepts and bounding boxes."),(0,o.kt)("h2",{id:"add-annotations"},"Add Annotations"),(0,o.kt)("p",null,"You can label your inputs by calling the ",(0,o.kt)("inlineCode",{parentName:"p"},"POST /annotations")," endpoint. For example, you can add concept","(","s",")"," to an image, draw a bounding box, or label concept","(","s",")"," in a video frame."),(0,o.kt)("p",null,"When you add an annotation, the app's default workflow will be run by default. This means that any newly added annotations will be immediately available for AI based search and training."),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"You can add from 1 up to 128 annotations in a single API call.")),(0,o.kt)("p",null,"Each annotation should contain at most one region. If it is a video, each annotation should contain 1 frame. If there are multiple regions in a frame you want to label, you can add multiple annotations for each region and each annotation will be contained within the same frame but in a different region."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"The initialization code used in the following examples is outlined in detail on the ",(0,o.kt)("a",{parentName:"p",href:"https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions"},"client installation page."))),(0,o.kt)("h3",{id:"annotate-images-with-concepts"},"Annotate Images With Concepts"),(0,o.kt)("p",null,"Below is an example of how to annotate a concept present anywhere in an image."),(0,o.kt)(s.Z,{mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-python",mdxType:"CodeBlock"},"#################################################################################################\n# In this section, we set the user authentication, app ID, and how we want to annotate the image. \n# Change these strings to run your own example.\n#################################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these based on the image you want to annotate\nINPUT_ID = \"53d0362a9dfa4e03b2293375e2d0db73\"\nCONCEPT_ID_1 = \"tree\"\nCONCEPT_ID_2 = \"water\"\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\npost_annotations_response = stub.PostAnnotations(\n    service_pb2.PostAnnotationsRequest(\n        user_app_id=userDataObject,  # The userDataObject is created in the overview and is required when using a PAT\n        annotations=[\n            resources_pb2.Annotation(\n                input_id=INPUT_ID,\n                data=resources_pb2.Data(\n                    concepts=[\n                        resources_pb2.Concept(id=CONCEPT_ID_1, value=1.),  # 1 means true, this concept is present\n                        resources_pb2.Concept(id=CONCEPT_ID_2, value=0.)  # 0 means false, this concept is not present\n                    ]\n                )               \n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif post_annotations_response.status.code != status_code_pb2.SUCCESS:\n    print(post_annotations_response.status)\n    raise Exception(\"Post annotations failed, status: \" + post_annotations_response.status.description) \n")),(0,o.kt)(i.Z,{value:"js_rest",label:"JavaScript (REST)",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-javascript",mdxType:"CodeBlock"},'\x3c!--index.html file--\x3e\n\n<script>\n    ////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and how we want to \n    // annotate the image. Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = \'YOUR_USER_ID_HERE\';\n    // Your PAT (Personal Access Token) can be found in the portal under Authentification\n    const PAT = \'YOUR_PAT_HERE\';\n    const APP_ID = \'YOUR_APP_ID_HERE\';\n    // Change these based on the image you want to annotate\n    const INPUT_ID = "c99f1b557d1d43d1916b46f8ce4a0487";\n    const CONCEPT_ID_1 = "tree";\n    const CONCEPT_ID_2 = "water";\n    \n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        "user_app_id": {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        "annotations": [\n            {\n                "input_id": INPUT_ID,\n                // 1 means true, this concept is present\n                // 0 means false, this concept is not present\n                "data": {\n                    "concepts": [\n                        {\n                            "id": CONCEPT_ID_1,\n                            "value": 1\n                        },\n                        {\n                            "id": CONCEPT_ID_2,\n                            "value": 0\n                        }\n                    ]\n                }\n            }\n        ]\n    });\n\n    const requestOptions = {\n        method: \'POST\',\n        headers: {\n            \'Accept\': \'application/json\',\n            \'Authorization\': \'Key \' + PAT\n        },\n        body: raw\n    };\n\n    fetch("https://api.clarifai.com/v2/annotations", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log(\'error\', error));\n\n<\/script>')),(0,o.kt)(i.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-javascript",mdxType:"CodeBlock"},'//index.js file\n\n////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and how we want to \n// annotate the image. Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n// Change these based on the image you want to annotate\nconst INPUT_ID = "c99f1b557d1d43d1916b46f8ce4a0487";\nconst CONCEPT_ID_1 = "tree";\nconst CONCEPT_ID_2 = "water";\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PostAnnotations(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        annotations: [\n            {\n                input_id: INPUT_ID,\n                // 1 means true, this concept is present\n                // 0 means false, this concept is not present\n                data: {\n                    concepts: [\n                        { id: CONCEPT_ID_1, value: 1 },\n                        { id: CONCEPT_ID_2, value: 0 }\n                    ]\n                }\n                \n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post annotations failed, status: " + response.status.description);\n        }\n    }\n);')),(0,o.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-java",mdxType:"CodeBlock"},'package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    //////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and how we want to \n    // annotate the image. Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\t\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these based on the image you want to annotate\n    static final String INPUT_ID = "c99f1b557d1d43d1916b46f8ce4a0487";\n    static final String CONCEPT_ID_1 = "tree";\n    static final String CONCEPT_ID_2 = "water";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\t\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiAnnotationResponse postAnnotationsResponse = stub.postAnnotations(\n            PostAnnotationsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .addAnnotations(\n                Annotation.newBuilder()\n                .setInputId(INPUT_ID)\n                .setData(\n                    Data.newBuilder().addConcepts(\n                        Concept.newBuilder()\n                        .setId(CONCEPT_ID_1)\n                        .setValue(1f) // 1 means true, this concept is present\n                        .build()\n                    ).addConcepts(\n                        Concept.newBuilder()\n                        .setId(CONCEPT_ID_2)\n                        .setValue(0f) // 0 means false, this concept is not present\n                        .build()\n                    )\n                ).build()\n            ).build()\n        );\n\n        if (postAnnotationsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post annotations failed, status: " + postAnnotationsResponse.getStatus());\n        }\n\n    }\n\n}')),(0,o.kt)(i.Z,{value:"php",label:"PHP",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-php",mdxType:"CodeBlock"},'<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and how we want to \n// annotate the image. Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change these based on the image you want to annotate\n$INPUT_ID = "53d0362a9dfa4e03b2293375e2d0db73";\n$CONCEPT_ID_1 = "tree";\n$CONCEPT_ID_2 = "water";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\PostAnnotationsRequest;\nuse Clarifai\\Api\\Annotation;\nuse Clarifai\\Api\\Concept;\nuse Clarifai\\Api\\Data;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PostAnnotations(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new PostAnnotationsRequest([\n        "user_app_id" => $userDataObject, \n        "annotations" => [\n             new Annotation([\n                "input_id" => $INPUT_ID,\n                "data" => new Data([\n                    "concepts" => [\n                        new Concept(["id" => $CONCEPT_ID_1, "value" => 1.]),\n                        new Concept(["id" => $CONCEPT_ID_2, "value" => 0.])\n                    ]\n                ])\n             ])\n        ]\n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\n?>')),(0,o.kt)(i.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-bash",mdxType:"CodeBlock"},'# Value of 1 means true, this concept is present\n# Value of 0 means false, this concept is not present\n\ncurl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/annotations" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "annotations": [\n      {\n        "input_id": "YOUR_INPUT_ID_HERE",\n        "data": {\n          "concepts": [\n            {\n              "id": "tree",\n              "value": 1\n            },\n            {\n              "id": "water",\n              "value": 0\n            }\n          ]\n        }\n      }\n    ]\n}\''))),(0,o.kt)("h3",{id:"annotate-images-with-multiple-concepts"},"Annotate Images With Multiple Concepts"),(0,o.kt)("p",null,"Below is an example of how to annotate an image with multiple concepts in a single API call. You can provide the concepts in a list and iterate through it."),(0,o.kt)(s.Z,{mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-python",mdxType:"CodeBlock"},"#################################################################################################\n# In this section, we set the user authentication, app ID, and how we want to annotate the image. \n# Change these strings to run your own example.\n#################################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these based on the image you want to annotate with multiple concepts\nINPUT_ID = \"53d0362a9dfa4e03b2293375e2d0db73\"\nCONCEPT_IDS_LIST = ['one', 'two', 'three', 'four', 'five', 'six']\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\npost_annotations_response = stub.PostAnnotations(\n    service_pb2.PostAnnotationsRequest(\n        user_app_id=userDataObject,  # The userDataObject is created in the overview and is required when using a PAT\n        annotations=[\n            resources_pb2.Annotation(\n                input_id=INPUT_ID,\n                data=resources_pb2.Data(\n                    concepts=[\n                        # We use Python list comprehension to iterate through the list of concepts\n                        resources_pb2.Concept(id=str(i), value=1.) for i in CONCEPT_IDS_LIST \n                    ]\n                )               \n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif post_annotations_response.status.code != status_code_pb2.SUCCESS:\n    print(post_annotations_response.status)\n    raise Exception(\"Post annotations failed, status: \" + post_annotations_response.status.description) \n")),(0,o.kt)(i.Z,{value:"js_rest",label:"JavaScript (REST)",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-javascript",mdxType:"CodeBlock"},"\x3c!--index.html file--\x3e\n\n<script>\n    ////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and how we want to \n    // annotate the image. Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = 'YOUR_USER_ID_HERE';\n    // Your PAT (Personal Access Token) can be found in the portal under Authentification\n    const PAT = 'YOUR_PAT_HERE';\n    const APP_ID = 'YOUR_APP_ID_HERE';\n    // Change these based on the image you want to annotate with multiple concepts\n    const INPUT_ID = \"c99f1b557d1d43d1916b46f8ce4a0487\";\n    const CONCEPT_IDS_LIST = ['one', 'two', 'three', 'four', 'five', 'six'];\n\n    // We use a map function to iterate through the list of concepts\n     const myFunction = () => {\n       return CONCEPT_IDS_LIST.map((concept)=>({\"id\":concept,\"value\":1}));\n    }\n    \n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        \"user_app_id\": {\n            \"user_id\": USER_ID,\n            \"app_id\": APP_ID\n        },\n        \"annotations\": [\n            {\n                \"input_id\": INPUT_ID,\n                // 1 means true, this concept is present\n                // 0 means false, this concept is not present\n                \"data\": {\n                    \"concepts\": myFunction()\n                }\n            }\n        ]\n    });\n\n    const requestOptions = {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        },\n        body: raw\n    };\n\n    fetch(\"https://api.clarifai.com/v2/annotations\", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n\n<\/script>")),(0,o.kt)(i.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-javascript",mdxType:"CodeBlock"},"//index.js file\n\n////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and how we want to \n// annotate the image. Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = 'YOUR_USER_ID_HERE';\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\nconst PAT = 'YOUR_PAT_HERE';\nconst APP_ID = 'YOUR_APP_ID_HERE';\n// Change these based on the image you want to annotate with multiple concepts\nconst INPUT_ID = \"c99f1b557d1d43d1916b46f8ce4a0487\";\nconst CONCEPT_IDS_LIST = ['one', 'two', 'three', 'four', 'five', 'six'];\n\n// We use a map function to iterate through the list of concepts\nconst myFunction = () => {\n    return CONCEPT_IDS_LIST.map((concept)=>({\"id\":concept,\"value\":1}));\n }\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require(\"clarifai-nodejs-grpc\");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set(\"authorization\", \"Key \" + PAT);\n\nstub.PostAnnotations(\n    {\n        user_app_id: {\n            \"user_id\": USER_ID,\n            \"app_id\": APP_ID\n        },\n        annotations: [\n            {\n                input_id: INPUT_ID,\n                // 1 means true, this concept is present\n                // 0 means false, this concept is not present\n                data: {\n                    concepts: myFunction()\n                }\n                \n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error(\"Post annotations failed, status: \" + response.status.description);\n        }\n    }\n);"))),(0,o.kt)("h3",{id:"annotate-new-bounding-boxes-in-an-image"},"Annotate New Bounding Boxes in an Image"),(0,o.kt)("p",null,"Below is an example of how to label a new rectangular bounding box for a region."),(0,o.kt)("p",null,"These are the bounding box coordinates you need to provide:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"top_row"),"\u2014The top left of the bounding box normalized to the data dimension to be within ","[0-1.0]",";"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"left_col"),"\u2014The left column of the bounding box normalized to the data dimension to be within ","[0-1.0]",";"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"bottom_row"),"\u2014The bottom row of the bounding box normalized to the data dimension to be within ","[0-1.0]",";"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"right_col"),"\u2014The right col of the bounding box normalized to the data dimension to be within ","[0-1.0]",".")),(0,o.kt)(s.Z,{mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-python",mdxType:"CodeBlock"},"########################################################################################\n# In this section, we set the user authentication, app ID, and how we want to annotate\n# new bounding boxes. Change these strings to run your own example.\n#########################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these based on the new bounding boxes you want to annotate\nINPUT_ID = \"53d0362a9dfa4e03b2293375e2d0db73\"\nCONCEPT_ID_1 = \"tree\"\nCONCEPT_ID_2 = \"water\"\nCONCEPT_ID_3 = \"bike\"\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\npost_annotations_response = stub.PostAnnotations(\n    service_pb2.PostAnnotationsRequest(\n        user_app_id=userDataObject,  # The userDataObject is created in the overview and is required when using a PAT\n        annotations=[\n            resources_pb2.Annotation(\n                input_id=INPUT_ID,\n                data=resources_pb2.Data(\n                    regions=[\n                        resources_pb2.Region(\n                            region_info=resources_pb2.RegionInfo(\n                                bounding_box=resources_pb2.BoundingBox(       # draw a bounding box\n                                    top_row=0,\n                                    left_col=0,\n                                    bottom_row=0.5,\n                                    right_col=0.5\n                                )\n                            ),\n                            data=resources_pb2.Data(\n                                concepts=[\n                                    resources_pb2.Concept(id=CONCEPT_ID_1, value=1.),  # 1 means true, this concept is present.\n                                    resources_pb2.Concept(id=CONCEPT_ID_2, value=0.)   # 0 means false, this concept is not present.\n                                ]\n                            )\n                        )\n                    ]\n                )\n                \n            ),\n            resources_pb2.Annotation(\n                input_id=INPUT_ID,\n                data=resources_pb2.Data(\n                    regions=[\n                        resources_pb2.Region(\n                            region_info=resources_pb2.RegionInfo(\n                                bounding_box=resources_pb2.BoundingBox(        # draw another bounding box\n                                    top_row=0.6,\n                                    left_col=0.6,\n                                    bottom_row=0.8,\n                                    right_col=0.8\n                                )\n                            ),\n                            data=resources_pb2.Data(\n                                concepts=[\n                                    resources_pb2.Concept(id=CONCEPT_ID_3, value=1.),  # 1 means true, this concept is present.\n                                ]\n                            )\n                        )\n                    ]\n                )\n                \n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif post_annotations_response.status.code != status_code_pb2.SUCCESS:\n    print(post_annotations_response.status)\n    raise Exception(\"Post annotations failed, status: \" + post_annotations_response.status.description)\n\n\n")),(0,o.kt)(i.Z,{value:"js_rest",label:"JavaScript (REST)",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-javascript",mdxType:"CodeBlock"},'\x3c!--index.html file--\x3e\n\n<script>\n    //////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and how we want to annotate\n    // new bounding boxes. Change these strings to run your own example.\n    /////////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = \'YOUR_USER_ID_HERE\';\n    // Your PAT (Personal Access Token) can be found in the portal under Authentification\n    const PAT = \'YOUR_PAT_HERE\';\n    const APP_ID = \'YOUR_APP_ID_HERE\';\n    // Change these based on the new bounding boxes you want to annotate\n    const INPUT_ID = "a8748df4938447e4844b2f505c8eaaef";\n    const CONCEPT_ID_1 = "tree";\n    const CONCEPT_ID_2 = "water";\n    const CONCEPT_ID_3 = "bike";    \n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        "user_app_id": {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        "annotations": [\n            {\n                "input_id": INPUT_ID,\n                "data": {\n                    "regions": [\n                        {\n                            "region_info": {\n                                "bounding_box": {\n                                    "top_row": 0,\n                                    "left_col": 0,\n                                    "bottom_row": 0.5,\n                                    "right_col": 0.5\n                                }\n                            },\n                            "data": {\n                                // 1 means true, this concept is present\n                                // 0 means false, this concept is not present\n                                "concepts": [\n                                    {\n                                        "id": CONCEPT_ID_1,\n                                        "value": 1\n                                    },\n                                    {\n                                        "id": CONCEPT_ID_2,\n                                        "value": 0\n                                    }\n                                ]\n                            }\n                        }\n                    ]\n                }\n                \n            }, {\n                "input_id": INPUT_ID,\n                "data": {\n                    "regions": [\n                        {\n                            "region_info": {\n                                "bounding_box": {\n                                    "top_row": 0.6,\n                                    "left_col": 0.6,\n                                    "bottom_row": 0.8,\n                                    "right_col": 0.8\n                                }\n                            },\n                            "data": {\n                                "concepts": [\n                                    {\n                                        "id": CONCEPT_ID_3,\n                                        "value": 1\n                                    }\n                                ]\n                            }\n                        }\n                    ]\n                }\n                \n            }\n        ]\n    });\n\n    const requestOptions = {\n        method: \'POST\',\n        headers: {\n            \'Accept\': \'application/json\',\n            \'Authorization\': \'Key \' + PAT\n        },\n        body: raw\n    };\n\n    fetch("https://api.clarifai.com/v2/annotations", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log(\'error\', error));\n\n<\/script>')),(0,o.kt)(i.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-javascript",mdxType:"CodeBlock"},'//index.js file\n\n//////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and how we want to annotate\n// new bounding boxes. Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n// Change these based on the new bounding boxes you want to annotate\nconst INPUT_ID = "c9cbb1c90cf24bc98bfd2e529e744ca9";\nconst CONCEPT_ID_1 = "tree";\nconst CONCEPT_ID_2 = "water";\nconst CONCEPT_ID_3 = "bike";\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PostAnnotations(\n    {\n\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        annotations: [\n            {                     // label a region in this image\n                input_id: INPUT_ID,\n                data: {\n                    regions: [\n                        {\n                            region_info: {\n                                bounding_box: {        // draw a bounding box\n                                    top_row: 0,\n                                    left_col: 0,\n                                    bottom_row: 0.5,\n                                    right_col: 0.5\n                                }\n                            },\n                            // 1 means true, this concept is present\n                            // 0 means false, this concept is not present\n                            data: {\n                                concepts: [\n                                    { id: CONCEPT_ID_1, value: 1 },\n                                    { id: CONCEPT_ID_2, value: 0 }\n                                ]\n                            },\n                        }\n                    ]\n                }\n                \n            }, {                     // label another region in this image\n                input_id: INPUT_ID,\n                data: {\n                    regions: [\n                        {\n                            region_info: {\n                                bounding_box: {        // draw another bounding box\n                                    top_row: 0.6,\n                                    left_col: 0.6,\n                                    bottom_row: 0.8,\n                                    right_col: 0.8\n                                }\n                            },\n                            // 1 means true, this concept is present\n                            // 0 means false, this concept is not present\n                            data: {\n                                concepts: [\n                                    { id: CONCEPT_ID_3, value: 1 },\n                                ]\n                            },\n                        }\n                    ]\n                }\n                \n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post annotations failed, status: " + response.status.description);\n        }\n    }\n);')),(0,o.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-java",mdxType:"CodeBlock"},'package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    //////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and how we want to annotate\n    // new bounding boxes. Change these strings to run your own example.\n    /////////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\t\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these based on the new bounding boxes you want to annotate\n    static final String INPUT_ID = "53d0362a9dfa4e03b2293375e2d0db73";\n    static final String CONCEPT_ID_1 = "tree";\n    static final String CONCEPT_ID_2 = "water";\n    static final String CONCEPT_ID_3 = "bike";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\t\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiAnnotationResponse postAnnotationsResponse = stub.postAnnotations(\n            PostAnnotationsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .addAnnotations(\n                Annotation.newBuilder() // label a region in this image\n                .setInputId(INPUT_ID)\n                .setData(\n                    Data.newBuilder().addRegions(\n                        Region.newBuilder()\n                        .setRegionInfo(\n                            RegionInfo.newBuilder()\n                            .setBoundingBox( // draw a bounding box\n                                BoundingBox.newBuilder()\n                                .setTopRow(0f)\n                                .setLeftCol(0f)\n                                .setBottomRow(0.5f)\n                                .setRightCol(0.5f)\n                                .build()\n                            )\n                            .build()\n                        )\n                        .setData(\n                            Data.newBuilder()\n                            .addConcepts(\n                                Concept.newBuilder()\n                                .setId(CONCEPT_ID_1)\n                                .setValue(1f) // 1 means true, this concept is present\n                                .build()\n                            )\n                            .addConcepts(\n                                Concept.newBuilder()\n                                .setId(CONCEPT_ID_2)\n                                .setValue(0f) // 0 means false, this concept is not present\n                                .build()\n                            )\n                        ).build()\n                    ).build()\n                )\n                .build()\n            ).addAnnotations( // label another region in this image\n                Annotation.newBuilder()\n                .setInputId(INPUT_ID)\n                .setData(\n                    Data.newBuilder().addRegions(\n                        Region.newBuilder()\n                        .setRegionInfo(\n                            RegionInfo.newBuilder()\n                            .setBoundingBox( // draw another bounding box\n                                BoundingBox.newBuilder()\n                                .setTopRow(0.6f)\n                                .setLeftCol(0.6f)\n                                .setBottomRow(0.8f)\n                                .setRightCol(0.8f)\n                                .build()\n                            )\n                            .build()\n                        )\n                        .setData(\n                            Data.newBuilder()\n                            .addConcepts(\n                                Concept.newBuilder()\n                                .setId(CONCEPT_ID_3)\n                                .setValue(1f) // 1 means true, this concept is present\n                                .build()\n                            )\n                        ).build()\n                    ).build()\n                ).build()\n            ).build()\n        );\n\n        if (postAnnotationsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post annotations failed, status: " + postAnnotationsResponse.getStatus());\n        }\n\n    }\n\n}')),(0,o.kt)(i.Z,{value:"php",label:"PHP",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-php",mdxType:"CodeBlock"},'<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n//////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and how we want to annotate\n// new bounding boxes. Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change these based on the new bounding boxes you want to annotate\n$INPUT_ID = "a8748df4938447e4844b2f505c8eaaef";\n$CONCEPT_ID_1 = "tree";\n$CONCEPT_ID_2 = "water";\n$CONCEPT_ID_3 = "bike";  \n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\PostAnnotationsRequest;\nuse Clarifai\\Api\\Annotation;\nuse Clarifai\\Api\\BoundingBox;\nuse Clarifai\\Api\\Concept;\nuse Clarifai\\Api\\Data;\nuse Clarifai\\Api\\Region;\nuse Clarifai\\Api\\RegionInfo;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PostAnnotations(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new PostAnnotationsRequest([\n        "user_app_id" => $userDataObject, \n        "annotations" => [\n             new Annotation([\n                "input_id" => $INPUT_ID,\n                "data" => new Data([\n                    "regions" => [\n                        new Region([\n                            "region_info" => new RegionInfo([\n                                "bounding_box" => new BoundingBox([  // draw a bounding box\n                                    "top_row" => 0,\n                                    "left_col" => 0,\n                                    "bottom_row" => 0.5,\n                                    "right_col" => 0.5\n                                ])                                \n                            ]),\n                            "data" => new Data([\n                                "concepts" => [\n                                    new Concept([ "id" => $CONCEPT_ID_1, "value" => 1. ]), // 1 means true, this concept is present\n                                    new Concept([ "id" => $CONCEPT_ID_2, "value" => 0. ]), // 0 means false, this concept is not present\n                                ]\n                            ])\n                        ])\n                    ]\n                ])\n            ]),\n            new Annotation([\n                "input_id" => $INPUT_ID,\n                "data" => new Data([\n                    "regions" => [\n                        new Region([\n                            "region_info" => new RegionInfo([\n                                "bounding_box" => new BoundingBox([  // draw another bounding box\n                                    "top_row" => 0.6,\n                                    "left_col" => 0.6,\n                                    "bottom_row" => 0.8,\n                                    "right_col" => 0.8\n                                ])                                \n                            ]),\n                            "data" => new Data([\n                                "concepts" => [\n                                    new Concept([ "id" => $CONCEPT_ID_3, "value" => 1. ]), // 1 means true, this concept is present                                    \n                                ]\n                            ])\n                        ])\n                    ]\n                ])\n             ])\n        ]\n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\n?>')),(0,o.kt)(i.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-bash",mdxType:"CodeBlock"},'# Draw two bounding boxes in the same region\n# Value of 1 means true, this concept is present\n# Value of 0 means false, this concept is not present\n\ncurl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/annotations" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "annotations": [\n      {\n        "input_id": "YOUR_INPUT_ID_HERE",\n        "data": {\n          "regions": [\n            {\n              "region_info": {\n                  "bounding_box": {\n                      "top_row": 0,\n                      "left_col": 0,\n                      "bottom_row": 0.5,\n                      "right_col": 0.5\n                  }\n              },\n              "data": {\n                "concepts": [\n                  {\n                    "id": "tree",\n                    "value": 1\n                  },\n                  {\n                    "id": "water",\n                    "value": 0\n                  }\n                ]\n              }\n            }\n          ]\n        }        \n      }, {\n        "input_id": "YOUR_INPUT_ID_HERE",\n        "data": {\n          "regions": [\n            {\n              "region_info": {\n                  "bounding_box": {\n                      "top_row": 0.6,\n                      "left_col": 0.6,\n                      "bottom_row": 0.8,\n                      "right_col": 0.8\n                  }\n              },\n              "data": {\n                "concepts": [\n                  {\n                    "id": "bike",\n                    "value": 1\n                  }\n                ]\n              }\n            }\n          ]\n        }        \n      }\n    ]\n}\''))),(0,o.kt)("h3",{id:"annotate-polygons-in-an-image"},"Annotate Polygons in an Image"),(0,o.kt)("p",null,"Below is an example of how to provide annotations within any polygon-shaped region of an image. "),(0,o.kt)("p",null,"These are the list of points that connect together to form a polygon:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"row"),"\u2014The row location of the point. This has a ","[0.0-1.0]"," range with 0.0 being top row and 1.0\nbeing the bottom row;"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"col"),"\u2014The column location of the point. This has a ","[0.0-1.0]"," range with 0.0 being left col and 1.0\nbeing the right col;"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"z"),"\u2014Depth, if applicable, of the point.")),(0,o.kt)(s.Z,{mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-python",mdxType:"CodeBlock"},"#########################################################################################\n# In this section, we set the user authentication, app ID, and how we want to annotate\n# a polygon. Change these strings to run your own example.\n#########################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these based on the polygon you want to annotate\nINPUT_ID = \"ca8666e974ac4c2c8dfbd7df1e7cbc44\"\nCONCEPT_ID_1 = \"tree\"\nCONCEPT_ID_2 = \"water\"\nCONCEPT_ID_3 = \"bike\"\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\n\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\npost_annotations_response = stub.PostAnnotations(\n    service_pb2.PostAnnotationsRequest(\n        # The userDataObject is created in the overview and is required when using a PAT\n        user_app_id=userDataObject,\n        annotations=[\n            resources_pb2.Annotation(\n                input_id=INPUT_ID,\n                data=resources_pb2.Data(\n                    regions=[\n                        resources_pb2.Region(\n                            region_info=resources_pb2.RegionInfo(\n                                polygon=resources_pb2.Polygon(     # draw a polygon\n                                    points=[\n                                        resources_pb2.Point(row=0.30),    # row location of the point, with a [0.0-1.0] range\n                                        resources_pb2.Point(col=0.50),  # column location of the point, with a [0.0-1.0] range\n                                        resources_pb2.Point(z=0.50)     # depth, if applicable, of the point\n                                    ]\n                                )\n                            ),\n                            data=resources_pb2.Data(\n                                concepts=[                                    \n                                    resources_pb2.Concept(id=CONCEPT_ID_1, value=1), # 1 means true, this concept is present                                    \n                                    resources_pb2.Concept(id=CONCEPT_ID_2, value=0)  # 0 means false, this concept is not present\n                                ]\n                            )\n                        )\n                    ]\n                )\n                \n            ),\n            resources_pb2.Annotation(\n                input_id=INPUT_ID,\n                data=resources_pb2.Data(\n                    regions=[\n                        resources_pb2.Region(\n                            region_info=resources_pb2.RegionInfo(\n                                polygon=resources_pb2.Polygon(        # draw another polygon\n                                    points=[\n                                        resources_pb2.Point(row=0.60),\n                                        resources_pb2.Point(col=0.80),\n                                        resources_pb2.Point(z=0.50)\n                                    ]\n                                )\n                            ),\n                            data=resources_pb2.Data(\n                                concepts=[                                    \n                                    resources_pb2.Concept(id=CONCEPT_ID_3, value=1), # 1 means true, this concept is present\n                                ]\n                            )\n                        )\n                    ]\n                )\n                \n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif post_annotations_response.status.code != status_code_pb2.SUCCESS:\n    print(post_annotations_response.status)\n    raise Exception(\"Post annotations failed, status: \" + post_annotations_response.status.description)\n\n")),(0,o.kt)(i.Z,{value:"js_rest",label:"JavaScript (REST)",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-javascript",mdxType:"CodeBlock"},'\x3c!--index.html file--\x3e\n\n<script>\n    //////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and how we want to annotate\n    // a polygon. Change these strings to run your own example.\n    /////////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = \'YOUR_USER_ID_HERE\';\n    // Your PAT (Personal Access Token) can be found in the portal under Authentification\n    const PAT = \'YOUR_PAT_HERE\';\n    const APP_ID = \'YOUR_APP_ID_HERE\';\n    // Change these based on the polygon you want to annotate\n    const INPUT_ID = "a8748df4938447e4844b2f505c8eaaef";\n    const CONCEPT_ID_1 = "tree";\n    const CONCEPT_ID_2 = "water";\n    const CONCEPT_ID_3 = "bike";    \n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        "user_app_id": {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        "annotations": [\n            {\n                "input_id": INPUT_ID,\n                "data": {\n                    "regions": [\n                        {\n                            "region_info": {\n                                "polygon": {\n                                    "points": [\n                                        {\n                                            "row": 0.30\n                                        },\n                                        {\n                                            "col": 0.50\n                                        },\n                                        {\n                                            "z": 0.50\n                                        }\n                                    ]\n                                }\n                            },\n                            "data": {\n                                // 1 means true, this concept is present\n                                // 0 means false, this concept is not present\n                                "concepts": [\n                                    {\n                                        "id": CONCEPT_ID_1,\n                                        "value": 1\n                                    },\n                                    {\n                                        "id": CONCEPT_ID_2,\n                                        "value": 0\n                                    }\n                                ]\n                            }\n                        }\n                    ]\n                }\n                \n            }, {\n                "input_id": INPUT_ID,\n                "data": {\n                    "regions": [\n                        {\n                            "region_info": {\n                                "polygon": {\n                                    "points": [\n                                        {\n                                            "row": 0.60\n                                        },\n                                        {\n                                            "col": 0.80\n                                        },\n                                        {\n                                            "z": 0.50\n                                        }\n\n                                    ]\n\n                                }\n                            },\n                            "data": {\n                                "concepts": [\n                                    {\n                                        "id": CONCEPT_ID_3,\n                                        "value": 1\n                                    }\n                                ]\n                            }\n                        }\n                    ]\n                }\n                \n            }\n        ]\n    });\n\n    const requestOptions = {\n        method: \'POST\',\n        headers: {\n            \'Accept\': \'application/json\',\n            \'Authorization\': \'Key \' + PAT\n        },\n        body: raw\n    };\n\n    fetch("https://api.clarifai.com/v2/annotations", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log(\'error\', error));\n\n<\/script>')),(0,o.kt)(i.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-javascript",mdxType:"CodeBlock"},'//index.js file\n\n//////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and how we want to annotate\n// a polygon. Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n// Change these based on the polygon you want to annotate\nconst INPUT_ID = "c9cbb1c90cf24bc98bfd2e529e744ca9";\nconst CONCEPT_ID_1 = "tree";\nconst CONCEPT_ID_2 = "water";\nconst CONCEPT_ID_3 = "bike";\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PostAnnotations(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        annotations: [\n            {                     // label a region in this image\n                input_id: INPUT_ID,\n                data: {\n                    regions: [\n                        {\n                            region_info: {\n                                polygon: {        // draw a polygon\n                                    points: [\n                                        {\n                                            row: 0.30  // row location of the point, with a [0.0-1.0] range\n                                        },\n                                        {\n                                            col: 0.50  // column location of the point, with a [0.0-1.0] range\n                                        },\n                                        {\n                                            z: 0.50  // depth, if applicable, of the point\n                                        }\n                                    ]\n                                }\n                            },\n                            // 1 means true, this concept is present\n                            // 0 means false, this concept is not present\n                            data: {\n                                concepts: [\n                                    { id: CONCEPT_ID_1, value: 1 },\n                                    { id: CONCEPT_ID_2, value: 0 }\n                                ]\n                            },\n                        }\n                    ]\n                }\n                \n            }, {                     // label another region in this image\n                input_id: INPUT_ID,\n                data: {\n                    regions: [\n                        {\n                            region_info: {\n                                polygon: {        // draw another polygon\n                                    points: [\n                                        {\n                                            row: 0.60\n                                        },\n                                        {\n                                            col: 0.80\n                                        },\n                                        {\n                                            z: 0.50\n                                        }\n\n                                    ]\n                                }\n                            },\n                            // 1 means true, this concept is present\n                            // 0 means false, this concept is not present\n                            data: {\n                                concepts: [\n                                    { id: CONCEPT_ID_3, value: 1 },\n                                ]\n                            },\n                        }\n                    ]\n                }\n                \n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post annotations failed, status: " + response.status.description);\n        }\n    }\n);')),(0,o.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-java",mdxType:"CodeBlock"},'package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    //////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and how we want to annotate\n    // a polygon. Change these strings to run your own example.\n    /////////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\t\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these based on the polygon you want to annotate\n    static final String INPUT_ID = "c9cbb1c90cf24bc98bfd2e529e744ca9";\n    static final String CONCEPT_ID_1 = "tree";\n    static final String CONCEPT_ID_2 = "water";\n    static final String CONCEPT_ID_3 = "bike";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\t\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiAnnotationResponse postAnnotationsResponse = stub.postAnnotations(\n            PostAnnotationsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .addAnnotations(\n                Annotation.newBuilder() // label a region in this image\n                .setInputId(INPUT_ID)\n                .setData(\n                    Data.newBuilder().addRegions(\n                        Region.newBuilder()\n                        .setRegionInfo(\n                            RegionInfo.newBuilder()\n                            .setPolygon( // draw a polygon\n                                Polygon.newBuilder()\n                                .addPoints(Point.newBuilder().setRow(0.3f)) // row location of the point, with a [0.0-1.0] range\n                                .addPoints(Point.newBuilder().setCol(0.5f)) // column location of the point, with a [0.0-1.0] range\n                                .addPoints(Point.newBuilder().setZ(0.5f)) // depth, if applicable, of the point\n                                .build()\n                            )\n                            .build()\n                        )\n                        .setData(\n                            Data.newBuilder()\n                            .addConcepts(\n                                Concept.newBuilder()\n                                .setId(CONCEPT_ID_1)\n                                .setValue(1f) // 1 means true, this concept is present\n                                .build()\n                            )\n                            .addConcepts(\n                                Concept.newBuilder()\n                                .setId(CONCEPT_ID_2)\n                                .setValue(0f) // 0 means false, this concept is not present\n                                .build()\n                            )\n                        ).build()\n                    ).build()\n                )\n                .build()\n            )\n            .addAnnotations( // label another region in this image\n                Annotation.newBuilder()\n                .setInputId(INPUT_ID)\n                .setData(\n                    Data.newBuilder().addRegions(\n                        Region.newBuilder()\n                        .setRegionInfo(\n                            RegionInfo.newBuilder()\n                            .setPolygon( // draw another polygon\n                                Polygon.newBuilder()\n                                .addPoints(Point.newBuilder().setRow(0.6f))\n                                .addPoints(Point.newBuilder().setCol(0.8f))\n                                .addPoints(Point.newBuilder().setZ(0.5f))\n                                .build()\n                            )\n                            .build()\n                        )\n                        .setData(\n                            Data.newBuilder()\n                            .addConcepts(\n                                Concept.newBuilder()\n                                .setId(CONCEPT_ID_3)\n                                .setValue(1f) // 1 means true, this concept is present\n                                .build()\n                            )\n                        ).build()\n                    ).build()\n                ).build()\n            ).build()\n        );\n\n        if (postAnnotationsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post annotations failed, status: " + postAnnotationsResponse.getStatus());\n        }\n\n    }\n\n}')),(0,o.kt)(i.Z,{value:"php",label:"PHP",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-php",mdxType:"CodeBlock"},'<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n//////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and how we want to annotate\n// a polygon. Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change these based on the polygon you want to annotate\n$INPUT_ID = "a8748df4938447e4844b2f505c8eaaef";\n$CONCEPT_ID_1 = "tree";\n$CONCEPT_ID_2 = "water";\n$CONCEPT_ID_3 = "bike";  \n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\PostAnnotationsRequest;\nuse Clarifai\\Api\\Annotation;\nuse Clarifai\\Api\\Concept;\nuse Clarifai\\Api\\Data;\nuse Clarifai\\Api\\Point;\nuse Clarifai\\Api\\Polygon;\nuse Clarifai\\Api\\Region;\nuse Clarifai\\Api\\RegionInfo;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PostAnnotations(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new PostAnnotationsRequest([\n        "user_app_id" => $userDataObject, \n        "annotations" => [\n             new Annotation([\n                "input_id" => $INPUT_ID,\n                "data" => new Data([\n                    "regions" => [\n                        new Region([\n                            "region_info" => new RegionInfo([\n                                "polygon" => new Polygon([  // draw a polygon\n                                    "points" => [\n                                        new Point(["row" => 0.30]), //  row location of the point, with a [0.0-1.0] range\n                                        new Point(["col" => 0.50]), // column location of the point, with a [0.0-1.0] range\n                                        new Point(["z" => 0.50]) // depth, if applicable, of the point\n                                    ]                                    \n                                ])                                \n                            ]),\n                            "data" => new Data([\n                                "concepts" => [\n                                    new Concept([ "id" => $CONCEPT_ID_1, "value" => 1. ]), // 1 means true, this concept is present\n                                    new Concept([ "id" => $CONCEPT_ID_2, "value" => 0. ]), // 0 means false, this concept is not present\n                                ]\n                            ])\n                        ])\n                    ]\n                ])\n            ]),\n            new Annotation([\n                "input_id" => $INPUT_ID,\n                "data" => new Data([\n                    "regions" => [\n                        new Region([\n                            "region_info" => new RegionInfo([\n                                "polygon" => new Polygon([  // draw another polygon\n                                    "points" => [\n                                        new Point(["row" => 0.60]), \n                                        new Point(["col" => 0.80]), \n                                        new Point(["z" => 0.50]) \n                                    ]                                      \n                                ])                                \n                            ]),\n                            "data" => new Data([\n                                "concepts" => [\n                                    new Concept([ "id" => $CONCEPT_ID_3, "value" => 1. ]), // 1 means true, this concept is present                                    \n                                ]\n                            ])\n                        ])\n                    ]\n                ])\n             ])\n        ]\n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\n?>')),(0,o.kt)(i.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-bash",mdxType:"CodeBlock"},'# Value of 1 means true, this concept is present\n# Value of 0 means false, this concept is not present\n\ncurl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/annotations" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n   "annotations": [\n            {\n                "input_id": "YOUR_INPUT_ID_HERE",\n                "data": {\n                    "regions": [\n                        {\n                            "region_info": {\n                                "polygon": {\n                                    "points": [\n                                        {\n                                            "row": 0.30\n                                        },\n                                        {\n                                            "col": 0.50\n                                        },\n                                        {\n                                            "z": 0.50\n                                        }\n                                    ]\n                                }\n                            },\n                            "data": {                                \n                                "concepts": [\n                                    {\n                                        "id": "YOUR_CONCEPT_ID_1",\n                                        "value": 1\n                                    },\n                                    {\n                                        "id": "YOUR_CONCEPT_ID_2",\n                                        "value": 0\n                                    }\n                                ]\n                            }\n                        }\n                    ]\n                }\n                \n            }, {\n                "input_id": "YOUR_INPUT_ID_HERE",\n                "data": {\n                    "regions": [\n                        {\n                            "region_info": {\n                                "polygon": {\n                                    "points": [\n                                        {\n                                            "row": 0.60\n                                        },\n                                        {\n                                            "col": 0.80\n                                        },\n                                        {\n                                            "z": 0.50\n                                        }\n\n                                    ]\n\n                                }\n                            },\n                            "data": {\n                                "concepts": [\n                                    {\n                                        "id": "YOUR_CONCEPT_ID_3",\n                                        "value": 1\n                                    }\n                                ]\n                            }\n                        }\n                    ]\n                }\n                \n            }\n        ]\n}\''))),(0,o.kt)("h3",{id:"annotate-existing-regions-in-an-image"},"Annotate Existing Regions in an Image"),(0,o.kt)("p",null,"When you add an input, detection models ","(","such as ",(0,o.kt)("inlineCode",{parentName:"p"},"Face Detection")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"General Detection"),")"," will detect regions in your image where there appear to be relevant objects. You can get the IDs of these detected regions by ",(0,o.kt)("a",{parentName:"p",href:"https://docs.clarifai.com/api-guide/annotate/annotations#list-annotations"},"listing model's annotations"),"."),(0,o.kt)("p",null,"Your labels should be contained within ",(0,o.kt)("inlineCode",{parentName:"p"},"Region.data"),". Each annotation can only have 1 region. If you want to label multiple regions, it is possible to label multiple annotations in a single API call."),(0,o.kt)("p",null,"Below is an example of how to annotate existing regions in an image."),(0,o.kt)(s.Z,{mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-python",mdxType:"CodeBlock"},'########################################################################################\n# In this section, we set the user authentication, app ID, and how we want to annotate\n# existing regions in an image. Change these strings to run your own example.\n#########################################################################################\n\nUSER_ID = \'YOUR_USER_ID_HERE\'\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = \'YOUR_PAT_HERE\'\nAPP_ID = \'YOUR_APP_ID_HERE\'\n# Change these based on the existing regions you want to annotate\nINPUT_ID = "53d0362a9dfa4e03b2293375e2d0db73"\nCONCEPT_ID_1 = "tree"\nCONCEPT_ID_2 = "water"\nCONCEPT_ID_3 = "bike"\nREGION_ID_1 = "361d6a9253be9152968012660258a4bf"\nREGION_ID_2 = "dcfa961b753f3b197d0bf7b242718ab1"\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = ((\'authorization\', \'Key \' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\npost_annotations_response = stub.PostAnnotations(\n    service_pb2.PostAnnotationsRequest(\n        user_app_id=userDataObject,  # The userDataObject is created in the overview and is required when using a PAT\n        annotations=[\n            resources_pb2.Annotation(                # label a region in this image\n                input_id=INPUT_ID,\n                data=resources_pb2.Data(\n                    regions=[\n                        resources_pb2.Region(\n                            id=REGION_ID_1,  # this should be a region id returned from list annotations call\n                            data=resources_pb2.Data(\n                                concepts=[\n                                    resources_pb2.Concept(id=CONCEPT_ID_1, value=1.),  # 1 means true, this concept is present.\n                                    resources_pb2.Concept(id=CONCEPT_ID_2, value=0.)  # 0 means false, this concept is not present.\n                                ]\n                            )\n                        )\n                    ]\n                )\n                \n            ),\n            resources_pb2.Annotation(                # label another region in this image\n                input_id=INPUT_ID,\n                data=resources_pb2.Data(\n                    regions=[\n                        resources_pb2.Region(\n                            id=REGION_ID_2 ,  # this should be a region id returned from list annotations call\n                            data=resources_pb2.Data(\n                                concepts=[\n                                    resources_pb2.Concept(id=CONCEPT_ID_3, value=1.),  # 1 means true, this concept is present.\n                                ]\n                            )\n                        )\n                    ]\n                )\n                \n            ),\n        ]\n    ),\n    metadata=metadata\n)   \n       \n\nif post_annotations_response.status.code != status_code_pb2.SUCCESS:\n    print(post_annotations_response.status)\n    raise Exception("Post annotations failed, status: " + post_annotations_response.status.description)\n\n')),(0,o.kt)(i.Z,{value:"js_rest",label:"JavaScript (REST)",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-javascript",mdxType:"CodeBlock"},'\x3c!--index.html file--\x3e\n\n<script>\n    //////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and how we want to annotate\n    // existing regions in an image. Change these strings to run your own example.\n    /////////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = \'YOUR_USER_ID_HERE\';\n    // Your PAT (Personal Access Token) can be found in the portal under Authentification\n    const PAT = \'YOUR_PAT_HERE\';\n    const APP_ID = \'YOUR_APP_ID_HERE\';\n    // Change these based on the existing regions you want to annotate\n    const INPUT_ID = "c9cbb1c90cf24bc98bfd2e529e744ca9";\n    const CONCEPT_ID_1 = "tree";\n    const CONCEPT_ID_2 = "water";\n    const CONCEPT_ID_3 = "bike";\n    const REGION_ID_1 = "361d6a9253be9152968012660258a4bf";\n    const REGION_ID_2 = "dcfa961b753f3b197d0bf7b242718ab1";\n    \n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        "user_app_id": {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        "annotations": [\n            {\n                "input_id": INPUT_ID,\n                "data": {\n                    "regions": [\n                        {\n                            "id": REGION_ID_1,\n                            "data": {\n                                "concepts": [\n                                    {\n                                        "id": CONCEPT_ID_1,\n                                        "value": 1\n                                    },\n                                    {\n                                        "id": CONCEPT_ID_2,\n                                        "value": 0\n                                    }\n                                ]\n                            }\n                        }\n                    ]\n                }\n                \n            }, {\n                "input_id": INPUT_ID,\n                "data": {\n                    "regions": [\n                        {\n                            "id": REGION_ID_2,\n                            "data": {\n                                "concepts": [\n                                    {\n                                        "id": CONCEPT_ID_3,\n                                        "value": 1\n                                    }\n                                ]\n                            }\n                        }\n                    ]\n                }\n                \n            }\n        ]\n    });\n\n    const requestOptions = {\n        method: \'POST\',\n        headers: {\n            \'Accept\': \'application/json\',\n            \'Authorization\': \'Key \' + PAT\n        },\n        body: raw\n    };\n\n    fetch("https://api.clarifai.com/v2/annotations", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log(\'error\', error));\n\n<\/script>')),(0,o.kt)(i.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-javascript",mdxType:"CodeBlock"},'//index.js file\n\n//////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and how we want to annotate\n// existing regions in an image. Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n// Change these based on the existing regions you want to annotate\nconst INPUT_ID = "c9cbb1c90cf24bc98bfd2e529e744ca9";\nconst CONCEPT_ID_1 = "tree";\nconst CONCEPT_ID_2 = "water";\nconst CONCEPT_ID_3 = "bike";\nconst REGION_ID_1 = "361d6a9253be9152968012660258a4bf";\nconst REGION_ID_2 = "dcfa961b753f3b197d0bf7b242718ab1";\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PostAnnotations(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        annotations: [\n            {                // label a region in this image\n                input_id: INPUT_ID,\n                data: {\n                    regions: [\n                        {\n                            id: REGION_ID_1, // this should be a region id  returned from list annotations call\n                            // 1 means true, this concept is present.\n                            // 0 means false, this concept is not present.\n                            data: {\n                                concepts: [\n                                    { id: CONCEPT_ID_1, value: 1 },\n                                    { id: CONCEPT_ID_2, value: 0 }\n                                ]\n                            },\n                        }\n                    ]\n                }\n                \n            }, {                // label another region in this image\n                input_id: INPUT_ID,\n                data: {\n                    regions: [\n                        {\n                            id: REGION_ID_2, // this should be a region id  returned from list annotations call\n                            // 1 means true, this concept is present.\n                            // 0 means false, this concept is not present.\n                            data: {\n                                concepts: [\n                                    { id: CONCEPT_ID_3, value: 1 },\n                                ]\n                            },\n                        }\n                    ]\n                }\n                \n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post annotations failed, status: " + response.status.description);\n        }\n    }\n);')),(0,o.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-java",mdxType:"CodeBlock"},'package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    //////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and how we want to annotate\n    // existing regions in an image. Change these strings to run your own example.\n    /////////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\t\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these based on the existing regions you want to annotate\n    static final String INPUT_ID = "c9cbb1c90cf24bc98bfd2e529e744ca9";\n    static final String CONCEPT_ID_1 = "tree";\n    static final String CONCEPT_ID_2 = "water";\n    static final String CONCEPT_ID_3 = "bike";\n    static final String REGION_ID_1 = "361d6a9253be9152968012660258a4bf";\n    static final String REGION_ID_2 = "dcfa961b753f3b197d0bf7b242718ab1";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\t\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiAnnotationResponse postAnnotationsResponse = stub.postAnnotations(\n            PostAnnotationsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .addAnnotations(\n                Annotation.newBuilder() // label a region in this image\n                .setInputId(INPUT_ID)\n                .setData(\n                    Data.newBuilder().addRegions(\n                        Region.newBuilder()\n                        .setId(REGION_ID_1) // this should be a region id returned from list annotations call\n                        .setData(\n                            Data.newBuilder().addConcepts(\n                                Concept.newBuilder()\n                                .setId(CONCEPT_ID_1)\n                                .setValue(1f) // 1 means true, this concept is present\n                                .build()\n                            ).addConcepts(\n                                Concept.newBuilder()\n                                .setId(CONCEPT_ID_2)\n                                .setValue(0f) // 0 means false, this concept is not present\n                                .build()\n                            )\n                        ).build()\n                    ).build()\n                )\n                .build()\n            ).addAnnotations(\n                Annotation.newBuilder() // label another region in the same image\n                .setInputId(INPUT_ID)\n                .setData(\n                    Data.newBuilder().addRegions(\n                        Region.newBuilder()\n                        .setId(REGION_ID_2) // this should be a region id returned from list annotations call\n                        .setData(\n                            Data.newBuilder().addConcepts(\n                                Concept.newBuilder()\n                                .setId(CONCEPT_ID_3)\n                                .setValue(1f) // 1 means true, this concept is present\n                                .build()\n                            )\n                        ).build()\n                    ).build()\n                ).build()\n            ).build()\n        );\n\n        if (postAnnotationsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post annotations failed, status: " + postAnnotationsResponse.getStatus());\n        }\n\n    }\n\n}')),(0,o.kt)(i.Z,{value:"php",label:"PHP",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-php",mdxType:"CodeBlock"},'<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n//////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and how we want to annotate\n// existing regions in an image. Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change these based on the existing regions you want to annotate\n$INPUT_ID = "c9cbb1c90cf24bc98bfd2e529e744ca9";\n$CONCEPT_ID_1 = "tree";\n$CONCEPT_ID_2 = "water";\n$CONCEPT_ID_3 = "bike";\n$REGION_ID_1 = "361d6a9253be9152968012660258a4bf";\n$REGION_ID_2 = "dcfa961b753f3b197d0bf7b242718ab1"; \n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\PostAnnotationsRequest;\nuse Clarifai\\Api\\Annotation;\nuse Clarifai\\Api\\Concept;\nuse Clarifai\\Api\\Data;\nuse Clarifai\\Api\\Region;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PostAnnotations(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new PostAnnotationsRequest([\n        "user_app_id" => $userDataObject, \n        "annotations" => [\n             new Annotation([           // label a region in this image\n                "input_id" => $INPUT_ID,\n                "data" => new Data([\n                    "regions" => [\n                        new Region([\n                            "id" => $REGION_ID_1, // this should be a region id returned from list annotations call\n                            "data" => new Data([\n                                "concepts" => [\n                                    new Concept([ "id" => $CONCEPT_ID_1, "value" => 1. ]), // 1 means true, this concept is present\n                                    new Concept([ "id" => $CONCEPT_ID_2, "value" => 0. ]), // 0 means false, this concept is not present\n                                ]\n                            ])\n                        ])\n                    ]\n                ])\n            ]),\n            new Annotation([    // label another region in this image\n                "input_id" => $INPUT_ID,\n                "data" => new Data([\n                    "regions" => [\n                        new Region([\n                            "id" => $REGION_ID_2, // this should be a region id returned from list annotations call\n                            "data" => new Data([\n                                "concepts" => [\n                                    new Concept([ "id" => $CONCEPT_ID_3, "value" => 1. ]), // 1 means true, this concept is present                                    \n                                ]\n                            ])\n                        ])\n                    ]\n                ])\n             ])\n        ]\n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\n?>')),(0,o.kt)(i.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-bash",mdxType:"CodeBlock"},'# Value of 1 means true, this concept is present\n# Value of 0 means false, this concept is not present\n# Region ID should be the region ID returned from a list annotations call\n\ncurl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/annotations" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "annotations": [\n      {\n        "input_id": "YOUR_INPUT_ID_HERE",\n        "data": {\n          "regions": [\n            {\n              "id": "REGION_ID_1",\n              "data": {\n                "concepts": [\n                  {\n                    "id": "tree",\n                    "value": 1\n                  },\n                  {\n                    "id": "water",\n                    "value": 0\n                  }\n                ]\n              }\n            }\n          ]\n        }        \n      }, {\n        "input_id": "YOUR_INPUT_ID_HERE",\n        "data": {\n          "regions": [\n            {\n              "id": "REGION_ID_2",\n              "data": {\n                "concepts": [\n                  {\n                    "id": "bike",\n                    "value": 1\n                  }\n                ]\n              }\n            }\n          ]\n        }        \n      }\n    ]\n}\''))),(0,o.kt)("h3",{id:"annotate-images-with-different-user_id-and-status"},"Annotate Images With Different ",(0,o.kt)("inlineCode",{parentName:"h3"},"user_id")," and ",(0,o.kt)("inlineCode",{parentName:"h3"},"status")),(0,o.kt)("p",null,"Each annotation is tied to a user or a model in your workflow. By default, when a user posts an annotation, this user is the owner of the annotation. "),(0,o.kt)("p",null,"Sometimes, however, you might want to post an annotation as another user; for example, when assigning an image to another user. In such a case, you can create an annotation with another ",(0,o.kt)("inlineCode",{parentName:"p"},"user_id")," ","(","and status ",(0,o.kt)("inlineCode",{parentName:"p"},"PENDING"),")","."),(0,o.kt)("admonition",{title:"note",type:"important"},(0,o.kt)("p",{parentName:"admonition"},"Only the app owner can post an annotation with other user's ",(0,o.kt)("inlineCode",{parentName:"p"},"user_id"),"; collaborators cannot.")),(0,o.kt)("p",null,"Below is an example of how to annotate images with different ",(0,o.kt)("inlineCode",{parentName:"p"},"user_id")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"status"),"."),(0,o.kt)(s.Z,{mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-python",mdxType:"CodeBlock"},"#########################################################################\n# In this section, we set the user authentication, app ID, input ID, \n# and another user ID. Change these strings to run your own example.\n#########################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to post your own annotations\nINPUT_ID = 'e838fac8da9d40c89f2291a6496593da'\nANOTHER_USER_ID = 'ANOTHER_USER_ID_HERE'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2, status_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID) # The userDataObject is created in the overview and is required when using a PAT\n\npost_annotations_response = stub.PostAnnotations(\n    service_pb2.PostAnnotationsRequest(\n        user_app_id=userDataObject,  \n        annotations=[\n            resources_pb2.Annotation(\n                input_id=INPUT_ID,\n                user_id=ANOTHER_USER_ID,    # If empty, it is the user who posts this annotation\n                status=status_pb2.Status(\n                    code=status_code_pb2.ANNOTATION_PENDING  # annotation pending status. By default success.\n                ),\n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif post_annotations_response.status.code != status_code_pb2.SUCCESS:\n    print(post_annotations_response.status)    \n    raise Exception(\"Post annotations failed, status: \" + post_annotations_response.status.description)\n    ")),(0,o.kt)(i.Z,{value:"js_rest",label:"JavaScript (REST)",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-javascript",mdxType:"CodeBlock"},"\x3c!--index.html file--\x3e\n\n<script>\n    ////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, input ID, \n    // and another user ID. Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = 'YOUR_USER_ID_HERE';\n    // Your PAT (Personal Access Token) can be found in the portal under Authentification\n    const PAT = 'YOUR_PAT_HERE';\n    const APP_ID = 'YOUR_APP_ID_HERE';\n    // Change these to post your own annotations\n    const INPUT_ID = 'c9cbb1c90cf24bc98bfd2e529e744ca9';\n    const ANOTHER_USER_ID = 'ANOTHER_USER_ID_HERE';\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        \"user_app_id\": {\n            \"user_id\": USER_ID,\n            \"app_id\": APP_ID\n        },\n        \"annotations\": [\n            {\n                \"input_id\": INPUT_ID,\n                \"user_id\": ANOTHER_USER_ID,\n                \"status\": {\n                    \"code\": \"ANNOTATION_PENDING\"\n                }\n            }\n        ]\n    });\n\n    const requestOptions = {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        },\n        body: raw\n    };\n\n    fetch(\"https://api.clarifai.com/v2/annotations\", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n\n<\/script>")),(0,o.kt)(i.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-javascript",mdxType:"CodeBlock"},'//index.js file\n\n////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, input ID, \n// and another user ID. Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n// Change these to post your own annotations\nconst INPUT_ID = \'c9cbb1c90cf24bc98bfd2e529e744ca9\';\nconst ANOTHER_USER_ID = \'ANOTHER_USER_ID_HERE\';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PostAnnotations(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        annotations: [\n            {\n                input_id: INPUT_ID,\n                user_id: ANOTHER_USER_ID,  // If empty, it is the user who posts this annotation\n                status: {\n                    code: 24151    // annotation pending status. By default success.\n                }\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post annotations failed, status: " + response.status.description);\n        }\n    }\n);')),(0,o.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-java",mdxType:"CodeBlock"},'package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.status.Status;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    //////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, input ID, \n    // and another user ID. Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\t\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to post your own annotations\n    static final String INPUT_ID = "c9cbb1c90cf24bc98bfd2e529e744ca9";\n    static final String ANOTHER_USER_ID = "ANOTHER_USER_ID_HERE";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\t\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiAnnotationResponse postAnnotationsResponse = stub.postAnnotations(\n            PostAnnotationsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .addAnnotations(\n                Annotation.newBuilder()\n                .setInputId(INPUT_ID)\n                .setUserId(ANOTHER_USER_ID) // If empty, it is the user who posts this annotation\n                .setStatus(\n                    Status.newBuilder()\n                    .setCodeValue(StatusCode.ANNOTATION_PENDING_VALUE) // annotation pending status. By default, it\'s ANNOTATION_SUCCESS_VALUE\n                    .build()\n                )\n                .build()\n            ).build()\n        );\n\n        if (postAnnotationsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post annotations failed, status: " + postAnnotationsResponse.getStatus());\n        }\n\n\n    }\n\n}')),(0,o.kt)(i.Z,{value:"php",label:"PHP",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-php",mdxType:"CodeBlock"},'<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, input ID, \n// and another user ID. Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change these to post your own annotations\n$INPUT_ID = "c9cbb1c90cf24bc98bfd2e529e744ca9";\n$ANOTHER_USER_ID = "ANOTHER_USER_ID_HERE";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\PostAnnotationsRequest;\nuse Clarifai\\Api\\Annotation;\nuse Clarifai\\Api\\Status\\Status;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PostAnnotations(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new PostAnnotationsRequest([\n        "user_app_id" => $userDataObject, \n        "annotations" => [\n             new Annotation([           \n                "input_id" => $INPUT_ID,\n                "user_id" => $ANOTHER_USER_ID, // If empty, it is the user who posts this annotation\n                "status" => new Status([\n                    "code" => StatusCode::ANNOTATION_PENDING  // Annotation pending status. By default success\n                ])\n            ])\n        ]\n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\n?>')),(0,o.kt)(i.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-bash",mdxType:"CodeBlock"},'curl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/annotations" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "annotations": [\n      {\n        "input_id": "YOUR_INPUT_ID_HERE",\n        "user_id": "ANOTHER_USER_ID_HERE",\n        "status": {\n            "code": "ANNOTATION_PENDING"\n        }\n      }\n    ]\n}\''))),(0,o.kt)("h2",{id:"list-annotations"},"List Annotations"),(0,o.kt)("p",null,"You can get a list of annotations within your app with a GET call. Annotations will be returned from oldest to newest."),(0,o.kt)("p",null,"These requests are ",(0,o.kt)("a",{parentName:"p",href:"https://docs.clarifai.com/api-guide/advanced-topics/pagination"},"paginated"),". By default each page will return 20 annotations."),(0,o.kt)("h3",{id:"list-all-user-created-annotations-in-your-app"},"List All User Created Annotations in Your App"),(0,o.kt)("p",null,"Below is an example of how to list all your user labelled annotations."),(0,o.kt)("admonition",{title:"note",type:"important"},(0,o.kt)("p",{parentName:"admonition"},"This will not show annotations by models in your workflow. To include model created annotations, you need to set ",(0,o.kt)("inlineCode",{parentName:"p"},"list_all_annotations")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"True"),".")),(0,o.kt)(s.Z,{mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-python",mdxType:"CodeBlock"},"##################################################################\n# In this section, we set the user authentication and app ID.\n# Change these strings to run your own example.\n##################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\nlist_annotations_response = stub.ListAnnotations(\n    service_pb2.ListAnnotationsRequest(\n        user_app_id=userDataObject,  # The userDataObject is created in the overview and is required when using a PAT\n        per_page=10\n    ),\n    metadata=metadata\n)\n\nif list_annotations_response.status.code != status_code_pb2.SUCCESS:\n    print(list_annotations_response.status)\n    raise Exception(\"List annotations failed, status: \" + list_annotations_response.status.description)\n \nfor annotation_object in list_annotations_response.annotations:\n    print(annotation_object) \n")),(0,o.kt)(i.Z,{value:"js_rest",label:"JavaScript (REST)",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-javascript",mdxType:"CodeBlock"},"\x3c!--index.html file--\x3e\n\n<script>\n    /////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication and app ID.\n    // Change these strings to run your own example.\n    /////////////////////////////////////////////////////////////////////\n\n    const USER_ID = 'YOUR_USER_ID_HERE';\n    // Your PAT (Personal Access Token) can be found in the portal under Authentification\n    const PAT = 'YOUR_PAT_HERE';\n    const APP_ID = 'YOUR_APP_ID_HERE';\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const requestOptions = {\n        method: 'GET',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        }\n    };\n\n    fetch(`https://api.clarifai.com/v2/users/${USER_ID}/apps/${APP_ID}/annotations?page=1&per_page=10`, requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n\n<\/script>")),(0,o.kt)(i.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-javascript",mdxType:"CodeBlock"},'//index.js file\n\n/////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication and app ID.\n// Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.ListAnnotations(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        page: 1,\n        per_page: 10\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("List annotations failed, status: " + response.status.description);\n        }\n\n        for (const annotation of response.annotations) {\n            console.log(JSON.stringify(annotation, null, 2));\n        }\n    }\n);')),(0,o.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-java",mdxType:"CodeBlock"},'package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    ///////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication and app ID.\n    // Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\t\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\t\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiAnnotationResponse listAnnotationsResponse = stub.listAnnotations(\n            ListAnnotationsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .setPerPage(10)\n            .setPage(1) // Pages start at 1\n            .build()\n        );\n\n        if (listAnnotationsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("List annotations failed, status: " + listAnnotationsResponse.getStatus());\n        }\n\n        for (Annotation annotation: listAnnotationsResponse.getAnnotationsList()) {\n            System.out.println(annotation);\n        }\n\n    }\n\n}')),(0,o.kt)(i.Z,{value:"php",label:"PHP",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-php",mdxType:"CodeBlock"},'<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n/////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication and app ID.\n// Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\ListAnnotationsRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->ListAnnotations(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new ListAnnotationsRequest([\n        "user_app_id" => $userDataObject, \n        "per_page"  => 10\n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\nforeach ($response->getAnnotations() as $annotation_object) {\n    echo $annotation_object->SerializeToJSONString() . "</br>";\n}\n\n?>')),(0,o.kt)(i.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-bash",mdxType:"CodeBlock"},'curl -X GET "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/annotations?page=1&per_page=10" \\\n  -H "Authorization: Key YOUR_PAT_HERE" '))),(0,o.kt)("h3",{id:"list-all-annotations-in-your-app"},"List All Annotations in Your App"),(0,o.kt)("p",null,"Below is an example of how to list all annotations, including those created by models."),(0,o.kt)(s.Z,{mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-python",mdxType:"CodeBlock"},"##################################################################\n# In this section, we set the user authentication and app ID.\n# Change these strings to run your own example.\n##################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\nlist_annotations_response = stub.ListAnnotations(\n    service_pb2.ListAnnotationsRequest(\n        user_app_id=userDataObject,  # The userDataObject is created in the overview and is required when using a PAT\n        per_page=10,\n        list_all_annotations=True\n    ),\n    metadata=metadata\n)\n\nif list_annotations_response.status.code != status_code_pb2.SUCCESS:\n    print(list_annotations_response.status)\n    raise Exception(\"List annotations failed, status: \" + list_annotations_response.status.description)\n \nfor annotation_object in list_annotations_response.annotations:\n    print(annotation_object) \n")),(0,o.kt)(i.Z,{value:"js_rest",label:"JavaScript (REST)",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-javascript",mdxType:"CodeBlock"},"\x3c!--index.html file--\x3e\n\n<script>\n    /////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication and app ID.\n    // Change these strings to run your own example.\n    /////////////////////////////////////////////////////////////////////\n\n    const USER_ID = 'YOUR_USER_ID_HERE';\n    // Your PAT (Personal Access Token) can be found in the portal under Authentification\n    const PAT = 'YOUR_PAT_HERE';\n    const APP_ID = 'YOUR_APP_ID_HERE';\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const requestOptions = {\n        method: 'GET',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        }\n    };\n\n    fetch(`https://api.clarifai.com/v2/users/${USER_ID}/apps/${APP_ID}/annotations?page=1&per_page=10&list_all_annotations=true`, requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n\n<\/script>")),(0,o.kt)(i.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-javascript",mdxType:"CodeBlock"},'//index.js file\n\n/////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication and app ID.\n// Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.ListAnnotations(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        list_all_annotations: true,\n        page: 1,\n        per_page: 10\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("List annotations failed, status: " + response.status.description);\n        }\n\n        for (const annotation of response.annotations) {\n            console.log(JSON.stringify(annotation, null, 2));\n        }\n    }\n);')),(0,o.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-java",mdxType:"CodeBlock"},'package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.status.*;\n\npublic class ClarifaiExample {\n\n    ///////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication and app ID.\n    // Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\t\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiAnnotationResponse listAnnotationsResponse = stub.listAnnotations(\n            ListAnnotationsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .setPerPage(10)\n            .setListAllAnnotations(true)\n            .setPage(1) // Pages start at 1\n            .build()\n        );\n\n        if (listAnnotationsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("List annotations failed, status: " + listAnnotationsResponse.getStatus());\n        }\n\n        for (Annotation annotation: listAnnotationsResponse.getAnnotationsList()) {\n            System.out.println(annotation);\n        }\n\n    }\n\n}')),(0,o.kt)(i.Z,{value:"php",label:"PHP",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-php",mdxType:"CodeBlock"},'<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n/////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication and app ID.\n// Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\ListAnnotationsRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->ListAnnotations(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new ListAnnotationsRequest([\n        "user_app_id" => $userDataObject, \n        "per_page"  => 10,\n        "list_all_annotations" => true\n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\nforeach ($response->getAnnotations() as $annotation_object) {\n    echo $annotation_object->SerializeToJSONString() . "</br>";\n}\n\n?>')),(0,o.kt)(i.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-bash",mdxType:"CodeBlock"},'curl -X GET "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/annotations?page=1&per_page=10&list_all_annotations=true" \\\n  -H "Authorization: Key YOUR_PAT_HERE" '))),(0,o.kt)("h3",{id:"list-user-created-annotations-by-input-ids"},"List User Created Annotations by Input IDs"),(0,o.kt)("p",null,"Below is an example of how to list all user created annotations for certain input ","(","one or several",")"," by providing a list of input IDs."),(0,o.kt)("admonition",{title:"note",type:"important"},(0,o.kt)("p",{parentName:"admonition"},"This will not show annotations by models in your workflow. To include model created annotations, you need to set ",(0,o.kt)("inlineCode",{parentName:"p"},"list_all_annotations")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"True"),".")),(0,o.kt)(s.Z,{mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-python",mdxType:"CodeBlock"},"#########################################################################\n# In this section, we set the user authentication, app ID, and input IDs\n# Change these strings to run your own example.\n#########################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to list your own annotations\nINPUT_ID_1 = '53d0362a9dfa4e03b2293375e2d0db73'\nINPUT_ID_2 = '00f6d742124147ac8ca7788f73736fb9' \n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\nlist_annotations_response = stub.ListAnnotations(\n    service_pb2.ListAnnotationsRequest(\n        user_app_id=userDataObject,  # The userDataObject is created in the overview and is required when using a PAT\n        input_ids=[INPUT_ID_1, INPUT_ID_2], \n        per_page=10\n    ),\n    metadata=metadata\n)\n\nif list_annotations_response.status.code != status_code_pb2.SUCCESS:\n    print(list_annotations_response.status)\n    raise Exception(\"List annotations failed, status: \" + list_annotations_response.status.description)\n\nfor annotation_object in list_annotations_response.annotations:\n    print(annotation_object)\n")),(0,o.kt)(i.Z,{value:"js_rest",label:"JavaScript (REST)",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-javascript",mdxType:"CodeBlock"},"\x3c!--index.html file--\x3e\n\n<script>\n    ////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and input IDs.\n    // Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = 'YOUR_USER_ID_HERE';\n    // Your PAT (Personal Access Token) can be found in the portal under Authentification\n    const PAT = 'YOUR_PAT_HERE';\n    const APP_ID = 'YOUR_APP_ID_HERE';\n    // Change this to list your own annotations\n    const INPUT_ID = 'c9cbb1c90cf24bc98bfd2e529e744ca9';\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const requestOptions = {\n        method: 'GET',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        }\n    };\n\n    fetch(`https://api.clarifai.com/v2/users/${USER_ID}/apps/${APP_ID}/annotations?page=1&per_page=10&input_ids=${INPUT_ID}`, requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n\n<\/script>")),(0,o.kt)(i.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-javascript",mdxType:"CodeBlock"},'//index.js file\n\n////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and input IDs.\n// Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n// Change these to list your own annotations\nconst INPUT_ID_1 = \'c9cbb1c90cf24bc98bfd2e529e744ca9\';\nconst INPUT_ID_2 = \'a8748df4938447e4844b2f505c8eaaef\';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.ListAnnotations(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        input_ids: [INPUT_ID_1, INPUT_ID_2],\n        page: 1,\n        per_page: 10\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("List annotations failed, status: " + response.status.description);\n        }\n\n        for (const annotation of response.annotations) {\n            console.log(JSON.stringify(annotation, null, 2));\n        }\n    }\n);')),(0,o.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-java",mdxType:"CodeBlock"},'package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.status.*;\n\npublic class ClarifaiExample {\n\n    /////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and input IDs.\n    // Change these strings to run your own example.\n    /////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to list your own annotations\n    static final String INPUT_ID_1 = "c9cbb1c90cf24bc98bfd2e529e744ca9";\n    static final String INPUT_ID_2 = "a8748df4938447e4844b2f505c8eaaef";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\t\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiAnnotationResponse listAnnotationsResponse = stub.listAnnotations(\n            ListAnnotationsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .addInputIds(INPUT_ID_1)\n            .addInputIds(INPUT_ID_2)\n            .setPerPage(10)\n            .setPage(1) // Pages start at 1\n            .build()\n        );\n\n        if (listAnnotationsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("List annotations failed, status: " + listAnnotationsResponse.getStatus());\n        }\n\n        for (Annotation annotation: listAnnotationsResponse.getAnnotationsList()) {\n            System.out.println(annotation);\n        }\n\n    }\n\n}')),(0,o.kt)(i.Z,{value:"php",label:"PHP",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-php",mdxType:"CodeBlock"},'<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and input IDs.\n// Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change these to list your own annotations\n$INPUT_ID_1 = "c9cbb1c90cf24bc98bfd2e529e744ca9";\n$INPUT_ID_2 = "a8748df4938447e4844b2f505c8eaaef";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\ListAnnotationsRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->ListAnnotations(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new ListAnnotationsRequest([\n        "user_app_id" => $userDataObject, \n        "input_ids"  => [$INPUT_ID_1, $INPUT_ID_2],\n        "per_page" => 10\n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\nforeach ($response->getAnnotations() as $annotation_object) {\n    echo $annotation_object->SerializeToJSONString() . "</br>";\n}\n\n?>')),(0,o.kt)(i.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-bash",mdxType:"CodeBlock"},'curl -X GET "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/annotations?page=1&per_page=10&input_ids=YOUR_INPUT_ID_HERE" \\\n  -H "Authorization: Key YOUR_PAT_HERE" '))),(0,o.kt)("h3",{id:"list-annotations-by-input-ids-and-annotation-ids"},"List Annotations by Input IDs and Annotation IDs"),(0,o.kt)("p",null,"You can list annotations by input IDs and their corresponding annotation IDs. Number of input IDs and annotation IDs should be the same. Since we are finding annotation by IDs, this will match any user or model created annotations."),(0,o.kt)("p",null,"Below is an example of how to do that."),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"When listing annotations, both input IDs and annotation IDs are optional. If you do not provide any input ID or annotation ID, we will return all annotations based on the creation time of each input. ")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"You can also list annotations by providing input IDs only. ")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"However, if you want to list annotations by providing annotation IDs, then input IDs are also required so that we know the inputs that correspond to the annotation IDs provided in the request. In this case, the number of input IDs should be equal to the number of annotation IDs. ")))),(0,o.kt)(s.Z,{mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-python",mdxType:"CodeBlock"},"##########################################################################\n# In this section, we set the user authentication, app ID, input IDs, and\n# annotation IDs. Change these strings to run your own example.\n##########################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to list your own annotations\nINPUT_ID_1 = '53d0362a9dfa4e03b2293375e2d0db73'\nINPUT_ID_2 = '00f6d742124147ac8ca7788f73736fb9' \nANNOTATION_ID_1 = '300b8e39a65e4f33ae4e15e86eaf4a3b'\nANNOTATION_ID_2 = 'fcd19d4ad96440e7b1fbda7279c19e44'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\nlist_annotations_response = stub.ListAnnotations(\n    service_pb2.ListAnnotationsRequest(\n        user_app_id=userDataObject,  # The userDataObject is created in the overview and is required when using a PAT\n        input_ids=[INPUT_ID_1, INPUT_ID_2],\n        ids=[ANNOTATION_ID_1, ANNOTATION_ID_2],\n        per_page=10\n    ),\n    metadata=metadata\n)\n\nif list_annotations_response.status.code != status_code_pb2.SUCCESS:\n    print(list_annotations_response.status)\n    raise Exception(\"List annotations failed, status: \" + list_annotations_response.status.description)\n\nfor annotation_object in list_annotations_response.annotations:\n    print(annotation_object)\n")),(0,o.kt)(i.Z,{value:"js_rest",label:"JavaScript (REST)",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-javascript",mdxType:"CodeBlock"},"\x3c!--index.html file--\x3e\n\n<script>\n    ///////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, input IDs, and\n    // annotation IDs. Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = 'YOUR_USER_ID_HERE';\n    // Your PAT (Personal Access Token) can be found in the portal under Authentification\n    const PAT = 'YOUR_PAT_HERE';\n    const APP_ID = 'YOUR_APP_ID_HERE';\n    // Change these to list your own annotations\n    const INPUT_ID_1 = 'c9cbb1c90cf24bc98bfd2e529e744ca9';\n    const INPUT_ID_2 = '1be923b967f148dbb4e588cf4a723da1';\n    const ANNOTATION_ID_1 = '55ccf4250ba34592ac48fd2b839652fe';\n    const ANNOTATION_ID_2 = '5a6dafa3864a4d768a4c32e514dd8da1';\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const requestOptions = {\n        method: 'GET',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        }\n    };\n\n    fetch(`https://api.clarifai.com/v2/users/${USER_ID}/apps/${APP_ID}/annotations?page=1&per_page=10&input_ids=${INPUT_ID_1}&input_ids=${INPUT_ID_2}&ids=${ANNOTATION_ID_1}&ids=${ANNOTATION_ID_2}`, requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n<\/script>")),(0,o.kt)(i.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-javascript",mdxType:"CodeBlock"},"//index.js file\n\n///////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, input IDs, and\n// annotation IDs. Change these strings to run your own example.\n///////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = 'YOUR_USER_ID_HERE';\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\nconst PAT = 'YOUR_PAT_HERE';\nconst APP_ID = 'YOUR_APP_ID_HERE';\n// Change these to list your own annotations\nconst INPUT_ID_1 = 'c9cbb1c90cf24bc98bfd2e529e744ca9';\nconst INPUT_ID_2 = '1be923b967f148dbb4e588cf4a723da1';\nconst ANNOTATION_ID_1 = '55ccf4250ba34592ac48fd2b839652fe';\nconst ANNOTATION_ID_2 = '5a6dafa3864a4d768a4c32e514dd8da1';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require(\"clarifai-nodejs-grpc\");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set(\"authorization\", \"Key \" + PAT);\n\nstub.ListAnnotations(\n    {\n        user_app_id: {\n            \"user_id\": USER_ID,\n            \"app_id\": APP_ID\n        },\n        input_ids: [INPUT_ID_1, INPUT_ID_2],\n        ids: [ANNOTATION_ID_1, ANNOTATION_ID_2],\n        page: 1,\n        per_page: 10\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error(\"List annotations failed, status: \" + response.status.description);\n        }\n\n        for (const annotation of response.annotations) {\n            console.log(JSON.stringify(annotation, null, 2));\n        }\n    }\n);")),(0,o.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-java",mdxType:"CodeBlock"},'package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.status.*;\n\npublic class ClarifaiExample {\n\n    /////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, input IDs, and\n    // annotation IDs. Change these strings to run your own example.\n    /////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\t\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to list your own annotations\n    static final String INPUT_ID_1 = "c9cbb1c90cf24bc98bfd2e529e744ca9";\n    static final String INPUT_ID_2 = "1be923b967f148dbb4e588cf4a723da1";\n    static final String ANNOTATION_ID_1 = "55ccf4250ba34592ac48fd2b839652fe";\n    static final String ANNOTATION_ID_2 = "5a6dafa3864a4d768a4c32e514dd8da1";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\t\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiAnnotationResponse listAnnotationsResponse = stub.listAnnotations(\n            ListAnnotationsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .setPerPage(10)\n            .addInputIds(INPUT_ID_1)\n            .addInputIds(INPUT_ID_2)\n            .addIds(ANNOTATION_ID_1)\n            .addIds(ANNOTATION_ID_2)\n            .build()\n        );\n\n        if (listAnnotationsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("List annotations failed, status: " + listAnnotationsResponse.getStatus());\n        }\n\n        for (Annotation annotation: listAnnotationsResponse.getAnnotationsList()) {\n            System.out.println(annotation);\n        }\n\n    }\n\n}')),(0,o.kt)(i.Z,{value:"php",label:"PHP",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-php",mdxType:"CodeBlock"},'<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n///////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, input IDs, and\n// annotation IDs. Change these strings to run your own example.\n///////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change these to list your own annotations\n$INPUT_ID_1 = \'c9cbb1c90cf24bc98bfd2e529e744ca9\';\n$INPUT_ID_2 = \'1be923b967f148dbb4e588cf4a723da1\';\n$ANNOTATION_ID_1 = \'55ccf4250ba34592ac48fd2b839652fe\';\n$ANNOTATION_ID_2 = \'5a6dafa3864a4d768a4c32e514dd8da1\';\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\ListAnnotationsRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->ListAnnotations(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new ListAnnotationsRequest([\n        "user_app_id" => $userDataObject, \n        "input_ids"  => [$INPUT_ID_1, $INPUT_ID_2],\n        "ids"  => [$ANNOTATION_ID_1, $ANNOTATION_ID_2],\n        "per_page" => 10\n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\nforeach ($response->getAnnotations() as $annotation_object) {\n    echo $annotation_object->SerializeToJSONString() . "</br>";\n}\n\n?>')),(0,o.kt)(i.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-bash",mdxType:"CodeBlock"},'curl -X GET "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/annotations?page=1&per_page=10&input_ids=YOUR_INPUT_ID_1_HERE&input_ids=YOUR_INPUT_ID_2_HERE&ids=YOUR_ANNOTATION_ID_1_HERE&ids=YOUR_ANNOTATION_ID_2_HERE" \\\n  -H "Authorization: Key YOUR_PAT_HERE" '))),(0,o.kt)("h3",{id:"list-annotations-by-user-ids"},"List Annotations by User IDs"),(0,o.kt)("p",null,"An annotation is created by either a user or a model. You can list annotations created by specific user","(","s",")"," by providing their user IDs."),(0,o.kt)("p",null,"Below is an example of how to do that."),(0,o.kt)(s.Z,{mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-python",mdxType:"CodeBlock"},"#########################################################################\n# In this section, we set the user authentication, app ID, and user IDs.\n# Change these strings to run your own example.\n#########################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Insert the user IDs \nUSER_ID_1 = 'USER_ID_1_HERE'\nUSER_ID_2 = 'USER_ID_2_HERE'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\nlist_annotations_response = stub.ListAnnotations(\n    service_pb2.ListAnnotationsRequest(\n        user_app_id=userDataObject,  # The userDataObject is created in the overview and is required when using a PAT\n        user_ids=[USER_ID_1, USER_ID_2], \n        per_page=10\n    ),\n    metadata=metadata\n)\n\nif list_annotations_response.status.code != status_code_pb2.SUCCESS:\n    print(list_annotations_response.status)\n    raise Exception(\"List annotations failed, status: \" + list_annotations_response.status.description)\n\nfor annotation_object in list_annotations_response.annotations:\n    print(annotation_object)\n")),(0,o.kt)(i.Z,{value:"js_rest",label:"JavaScript (REST)",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-javascript",mdxType:"CodeBlock"},"\x3c!--index.html file--\x3e\n\n<script>\n    ///////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and user IDs.\n    // Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = 'YOUR_USER_ID_HERE';\n    // Your PAT (Personal Access Token) can be found in the portal under Authentification\n    const PAT = 'YOUR_PAT_HERE';\n    const APP_ID = 'YOUR_APP_ID_HERE';\n    // Insert the user IDs \n    const USER_ID_1 = 'USER_ID_1_HERE';\n    const USER_ID_2 = 'USER_ID_2_HERE';\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const requestOptions = {\n        method: 'GET',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        }\n    };\n\n    fetch(`https://api.clarifai.com/v2/users/${USER_ID}/apps/${APP_ID}/annotations?page=1&per_page=10&user_ids=${USER_ID_1}&user_ids=${USER_ID_2}`, requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n<\/script>")),(0,o.kt)(i.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-javascript",mdxType:"CodeBlock"},'//index.js file\n\n///////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and user IDs.\n// Change these strings to run your own example.\n///////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n// Insert the user IDs \nconst USER_ID_1 = \'USER_ID_1_HERE\';\nconst USER_ID_2 = \'USER_ID_2_HERE\';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.ListAnnotations(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        user_ids: [USER_ID_1, USER_ID_2], \n        page: 1, \n        per_page: 10\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("List annotations failed, status: " + response.status.description);\n        }\n\n        for (const annotation of response.annotations) {\n            console.log(JSON.stringify(annotation, null, 2));\n        }\n    }\n);')),(0,o.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-java",mdxType:"CodeBlock"},'package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    //////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and user IDs.\n    // Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\t\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Insert the user IDs \n    static final String USER_ID_1 = "USER_ID_1_HERE";\n    static final String USER_ID_2 = "USER_ID_2_HERE";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\t\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiAnnotationResponse listAnnotationsResponse = stub.listAnnotations(\n            ListAnnotationsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .addUserIds(USER_ID_1)\n            .addUserIds(USER_ID_2)\n            .setPerPage(10)\n            .build()\n        );\n\n        if (listAnnotationsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("List annotations failed, status: " + listAnnotationsResponse.getStatus());\n        }\n\n        for (Annotation annotation: listAnnotationsResponse.getAnnotationsList()) {\n            System.out.println(annotation);\n        }\n\n    }\n\n}')),(0,o.kt)(i.Z,{value:"php",label:"PHP",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-php",mdxType:"CodeBlock"},'<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n///////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and user IDs.\n// Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Insert the user IDs \n$USER_ID_1 = "USER_ID_1_HERE";\n$USER_ID_2 = "USER_ID_2_HERE";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\ListAnnotationsRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->ListAnnotations(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new ListAnnotationsRequest([\n        "user_app_id" => $userDataObject, \n        "user_ids"  => [$USER_ID_1, $USER_ID_2],\n        "per_page" => 10\n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\nforeach ($response->getAnnotations() as $annotation_object) {\n    echo $annotation_object->SerializeToJSONString() . "</br>";\n}\n\n?>')),(0,o.kt)(i.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-bash",mdxType:"CodeBlock"},'curl -X GET "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/annotations?page=1&per_page=10&user_ids=USER_ID_1_HERE&user_ids=USER_ID_2_HERE" \\\n  -H "Authorization: Key YOUR_PAT_HERE" '))),(0,o.kt)("h3",{id:"list-annotations-by-model-version-ids"},"List Annotations by Model Version IDs"),(0,o.kt)("p",null,"An annotation is created by either a user or a model. For example, if your workflow has a detection model, when you add an input, the model will detect objects in your input. You can see these detected objects by listing the annotations created in the detection model. "),(0,o.kt)("p",null,"You can also label these regions by using ",(0,o.kt)("inlineCode",{parentName:"p"},"Post annotation")," with the region ID returned from this call."),(0,o.kt)("p",null,"Below is an example of how to list annotations by model version IDs."),(0,o.kt)(s.Z,{mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-python",mdxType:"CodeBlock"},"##################################################################################\n# In this section, we set the user authentication, app ID, and model version IDs. \n# Change these strings to run your own example.\n##################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Insert the model version IDs \nMODEL_VERSION_ID_1 = 'MODEL_VERSION_ID_1_HERE'\nMODEL_VERSION_ID_2 = 'MODEL_VERSION_ID_2_HERE'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\nlist_annotations_response = stub.ListAnnotations(\n    service_pb2.ListAnnotationsRequest(\n        user_app_id=userDataObject,  # The userDataObject is created in the overview and is required when using a PAT\n        model_version_ids=[MODEL_VERSION_ID_1, MODEL_VERSION_ID_2], \n        per_page=10\n    ),\n    metadata=metadata\n)\n\nif list_annotations_response.status.code != status_code_pb2.SUCCESS:\n    print(list_annotations_response.status)\n    raise Exception(\"List annotations failed, status: \" + list_annotations_response.status.description)\n\nfor annotation_object in list_annotations_response.annotations:\n    print(annotation_object)\n")),(0,o.kt)(i.Z,{value:"js_rest",label:"JavaScript (REST)",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-javascript",mdxType:"CodeBlock"},"\x3c!--index.html file--\x3e\n\n<script>\n    ////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and model version IDs. \n    // Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = 'YOUR_USER_ID_HERE';\n    // Your PAT (Personal Access Token) can be found in the portal under Authentification\n    const PAT = 'YOUR_PAT_HERE';\n    const APP_ID = 'YOUR_APP_ID_HERE';\n    // Insert the model version IDs \n    const MODEL_VERSION_ID_1 = 'MODEL_VERSION_ID_1_HERE';\n    const MODEL_VERSION_ID_2 = 'MODEL_VERSION_ID_2_HERE';\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const requestOptions = {\n        method: 'GET',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        }\n    };\n\n    fetch(`https://api.clarifai.com/v2/users/${USER_ID}/apps/${APP_ID}/annotations?page=1&per_page=10&model_version_ids=${MODEL_VERSION_ID_1}&model_version_ids=${MODEL_VERSION_ID_2}`, requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n<\/script>")),(0,o.kt)(i.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-javascript",mdxType:"CodeBlock"},'//index.js file\n\n////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and model version IDs. \n// Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n// Insert the model version IDs \nconst MODEL_VERSION_ID_1 = \'MODEL_VERSION_ID_1_HERE\';\nconst MODEL_VERSION_ID_2 = \'MODEL_VERSION_ID_2_HERE\';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.ListAnnotations(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        model_version_ids: [MODEL_VERSION_ID_1, MODEL_VERSION_ID_2],\n        page: 1,\n        per_page: 10\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("List annotations failed, status: " + response.status.description);\n        }\n\n        for (const annotation of response.annotations) {\n            console.log(JSON.stringify(annotation, null, 2));\n        }\n    }\n);')),(0,o.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-java",mdxType:"CodeBlock"},'package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    /////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and model version IDs. \n    // Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\t\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Insert the model version IDs \n    static final String MODEL_VERSION_ID_1 = "MODEL_VERSION_ID_1_HERE";\n    static final String MODEL_VERSION_ID_2 = "MODEL_VERSION_ID_2_HERE";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\t\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiAnnotationResponse listAnnotationsResponse = stub.listAnnotations(\n            ListAnnotationsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .addModelVersionIds(MODEL_VERSION_ID_1)\n            .addModelVersionIds(MODEL_VERSION_ID_2)\n            .setPerPage(10)\n            .build()\n        );\n\n        if (listAnnotationsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("List annotations failed, status: " + listAnnotationsResponse.getStatus());\n        }\n\n        for (Annotation annotation: listAnnotationsResponse.getAnnotationsList()) {\n            System.out.println(annotation);\n        }\n\n    }\n\n}')),(0,o.kt)(i.Z,{value:"php",label:"PHP",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-php",mdxType:"CodeBlock"},'<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and model version IDs. \n// Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Insert the model version IDs \n$MODEL_VERSION_ID_1 = "MODEL_VERSION_ID_1_HERE";\n$MODEL_VERSION_ID_2 = "MODEL_VERSION_ID_2_HERE";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\ListAnnotationsRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->ListAnnotations(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new ListAnnotationsRequest([\n        "user_app_id" => $userDataObject, \n        "model_version_ids"  => [$MODEL_VERSION_ID_1, $MODEL_VERSION_ID_2],\n        "per_page" => 10\n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\nforeach ($response->getAnnotations() as $annotation_object) {\n    echo $annotation_object->SerializeToJSONString() . "</br>";\n}\n\n?>')),(0,o.kt)(i.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-bash",mdxType:"CodeBlock"},'curl -X GET "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/annotations?page=1&per_page=10&model_version_ids=MODEL_VERSION_ID_1_HERE&model_version_ids=MODEL_VERSION_ID_2_HERE" \\\n  -H "Authorization: Key YOUR_PAT_HERE" '))),(0,o.kt)("h2",{id:"update-annotations"},"Update Annotations"),(0,o.kt)("p",null,"Changing annotation data is possible by PATCHing existing annotations. The application owner can change any user-created annotations. Collaborators are not allowed to change annotations made by other collaborators."),(0,o.kt)("p",null,"Generally speaking, you should send PATCH when you want to change the data you have posted; for example, changing the concept from positive to negative or adjusting the bounding box coordinates. "),(0,o.kt)("p",null,"If you want to add more tags, you can always POST new annotations. There is no limit on how many annotations an input can have."),(0,o.kt)("p",null,"Update supports ",(0,o.kt)("inlineCode",{parentName:"p"},"overwrite"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"merge"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"remove")," actions. You can update from 1 up to 128 annotations in a single API call."),(0,o.kt)("h3",{id:"update-annotation-with-concepts"},"Update Annotation With Concepts"),(0,o.kt)("p",null,"Below is an example of how to update an annotation of an image with a new concept, or  change a concept value from true to false ","(","or vice versa",")","."),(0,o.kt)(s.Z,{mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-python",mdxType:"CodeBlock"},"####################################################################################\n# In this section, we set the user authentication, app ID, input ID, annotation ID, \n# and concept ID. Change these strings to run your own example.\n####################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these based on the annotation you want to update\nINPUT_ID = '53d0362a9dfa4e03b2293375e2d0db73'\nANNOTATION_ID = '300b8e39a65e4f33ae4e15e86eaf4a3b'\nCONCEPT_ID = 'apple'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\npatch_annotations_response = stub.PatchAnnotations(\n    service_pb2.PatchAnnotationsRequest(\n        user_app_id=userDataObject,  # The userDataObject is created in the overview and is required when using a PAT\n        action=\"merge\",  # Supported actions: overwrite, merge, remove.\n        annotations=[\n            resources_pb2.Annotation(\n                input_id=INPUT_ID,\n                id=ANNOTATION_ID,\n                data=resources_pb2.Data(\n                    concepts=[\n                        resources_pb2.Concept(id=CONCEPT_ID, value=1.)  # 1 means true, this concept is present.\n                    ]\n                )\n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif patch_annotations_response.status.code != status_code_pb2.SUCCESS:\n    print(patch_annotations_response.status)\n    raise Exception(\"Patch annotations failed, status: \" + patch_annotations_response.status.description)\n\n")),(0,o.kt)(i.Z,{value:"js_rest",label:"JavaScript (REST)",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-javascript",mdxType:"CodeBlock"},'\x3c!--index.html file--\x3e\n\n<script>\n    //////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, input ID, annotation ID, \n    // and concept ID. Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = \'YOUR_USER_ID_HERE\';\n    // Your PAT (Personal Access Token) can be found in the portal under Authentification\n    const PAT = \'YOUR_PAT_HERE\';\n    const APP_ID = \'YOUR_APP_ID_HERE\';\n    // Change these based on the annotation you want to update\n    const INPUT_ID = \'c9cbb1c90cf24bc98bfd2e529e744ca9\';\n    const ANNOTATION_ID = \'08d3b9b81432477fb5522d3fb1d1a6f4\';\n    const CONCEPT_ID = \'apple\';\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        "user_app_id": {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        "annotations": [\n            {\n                "input_id": INPUT_ID,\n                "id": ANNOTATION_ID,\n                "data": {\n                    "concepts": [\n                        {\n                            "id": CONCEPT_ID,\n                            "value": 1\n                        }\n                    ]\n                }\n            }\n        ],\n        "action": "merge"\n    });\n\n    const requestOptions = {\n        method: \'PATCH\',\n        headers: {\n            \'Accept\': \'application/json\',\n            \'Authorization\': \'Key \' + PAT\n        },\n        body: raw\n    };\n\n    fetch("https://api.clarifai.com/v2/annotations", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log(\'error\', error));\n<\/script>')),(0,o.kt)(i.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-javascript",mdxType:"CodeBlock"},'//index.js file\n\n//////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, input ID, annotation ID, \n// and concept ID. Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n// Change these based on the annotation you want to update\nconst INPUT_ID = \'c9cbb1c90cf24bc98bfd2e529e744ca9\';\nconst ANNOTATION_ID = \'08d3b9b81432477fb5522d3fb1d1a6f4\';\nconst CONCEPT_ID = \'apple\';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PatchAnnotations(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        action: "merge",  // Supported actions: overwrite, merge, remove.\n        annotations: [\n            {\n                input_id: INPUT_ID,\n                id: ANNOTATION_ID,\n                // 1 means true, this concept is present.\n                // 0 means false, this concept is not present.\n                data: {\n                    concepts: [\n                        { id: CONCEPT_ID, value: 1 }\n                    ]\n                }\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Patch annotations failed, status: " + response.status.description);\n        }\n    }\n);')),(0,o.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-java",mdxType:"CodeBlock"},'package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    ///////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, input ID, annotation ID, \n    // and concept ID. Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these based on the annotation you want to update\n    static final String INPUT_ID = "c9cbb1c90cf24bc98bfd2e529e744ca9";\n    static final String ANNOTATION_ID = "08d3b9b81432477fb5522d3fb1d1a6f4";\n    static final String CONCEPT_ID = "apple";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\t\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiAnnotationResponse patchAnnotationsResponse = stub.patchAnnotations(\n            PatchAnnotationsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .setAction("merge") // Supported actions: overwrite, merge, remove\n            .addAnnotations(\n                Annotation.newBuilder()\n                .setInputId(INPUT_ID)\n                .setId(ANNOTATION_ID)\n                .setData(\n                    Data.newBuilder().addConcepts(\n                        Concept.newBuilder()\n                        .setId(CONCEPT_ID)\n                        .setValue(1f) // 1 means true, this concept is present\n                        .build()\n                    )\n                )\n                .build()\n            ).build()\n        );\n\n        if (patchAnnotationsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Patch annotations failed, status: " + patchAnnotationsResponse.getStatus());\n        }\n\n    }\n\n}')),(0,o.kt)(i.Z,{value:"php",label:"PHP",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-php",mdxType:"CodeBlock"},'<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n//////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, input ID, annotation ID, \n// and concept ID. Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change these based on the annotation you want to update\n$INPUT_ID = "c9cbb1c90cf24bc98bfd2e529e744ca9";\n$ANNOTATION_ID = "08d3b9b81432477fb5522d3fb1d1a6f4";\n$CONCEPT_ID = "apple";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\PatchAnnotationsRequest;\nuse Clarifai\\Api\\Annotation;\nuse Clarifai\\Api\\Concept;\nuse Clarifai\\Api\\Data;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PatchAnnotations(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new PatchAnnotationsRequest([\n        "user_app_id" => $userDataObject, \n        "action" => "merge",  // Supported actions: overwrite, merge, remove\n        "annotations" => [\n             new Annotation([\n                "input_id" => $INPUT_ID,\n                "id" => $ANNOTATION_ID,\n                "data" => new Data([\n                    "concepts" => [\n                        new Concept(["id" => $CONCEPT_ID, "value" => 1.]) //  1 means true, this concept is present\n                    ]\n                ])\n             ])\n        ]\n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\n?>')),(0,o.kt)(i.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-bash",mdxType:"CodeBlock"},'# Value of 1 means true, this concept is present\n# Value of 0 means false, this concept is not present\n\ncurl -X PATCH "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/annotations" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "annotations": [\n      {\n        "input_id": "YOUR_INPUT_ID_HERE",\n        "id": "YOUR_ANNOTATION_ID_HERE",\n        "data": {\n          "concepts": [\n            {\n              "id": "apple",\n              "value": 1\n            }\n          ]\n        }\n      }\n    ],\n    "action":"merge"\n}\''))),(0,o.kt)("h3",{id:"update-annotation-with-concepts-in-a-region"},"Update Annotation With Concepts in a Region"),(0,o.kt)("p",null,"When you update region data, you must nest this new data within ",(0,o.kt)("inlineCode",{parentName:"p"},"region.data"),". Set the ",(0,o.kt)("inlineCode",{parentName:"p"},"region_id")," to the current ",(0,o.kt)("inlineCode",{parentName:"p"},"region_id")," if you do not want to change or remove this region."),(0,o.kt)("p",null,"Below is an example of how to update annotation with concepts in a region."),(0,o.kt)(s.Z,{mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-python",mdxType:"CodeBlock"},"####################################################################################\n# In this section, we set the user authentication, app ID, input ID, annotation ID, \n# concept ID, and region ID. Change these strings to run your own example.\n####################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these based on the annotation you want to update\nINPUT_ID = '53d0362a9dfa4e03b2293375e2d0db73'\nANNOTATION_ID = '300b8e39a65e4f33ae4e15e86eaf4a3b'\nCONCEPT_ID = 'tree'\nREGION_ID = '361d6a9253be9152968012660258a4bf'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\npatch_annotations_response = stub.PatchAnnotations(\n    service_pb2.PatchAnnotationsRequest(\n        user_app_id=userDataObject,  # The userDataObject is created in the overview and is required when using a PAT\n        action=\"merge\",  # Supported actions: overwrite, merge, remove.\n        annotations=[\n            resources_pb2.Annotation(\n                input_id=INPUT_ID,\n                id=ANNOTATION_ID,\n                data=resources_pb2.Data(\n                    regions=[\n                        resources_pb2.Region(\n                            id=REGION_ID,  # this should be the region id of this annotation before patch\n                            data=resources_pb2.Data(\n                                concepts=[\n                                    resources_pb2.Concept(id=CONCEPT_ID, value=1.),  # 1 means true, this concept is present.\n                                ]\n                            )\n                        )\n                    ]\n                )\n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif patch_annotations_response.status.code != status_code_pb2.SUCCESS:\n    print(patch_annotations_response.status)\n    raise Exception(\"Patch annotations failed, status: \" + patch_annotations_response.status.description)\n\n")),(0,o.kt)(i.Z,{value:"js_rest",label:"JavaScript (REST)",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-javascript",mdxType:"CodeBlock"},'\x3c!--index.html file--\x3e\n\n<script>\n    //////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, input ID, annotation ID, \n    // concept ID, and region ID. Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = \'YOUR_USER_ID_HERE\';\n    // Your PAT (Personal Access Token) can be found in the portal under Authentification\n    const PAT = \'YOUR_PAT_HERE\';\n    const APP_ID = \'YOUR_APP_ID_HERE\';\n    // Change these based on the annotation you want to update\n    const INPUT_ID = \'c9cbb1c90cf24bc98bfd2e529e744ca9\';\n    const ANNOTATION_ID = \'08d3b9b81432477fb5522d3fb1d1a6f4\';\n    const CONCEPT_ID = \'tree\';\n    const REGION_ID = \'361d6a9253be9152968012660258a4bf\';\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        "user_app_id": {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        "annotations": [\n            {\n                "input_id": INPUT_ID,\n                "id": ANNOTATION_ID,\n                "data": {\n                    "regions": [\n                        {\n                            "id": REGION_ID,\n                            "data": {\n                                "concepts": [\n                                    {\n                                        "id": CONCEPT_ID,\n                                        "value": 1\n                                    }\n                                ]\n                            }\n                        }\n                    ]\n                }\n            }\n        ],\n        "action": "merge"\n    });\n\n    const requestOptions = {\n        method: \'PATCH\',\n        headers: {\n            \'Accept\': \'application/json\',\n            \'Authorization\': \'Key \' + PAT\n        },\n        body: raw\n    };\n\n    fetch("https://api.clarifai.com/v2/annotations", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log(\'error\', error));\n\n<\/script>')),(0,o.kt)(i.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-javascript",mdxType:"CodeBlock"},"//index.js file\n\n//////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, input ID, annotation ID, \n// concept ID, and region ID. Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = 'YOUR_USER_ID_HERE';\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\nconst PAT = 'YOUR_PAT_HERE';\nconst APP_ID = 'YOUR_APP_ID_HERE';\n// Change these based on the annotation you want to update\nconst INPUT_ID = 'c9cbb1c90cf24bc98bfd2e529e744ca9';\nconst ANNOTATION_ID = '08d3b9b81432477fb5522d3fb1d1a6f4';\nconst CONCEPT_ID = 'apple';\nconst REGION_ID = '361d6a9253be9152968012660258a4bf';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require(\"clarifai-nodejs-grpc\");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set(\"authorization\", \"Key \" + PAT);\n\nstub.PatchAnnotations(\n    {\n        user_app_id: {\n            \"user_id\": USER_ID,\n            \"app_id\": APP_ID\n        },\n        action: \"merge\",  // Supported actions: overwrite, merge, remove.\n        annotations: [\n            {\n                input_id: INPUT_ID,\n                id: ANNOTATION_ID,\n                data: {\n                    regions: [\n                        {\n                            id: REGION_ID, // this should be the region id of this annotation before patch\n                            // 1 means true, this concept is present.\n                            data: {\n                                concepts: [\n                                    { id: CONCEPT_ID, value: 1 },\n                                ]\n                            },\n                        }\n                    ]\n                }\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error(\"Patch annotations failed, status: \" + response.status.description);\n        }\n    }\n);")),(0,o.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-java",mdxType:"CodeBlock"},'package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    ///////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, input ID, annotation ID, \n    // concept ID, and region ID. Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these based on the annotation you want to update\n    static final String INPUT_ID = "c9cbb1c90cf24bc98bfd2e529e744ca9";\n    static final String ANNOTATION_ID = "08d3b9b81432477fb5522d3fb1d1a6f4";\n    static final String CONCEPT_ID = "apple";\n    static final String REGION_ID = "361d6a9253be9152968012660258a4bf";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\t\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiAnnotationResponse patchAnnotationsResponse = stub.patchAnnotations(\n            PatchAnnotationsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .setAction("merge") // Supported actions: overwrite, merge, remove\n            .addAnnotations(\n                Annotation.newBuilder()\n                .setInputId(INPUT_ID)\n                .setId(ANNOTATION_ID)\n                .setData(\n                    Data.newBuilder().addRegions(\n                        Region.newBuilder()\n                        .setId(REGION_ID) // this should be the region id of this annotation\n                        .setData(\n                            Data.newBuilder().addConcepts(\n                                Concept.newBuilder()\n                                .setId(CONCEPT_ID)\n                                .setValue(1f) // 1 means true, this concept is present\n                                .build()\n                            )\n                        ).build()\n                    ).build()\n                )\n                .build()\n            ).build()\n        );\n\n        if (patchAnnotationsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Patch annotations failed, status: " + patchAnnotationsResponse.getStatus());\n        }\n\n    }\n\n}')),(0,o.kt)(i.Z,{value:"php",label:"PHP",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-php",mdxType:"CodeBlock"},'<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n//////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, input ID, annotation ID, \n// concept ID, and region ID. Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change these based on the annotation you want to update\n$INPUT_ID = "c9cbb1c90cf24bc98bfd2e529e744ca9";\n$ANNOTATION_ID = "08d3b9b81432477fb5522d3fb1d1a6f4";\n$CONCEPT_ID = "apple";\n$REGION_ID = "361d6a9253be9152968012660258a4bf";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\PatchAnnotationsRequest;\nuse Clarifai\\Api\\Annotation;\nuse Clarifai\\Api\\Concept;\nuse Clarifai\\Api\\Data;\nuse Clarifai\\Api\\Region;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PatchAnnotations(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new PatchAnnotationsRequest([\n        "user_app_id" => $userDataObject, \n        "action" => "merge",  // Supported actions: overwrite, merge, remove\n        "annotations" => [\n             new Annotation([           \n                "input_id" => $INPUT_ID,\n                "id" => $ANNOTATION_ID,\n                "data" => new Data([\n                    "regions" => [\n                        new Region([\n                            "id" => $REGION_ID, // this should be the region id of this annotation before patch\n                            "data" => new Data([\n                                "concepts" => [\n                                    new Concept([ "id" => $CONCEPT_ID, "value" => 1. ]), // 1 means true, this concept is present\n                                ]\n                            ])\n                        ])\n                    ]\n                ])\n            ]),\n        ]\n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\n?>')),(0,o.kt)(i.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-bash",mdxType:"CodeBlock"},'# Value of 1 means true, this concept is present\n# Region ID should be the region ID of this annotation before patch\n\ncurl -X PATCH "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/annotations" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "annotations": [\n      {\n        "input_id": "YOUR_INPUT_ID_HERE",\n        "id": "YOUR_ANNOTATION_ID_HERE",\n        "data": {\n          "regions": [\n            {\n              "id": "REGION_ID_HERE",\n              "data": {\n                "concepts": [\n                  {\n                    "id": "apple",\n                    "value": 1\n                  }\n                ]\n              }\n            }\n          ]\n        }\n      }\n    ],\n    "action":"merge"\n}\''))),(0,o.kt)("h3",{id:"update-annotation-region-coordinates"},"Update Annotation Region Coordinates"),(0,o.kt)("p",null,"You can update region bounding boxes coordinates. When changing the region, you should use ",(0,o.kt)("inlineCode",{parentName:"p"},"overwrite")," action. With ",(0,o.kt)("inlineCode",{parentName:"p"},"overwrite")," action, you need to provide the data you want to keep in this annotation."),(0,o.kt)("p",null,"Below is an example of how to do that."),(0,o.kt)(s.Z,{mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-python",mdxType:"CodeBlock"},"####################################################################################\n# In this section, we set the user authentication, app ID, input ID, annotation ID,\n# and concept ID. Change these strings to run your own example.\n#####################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these based on the annotation you want to update \nINPUT_ID = '53d0362a9dfa4e03b2293375e2d0db73'\nANNOTATION_ID = '300b8e39a65e4f33ae4e15e86eaf4a3b'\nCONCEPT_ID = 'bike'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\npatch_annotations_response = stub.PatchAnnotations(\n    service_pb2.PatchAnnotationsRequest(\n        user_app_id=userDataObject,  # The userDataObject is created in the overview and is required when using a PAT\n        action=\"overwrite\",\n        annotations=[\n            resources_pb2.Annotation(\n                input_id=INPUT_ID,\n                id=ANNOTATION_ID,\n                data=resources_pb2.Data(\n                    regions=[\n                        resources_pb2.Region(\n                            region_info=resources_pb2.RegionInfo(\n                                bounding_box=resources_pb2.BoundingBox(        # move bounding box to new coordinates\n                                    top_row=0.5,\n                                    left_col=0.5,\n                                    bottom_row=0.8,\n                                    right_col=0.8\n                                )\n                            ),\n                            data=resources_pb2.Data(    # need to provide tags you previously labeled since this is overwrite action\n                                concepts=[\n                                    resources_pb2.Concept(id=CONCEPT_ID, value=1.),  # 1 means true, this concept is present.\n                                ]\n                            )\n                        )\n                    ]\n                )\n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif patch_annotations_response.status.code != status_code_pb2.SUCCESS:\n    print(patch_annotations_response.status)\n    raise Exception(\"Patch annotations failed, status: \" + patch_annotations_response.status.description)\n\n")),(0,o.kt)(i.Z,{value:"js_rest",label:"JavaScript (REST)",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-javascript",mdxType:"CodeBlock"},'\x3c!--index.html file--\x3e\n\n<script>\n    //////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, input ID, annotation ID,\n    // and concept ID. Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = \'YOUR_USER_ID_HERE\';\n    // Your PAT (Personal Access Token) can be found in the portal under Authentification\n    const PAT = \'YOUR_PAT_HERE\';\n    const APP_ID = \'YOUR_APP_ID_HERE\';\n    // Change these based on the annotation you want to update \n    const INPUT_ID = \'3232a6fd32544c6a902c2cb0103034ff\';\n    const ANNOTATION_ID = \'3377446a88714ba78654f2cf811c2211\';\n    const CONCEPT_ID = \'bike\';\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        "user_app_id": {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        action: "overwrite",\n        "annotations": [\n            {\n                "data": {\n                    "regions": [{\n                        "region_info": {\n                            "bounding_box": {\n                                "top_row": 0,\n                                "left_col": 0,\n                                "bottom_row": 1,\n                                "right_col": 1\n                            }\n                        },\n                        "data": {\n                            "concepts": [{\n                                "id": CONCEPT_ID,\n                                "value": 1\n                            }]\n                        }\n                    }]\n                },\n                "input_id": INPUT_ID,\n                "id": ANNOTATION_ID\n            }\n        ]\n    });\n\n    const requestOptions = {\n        method: \'PATCH\',\n        headers: {\n            \'Accept\': \'application/json\',\n            \'Authorization\': \'Key \' + PAT\n        },\n        body: raw\n    };\n\n    fetch("https://api.clarifai.com/v2/annotations", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log(\'error\', error));\n\n<\/script>')),(0,o.kt)(i.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-javascript",mdxType:"CodeBlock"},'//index.js file\n\n//////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, input ID, annotation ID,\n// and concept ID. Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n// Change these based on the annotation you want to update \nconst INPUT_ID = \'3232a6fd32544c6a902c2cb0103034ff\';\nconst ANNOTATION_ID = \'3377446a88714ba78654f2cf811c2211\';\nconst CONCEPT_ID = \'bike\';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PatchAnnotations(\n    {\n\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        action: "overwrite",\n        annotations: [\n            {\n                input_id: INPUT_ID,\n                id: ANNOTATION_ID,\n                data: {\n                    regions: [\n                        {\n                            region_info: {\n                                bounding_box: {        // move bounding box to a new coordiates\n                                    top_row: 0.5,\n                                    left_col: 0.5,\n                                    bottom_row: 0.8,\n                                    right_col: 0.8\n                                }\n                            },\n                            // 1 means true, this concept is present.\n                            // 0 means false, this concept is not present.\n                            data: {\n                                concepts: [\n                                    { id: CONCEPT_ID, value: 1 },\n                                ]\n                            },\n                        }\n                    ]\n                }\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Patch annotations failed, status: " + response.status.description);\n        }\n    }\n);')),(0,o.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-java",mdxType:"CodeBlock"},'package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    ///////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, input ID, annotation ID,\n    // and concept ID. Change these strings to run your own example\n    //////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these based on the annotation you want to update \n    static final String INPUT_ID = "3232a6fd32544c6a902c2cb0103034ff";\n    static final String ANNOTATION_ID = "3377446a88714ba78654f2cf811c2211";\n    static final String CONCEPT_ID = "bike";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\t\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiAnnotationResponse patchAnnotationsResponse = stub.patchAnnotations(\n            PatchAnnotationsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .setAction("overwrite")\n            .addAnnotations(\n                Annotation.newBuilder()\n                .setInputId(INPUT_ID)\n                .setId(ANNOTATION_ID)\n                .setData(\n                    Data.newBuilder().addRegions(\n                        Region.newBuilder()\n                        .setRegionInfo(\n                            RegionInfo.newBuilder()\n                            .setBoundingBox( // move bounding box to a new coordinates\n                                BoundingBox.newBuilder()\n                                .setTopRow(0.5f)\n                                .setLeftCol(0.5f)\n                                .setBottomRow(0.8f)\n                                .setRightCol(0.8f)\n                                .build()\n                            )\n                            .build()\n                        )\n                        .setData(\n                            Data.newBuilder()\n                            .addConcepts(\n                                Concept.newBuilder()\n                                .setId(CONCEPT_ID)\n                                .setValue(1f) // 1 means true, this concept is present\n                                .build()\n                            )\n                        ).build()\n                    ).build()\n                )\n                .build()\n            ).build()\n        );\n\n        if (patchAnnotationsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Patch annotations failed, status: " + patchAnnotationsResponse.getStatus());\n        }\n\n    }\n\n}')),(0,o.kt)(i.Z,{value:"php",label:"PHP",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-php",mdxType:"CodeBlock"},'<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n//////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, input ID, annotation ID,\n// and concept ID. Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change these based on the annotation you want to update \n$INPUT_ID = "3232a6fd32544c6a902c2cb0103034ff";\n$ANNOTATION_ID = "3377446a88714ba78654f2cf811c2211";\n$CONCEPT_ID = "bike";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\PatchAnnotationsRequest;\nuse Clarifai\\Api\\Annotation;\nuse Clarifai\\Api\\BoundingBox;\nuse Clarifai\\Api\\Concept;\nuse Clarifai\\Api\\Data;\nuse Clarifai\\Api\\Region;\nuse Clarifai\\Api\\RegionInfo;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PatchAnnotations(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new PatchAnnotationsRequest([\n        "user_app_id" => $userDataObject, \n        "action" => "overwrite",\n        "annotations" => [\n             new Annotation([\n                "input_id" => $INPUT_ID,\n                "id" => $ANNOTATION_ID,\n                "data" => new Data([\n                    "regions" => [\n                        new Region([\n                            "region_info" => new RegionInfo([\n                                "bounding_box" => new BoundingBox([  // move bounding box to new coordinates\n                                    "top_row" => 0.5,\n                                    "left_col" => 0.5,\n                                    "bottom_row" => 0.8,\n                                    "right_col" => 0.8\n                                ])                                \n                            ]),\n                            "data" => new Data([  // need to provide tags you previously labeled since this is overwrite action\n                                "concepts" => [\n                                    new Concept([ "id" => $CONCEPT_ID, "value" => 1. ]), // 1 means true, this concept is present\n                                ]\n                            ])\n                        ])\n                    ]\n                ])\n            ]),            \n        ]\n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\n?>')),(0,o.kt)(i.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-bash",mdxType:"CodeBlock"},'curl -X PATCH "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/annotations" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "annotations": [\n            {\n                "data": {\n                    "regions": [{\n                        "region_info": {\n                            "bounding_box": {\n                                "top_row": 0,\n                                "left_col": 0,\n                                "bottom_row": 1,\n                                "right_col": 1\n                            }\n                        },\n                        "data": {\n                            "concepts": [{\n                                "id": "bike",\n                                "value": 1\n                            }]\n                        }\n                    }]\n                },\n                "input_id": "YOUR_INPUT_ID_HERE",\n                "id": "YOUR_ANNOTATION_ID_HERE"\n            }\n        ],\n    "action":"overwrite"\n}\''))),(0,o.kt)("h3",{id:"update-annotation-status"},"Update Annotation Status"),(0,o.kt)("p",null,"Below is an example of how to update an annotation status."),(0,o.kt)(s.Z,{mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-python",mdxType:"CodeBlock"},"#############################################################################\n# In this section, we set the user authentication, app ID, input ID, and  \n# annotation ID. Change these strings to run your own example.\n#############################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these based on the annotation status you want to update\nINPUT_ID = 'c021c670357e4083b197abe80bda82b0'\nANNOTATION_ID = '8ac7fd96ce6f44b8a0f4806488b41b93'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2, status_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\npatch_annotations_response = stub.PatchAnnotations(\n    service_pb2.PatchAnnotationsRequest(\n        user_app_id=userDataObject,  # The userDataObject is created in the overview and is required when using a PAT\n        action=\"merge\",  # Supported actions: overwrite, merge, remove.\n        annotations=[\n            resources_pb2.Annotation(\n                input_id=INPUT_ID,\n                id=ANNOTATION_ID,\n                status=status_pb2.Status(\n                    code=status_code_pb2.ANNOTATION_SUCCESS\n                )\n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif patch_annotations_response.status.code != status_code_pb2.SUCCESS:\n    print(patch_annotations_response.status)\n    raise Exception(\"Patch annotations failed, status: \" + patch_annotations_response.status.description)\n    ")),(0,o.kt)(i.Z,{value:"js_rest",label:"JavaScript (REST)",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-javascript",mdxType:"CodeBlock"},'\x3c!--index.html file--\x3e\n\n<script>\n    ////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, input ID, and  \n    // annotation ID. Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = \'YOUR_USER_ID_HERE\';\n    // Your PAT (Personal Access Token) can be found in the portal under Authentification\n    const PAT = \'YOUR_PAT_HERE\';\n    const APP_ID = \'YOUR_APP_ID_HERE\';\n    // Change these based on the annotation status you want to update\n    const INPUT_ID = \'3232a6fd32544c6a902c2cb0103034ff\';\n    const ANNOTATION_ID = \'3377446a88714ba78654f2cf811c2211\';\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        "user_app_id": {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        "annotations": [\n            {\n                "input_id": INPUT_ID,\n                "id": ANNOTATION_ID,\n                "status": {\n                    "code": "ANNOTATION_SUCCESS"\n                }\n            }\n        ],\n        "action": "merge"\n    });\n\n    const requestOptions = {\n        method: \'PATCH\',\n        headers: {\n            \'Accept\': \'application/json\',\n            \'Authorization\': \'Key \' + PAT\n        },\n        body: raw\n    };\n\n    fetch("https://api.clarifai.com/v2/annotations", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log(\'error\', error));\n\n<\/script>')),(0,o.kt)(i.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-javascript",mdxType:"CodeBlock"},'//index.js file\n\n////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, input ID, and  \n// annotation ID. Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n// Change these based on the annotation status you want to update\nconst INPUT_ID = \'3232a6fd32544c6a902c2cb0103034ff\';\nconst ANNOTATION_ID = \'3377446a88714ba78654f2cf811c2211\';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PatchAnnotations(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        action: "merge",  // Supported actions: overwrite, merge, remove.\n        annotations: [\n            {\n                input_id: INPUT_ID,\n                id: ANNOTATION_ID,\n                status: {\n                    code: 24150\n                }\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Patch annotations failed, status: " + response.status.description);\n        }\n    }\n);')),(0,o.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-java",mdxType:"CodeBlock"},'package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.status.Status;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    //////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, input ID, and  \n    // annotation ID. Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these based on the annotation status you want to update\n    static final String INPUT_ID = "3232a6fd32544c6a902c2cb0103034ff";\n    static final String ANNOTATION_ID = "3377446a88714ba78654f2cf811c2211";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\t\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiAnnotationResponse patchAnnotationsResponse = stub.patchAnnotations(\n            PatchAnnotationsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .setAction("merge") // Supported actions: overwrite, merge, remove\n            .addAnnotations(\n                Annotation.newBuilder()\n                .setInputId(INPUT_ID)\n                .setId(ANNOTATION_ID)\n                .setStatus(\n                    Status.newBuilder()\n                    .setCodeValue(StatusCode.ANNOTATION_SUCCESS_VALUE)\n                    .build()\n                )\n                .build()\n            ).build()\n        );\n\n        if (patchAnnotationsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("patch annotations failed, status: " + patchAnnotationsResponse.getStatus());\n        }\n\n    }\n\n}')),(0,o.kt)(i.Z,{value:"php",label:"PHP",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-php",mdxType:"CodeBlock"},"")),(0,o.kt)(i.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-bash",mdxType:"CodeBlock"},'curl -X PATCH "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/annotations" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "annotations": [\n      {\n        "input_id": "YOUR_INPUT_ID_HERE",\n        "id": "YOUR_ANNOTATION_ID_HERE",\n        "status": {\n          "code": "ANNOTATION_SUCCESS"\n        }\n      }\n    ],\n    "action":"merge"\n}\''))),(0,o.kt)("h2",{id:"delete-annotations"},"Delete Annotations"),(0,o.kt)("h3",{id:"delete-annotation-by-input-id-and-annotation-id"},"Delete Annotation by Input ID and Annotation ID"),(0,o.kt)("p",null,"Below is an example of how to delete a single annotation by input ID and annotation ID."),(0,o.kt)(s.Z,{mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-python",mdxType:"CodeBlock"},"#####################################################################\n# In this section, we set the user authentication, app ID, input ID, \n# and annotation ID. Change these strings to run your own example.\n#####################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these based on the annotation you want to delete \nINPUT_ID = '53d0362a9dfa4e03b2293375e2d0db73'\nANNOTATION_ID = '300b8e39a65e4f33ae4e15e86eaf4a3b'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\ndelete_annotation_response = stub.DeleteAnnotation(\n    service_pb2.DeleteAnnotationRequest(\n        user_app_id=userDataObject,  # The userDataObject is created in the overview and is required when using a PAT\n        input_id=INPUT_ID,\n        annotation_id=ANNOTATION_ID\n    ),\n    metadata=metadata\n)\n\nif delete_annotation_response.status.code != status_code_pb2.SUCCESS:\n    print(delete_annotation_response.status)\n    raise Exception(\"Delete annotations failed, status: \" + delete_annotation_response.status.description)\n")),(0,o.kt)(i.Z,{value:"js_rest",label:"JavaScript (REST)",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-javascript",mdxType:"CodeBlock"},"\x3c!--index.html file--\x3e\n\n<script>\n    ///////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, input ID, \n    // and annotation ID. Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = 'YOUR_USER_ID_HERE';\n    // Your PAT (Personal Access Token) can be found in the portal under Authentification\n    const PAT = 'YOUR_PAT_HERE';\n    const APP_ID = 'YOUR_APP_ID_HERE';\n    // Change these based on the annotation you want to delete \n    const INPUT_ID = 'c99f1b557d1d43d1916b46f8ce4a0487';\n    const ANNOTATION_ID = '244b8a39e51944ffb43bde7f6d33f0a7';\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const requestOptions = {\n        method: 'DELETE',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        }\n    };\n\n    fetch(`https://api.clarifai.com/v2/users/${USER_ID}/apps/${APP_ID}/inputs/${INPUT_ID}/annotations/${ANNOTATION_ID}`, requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n\n<\/script>")),(0,o.kt)(i.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-javascript",mdxType:"CodeBlock"},'//index.js file\n\n///////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, input ID, \n// and annotation ID. Change these strings to run your own example.\n///////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n// Change these based on the annotation you want to delete \nconst INPUT_ID = \'c99f1b557d1d43d1916b46f8ce4a0487\';\nconst ANNOTATION_ID = \'b65d2a9106ba448382a0cee540f7c582\';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.DeleteAnnotation(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        input_id: INPUT_ID,\n        annotation_id: ANNOTATION_ID\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Delete annotation failed, status: " + response.status.description);\n        }\n    }\n);')),(0,o.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-java",mdxType:"CodeBlock"},'package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.status.BaseResponse;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    /////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, input ID, \n    // and annotation ID. Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these based on the annotation you want to delete \n    static final String INPUT_ID = "c99f1b557d1d43d1916b46f8ce4a0487";\n    static final String ANNOTATION_ID = "b65d2a9106ba448382a0cee540f7c582";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\t\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        BaseResponse deleteAnnotationResponse = stub.deleteAnnotation(\n            DeleteAnnotationRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .setInputId(INPUT_ID)\n            .setAnnotationId(ANNOTATION_ID)\n            .build()\n        );\n\n        if (deleteAnnotationResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Delete annotation failed, status: " + deleteAnnotationResponse.getStatus());\n        }\n\n    }\n\n}')),(0,o.kt)(i.Z,{value:"php",label:"PHP",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-php",mdxType:"CodeBlock"},"")),(0,o.kt)(i.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-bash",mdxType:"CodeBlock"},'curl -X DELETE "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/inputs/YOUR_INPUT_ID_HERE/annotations/YOUR_ANNOTATION_ID_HERE" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  '))),(0,o.kt)("h3",{id:"bulk-delete-annotations-by-input-ids-and-annotation-ids"},"Bulk Delete Annotations by Input IDs and Annotation IDs"),(0,o.kt)("p",null,"You can delete multiple annotations in one API call. You need to provide a list of input IDs and a list of annotation IDs. The number of input IDs has to match the number of annotation IDs."),(0,o.kt)("p",null,"Below is an example of how to do that. "),(0,o.kt)(s.Z,{mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-python",mdxType:"CodeBlock"},"#######################################################################\n# In this section, we set the user authentication, app ID, input IDs, \n# and annotation IDs. Change these strings to run your own example.\n#######################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these based on the annotations you want to bulk delete \nINPUT_ID_1 = 'b76fe0adb0294906942f169bb1f6cacf'\nINPUT_ID_2 = 'e838fac8da9d40c89f2291a6496593da'\nANNOTATION_ID_1 = '35c37cda9ad8460fae12b2b2b6a23f1d'\nANNOTATION_ID_2 = '63d69000ae3343d0b70b892ea3dcb01d'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\ndelete_annotations_response = stub.DeleteAnnotations(\n    service_pb2.DeleteAnnotationsRequest(\n        user_app_id=userDataObject,  # The userDataObject is created in the overview and is required when using a PAT\n        input_ids=[INPUT_ID_1, INPUT_ID_2],\n        ids=[ANNOTATION_ID_1, ANNOTATION_ID_2]\n    ),\n    metadata=metadata\n)\n\nif delete_annotations_response.status.code != status_code_pb2.SUCCESS:\n    print(delete_annotations_response.status)   \n    raise Exception(\"Delete annotations failed, status: \" + delete_annotations_response.status.description)\n    \n")),(0,o.kt)(i.Z,{value:"js_rest",label:"JavaScript (REST)",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-javascript",mdxType:"CodeBlock"},"\x3c!--index.html file--\x3e\n\n<script>\n    ///////////////////////////////////////////////////////////////////////////\n    //  In this section, we set the user authentication, app ID, input IDs, \n    // and annotation IDs. Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = 'YOUR_USER_ID_HERE';\n    // Your PAT (Personal Access Token) can be found in the portal under Authentification\n    const PAT = 'YOUR_PAT_HERE';\n    const APP_ID = 'YOUR_APP_ID_HERE';\n    // Change these based on the annotations you want to bulk delete \n    const INPUT_ID_1 = 'c99f1b557d1d43d1916b46f8ce4a0487';\n    const INPUT_ID_2 = '7c5f489bcafe43fe8a71c68091cb64ce';\n    const ANNOTATION_ID_1 = '6793f476f6c24712b447316ae2fc12c1';\n    const ANNOTATION_ID_2 = 'd703cafff61b45bbb4d8c1d9575420b3';\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        \"user_app_id\": {\n            \"user_id\": USER_ID,\n            \"app_id\": APP_ID\n        },\n        \"input_ids\": [INPUT_ID_1, INPUT_ID_2],\n        \"ids\": [ANNOTATION_ID_1, ANNOTATION_ID_2]\n    });\n\n    const requestOptions = {\n        method: 'DELETE',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        },\n        body: raw\n    };\n\n    fetch(\"https://api.clarifai.com/v2/annotations\", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n\n<\/script>")),(0,o.kt)(i.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-javascript",mdxType:"CodeBlock"},"//index.js file\n\n///////////////////////////////////////////////////////////////////////////\n//  In this section, we set the user authentication, app ID, input IDs, \n// and annotation IDs. Change these strings to run your own example.\n///////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = 'YOUR_USER_ID_HERE';\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\nconst PAT = 'YOUR_PAT_HERE';\nconst APP_ID = 'YOUR_APP_ID_HERE';\n// Change these based on the annotations you want to bulk delete \nconst INPUT_ID_1 = 'c99f1b557d1d43d1916b46f8ce4a0487';\nconst INPUT_ID_2 = '7c5f489bcafe43fe8a71c68091cb64ce';\nconst ANNOTATION_ID_1 = '9bcbdbc381c34a6da64bb3d635e82833';\nconst ANNOTATION_ID_2 = 'e5f8310fbd824354b657050132311e64';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require(\"clarifai-nodejs-grpc\");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set(\"authorization\", \"Key \" + PAT);\n\nstub.DeleteAnnotations(\n    {\n        user_app_id: {\n            \"user_id\": USER_ID,\n            \"app_id\": APP_ID\n        },\n        input_ids: [INPUT_ID_1, INPUT_ID_2],\n        annotation_ids: [ANNOTATION_ID_1, ANNOTATION_ID_2]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error(\"Delete annotations failed, status: \" + response.status.description);\n        }\n    }\n);")),(0,o.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-java",mdxType:"CodeBlock"},'package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.status.BaseResponse;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    /////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, input IDs, \n    // and annotation IDs. Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these based on the annotations you want to bulk delete \n    static final String INPUT_ID_1 = "c99f1b557d1d43d1916b46f8ce4a0487";\n    static final String INPUT_ID_2 = "7c5f489bcafe43fe8a71c68091cb64ce";\n    static final String ANNOTATION_ID_1 = "9bcbdbc381c34a6da64bb3d635e82833";\n    static final String ANNOTATION_ID_2 = "e5f8310fbd824354b657050132311e64";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\t\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        BaseResponse deleteAnnotationsResponse = stub.deleteAnnotations(\n            DeleteAnnotationsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .addInputIds(INPUT_ID_1)\n            .addInputIds(INPUT_ID_2)\n            .addIds(ANNOTATION_ID_1)\n            .addIds(ANNOTATION_ID_2)\n            .build()\n        );\n\n        if (deleteAnnotationsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Delete annotations failed, status: " + deleteAnnotationsResponse.getStatus());\n        }\n\n    }\n\n}')),(0,o.kt)(i.Z,{value:"php",label:"PHP",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-php",mdxType:"CodeBlock"},"")),(0,o.kt)(i.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-bash",mdxType:"CodeBlock"},'curl -X DELETE "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/annotations"  \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -d \'{\n    "input_ids":["YOUR_INPUT_ID_1_HERE","YOUR_INPUT_ID_2_HERE"],\n    "ids":["YOUR_ANNOTATION_ID_1_HERE", "YOUR_ANNOTATION_ID_2_HERE"]\n  }\'\n  '))),(0,o.kt)("h3",{id:"bulk-delete-all-annotations-by-input-ids"},"Bulk Delete All Annotations by Input IDs"),(0,o.kt)("p",null,"To delete all annotations of a given input, you just need to set their input ID","(","s",")",". This will delete all annotations for these input","(","s",")",", EXCEPT the input level annotations, which only get deleted if you delete the inputs themselves."),(0,o.kt)("p",null,"Below is an example of how to do that. "),(0,o.kt)(s.Z,{mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-python",mdxType:"CodeBlock"},"##########################################################################\n# In this section, we set the user authentication, app ID, and input IDs. \n# Change these strings to run your own example.\n##########################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these based on the annotations you want to bulk delete \nINPUT_ID_1 = '53d0362a9dfa4e03b2293375e2d0db73'\nINPUT_ID_2 = '00f6d742124147ac8ca7788f73736fb9' \n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\ndelete_annotations_response = stub.DeleteAnnotations(\n    service_pb2.DeleteAnnotationsRequest(\n        user_app_id=userDataObject,  # The userDataObject is created in the overview and is required when using a PAT\n        input_ids=[INPUT_ID_1, INPUT_ID_2]\n    ),\n    metadata=metadata\n)\n\nif delete_annotations_response.status.code != status_code_pb2.SUCCESS:\n    print(delete_annotations_response.status)\n    raise Exception(\"Delete annotations failed, status: \" + delete_annotations_response.status.description)\n\n")),(0,o.kt)(i.Z,{value:"js_rest",label:"JavaScript (REST)",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-javascript",mdxType:"CodeBlock"},"\x3c!--index.html file--\x3e\n\n<script>\n    ////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and input IDs. \n    // Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = 'YOUR_USER_ID_HERE';\n    // Your PAT (Personal Access Token) can be found in the portal under Authentification\n    const PAT = 'YOUR_PAT_HERE';\n    const APP_ID = 'YOUR_APP_ID_HERE';\n    // Change these based on the annotations you want to bulk delete \n    const INPUT_ID_1 = 'b5585a6869d34c04bbcaf631e7cd5816';\n    const INPUT_ID_2 = 'a8748df4938447e4844b2f505c8eaaef';\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        \"user_app_id\": {\n            \"user_id\": USER_ID,\n            \"app_id\": APP_ID\n        },\n        \"input_ids\": [INPUT_ID_1, INPUT_ID_2]\n    });\n\n    const requestOptions = {\n        method: 'DELETE',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        },\n        body: raw\n    };\n\n    fetch(\"https://api.clarifai.com/v2/annotations\", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n\n<\/script>")),(0,o.kt)(i.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-javascript",mdxType:"CodeBlock"},'//index.js file\n\n////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and input IDs. \n// Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n// Change these based on the annotations you want to bulk delete \nconst INPUT_ID_1 = \'b5585a6869d34c04bbcaf631e7cd5816\';\nconst INPUT_ID_2 = \'a8748df4938447e4844b2f505c8eaaef\';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\n\nstub.DeleteAnnotations(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        input_ids: [INPUT_ID_1, INPUT_ID_2]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Delete annotations failed, status: " + response.status.description);\n        }\n    }\n);')),(0,o.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-java",mdxType:"CodeBlock"},'package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.status.BaseResponse;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    ////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and input IDs. \n    // Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these based on the annotations you want to bulk delete \n    static final String INPUT_ID_1 = "b5585a6869d34c04bbcaf631e7cd5816";\n    static final String INPUT_ID_2 = "a8748df4938447e4844b2f505c8eaaef";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\t\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        BaseResponse deleteAnnotationsResponse = stub.deleteAnnotations(\n            DeleteAnnotationsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .addInputIds(INPUT_ID_1)\n            .addInputIds(INPUT_ID_2)\n            .build()\n        );\n\n        if (deleteAnnotationsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Delete annotations failed, status: " + deleteAnnotationsResponse.getStatus());\n        }\n\n    }\n\n}')),(0,o.kt)(i.Z,{value:"php",label:"PHP",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-php",mdxType:"CodeBlock"},"")),(0,o.kt)(i.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-bash",mdxType:"CodeBlock"},'curl -X DELETE "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/annotations" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -d \'{\n    "input_ids":["YOUR_INPUT_ID_1_HERE","YOUR_INPUT_ID_2_HERE"]\n  }\''))))}I.isMDXComponent=!0}}]);
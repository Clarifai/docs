"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[9452],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return h}});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=a.createContext({}),l=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=l(e.components);return a.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=l(t),h=r,f=d["".concat(c,".").concat(h)]||d[h]||p[h]||o;return t?a.createElement(f,i(i({ref:n},u),{},{components:t})):a.createElement(f,i({ref:n},u))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=d;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var l=2;l<o;l++)i[l]=t[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},8215:function(e,n,t){var a=t(7294);n.Z=function(e){var n=e.children,t=e.hidden,r=e.className;return a.createElement("div",{role:"tabpanel",hidden:t,className:r},n)}},6396:function(e,n,t){t.d(n,{Z:function(){return d}});var a=t(7462),r=t(7294),o=t(2389),i=t(9443);var s=function(){var e=(0,r.useContext)(i.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},c=t(3616),l=t(6010),u="tabItem_vU9c";function p(e){var n,t,o,i=e.lazy,p=e.block,d=e.defaultValue,h=e.values,f=e.groupId,m=e.className,b=r.Children.map(e.children,(function(e){if((0,r.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),v=null!=h?h:b.map((function(e){var n=e.props;return{value:n.value,label:n.label,attributes:n.attributes}})),g=(0,c.lx)(v,(function(e,n){return e.value===n.value}));if(g.length>0)throw new Error('Docusaurus error: Duplicate values "'+g.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var w=null===d?d:null!=(n=null!=d?d:null==(t=b.find((function(e){return e.props.default})))?void 0:t.props.value)?n:null==(o=b[0])?void 0:o.props.value;if(null!==w&&!v.some((function(e){return e.value===w})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+w+'" but none of its children has the corresponding value. Available values are: '+v.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var y=s(),_=y.tabGroupChoices,k=y.setTabGroupChoices,S=(0,r.useState)(w),N=S[0],O=S[1],T=[],C=(0,c.o5)().blockElementScrollPositionUntilNextRender;if(null!=f){var E=_[f];null!=E&&E!==N&&v.some((function(e){return e.value===E}))&&O(E)}var P=function(e){var n=e.currentTarget,t=T.indexOf(n),a=v[t].value;a!==N&&(C(n),O(a),null!=f&&k(f,a))},A=function(e){var n,t=null;switch(e.key){case"ArrowRight":var a=T.indexOf(e.currentTarget)+1;t=T[a]||T[0];break;case"ArrowLeft":var r=T.indexOf(e.currentTarget)-1;t=T[r]||T[T.length-1]}null==(n=t)||n.focus()};return r.createElement("div",{className:"tabs-container"},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":p},m)},v.map((function(e){var n=e.value,t=e.label,o=e.attributes;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:N===n?0:-1,"aria-selected":N===n,key:n,ref:function(e){return T.push(e)},onKeyDown:A,onFocus:P,onClick:P},o,{className:(0,l.Z)("tabs__item",u,null==o?void 0:o.className,{"tabs__item--active":N===n})}),null!=t?t:n)}))),i?(0,r.cloneElement)(b.filter((function(e){return e.props.value===N}))[0],{className:"margin-vert--md"}):r.createElement("div",{className:"margin-vert--md"},b.map((function(e,n){return(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==N})}))))}function d(e){var n=(0,o.Z)();return r.createElement(p,(0,a.Z)({key:String(n)},e))}},1116:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return l},contentTitle:function(){return u},metadata:function(){return p},toc:function(){return d},default:function(){return f}});var a=t(7462),r=t(3366),o=(t(7294),t(3905)),i=t(6396),s=t(8215),c=["components"],l={description:"Group or separate items in your dataset.",sidebar_position:2},u="Combine or Negate",p={unversionedId:"api-guide/search/combine-or-negate",id:"api-guide/search/combine-or-negate",title:"Combine or Negate",description:"Group or separate items in your dataset.",source:"@site/docs/api-guide/search/combine-or-negate.md",sourceDirName:"api-guide/search",slug:"/api-guide/search/combine-or-negate",permalink:"/docs-new/api-guide/search/combine-or-negate",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/api-guide/search/combine-or-negate.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{description:"Group or separate items in your dataset.",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Search Overview",permalink:"/docs-new/api-guide/search/rank-filter-combine-or-negate"},next:{title:"Filter",permalink:"/docs-new/api-guide/search/filter"}},d=[],h={toc:d};function f(e){var n=e.components,t=(0,r.Z)(e,c);return(0,o.kt)("wrapper",(0,a.Z)({},h,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"combine-or-negate"},"Combine or Negate"),(0,o.kt)("p",null,"You can also combine searches. Unlike our legacy search, in annotation search, ",(0,o.kt)("inlineCode",{parentName:"p"},"Filter")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"Rank")," is a list of ",(0,o.kt)("inlineCode",{parentName:"p"},"Annotation")," objects. Filtered annotations will be ANDed. When you combine both ",(0,o.kt)("inlineCode",{parentName:"p"},"Filter")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"Rank"),", filter will be applied before ranking annotations. This is important because limiting the result set on large applications can speedup the overall query drastically when doing a ranking."),(0,o.kt)(i.Z,{mdxType:"Tabs"},(0,o.kt)(s.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\n// Here we search for images which we labeled with "cat" and for which the General prediction model does not find\n// a "dog" concept.\nMultiSearchResponse postAnnotationsSearchesResponse = stub.postAnnotationsSearches(\n    PostAnnotationsSearchesRequest.newBuilder().addSearches(\n        Search.newBuilder().setQuery(\n            Query.newBuilder()\n                .addFilters(\n                    Filter.newBuilder().setAnnotation(\n                        Annotation.newBuilder().setData(\n                                Data.newBuilder().addConcepts(  // You can search by multiple concepts.\n                                Concept.newBuilder()\n                                    .setId("cat")  // You could search by concept Name as well.\n                                    .setValue(1f)  // Value of 0 will search for images that don\'t have the concept.\n                            )\n                        )\n                    )\n                )\n                .addRanks(\n                Rank.newBuilder().setAnnotation(\n                    Annotation.newBuilder().setData(\n                            Data.newBuilder().addConcepts(  // You can search by multiple concepts.\n                            Concept.newBuilder()\n                                .setId("dog")  // You could search by concept Name as well.\n                                .setValue(1f)  // Value of 0 will search for images that don\'t have the concept.\n                        )\n                    )\n                )\n            )\n        )    \n    )\n    .build()\n);\n\nif (postAnnotationsSearchesResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n  throw new RuntimeException("Post annotations searches failed, status: " + postAnnotationsSearchesResponse.getStatus());\n}\n\nSystem.out.println("Found inputs " + postAnnotationsSearchesResponse.getHitsCount() + ":");\nfor (Hit hit : postAnnotationsSearchesResponse.getHitsList()) {\n    System.out.printf("\\tScore %.2f for annotation % of input %s\\n", hit.getScore(), hit.getAnnotation().getId(), hit.getInput().getId())\n}\n'))),(0,o.kt)(s.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\n// Here we search for images which we labeled with "cat" and for which the General prediction model does not find\n// a "dog" concept.\nstub.PostAnnotationsSearches(\n    {\n        searches: [\n            {\n                query: {\n                    filters: [\n                        {\n                            annotation: {\n                                data: {\n                                    concepts: [  // You can search by multiple concepts.\n                                        {\n                                            id: "cat",  // You could search by concept Name as well.\n                                            value: 1  // Value of 0 will search for images that don\'t have the concept\n                                        }\n                                    ]\n                                }\n                            }\n                        }\n                    ],\n                    ranks: [\n                        {\n                            annotation: {\n                                data: {\n                                    concepts: [  // You can search by multiple concepts.\n                                        {\n                                            id: "dog",  // You could search by concept Name as well.\n                                            value: 0  // Value of 0 will search for images that don\'t have the concept\n                                        }\n                                    ]\n                                }\n                            }\n                        }\n                    ]             \n                }\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post annotations searches failed, status: " + response.status.description);\n        }\n\n        console.log("Search result:");\n        for (const hit of response.hits) {\n            console.log("\\tScore " + hit.score + " for annotation: " + hit.annotation.id + " of input: ", hit.input.id);\n        }\n    }\n);\n'))),(0,o.kt)(s.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from clarifai_grpc.grpc.api import service_pb2, resources_pb2\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\n# Insert here the initialization code as outlined on this page:\n# https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\n# Here we search for images which we labeled with "cat" and for which the General prediction model does not find\n# a "dog" concept.\npost_annotations_searches_response = stub.PostAnnotationsSearches(\n    service_pb2.PostAnnotationsSearchesRequest(\n        searches = [\n            resources_pb2.Search(\n                query=resources_pb2.Query(\n                    filters=[\n                        resources_pb2.Filter(\n                            annotation=resources_pb2.Annotation(\n                                data=resources_pb2.Data(\n                                    concepts=[  # You can search by multiple concepts.\n                                        resources_pb2.Concept(\n                                            id="cat",  # You could search by concept Name as well.\n                                            value=1  # Value of 0 will search for images that don\'t have the concept.\n                                        )\n                                    ]\n                                )\n                            )\n                        )\n                    ],\n                    ranks=[\n                        resources_pb2.Rank(\n                            annotation=resources_pb2.Annotation(\n                                data=resources_pb2.Data(\n                                    concepts=[  # You can search by multiple concepts.\n                                        resources_pb2.Concept(\n                                            id="dog",  # You could search by concept Name as well.\n                                            value=0  # Value of 0 will search for images that don\'t have the concept.\n                                        )\n                                    ]\n                                )\n                            )\n                        )\n                    ]\n                )\n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif post_annotations_searches_response.status.code != status_code_pb2.SUCCESS:\n    print("There was an error with your request!")\n    print("\\tCode: {}".format(post_annotations_searches_response.outputs[0].status.code))\n    print("\\tDescription: {}".format(post_annotations_searches_response.outputs[0].status.description))\n    print("\\tDetails: {}".format(post_annotations_searches_response.outputs[0].status.details))\n    raise Exception("Post searches failed, status: " + post_annotations_searches_response.status.description)\n\nprint("Search result:")\nfor hit in post_annotations_searches_response.hits:\n    print("\\tScore %.2f for annotation: %s off input: %s" % (hit.score, hit.annotation.id, hit.input.id))\n'))),(0,o.kt)(s.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'# Here we search for images which we labeled with "cat" and for which the General prediction model does not find\n# a "dog" concept.\n\ncurl -X POST \\\n  -H "Authorization: Key {api-key}" \\\n  -H "Content-Type: application/json" \\\n-d \'\n{\n    "searches": [\n      {\n        "query": {\n          "filters": [\n            {\n              "annotation": {\n                "data": {\n                  "concepts": [\n                    {\n                      "id":"people",\n                      "value": 1\n                    }\n                  ]\n                }\n              }\n            }\n          ],\n          "ranks": [\n            {\n              "annotation": {\n                "data": {\n                  "concepts": [\n                    {\n                      "id":"people",\n                      "value": 1\n                    }\n                  ]\n                }\n              }\n            }\n          ]\n        }\n      }\n    ]\n}\'\\\nhttps://api.clarifai.com/v2/searches\n'))),(0,o.kt)(s.Z,{value:"js_rest",label:"Javascript (REST)",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'const raw = JSON.stringify({\n  "user_app_id": {\n        "user_id": "{YOUR_USER_ID}",\n        "app_id": "{YOUR_APP_ID}"\n    },\n  "searches": [\n    {\n      "query": {\n        "filters": [\n          {\n            "annotation": {\n              "data": {\n                "concepts": [\n                  {\n                    "id":"people",\n                    "value": 1\n                  }\n                ]\n              }\n            }\n          }\n        ],\n        "ranks": [\n          {\n            "annotation": {\n              "data": {\n                "concepts": [\n                  {\n                    "id":"people",\n                    "value": 1\n                  }\n                ]\n              }\n            }\n          }\n        ]\n      }\n    }\n  ]\n});\n\nconst requestOptions = {\n  method: \'POST\',\n  headers: {\n    \'Accept\': \'application/json\',\n    \'Authorization\': \'Key {YOUR_PERSONAL_TOKEN}\'\n  },\n    body: raw\n};\n\nfetch(`https://api.clarifai.com/v2/searches`, requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log(\'error\', error));\n')))))}f.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[4341],{85162:(e,t,n)=>{n.d(t,{Z:()=>r});var o=n(67294),a=n(86010);const s={tabItem:"tabItem_Ymn6"};function r(e){let{children:t,hidden:n,className:r}=e;return o.createElement("div",{role:"tabpanel",className:(0,a.Z)(s.tabItem,r),hidden:n},t)}},74866:(e,t,n)=>{n.d(t,{Z:()=>T});var o=n(87462),a=n(67294),s=n(86010),r=n(12466),l=n(16550),i=n(91980),c=n(67392),_=n(50012);function u(e){return function(e){return a.Children.map(e,(e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:o,default:a}}=e;return{value:t,label:n,attributes:o,default:a}}))}function p(e){const{values:t,children:n}=e;return(0,a.useMemo)((()=>{const e=t??u(n);return function(e){const t=(0,c.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function d(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function E(e){let{queryString:t=!1,groupId:n}=e;const o=(0,l.k6)(),s=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,i._X)(s),(0,a.useCallback)((e=>{if(!s)return;const t=new URLSearchParams(o.location.search);t.set(s,e),o.replace({...o.location,search:t.toString()})}),[s,o])]}function O(e){const{defaultValue:t,queryString:n=!1,groupId:o}=e,s=p(e),[r,l]=(0,a.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!d({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const o=n.find((e=>e.default))??n[0];if(!o)throw new Error("Unexpected error: 0 tabValues");return o.value}({defaultValue:t,tabValues:s}))),[i,c]=E({queryString:n,groupId:o}),[u,O]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[o,s]=(0,_.Nk)(n);return[o,(0,a.useCallback)((e=>{n&&s.set(e)}),[n,s])]}({groupId:o}),I=(()=>{const e=i??u;return d({value:e,tabValues:s})?e:null})();(0,a.useLayoutEffect)((()=>{I&&l(I)}),[I]);return{selectedValue:r,selectValue:(0,a.useCallback)((e=>{if(!d({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);l(e),c(e),O(e)}),[c,O,s]),tabValues:s}}var I=n(72389);const R={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function C(e){let{className:t,block:n,selectedValue:l,selectValue:i,tabValues:c}=e;const _=[],{blockElementScrollPositionUntilNextRender:u}=(0,r.o5)(),p=e=>{const t=e.currentTarget,n=_.indexOf(t),o=c[n].value;o!==l&&(u(t),i(o))},d=e=>{let t=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const n=_.indexOf(e.currentTarget)+1;t=_[n]??_[0];break}case"ArrowLeft":{const n=_.indexOf(e.currentTarget)-1;t=_[n]??_[_.length-1];break}}t?.focus()};return a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":n},t)},c.map((e=>{let{value:t,label:n,attributes:r}=e;return a.createElement("li",(0,o.Z)({role:"tab",tabIndex:l===t?0:-1,"aria-selected":l===t,key:t,ref:e=>_.push(e),onKeyDown:d,onClick:p},r,{className:(0,s.Z)("tabs__item",R.tabItem,r?.className,{"tabs__item--active":l===t})}),n??t)})))}function h(e){let{lazy:t,children:n,selectedValue:o}=e;const s=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=s.find((e=>e.props.value===o));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return a.createElement("div",{className:"margin-top--md"},s.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==o}))))}function D(e){const t=O(e);return a.createElement("div",{className:(0,s.Z)("tabs-container",R.tabList)},a.createElement(C,(0,o.Z)({},e,t)),a.createElement(h,(0,o.Z)({},e,t)))}function T(e){const t=(0,I.Z)();return a.createElement(D,(0,o.Z)({key:String(t)},e))}},81553:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>y,contentTitle:()=>Y,default:()=>x,frontMatter:()=>k,metadata:()=>H,toc:()=>v});var o=n(87462),a=(n(67294),n(3905)),s=n(74866),r=n(85162),l=n(90814);const i="###############################################################################\n# In this section, we set the user authentication, app ID, and details of the\n# collector we want to add. Change these strings to run your own example.\n###############################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to add your own collector\nCOLLECTOR_ID = 'YOUR_COLLECTOR_ID_HERE'\nCOLLECTOR_DESCRIPTION = 'YOUR_COLLECTOR_DESCRIPTION_HERE'\nPRE_QUEUE_WORKFLOW_ID = 'YOUR_PRE_WORKFLOW_ID_HERE'\nPOST_QUEUE_WORKFLOW_ID = 'YOUR_POST_WORKFLOW_ID_HERE'\nMODEL_ID = 'YOUR_MODEL_ID_HERE'\nMODEL_VERSION_ID = 'YOUR_MODEL_VERSION_ID_HERE' \nPOST_INPUTS_KEY_ID = 'YOUR_API_KEY_HERE'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID) # The userDataObject is required when using a PAT\n\npost_collectors_response = stub.PostCollectors(\n    service_pb2.PostCollectorsRequest(\n        user_app_id=userDataObject,\n        collectors=[\n            resources_pb2.Collector(\n                id=COLLECTOR_ID,\n                description=COLLECTOR_DESCRIPTION,\n                pre_queue_workflow_id=PRE_QUEUE_WORKFLOW_ID,\n                post_queue_workflow_id=POST_QUEUE_WORKFLOW_ID,\n                collector_source=resources_pb2.CollectorSource(\n                    api_post_model_outputs_collector_source=resources_pb2.APIPostModelOutputsCollectorSource(\n                        model_user_id=USER_ID,\n                        model_app_id=APP_ID,\n                        model_id=MODEL_ID,\n                        model_version_id=MODEL_VERSION_ID,\n                        post_inputs_key_id=POST_INPUTS_KEY_ID\n                    )\n                )\n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif post_collectors_response.status.code != status_code_pb2.SUCCESS:\n    print(post_collectors_response.status)   \n    raise Exception(\"Post collectors failed, status: \" + post_collectors_response.status.description)\n\n",c="###############################################################################\n# In this section, we set the user authentication, app ID, and details of the\n# collector we want to update. Change these strings to run your own example.\n###############################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to update your own collector\nCOLLECTOR_ID = 'YOUR_COLLECTOR_ID_HERE'\nCOLLECTOR_DESCRIPTION = 'YOUR_COLLECTOR_DESCRIPTION_HERE'\nPRE_QUEUE_WORKFLOW_ID = 'YOUR_PRE_WORKFLOW_ID_HERE'\nPOST_QUEUE_WORKFLOW_ID = 'YOUR_POST_WORKFLOW_ID_HERE'\nMODEL_ID = 'YOUR_MODEL_ID_HERE'\nMODEL_VERSION_ID = 'YOUR_MODEL_VERSION_ID_HERE' \nPOST_INPUTS_KEY_ID = 'YOUR_KEY_ID_HERE'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID) # The userDataObject is required when using a PAT\n\npatch_collectors_response = stub.PatchCollectors(\n    service_pb2.PatchCollectorsRequest(\n        user_app_id=userDataObject,\n        action = 'overwrite',\n        collectors=[\n            resources_pb2.Collector(\n                id=COLLECTOR_ID,\n                description=COLLECTOR_DESCRIPTION,\n                pre_queue_workflow_id=PRE_QUEUE_WORKFLOW_ID,\n                post_queue_workflow_id=POST_QUEUE_WORKFLOW_ID,\n                collector_source=resources_pb2.CollectorSource(\n                    api_post_model_outputs_collector_source=resources_pb2.APIPostModelOutputsCollectorSource(\n                        model_user_id=USER_ID,\n                        model_app_id=APP_ID,\n                        model_id=MODEL_ID,\n                        model_version_id=MODEL_VERSION_ID,\n                        post_inputs_key_id=POST_INPUTS_KEY_ID\n                    )\n                )\n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif patch_collectors_response.status.code != status_code_pb2.SUCCESS:\n    print(patch_collectors_response.status)  \n    raise Exception(\"Patch collectors failed, status: \" + patch_collectors_response.status.description)\n    ",_="##################################################################\n# In this section, we set the user authentication and app ID.\n# Change these strings to run your own example.\n##################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID) # The userDataObject is required when using a PAT\n\nlist_collectors_response = stub.ListCollectors(\n    service_pb2.ListCollectorsRequest(user_app_id=userDataObject),\n    metadata=metadata\n)\n\nif list_collectors_response.status.code != status_code_pb2.SUCCESS:\n    print(list_collectors_response.status)\n    raise Exception(\"List collectors failed, status: \" + list_collectors_response.status.description)\n\nfor collector in list_collectors_response.collectors:\n    print(collector)\n    \n#print(list_collectors_response.collectors)",u="#####################################################################################\n# In this section, we set the user authentication, app ID, and ID of the collector\n# we want its details. Change these strings to run your own example.\n#####################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change this to get your own collector\nCOLLECTOR_ID = 'YOUR_COLLECTOR_ID_HERE'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID) # The userDataObject is required when using a PAT\n\nget_collector_response = stub.GetCollector(\n    service_pb2.GetCollectorRequest(\n        user_app_id=userDataObject,\n        collector_id=COLLECTOR_ID\n    ),\n    metadata=metadata\n)\n\nif get_collector_response.status.code != status_code_pb2.SUCCESS:\n    print(get_collector_response.status)\n    raise Exception(\"Get collector failed, status: \" + get_collector_response.status.description)\n\nprint(get_collector_response.collector)",p="######################################################################################\n# In this section, we set the user authentication, app ID, and IDs of the collectors\n# we want to delete. Change these strings to run your own example.\n######################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to delete your own collectors\nCOLLECTOR_ID_1 = 'YOUR_COLLECTOR_ID_HERE'\nCOLLECTOR_ID_2 = 'YOUR_COLLECTOR_ID_HERE'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\ndelete_collectors_response = stub.DeleteCollectors(\n    service_pb2.DeleteCollectorsRequest(\n        user_app_id=userDataObject,\n        ids=[COLLECTOR_ID_1, COLLECTOR_ID_2],\n        #delete_all=True #Uncomment to delete all your collectors\n    ),\n    metadata=metadata\n)\n\nif delete_collectors_response.status.code != status_code_pb2.SUCCESS:\n    print(delete_collectors_response.status)\n    raise Exception(\"Delete collectors failed, status: \" + delete_collectors_response.status.description)\n",d="//index.js file\n\n////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and details of the\n// collector we want to add. Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = 'YOUR_USER_ID_HERE';\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\nconst PAT = 'YOUR_PAT_HERE';\nconst APP_ID = 'YOUR_APP_ID_HERE';\n// Change these to add your own collector\nconst COLLECTOR_ID = 'YOUR_COLLECTOR_ID_HERE';\nconst COLLECTOR_DESCRIPTION = 'YOUR_COLLECTOR_DESCRIPTION_HERE';\nconst PRE_QUEUE_WORKFLOW_ID = 'YOUR_PRE_WORKFLOW_ID_HERE';\nconst POST_QUEUE_WORKFLOW_ID = 'YOUR_POST_WORKFLOW_ID_HERE';\nconst MODEL_ID = 'YOUR_MODEL_ID_HERE';\nconst MODEL_VERSION_ID = 'YOUR_MODEL_VERSION_ID_HERE';\nconst POST_INPUTS_KEY_ID = 'YOUR_API_KEY_HERE';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require(\"clarifai-nodejs-grpc\");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set(\"authorization\", \"Key \" + PAT);\n\nstub.PostCollectors(\n    {\n        user_app_id: {\n            \"user_id\": USER_ID,\n            \"app_id\": APP_ID\n        },\n        collectors: [\n            {\n                id: COLLECTOR_ID,\n                description: COLLECTOR_DESCRIPTION,\n                pre_queue_workflow_id: PRE_QUEUE_WORKFLOW_ID,\n                post_queue_workflow_id: POST_QUEUE_WORKFLOW_ID,\n                collector_source: {\n                    api_post_model_outputs_collector_source: {\n                        model_user_id: USER_ID,\n                        model_app_id: APP_ID,\n                        model_id: MODEL_ID,\n                        model_version_id: MODEL_VERSION_ID,\n                        post_inputs_key_id: POST_INPUTS_KEY_ID\n                    }\n                }\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            console.log(response.status);\n            throw new Error(\"Post collectors failed, status: \" + response.status.description);\n        }\n    }\n);",E="//index.js file\n\n////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and details of the\n// collector we want to update. Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = 'YOUR_USER_ID_HERE';\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\nconst PAT = 'YOUR_PAT_HERE';\nconst APP_ID = 'YOUR_APP_ID_HERE';\n// Change these to update your own collector\nconst COLLECTOR_ID = 'YOUR_COLLECTOR_ID_HERE';\nconst COLLECTOR_DESCRIPTION = 'YOUR_NEW_COLLECTOR_DESCRIPTION_HERE';\nconst PRE_QUEUE_WORKFLOW_ID = 'YOUR_NEW_PRE_WORKFLOW_ID';\nconst POST_QUEUE_WORKFLOW_ID = 'YOUR_NEW_POST_WORKFLOW_ID';\nconst MODEL_ID = 'YOUR_NEW_MODEL_ID_HERE';\nconst MODEL_VERSION_ID = 'YOUR_NEW_MODEL_VERSION_ID_HERE';\nconst POST_INPUTS_KEY_ID = 'YOUR_API_KEY_HERE';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require(\"clarifai-nodejs-grpc\");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set(\"authorization\", \"Key \" + PAT);\n\nstub.PatchCollectors(\n    {\n        user_app_id: {\n            \"user_id\": USER_ID,\n            \"app_id\": APP_ID\n        },\n        action: \"overwrite\",\n        collectors: [\n            {\n                id: COLLECTOR_ID,\n                description: COLLECTOR_DESCRIPTION,\n                pre_queue_workflow_id: PRE_QUEUE_WORKFLOW_ID,\n                post_queue_workflow_id: POST_QUEUE_WORKFLOW_ID,\n                collector_source: {\n                    api_post_model_outputs_collector_source: {\n                        model_user_id: USER_ID,\n                        model_app_id: APP_ID,\n                        model_id: MODEL_ID,\n                        model_version_id: MODEL_VERSION_ID,\n                        post_inputs_key_id: POST_INPUTS_KEY_ID\n                    }\n                }\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            console.log(response.status);\n            throw new Error(\"Patch collectors failed, status: \" + response.status.description);\n        }\n    }\n);",O='//index.js file\n\n//////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication and app ID.\n// Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.ListCollectors(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        }\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            console.log(response.status);\n            throw new Error("List collectors failed, status: " + response.status.description);\n        }\n\n        for (const collector of response.collectors) {\n            console.log(collector);\n        }\n    }\n);',I='//index.js file\n\n//////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and ID of the collector\n// we want its details. Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n// Change this to get your own collector\nconst COLLECTOR_ID = \'YOUR_COLLECTOR_ID_HERE\';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.GetCollector(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        collector_id: COLLECTOR_ID\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            console.log(response.status);\n            throw new Error("Get collector failed, status: " + response.status.description);\n        }\n\n        console.log(response.collector);\n    }\n);',R='//index.js file\n\n///////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and IDs of the collectors\n// we want to delete. Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n// Change these to delete your own collectors\nconst COLLECTOR_ID_1 = \'YOUR_COLLECTOR_ID_HERE\';\nconst COLLECTOR_ID_2 = \'YOUR_COLLECTOR_ID_HERE\';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.DeleteCollectors(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        ids: [COLLECTOR_ID_1, COLLECTOR_ID_2],\n        //delete_all: true //Uncomment to delete all your collectors\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            console.log(response.status);\n            throw new Error("Delete collectors failed, status: " + response.status.description);\n        }\n\n        console.log(response.collector);\n    }\n);',C='package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\npublic class ClarifaiExample {\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and details of the\n    // collector we want to add. Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to add your own collector\n    static final String COLLECTOR_ID = "YOUR_COLLECTOR_ID_HERE";\n    static final String COLLECTOR_DESCRIPTION = "YOUR_COLLECTOR_DESCRIPTION_HERE";\n    static final String PRE_QUEUE_WORKFLOW_ID = "YOUR_PRE_WORKFLOW_ID_HERE";\n    static final String POST_QUEUE_WORKFLOW_ID = "YOUR_POST_WORKFLOW_ID_HERE";\n    static final String MODEL_ID = "YOUR_MODEL_ID_HERE";\n    static final String MODEL_VERSION_ID = "YOUR_MODEL_VERSION_ID_HERE";\n    static final String POST_INPUTS_KEY_ID = "YOUR_API_KEY_HERE";    \n       \n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));      \n       \n        MultiCollectorResponse postCollectorsResponse = stub.postCollectors(\n            PostCollectorsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n                .addCollectors(\n                    Collector.newBuilder()\n                        .setId(COLLECTOR_ID)\n                        .setDescription(COLLECTOR_DESCRIPTION)\n                        .setPreQueueWorkflowId(PRE_QUEUE_WORKFLOW_ID)\n                        .setPostQueueWorkflowId(POST_QUEUE_WORKFLOW_ID)\n                        .setCollectorSource(\n                            CollectorSource.newBuilder()\n                                .setApiPostModelOutputsCollectorSource(\n                                    APIPostModelOutputsCollectorSource.newBuilder()\n                                        .setModelUserId(USER_ID)\n                                        .setModelAppId(APP_ID)\n                                        .setModelId(MODEL_ID)\n                                        .setModelVersionId(MODEL_VERSION_ID)\n                                        .setPostInputsKeyId(POST_INPUTS_KEY_ID)\n                                )\n                        )\n                )\n                .build()\n        );\n\n        if (postCollectorsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post collectors failed, status: " + postCollectorsResponse.getStatus());\n        }\n                             \n    }  \n}',h='package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\npublic class ClarifaiExample {\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and details of the\n    // collector we want to update. Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to update your own collector\n    static final String COLLECTOR_ID = "YOUR_COLLECTOR_ID_HERE";\n    static final String COLLECTOR_DESCRIPTION = "YOUR_NEW_COLLECTOR_DESCRIPTION_HERE";\n    static final String PRE_QUEUE_WORKFLOW_ID = "YOUR_NEW_PRE_WORKFLOW_ID";\n    static final String POST_QUEUE_WORKFLOW_ID = "YOUR_NEW_POST_WORKFLOW_ID";\n    static final String MODEL_ID = "YOUR_NEW_MODEL_ID_HERE";\n    static final String MODEL_VERSION_ID = "YOUR_NEW_MODEL_VERSION_ID_HERE";\n    static final String POST_INPUTS_KEY_ID = "YOUR_API_KEY_HERE";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiCollectorResponse patchCollectorsResponse = stub.patchCollectors(\n            PatchCollectorsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .setAction("overwrite")\n            .addCollectors(\n                Collector.newBuilder()\n                .setId(COLLECTOR_ID)\n                .setDescription(COLLECTOR_DESCRIPTION)\n                .setPreQueueWorkflowId(PRE_QUEUE_WORKFLOW_ID)\n                .setPostQueueWorkflowId(POST_QUEUE_WORKFLOW_ID)\n                .setCollectorSource(\n                    CollectorSource.newBuilder()\n                    .setApiPostModelOutputsCollectorSource(\n                        APIPostModelOutputsCollectorSource.newBuilder()\n                        .setModelUserId(USER_ID)\n                        .setModelAppId(APP_ID)\n                        .setModelId(MODEL_ID)\n                        .setModelVersionId(MODEL_VERSION_ID)\n                        .setPostInputsKeyId(POST_INPUTS_KEY_ID)\n                    )\n                )\n            )\n            .build()\n        );\n\n        if (patchCollectorsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post collectors failed, status: " + patchCollectorsResponse.getStatus());\n        }\n    }\n}',D='package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\npublic class ClarifaiExample {\n\n    ////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication and app ID.\n    // Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";  \n       \n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));      \n       \n        MultiCollectorResponse listCollectorsResponse = stub.listCollectors(\n            ListCollectorsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n                .build()\n        );\n\n        if (listCollectorsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("List collectors failed, status: " + listCollectorsResponse.getStatus());\n        }\n\n        for (Collector collector : listCollectorsResponse.getCollectorsList()) {\n            System.out.println(collector);\n        }\n           \n    }  \n}',T='package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\npublic class ClarifaiExample {\n\n    ///////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and ID of the collector\n    // we want its details. Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";  \n    // Change this to get your own collector\n    static final String COLLECTOR_ID = "YOUR_COLLECTOR_ID_HERE";\n       \n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));          \n\n        SingleCollectorResponse getCollectorResponse = stub.getCollector(\n            GetCollectorRequest.newBuilder()\n                .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n                .setCollectorId(COLLECTOR_ID)\n                .build()\n        );\n\n        if (getCollectorResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Get collector failed, status: " + getCollectorResponse.getStatus());\n        }\n\n        System.out.println(getCollectorResponse.getCollector());  \n    }  \n}',f='package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\npublic class ClarifaiExample {\n\n    ////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and IDs of the collectors\n    // we want to delete. Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";  \n    // Change these to delete your own collectors\n    static final String COLLECTOR_ID_1 = "YOUR_COLLECTOR_ID_HERE";\n    static final String COLLECTOR_ID_2 = "YOUR_COLLECTOR_ID_HERE";\n       \n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));    \n       \n        BaseResponse deleteCollectorsResponse = stub.deleteCollectors(\n            DeleteCollectorsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n                .addIds(COLLECTOR_ID_1)\n                .addIds(COLLECTOR_ID_2)\n                .build()\n        );\n\n        if (deleteCollectorsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Delete collectors failed, status: " + deleteCollectorsResponse.getStatus());\n        }\n\n    }  \n}',m='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and details of the\n// collector we want to add. Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change these to add your own collector\n$COLLECTOR_ID = \'YOUR_COLLECTOR_ID_HERE\';\n$COLLECTOR_DESCRIPTION = \'YOUR_COLLECTOR_DESCRIPTION_HERE\';\n$PRE_QUEUE_WORKFLOW_ID = \'YOUR_PRE_WORKFLOW_ID_HERE\';\n$POST_QUEUE_WORKFLOW_ID = \'YOUR_POST_WORKFLOW_ID_HERE\';\n$MODEL_ID = \'YOUR_MODEL_ID_HERE\';\n$MODEL_VERSION_ID = \'YOUR_MODEL_VERSION_ID_HERE\';\n$POST_INPUTS_KEY_ID = \'YOUR_API_KEY_HERE\';\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\Api\\Collector;\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\PostCollectorsRequest;\nuse Clarifai\\Api\\CollectorSource;\nuse Clarifai\\Api\\APIPostModelOutputsCollectorSource;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PostCollectors(\n        // The request object carries the request along with the request status and other metadata related to the request itself\n        new PostCollectorsRequest([\n            "user_app_id" => $userDataObject,\n            "collectors" => [\n                new Collector([                    \n                    "id" => $COLLECTOR_ID,\n                    "description" => $COLLECTOR_DESCRIPTION,\n                    "pre_queue_workflow_id" => $PRE_QUEUE_WORKFLOW_ID,\n                    "post_queue_workflow_id" => $POST_QUEUE_WORKFLOW_ID,\n                    "collector_source" => \n                        new CollectorSource([\n                            "api_post_model_outputs_collector_source" => \n                                new APIPostModelOutputsCollectorSource([\n                                    "model_user_id" => $USER_ID,\n                                    "model_app_id" => $APP_ID,\n                                    "model_id" => $MODEL_ID,\n                                    "model_version_id" => $MODEL_VERSION_ID,\n                                    "post_inputs_key_id" => $POST_INPUTS_KEY_ID\n                                ])\n                            \n                        ])                    \n                \n                ])              \n            ]\n        ]),\n        $metadata\n    )->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\n?>\n',P='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and details of the\n// collector we want to update. Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change these to update your own collector\n$COLLECTOR_ID = \'YOUR_COLLECTOR_ID_HERE\';\n$COLLECTOR_DESCRIPTION = \'YOUR_NEW_COLLECTOR_DESCRIPTION_HERE\';\n$PRE_QUEUE_WORKFLOW_ID = \'YOUR_NEW_PRE_WORKFLOW_ID\';\n$POST_QUEUE_WORKFLOW_ID = \'YOUR_NEW_POST_WORKFLOW_ID\';\n$MODEL_ID = \'YOUR_NEW_MODEL_ID_HERE\';\n$MODEL_VERSION_ID = \'YOUR_NEW_MODEL_VERSION_ID_HERE\';\n$POST_INPUTS_KEY_ID = \'YOUR_API_KEY_HERE\';\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\Api\\Collector;\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\PatchCollectorsRequest;\nuse Clarifai\\Api\\CollectorSource;\nuse Clarifai\\Api\\APIPostModelOutputsCollectorSource;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PatchCollectors(\n        // The request object carries the request along with the request status and other metadata related to the request itself\n        new PatchCollectorsRequest([\n            "user_app_id" => $userDataObject,\n            "action" => "overwrite",\n            "collectors" => [\n                new Collector([                    \n                    "id" => $COLLECTOR_ID,\n                    "description" => $COLLECTOR_DESCRIPTION,\n                    "pre_queue_workflow_id" => $PRE_QUEUE_WORKFLOW_ID,\n                    "post_queue_workflow_id" => $POST_QUEUE_WORKFLOW_ID,\n                    "collector_source" => \n                        new CollectorSource([\n                            "api_post_model_outputs_collector_source" => \n                                new APIPostModelOutputsCollectorSource([\n                                    "model_user_id" => $USER_ID,\n                                    "model_app_id" => $APP_ID,\n                                    "model_id" => $MODEL_ID,\n                                    "model_version_id" => $MODEL_VERSION_ID,\n                                    "post_inputs_key_id" => $POST_INPUTS_KEY_ID\n                                ])\n                            \n                        ])                    \n                \n                ])              \n            ]\n        ]),\n        $metadata\n    )->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\n?>\n',S='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n//////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication and app ID.\n// Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\ListCollectorsRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->ListCollectors(\n        // The request object carries the request along with the request status and other metadata related to the request itself\n        new ListCollectorsRequest([\n            "user_app_id" => $userDataObject          \n        ]),\n        $metadata\n    )->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\nforeach ($response->getCollectors() as $collector){\n    print $collector->serializeToJsonString(). "<br>";    \n}\n\n?>\n',g='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n//////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and ID of the collector\n// we want its details. Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change this to get your own collector\n$COLLECTOR_ID = \'YOUR_COLLECTOR_ID_HERE\';\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\GetCollectorRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->GetCollector(\n        // The request object carries the request along with the request status and other metadata related to the request itself\n        new GetCollectorRequest([\n            "user_app_id" => $userDataObject,\n            "collector_id" => $COLLECTOR_ID         \n        ]),\n        $metadata\n    )->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\nprint $response->getCollector()->serializeToJsonString();\n\n?>\n',U='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n///////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and IDs of the collectors\n// we want to delete. Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change these to delete your own collectors\n$COLLECTOR_ID_1 = \'YOUR_COLLECTOR_ID_HERE\';\n$COLLECTOR_ID_2 = \'YOUR_COLLECTOR_ID_HERE\';\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\DeleteCollectorsRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->DeleteCollectors(\n        // The request object carries the request along with the request status and other metadata related to the request itself\n        new DeleteCollectorsRequest([\n            "user_app_id" => $userDataObject,\n            "ids"=> [\n                $COLLECTOR_ID_1, $COLLECTOR_ID_2\n            ],\n            //"delete_all" => true // Uncomment to delete all your collectors\n        ]),\n        $metadata\n    )->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\n?>\n',A='curl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/collectors" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  --data-raw \'{\n    "collectors": [\n        {\n            "id": "YOUR_COLLECTOR_ID_HERE",\n            "description": "YOUR_COLLECTOR_DESCRIPTION_HERE",\n            "pre_queue_workflow_id": "YOUR_PRE_WORKFLOW_ID_HERE",\n            "post_queue_workflow_id": "YOUR_POST_WORKFLOW_ID_HERE",\n            "collector_source": {\n                "api_post_model_outputs_collector_source": {\n                    "model_user_id": "YOUR_USER_ID_HERE",\n                    "model_app_id": "YOUR_APP_ID_HERE",\n                    "model_id": "YOUR_MODEL_ID_HERE",\n                    "model_version_id": "YOUR_MODEL_VERSION_ID_HERE",\n                    "post_inputs_key_id": "YOUR_API_KEY_HERE"\n                }\n            }\n       }\n    ]\n}\'',L='curl -X PATCH "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/collectors" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  --data-raw \'{\n    "action": "overwrite",\n    "collectors": [\n        {\n            "id": "YOUR_COLLECTOR_ID_HERE",\n            "description": "YOUR_NEW_COLLECTOR_DESCRIPTION_HERE",\n            "pre_queue_workflow_id": "YOUR_NEW_PRE_WORKFLOW_ID_HERE",\n            "post_queue_workflow_id": "YOUR_NEW_POST_WORKFLOW_ID_HERE",\n            "collector_source": {\n                "api_post_model_outputs_collector_source": {\n                    "model_user_id": "YOUR_USER_ID_HERE",\n                    "model_app_id": "YOUR_APP_ID_HERE",\n                    "model_id": "YOUR_NEW_MODEL_ID_HERE",\n                    "model_version_id": "YOUR_NEW_MODEL_VERSION_ID_HERE",\n                    "post_inputs_key_id": "YOUR_API_KEY_HERE"\n                }\n            }\t\t\t\n       }\n    ]\n}\'',w='curl -X GET "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/collectors" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json"',b='curl -X GET "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/collectors/YOUR_COLLECTOR_ID_HERE" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json"',N='curl -X DELETE "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/collectors" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  --data-raw \'{\n    "ids": ["YOUR_COLLECTOR_ID_HERE", "YOUR_COLLECTOR_ID_HERE"]\n}\'\n',k={description:"Capture data for your application.",sidebar_position:4},Y="Collectors",H={unversionedId:"api-guide/data/collectors",id:"api-guide/data/collectors",title:"Collectors",description:"Capture data for your application.",source:"@site/docs/api-guide/data/collectors.md",sourceDirName:"api-guide/data",slug:"/api-guide/data/collectors",permalink:"/api-guide/data/collectors",draft:!1,editUrl:"https://github.com/Clarifai/docs/blob/main/docs/api-guide/data/collectors.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{description:"Capture data for your application.",sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Dataset Versions",permalink:"/api-guide/data/datasets/dataset-versions"},next:{title:"Making Predictions",permalink:"/api-guide/predict/"}},y={},v=[{value:"Collector Parameters",id:"collector-parameters",level:2},{value:"Collector ID",id:"collector-id",level:3},{value:"Description",id:"description",level:3},{value:"Pre-queue Workflow",id:"pre-queue-workflow",level:3},{value:"Post Inputs Key",id:"post-inputs-key",level:3},{value:"Source",id:"source",level:3},{value:"Add Collector",id:"add-collector",level:2},{value:"Update Collector",id:"update-collector",level:2},{value:"List Collectors",id:"list-collectors",level:2},{value:"Get Collector",id:"get-collector",level:2},{value:"Delete Collector",id:"delete-collector",level:2}],W={toc:v},$="wrapper";function x(e){let{components:t,...n}=e;return(0,a.kt)($,(0,o.Z)({},W,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"collectors"},"Collectors"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Capture data for your application")),(0,a.kt)("hr",null),(0,a.kt)("p",null,"Collectors capture input data for your app. They enable you to pipe in data from production models automatically, and are the key to unlocking many platform training capabilities like active learning. "),(0,a.kt)("p",null,"Collectors are available with Essential and Enterprise plans to help you manage data ingestion at scale."),(0,a.kt)("p",null,"You can create app-level collectors to monitor specific models and specify sampling rules for triggering data ingestion. Collectors can only collect data from apps where you are the app owner."),(0,a.kt)("h2",{id:"collector-parameters"},"Collector Parameters"),(0,a.kt)("h3",{id:"collector-id"},"Collector ID"),(0,a.kt)("p",null,"Give your collector a useful and descriptive name."),(0,a.kt)("h3",{id:"description"},"Description"),(0,a.kt)("p",null,"Provide additional details about your collector."),(0,a.kt)("h3",{id:"pre-queue-workflow"},"Pre-queue Workflow"),(0,a.kt)("p",null,"In many scenarios, you will only want to ingest a sample, or subset of a given data source into your app. Pre-queue workflows allow you to pre-process your inputs so that you can sample and filter your new data before it is ever added to your app. Pre-queue workflows allow you to specify sampling rules for triggering data ingestion. "),(0,a.kt)("p",null,"Common pre-queue workflows are designed to:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Randomly sample inputs"),(0,a.kt)("li",{parentName:"ul"},"Filter inputs by metadata"),(0,a.kt)("li",{parentName:"ul"},"Filter inputs with a maximum probability below a given threshold"),(0,a.kt)("li",{parentName:"ul"},"Filter inputs with a minimum probability above a given threshold"),(0,a.kt)("li",{parentName:"ul"},"Filter specific concept probabilities above a given threshold"),(0,a.kt)("li",{parentName:"ul"},"Undertake knowledge graph mapping from public General model concepts to a custom model")),(0,a.kt)("p",null,"At least one ","(","pre-queue or post-queue",")"," workflow ID is required. The input to this workflow is going to be the OUTPUT of the model. We recommend that you use fast and light-weight models in it as it will affect the speed of the predictions being made."),(0,a.kt)("h3",{id:"post-inputs-key"},"Post Inputs Key"),(0,a.kt)("p",null,"Select the ",(0,a.kt)("a",{parentName:"p",href:"https://docs.clarifai.com/clarifai-basics/authentication/app-specific-api-keys"},"API")," key that you would like to use to allow new inputs to be posted to your app. This is the post-queue workflow ID of the workflow to run to after the collector has processed the queued input. This API key must have the PostInputs scope, since it grants the collector the authority to POST inputs to your app."),(0,a.kt)("p",null,"This workflow uses the original input to the model as input to the workflow so that you can run additional models as well on that input to decide whether to queue the model or not. If the workflow output has any field that is non-empty, then it will be passed on to POST /inputs to the destination app. "),(0,a.kt)("p",null,"At least one ","(","pre-queue or post-queue",")"," workflow ID is required."),(0,a.kt)("h3",{id:"source"},"Source"),(0,a.kt)("p",null,"Select the model that you would like to collect data from, and the collector will automatically post the new inputs to your app. Simply enter your model name, or model ID number. When the user predicts an input against this model, the input is going to be collected."),(0,a.kt)("p",null,"You need to specify the app ID and user ID where the model is located. If using a publicly available model, the model's user and app ID should be ",(0,a.kt)("inlineCode",{parentName:"p"},"clarifai")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"main"),", respectively. Otherwise, the IDs should belong to the user who created the model. You also need to specify an API key ID where the inputs are going to be added."),(0,a.kt)("p",null,"See also ",(0,a.kt)("a",{parentName:"p",href:"https://docs.clarifai.com/api-guide/workflows/common-workflows/auto-annotation-walkthrough/"},"Auto Annotation walkthrough"),"."),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"The initialization code used in the following examples is outlined in detail on the ",(0,a.kt)("a",{parentName:"p",href:"https://docs.clarifai.com/api-guide/api-overview/api-clients/#client-installation-instructions"},"client installation page."))),(0,a.kt)("h2",{id:"add-collector"},"Add Collector"),(0,a.kt)("p",null,"Add a new collector to your application."),(0,a.kt)(s.Z,{mdxType:"Tabs"},(0,a.kt)(r.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,a.kt)(l.Z,{className:"language-python",mdxType:"CodeBlock"},i)),(0,a.kt)(r.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,a.kt)(l.Z,{className:"language-javascript",mdxType:"CodeBlock"},d)),(0,a.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)(l.Z,{className:"language-java",mdxType:"CodeBlock"},C)),(0,a.kt)(r.Z,{value:"php",label:"PHP",mdxType:"TabItem"},(0,a.kt)(l.Z,{className:"language-php",mdxType:"CodeBlock"},m)),(0,a.kt)(r.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,a.kt)(l.Z,{className:"language-bash",mdxType:"CodeBlock"},A))),(0,a.kt)("h2",{id:"update-collector"},"Update Collector"),(0,a.kt)("p",null,"Update an existing collector."),(0,a.kt)(s.Z,{mdxType:"Tabs"},(0,a.kt)(r.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,a.kt)(l.Z,{className:"language-python",mdxType:"CodeBlock"},c)),(0,a.kt)(r.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,a.kt)(l.Z,{className:"language-javascript",mdxType:"CodeBlock"},E)),(0,a.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)(l.Z,{className:"language-javascript",mdxType:"CodeBlock"},h)),(0,a.kt)(r.Z,{value:"php",label:"PHP",mdxType:"TabItem"},(0,a.kt)(l.Z,{className:"language-php",mdxType:"CodeBlock"},P)),(0,a.kt)(r.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,a.kt)(l.Z,{className:"language-bash",mdxType:"CodeBlock"},L))),(0,a.kt)("h2",{id:"list-collectors"},"List Collectors"),(0,a.kt)("p",null,"List all the collectors. See ",(0,a.kt)("a",{parentName:"p",href:"https://docs.clarifai.com/api-guide/advanced-topics/pagination/"},"Pagination")," on how to control which page gets displayed."),(0,a.kt)(s.Z,{mdxType:"Tabs"},(0,a.kt)(r.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,a.kt)(l.Z,{className:"language-python",mdxType:"CodeBlock"},_)),(0,a.kt)(r.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,a.kt)(l.Z,{className:"language-javascript",mdxType:"CodeBlock"},O)),(0,a.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)(l.Z,{className:"language-java",mdxType:"CodeBlock"},D)),(0,a.kt)(r.Z,{value:"php",label:"PHP",mdxType:"TabItem"},(0,a.kt)(l.Z,{className:"language-php",mdxType:"CodeBlock"},S)),(0,a.kt)(r.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,a.kt)(l.Z,{className:"language-bash",mdxType:"CodeBlock"},w))),(0,a.kt)("h2",{id:"get-collector"},"Get Collector"),(0,a.kt)("p",null,"Return details of a certain collector."),(0,a.kt)(s.Z,{mdxType:"Tabs"},(0,a.kt)(r.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,a.kt)(l.Z,{className:"language-python",mdxType:"CodeBlock"},u)),(0,a.kt)(r.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,a.kt)(l.Z,{className:"language-javascript",mdxType:"CodeBlock"},I)),(0,a.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)(l.Z,{className:"language-java",mdxType:"CodeBlock"},T)),(0,a.kt)(r.Z,{value:"php",label:"PHP",mdxType:"TabItem"},(0,a.kt)(l.Z,{className:"language-php",mdxType:"CodeBlock"},g)),(0,a.kt)(r.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,a.kt)(l.Z,{className:"language-bash",mdxType:"CodeBlock"},b))),(0,a.kt)("h2",{id:"delete-collector"},"Delete Collector"),(0,a.kt)("p",null,"Delete a collector."),(0,a.kt)(s.Z,{mdxType:"Tabs"},(0,a.kt)(r.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,a.kt)(l.Z,{className:"language-python",mdxType:"CodeBlock"},p)),(0,a.kt)(r.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,a.kt)(l.Z,{className:"language-javascript",mdxType:"CodeBlock"},R)),(0,a.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)(l.Z,{className:"language-java",mdxType:"CodeBlock"},f)),(0,a.kt)(r.Z,{value:"php",label:"PHP",mdxType:"TabItem"},(0,a.kt)(l.Z,{className:"language-php",mdxType:"CodeBlock"},U)),(0,a.kt)(r.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,a.kt)(l.Z,{className:"language-bash",mdxType:"CodeBlock"},N))))}x.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[2968],{95223:(e,t,l)=>{l.r(t),l.d(t,{assets:()=>h,contentTitle:()=>d,default:()=>f,frontMatter:()=>c,metadata:()=>u,toc:()=>m});var r=l(74848),n=l(28453),a=l(11470),o=l(19365),s=l(21432);const i="from clarifai.client.model import Model\nmodel = Model(model_id='model_id', user_id='user_id', app_id='app_id') # no need to provide any actual values of `model_id`, `user_id` and `app_id`\n\nimage_url = \"https://samples.clarifai.com/metro-north.jpg\"\n\n# Model Predict\nmodel_prediction = model.predict_by_url(image_url,)",c={description:"Learn how to test your locally built models",sidebar_position:2},d="Test Models Locally",u={id:"sdk/compute-orchestration/test-models-locally",title:"Test Models Locally",description:"Learn how to test your locally built models",source:"@site/docs/sdk/compute-orchestration/test-models-locally.md",sourceDirName:"sdk/compute-orchestration",slug:"/sdk/compute-orchestration/test-models-locally",permalink:"/sdk/compute-orchestration/test-models-locally",draft:!1,unlisted:!1,editUrl:"https://github.com/Clarifai/docs/blob/main/docs/sdk/compute-orchestration/test-models-locally.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{description:"Learn how to test your locally built models",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Upload Custom Models",permalink:"/sdk/compute-orchestration/model-upload"},next:{title:"Clusters and Nodepools",permalink:"/sdk/compute-orchestration/set-up-compute"}},h={},m=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Test by Running Locally",id:"test-by-running-locally",level:2},{value:"Test by Starting a gRPC Server",id:"test-by-starting-a-grpc-server",level:2}];function p(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,n.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h1,{id:"test-models-locally",children:"Test Models Locally"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"Learn how to test your custom models locally"})}),"\n",(0,r.jsx)("hr",{}),"\n",(0,r.jsx)(t.p,{children:"To successfully upload a custom model to the Clarifai platform \u2014 whether you've built it from scratch or sourced it from an external repository like Hugging Face \u2014 it's crucial to test it locally in a Docker or virtual environment first."}),"\n",(0,r.jsx)(t.p,{children:"This step helps identify and resolve potential issues such as setup file errors, typos, code misconfigurations, or incorrect model implementations before uploading."}),"\n",(0,r.jsx)(t.p,{children:"By doing so, you can ensure the model runs seamlessly and that all dependencies are properly configured, minimizing the risk of upload failures and ensuring optimal performance."}),"\n",(0,r.jsx)(t.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["Set up the latest version of the ",(0,r.jsx)(t.a,{href:"https://docs.clarifai.com/sdk/cli",children:"Clarifai CLI"})," (command line interface) tool.  We'll use the tool to test models in the local development environment."]}),"\n",(0,r.jsxs)(t.li,{children:["Set up either a Docker container (recommended) or a Python virtual ",(0,r.jsx)(t.a,{href:"https://docs.clarifai.com/sdk/compute-orchestration/model-upload#set-up-docker-or-a-virtual-environment",children:"local development environment"}),". This ensures proper dependency management and prevents conflicts in your project."]}),"\n"]}),"\n","\n","\n",(0,r.jsxs)(t.admonition,{title:"CLI Flags",type:"note",children:[(0,r.jsx)(t.p,{children:"These are the key CLI flags available for local testing and running your models:"}),(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"--mode"})," \u2014  Specify how to run the model: ",(0,r.jsx)(t.code,{children:"env"})," for virtual environment or ",(0,r.jsx)(t.code,{children:"container"})," for Docker container. Defaults to ",(0,r.jsx)(t.code,{children:"env"}),"."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"-p"})," or ",(0,r.jsx)(t.code,{children:"--port"})," \u2014  The port to host the gRPC server for running the model locally. Defaults to ",(0,r.jsx)(t.code,{children:"8000"}),"."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"--keep_env"})," \u2014  Retain the virtual environment after testing the model locally (applicable for ",(0,r.jsx)(t.code,{children:"env"})," mode). Defaults to ",(0,r.jsx)(t.code,{children:"False"}),"."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"--keep_image"})," \u2014  Retain the Docker image built after testing the model locally (applicable for ",(0,r.jsx)(t.code,{children:"container"})," mode). Defaults to ",(0,r.jsx)(t.code,{children:"False"}),"."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"--skip_dockerfile"})," \u2014 Flag to skip generating a dockerfile so that you can manually edit an already created dockerfile."]}),"\n"]})]}),"\n",(0,r.jsxs)(t.admonition,{title:"Local Model Path",type:"tip",children:[(0,r.jsxs)(t.p,{children:["You can specify the path to the directory containing the custom model you want to test. For example, if your model's files are stored in ",(0,r.jsx)(t.code,{children:"./examples/models/clarifai_llama"}),", use the following command:"]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-sh",children:"clarifai model test-locally ./examples/models/clarifai_llama --mode container\n"})}),(0,r.jsx)(t.p,{children:"If you don\u2019t specify a path, the current directory is used by default. In that case, simply navigate to the directory and run:"}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-sh",children:"clarifai model test-locally --mode container\n"})})]}),"\n",(0,r.jsx)(t.h2,{id:"test-by-running-locally",children:"Test by Running Locally"}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"test-locally"})," method allows you to test your model with a single CLI command. It runs the model locally and sends a sample request to verify that the model responds successfully. The results of the request are displayed directly in the console."]}),"\n",(0,r.jsx)(t.p,{children:"Here is how to test a model in a Docker Container:"}),"\n",(0,r.jsx)(a.A,{children:(0,r.jsx)(o.A,{value:"bash",label:"Bash",children:(0,r.jsx)(s.A,{className:"language-bash",children:" clarifai model test-locally --mode container "})})}),"\n",(0,r.jsx)(t.p,{children:"Here is how to test a model in a virtual environment:"}),"\n",(0,r.jsx)(a.A,{children:(0,r.jsx)(o.A,{value:"bash",label:"Bash",children:(0,r.jsx)(s.A,{className:"language-bash",children:" clarifai model test-locally --mode env "})})}),"\n",(0,r.jsx)(t.h2,{id:"test-by-starting-a-grpc-server",children:"Test by Starting a gRPC Server"}),"\n",(0,r.jsxs)(t.p,{children:["The  ",(0,r.jsx)(t.code,{children:"run-locally"})," method starts a local gRPC server at ",(0,r.jsx)(t.code,{children:"https://localhost:{port}/"})," for running the model. Once the server is running, you can perform inference on the model via the Clarifai Python SDK."]}),"\n",(0,r.jsx)(t.p,{children:"Here is how to test a model in a Docker Container:"}),"\n",(0,r.jsx)(a.A,{children:(0,r.jsx)(o.A,{value:"bash",label:"Bash",children:(0,r.jsx)(s.A,{className:"language-bash",children:" clarifai model run-locally --mode container --port 8000 "})})}),"\n",(0,r.jsx)(t.p,{children:"Here is how to test a model in a virtual environment:"}),"\n",(0,r.jsx)(a.A,{children:(0,r.jsx)(o.A,{value:"bash",label:"Bash",children:(0,r.jsx)(s.A,{className:"language-bash",children:" clarifai model run-locally --mode env --port 8000  "})})}),"\n",(0,r.jsxs)(t.p,{children:["Once the model is running locally, you need to configure the ",(0,r.jsx)(t.code,{children:"CLARIFAI_API_BASE"})," environment variable to point to the localhost and port where the gRPC server is running."]}),"\n",(0,r.jsx)(a.A,{children:(0,r.jsx)(o.A,{value:"bash",label:"Bash",children:(0,r.jsxs)(s.A,{className:"language-bash",children:[' export CLARIFAI_API_BASE="localhost',":add-port-here",'" ']})})}),"\n",(0,r.jsxs)(t.p,{children:["You can then make different ",(0,r.jsx)(t.a,{href:"https://docs.clarifai.com/sdk/compute-orchestration/set-up-compute#predict-with-deployed-model",children:"types of inference requests"})," using the model \u2014 unary-unary, unary-stream, or stream-stream predict calls."]}),"\n",(0,r.jsx)(t.p,{children:"Here is an example of a unary-unary prediction call:"}),"\n",(0,r.jsx)(a.A,{children:(0,r.jsx)(o.A,{value:"python",label:"Python",children:(0,r.jsx)(s.A,{className:"language-python",children:i})})})]})}function f(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},19365:(e,t,l)=>{l.d(t,{A:()=>o});l(96540);var r=l(18215);const n={tabItem:"tabItem_Ymn6"};var a=l(74848);function o(e){let{children:t,hidden:l,className:o}=e;return(0,a.jsx)("div",{role:"tabpanel",className:(0,r.A)(n.tabItem,o),hidden:l,children:t})}},11470:(e,t,l)=>{l.d(t,{A:()=>k});var r=l(96540),n=l(18215),a=l(23104),o=l(56347),s=l(205),i=l(57485),c=l(31682),d=l(70679);function u(e){return r.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:t,children:l}=e;return(0,r.useMemo)((()=>{const e=t??function(e){return u(e).map((e=>{let{props:{value:t,label:l,attributes:r,default:n}}=e;return{value:t,label:l,attributes:r,default:n}}))}(l);return function(e){const t=(0,c.X)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,l])}function m(e){let{value:t,tabValues:l}=e;return l.some((e=>e.value===t))}function p(e){let{queryString:t=!1,groupId:l}=e;const n=(0,o.W6)(),a=function(e){let{queryString:t=!1,groupId:l}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!l)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return l??null}({queryString:t,groupId:l});return[(0,i.aZ)(a),(0,r.useCallback)((e=>{if(!a)return;const t=new URLSearchParams(n.location.search);t.set(a,e),n.replace({...n.location,search:t.toString()})}),[a,n])]}function f(e){const{defaultValue:t,queryString:l=!1,groupId:n}=e,a=h(e),[o,i]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:l}=e;if(0===l.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:l}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${l.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const r=l.find((e=>e.default))??l[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:a}))),[c,u]=p({queryString:l,groupId:n}),[f,y]=function(e){let{groupId:t}=e;const l=function(e){return e?`docusaurus.tab.${e}`:null}(t),[n,a]=(0,d.Dv)(l);return[n,(0,r.useCallback)((e=>{l&&a.set(e)}),[l,a])]}({groupId:n}),b=(()=>{const e=c??f;return m({value:e,tabValues:a})?e:null})();(0,s.A)((()=>{b&&i(b)}),[b]);return{selectedValue:o,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:a}))throw new Error(`Can't select invalid tab value=${e}`);i(e),u(e),y(e)}),[u,y,a]),tabValues:a}}var y=l(92303);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var g=l(74848);function x(e){let{className:t,block:l,selectedValue:r,selectValue:o,tabValues:s}=e;const i=[],{blockElementScrollPositionUntilNextRender:c}=(0,a.a_)(),d=e=>{const t=e.currentTarget,l=i.indexOf(t),n=s[l].value;n!==r&&(c(t),o(n))},u=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const l=i.indexOf(e.currentTarget)+1;t=i[l]??i[0];break}case"ArrowLeft":{const l=i.indexOf(e.currentTarget)-1;t=i[l]??i[i.length-1];break}}t?.focus()};return(0,g.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,n.A)("tabs",{"tabs--block":l},t),children:s.map((e=>{let{value:t,label:l,attributes:a}=e;return(0,g.jsx)("li",{role:"tab",tabIndex:r===t?0:-1,"aria-selected":r===t,ref:e=>i.push(e),onKeyDown:u,onClick:d,...a,className:(0,n.A)("tabs__item",b.tabItem,a?.className,{"tabs__item--active":r===t}),children:l??t},t)}))})}function v(e){let{lazy:t,children:l,selectedValue:n}=e;const a=(Array.isArray(l)?l:[l]).filter(Boolean);if(t){const e=a.find((e=>e.props.value===n));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return(0,g.jsx)("div",{className:"margin-top--md",children:a.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==n})))})}function j(e){const t=f(e);return(0,g.jsxs)("div",{className:(0,n.A)("tabs-container",b.tabList),children:[(0,g.jsx)(x,{...t,...e}),(0,g.jsx)(v,{...t,...e})]})}function k(e){const t=(0,y.A)();return(0,g.jsx)(j,{...e,children:u(e.children)},String(t))}}}]);
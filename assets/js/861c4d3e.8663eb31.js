"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[4409],{19365:(e,t,n)=>{n.d(t,{A:()=>i});var a=n(96540),r=n(20053);const s={tabItem:"tabItem_Ymn6"};function i(e){let{children:t,hidden:n,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.A)(s.tabItem,i),hidden:n},t)}},11470:(e,t,n)=>{n.d(t,{A:()=>_});var a=n(58168),r=n(96540),s=n(20053),i=n(23104),o=n(56347),l=n(57485),u=n(31682),c=n(89466);function d(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function p(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??d(n);return function(e){const t=(0,u.X)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function g(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function m(e){let{queryString:t=!1,groupId:n}=e;const a=(0,o.W6)(),s=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,l.aZ)(s),(0,r.useCallback)((e=>{if(!s)return;const t=new URLSearchParams(a.location.search);t.set(s,e),a.replace({...a.location,search:t.toString()})}),[s,a])]}function h(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,s=p(e),[i,o]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!g({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:s}))),[l,u]=m({queryString:n,groupId:a}),[d,h]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,s]=(0,c.Dv)(n);return[a,(0,r.useCallback)((e=>{n&&s.set(e)}),[n,s])]}({groupId:a}),y=(()=>{const e=l??d;return g({value:e,tabValues:s})?e:null})();(0,r.useLayoutEffect)((()=>{y&&o(y)}),[y]);return{selectedValue:i,selectValue:(0,r.useCallback)((e=>{if(!g({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);o(e),u(e),h(e)}),[u,h,s]),tabValues:s}}var y=n(92303);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function w(e){let{className:t,block:n,selectedValue:o,selectValue:l,tabValues:u}=e;const c=[],{blockElementScrollPositionUntilNextRender:d}=(0,i.a_)(),p=e=>{const t=e.currentTarget,n=c.indexOf(t),a=u[n].value;a!==o&&(d(t),l(a))},g=e=>{let t=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const n=c.indexOf(e.currentTarget)+1;t=c[n]??c[0];break}case"ArrowLeft":{const n=c.indexOf(e.currentTarget)-1;t=c[n]??c[c.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":n},t)},u.map((e=>{let{value:t,label:n,attributes:i}=e;return r.createElement("li",(0,a.A)({role:"tab",tabIndex:o===t?0:-1,"aria-selected":o===t,key:t,ref:e=>c.push(e),onKeyDown:g,onClick:p},i,{className:(0,s.A)("tabs__item",f.tabItem,i?.className,{"tabs__item--active":o===t})}),n??t)})))}function v(e){let{lazy:t,children:n,selectedValue:a}=e;const s=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=s.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},s.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function b(e){const t=h(e);return r.createElement("div",{className:(0,s.A)("tabs-container",f.tabList)},r.createElement(w,(0,a.A)({},e,t)),r.createElement(v,(0,a.A)({},e,t)))}function _(e){const t=(0,y.A)();return r.createElement(b,(0,a.A)({key:String(t)},e))}},85630:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>u,default:()=>h,frontMatter:()=>l,metadata:()=>c,toc:()=>p});var a=n(58168),r=(n(96540),n(15680)),s=(n(11470),n(19365),n(77964));const i='Keywords extracted : 1. "Misuse of large language models"\n2. "Quality control in LLM outputs"\n3. "Ethical implications of LLMs"\nRating score for context 1: score=1.0\nRating score for context 2: score=2.0\nRating score for context 3: score=2.0\nRating score for context 4: score=2.0\nRating score for context 5: score=2.0\nRating score for context 6: score=1.0\nRating score for context 7: score=1.0\nRating score for context 8: score=1.0\nRating score for context 9: score=1.0\nRating score for context 10: score=1.0\nQuestion: What are the potential risks associated with large language models (LLMs) according to the context information?\nPredicted Answer: The potential risks associated with large language models (LLMs) according to the context information include data leakage, performance inconsistency in tasks involving long textual contexts, and complexity in managing and utilizing extensive APIs.',o="According to the context information provided, the potential risks associated with large language models (LLMs) are not explicitly stated. However, it is mentioned that there are risks associated with LLMs, and these risks are considered particularly important given their widespread use. Additionally, the context information highlights the importance of detecting, measuring, and mitigating biases in LLMs to prevent associated harms. It also mentions that a better understanding of bias metrics can help researchers better adapt and deploy LLMs. For more specific risks, one might need to refer to the cited source (Bender et al., 2021).",l={sidebar_position:3.1},u="Multistage RAG Pipeline With DSPy",c={unversionedId:"integrations/DSPy/multistage-dspy",id:"integrations/DSPy/multistage-dspy",title:"Multistage RAG Pipeline With DSPy",description:"A tutorial by Mogith PN",source:"@site/docs/integrations/DSPy/multistage-dspy.md",sourceDirName:"integrations/DSPy",slug:"/integrations/DSPy/multistage-dspy",permalink:"/integrations/DSPy/multistage-dspy",draft:!1,editUrl:"https://github.com/Clarifai/docs/blob/main/docs/integrations/DSPy/multistage-dspy.md",tags:[],version:"current",sidebarPosition:3.1,frontMatter:{sidebar_position:3.1},sidebar:"tutorialSidebar",previous:{title:"Building RAG with DSPy",permalink:"/integrations/DSPy/rag-dspy"},next:{title:"Integrating Unstructred.io with Clarifai",permalink:"/integrations/unstructured/"}},d={},p=[{value:"What is RAG?",id:"what-is-rag",level:2},{value:"Why do we need a Re-ranker node?",id:"why-do-we-need-a-re-ranker-node",level:2},{value:"DSPY Typed Predictors",id:"dspy-typed-predictors",level:3}],g={toc:p},m="wrapper";function h(e){let{components:t,...n}=e;return(0,r.yg)(m,(0,a.A)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"multistage-rag-pipeline-with-dspy"},"Multistage RAG Pipeline With DSPy"),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"A tutorial by Mogith PN")),(0,r.yg)("hr",null),(0,r.yg)("p",null,"Information retrieval techniques are growing at such a high pace that the quest for ever-more efficient and accurate systems continues. One such advanced methodology is called RAG. But what if we could push the boundaries of RAG even further? Today, we'll explore the exciting potential of multi-stage, multi-model RAG systems built with DSPy."),(0,r.yg)("h2",{id:"what-is-rag"},"What is RAG?"),(0,r.yg)("p",null,"Imagine a system that can sift through mountains of information, identify the most relevant bits, and then craft a clear and concise response to your query. That's the essence of RAG. It operates in three key stages:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Retrieval: A ",(0,r.yg)("inlineCode",{parentName:"li"},"retriever")," module dives into a vast corpus of documents, seeking information related to the user's query."),(0,r.yg)("li",{parentName:"ul"},"Augmentation: The retrieved information changes at the ",(0,r.yg)("inlineCode",{parentName:"li"},"augmenter")," stage. This might involve filtering, summarising, or enriching the data with additional context."),(0,r.yg)("li",{parentName:"ul"},"Generation: Finally, the ",(0,r.yg)("inlineCode",{parentName:"li"},"generator")," creates a high-quality response that effectively addresses the user's query.")),(0,r.yg)("p",null,"Visit ",(0,r.yg)("a",{parentName:"p",href:"https://docs.clarifai.com/sdk/rag"},"this")," page to learn more about RAG."),(0,r.yg)("p",null,"But how will DSPy help RAG? Well, DSPy supercharges the process inside RAG. Traditional large language model applications often suffer from \"fragility,\" requiring constant tweaking and adjustments when components change. DSPy framework optimizes the entire pipeline for your specific task, eliminating the need for repetitive manual fine-tuning whenever you modify a component. By integrating Clarifai with DSPy, you unlock access to Clarifai's powerful capabilities, including its ability to seamlessly call language models (LLMs) directly from the Clarifai platform. This integration empowers you to leverage Clarifai's application as a retriever specifically suited for vector search use cases."),(0,r.yg)("p",null,"Before we move on, install and setup some packages,"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"!pip install dspy-ai\n!pip install clarifai\n")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"import os\n#Replace your PAT\nos.environ['CLARIFAI_PAT'] =\"YOUR_PAT\"\n")),(0,r.yg)("center",null,(0,r.yg)("img",{src:"/img/python-sdk/multistage-rag.png",width:"700",height:"700"})),(0,r.yg)("p",null,"Now let's explore a possible implementation of a multi-stage, multi-model RAG system using DSPy.  The motive of this experiment is to test the functionality of DSPy in building multi-stage systems in our RAG pipelines. Also, the compatibility to call and use multi models at different stages of the pipeline."),(0,r.yg)("p",null,"You can choose any LLM\u2019s from ",(0,r.yg)("a",{parentName:"p",href:"https://clarifai.com/explore/models?searchQuery=llm&page=1&perPage=24"},"this")," page."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},'import dspy\nfrom dspy.retrieve.clarifai_rm import ClarifaiRM\n\nMODEL_URL1 = "https://clarifai.com/mistralai/completion/models/mistral-7B-Instruct"\nMODEL_URL2 = "https://clarifai.com/meta/Llama-2/models/llama2-7b-chat"\nPAT = "**********"\nUSER_ID = "USER_ID"\nAPP_ID = "APP_ID"\n\nmistral_llm=dspy.Clarifai(model=MODEL_URL1, api_key=PAT, n=1, inference_params={\'temperature\':0.6})\nretriever_clarifai=ClarifaiRM(clarifai_user_id=USER_ID, clarfiai_app_id=APP_ID, clarifai_pat=PAT, k=5)\n')),(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"GenerateAnswer")," class acts as a module within the DSPy pipeline. It takes the user's question and a relevant summary passage as inputs and then utilizes these to generate a concise answer. "),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},'class GenerateAnswer(dspy.Signature):\n    """Think and Answer the questions based on the context provided."""\n\n context = dspy.InputField(desc="may contain relevant summary passage about user query")\n question = dspy.InputField(desc="User query")\n answer = dspy.OutputField(desc="Generate a brief answer")\n')),(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"GenerateKeywords")," class acts as a module within the DSPy pipeline. It takes the user's query as input and then generates a set of keywords that are closely related to the user's original query."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},'class GenerateKeywords(dspy.Signature):\n  """Generate Key words for search, which will be related to user\'s query"""\n query = dspy.InputField(desc="User query")\n answer = dspy.OutputField(desc="3 Search Key words related to user query")\n')),(0,r.yg)("h2",{id:"why-do-we-need-a-re-ranker-node"},"Why do we need a Re-ranker node?"),(0,r.yg)("p",null,"We are retrieving contexts in 2 ways for our pipeline, starting with query search and keyword search, so our retrieved contexts will be quite huge for the model to handle. "),(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"Reranker")," class acts as a quality control step within the DSPy pipeline. It takes a single retrieved document and the user's question as input. It then analyzes the document to assess how well it aligns with the user's query and provides a factual answer. The assigned rating (between 1 and 5) serves as an indicator of the document's relevance, potentially influencing how the retrieved information is used in subsequent stages of the pipeline. "),(0,r.yg)("h3",{id:"dspy-typed-predictors"},"DSPY Typed Predictors"),(0,r.yg)("p",null,"In DSPy, typed predictors are a mechanism to enforce type constraints on the inputs and outputs of modules within a pipeline. "),(0,r.yg)("p",null,"Click ",(0,r.yg)("a",{parentName:"p",href:"https://dspy-docs.vercel.app/docs/building-blocks/typed_predictors"},"here")," to learn more about typed predictors."),(0,r.yg)("p",null,"First, let's define the output for the re-ranker model to be float using ",(0,r.yg)("inlineCode",{parentName:"p"},"dspy typed predictors"),". And then we will create the ",(0,r.yg)("inlineCode",{parentName:"p"},"Reranker")," class."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},'from pydantic import BaseModel, Field\n\nclass Reranker_Output(BaseModel):\n score: float = Field(desc="A rating between 1 to 10 based on relevance and semantic match, IMPORTANT !  `float` . Nothing else return only float value as output.")\n')),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},'class Reranker(dspy.Signature):\n  """Evaluate and rate the retrieved contexts based on their relevance in providing factual answers to user questions."""\n\n context = dspy.InputField(desc="The context retrieved for answering question")\n question = dspy.InputField(desc="User query")\n rating = dspy.OutputField(desc="A rating between 1 to 5, IMPORTANT !  `float` . Nothing else return only float value as output.")\n')),(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"Multi_RAG")," module constructs a multi-stage information retrieval system using DSPy. It extracts keywords to broaden the search, retrieves information using both the query and keywords, and then employs a separate language model to evaluate and rank the retrieved passages based on their relevance to the user's question. This multi-stage approach with distinct components allows for a more comprehensive and potentially more accurate information retrieval process."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"import re\nimport functools\n\nclass Multi_RAG(dspy.Module):\n    def __init__(self):\n        super().__init__()\n\n        self.retrieve = dspy.Retrieve(k=5)\n        self.generate_kv = dspy.ChainOfThought(GenerateKeywords)\n        self.generate_answer = dspy.ChainOfThought(GenerateAnswer)\n        self.generate_ratings = dspy.functional.TypedPredictor(Reranker)\n\n    def forward(self, question):\n      with dspy.context(lm=llama_llm):\n kv = self.generate_kv(query=question).answer\n        print(f\"Keywords extracted : {(kv)}\")\n\n context=[]\n      for search_query in [question,kv]:\n results = self.retrieve(search_query).passages\n\n context.extend(results)\n\n context_rating = []\n counter=0\n      for retrieved_context in context:\n _rating={}\n        with dspy.context(lm=mistral_llm):\n rating = self.generate_ratings(context=retrieved_context, question=question).rating\n _rating['id'] = counter\n _rating['score'] = rating\n _rating['context'] = retrieved_context\n counter+=1\n        print(f\"Rating score for context {counter}: {rating}\")\n context_rating.append(_rating)\n\n sorted_data = sorted(context_rating, key=lambda x: float(x['score'].score))\n\n ranked_context = [passage[\"context\"] for passage in sorted_data[:5]]\n      \n\n      with dspy.context(lm=solar_llm):\n prediction = self.generate_answer(context=str(ranked_context), question=question)\n        return dspy.Prediction(context=str(ranked_context), answer=prediction.answer)\n")),(0,r.yg)("p",null,"And finally, we run a query on the ",(0,r.yg)("inlineCode",{parentName:"p"},"Multi_Rag")," class,"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},'my_question = "What are the potential risks associated with large language models (LLMs) according to the context information?"\n\n# Get the prediction. This contains `pred.context` and `pred.answer`.\nRag_obj= Multi_RAG()\npredict_response = Rag_obj(my_question)\n\n# Print the contexts and the answer.\nprint(f"Question: {my_question}")\nprint(f"Predicted Answer: {predict_response.answer}")\n')),(0,r.yg)("details",null,(0,r.yg)("summary",null,"Output"),(0,r.yg)(s.A,{className:"language-python",mdxType:"CodeBlock"},i)),(0,r.yg)("p",null,"Now we will compare the results obtained from Multistage DSPy RAG with a Vanilla RAG."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},'from clarifai.rag import RAG\n\nrag_agent = RAG.setup(app_url="YOUR_APP_URL",\n                      llm_url="https://clarifai.com/mistralai/completion/models/mistral-large", max_results=5)\nn_rag_response = rag_agent.chat(messages=[{"role": "human", "content": "What are the potential risks associated with large language models (LLMs) according to the context information?"}])\nprint(n_rag_response[0]["content"])\n')),(0,r.yg)("details",null,(0,r.yg)("summary",null,"Output"),(0,r.yg)(s.A,{className:"language-python",mdxType:"CodeBlock"},o)),(0,r.yg)("p",null,"Then we can evaluate the performance of each RAG with the help of ",(0,r.yg)("inlineCode",{parentName:"p"},"ragas")," library. Ragas is a valuable tool for assessing the performance of RAG pipelines."),(0,r.yg)("p",null,"Evaluation of Multistage DSPy RAG,"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},'from datasets import Dataset\nfrom ragas.metrics import faithfulness, answer_correctness\nfrom ragas import evaluate\n\ndata_samples = {\n    \'question\': [benchmark_files["examples"][0]["query"]],\n    \'answer\': [predict_response.answer],\n    \'ground_truth\': [benchmark_files["examples"][0]["reference_answer"]]\n}\ndataset = Dataset.from_dict(data_samples)\nscore = evaluate(dataset,metrics=[answer_correctness])\nscore.to_pandas()\n')),(0,r.yg)("details",null,(0,r.yg)("summary",null,"Output"),(0,r.yg)("img",{src:"/img/python-sdk/multistage-eval.png",width:"700",height:"700"})),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},'from datasets import Dataset\nfrom ragas.metrics import faithfulness, answer_correctness\nfrom ragas import evaluate\n\ndata_samples = {\n    \'question\': [benchmark_files["examples"][0]["query"]],\n    \'answer\': [n_rag_response[0]["content"]],\n    \'ground_truth\': [benchmark_files["examples"][0]["reference_answer"]]\n}\ndataset = Dataset.from_dict(data_samples)\nscore = evaluate(dataset,metrics=[answer_correctness])\nscore.to_pandas()\n')),(0,r.yg)("details",null,(0,r.yg)("summary",null,"Output"),(0,r.yg)("img",{src:"/img/python-sdk/vanilla_rag_eval.png",width:"700",height:"700"})),(0,r.yg)("p",null,"If you observe the values of ",(0,r.yg)("inlineCode",{parentName:"p"},"answer_correctness")," for both RAGs, it can be seen that Multistage DSPy RAG outperforms Naive RAG. This Multi-Stage Multi-model RAG is a testament to the ability of DSPy framework and its modular nature of building different sets of stages within our LLM application."))}h.isMDXComponent=!0}}]);
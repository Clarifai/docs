"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[3152],{85162:(e,t,a)=>{a.d(t,{Z:()=>s});var i=a(67294),n=a(86010);const r={tabItem:"tabItem_Ymn6"};function s(e){let{children:t,hidden:a,className:s}=e;return i.createElement("div",{role:"tabpanel",className:(0,n.Z)(r.tabItem,s),hidden:a},t)}},74866:(e,t,a)=>{a.d(t,{Z:()=>w});var i=a(87462),n=a(67294),r=a(86010),s=a(12466),o=a(16550),l=a(91980),p=a(67392),u=a(50012);function c(e){return function(e){return n.Children.map(e,(e=>{if(!e||(0,n.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:a,attributes:i,default:n}}=e;return{value:t,label:a,attributes:i,default:n}}))}function h(e){const{values:t,children:a}=e;return(0,n.useMemo)((()=>{const e=t??c(a);return function(e){const t=(0,p.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,a])}function d(e){let{value:t,tabValues:a}=e;return a.some((e=>e.value===t))}function m(e){let{queryString:t=!1,groupId:a}=e;const i=(0,o.k6)(),r=function(e){let{queryString:t=!1,groupId:a}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:t,groupId:a});return[(0,l._X)(r),(0,n.useCallback)((e=>{if(!r)return;const t=new URLSearchParams(i.location.search);t.set(r,e),i.replace({...i.location,search:t.toString()})}),[r,i])]}function f(e){const{defaultValue:t,queryString:a=!1,groupId:i}=e,r=h(e),[s,o]=(0,n.useState)((()=>function(e){let{defaultValue:t,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!d({value:t,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const i=a.find((e=>e.default))??a[0];if(!i)throw new Error("Unexpected error: 0 tabValues");return i.value}({defaultValue:t,tabValues:r}))),[l,p]=m({queryString:a,groupId:i}),[c,f]=function(e){let{groupId:t}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(t),[i,r]=(0,u.Nk)(a);return[i,(0,n.useCallback)((e=>{a&&r.set(e)}),[a,r])]}({groupId:i}),g=(()=>{const e=l??c;return d({value:e,tabValues:r})?e:null})();(0,n.useLayoutEffect)((()=>{g&&o(g)}),[g]);return{selectedValue:s,selectValue:(0,n.useCallback)((e=>{if(!d({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);o(e),p(e),f(e)}),[p,f,r]),tabValues:r}}var g=a(72389);const y={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function b(e){let{className:t,block:a,selectedValue:o,selectValue:l,tabValues:p}=e;const u=[],{blockElementScrollPositionUntilNextRender:c}=(0,s.o5)(),h=e=>{const t=e.currentTarget,a=u.indexOf(t),i=p[a].value;i!==o&&(c(t),l(i))},d=e=>{let t=null;switch(e.key){case"Enter":h(e);break;case"ArrowRight":{const a=u.indexOf(e.currentTarget)+1;t=u[a]??u[0];break}case"ArrowLeft":{const a=u.indexOf(e.currentTarget)-1;t=u[a]??u[u.length-1];break}}t?.focus()};return n.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":a},t)},p.map((e=>{let{value:t,label:a,attributes:s}=e;return n.createElement("li",(0,i.Z)({role:"tab",tabIndex:o===t?0:-1,"aria-selected":o===t,key:t,ref:e=>u.push(e),onKeyDown:d,onClick:h},s,{className:(0,r.Z)("tabs__item",y.tabItem,s?.className,{"tabs__item--active":o===t})}),a??t)})))}function _(e){let{lazy:t,children:a,selectedValue:i}=e;const r=(Array.isArray(a)?a:[a]).filter(Boolean);if(t){const e=r.find((e=>e.props.value===i));return e?(0,n.cloneElement)(e,{className:"margin-top--md"}):null}return n.createElement("div",{className:"margin-top--md"},r.map(((e,t)=>(0,n.cloneElement)(e,{key:t,hidden:e.props.value!==i}))))}function k(e){const t=f(e);return n.createElement("div",{className:(0,r.Z)("tabs-container",y.tabList)},n.createElement(b,(0,i.Z)({},e,t)),n.createElement(_,(0,i.Z)({},e,t)))}function w(e){const t=(0,g.Z)();return n.createElement(k,(0,i.Z)({key:String(t)},e))}},5413:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>v,contentTitle:()=>w,default:()=>P,frontMatter:()=>k,metadata:()=>I,toc:()=>x});var i=a(87462),n=(a(67294),a(3905)),r=a(74866),s=a(85162),o=a(90814);const l="from clarifai.client.user import User\nfrom PIL import Image\nimport requests\nfrom IPython.display import display\n\n# Fill in your user ID, app ID, and personal access token (PAT)\nUSER_ID = ''\nAPP_ID = ''\nPAT = ''\n\n# Initialize a User object with your credentials\nclient = User(user_id=USER_ID, pat=PAT)\n\n# Create an application with the specified app ID and base workflow\napp = client.create_app(app_id=APP_ID, base_workflow=\"Universal\", pat=PAT)\n\n# URLs of images to be uploaded\nurls = [\n    \"https://images.pexels.com/photos/139257/pexels-photo-139257.jpeg\",\n    \"https://images.pexels.com/photos/1879386/pexels-photo-1879386.jpeg\",\n    \"https://images.pexels.com/photos/1071882/pexels-photo-1071882.jpeg\"\n]\n\n# Initialize an Inputs object for uploading images and a Search object for searching\ninput_obj = app.inputs()\nsearch = app.search(top_k=2)\n\n# Upload images from the provided URLs\nfor i, url in enumerate(urls):\n    input_obj.upload_from_url(input_id=f\"input{i}\", image_url=url)\n\n# Perform a search query to find images (filters for images only)\nres = search.query(filters=[{'input_types': ['image']}])\n\n# Retrieve the URL of the first image from the search results\nfor r in res:\n    hit = r.hits[0].input.data.image.url\n    break\n\n# Print the URL of the found image\nprint(hit)\n\n# Display the found image\nhit_img = Image.open(requests.get(hit, stream=True).raw).resize((300, 250))\ndisplay(hit_img)",p='from google.protobuf.struct_pb2 import Struct\nfrom clarifai.client.user import User\nfrom PIL import Image\nimport requests\nfrom IPython.display import display\n\nUSER_ID=\'\'  # Fill in your user ID\nAPP_ID=\'\'   # Fill in your app ID\nPAT=\'\'      # Fill in your personal access token\n\n# Initialize a Clarifai user with provided credentials\nclient = User(user_id=USER_ID, pat=PAT)\n\n# Create a Clarifai application with provided ID and base workflow\n# Replace \'Universal\' with \'General\' or other appropriate workflow if needed\napp = client.create_app(app_id=APP_ID, base_workflow="Universal", pat=PAT)\n\n# Initialize a search object for the created application with top-k results set to 2\nsearch = app.search(top_k=2)\n\n# Define metadata for the image\nmetadata = Struct()\nmetadata.update({"filename": "XiJinping.jpg", "split": "train"})\n\n# Specify the URL of the image to be uploaded\nurl = "https://samples.clarifai.com/XiJinping.jpg"\n\n# Upload the image from the URL with associated metadata\ninput_obj.upload_from_url(input_id="metadata", image_url=url, metadata=metadata)\n\n# Define metadata filter for the search query\nmetadata = {"filename": "XiJinping.jpg"}\n\n# Execute the search query with the specified metadata filter\nresponse = search.query(filters=[{"metadata": metadata}])\n\n# Retrieve and process the search results\nresp = list(response)\nfor r in resp:\n    hit = r.hits[0].input.data.image.url\n    break\n\n# Print the URL of the retrieved image and display it\nprint(hit)\nhit_img = Image.open(requests.get(hit, stream=True).raw).resize((300,250))\ndisplay(hit_img)',u="from clarifai.client.user import User \nfrom PIL import Image \nimport requests \nfrom IPython.display import display \n\nUSER_ID=''  # Specify your Clarifai user ID\nAPP_ID=''   # Specify your Clarifai application ID\nPAT=''      # Specify your Clarifai personal access token\n\n# Create a User instance with the specified user ID and personal access token\nclient = User(user_id=USER_ID, pat=PAT)\n\n# Create an application instance using the specified application ID and base workflow ('Universal')\napp = client.create_app(app_id=APP_ID, base_workflow=\"Universal\")\n\n# Initialize a search object associated with the created application, specifying the maximum number of results to retrieve\nsearch = app.search(top_k=2)\n\n# Define the URL of the image to be uploaded for geolocation-based filtering\nurl = \"https://samples.clarifai.com/XiJinping.jpg\"\n\n# Upload the image from the specified URL with associated geolocation information (longitude and latitude)\ninput_obj.upload_from_url(input_id=\"geo\", image_url=url, geo_info=[-30.0, 40.0])\n\n# Execute a search query with a filter based on geolocation information (longitude, latitude, and radius)\nresponse = search.query(filters=[{\"geo_point\": {'longitude':40.0, 'latitude':-30.0, 'geo_limit': 100}}])\n\n# Convert the response to a list and retrieve the URL of the first image hit\nresp = list(response)\nfor r in resp:\n    hit = r.hits[0].input.data.image.url\n    break\n\n# Print the URL of the hit image\nprint(hit)\n\n# Open the hit image using requests, resize it, and display it\nhit_img = Image.open(requests.get(hit, stream=True).raw).resize((300,250))\ndisplay(hit_img)",c="from google.protobuf.struct_pb2 import Struct\nfrom clarifai.client.user import User\nfrom PIL import Image\nimport requests\nfrom IPython.display import display\n\n# Replace with your Clarifai user ID, app ID, and personal access token (PAT)\nUSER_ID = ''\nAPP_ID = ''\nPAT = ''\n\n# Initialize Clarifai user with specified user ID\nclient = User(user_id=USER_ID)\n\n# Create a Clarifai application with the provided app ID, using the 'Universal' base workflow\napp = client.create_app(app_id=APP_ID, base_workflow=\"Universal\", pat=PAT)\n\n# Initialize a search object for the application with a maximum of 2 results\nsearch = app.search(top_k=2)\n\n# URL of the image to be uploaded for search\nurl = \"https://samples.clarifai.com/XiJinping.jpg\"\n\n# Upload the image from the specified URL with an input ID of 'geo'\ninput_obj.upload_from_url(input_id=\"geo\", image_url=url)\n\n# Query the application's search with a filter to retrieve inputs with a status code of 30000\nresponse = search.query(filters=[{'input_status_code': 30000}])\n\n# Convert the response to a list and retrieve the URL of the first hit input\nresp = list(response)\nfor r in resp:\n    hit = r.hits[0].input.data.image.url\n    break\n\n# Print the URL of the hit input\nprint(hit)\n\n# Open and display the image corresponding to the hit input URL\nhit_img = Image.open(requests.get(hit, stream=True).raw).resize((300,250))\ndisplay(hit_img)",h="# Import necessary modules\nfrom clarifai.client.user import User\nfrom PIL import Image\nimport requests\nfrom IPython.display import display\nimport pandas as pd\n\n# Specify user credentials\nUSER_ID=''\nAPP_ID=''\nPAT=''\n\n# Initialize Clarifai client\nclient = User(user_id=USER_ID)\n\n# Create an application with specified parameters\napp = client.create_app(app_id=APP_ID, base_workflow=\"Universal\", pat=PAT)\n\n# Create a dataset within the application\ndataset = app.create_dataset(dataset_id=\"demo_dataset\")\n\n# Define a list of image URLs\nurls = [\n    \"https://images.pexels.com/photos/139257/pexels-photo-139257.jpeg\",\n    \"https://images.pexels.com/photos/1879386/pexels-photo-1879386.jpeg\",\n    \"https://images.pexels.com/photos/1071882/pexels-photo-1071882.jpeg\"\n]\n\n# Convert the list of URLs to a DataFrame and save it as a CSV file\ndf = pd.DataFrame(urls, columns=['input'])\ndf.to_csv(\"images.csv\", index=False)\n\n# Upload images to the dataset from the CSV file\ndataset.upload_from_csv(csv_path='images.csv', input_type='image', csv_type='url', labels=False)\n\n# Initialize a search instance for the application\nsearch = app.search(top_k=2)\n\n# Query the search with filters based on the dataset\nresponse = search.query(filters=[{\"input_dataset_ids\": [dataset.id]}])\n\n# Retrieve and display the first image hit from the search response\nresp = list(response)\nfor r in resp:\n    hit = r.hits[0].input.data.image.url\n    break\nprint(hit)\nhit_img = Image.open(requests.get(hit, stream=True).raw).resize((300,250))\ndisplay(hit_img)",d="# Importing necessary modules\nfrom google.protobuf.struct_pb2 import Struct\nfrom clarifai.client.user import User\nfrom clarifai.client.search import Search\n\n# Replace with your Clarifai account information\nUSER_ID = ''  # Your user ID\nAPP_ID = ''   # Your app ID\nPAT = ''      # Your personal access token\n\n# Creating a User object with your credentials\nclient = User(user_id=USER_ID)\n\n# Creating an app with specified settings\n# (Example Workflows: 'Universal', 'General')\napp = client.create_app(app_id=APP_ID, base_workflow=\"Universal\", pat=PAT)\n\n# Initializing a Search object\ns = Search(user_id=USER_ID, app_id=APP_ID, pat=PAT)\n\n# URL of the image and raw text to be uploaded\nimg_url = \"https://images.pexels.com/photos/139257/pexels-photo-139257.jpeg\"\nraw_text = \"This is earth.\"\n\n# Uploading the image and raw text as inputs\ninput_obj = app.inputs()\ninput_obj.upload_from_url(input_id=\"img_input\", image_url=img_url)\ninput_obj.upload_text(input_id=\"txt_input\", raw_text=raw_text)\n\n# Querying the search with filters to retrieve results\nres = s.query(filters=[{'input_types': ['image', 'text']}])\n\n# Iterating through the search results\nfor r in res:\n    # Extracting text and image URL from the search results\n    text_hit = r.hits[0].input.data.text\n    image_hit = r.hits[1].input.data.image.url\n    break  # Exiting the loop after the first result\n\n# Printing the extracted text and image URL\nprint(text_hit)\nprint(image_hit)\n\n# Displaying the image using its URL\nhit_img = Image.open(requests.get(image_hit, stream=True).raw).resize((300, 250))\ndisplay(hit_img)",m="https://images.pexels.com/photos/139257/pexels-photo-139257.jpeg",f="https://samples.clarifai.com/XiJinping.jpg",g="https://samples.clarifai.com/XiJinping.jpg",y="https://samples.clarifai.com/XiJinping.jpg",b="https://images.pexels.com/photos/1879386/pexels-photo-1879386.jpeg",_='url: "https://data.clarifai.com/orig/users/8tzpjy1a841y/apps/multimodal/inputs/text/bed3a836aea9e11c141fdc45ab741778"\n\nhosted {\n\n  prefix: "https://data.clarifai.com"\n\n  suffix: "users/8tzpjy1a841y/apps/multimodal/inputs/text/bed3a836aea9e11c141fdc45ab741778"\n\n  sizes: "orig"\n\n  crossorigin: "use-credentials"\n\n}\n\ntext_info {\n\n  char_count: 14\n\n  encoding: "UTF8"\n\n}\n\nhttps://images.pexels.com/photos/139257/pexels-photo-139257.jpeg',k={sidebar_position:2,description:"Learn how to perform Filter Search"},w="Filter",I={unversionedId:"python-sdk/Search/Filter",id:"python-sdk/Search/Filter",title:"Filter",description:"Learn how to perform Filter Search",source:"@site/docs/python-sdk/Search/Filter.md",sourceDirName:"python-sdk/Search",slug:"/python-sdk/Search/Filter",permalink:"/python-sdk/Search/Filter",draft:!1,editUrl:"https://github.com/Clarifai/docs/blob/main/docs/python-sdk/Search/Filter.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,description:"Learn how to perform Filter Search"},sidebar:"tutorialSidebar",previous:{title:"Ranks",permalink:"/python-sdk/Search/Ranks"},next:{title:"Advance Search Operations",permalink:"/python-sdk/Search/Advance-Search"}},v={},x=[{value:"Filter with Input Type",id:"filter-with-input-type",level:2},{value:"Filter with Metadata",id:"filter-with-metadata",level:2},{value:"Filter with Geopoint",id:"filter-with-geopoint",level:2},{value:"Filter with Input Status Code",id:"filter-with-input-status-code",level:2},{value:"Filter with Dataset-ID",id:"filter-with-dataset-id",level:2},{value:"MultiModal Filtering",id:"multimodal-filtering",level:2}],T={toc:x},U="wrapper";function P(e){let{components:t,...a}=e;return(0,n.kt)(U,(0,i.Z)({},T,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"filter"},"Filter"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Learn how to perform search with filters using Clarifai Python SDK")),(0,n.kt)("hr",null),(0,n.kt)("p",null,"The filter feature in Clarifai's search functionality allows users to narrow down search results based on specific criteria or conditions. Filters act as constraints that refine the set of results returned by a search query. Users can specify various filter parameters to tailor the search results to their needs. These parameters might include attributes such as input type, status code, metadata, or other properties associated with the data being searched."),(0,n.kt)("p",null,"Click ",(0,n.kt)("a",{parentName:"p",href:"https://docs.clarifai.com/api-guide/search/filter"},"here")," to know more about Filter."),(0,n.kt)("h2",{id:"filter-with-input-type"},"Filter with Input Type"),(0,n.kt)("p",null,"Filtering with input type in Clarifai enables users to narrow down search results based on the type of data input. For example, users can specify to only retrieve results that are of a particular input type, such as images, videos, or text. This functionality allows for more targeted searches, ensuring that search results align with the desired data format or content type."),(0,n.kt)(r.Z,{mdxType:"Tabs"},(0,n.kt)(s.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,n.kt)(o.Z,{className:"language-python",mdxType:"CodeBlock"},l))),(0,n.kt)("details",null,(0,n.kt)("summary",null,"Output"),(0,n.kt)(o.Z,{className:"language-text",mdxType:"CodeBlock"},m),(0,n.kt)("img",{src:"/img/python-sdk/fl_it.png",width:"700",height:"700"})),(0,n.kt)("h2",{id:"filter-with-metadata"},"Filter with Metadata"),(0,n.kt)("p",null,"The filter feature in Clarifai's search functionality allows users to narrow down search results based on specific criteria or conditions. Filters act as constraints that refine the set of results returned by a search query. In the following example, we are showing the filter method with the use of metadata."),(0,n.kt)(r.Z,{mdxType:"Tabs"},(0,n.kt)(s.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,n.kt)(o.Z,{className:"language-python",mdxType:"CodeBlock"},p))),(0,n.kt)("details",null,(0,n.kt)("summary",null,"Output"),(0,n.kt)(o.Z,{className:"language-text",mdxType:"CodeBlock"},f),(0,n.kt)("img",{src:"/img/python-sdk/fl_md.png",width:"700",height:"700"})),(0,n.kt)("h2",{id:"filter-with-geopoint"},"Filter with Geopoint"),(0,n.kt)("p",null,"Filtering with geopoint in Clarifai allows users to refine search results based on geographic location data associated with the inputs. This feature enables users to specify geographical coordinates such as latitude and longitude to filter inputs that are within a certain proximity or region. By incorporating geopoint filters, users can perform location-based searches, facilitating tasks such as retrieving content relevant to specific geographic areas or analyzing data within a particular region."),(0,n.kt)(r.Z,{mdxType:"Tabs"},(0,n.kt)(s.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,n.kt)(o.Z,{className:"language-python",mdxType:"CodeBlock"},u))),(0,n.kt)("details",null,(0,n.kt)("summary",null,"Output"),(0,n.kt)(o.Z,{className:"language-text",mdxType:"CodeBlock"},g),(0,n.kt)("img",{src:"/img/python-sdk/fl_gp.png",width:"700",height:"700"})),(0,n.kt)("h2",{id:"filter-with-input-status-code"},"Filter with Input Status Code"),(0,n.kt)("p",null,"Filtering with input status code in Clarifai allows users to refine search results based on the status of the input data. This feature enables users to specify criteria related to the status of the input data, such as whether the data is successfully processed, pending processing, or encountered errors. "),(0,n.kt)(r.Z,{mdxType:"Tabs"},(0,n.kt)(s.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,n.kt)(o.Z,{className:"language-python",mdxType:"CodeBlock"},c))),(0,n.kt)("details",null,(0,n.kt)("summary",null,"Output"),(0,n.kt)(o.Z,{className:"language-text",mdxType:"CodeBlock"},y),(0,n.kt)("img",{src:"/img/python-sdk/fl_is.png",width:"700",height:"700"})),(0,n.kt)("h2",{id:"filter-with-dataset-id"},"Filter with Dataset-ID"),(0,n.kt)("p",null,"Filtering with dataset ID in Clarifai allows users to narrow down search results based on specific criteria within a designated dataset. By specifying a dataset ID in the filter, users can refine their search to only consider inputs or data entries within that particular dataset. "),(0,n.kt)(r.Z,{mdxType:"Tabs"},(0,n.kt)(s.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,n.kt)(o.Z,{className:"language-python",mdxType:"CodeBlock"},h))),(0,n.kt)("details",null,(0,n.kt)("summary",null,"Output"),(0,n.kt)(o.Z,{className:"language-text",mdxType:"CodeBlock"},b),(0,n.kt)("img",{src:"/img/python-sdk/fl_data.png",width:"700",height:"700"})),(0,n.kt)("h2",{id:"multimodal-filtering"},"MultiModal Filtering"),(0,n.kt)("p",null,"Multimodal filtering in Clarifai refers to the ability to refine search results based on criteria related to both visual and textual content. Unlike unimodal filtering, which focuses solely on one type of data (e.g., images or text), multimodal filtering considers multiple modalities simultaneously."),(0,n.kt)(r.Z,{mdxType:"Tabs"},(0,n.kt)(s.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,n.kt)(o.Z,{className:"language-python",mdxType:"CodeBlock"},d))),(0,n.kt)("details",null,(0,n.kt)("summary",null,"Output"),(0,n.kt)(o.Z,{className:"language-text",mdxType:"CodeBlock"},_),(0,n.kt)("img",{src:"/img/python-sdk/fl_mm.png",width:"700",height:"700"})))}P.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[5487],{27385:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>j,contentTitle:()=>x,default:()=>$,frontMatter:()=>H,metadata:()=>a,toc:()=>y});const a=JSON.parse('{"id":"create/labeling/api/annotations-update","title":"Update Annotations","description":"Label your data.","source":"@site/docs/create/labeling/api/annotations-update.md","sourceDirName":"create/labeling/api","slug":"/create/labeling/api/annotations-update","permalink":"/create/labeling/api/annotations-update","draft":false,"unlisted":false,"editUrl":"https://github.com/Clarifai/docs/blob/main/docs/create/labeling/api/annotations-update.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"description":"Label your data.","sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"List Annotations","permalink":"/create/labeling/api/annotations-list"},"next":{"title":"Positive and Negative Annotations","permalink":"/create/labeling/api/positive-negative"}}');var s=t(74848),o=t(28453),i=t(65537),r=t(79329),c=t(58069);const u="####################################################################################\n# In this section, we set the user authentication, app ID, input ID, annotation ID, \n# and concept ID. Change these strings to run your own example.\n####################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these based on the annotation you want to update\nINPUT_ID = '53d0362a9dfa4e03b2293375e2d0db73'\nANNOTATION_ID = '300b8e39a65e4f33ae4e15e86eaf4a3b'\nCONCEPT_ID = 'apple'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\npatch_annotations_response = stub.PatchAnnotations(\n    service_pb2.PatchAnnotationsRequest(\n        user_app_id=userDataObject,  # The userDataObject is created in the overview and is required when using a PAT\n        action=\"merge\",  # Supported actions: overwrite, merge, remove.\n        annotations=[\n            resources_pb2.Annotation(\n                input_id=INPUT_ID,\n                id=ANNOTATION_ID,\n                data=resources_pb2.Data(\n                    concepts=[\n                        resources_pb2.Concept(id=CONCEPT_ID, value=1.)  # 1 means true, this concept is present.\n                    ]\n                )\n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif patch_annotations_response.status.code != status_code_pb2.SUCCESS:\n    print(patch_annotations_response.status)\n    raise Exception(\"Patch annotations failed, status: \" + patch_annotations_response.status.description)\n\n",p="####################################################################################\n# In this section, we set the user authentication, app ID, input ID, annotation ID, \n# concept ID, and region ID. Change these strings to run your own example.\n####################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these based on the annotation you want to update\nINPUT_ID = '53d0362a9dfa4e03b2293375e2d0db73'\nANNOTATION_ID = '300b8e39a65e4f33ae4e15e86eaf4a3b'\nCONCEPT_ID = 'tree'\nREGION_ID = '361d6a9253be9152968012660258a4bf'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\npatch_annotations_response = stub.PatchAnnotations(\n    service_pb2.PatchAnnotationsRequest(\n        user_app_id=userDataObject,  # The userDataObject is created in the overview and is required when using a PAT\n        action=\"merge\",  # Supported actions: overwrite, merge, remove.\n        annotations=[\n            resources_pb2.Annotation(\n                input_id=INPUT_ID,\n                id=ANNOTATION_ID,\n                data=resources_pb2.Data(\n                    regions=[\n                        resources_pb2.Region(\n                            id=REGION_ID,  # this should be the region id of this annotation before patch\n                            data=resources_pb2.Data(\n                                concepts=[\n                                    resources_pb2.Concept(id=CONCEPT_ID, value=1.),  # 1 means true, this concept is present.\n                                ]\n                            )\n                        )\n                    ]\n                )\n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif patch_annotations_response.status.code != status_code_pb2.SUCCESS:\n    print(patch_annotations_response.status)\n    raise Exception(\"Patch annotations failed, status: \" + patch_annotations_response.status.description)\n\n",l="####################################################################################\n# In this section, we set the user authentication, app ID, input ID, annotation ID,\n# and concept ID. Change these strings to run your own example.\n#####################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these based on the annotation you want to update \nINPUT_ID = '53d0362a9dfa4e03b2293375e2d0db73'\nANNOTATION_ID = '300b8e39a65e4f33ae4e15e86eaf4a3b'\nCONCEPT_ID = 'bike'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\npatch_annotations_response = stub.PatchAnnotations(\n    service_pb2.PatchAnnotationsRequest(\n        user_app_id=userDataObject,  # The userDataObject is created in the overview and is required when using a PAT\n        action=\"overwrite\",\n        annotations=[\n            resources_pb2.Annotation(\n                input_id=INPUT_ID,\n                id=ANNOTATION_ID,\n                data=resources_pb2.Data(\n                    regions=[\n                        resources_pb2.Region(\n                            region_info=resources_pb2.RegionInfo(\n                                bounding_box=resources_pb2.BoundingBox(        # move bounding box to new coordinates\n                                    top_row=0.5,\n                                    left_col=0.5,\n                                    bottom_row=0.8,\n                                    right_col=0.8\n                                )\n                            ),\n                            data=resources_pb2.Data(    # need to provide tags you previously labeled since this is overwrite action\n                                concepts=[\n                                    resources_pb2.Concept(id=CONCEPT_ID, value=1.),  # 1 means true, this concept is present.\n                                ]\n                            )\n                        )\n                    ]\n                )\n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif patch_annotations_response.status.code != status_code_pb2.SUCCESS:\n    print(patch_annotations_response.status)\n    raise Exception(\"Patch annotations failed, status: \" + patch_annotations_response.status.description)\n\n",d="#############################################################################\n# In this section, we set the user authentication, app ID, input ID, and  \n# annotation ID. Change these strings to run your own example.\n#############################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these based on the annotation status you want to update\nINPUT_ID = 'c021c670357e4083b197abe80bda82b0'\nANNOTATION_ID = '8ac7fd96ce6f44b8a0f4806488b41b93'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2, status_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\npatch_annotations_response = stub.PatchAnnotations(\n    service_pb2.PatchAnnotationsRequest(\n        user_app_id=userDataObject,  # The userDataObject is created in the overview and is required when using a PAT\n        action=\"merge\",  # Supported actions: overwrite, merge, remove.\n        annotations=[\n            resources_pb2.Annotation(\n                input_id=INPUT_ID,\n                id=ANNOTATION_ID,\n                status=status_pb2.Status(\n                    code=status_code_pb2.ANNOTATION_SUCCESS\n                )\n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif patch_annotations_response.status.code != status_code_pb2.SUCCESS:\n    print(patch_annotations_response.status)\n    raise Exception(\"Patch annotations failed, status: \" + patch_annotations_response.status.description)\n    ",h='\x3c!--index.html file--\x3e\n\n<script>\n    //////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, input ID, annotation ID, \n    // and concept ID. Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = \'YOUR_USER_ID_HERE\';\n    // Your PAT (Personal Access Token) can be found in the Account\'s Security section\n    const PAT = \'YOUR_PAT_HERE\';\n    const APP_ID = \'YOUR_APP_ID_HERE\';\n    // Change these based on the annotation you want to update\n    const INPUT_ID = \'c9cbb1c90cf24bc98bfd2e529e744ca9\';\n    const ANNOTATION_ID = \'08d3b9b81432477fb5522d3fb1d1a6f4\';\n    const CONCEPT_ID = \'apple\';\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        "user_app_id": {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        "annotations": [\n            {\n                "input_id": INPUT_ID,\n                "id": ANNOTATION_ID,\n                "data": {\n                    "concepts": [\n                        {\n                            "id": CONCEPT_ID,\n                            "value": 1\n                        }\n                    ]\n                }\n            }\n        ],\n        "action": "merge"\n    });\n\n    const requestOptions = {\n        method: \'PATCH\',\n        headers: {\n            \'Accept\': \'application/json\',\n            \'Authorization\': \'Key \' + PAT\n        },\n        body: raw\n    };\n\n    fetch("https://api.clarifai.com/v2/annotations", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log(\'error\', error));\n<\/script>',_='\x3c!--index.html file--\x3e\n\n<script>\n    //////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, input ID, annotation ID, \n    // concept ID, and region ID. Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = \'YOUR_USER_ID_HERE\';\n    // Your PAT (Personal Access Token) can be found in the Account\'s Security section\n    const PAT = \'YOUR_PAT_HERE\';\n    const APP_ID = \'YOUR_APP_ID_HERE\';\n    // Change these based on the annotation you want to update\n    const INPUT_ID = \'c9cbb1c90cf24bc98bfd2e529e744ca9\';\n    const ANNOTATION_ID = \'08d3b9b81432477fb5522d3fb1d1a6f4\';\n    const CONCEPT_ID = \'tree\';\n    const REGION_ID = \'361d6a9253be9152968012660258a4bf\';\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        "user_app_id": {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        "annotations": [\n            {\n                "input_id": INPUT_ID,\n                "id": ANNOTATION_ID,\n                "data": {\n                    "regions": [\n                        {\n                            "id": REGION_ID,\n                            "data": {\n                                "concepts": [\n                                    {\n                                        "id": CONCEPT_ID,\n                                        "value": 1\n                                    }\n                                ]\n                            }\n                        }\n                    ]\n                }\n            }\n        ],\n        "action": "merge"\n    });\n\n    const requestOptions = {\n        method: \'PATCH\',\n        headers: {\n            \'Accept\': \'application/json\',\n            \'Authorization\': \'Key \' + PAT\n        },\n        body: raw\n    };\n\n    fetch("https://api.clarifai.com/v2/annotations", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log(\'error\', error));\n\n<\/script>',I='\x3c!--index.html file--\x3e\n\n<script>\n    //////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, input ID, annotation ID,\n    // and concept ID. Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = \'YOUR_USER_ID_HERE\';\n    // Your PAT (Personal Access Token) can be found in the Account\'s Security section\n    const PAT = \'YOUR_PAT_HERE\';\n    const APP_ID = \'YOUR_APP_ID_HERE\';\n    // Change these based on the annotation you want to update \n    const INPUT_ID = \'3232a6fd32544c6a902c2cb0103034ff\';\n    const ANNOTATION_ID = \'3377446a88714ba78654f2cf811c2211\';\n    const CONCEPT_ID = \'bike\';\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        "user_app_id": {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        action: "overwrite",\n        "annotations": [\n            {\n                "data": {\n                    "regions": [{\n                        "region_info": {\n                            "bounding_box": {\n                                "top_row": 0,\n                                "left_col": 0,\n                                "bottom_row": 1,\n                                "right_col": 1\n                            }\n                        },\n                        "data": {\n                            "concepts": [{\n                                "id": CONCEPT_ID,\n                                "value": 1\n                            }]\n                        }\n                    }]\n                },\n                "input_id": INPUT_ID,\n                "id": ANNOTATION_ID\n            }\n        ]\n    });\n\n    const requestOptions = {\n        method: \'PATCH\',\n        headers: {\n            \'Accept\': \'application/json\',\n            \'Authorization\': \'Key \' + PAT\n        },\n        body: raw\n    };\n\n    fetch("https://api.clarifai.com/v2/annotations", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log(\'error\', error));\n\n<\/script>',A='\x3c!--index.html file--\x3e\n\n<script>\n    ////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, input ID, and  \n    // annotation ID. Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = \'YOUR_USER_ID_HERE\';\n    // Your PAT (Personal Access Token) can be found in the Account\'s Security section\n    const PAT = \'YOUR_PAT_HERE\';\n    const APP_ID = \'YOUR_APP_ID_HERE\';\n    // Change these based on the annotation status you want to update\n    const INPUT_ID = \'3232a6fd32544c6a902c2cb0103034ff\';\n    const ANNOTATION_ID = \'3377446a88714ba78654f2cf811c2211\';\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        "user_app_id": {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        "annotations": [\n            {\n                "input_id": INPUT_ID,\n                "id": ANNOTATION_ID,\n                "status": {\n                    "code": "ANNOTATION_SUCCESS"\n                }\n            }\n        ],\n        "action": "merge"\n    });\n\n    const requestOptions = {\n        method: \'PATCH\',\n        headers: {\n            \'Accept\': \'application/json\',\n            \'Authorization\': \'Key \' + PAT\n        },\n        body: raw\n    };\n\n    fetch("https://api.clarifai.com/v2/annotations", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log(\'error\', error));\n\n<\/script>',f='//index.js file\n\n//////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, input ID, annotation ID, \n// and concept ID. Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n// Change these based on the annotation you want to update\nconst INPUT_ID = \'c9cbb1c90cf24bc98bfd2e529e744ca9\';\nconst ANNOTATION_ID = \'08d3b9b81432477fb5522d3fb1d1a6f4\';\nconst CONCEPT_ID = \'apple\';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PatchAnnotations(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        action: "merge",  // Supported actions: overwrite, merge, remove.\n        annotations: [\n            {\n                input_id: INPUT_ID,\n                id: ANNOTATION_ID,\n                // 1 means true, this concept is present.\n                // 0 means false, this concept is not present.\n                data: {\n                    concepts: [\n                        { id: CONCEPT_ID, value: 1 }\n                    ]\n                }\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Patch annotations failed, status: " + response.status.description);\n        }\n    }\n);',g="//index.js file\n\n//////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, input ID, annotation ID, \n// concept ID, and region ID. Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = 'YOUR_USER_ID_HERE';\n// Your PAT (Personal Access Token) can be found in the Account's Security section\nconst PAT = 'YOUR_PAT_HERE';\nconst APP_ID = 'YOUR_APP_ID_HERE';\n// Change these based on the annotation you want to update\nconst INPUT_ID = 'c9cbb1c90cf24bc98bfd2e529e744ca9';\nconst ANNOTATION_ID = '08d3b9b81432477fb5522d3fb1d1a6f4';\nconst CONCEPT_ID = 'apple';\nconst REGION_ID = '361d6a9253be9152968012660258a4bf';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require(\"clarifai-nodejs-grpc\");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set(\"authorization\", \"Key \" + PAT);\n\nstub.PatchAnnotations(\n    {\n        user_app_id: {\n            \"user_id\": USER_ID,\n            \"app_id\": APP_ID\n        },\n        action: \"merge\",  // Supported actions: overwrite, merge, remove.\n        annotations: [\n            {\n                input_id: INPUT_ID,\n                id: ANNOTATION_ID,\n                data: {\n                    regions: [\n                        {\n                            id: REGION_ID, // this should be the region id of this annotation before patch\n                            // 1 means true, this concept is present.\n                            data: {\n                                concepts: [\n                                    { id: CONCEPT_ID, value: 1 },\n                                ]\n                            },\n                        }\n                    ]\n                }\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error(\"Patch annotations failed, status: \" + response.status.description);\n        }\n    }\n);",E='//index.js file\n\n//////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, input ID, annotation ID,\n// and concept ID. Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n// Change these based on the annotation you want to update \nconst INPUT_ID = \'3232a6fd32544c6a902c2cb0103034ff\';\nconst ANNOTATION_ID = \'3377446a88714ba78654f2cf811c2211\';\nconst CONCEPT_ID = \'bike\';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PatchAnnotations(\n    {\n\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        action: "overwrite",\n        annotations: [\n            {\n                input_id: INPUT_ID,\n                id: ANNOTATION_ID,\n                data: {\n                    regions: [\n                        {\n                            region_info: {\n                                bounding_box: {        // move bounding box to a new coordiates\n                                    top_row: 0.5,\n                                    left_col: 0.5,\n                                    bottom_row: 0.8,\n                                    right_col: 0.8\n                                }\n                            },\n                            // 1 means true, this concept is present.\n                            // 0 means false, this concept is not present.\n                            data: {\n                                concepts: [\n                                    { id: CONCEPT_ID, value: 1 },\n                                ]\n                            },\n                        }\n                    ]\n                }\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Patch annotations failed, status: " + response.status.description);\n        }\n    }\n);',b='//index.js file\n\n////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, input ID, and  \n// annotation ID. Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n// Change these based on the annotation status you want to update\nconst INPUT_ID = \'3232a6fd32544c6a902c2cb0103034ff\';\nconst ANNOTATION_ID = \'3377446a88714ba78654f2cf811c2211\';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PatchAnnotations(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        action: "merge",  // Supported actions: overwrite, merge, remove.\n        annotations: [\n            {\n                input_id: INPUT_ID,\n                id: ANNOTATION_ID,\n                status: {\n                    code: 24150\n                }\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Patch annotations failed, status: " + response.status.description);\n        }\n    }\n);',D='package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    ///////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, input ID, annotation ID, \n    // and concept ID. Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these based on the annotation you want to update\n    static final String INPUT_ID = "c9cbb1c90cf24bc98bfd2e529e744ca9";\n    static final String ANNOTATION_ID = "08d3b9b81432477fb5522d3fb1d1a6f4";\n    static final String CONCEPT_ID = "apple";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\t\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiAnnotationResponse patchAnnotationsResponse = stub.patchAnnotations(\n            PatchAnnotationsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .setAction("merge") // Supported actions: overwrite, merge, remove\n            .addAnnotations(\n                Annotation.newBuilder()\n                .setInputId(INPUT_ID)\n                .setId(ANNOTATION_ID)\n                .setData(\n                    Data.newBuilder().addConcepts(\n                        Concept.newBuilder()\n                        .setId(CONCEPT_ID)\n                        .setValue(1f) // 1 means true, this concept is present\n                        .build()\n                    )\n                )\n                .build()\n            ).build()\n        );\n\n        if (patchAnnotationsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Patch annotations failed, status: " + patchAnnotationsResponse.getStatus());\n        }\n\n    }\n\n}',T='package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    ///////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, input ID, annotation ID, \n    // concept ID, and region ID. Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these based on the annotation you want to update\n    static final String INPUT_ID = "c9cbb1c90cf24bc98bfd2e529e744ca9";\n    static final String ANNOTATION_ID = "08d3b9b81432477fb5522d3fb1d1a6f4";\n    static final String CONCEPT_ID = "apple";\n    static final String REGION_ID = "361d6a9253be9152968012660258a4bf";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\t\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiAnnotationResponse patchAnnotationsResponse = stub.patchAnnotations(\n            PatchAnnotationsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .setAction("merge") // Supported actions: overwrite, merge, remove\n            .addAnnotations(\n                Annotation.newBuilder()\n                .setInputId(INPUT_ID)\n                .setId(ANNOTATION_ID)\n                .setData(\n                    Data.newBuilder().addRegions(\n                        Region.newBuilder()\n                        .setId(REGION_ID) // this should be the region id of this annotation\n                        .setData(\n                            Data.newBuilder().addConcepts(\n                                Concept.newBuilder()\n                                .setId(CONCEPT_ID)\n                                .setValue(1f) // 1 means true, this concept is present\n                                .build()\n                            )\n                        ).build()\n                    ).build()\n                )\n                .build()\n            ).build()\n        );\n\n        if (patchAnnotationsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Patch annotations failed, status: " + patchAnnotationsResponse.getStatus());\n        }\n\n    }\n\n}',P='package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    ///////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, input ID, annotation ID,\n    // and concept ID. Change these strings to run your own example\n    //////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these based on the annotation you want to update \n    static final String INPUT_ID = "3232a6fd32544c6a902c2cb0103034ff";\n    static final String ANNOTATION_ID = "3377446a88714ba78654f2cf811c2211";\n    static final String CONCEPT_ID = "bike";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\t\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiAnnotationResponse patchAnnotationsResponse = stub.patchAnnotations(\n            PatchAnnotationsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .setAction("overwrite")\n            .addAnnotations(\n                Annotation.newBuilder()\n                .setInputId(INPUT_ID)\n                .setId(ANNOTATION_ID)\n                .setData(\n                    Data.newBuilder().addRegions(\n                        Region.newBuilder()\n                        .setRegionInfo(\n                            RegionInfo.newBuilder()\n                            .setBoundingBox( // move bounding box to a new coordinates\n                                BoundingBox.newBuilder()\n                                .setTopRow(0.5f)\n                                .setLeftCol(0.5f)\n                                .setBottomRow(0.8f)\n                                .setRightCol(0.8f)\n                                .build()\n                            )\n                            .build()\n                        )\n                        .setData(\n                            Data.newBuilder()\n                            .addConcepts(\n                                Concept.newBuilder()\n                                .setId(CONCEPT_ID)\n                                .setValue(1f) // 1 means true, this concept is present\n                                .build()\n                            )\n                        ).build()\n                    ).build()\n                )\n                .build()\n            ).build()\n        );\n\n        if (patchAnnotationsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Patch annotations failed, status: " + patchAnnotationsResponse.getStatus());\n        }\n\n    }\n\n}',N='package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.status.Status;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    //////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, input ID, and  \n    // annotation ID. Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these based on the annotation status you want to update\n    static final String INPUT_ID = "3232a6fd32544c6a902c2cb0103034ff";\n    static final String ANNOTATION_ID = "3377446a88714ba78654f2cf811c2211";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\t\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiAnnotationResponse patchAnnotationsResponse = stub.patchAnnotations(\n            PatchAnnotationsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .setAction("merge") // Supported actions: overwrite, merge, remove\n            .addAnnotations(\n                Annotation.newBuilder()\n                .setInputId(INPUT_ID)\n                .setId(ANNOTATION_ID)\n                .setStatus(\n                    Status.newBuilder()\n                    .setCodeValue(StatusCode.ANNOTATION_SUCCESS_VALUE)\n                    .build()\n                )\n                .build()\n            ).build()\n        );\n\n        if (patchAnnotationsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("patch annotations failed, status: " + patchAnnotationsResponse.getStatus());\n        }\n\n    }\n\n}',C='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n//////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, input ID, annotation ID, \n// and concept ID. Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change these based on the annotation you want to update\n$INPUT_ID = "c9cbb1c90cf24bc98bfd2e529e744ca9";\n$ANNOTATION_ID = "08d3b9b81432477fb5522d3fb1d1a6f4";\n$CONCEPT_ID = "apple";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\PatchAnnotationsRequest;\nuse Clarifai\\Api\\Annotation;\nuse Clarifai\\Api\\Concept;\nuse Clarifai\\Api\\Data;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PatchAnnotations(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new PatchAnnotationsRequest([\n        "user_app_id" => $userDataObject, \n        "action" => "merge",  // Supported actions: overwrite, merge, remove\n        "annotations" => [\n             new Annotation([\n                "input_id" => $INPUT_ID,\n                "id" => $ANNOTATION_ID,\n                "data" => new Data([\n                    "concepts" => [\n                        new Concept(["id" => $CONCEPT_ID, "value" => 1.]) //  1 means true, this concept is present\n                    ]\n                ])\n             ])\n        ]\n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\n?>',O='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n//////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, input ID, annotation ID, \n// concept ID, and region ID. Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change these based on the annotation you want to update\n$INPUT_ID = "c9cbb1c90cf24bc98bfd2e529e744ca9";\n$ANNOTATION_ID = "08d3b9b81432477fb5522d3fb1d1a6f4";\n$CONCEPT_ID = "apple";\n$REGION_ID = "361d6a9253be9152968012660258a4bf";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\PatchAnnotationsRequest;\nuse Clarifai\\Api\\Annotation;\nuse Clarifai\\Api\\Concept;\nuse Clarifai\\Api\\Data;\nuse Clarifai\\Api\\Region;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PatchAnnotations(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new PatchAnnotationsRequest([\n        "user_app_id" => $userDataObject, \n        "action" => "merge",  // Supported actions: overwrite, merge, remove\n        "annotations" => [\n             new Annotation([           \n                "input_id" => $INPUT_ID,\n                "id" => $ANNOTATION_ID,\n                "data" => new Data([\n                    "regions" => [\n                        new Region([\n                            "id" => $REGION_ID, // this should be the region id of this annotation before patch\n                            "data" => new Data([\n                                "concepts" => [\n                                    new Concept([ "id" => $CONCEPT_ID, "value" => 1. ]), // 1 means true, this concept is present\n                                ]\n                            ])\n                        ])\n                    ]\n                ])\n            ]),\n        ]\n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\n?>',R='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n//////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, input ID, annotation ID,\n// and concept ID. Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change these based on the annotation you want to update \n$INPUT_ID = "3232a6fd32544c6a902c2cb0103034ff";\n$ANNOTATION_ID = "3377446a88714ba78654f2cf811c2211";\n$CONCEPT_ID = "bike";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\PatchAnnotationsRequest;\nuse Clarifai\\Api\\Annotation;\nuse Clarifai\\Api\\BoundingBox;\nuse Clarifai\\Api\\Concept;\nuse Clarifai\\Api\\Data;\nuse Clarifai\\Api\\Region;\nuse Clarifai\\Api\\RegionInfo;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PatchAnnotations(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new PatchAnnotationsRequest([\n        "user_app_id" => $userDataObject, \n        "action" => "overwrite",\n        "annotations" => [\n             new Annotation([\n                "input_id" => $INPUT_ID,\n                "id" => $ANNOTATION_ID,\n                "data" => new Data([\n                    "regions" => [\n                        new Region([\n                            "region_info" => new RegionInfo([\n                                "bounding_box" => new BoundingBox([  // move bounding box to new coordinates\n                                    "top_row" => 0.5,\n                                    "left_col" => 0.5,\n                                    "bottom_row" => 0.8,\n                                    "right_col" => 0.8\n                                ])                                \n                            ]),\n                            "data" => new Data([  // need to provide tags you previously labeled since this is overwrite action\n                                "concepts" => [\n                                    new Concept([ "id" => $CONCEPT_ID, "value" => 1. ]), // 1 means true, this concept is present\n                                ]\n                            ])\n                        ])\n                    ]\n                ])\n            ]),            \n        ]\n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\n?>',m='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, input ID, and  \n// annotation ID. Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change these based on the annotation status you want to update\n$INPUT_ID = "3232a6fd32544c6a902c2cb0103034ff";\n$ANNOTATION_ID = "3377446a88714ba78654f2cf811c2211";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\PatchAnnotationsRequest;\nuse Clarifai\\Api\\Annotation;\nuse Clarifai\\Api\\Status\\Status;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PatchAnnotations(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new PatchAnnotationsRequest([\n        "user_app_id" => $userDataObject, \n        "action" => "merge",  // Supported actions: overwrite, merge, remove\n        "annotations" => [\n             new Annotation([\n                "input_id" => $INPUT_ID,\n                "id" => $ANNOTATION_ID,\n                "status" => new Status([\n                    "code" => StatusCode::ANNOTATION_SUCCESS\n                ])      \n            ])         \n        ]\n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\n?>',S='# Value of 1 means true, this concept is present\n# Value of 0 means false, this concept is not present\n\ncurl -X PATCH "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/annotations" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "annotations": [\n      {\n        "input_id": "YOUR_INPUT_ID_HERE",\n        "id": "YOUR_ANNOTATION_ID_HERE",\n        "data": {\n          "concepts": [\n            {\n              "id": "apple",\n              "value": 1\n            }\n          ]\n        }\n      }\n    ],\n    "action":"merge"\n}\'',w='# Value of 1 means true, this concept is present\n# Region ID should be the region ID of this annotation before patch\n\ncurl -X PATCH "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/annotations" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "annotations": [\n      {\n        "input_id": "YOUR_INPUT_ID_HERE",\n        "id": "YOUR_ANNOTATION_ID_HERE",\n        "data": {\n          "regions": [\n            {\n              "id": "REGION_ID_HERE",\n              "data": {\n                "concepts": [\n                  {\n                    "id": "apple",\n                    "value": 1\n                  }\n                ]\n              }\n            }\n          ]\n        }\n      }\n    ],\n    "action":"merge"\n}\'',U='curl -X PATCH "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/annotations" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "annotations": [\n            {\n                "data": {\n                    "regions": [{\n                        "region_info": {\n                            "bounding_box": {\n                                "top_row": 0,\n                                "left_col": 0,\n                                "bottom_row": 1,\n                                "right_col": 1\n                            }\n                        },\n                        "data": {\n                            "concepts": [{\n                                "id": "bike",\n                                "value": 1\n                            }]\n                        }\n                    }]\n                },\n                "input_id": "YOUR_INPUT_ID_HERE",\n                "id": "YOUR_ANNOTATION_ID_HERE"\n            }\n        ],\n    "action":"overwrite"\n}\'',v='curl -X PATCH "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/annotations" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "annotations": [\n      {\n        "input_id": "YOUR_INPUT_ID_HERE",\n        "id": "YOUR_ANNOTATION_ID_HERE",\n        "status": {\n          "code": "ANNOTATION_SUCCESS"\n        }\n      }\n    ],\n    "action":"merge"\n}\'',H={description:"Label your data.",sidebar_position:3},x="Update Annotations",j={},y=[{value:"Update Annotation With Concepts",id:"update-annotation-with-concepts",level:3},{value:"Update Annotation With Concepts in a Region",id:"update-annotation-with-concepts-in-a-region",level:3},{value:"Update Annotation Region Coordinates",id:"update-annotation-region-coordinates",level:3},{value:"Update Annotation Status",id:"update-annotation-status",level:3}];function Y(n){const e={code:"code",h1:"h1",h3:"h3",header:"header",p:"p",...(0,o.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"update-annotations",children:"Update Annotations"})}),"\n",(0,s.jsx)(e.p,{children:"Changing annotation data is possible by PATCHing existing annotations. The application owner can change any user-created annotations. Collaborators are not allowed to change annotations made by other collaborators."}),"\n",(0,s.jsx)(e.p,{children:"Generally speaking, you should send PATCH when you want to change the data you have posted; for example, changing the concept from positive to negative or adjusting the bounding box coordinates."}),"\n",(0,s.jsx)(e.p,{children:"If you want to add more tags, you can always POST new annotations. There is no limit on how many annotations an input can have."}),"\n",(0,s.jsxs)(e.p,{children:["Update supports ",(0,s.jsx)(e.code,{children:"overwrite"}),", ",(0,s.jsx)(e.code,{children:"merge"}),", and ",(0,s.jsx)(e.code,{children:"remove"})," actions. You can update from 1 up to 128 annotations in a single API call."]}),"\n",(0,s.jsx)(e.h3,{id:"update-annotation-with-concepts",children:"Update Annotation With Concepts"}),"\n",(0,s.jsx)(e.p,{children:"Below is an example of how to update an annotation of an image with a new concept, or  change a concept value from true to false (or vice versa)."}),"\n",(0,s.jsxs)(i.A,{groupId:"code",children:[(0,s.jsx)(r.A,{value:"python",label:"Python (gRPC)",children:(0,s.jsx)(c.A,{className:"language-python",children:u})}),(0,s.jsx)(r.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:h})}),(0,s.jsx)(r.A,{value:"nodejs",label:"Node.js (gRPC)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:f})}),(0,s.jsx)(r.A,{value:"java",label:"Java (gRPC)",children:(0,s.jsx)(c.A,{className:"language-java",children:D})}),(0,s.jsx)(r.A,{value:"php",label:"PHP (gRPC)",children:(0,s.jsx)(c.A,{className:"language-php",children:C})}),(0,s.jsx)(r.A,{value:"curl",label:"cURL",children:(0,s.jsx)(c.A,{className:"language-bash",children:S})})]}),"\n",(0,s.jsx)(e.h3,{id:"update-annotation-with-concepts-in-a-region",children:"Update Annotation With Concepts in a Region"}),"\n",(0,s.jsxs)(e.p,{children:["When you update region data, you must nest this new data within ",(0,s.jsx)(e.code,{children:"region.data"}),". Set the ",(0,s.jsx)(e.code,{children:"region_id"})," to the current ",(0,s.jsx)(e.code,{children:"region_id"})," if you do not want to change or remove this region."]}),"\n",(0,s.jsx)(e.p,{children:"Below is an example of how to update annotation with concepts in a region."}),"\n",(0,s.jsxs)(i.A,{groupId:"code",children:[(0,s.jsx)(r.A,{value:"python",label:"Python (gRPC)",children:(0,s.jsx)(c.A,{className:"language-python",children:p})}),(0,s.jsx)(r.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:_})}),(0,s.jsx)(r.A,{value:"nodejs",label:"Node.js (gRPC)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:g})}),(0,s.jsx)(r.A,{value:"java",label:"Java (gRPC)",children:(0,s.jsx)(c.A,{className:"language-java",children:T})}),(0,s.jsx)(r.A,{value:"php",label:"PHP (gRPC)",children:(0,s.jsx)(c.A,{className:"language-php",children:O})}),(0,s.jsx)(r.A,{value:"curl",label:"cURL",children:(0,s.jsx)(c.A,{className:"language-bash",children:w})})]}),"\n",(0,s.jsx)(e.h3,{id:"update-annotation-region-coordinates",children:"Update Annotation Region Coordinates"}),"\n",(0,s.jsxs)(e.p,{children:["You can update region bounding boxes coordinates. When changing the region, you should use ",(0,s.jsx)(e.code,{children:"overwrite"})," action. With ",(0,s.jsx)(e.code,{children:"overwrite"})," action, you need to provide the data you want to keep in this annotation."]}),"\n",(0,s.jsx)(e.p,{children:"Below is an example of how to do that."}),"\n",(0,s.jsxs)(i.A,{groupId:"code",children:[(0,s.jsx)(r.A,{value:"python",label:"Python (gRPC)",children:(0,s.jsx)(c.A,{className:"language-python",children:l})}),(0,s.jsx)(r.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:I})}),(0,s.jsx)(r.A,{value:"nodejs",label:"Node.js (gRPC)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:E})}),(0,s.jsx)(r.A,{value:"java",label:"Java (gRPC)",children:(0,s.jsx)(c.A,{className:"language-java",children:P})}),(0,s.jsx)(r.A,{value:"php",label:"PHP (gRPC)",children:(0,s.jsx)(c.A,{className:"language-php",children:R})}),(0,s.jsx)(r.A,{value:"curl",label:"cURL",children:(0,s.jsx)(c.A,{className:"language-bash",children:U})})]}),"\n",(0,s.jsx)(e.h3,{id:"update-annotation-status",children:"Update Annotation Status"}),"\n",(0,s.jsx)(e.p,{children:"Below is an example of how to update an annotation status."}),"\n",(0,s.jsxs)(i.A,{groupId:"code",children:[(0,s.jsx)(r.A,{value:"python",label:"Python (gRPC)",children:(0,s.jsx)(c.A,{className:"language-python",children:d})}),(0,s.jsx)(r.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:A})}),(0,s.jsx)(r.A,{value:"nodejs",label:"Node.js (gRPC)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:b})}),(0,s.jsx)(r.A,{value:"java",label:"Java (gRPC)",children:(0,s.jsx)(c.A,{className:"language-java",children:N})}),(0,s.jsx)(r.A,{value:"php",label:"PHP (gRPC)",children:(0,s.jsx)(c.A,{className:"language-php",children:m})}),(0,s.jsx)(r.A,{value:"curl",label:"cURL",children:(0,s.jsx)(c.A,{className:"language-bash",children:v})})]})]})}function $(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(Y,{...n})}):Y(n)}},65537:(n,e,t)=>{t.d(e,{A:()=>T});var a=t(96540),s=t(18215),o=t(65627),i=t(56347),r=t(50372),c=t(30604),u=t(11861),p=t(78749);function l(n){return a.Children.toArray(n).filter((n=>"\n"!==n)).map((n=>{if(!n||(0,a.isValidElement)(n)&&function(n){const{props:e}=n;return!!e&&"object"==typeof e&&"value"in e}(n))return n;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof n.type?n.type:n.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function d(n){const{values:e,children:t}=n;return(0,a.useMemo)((()=>{const n=e??function(n){return l(n).map((n=>{let{props:{value:e,label:t,attributes:a,default:s}}=n;return{value:e,label:t,attributes:a,default:s}}))}(t);return function(n){const e=(0,u.XI)(n,((n,e)=>n.value===e.value));if(e.length>0)throw new Error(`Docusaurus error: Duplicate values "${e.map((n=>n.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(n),n}),[e,t])}function h(n){let{value:e,tabValues:t}=n;return t.some((n=>n.value===e))}function _(n){let{queryString:e=!1,groupId:t}=n;const s=(0,i.W6)(),o=function(n){let{queryString:e=!1,groupId:t}=n;if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:e,groupId:t});return[(0,c.aZ)(o),(0,a.useCallback)((n=>{if(!o)return;const e=new URLSearchParams(s.location.search);e.set(o,n),s.replace({...s.location,search:e.toString()})}),[o,s])]}function I(n){const{defaultValue:e,queryString:t=!1,groupId:s}=n,o=d(n),[i,c]=(0,a.useState)((()=>function(n){let{defaultValue:e,tabValues:t}=n;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!h({value:e,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${t.map((n=>n.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const a=t.find((n=>n.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:e,tabValues:o}))),[u,l]=_({queryString:t,groupId:s}),[I,A]=function(n){let{groupId:e}=n;const t=function(n){return n?`docusaurus.tab.${n}`:null}(e),[s,o]=(0,p.Dv)(t);return[s,(0,a.useCallback)((n=>{t&&o.set(n)}),[t,o])]}({groupId:s}),f=(()=>{const n=u??I;return h({value:n,tabValues:o})?n:null})();(0,r.A)((()=>{f&&c(f)}),[f]);return{selectedValue:i,selectValue:(0,a.useCallback)((n=>{if(!h({value:n,tabValues:o}))throw new Error(`Can't select invalid tab value=${n}`);c(n),l(n),A(n)}),[l,A,o]),tabValues:o}}var A=t(9136);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var g=t(74848);function E(n){let{className:e,block:t,selectedValue:a,selectValue:i,tabValues:r}=n;const c=[],{blockElementScrollPositionUntilNextRender:u}=(0,o.a_)(),p=n=>{const e=n.currentTarget,t=c.indexOf(e),s=r[t].value;s!==a&&(u(e),i(s))},l=n=>{let e=null;switch(n.key){case"Enter":p(n);break;case"ArrowRight":{const t=c.indexOf(n.currentTarget)+1;e=c[t]??c[0];break}case"ArrowLeft":{const t=c.indexOf(n.currentTarget)-1;e=c[t]??c[c.length-1];break}}e?.focus()};return(0,g.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":t},e),children:r.map((n=>{let{value:e,label:t,attributes:o}=n;return(0,g.jsx)("li",{role:"tab",tabIndex:a===e?0:-1,"aria-selected":a===e,ref:n=>{c.push(n)},onKeyDown:l,onClick:p,...o,className:(0,s.A)("tabs__item",f.tabItem,o?.className,{"tabs__item--active":a===e}),children:t??e},e)}))})}function b(n){let{lazy:e,children:t,selectedValue:o}=n;const i=(Array.isArray(t)?t:[t]).filter(Boolean);if(e){const n=i.find((n=>n.props.value===o));return n?(0,a.cloneElement)(n,{className:(0,s.A)("margin-top--md",n.props.className)}):null}return(0,g.jsx)("div",{className:"margin-top--md",children:i.map(((n,e)=>(0,a.cloneElement)(n,{key:e,hidden:n.props.value!==o})))})}function D(n){const e=I(n);return(0,g.jsxs)("div",{className:(0,s.A)("tabs-container",f.tabList),children:[(0,g.jsx)(E,{...e,...n}),(0,g.jsx)(b,{...e,...n})]})}function T(n){const e=(0,A.A)();return(0,g.jsx)(D,{...n,children:l(n.children)},String(e))}},79329:(n,e,t)=>{t.d(e,{A:()=>i});t(96540);var a=t(18215);const s={tabItem:"tabItem_Ymn6"};var o=t(74848);function i(n){let{children:e,hidden:t,className:i}=n;return(0,o.jsx)("div",{role:"tabpanel",className:(0,a.A)(s.tabItem,i),hidden:t,children:e})}}}]);
"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[6006],{8215:function(e,n,t){var a=t(7294);n.Z=function(e){var n=e.children,t=e.hidden,o=e.className;return a.createElement("div",{role:"tabpanel",hidden:t,className:o},n)}},6396:function(e,n,t){t.d(n,{Z:function(){return u}});var a=t(7462),o=t(7294),s=t(2389),i=t(9443);var r=function(){var e=(0,o.useContext)(i.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},p=t(3616),l=t(6010),d="tabItem_vU9c";function c(e){var n,t,s,i=e.lazy,c=e.block,u=e.defaultValue,_=e.values,m=e.groupId,h=e.className,I=o.Children.map(e.children,(function(e){if((0,o.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),f=null!=_?_:I.map((function(e){var n=e.props;return{value:n.value,label:n.label,attributes:n.attributes}})),E=(0,p.lx)(f,(function(e,n){return e.value===n.value}));if(E.length>0)throw new Error('Docusaurus error: Duplicate values "'+E.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var g=null===u?u:null!=(n=null!=u?u:null==(t=I.find((function(e){return e.props.default})))?void 0:t.props.value)?n:null==(s=I[0])?void 0:s.props.value;if(null!==g&&!f.some((function(e){return e.value===g})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+g+'" but none of its children has the corresponding value. Available values are: '+f.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var b=r(),w=b.tabGroupChoices,D=b.setTabGroupChoices,N=(0,o.useState)(g),T=N[0],O=N[1],R=[],C=(0,p.o5)().blockElementScrollPositionUntilNextRender;if(null!=m){var P=w[m];null!=P&&P!==T&&f.some((function(e){return e.value===P}))&&O(P)}var k=function(e){var n=e.currentTarget,t=R.indexOf(n),a=f[t].value;a!==T&&(C(n),O(a),null!=m&&D(m,a))},A=function(e){var n,t=null;switch(e.key){case"ArrowRight":var a=R.indexOf(e.currentTarget)+1;t=R[a]||R[0];break;case"ArrowLeft":var o=R.indexOf(e.currentTarget)-1;t=R[o]||R[R.length-1]}null==(n=t)||n.focus()};return o.createElement("div",{className:"tabs-container"},o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":c},h)},f.map((function(e){var n=e.value,t=e.label,s=e.attributes;return o.createElement("li",(0,a.Z)({role:"tab",tabIndex:T===n?0:-1,"aria-selected":T===n,key:n,ref:function(e){return R.push(e)},onKeyDown:A,onFocus:k,onClick:k},s,{className:(0,l.Z)("tabs__item",d,null==s?void 0:s.className,{"tabs__item--active":T===n})}),null!=t?t:n)}))),i?(0,o.cloneElement)(I.filter((function(e){return e.props.value===T}))[0],{className:"margin-vert--md"}):o.createElement("div",{className:"margin-vert--md"},I.map((function(e,n){return(0,o.cloneElement)(e,{key:n,hidden:e.props.value!==T})}))))}function u(e){var n=(0,s.Z)();return o.createElement(c,(0,a.Z)({key:String(n)},e))}},9693:function(e,n,t){t.r(n),t.d(n,{contentTitle:function(){return c},default:function(){return h},frontMatter:function(){return d},metadata:function(){return u},toc:function(){return _}});var a=t(7462),o=t(3366),s=(t(7294),t(3905)),i=t(6396),r=t(8215),p=t(9055),l=["components"],d={description:"Use AI to help you build AI. Auto annotation uses your model predictions to label your training data.",sidebar_position:2},c="Auto Annotation",u={unversionedId:"api-guide/workflows/common-workflows/auto-annotation-walkthrough",id:"api-guide/workflows/common-workflows/auto-annotation-walkthrough",title:"Auto Annotation",description:"Use AI to help you build AI. Auto annotation uses your model predictions to label your training data.",source:"@site/docs/api-guide/workflows/common-workflows/auto-annotation-walkthrough.md",sourceDirName:"api-guide/workflows/common-workflows",slug:"/api-guide/workflows/common-workflows/auto-annotation-walkthrough",permalink:"/docs-new/api-guide/workflows/common-workflows/auto-annotation-walkthrough",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/api-guide/workflows/common-workflows/auto-annotation-walkthrough.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{description:"Use AI to help you build AI. Auto annotation uses your model predictions to label your training data.",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Workflow Predict",permalink:"/docs-new/api-guide/workflows/common-workflows/workflow-predict"},next:{title:"Custom KNN Face Classifier Workflow",permalink:"/docs-new/api-guide/workflows/common-workflows/knn-face-classifier-workflow-walkthrough"}},_=[{value:"Create Concepts",id:"create-concepts",children:[],level:2},{value:"Link Concepts",id:"link-concepts",children:[],level:2},{value:"Create a Concept Mapper Model",id:"create-a-concept-mapper-model",children:[],level:2},{value:"Create a &quot;Greater Than&quot; Concept Thresholder Model",id:"create-a-greater-than-concept-thresholder-model",children:[],level:2},{value:"Create a &quot;Less Than&quot; Concept Thresholder Model",id:"create-a-less-than-concept-thresholder-model",children:[],level:2},{value:"Create a &quot;Write Success as Me&quot; Annotation Writer Model",id:"create-a-write-success-as-me-annotation-writer-model",children:[],level:2},{value:"Create a &quot;Write Pending as Me&quot; Annotation Writer Model",id:"create-a-write-pending-as-me-annotation-writer-model",children:[],level:2},{value:"Create the Workflow",id:"create-the-workflow",children:[],level:2},{value:"Make the New Workflow your App&#39;s Default",id:"make-the-new-workflow-your-apps-default",children:[],level:2},{value:"Add an Image",id:"add-an-image",children:[],level:2},{value:"List Annotations",id:"list-annotations",children:[],level:2}],m={toc:_};function h(e){var n=e.components,t=(0,o.Z)(e,l);return(0,s.kt)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"auto-annotation"},"Auto Annotation"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Use AI to help you build AI. Auto annotation uses your model predictions to label your training data")),(0,s.kt)("hr",null),(0,s.kt)("p",null,"This tutorial demonstrates how auto-annotation workflows can be configured in the Clarifai API. With auto-annotation, you can use model predictions to label your inputs. Auto-annotation can help you prepare training data or assign other useful labels and metadata to your inputs. "),(0,s.kt)("p",null,"Since models are doing most of the work of annotating your data, this enables you to speed-up and scale-up your annotation process while ensuring quality standards, typically reducing human effort of labelling data by orders of magnitude. And since this is built into our APIs, it seamlessly integrates with all the search, training, and prediction functionality of the Clarifai platform."),(0,s.kt)("p",null,"When a concept is predicted by a model, it is predicted with a confidence score between 0 and 1. In this walkthrough, we will leverage that score in our workflow so that when your model predictions are confident ","(","close to 1",")",", you can have your data automatically labeled with that concept. When your predictions are less-than-confident, you can have your input sent to a human reviewer."),(0,s.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"The initialization code used in the following examples is outlined in detail on the ",(0,s.kt)("a",{parentName:"p",href:"../../api-overview/api-clients#client-installation-instructions"},"client installation page.")))),(0,s.kt)("h2",{id:"create-concepts"},"Create Concepts"),(0,s.kt)("p",null,"Let's start by creating the concepts we'll use in our model. In this tutorial, we'll create the following concepts: ",(0,s.kt)("inlineCode",{parentName:"p"},"people"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"man")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"adult"),"."),(0,s.kt)(i.Z,{mdxType:"Tabs"},(0,s.kt)(r.Z,{value:"grpc_python",label:"gRPC Python",mdxType:"TabItem"},(0,s.kt)(p.Z,{className:"language-python",mdxType:"CodeBlock"},"####################################################################################\n# In this section, we set the user authentication, app ID, and the details of the\n# concepts we want to create. Change these strings to run your own example.\n####################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to create your own concepts\nCONCEPT_ID_1 = 'peopleID'\nCONCEPT_NAME_1 = 'people'\n\nCONCEPT_ID_2 = 'manID'\nCONCEPT_NAME_2 = 'man'\n\nCONCEPT_ID_3 = 'adultID'\nCONCEPT_NAME_3 = 'adult'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID) # The userDataObject is required when using a PAT\n\npost_concepts_response = stub.PostConcepts(\n    service_pb2.PostConceptsRequest(\n        user_app_id=userDataObject,  \n        concepts=[\n            resources_pb2.Concept(id=CONCEPT_ID_1, name=CONCEPT_NAME_1),\n            resources_pb2.Concept(id=CONCEPT_ID_2, name=CONCEPT_NAME_2),\n            resources_pb2.Concept(id=CONCEPT_ID_3, name=CONCEPT_NAME_3),\n        ]\n    ),\n    metadata=metadata\n)\n\nif post_concepts_response.status.code != status_code_pb2.SUCCESS:\n    print(post_concepts_response.status)\n    raise Exception(\"Post concepts failed, status: \" + post_concepts_response.status.description)\n")),(0,s.kt)(r.Z,{value:"grpc_java",label:"gRPC Java",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nMultiConceptResponse postConceptsResponse = stub.postConcepts(\n    PostConceptsRequest.newBuilder()\n        .setUserAppId(UserAppIDSet.newBuilder().setAppId("{YOUR_APP_ID}"))\n        .addConcepts(\n            Concept.newBuilder()\n                .setId("peopleID")\n                .setName("people")\n        )\n        .addConcepts(\n            Concept.newBuilder()\n                .setId("manID")\n                .setName("man")\n        )\n        .addConcepts(\n            Concept.newBuilder()\n                .setId("adultID")\n                .setName("adult")\n        )\n        .build()\n);\n\nif (postConceptsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n    throw new RuntimeException("Post concepts failed, status: " + postConceptsResponse.getStatus());\n}\n'))),(0,s.kt)(r.Z,{value:"grpc_nodejs",label:"gRPC NodeJS",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nstub.PostConcepts(\n    {\n        user_app_id: {\n            app_id: "{YOUR_APP_ID}"\n        },\n        concepts: [\n            {\n                id: "peopleID",\n                name: "people"\n            },\n            {\n                id: "manID",\n                name: "man"\n            },\n            {\n                id: "adultID",\n                name: "adult"\n            },\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post concepts failed, status: " + response.status.description);\n        }\n    }\n);\n'))),(0,s.kt)(r.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST \'https://api.clarifai.com/v2/users/me/apps/{{app}}/concepts\' \\\n    -H \'Authorization: Key {{PAT}}\' \\\n    -H \'Content-Type: application/json\' \\\n    --data-raw \'{\n        "concepts": [\n            {\n                "id": "peopleID",\n                "name": "people"\n            },\n            {\n                "id": "manID",\n                "name": "man"\n            },\n            {\n                "id": "adultID",\n                "name": "adult"\n            }\n        ]\n    }\'\n')))),(0,s.kt)("h2",{id:"link-concepts"},"Link Concepts"),(0,s.kt)("p",null,"Link the newly created concepts with concepts in the Clarifai/Main General model."),(0,s.kt)("p",null,"Run the code below three times; once for each concept created previously. The concept IDs of the Clarifai/Main General models are the following:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"ai_l8TKp2h5")," - the people concept,"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"ai_dxSG2s86")," - the man concept,"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"ai_VPmHr5bm")," - the adult concept.")),(0,s.kt)("p",null,"Your model's concept IDs are the ones you created in the previous step: ",(0,s.kt)("inlineCode",{parentName:"p"},"peopleID"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"manID"),", and ",(0,s.kt)("inlineCode",{parentName:"p"},"adultID"),"."),(0,s.kt)(i.Z,{mdxType:"Tabs"},(0,s.kt)(r.Z,{value:"grpc_python",label:"gRPC Python",mdxType:"TabItem"},(0,s.kt)(p.Z,{className:"language-python",mdxType:"CodeBlock"},"####################################################################################\n# In this section, we set the user authentication, app ID, and the details of the\n# concepts we want to link. Change these strings to run your own example.\n####################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to link your own concepts\n# Run this code three times; once for each concept you want to link\nMODEL_CONCEPT_ID = 'YOUR_MODEL_CONCEPT_ID'\nGENERAL_MODEL_CONCEPT_ID = 'GENERAL_MODEL_CONCEPT_ID'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID) # The userDataObject is required when using a PAT\n\npost_concept_relations_response = stub.PostConceptRelations(\n    service_pb2.PostConceptRelationsRequest(\n        user_app_id=userDataObject,  \n        concept_id=MODEL_CONCEPT_ID,\n        concept_relations=[\n            resources_pb2.ConceptRelation(\n                object_concept=resources_pb2.Concept(id=GENERAL_MODEL_CONCEPT_ID, app_id=\"main\"),\n                predicate=\"synonym\"\n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif post_concept_relations_response.status.code != status_code_pb2.SUCCESS:\n    print(post_concept_relations_response.status)\n    raise Exception(\"Post concept relations failed, status: \" + post_concept_relations_response.status.description)\n")),(0,s.kt)(r.Z,{value:"grpc_java",label:"gRPC Java",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nMultiConceptRelationResponse postConceptRelationsResponse = stub.postConceptRelations(\n    PostConceptRelationsRequest.newBuilder()\n        .setUserAppId(UserAppIDSet.newBuilder().setAppId("{YOUR_APP_ID}"))\n        .setConceptId("{YOUR_MODEL_CONCEPT_ID}")\n        .addConceptRelations(\n            ConceptRelation.newBuilder()\n                .setObjectConcept(\n                    Concept.newBuilder()\n                        .setId("{GENERAL_MODEL_CONCEPT_ID}")\n                        .setAppId("main")\n                )\n                .setPredicate("synonym").build())\n        .build()\n);\n\nif (postConceptRelationsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n    throw new RuntimeException("Post concept relations failed, status: " + postConceptRelationsResponse.getStatus());\n}\n'))),(0,s.kt)(r.Z,{value:"grpc_nodejs",label:"gRPC NodeJS",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nstub.PostConceptRelations(\n    {\n        user_app_id: {\n            app_id: "{YOUR_APP_ID}"\n        },\n        concept_id: "{YOUR_MODEL_CONCEPT_ID}",\n        concept_relations: [\n            {\n                object_concept: {\n                    id: "{GENERAL_MODEL_CONCEPT_ID}",\n                    app_id: "main"\n                },\n                predicate: "synonym"\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post concept relations failed, status: " + response.status.description);\n        }\n    }\n);\n'))),(0,s.kt)(r.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST \'https://api.clarifai.com/v2/users/me/apps/{{app}}/concepts/{YOUR_MODEL_CONCEPT_ID}/relations\' \\\n    -H \'Authorization: Key {{PAT}}\' \\\n    -H \'Content-Type: application/javascript\' \\\n    --data-raw \'{\n        "concept_relations": [\n            {\n\n                "object_concept": {\n                    "id": "{GENERAL_MODEL_CONCEPT_ID}",\n                    "app_id": "main"\n                },\n                "predicate": "synonym"\n            }\n        ]\n    }\'\n')))),(0,s.kt)("h2",{id:"create-a-concept-mapper-model"},"Create a Concept Mapper Model"),(0,s.kt)("p",null,"We're going to create a concept mapper model that translates the concepts from the General model to our new concepts. The model will map the concepts as synonyms. Hypernyms and hyponyms are supported as well."),(0,s.kt)("p",null,"We'll be setting the ",(0,s.kt)("inlineCode",{parentName:"p"},"knowledge_graph_id")," value to be empty. If you want to define a subset of relationships in your app to be related to each other, you can provide the ",(0,s.kt)("inlineCode",{parentName:"p"},"knowledge_graph_id")," to each concept relation and then provide that ",(0,s.kt)("inlineCode",{parentName:"p"},"knowledge_graph_id")," as input to this model as well, which will only follow relationships in that subset of your app's knowledge graph."),(0,s.kt)(i.Z,{mdxType:"Tabs"},(0,s.kt)(r.Z,{value:"grpc_python",label:"gRPC Python",mdxType:"TabItem"},(0,s.kt)(p.Z,{className:"language-python",mdxType:"CodeBlock"},"###########################################################################################\n# In this section, we set the user authentication, app ID, and the details of the concept\n# mapper model we want to create. Change these strings to run your own example.\n###########################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to create your own concept mapper model\nSYNONYM_MODEL_ID = 'synonym-model-id'\nMODEL_TYPE_ID = 'concept-synonym-mapper'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\nfrom google.protobuf.struct_pb2 import Struct\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID) # The userDataObject is required when using a PAT\n\nparams = Struct()\nparams.update({\n    \"knowledge_graph_id\": \"\"\n})\n\npost_models_response = stub.PostModels(\n    service_pb2.PostModelsRequest(\n        user_app_id=userDataObject,  \n        models=[\n            resources_pb2.Model(\n                id=SYNONYM_MODEL_ID,\n                model_type_id=MODEL_TYPE_ID,\n                output_info=resources_pb2.OutputInfo(\n                    params=params,\n                )\n            ),\n        ]\n    ),\n    metadata=metadata\n)\n\nif post_models_response.status.code != status_code_pb2.SUCCESS:\n    print(post_models_response.status)\n    raise Exception(\"Post models failed, status: \" + post_models_response.status.description)\n    \nprint(post_models_response)")),(0,s.kt)(r.Z,{value:"grpc_java",label:"gRPC Java",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nStruct.Builder params = Struct.newBuilder()\n    .putFields("knowledge_graph_id", Value.newBuilder().setStringValue("").build());\n\nSingleModelResponse postModelsResponse = stub.postModels(\n  PostModelsRequest.newBuilder()\n      .setUserAppId(UserAppIDSet.newBuilder().setAppId("{YOUR_APP_ID}"))\n      .addModels(\n          Model.newBuilder()\n              .setId("synonym-model-id")\n              .setModelTypeId("concept-synonym-mapper")\n              .setOutputInfo(\n                  OutputInfo.newBuilder()\n                      .setParams(params)\n              )\n      )\n      .build()\n);\n\nif (postModelsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n    throw new RuntimeException("Post models failed, status: " + postModelsResponse.getStatus());\n}\n'))),(0,s.kt)(r.Z,{value:"grpc_nodejs",label:"gRPC NodeJS",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nconst params = {\n    knowledge_graph_id: ""\n}\n\nstub.PostModels(\n    {\n        user_app_id: {\n            app_id: "{YOUR_APP_ID}"\n        },\n        models: [\n            {\n                id: "synonym-model-id",\n                model_type_id: "concept-synonym-mapper"\n                output_info: {\n                    params: params,\n                }\n            },\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post models failed, status: " + response.status.description);\n        }\n    }\n);\n'))),(0,s.kt)(r.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST \'https://api.clarifai.com/v2/users/me/apps/{{app}}/models\' \\\n    -H \'Authorization: Key {{PAT}}\' \\\n    -H \'Content-Type: application/javascript\' \\\n    --data-raw \'{\n        "model": {\n            "id": "synonym-model-id",\n            "model_type_id": "concept-synonym-mapper",\n            "output_info": {\n                "params": {\n                    "knowledge_graph_id": ""\n                }\n            }\n        }\n    }\'\n')))),(0,s.kt)("h2",{id:"create-a-greater-than-concept-thresholder-model"},'Create a "Greater Than" Concept Thresholder Model'),(0,s.kt)("p",null,"This model will allow any predictions ",">","= the concept values defined in the model to be outputted from the model."),(0,s.kt)(i.Z,{mdxType:"Tabs"},(0,s.kt)(r.Z,{value:"grpc_python",label:"gRPC Python",mdxType:"TabItem"},(0,s.kt)(p.Z,{className:"language-python",mdxType:"CodeBlock"},"#########################################################################################\n# In this section, we set the user authentication, app ID, and the details of the model\n# we want to create. Change these strings to run your own example.\n#########################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to create your own concept thresholder model\nMODEL_ID = 'greater-than-model-id'\nMODEL_TYPE_ID = 'concept-thresholder'\nCONCEPT_ID_1 = 'peopleID'\nCONCEPT_ID_2 = 'manID'\nCONCEPT_ID_3 = 'adultID'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\nfrom google.protobuf.struct_pb2 import Struct\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID) # The userDataObject is required when using a PAT\n\nparams = Struct()\nparams.update({\n    \"concept_threshold_type\": resources_pb2.GREATER_THAN\n})\n\npost_models_response = stub.PostModels(\n    service_pb2.PostModelsRequest(\n        user_app_id=userDataObject,  \n        models=[\n            resources_pb2.Model(\n                id=MODEL_ID,\n                model_type_id=MODEL_TYPE_ID,\n                output_info=resources_pb2.OutputInfo(\n                    data=resources_pb2.Data(\n                        concepts=[\n                            resources_pb2.Concept(id=CONCEPT_ID_1, value=0.5),\n                            resources_pb2.Concept(id=CONCEPT_ID_2, value=0.5),\n                            resources_pb2.Concept(id=CONCEPT_ID_3, value=0.95),\n                        ]\n                    ),\n                    params=params\n                )\n            ),\n        ]\n    ),\n    metadata=metadata\n)\n\nif post_models_response.status.code != status_code_pb2.SUCCESS:\n    print(post_models_response.status)\n    raise Exception(\"Post models failed, status: \" + post_models_response.status.description)\n")),(0,s.kt)(r.Z,{value:"grpc_java",label:"gRPC Java",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nStruct.Builder params = Struct.newBuilder()\n  .putFields(\n      "concept_threshold_type",\n      Value.newBuilder().setNumberValue(ValueComparator.GREATER_THAN_VALUE).build()\n  );\n\nSingleModelResponse postModelsResponse = stub.postModels(\n  PostModelsRequest.newBuilder()\n      .setUserAppId(UserAppIDSet.newBuilder().setAppId("{YOUR_APP_ID}"))\n      .addModels(\n          Model.newBuilder()\n              .setId("greater-than-model-id")\n              .setModelTypeId("concept-threshold")\n              .setOutputInfo(\n                  OutputInfo.newBuilder()\n                      .setData(\n                          Data.newBuilder()\n                              .addConcepts(\n                                  Concept.newBuilder()\n                                      .setId("peopleID")\n                                      .setValue(0.5f)\n                              )\n                              .addConcepts(\n                                  Concept.newBuilder()\n                                      .setId("manID")\n                                      .setValue(0.5f)\n                              )\n                              .addConcepts(\n                                  Concept.newBuilder()\n                                      .setId("adultID")\n                                      .setValue(0.95f)\n                              )\n                      )\n                      .setParams(params)\n              )\n      )\n      .build()\n);\n\nif (postModelsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n    throw new RuntimeException("Post models failed, status: " + postModelsResponse.getStatus());\n}\n'))),(0,s.kt)(r.Z,{value:"grpc_nodejs",label:"gRPC NodeJS",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nconst params = {\n    concept_threshold_type: "GREATER_THAN"\n}\n\nstub.PostModels(\n    {\n        user_app_id: {\n            app_id: "{YOUR_APP_ID}"\n        },\n        models: [\n            {\n                id: "greater-than-model-id",\n                model_type_id: "concept-threshold",\n                output_info: {\n                    data: {\n                        concepts: [\n                            {id: "peopleID", value: 0.5},\n                            {id: "manID", value: 0.5},\n                            {id: "adultID", value: 0.95}\n                        ]\n                    },\n                },\n                params: params\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post models failed, status: " + response.status.description);\n        }\n    }\n);\n'))),(0,s.kt)(r.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST \'https://api.clarifai.com/v2/users/me/apps/{{app}}/models\' \\\n    -H \'Authorization: Key {{PAT}}\' \\\n    -H \'Content-Type: application/javascript\' \\\n    --data-raw \'{\n        "model": {\n            "id": "greater-than-model-id",\n            "model_type_id": "concept-threshold",\n            "output_info": {\n                "data": {\n                    "concepts": [\n                        {\n                            "id": "peopleID",\n                            "value": 0.5\n                        },\n                        {\n                            "id": "manID",\n                            "value": 0.5\n                        },\n                        {\n                            "id": "adultID",\n                            "value": 0.95\n                        }\n                    ]\n                },\n                "params": {\n                    "concept_threshold_type": 1\n                }\n            }\n        }\n    }\'\n')))),(0,s.kt)("h2",{id:"create-a-less-than-concept-thresholder-model"},'Create a "Less Than" Concept Thresholder Model'),(0,s.kt)("p",null,"This model will allow any predictions ","<"," the concept values defined in the model to be outputted from the model."),(0,s.kt)(i.Z,{mdxType:"Tabs"},(0,s.kt)(r.Z,{value:"grpc_python",label:"gRPC Python",mdxType:"TabItem"},(0,s.kt)(p.Z,{className:"language-python",mdxType:"CodeBlock"},"#########################################################################################\n# In this section, we set the user authentication, app ID, and the details of the model\n# we want to create. Change these strings to run your own example.\n#########################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to create your own concept thresholder model\nMODEL_ID = 'less-than-model-id'\nMODEL_TYPE_ID = 'concept-thresholder'\nCONCEPT_ID_1 = 'peopleID'\nCONCEPT_ID_2 = 'manID'\nCONCEPT_ID_3 = 'adultID'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\nfrom google.protobuf.struct_pb2 import Struct\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID) # The userDataObject is required when using a PAT\n\nparams = Struct()\nparams.update({\n    \"concept_threshold_type\": resources_pb2.LESS_THAN\n})\n\npost_models_response = stub.PostModels(\n    service_pb2.PostModelsRequest(\n        user_app_id=userDataObject,  \n        models=[\n            resources_pb2.Model(\n                id=MODEL_ID,\n                model_type_id=MODEL_TYPE_ID,\n                output_info=resources_pb2.OutputInfo(\n                    data=resources_pb2.Data(\n                        concepts=[\n                            resources_pb2.Concept(id=CONCEPT_ID_1, value=0.5),\n                            resources_pb2.Concept(id=CONCEPT_ID_2, value=0.5),\n                            resources_pb2.Concept(id=CONCEPT_ID_3, value=0.95),\n                        ]\n                    ),\n                    params=params\n                )\n            ),\n        ]\n    ),\n    metadata=metadata\n)\n\nif post_models_response.status.code != status_code_pb2.SUCCESS:\n    print(post_models_response.status)\n    raise Exception(\"Post models failed, status: \" + post_models_response.status.description)\n    ")),(0,s.kt)(r.Z,{value:"grpc_java",label:"gRPC Java",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nStruct.Builder params = Struct.newBuilder()\n    .putFields(\n        "concept_threshold_type",\n        Value.newBuilder().setNumberValue(ValueComparator.LESS_THAN_VALUE).build()\n    );\n\nSingleModelResponse postModelsResponse = stub.postModels(\n  PostModelsRequest.newBuilder()\n      .setUserAppId(UserAppIDSet.newBuilder().setAppId("{YOUR_APP_ID}"))\n      .addModels(\n          Model.newBuilder()\n              .setId("less-than-model-id")\n              .setModelTypeId("concept-threshold")\n              .setOutputInfo(\n                  OutputInfo.newBuilder()\n                      .setData(\n                          Data.newBuilder()\n                              .addConcepts(\n                                  Concept.newBuilder()\n                                      .setId("peopleID")\n                                      .setValue(0.5f)\n                              )\n                              .addConcepts(\n                                  Concept.newBuilder()\n                                      .setId("manID")\n                                      .setValue(0.5f)\n                              )\n                              .addConcepts(\n                                  Concept.newBuilder()\n                                      .setId("adultID")\n                                      .setValue(0.95f)\n                              )\n                      )\n                      .setParams(params)\n              )\n      )\n      .build()\n);\n\nif (postModelsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n    throw new RuntimeException("Post models failed, status: " + postModelsResponse.getStatus());\n}\n'))),(0,s.kt)(r.Z,{value:"grpc_nodejs",label:"gRPC NodeJS",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nconst params = {\n    concept_threshold_type: "LESS_THAN"\n}\n\nstub.PostModels(\n    {\n        user_app_id: {\n            app_id: "{YOUR_APP_ID}"\n        },\n        models: [\n            {\n                id: "less-than-model-id",\n                model_type_id: "concept-threshold",\n                output_info: {\n                    data: {\n                        concepts: [\n                            {id: "peopleID", value: 0.5},\n                            {id: "manID", value: 0.5},\n                            {id: "adultID", value: 0.95}\n                        ]\n                    },\n                    params: params\n                }\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post models failed, status: " + response.status.description);\n        }\n    }\n);\n'))),(0,s.kt)(r.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST \'https://api.clarifai.com/v2/users/me/apps/{{app}}/models\' \\\n    -H \'Authorization: Key {{PAT}}\' \\\n    -H \'Content-Type: application/javascript\' \\\n    --data-raw \'{\n        "model": {\n            "id": "less-than-model-id",\n            "model_type_id": "concept-threshold",\n            "output_info": {\n                "data": {\n                    "concepts": [\n                        {\n                            "id": "peopleID",\n                            "value": 0.5\n                        },\n                        {\n                            "id": "manID",\n                            "value": 0.5\n                        },\n                        {\n                            "id": "adultID",\n                            "value": 0.95\n                        }\n                    ]\n                },\n                "params": {\n                    "concept_threshold_type": 3\n                }\n            }\n        }\n    }\'\n')))),(0,s.kt)("h2",{id:"create-a-write-success-as-me-annotation-writer-model"},'Create a "Write Success as Me" Annotation Writer Model'),(0,s.kt)("p",null,"Any incoming Data object full of concepts, regions, etc. will be written by this model to the database as an annotation with ANNOTATION","_","SUCCESS status as if the app owner did the work themself."),(0,s.kt)(i.Z,{mdxType:"Tabs"},(0,s.kt)(r.Z,{value:"grpc_python",label:"gRPC Python",mdxType:"TabItem"},(0,s.kt)(p.Z,{className:"language-python",mdxType:"CodeBlock"},"#########################################################################################\n# In this section, we set the user authentication, app ID, and the details of the model\n# we want to create. Change these strings to run your own example.\n#########################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to create your own annotation writer model\nMODEL_ID = 'write-success-model-id'\nMODEL_TYPE_ID = 'annotation-writer'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\nfrom google.protobuf.struct_pb2 import Struct\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID) # The userDataObject is required when using a PAT\n\nparams = Struct()\nparams.update({\n    \"annotation_status\": status_code_pb2.ANNOTATION_SUCCESS,\n    \"annotation_user_id\": USER_ID\n})\n\npost_models_response = stub.PostModels(\n    service_pb2.PostModelsRequest(\n        user_app_id=userDataObject,  \n        models=[\n            resources_pb2.Model(\n                id=MODEL_ID,\n                model_type_id=MODEL_TYPE_ID,\n                output_info=resources_pb2.OutputInfo(\n                    params=params\n                )\n            ),\n        ]\n    ),\n    metadata=metadata\n)\n\nif post_models_response.status.code != status_code_pb2.SUCCESS:\n    print(post_models_response.status)\n    raise Exception(\"Post models failed, status: \" + post_models_response.status.description)\n")),(0,s.kt)(r.Z,{value:"grpc_java",label:"gRPC Java",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nStruct.Builder params = Struct.newBuilder()\n    .putFields(\n        "annotation_status", Value.newBuilder().setNumberValue(StatusCode.ANNOTATION_SUCCESS_VALUE).build()\n    )\n    .putFields(\n        "annotation_user_id",\n        Value.newBuilder().setStringValue("{YOUR_USER_ID}").build()\n    );\n\nSingleModelResponse postModelsResponse = stub.postModels(\n  PostModelsRequest.newBuilder()\n      .setUserAppId(UserAppIDSet.newBuilder().setAppId("{YOUR_APP_ID}"))\n      .addModels(\n          Model.newBuilder()\n              .setId("write-success-as-me-id")\n              .setModelTypeId("annotation-writer")\n              .setOutputInfo(\n                  OutputInfo.newBuilder()\n                      .setParams(params)\n              )\n      )\n      .build()\n);\n\nif (postModelsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n    throw new RuntimeException("Post models failed, status: " + postModelsResponse.getStatus());\n}\n'))),(0,s.kt)(r.Z,{value:"grpc_nodejs",label:"gRPC NodeJS",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nconst params = {\n    annotation_status: "ANNOTATION_SUCCESS",\n    annotation_user_id: "{YOUR_USER_ID}"\n}\n\nstub.PostModels(\n    {\n        user_app_id: {\n            app_id: "{YOUR_APP_ID}"\n        },\n        models: [\n            {\n                id: "write-success-model-id",\n                model_type_id: "annotation-writer",\n                output_info: {\n                    params: params\n                }\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post models failed, status: " + response.status.description);\n        }\n    }\n);\n'))),(0,s.kt)(r.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST \'https://api.clarifai.com/v2/users/me/apps/{{app}}/models\' \\\n    -H \'Authorization: Key {{PAT}}\' \\\n    -H \'Content-Type: application/javascript\' \\\n    --data-raw \'{\n        "model": {\n            "id": "write-success-as-me",\n            "model_type_id": "annotation-writer",\n            "output_info": {\n                "params": {\n                    "annotation_status": 24150,\n                    "annotation_user_id": "{YOUR_USER_ID}"\n                }\n            }\n        }\n    }\'\n')))),(0,s.kt)("h2",{id:"create-a-write-pending-as-me-annotation-writer-model"},'Create a "Write Pending as Me" Annotation Writer Model'),(0,s.kt)("p",null,"Any incoming Data object full of concepts, regions, etc. will be written by this model to the database as an annotation with ANNOTATION","_","PENDING status as if the app owner did the work themself, but needs further review. So, it is marked as pending."),(0,s.kt)(i.Z,{mdxType:"Tabs"},(0,s.kt)(r.Z,{value:"grpc_python",label:"gRPC Python",mdxType:"TabItem"},(0,s.kt)(p.Z,{className:"language-python",mdxType:"CodeBlock"},"#########################################################################################\n# In this section, we set the user authentication, app ID, and the details of the model\n# we want to create. Change these strings to run your own example.\n#########################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to create your own annotation writer model\nMODEL_ID = 'write-pending-model-id'\nMODEL_TYPE_ID = 'annotation-writer'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\nfrom google.protobuf.struct_pb2 import Struct\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID) # The userDataObject is required when using a PAT\n\nparams = Struct()\nparams.update({\n    \"annotation_status\": status_code_pb2.ANNOTATION_PENDING,\n    \"annotation_user_id\": USER_ID\n})\n\npost_models_response = stub.PostModels(\n    service_pb2.PostModelsRequest(\n        user_app_id=userDataObject,  \n        models=[\n            resources_pb2.Model(\n                id=MODEL_ID,\n                model_type_id=MODEL_TYPE_ID,\n                output_info=resources_pb2.OutputInfo(\n                    params=params\n                )\n            ),\n        ]\n    ),\n    metadata=metadata\n)\n\nif post_models_response.status.code != status_code_pb2.SUCCESS:\n    print(post_models_response.status)\n    raise Exception(\"Post models failed, status: \" + post_models_response.status.description)\n    ")),(0,s.kt)(r.Z,{value:"grpc_java",label:"gRPC Java",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nStruct.Builder params = Struct.newBuilder()\n    .putFields(\n        "annotation_status", Value.newBuilder().setNumberValue(StatusCode.ANNOTATION_PENDING_VALUE).build()\n    )\n    .putFields(\n        "annotation_user_id",\n        Value.newBuilder().setStringValue("{YOUR_USER_ID}").build()\n    );\n\nSingleModelResponse postModelsResponse = stub.postModels(\n  PostModelsRequest.newBuilder()\n      .setUserAppId(UserAppIDSet.newBuilder().setAppId("{YOUR_APP_ID}"))\n      .addModels(\n          Model.newBuilder()\n              .setId("write-pending-as-me-id")\n              .setModelTypeId("annotation-writer")\n              .setOutputInfo(\n                  OutputInfo.newBuilder()\n                      .setParams(params)\n              )\n      )\n      .build()\n);\n\nif (postModelsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n    throw new RuntimeException("Post models failed, status: " + postModelsResponse.getStatus());\n}\n'))),(0,s.kt)(r.Z,{value:"grpc_nodejs",label:"gRPC NodeJS",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n"))),(0,s.kt)(r.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST \'https://api.clarifai.com/v2/users/me/apps/{{app}}/models\' \\\n    -H \'Authorization: Key {{PAT}}\' \\\n    -H \'Content-Type: application/javascript\' \\\n    --data-raw \'{\n        "model": {\n            "id": "write-pending-as-me",\n            "model_type_id": "annotation-writer",\n            "output_info": {\n                "params": {\n                    "annotation_status": 24151,\n                    "annotation_user_id": "{YOUR_USER_ID}"\n                }\n            }\n        }\n    }\'\n')))),(0,s.kt)("h2",{id:"create-the-workflow"},"Create the Workflow"),(0,s.kt)("p",null,"We will now connect all the models together into a single workflow."),(0,s.kt)("p",null,"Every input will be predicted by General Embed model to generate embeddings. The output of the embed model ","(","embeddings",")"," will be sent to general concept to predict concept and cluster model. Then the concept model's output ","(","a list of concepts with prediction values",")"," will be sent to concept mapper model, which maps Clarifai concepts to your concepts within your app, ",(0,s.kt)("inlineCode",{parentName:"p"},"people"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"man")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"adult")," in this case."),(0,s.kt)("p",null,"Then the mapped concepts will be sent to both concept thresholds models ","(",(0,s.kt)("inlineCode",{parentName:"p"},"GREATER THAN")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"LESS THAN"),")",". ",(0,s.kt)("inlineCode",{parentName:"p"},"GREATER THAN")," model will filter out the concepts that are lower than corresponding value you defined in model and send the remaining concept list to ",(0,s.kt)("inlineCode",{parentName:"p"},"write success as me")," model, which labels the input with these concepts ","(","your app concepts only",")"," as you with ",(0,s.kt)("inlineCode",{parentName:"p"},"success")," status. You can train or search on these concepts immediately. "),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"LESS THAN")," model will filter out concepts that are higher than the corresponding value you defined in the model and send the remaining concept list to ",(0,s.kt)("inlineCode",{parentName:"p"},"write pending as me")," model, which labels the input with these concepts ","(","your app concepts only",")"," as you with ",(0,s.kt)("inlineCode",{parentName:"p"},"pending")," status."),(0,s.kt)("p",null,"The model IDs and model version IDs from the public ",(0,s.kt)("inlineCode",{parentName:"p"},"clarifai/main")," application are fixed to the latest version at the time of this writing ","(","check GET /models for an always up to date list of available models",")",", so they are already hard-coded in the code examples below. It's possible to use other public model or model version IDs."),(0,s.kt)(i.Z,{mdxType:"Tabs"},(0,s.kt)(r.Z,{value:"grpc_python",label:"gRPC Python",mdxType:"TabItem"},(0,s.kt)(p.Z,{className:"language-python",mdxType:"CodeBlock"},"###################################################################################\n# In this section, we set the user authentication, app ID, and the details of the \n# workflow we want to create. Change these strings to run your own example.\n##################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to create your own workflow \n# Note that we've also added as comments the values of most of these variables against their names in the code below\n\nWORKFLOW_ID = 'auto-annotation-workflow-id'\nNODE_ID_1 = 'general-embed'\nMODEL_ID_1 = 'bbb5f41425b8468d9b7a554ff10f8581'\nMODEL_VERSION_ID_1 = 'bb186755eda04f9cbb6fe32e816be104'\n\nNODE_ID_2 = 'general-concept'\nMODEL_ID_2 = 'aaa03c23b3724a16a56b629203edc62c'\nMODEL_VERSION_ID_2 = 'aa7f35c01e0642fda5cf400f543e7c40'\n\nNODE_ID_3 = 'general-cluster'\nMODEL_ID_3 = 'cccbe437d6e54e2bb911c6aa292fb072'\nMODEL_VERSION_ID_3 = 'cc2074cff6dc4c02b6f4e1b8606dcb54'\n\nNODE_ID_4 = 'mapper'\nSYNONYM_MODEL_ID = 'synonym-model-id'\nSYNONYM_MODEL_VERSION_ID = 'YOUR_SYNONYM_MODEL_VERSION_ID'\n\nNODE_ID_5 = 'greater-than'\nGREATER_THAN_MODEL_ID = 'greater-than-model-id'\nGREATER_THAN_MODEL_VERSION_ID = 'YOUR_GREATER_THAN_MODEL_VERSION_ID'\n\nNODE_ID_6 = 'write-success'\nWRITE_SUCCESS_MODEL_ID = 'write-success-model-id'\nWRITE_SUCCESS_MODEL_VERSION_ID = 'YOUR_WRITE_SUCCESS_MODEL_VERSION_ID'\n\nNODE_ID_7 = 'less-than'\nLESS_THAN_MODEL_ID = 'less-than-model-id'\nLESS_THAN_MODEL_VERSION_ID = 'YOUR_LESS_THAN_MODEL_VERSION_ID'\n\nNODE_ID_8 = 'write-pending'\nWRITE_PENDING_MODEL_ID = 'write-pending-model-id'\nWRITE_PENDING_MODEL_VERSION_ID = 'YOUR_WRITE_PENDING_MODEL_VERSION_ID'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID) # The userDataObject is required when using a PAT\n\npost_workflows_response = stub.PostWorkflows(\n    service_pb2.PostWorkflowsRequest(\n        user_app_id=userDataObject,  \n        workflows=[\n            resources_pb2.Workflow(\n                id=WORKFLOW_ID, # auto-annotation-workflow-id\n                nodes=[\n                    resources_pb2.WorkflowNode(\n                        id=NODE_ID_1, # general-embed\n                        model=resources_pb2.Model(\n                            id=MODEL_ID_1, # bbb5f41425b8468d9b7a554ff10f8581\n                            model_version=resources_pb2.ModelVersion(\n                                id=MODEL_VERSION_ID_1 # bb186755eda04f9cbb6fe32e816be104\n                            )\n                        )\n                    ),\n                    resources_pb2.WorkflowNode(\n                        id=NODE_ID_2, # general-concept\n                        model=resources_pb2.Model(\n                            id=MODEL_ID_2, # aaa03c23b3724a16a56b629203edc62c\n                            model_version=resources_pb2.ModelVersion(\n                                id=MODEL_VERSION_ID_2 # aa7f35c01e0642fda5cf400f543e7c40\n                            )\n                        )\n                    ),\n                    resources_pb2.WorkflowNode(\n                        id=NODE_ID_3, # general-cluster\n                        model=resources_pb2.Model(\n                            id=MODEL_ID_3, # cccbe437d6e54e2bb911c6aa292fb072\n                            model_version=resources_pb2.ModelVersion(\n                                id=MODEL_VERSION_ID_3 # cc2074cff6dc4c02b6f4e1b8606dcb54\n                            )\n                        ),\n                    ),\n                    resources_pb2.WorkflowNode(\n                        id=NODE_ID_4, # mapper\n                        model=resources_pb2.Model(\n                            id=SYNONYM_MODEL_ID,\n                            model_version=resources_pb2.ModelVersion(\n                                id=SYNONYM_MODEL_VERSION_ID\n                            )\n                        ),\n                        node_inputs=[\n                            resources_pb2.NodeInput(node_id=NODE_ID_2) # general-concept\n                        ]\n                    ),\n                    resources_pb2.WorkflowNode(\n                        id=NODE_ID_5, # greater-than\n                        model=resources_pb2.Model(\n                            id=GREATER_THAN_MODEL_ID,\n                            model_version=resources_pb2.ModelVersion(\n                                id=GREATER_THAN_MODEL_VERSION_ID\n                            )\n                        ),\n                        node_inputs=[\n                            resources_pb2.NodeInput(node_id=NODE_ID_4) # mapper\n                        ]\n                    ),\n                    resources_pb2.WorkflowNode(\n                        id=NODE_ID_6, # write-success\n                        model=resources_pb2.Model(\n                            id=WRITE_SUCCESS_MODEL_ID,\n                            model_version=resources_pb2.ModelVersion(\n                                id=WRITE_SUCCESS_MODEL_VERSION_ID\n                            )\n                        ),\n                        node_inputs=[\n                            resources_pb2.NodeInput(node_id=NODE_ID_5) # greater-than\n                        ]\n                    ),\n                    resources_pb2.WorkflowNode(\n                        id=NODE_ID_7, # less-than\n                        model=resources_pb2.Model(\n                            id=LESS_THAN_MODEL_ID,\n                            model_version=resources_pb2.ModelVersion(\n                                id=LESS_THAN_MODEL_VERSION_ID\n                            )\n                        ),\n                        node_inputs=[\n                            resources_pb2.NodeInput(node_id=NODE_ID_4) # mapper\n                        ]\n                    ),\n                    resources_pb2.WorkflowNode(\n                        id=NODE_ID_8, # write-pending\n                        model=resources_pb2.Model(\n                            id=WRITE_PENDING_MODEL_ID, \n                            model_version=resources_pb2.ModelVersion(\n                                id=WRITE_PENDING_MODEL_VERSION_ID\n                            )\n                        ),\n                        node_inputs=[\n                            resources_pb2.NodeInput(node_id=NODE_ID_7) # less-than\n                        ]\n                    ),\n                ]\n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif post_workflows_response.status.code != status_code_pb2.SUCCESS:\n    print(post_workflows_response.status)\n    raise Exception(\"Post workflows failed, status: \" + post_workflows_response.status.description)         \n")),(0,s.kt)(r.Z,{value:"grpc_java",label:"gRPC Java",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nMultiWorkflowResponse postWorkflowsResponse = stub.postWorkflows(\n  PostWorkflowsRequest.newBuilder()\n      .setUserAppId(UserAppIDSet.newBuilder().setAppId("{YOUR_APP_ID}"))\n      .addWorkflows(\n          Workflow.newBuilder()\n              .setId("auto-annotation-workflow-id")\n              .addNodes(\n                  WorkflowNode.newBuilder()\n                      .setId("general-embed")\n                      .setModel(\n                          Model.newBuilder()\n                              .setId("bbb5f41425b8468d9b7a554ff10f8581")\n                              .setModelVersion(\n                                  ModelVersion.newBuilder()\n                                      .setId("bb186755eda04f9cbb6fe32e816be104")\n                              )\n                      )\n              )\n              .addNodes(\n                  WorkflowNode.newBuilder()\n                      .setId("general-concept")\n                      .setModel(\n                          Model.newBuilder()\n                              .setId("aaa03c23b3724a16a56b629203edc62c")\n                              .setModelVersion(\n                                  ModelVersion.newBuilder()\n                                      .setId("aa7f35c01e0642fda5cf400f543e7c40")\n                              )\n                      )\n              )\n              .addNodes(\n                  WorkflowNode.newBuilder()\n                      .setId("general-cluster")\n                      .setModel(\n                          Model.newBuilder()\n                              .setId("cccbe437d6e54e2bb911c6aa292fb072")\n                              .setModelVersion(\n                                  ModelVersion.newBuilder()\n                                      .setId("cc2074cff6dc4c02b6f4e1b8606dcb54")\n                              )\n                      )\n              )\n              .addNodes(\n                  WorkflowNode.newBuilder()\n                      .setId("mapper")\n                      .setModel(\n                          Model.newBuilder()\n                              .setId("synonym-model-id")\n                              .setModelVersion(\n                                  ModelVersion.newBuilder()\n                                      .setId("{YOUR_SYNONYM_MODEL_VERSION_ID}")\n                              )\n                      )\n                      .addNodeInputs(NodeInput.newBuilder().setNodeId("general-concept"))\n              )\n              .addNodes(\n                  WorkflowNode.newBuilder()\n                      .setId("greater-than")\n                      .setModel(\n                          Model.newBuilder()\n                              .setId("greater-than-model-id")\n                              .setModelVersion(\n                                  ModelVersion.newBuilder()\n                                      .setId("{YOUR_GREATER_THAN_MODEL_VERSION_ID}")\n                              )\n                      )\n                      .addNodeInputs(NodeInput.newBuilder().setNodeId("mapper"))\n              )\n              .addNodes(\n                  WorkflowNode.newBuilder()\n                      .setId("write-as-success-as-me")\n                      .setModel(\n                          Model.newBuilder()\n                              .setId("write-success-as-me-id")\n                              .setModelVersion(\n                                  ModelVersion.newBuilder()\n                                      .setId("{YOUR_WRITE_SUCCESS_AS_ME_MODEL_VERSION_ID}")\n                              )\n                      )\n                      .addNodeInputs(NodeInput.newBuilder().setNodeId("greater-than"))\n              )\n              .addNodes(\n                  WorkflowNode.newBuilder()\n                      .setId("less-than")\n                      .setModel(\n                          Model.newBuilder()\n                              .setId("less-than-model-id")\n                              .setModelVersion(\n                                  ModelVersion.newBuilder()\n                                      .setId("{YOUR_LESS_THAN_MODEL_VERSION_ID}")\n                              )\n                      )\n                      .addNodeInputs(NodeInput.newBuilder().setNodeId("mapper"))\n              )\n              .addNodes(\n                  WorkflowNode.newBuilder()\n                      .setId("write-pending")\n                      .setModel(\n                          Model.newBuilder()\n                              .setId("write-pending-as-me-id")\n                              .setModelVersion(\n                                  ModelVersion.newBuilder()\n                                      .setId("{YOUR_WRITE_PENDING_AS_ME_MODEL_VERSION_ID}")\n                              )\n                      )\n                      .addNodeInputs(NodeInput.newBuilder().setNodeId("less-than"))\n              )\n      )\n      .build()\n);\n\nif (postWorkflowsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n    throw new RuntimeException("Post workflows failed, status: " + postWorkflowsResponse.getStatus());\n}\n'))),(0,s.kt)(r.Z,{value:"grpc_nodejs",label:"gRPC NodeJS",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nstub.PostWorkflows(\n    {\n        user_app_id: {\n            app_id: "e83440590d104cee97ef84af1856837d"\n        },\n        workflows: [\n            {\n                id: "auto-annotation-workflow-id",\n                nodes: [\n                    {\n                        id: "general-embed",\n                        model: {\n                            id: "bbb5f41425b8468d9b7a554ff10f8581",\n                            model_version: {\n                                id: "bb186755eda04f9cbb6fe32e816be104"\n                            }\n                        }\n                    },\n                    {\n                        id: "general-concept",\n                        model: {\n                            id: "aaa03c23b3724a16a56b629203edc62c",\n                            model_version: {\n                                id: "aa7f35c01e0642fda5cf400f543e7c40"\n                            }\n                        }\n                    },\n                    {\n                        id: "general-cluster",\n                        model: {\n                            id: "cccbe437d6e54e2bb911c6aa292fb072",\n                            model_version: {\n                                id: "cc2074cff6dc4c02b6f4e1b8606dcb54"\n                            }\n                        }\n                    },\n                    {\n                        id: "mapper",\n                        model: {\n                            id: "synonym-model-id",\n                            model_version: {\n                                id: "{YOUR_SYNONYM_MODEL_VERSION_ID}"\n                            }\n                        },\n                        node_inputs: [\n                            {node_id: "general-concept"}\n                        ]\n                    },\n                    {\n                        id: "greater-than",\n                        model: {\n                            id: "greater-than-model-id",\n                            model_version: {\n                                id: "{YOUR_GREATER_THAN_MODEL_VERSION_ID}"\n                            }\n                        },\n                        node_inputs: [\n                            {node_id: "mapper"}\n                        ]\n                    },\n                    {\n                        id: "write-success",\n                        model: {\n                            id: "write-success-model-id",\n                            model_version: {\n                                id: "{YOUR_WRITE_SUCCESS_MODEL_VERSION_ID}"\n                            }\n                        },\n                        node_inputs: [\n                            {node_id: "greater-than"}\n                        ]\n                    },\n                    {\n                        id: "less-than",\n                        model: {\n                            id: "less-than-model-id",\n                            model_version: {\n                                id: "{YOUR_LESS_THAN_MODEL_VERSION_ID}"\n                            }\n                        },\n                        node_inputs: [\n                            {node_id: "mapper"}\n                        ]\n                    },\n                    {\n                        id: "write-pending",\n                        model: {\n                            id: "write-pending-model-id",\n                            model_version: {\n                                id: "{YOUR_WRITE_PENDING_MODEL_VERSION_ID}"\n                            }\n                        },\n                        node_inputs: [\n                            {node_id: "less-than"}\n                        ]\n                    }\n                ]\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            console.log(response.status);\n            throw new Error("Post workflows failed, status: " + response.status.description);\n        }\n    }\n);\n'))),(0,s.kt)(r.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST \'https://api.clarifai.com/v2/users/me/apps/{{app}}/workflows\' \\\n    -H \'Authorization: Key {{PAT}}\' \\\n    -H \'Content-Type: application/json\' \\\n    --data-raw \'{\n        "workflows": [\n            {\n                "id": "auto-annotation-workflow-id",\n                "nodes": [\n                    {\n                        "id": "general-embed",\n                        "model": {\n                            "id": "{YOUR_GENERAL_EMBED_MODEL_ID}",\n                            "model_version": {\n                                "id": "{YOUR_GENERAL_EMBED_MODEL_VERSION_ID}"\n                            }\n                        }\n                    },\n                    {\n                        "id": "general-concept",\n                        "model": {\n                            "id": "{YOUR_GENERAL_CONCEPT_MODEL_ID}",\n                            "model_version": {\n                                "id": "{YOUR_GENERAL_CONCEPT_MODEL_VERSION_ID}"\n                            }\n                        }\n                    },\n                    {\n                        "id": "general-cluster",\n                        "model": {\n                            "id": "{YOUR_GENERAL_CLUSTER_MODEL_ID}",\n                            "model_version": {\n                                "id": "{YOUR_GENERAL_CLUSTER_MODEL_VERSION_ID}"\n                            }\n                        }\n                    },\n                    {\n                        "id": "mapper",\n                        "model": {\n                            "id": "synonym-model-id",\n                            "model_version": {\n                                "id": "{YOUR_MAPPER_MODEL_VERSION_ID}"\n                            }\n                        },\n                        "node_inputs": [\n                            {\n                                "node_id": "general-concept"\n                            }\n                        ]\n                    },\n                    {\n                        "id": "greater-than",\n                        "model": {\n                            "id": "greater-than-model-id",\n                            "model_version": {\n                                "id": "{YOUR_GREATER_THAN_MODEL_VERSION_ID}"\n                            }\n                        },\n                        "node_inputs": [\n                            {\n                                "node_id": "mapper"\n                            }\n                        ]\n                    },\n                    {\n                        "id": "write-success",\n                        "model": {\n                            "id": "write-success-as-me",\n                            "model_version": {\n                                "id": "{YOUR_WRITE_AS_ME_MODEL_VERSION_ID}"\n                            }\n                        },\n                        "node_inputs": [\n                            {\n                                "node_id": "greater-than"\n                            }\n                        ]\n                    },\n                    {\n                        "id": "less-than",\n                        "model": {\n                            "id": "less-than-model-id",\n                            "model_version": {\n                                "id": "{YOUR_LESS_THAN_MODEL_VERSION_ID}"\n                            }\n                        },\n                        "node_inputs": [\n                            {\n                                "node_id": "mapper"\n                            }\n                        ]\n                    },\n                    {\n                        "id": "write-pending",\n                        "model": {\n                            "id": "write-pending-as-me",\n                            "model_version": {\n                                "id": "{YOUR_WRITE_AS_COLLABORATOR_MODEL_VERSION_ID}"\n                            }\n                        },\n                        "node_inputs": [\n                            {\n                                "node_id": "less-than"\n                            }\n                        ]\n                    }\n                ]\n            }\n        ]\n    }\'\n')))),(0,s.kt)("h2",{id:"make-the-new-workflow-your-apps-default"},"Make the New Workflow your App's Default"),(0,s.kt)("p",null,"Make this the default workflow in the app. So, it will run every time we add an input and execute the auto annotation process. "),(0,s.kt)("p",null,"If the workflow is not the default workflow of your app, you can still use ",(0,s.kt)("inlineCode",{parentName:"p"},"PostWorkflowResults")," on new inputs to check that you configured the workflow graph and your models properly, but the data will not be written to the DB. This is recommended before making it your default workflow and adding inputs to your app."),(0,s.kt)(i.Z,{mdxType:"Tabs"},(0,s.kt)(r.Z,{value:"grpc_python",label:"gRPC Python",mdxType:"TabItem"},(0,s.kt)(p.Z,{className:"language-python",mdxType:"CodeBlock"},"#######################################################################################\n# In this section, we set the user authentication, app ID, and the ID of the workflow\n# we want to make as default. Change these strings to run your own example.\n#######################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change this to make your own default workflow\nDEFAULT_WORKFLOW_ID = 'auto-annotation-workflow-id'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID) # The userDataObject is required when using a PAT\n\npatch_apps_response = stub.PatchApps(\n    service_pb2.PatchAppsRequest(\n        user_app_id=userDataObject,  \n        action=\"overwrite\",\n        apps=[\n            resources_pb2.App(\n                id=APP_ID,\n                default_workflow_id=DEFAULT_WORKFLOW_ID\n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif patch_apps_response.status.code != status_code_pb2.SUCCESS:\n    print(patch_apps_response.status)\n    raise Exception(\"Patch apps failed, status: \" + patch_apps_response.status.description)\n\n")),(0,s.kt)(r.Z,{value:"grpc_java",label:"gRPC Java",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nMultiAppResponse patchAppsResponse = stub.patchApps(\n    PatchAppsRequest.newBuilder()\n        .setAction("overwrite")\n        .addApps(\n            App.newBuilder()\n                .setId("{YOUR_APP_ID}")\n                .setDefaultWorkflowId("auto-annotation-workflow-id")\n        ).build()\n);\n\nif (patchAppsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n    throw new RuntimeException("Patch apps failed, status: " + patchAppsResponse.getStatus());\n}\n'))),(0,s.kt)(r.Z,{value:"grpc_nodejs",label:"gRPC NodeJS",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nstub.PatchApps(\n    {\n        action: "overwrite",\n        apps: [\n            {\n                id: "{YOUR_APP_ID}",\n                default_workflow_id: "auto-annotation-workflow-id"\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            console.log(response.status);\n            throw new Error("Patch apps failed, status: " + response.status.description);\n        }\n    }\n);\n'))),(0,s.kt)(r.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X PATCH \'https://api.clarifai.com/v2/users/me/apps\' \\\n    -H \'Authorization: Key {{PAT}}\' \\\n    -H \'Content-Type: application/json\' \\\n    --data-raw \'{\n        "action": "overwrite",\n        "apps": [\n            {\n                "id": "{{app}}",\n                "default_workflow_id": "auto-annotation-workflow-ID"\n            }\n        ]\n    }\'\n')))),(0,s.kt)("h2",{id:"add-an-image"},"Add an Image"),(0,s.kt)("p",null,"Adding the image will trigger the default workflow."),(0,s.kt)(i.Z,{mdxType:"Tabs"},(0,s.kt)(r.Z,{value:"grpc_python",label:"gRPC Python",mdxType:"TabItem"},(0,s.kt)(p.Z,{className:"language-python",mdxType:"CodeBlock"},"#####################################################################################\n# In this section, we set the user authentication, app ID, and the URL of the image\n# we want to add. Change these strings to run your own example.\n#####################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change this to add your own image\nIMAGE_URL = 'https://samples.clarifai.com/metro-north.jpg'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID) # The userDataObject is required when using a PAT\n\npost_inputs_response = stub.PostInputs(\n    service_pb2.PostInputsRequest(\n        user_app_id=userDataObject,  \n        inputs=[\n            resources_pb2.Input(\n                data=resources_pb2.Data(\n                    image=resources_pb2.Image(\n                        url=IMAGE_URL\n                    )\n                )\n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif post_inputs_response.status.code != status_code_pb2.SUCCESS:\n    print(post_inputs_response.status)\n    raise Exception(\"Post inputs failed, status: \" + post_inputs_response.status.description)\n")),(0,s.kt)(r.Z,{value:"grpc_java",label:"gRPC Java",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nMultiInputResponse postInputsResponse = stub.postInputs(\n    PostInputsRequest.newBuilder()\n        .setUserAppId(UserAppIDSet.newBuilder().setAppId("{YOUR_APP_ID}"))\n        .addInputs(\n            Input.newBuilder()\n                .setData(\n                    Data.newBuilder()\n                        .setImage(\n                            Image.newBuilder()\n                                .setUrl("{YOUR_IMAGE_URL}")\n                        )\n                )\n        )\n        .build()\n);\n\nif (postInputsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n    throw new RuntimeException("Post inputs failed, status: " + postInputsResponse.getStatus());\n}\n'))),(0,s.kt)(r.Z,{value:"grpc_nodejs",label:"gRPC NodeJS",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nstub.PostInputs(\n    {\n        user_app_id: {\n            app_id: "{YOUR_APP_ID}"\n        },\n        inputs: [\n            {\n                data: {\n                    image: {\n                        url: "{YOUR_IMAGE_URL}"\n                    }\n                }\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            console.log(response.status);\n            throw new Error("Post inputs failed, status: " + response.status.description);\n        }\n    }\n);\n'))),(0,s.kt)(r.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},'curl -X POST \'https://api.clarifai.com/v2/users/me/apps/{{app}}/inputs\' \\\n    -H \'Authorization: Key {{PAT}}\' \\\n    -H \'Content-Type: application/json\' \\\n    --data-raw \'{\n        "inputs": [\n            {\n                "data": {\n                    "image": {\n                        "url": "{YOUR_IMAGE_URL}"\n                    }\n                }\n            }\n        ]\n    }\'\n')))),(0,s.kt)("h2",{id:"list-annotations"},"List Annotations"),(0,s.kt)("p",null,"You can now list annotations with your user ID and see the annotations created by your workflow."),(0,s.kt)(i.Z,{mdxType:"Tabs"},(0,s.kt)(r.Z,{value:"grpc_python",label:"gRPC Python",mdxType:"TabItem"},(0,s.kt)(p.Z,{className:"language-python",mdxType:"CodeBlock"},"###############################################################\n# In this section, we set the user authentication and app ID.\n# Change these strings to run your own example.\n###############################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID) # The userDataObject is required when using a PAT\n\nlist_annotations_response = stub.ListAnnotations(\n    service_pb2.ListAnnotationsRequest(\n        user_app_id=userDataObject,  \n        user_ids=[USER_ID],\n        list_all_annotations=True,\n    ),\n    metadata=metadata\n)\n\nif list_annotations_response.status.code != status_code_pb2.SUCCESS:\n    print(list_annotations_response.status)\n    raise Exception(\"List annotations failed, status: \" + list_annotations_response.status.description)\n\nfor annotation in list_annotations_response.annotations:\n    print(annotation)\n")),(0,s.kt)(r.Z,{value:"grpc_java",label:"gRPC Java",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nMultiAnnotationResponse listAnnotationsResponse = stub.listAnnotations(\n  ListAnnotationsRequest.newBuilder()\n      .setUserAppId(UserAppIDSet.newBuilder().setAppId("{YOUR_APP_ID}"))\n      .addUserIds("{YOUR_USER_ID}")\n      .setListAllAnnotations(true)\n      .build()\n);\n\nif (listAnnotationsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n  throw new RuntimeException("List annotations failed, status: " + listAnnotationsResponse.getStatus());\n}\n\nfor (Annotation annotation : listAnnotationsResponse.getAnnotationsList()) {\n    System.out.println(annotation);\n}\n'))),(0,s.kt)(r.Z,{value:"grpc_nodejs",label:"gRPC NodeJS",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nstub.ListAnnotations(\n    {\n        user_app_id: {\n            app_id: "{YOUR_APP_ID}"\n        },\n        user_ids: ["{YOUR_USER_ID}"],\n        list_all_annotations: true\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("List annotations failed, status: " + response.status.description);\n        }\n\n        for (const annotation of response.annotations) {\n            console.log(annotation);\n        }\n    }\n);\n'))),(0,s.kt)(r.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X GET \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  https://api.clarifai.com/v2/annotations?user_ids={YOUR_USER_ID}\n')))))}h.isMDXComponent=!0}}]);
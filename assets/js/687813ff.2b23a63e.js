"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[8856],{32593:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>f,contentTitle:()=>m,default:()=>y,frontMatter:()=>p,metadata:()=>a,toc:()=>x});const a=JSON.parse('{"id":"compute/agents/mcp","title":"MCP","description":"Build performant MCP Servers with Clarifai","source":"@site/docs/compute/agents/mcp.md","sourceDirName":"compute/agents","slug":"/compute/agents/mcp","permalink":"/compute/agents/mcp","draft":false,"unlisted":false,"editUrl":"https://github.com/Clarifai/docs/blob/main/docs/compute/agents/mcp.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"description":"Build performant MCP Servers with Clarifai","sidebar_position":2,"toc_max_heading_level":4},"sidebar":"tutorialSidebar","previous":{"title":"Build Agents","permalink":"/compute/agents/build"},"next":{"title":"Authentication","permalink":"/control/authentication/"}}');var r=t(74848),i=t(28453),l=t(65537),s=t(79329),o=t(58069);const c='from typing import Any, Annotated # Import Annotated\nfrom pydantic import Field\n\nfrom clarifai.runners.models.mcp_class import MCPModelClass\nfrom fastmcp import FastMCP # Use fastmcp v2, not the built-in mcp\n\n# Initialize the server\nserver = FastMCP("my-trimmed-mcp-server", instructions="", stateless_http=True)\n\n@server.tool("calculate_sum", description="Add two numbers together")\ndef calculate_sum(\n    a: Annotated[Any, Field(description="first number")], # Use Annotated\n    b: Annotated[Any, Field(description="second number")] # Use Annotated\n):\n    return float(a) + float(b)\n\n@server.tool("weather", description="Get the current weather information for the given city")\ndef weather(city: Annotated[str, Field(description="The city to get weather for")]): # Use Annotated\n    if city.lower() == "philly":\n        return "It\'s always sunny in Philadelphia!"\n    elif city.lower() == "seattle":\n        return "It\'s always rainy in Seattle!"\n    else:\n        return f"In {city} it\'s 74 F and cloudy."\n\nclass MyModelClass(MCPModelClass):\n    def get_server(self) -> FastMCP:\n        return server\n',d="build_info:\n  python_version: '3.11'\ninference_compute_info:\n  cpu_limit: 500m\n  cpu_memory: 500Mi\n  num_accelerators: 0\nmodel:\n  app_id: app-id\n  id: model-id\n  model_type_id: mcp\n  user_id: user-id",u="clarifai==11.4.7\nanyio==4.9.0\nmcp==1.9.0\nfastmcp==2.3.4",h='import os\n\nfrom clarifai.client import Model\nmodel = Model.from_current_context()\n\n# Example model prediction from different model methods:\nimport json\n\ns = json.dumps({\n  "jsonrpc": "2.0",\n  "id": 1,\n  "method": "tools/list",\n})\n\nresponse = model.mcp_transport(msg=s)\nprint(response)\n\n\ns = json.dumps({\n  "jsonrpc": "2.0",\n  "id": 1,\n  "method": "tools/call",\n  "params": {\n    "name": "weather",\n    "arguments": {\n      "city": "philly"\n    },\n    "model_config": {}\n  }\n})\n\nresponse = model.mcp_transport(msg=s)\nprint(response)',p={description:"Build performant MCP Servers with Clarifai",sidebar_position:2,toc_max_heading_level:4},m="MCP",f={},x=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Install Clarifai Package",id:"install-clarifai-package",level:3},{value:"Set a PAT Key",id:"set-a-pat-key",level:3},{value:"Create Files",id:"create-files",level:3},{value:"<code>model.py</code>",id:"modelpy",level:4},{value:"<code>requirements.txt</code>",id:"requirementstxt",level:4},{value:"<code>config.yaml</code>",id:"configyaml",level:4},{value:"<code>client.py</code>",id:"clientpy",level:4},{value:"Run an Example",id:"run-an-example",level:2},{value:"Upload to Clarifai",id:"upload-to-clarifai",level:2}];function g(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"mcp",children:"MCP"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Build performant MCP Servers with Clarifai"})}),"\n",(0,r.jsx)("hr",{}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://modelcontextprotocol.io/introduction",children:"The Model Context Protocol (MCP)"})," is a standardized, secure framework for building servers that expose data and functionality to LLM-based applications.\nThink of it as a specialized web API built specifically for LLM interactions."]}),"\n",(0,r.jsxs)(n.p,{children:["Clarifai allows you to build ",(0,r.jsx)(n.a,{href:"https://www.clarifai.com/blog/mcp-vs-a2a-clearly-explained",children:"MCP servers"})," by providing the necessary infrastructure and tools to define and deploy custom MCP servers. This allows you to seamlessly integrate your proprietary data sources, custom APIs, and application-specific functionalities with various LLM applications."]}),"\n",(0,r.jsx)(n.p,{children:"Let's illustrate how you can build a simple MCP server."}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://github.com/Clarifai/examples/tree/main/agents/mcp",children:"Click here"})," to see some examples of MCP servers."]}),"\n"]})}),"\n","\n","\n",(0,r.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,r.jsx)(n.h3,{id:"install-clarifai-package",children:"Install Clarifai Package"}),"\n",(0,r.jsxs)(n.p,{children:["Install the latest version of the ",(0,r.jsx)(n.code,{children:"clarifai"})," Python SDK. This also installs the Clarifai ",(0,r.jsx)(n.a,{href:"https://docs.clarifai.com/additional-resources/api-overview/cli",children:"Command Line Interface (CLI)"}),", which we'll use for uploading the model."]}),"\n",(0,r.jsx)(l.A,{children:(0,r.jsx)(s.A,{value:"bash",label:"Bash",children:(0,r.jsx)(o.A,{className:"language-bash",children:" pip install --upgrade clarifai "})})}),"\n",(0,r.jsx)(n.h3,{id:"set-a-pat-key",children:"Set a PAT Key"}),"\n",(0,r.jsxs)(n.p,{children:["You need to set the ",(0,r.jsx)(n.code,{children:"CLARIFAI_PAT"})," (Personal Access Token) as an environment variable. You can generate the PAT key in your personal settings page by navigating to the ",(0,r.jsx)(n.a,{href:"https://clarifai.com/settings/security",children:"Security section"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"This token is essential for authenticating your connection to the Clarifai platform."}),"\n",(0,r.jsxs)(l.A,{children:[(0,r.jsx)(s.A,{value:"bash",label:"Unix-Like Systems",children:(0,r.jsx)(o.A,{className:"language-bash",children:" export CLARIFAI_PAT=YOUR_PERSONAL_ACCESS_TOKEN_HERE "})}),(0,r.jsx)(s.A,{value:"bash2",label:"Windows",children:(0,r.jsx)(o.A,{className:"language-bash",children:" set CLARIFAI_PAT=YOUR_PERSONAL_ACCESS_TOKEN_HERE "})})]}),"\n",(0,r.jsx)(n.h3,{id:"create-files",children:"Create Files"}),"\n",(0,r.jsx)(n.p,{children:"Create a project directory and organize your files as indicated below to fit the requirements of building servers for the Clarifai platform."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"your_model_directory/\n\u251c\u2500\u2500 1/\n\u2502   \u2514\u2500\u2500 model.py\n\u251c\u2500\u2500 requirements.txt\n\u2514\u2500\u2500 config.yaml\n\u2514\u2500\u2500 client.py\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"your_model_directory/"})," \u2013 The root directory containing all files related to your server.","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"1/"})," \u2013 A subdirectory that holds the model file (",(0,r.jsxs)(n.em,{children:["Note that the folder is named as ",(0,r.jsx)(n.strong,{children:"1"})]}),").","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"model.py"})," \u2013 Contains the main MCP server implementation."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"requirements.txt"})," \u2013 Lists the Python dependencies required to run your server."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"config.yaml"})," \u2013 Contains metadata and configuration settings, such as compute requirements, needed for uploading the model to Clarifai."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"client.py"})," \u2013 Contains the example client demonstrating usage."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Add the following snippets to each of the respective files."}),"\n",(0,r.jsx)(n.h4,{id:"modelpy",children:(0,r.jsx)(n.code,{children:"model.py"})}),"\n",(0,r.jsx)(l.A,{children:(0,r.jsx)(s.A,{value:"python",label:"Python",children:(0,r.jsx)(o.A,{className:"language-python",children:c})})}),"\n",(0,r.jsx)(n.h4,{id:"requirementstxt",children:(0,r.jsx)(n.code,{children:"requirements.txt"})}),"\n",(0,r.jsx)(l.A,{children:(0,r.jsx)(s.A,{value:"text",label:"Text",children:(0,r.jsx)(o.A,{className:"language-text",children:u})})}),"\n",(0,r.jsx)(n.h4,{id:"configyaml",children:(0,r.jsx)(n.code,{children:"config.yaml"})}),"\n",(0,r.jsx)(n.admonition,{title:"important",type:"info",children:(0,r.jsxs)(n.p,{children:["In the ",(0,r.jsx)(n.code,{children:"model"})," section of the ",(0,r.jsx)(n.code,{children:"config.yaml"})," file, specify your model ID, Clarifai user ID, and Clarifai app ID. These will define where your model will be uploaded on the Clarifai platform."]})}),"\n",(0,r.jsx)(l.A,{children:(0,r.jsx)(s.A,{value:"yaml",label:"YAML",children:(0,r.jsx)(o.A,{className:"language-yaml",children:d})})}),"\n",(0,r.jsx)(n.h4,{id:"clientpy",children:(0,r.jsx)(n.code,{children:"client.py"})}),"\n",(0,r.jsx)(l.A,{children:(0,r.jsx)(s.A,{value:"python",label:"Python",children:(0,r.jsx)(o.A,{className:"language-python",children:h})})}),"\n",(0,r.jsx)(n.admonition,{title:"Mock Data",type:"note",children:(0,r.jsx)(n.p,{children:"This example includes mock data and fallback implementations when external services are not available, allowing you to test the MCP interface without requiring all external dependencies."})}),"\n",(0,r.jsx)(n.h2,{id:"run-an-example",children:"Run an Example"}),"\n",(0,r.jsx)(n.p,{children:"After setting up the required files, navigate to your directory and run the following command to install the dependencies:"}),"\n",(0,r.jsx)(l.A,{children:(0,r.jsx)(s.A,{value:"bash",label:"Bash",children:(0,r.jsx)(o.A,{className:"language-bash",children:" pip install -r requirements.txt "})})}),"\n",(0,r.jsx)(n.p,{children:"Then, run the client example:"}),"\n",(0,r.jsx)(l.A,{children:(0,r.jsx)(s.A,{value:"bash",label:"Bash",children:(0,r.jsx)(o.A,{className:"language-bash",children:" python client.py "})})}),"\n",(0,r.jsx)(n.h2,{id:"upload-to-clarifai",children:"Upload to Clarifai"}),"\n",(0,r.jsx)(n.p,{children:"You can upload the MCP server to the Clarifai platform by navigating to its directory and running the following command:"}),"\n",(0,r.jsx)(l.A,{children:(0,r.jsx)(s.A,{value:"bash",label:"CLI",children:(0,r.jsx)(o.A,{className:"language-bash",children:" clarifai model upload "})})})]})}function y(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(g,{...e})}):g(e)}},65537:(e,n,t)=>{t.d(n,{A:()=>A});var a=t(96540),r=t(18215),i=t(65627),l=t(56347),s=t(50372),o=t(30604),c=t(11861),d=t(78749);function u(e){return a.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:n,children:t}=e;return(0,a.useMemo)((()=>{const e=n??function(e){return u(e).map((e=>{let{props:{value:n,label:t,attributes:a,default:r}}=e;return{value:n,label:t,attributes:a,default:r}}))}(t);return function(e){const n=(0,c.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function p(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function m(e){let{queryString:n=!1,groupId:t}=e;const r=(0,l.W6)(),i=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,o.aZ)(i),(0,a.useCallback)((e=>{if(!i)return;const n=new URLSearchParams(r.location.search);n.set(i,e),r.replace({...r.location,search:n.toString()})}),[i,r])]}function f(e){const{defaultValue:n,queryString:t=!1,groupId:r}=e,i=h(e),[l,o]=(0,a.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const a=t.find((e=>e.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:i}))),[c,u]=m({queryString:t,groupId:r}),[f,x]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[r,i]=(0,d.Dv)(t);return[r,(0,a.useCallback)((e=>{t&&i.set(e)}),[t,i])]}({groupId:r}),g=(()=>{const e=c??f;return p({value:e,tabValues:i})?e:null})();(0,s.A)((()=>{g&&o(g)}),[g]);return{selectedValue:l,selectValue:(0,a.useCallback)((e=>{if(!p({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);o(e),u(e),x(e)}),[u,x,i]),tabValues:i}}var x=t(9136);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var y=t(74848);function b(e){let{className:n,block:t,selectedValue:a,selectValue:l,tabValues:s}=e;const o=[],{blockElementScrollPositionUntilNextRender:c}=(0,i.a_)(),d=e=>{const n=e.currentTarget,t=o.indexOf(n),r=s[t].value;r!==a&&(c(n),l(r))},u=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const t=o.indexOf(e.currentTarget)+1;n=o[t]??o[0];break}case"ArrowLeft":{const t=o.indexOf(e.currentTarget)-1;n=o[t]??o[o.length-1];break}}n?.focus()};return(0,y.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":t},n),children:s.map((e=>{let{value:n,label:t,attributes:i}=e;return(0,y.jsx)("li",{role:"tab",tabIndex:a===n?0:-1,"aria-selected":a===n,ref:e=>{o.push(e)},onKeyDown:u,onClick:d,...i,className:(0,r.A)("tabs__item",g.tabItem,i?.className,{"tabs__item--active":a===n}),children:t??n},n)}))})}function v(e){let{lazy:n,children:t,selectedValue:i}=e;const l=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=l.find((e=>e.props.value===i));return e?(0,a.cloneElement)(e,{className:(0,r.A)("margin-top--md",e.props.className)}):null}return(0,y.jsx)("div",{className:"margin-top--md",children:l.map(((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==i})))})}function j(e){const n=f(e);return(0,y.jsxs)("div",{className:(0,r.A)("tabs-container",g.tabList),children:[(0,y.jsx)(b,{...n,...e}),(0,y.jsx)(v,{...n,...e})]})}function A(e){const n=(0,x.A)();return(0,y.jsx)(j,{...e,children:u(e.children)},String(n))}},79329:(e,n,t)=>{t.d(n,{A:()=>l});t(96540);var a=t(18215);const r={tabItem:"tabItem_Ymn6"};var i=t(74848);function l(e){let{children:n,hidden:t,className:l}=e;return(0,i.jsx)("div",{role:"tabpanel",className:(0,a.A)(r.tabItem,l),hidden:t,children:n})}}}]);
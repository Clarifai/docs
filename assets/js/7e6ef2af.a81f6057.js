"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[5861],{82242:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>Y,contentTitle:()=>v,default:()=>k,frontMatter:()=>G,metadata:()=>H,toc:()=>$});var a=t(74848),s=t(28453),i=t(11470),r=t(19365),c=t(21432);const o="#############################################################################\n# In this section, we set the user authentication, app ID, and concept ID.\n# Change these strings to run your own example.\n#############################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change this to whatever concept you want to see its languages\nCONCEPT_ID = 'cat'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\nlist_concept_languages_response = stub.ListConceptLanguages(\n    service_pb2.ListConceptLanguagesRequest(\n        user_app_id=userDataObject,\n        concept_id=CONCEPT_ID\n    ),\n    metadata=metadata\n)\n\n\nif list_concept_languages_response.status.code != status_code_pb2.SUCCESS:\n    print(list_concept_languages_response.status)\n    raise Exception(\"List concept failed, status: \" + list_concept_languages_response.status.description)\n    \nprint(list_concept_languages_response)",l="#######################################################################################\n# In this section, we set the user authentication, app ID, concept ID and language.\n# Change these strings to run your own example.\n#######################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to whatever concept you want to get its language translation\nCONCEPT_ID = 'cat'\nCONCEPT_LANGUAGE = \"en\"\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\nget_concept_language_response = stub.GetConceptLanguage(\n    service_pb2.GetConceptLanguageRequest(\n        user_app_id=userDataObject,\n        concept_id=CONCEPT_ID,\n        language=CONCEPT_LANGUAGE\n    ),\n    metadata=metadata\n)\n\nif get_concept_language_response.status.code != status_code_pb2.SUCCESS:\n    print(get_concept_language_response.status)\n    raise Exception(\"Get concept failed, status: \" + get_concept_language_response.status.description)\n    \nprint(get_concept_language_response)",u="################################################################################################\n# In this section, we set the user authentication, app ID, concept ID, and language ID and name.\n# Change these strings to run your own example.\n################################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to whatever concept you want to add its language translation\nCONCEPT_ID = 'charlie'\nLANGUAGE_ID = \"ja\"\nLANGUAGE_NAME = \"\u30dc\u30b9\u30b3\"\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\nget_concept_language_response = stub.PostConceptLanguages(\n    service_pb2.PostConceptLanguagesRequest(\n        user_app_id=userDataObject,\n        concept_id=CONCEPT_ID,\n        concept_languages=[resources_pb2.ConceptLanguage(\n          id=LANGUAGE_ID,\n          name=LANGUAGE_NAME\n        )]\n    ),\n    metadata=metadata\n)\n\nif get_concept_language_response.status.code != status_code_pb2.SUCCESS:\n    print(get_concept_language_response.status)\n    raise Exception(\"Get concept failed, status: \" + get_concept_language_response.status.description)\n    \nprint(get_concept_language_response)",p="########################################################################################\n# In this section, we set the user authentication, app ID, concept ID, and language ID \n# and new name. Change these strings to run your own example.\n########################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to whatever concept you want to update its language translation\nCONCEPT_ID = 'charlie'\nLANGUAGE_ID = \"ja\"\nLANGUAGE_NAME = \"new name\"\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\nget_concept_language_response = stub.PatchConceptLanguages(\n    service_pb2.PatchConceptLanguagesRequest(\n        user_app_id=userDataObject,\n        concept_id=CONCEPT_ID,\n        concept_languages=[resources_pb2.ConceptLanguage(\n          id=LANGUAGE_ID,\n          name=LANGUAGE_NAME\n        )],\n        action=\"overwrite\"\n    ),\n    metadata=metadata\n)\n\nif get_concept_language_response.status.code != status_code_pb2.SUCCESS:\n    print(get_concept_language_response.status)\n    raise Exception(\"Get concept failed, status: \" + get_concept_language_response.status.description)\n    \nprint(get_concept_language_response)",g="\x3c!--index.html file--\x3e\n\n<script>\n    ////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and concept ID.\n    // Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = 'YOUR_USER_ID_HERE';\n    //Your PAT (Personal Access Token) can be found in the Account's Security section\n    const PAT = 'YOUR_PAT_HERE';\n    const APP_ID = 'YOUR_APP_ID_HERE';\n    // Change this to whatever concept you want to see its languages\n    const CONCEPT_ID = 'cat';\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const requestOptions = {\n        method: 'GET',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        },\n    };\n\n    fetch(\"https://api.clarifai.com/v2/users/\" + USER_ID + \"/apps/\" + APP_ID + \"/concepts/\" + CONCEPT_ID + \"/languages\", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n<\/script>",d="\x3c!--index.html file--\x3e\n\n<script>\n    ////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, concept ID and language.\n    // Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = 'YOUR_USER_ID_HERE';\n    //Your PAT (Personal Access Token) can be found in the Account's Security section\n    const PAT = 'YOUR_PAT_HERE';\n    const APP_ID = 'YOUR_APP_ID_HERE';\n    // Change these to whatever concept you want to get its language translation\n    const CONCEPT_ID = 'cat';\n    const CONCEPT_LANGUAGE = \"en\";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const requestOptions = {\n        method: 'GET',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        },\n    };\n\n    fetch(\"https://api.clarifai.com/v2/users/\" + USER_ID + \"/apps/\" + APP_ID + \"/concepts/\" + CONCEPT_ID + \"/languages/\" + CONCEPT_LANGUAGE, requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n<\/script>",h="\x3c!--index.html file--\x3e\n\n<script>\n    ///////////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, concept ID, and language ID and name.\n    // Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = 'YOUR_USER_ID_HERE';\n    // Your PAT (Personal Access Token) can be found in the Account's Security section\n    const PAT = 'YOUR_PAT_HERE';\n    const APP_ID = 'YOUR_APP_ID_HERE';\n    // Change these to whatever concept you want to add its language translation\n    const CONCEPT_ID = 'charlie';\n    const LANGUAGE_ID = \"ja\";\n    const LANGUAGE_NAME = \"\u30dc\u30b9\u30b3\";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        \"user_app_id\": {\n            \"user_id\": USER_ID,\n            \"app_id\": APP_ID\n        },\n        \"concept_languages\": [\n            {\n                \"id\": LANGUAGE_ID,\n                \"name\": LANGUAGE_NAME\n            }\n        ]\n    });\n\n    const requestOptions = {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        },\n        body: raw\n    };\n\n    fetch(\"https://api.clarifai.com/v2/concepts/\" + CONCEPT_ID + \"/languages\", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n<\/script>",_='\x3c!--index.html file--\x3e\n\n<script>\n    /////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, concept ID, and language ID \n    // and new name. Change these strings to run your own example.\n    /////////////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = \'YOUR_USER_ID_HERE\';\n    // Your PAT (Personal Access Token) can be found in the Account\'s Security section\n    const PAT = \'YOUR_PAT_HERE\';\n    const APP_ID = \'YOUR_APP_ID_HERE\';\n    // Change these to whatever concept you want to update its language translation\n    const CONCEPT_ID = \'charlie\';\n    const LANGUAGE_ID = "ja";\n    const LANGUAGE_NAME = "new name";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        "user_app_id": {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        "concept_languages": [\n            {\n                "id": LANGUAGE_ID,\n                "name": LANGUAGE_NAME\n            }\n        ],\n        "action": "overwrite"\n    });\n\n    const requestOptions = {\n        method: \'PATCH\',\n        headers: {\n            \'Accept\': \'application/json\',\n            \'Authorization\': \'Key \' + PAT\n        },\n        body: raw\n    };\n\n    fetch("https://api.clarifai.com/v2/concepts/" + CONCEPT_ID + "/languages", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log(\'error\', error));\n<\/script>',A='//index.js file\n\n////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and concept ID.\n// Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n// Change this to whatever concept you want to see its languages\nconst CONCEPT_ID = \'cat\';\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.ListConceptLanguages(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        concept_id: CONCEPT_ID\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("List concepts failed, status: " + response.status.description);\n        }\n        for (const languages of response.concept_languages) {\n            console.log(languages)\n        }\n    }\n);',E='//index.js file\n\n////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, concept ID and language.\n// Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n// Change these to whatever concept you want to get its language translation\nconst CONCEPT_ID = \'cat\';\nconst CONCEPT_LANGUAGE = "en";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.GetConceptLanguage(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        concept_id: CONCEPT_ID,\n        language: CONCEPT_LANGUAGE\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Get concepts failed, status: " + response.status.description);\n        }\n        console.log(response.concept_language);\n    }\n);',C='//index.js file\n\n///////////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, concept ID, and language ID and name.\n// Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n// Change these to whatever concept you want to add its language translation\nconst CONCEPT_ID = \'charlie\';\nconst LANGUAGE_ID = "ja";\nconst LANGUAGE_NAME = "\u30dc\u30b9\u30b3";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PostConceptLanguages(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        concept_id: CONCEPT_ID,\n        concept_languages: [\n            {\n                id: LANGUAGE_ID,\n                name: LANGUAGE_NAME\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Get concepts failed, status: " + response.status.description);\n        }\n    }\n);',f='//index.js file\n\n/////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, concept ID, and language ID\n// and new name. Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n// Change these to whatever concept you want to update its language translation\nconst CONCEPT_ID = \'charlie\';\nconst LANGUAGE_ID = "ja";\nconst LANGUAGE_NAME = "new name";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PatchConceptLanguages(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        action: "overwrite",\n        concept_id: CONCEPT_ID,\n        concept_languages: [\n            {\n                id: LANGUAGE_ID,\n                name: LANGUAGE_NAME\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Get concepts failed, status: " + response.status.description);\n        }\n    }\n);',I='package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    ////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and concept ID.\n    // Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change this to whatever concept you want to see its languages\n    static final String CONCEPT_ID = "charlie";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\t\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiConceptLanguageResponse listConceptLanguagesResponse = stub.listConceptLanguages(\n            ListConceptLanguagesRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .setConceptId(CONCEPT_ID)\n            .build()\n        );\n\n        if (listConceptLanguagesResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("List concept languages failed, status: " + listConceptLanguagesResponse.getStatus());\n        }\n\n        System.out.println(listConceptLanguagesResponse);\n\n    }\n\n}',P='package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    //////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, concept ID and language.\n    // Change these strings to run your own example.\n    /////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to whatever concept you want to get its language translation\n    static final String CONCEPT_ID = "charlie";\n    static final String CONCEPT_LANGUAGE = "ja";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\t\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        SingleConceptLanguageResponse getConceptLanguageResponse = stub.getConceptLanguage(\n            GetConceptLanguageRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .setConceptId(CONCEPT_ID)\n            .setLanguage(CONCEPT_LANGUAGE)\n            .build()\n        );\n\n        if (getConceptLanguageResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Get concept languages failed, status: " + getConceptLanguageResponse.getStatus());\n        }\n\n        System.out.println(getConceptLanguageResponse);\n    }\n\n}',D='package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    ///////////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, concept ID, and language ID and name. \n    // Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to whatever concept you want to add its language translation\n    static final String CONCEPT_ID = "charlie";\n    static final String LANGUAGE_ID = "ja";\n    static final String LANGUAGE_NAME = "\u30dc\u30b9\u30b3";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\t\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiConceptLanguageResponse postConceptLanguageResponse = stub.postConceptLanguages(\n            PostConceptLanguagesRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .setConceptId(CONCEPT_ID)\n            .addConceptLanguages(ConceptLanguage.newBuilder().setId(LANGUAGE_ID).setName(LANGUAGE_NAME))\n            .build()\n        );\n\n        if (postConceptLanguageResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post concept languages failed, status: " + postConceptLanguageResponse.getStatus());\n        }\n\n        System.out.println(postConceptLanguageResponse);\n\n    }\n\n}',T='package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    ///////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, concept ID, and language ID \n    // and new name. Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to whatever concept you want to update its language translation\n    static final String CONCEPT_ID = "charlie";\n    static final String LANGUAGE_ID = "ja";\n    static final String LANGUAGE_NAME = "new name";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\t\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiConceptLanguageResponse patchConceptLanguageResponse = stub.patchConceptLanguages(\n            PatchConceptLanguagesRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .setAction("overwrite")\n            .setConceptId(CONCEPT_ID)\n            .addConceptLanguages(ConceptLanguage.newBuilder().setId(LANGUAGE_ID).setName(LANGUAGE_NAME))\n            .build()\n        );\n\n        if (patchConceptLanguageResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Update concept languages failed, status: " + patchConceptLanguageResponse.getStatus());\n        }\n\n        System.out.println(patchConceptLanguageResponse);\n\n    }\n\n}',m='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and concept ID.\n// Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change this to whatever concept you want to see its languages\n$CONCEPT_ID = "cat";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\ListConceptLanguagesRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->ListConceptLanguages(\n        // The request object carries the request along with the request status and other metadata related to the request itself\n        new ListConceptLanguagesRequest([\n            "user_app_id" => $userDataObject,\n            "concept_id"  => $CONCEPT_ID           \n        ]),\n        $metadata\n    )->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\nprint $response->serializeToJsonString();\n\n?>\n',N='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, concept ID and language.\n// Change these strings to run your own example.\n///////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change these to whatever concept you want to get its language translation\n$CONCEPT_ID = \'cat\';\n$CONCEPT_LANGUAGE = "en";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\GetConceptLanguageRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->GetConceptLanguage(\n        // The request object carries the request along with the request status and other metadata related to the request itself\n        new GetConceptLanguageRequest([\n            "user_app_id" => $userDataObject,\n            "concept_id"  => $CONCEPT_ID,\n            "language"   => $CONCEPT_LANGUAGE       \n        ]),\n        $metadata\n    )->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\nprint $response->serializeToJsonString();\n\n?>\n',R='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n///////////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, concept ID, and language ID and name.\n// Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change these to whatever concept you want to add its language translation\n$CONCEPT_ID = "charlie";\n$LANGUAGE_ID = "ja";\n$LANGUAGE_NAME = "\u30dc\u30b9\u30b3";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\PostConceptLanguagesRequest;\nuse Clarifai\\Api\\ConceptLanguage;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PostConceptLanguages(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new PostConceptLanguagesRequest([\n        "user_app_id" => $userDataObject,\n        "concept_id"  => $CONCEPT_ID,\n        "concept_languages" => [\n            new ConceptLanguage([\n                "id" => $LANGUAGE_ID,\n                "name" => $LANGUAGE_NAME\n            ])\n        ]\n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\nprint $response->serializeToJsonString();\n\n?>',S='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n/////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, concept ID, and language ID \n// and new name. Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change these to whatever concept you want to update its language translation\n$CONCEPT_ID = "charlie";\n$LANGUAGE_ID = "ja";\n$LANGUAGE_NAME = "new name";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\PatchConceptLanguagesRequest;\nuse Clarifai\\Api\\ConceptLanguage;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PatchConceptLanguages(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new PatchConceptLanguagesRequest([\n        "user_app_id" => $userDataObject,\n        "concept_id"  => $CONCEPT_ID,\n        "concept_languages" => [\n            new ConceptLanguage([\n                "id" => $LANGUAGE_ID,\n                "name" => $LANGUAGE_NAME\n            ])\n            ],\n        "action" => "overwrite"\n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\nprint $response->serializeToJsonString();\n\n?>',x='curl -X GET "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/concepts/YOUR_CONCEPT_ID_HERE/languages" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\',O='curl -X GET "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/concepts/YOUR_CONCEPT_ID_HERE/languages/LANGUAGE_ID_HERE" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  ',U='curl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/concepts/YOUR_CONCEPT_ID_HERE/languages" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "concept_languages": [\n      {\n        "id": "LANGUAGE_ID_HERE",\n        "name": "LANGUAGE_NAME_HERE"\n      }\n      ]\n  }\' ',b='curl -X PATCH "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/concepts/YOUR_CONCEPT_ID_HERE/languages" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "concept_languages": [\n      {\n        "id": "LANGUAGE_ID_HERE",\n        "name": "LANGUAGE_NAME_HERE"\n      }\n      ],\n        "action": "overwrite"\n  }\' ',w='status {\n    code: SUCCESS\n    description: "Ok"\n    req_id: "e3d3b16eccf82d3b5563a0a01eebc579"\n  }\n  concept_languages {\n    id: "en"\n    name: "Cat Name"\n  } ',j='status {\n    code: SUCCESS\n    description: "Ok"\n    req_id: "ef625131675ba87841983c6e7f654e39"\n  }\n  concept_language {\n    id: "en"\n    name: "Cat Name"\n  } ',L='status {\n    code: SUCCESS\n    description: "Ok"\n    req_id: "c5054cc812539059340a2275c3cb7cd5"\n  }\n  concept_languages {\n    id: "ja"\n    name: "\\343\\203\\234\\343\\202\\271\\343\\202\\263"\n  }',y='status {\n    code: SUCCESS\n    description: "Ok"\n    req_id: "779d702cbb303bcce4e469eb1d3552c2"\n  }\n  concept_languages {\n    id: "ja"\n    name: "new name"\n  }',G={description:"Multilingual support in Clarifai",sidebar_position:2},v="Languages",H={id:"api-guide/concepts/languages",title:"Languages",description:"Multilingual support in Clarifai",source:"@site/docs/api-guide/concepts/languages.md",sourceDirName:"api-guide/concepts",slug:"/api-guide/concepts/languages",permalink:"/api-guide/concepts/languages",draft:!1,unlisted:!1,editUrl:"https://github.com/Clarifai/docs/blob/main/docs/api-guide/concepts/languages.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{description:"Multilingual support in Clarifai",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Create, Get, Update, Delete",permalink:"/api-guide/concepts/create-get-update"},next:{title:"Search by Concept",permalink:"/api-guide/concepts/search-by-concept"}},Y={},$=[{value:"Supported Languages",id:"supported-languages",level:2},{value:"Default Language",id:"default-language",level:2},{value:"List Language Translations by Concept ID",id:"list-language-translations-by-concept-id",level:2},{value:"Get Specific Language Translation for a Concept",id:"get-specific-language-translation-for-a-concept",level:2},{value:"Add a Language Translation for a Concept",id:"add-a-language-translation-for-a-concept",level:2},{value:"Update a Language Translation for a Concept",id:"update-a-language-translation-for-a-concept",level:2}];function q(n){const e={a:"a",admonition:"admonition",h1:"h1",h2:"h2",img:"img",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.R)(),...n.components},{Details:G}=e;return G||function(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.h1,{id:"languages",children:"Languages"}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"Multilingual support in Clarifai"})}),"\n",(0,a.jsx)("hr",{}),"\n",(0,a.jsx)(e.p,{children:"The Clarifai API supports many languages in addition to English. These are represented as translations of names of concepts so that when you search by concept name or get predictions from a model's concepts, you can utilize the language of your choice."}),"\n",(0,a.jsx)(e.h2,{id:"supported-languages",children:"Supported Languages"}),"\n",(0,a.jsx)(e.p,{children:"The currently supported languages are listed below."}),"\n",(0,a.jsxs)(e.table,{children:[(0,a.jsx)(e.thead,{children:(0,a.jsxs)(e.tr,{children:[(0,a.jsx)(e.th,{style:{textAlign:"left"},children:"Language"}),(0,a.jsx)(e.th,{style:{textAlign:"left"},children:"Code"})]})}),(0,a.jsxs)(e.tbody,{children:[(0,a.jsxs)(e.tr,{children:[(0,a.jsx)(e.td,{style:{textAlign:"left"},children:"Arabic (ar)"}),(0,a.jsx)(e.td,{style:{textAlign:"left"},children:"ar"})]}),(0,a.jsxs)(e.tr,{children:[(0,a.jsx)(e.td,{style:{textAlign:"left"},children:"Bengali (bn)"}),(0,a.jsx)(e.td,{style:{textAlign:"left"},children:"bn"})]}),(0,a.jsxs)(e.tr,{children:[(0,a.jsx)(e.td,{style:{textAlign:"left"},children:"Danish (da)"}),(0,a.jsx)(e.td,{style:{textAlign:"left"},children:"da"})]}),(0,a.jsxs)(e.tr,{children:[(0,a.jsx)(e.td,{style:{textAlign:"left"},children:"German (de)"}),(0,a.jsx)(e.td,{style:{textAlign:"left"},children:"de"})]}),(0,a.jsxs)(e.tr,{children:[(0,a.jsx)(e.td,{style:{textAlign:"left"},children:"English (en)"}),(0,a.jsx)(e.td,{style:{textAlign:"left"},children:"en"})]}),(0,a.jsxs)(e.tr,{children:[(0,a.jsx)(e.td,{style:{textAlign:"left"},children:"Spanish (es)"}),(0,a.jsx)(e.td,{style:{textAlign:"left"},children:"es"})]}),(0,a.jsxs)(e.tr,{children:[(0,a.jsx)(e.td,{style:{textAlign:"left"},children:"Finnish (fi)"}),(0,a.jsx)(e.td,{style:{textAlign:"left"},children:"fi"})]}),(0,a.jsxs)(e.tr,{children:[(0,a.jsx)(e.td,{style:{textAlign:"left"},children:"French (fr)"}),(0,a.jsx)(e.td,{style:{textAlign:"left"},children:"fr"})]}),(0,a.jsxs)(e.tr,{children:[(0,a.jsx)(e.td,{style:{textAlign:"left"},children:"Hindi (hi)"}),(0,a.jsx)(e.td,{style:{textAlign:"left"},children:"hi"})]}),(0,a.jsxs)(e.tr,{children:[(0,a.jsx)(e.td,{style:{textAlign:"left"},children:"Hungarian (hu)"}),(0,a.jsx)(e.td,{style:{textAlign:"left"},children:"hu"})]}),(0,a.jsxs)(e.tr,{children:[(0,a.jsx)(e.td,{style:{textAlign:"left"},children:"Italian (it)"}),(0,a.jsx)(e.td,{style:{textAlign:"left"},children:"it"})]}),(0,a.jsxs)(e.tr,{children:[(0,a.jsx)(e.td,{style:{textAlign:"left"},children:"Japanese (ja)"}),(0,a.jsx)(e.td,{style:{textAlign:"left"},children:"ja"})]}),(0,a.jsxs)(e.tr,{children:[(0,a.jsx)(e.td,{style:{textAlign:"left"},children:"Korean (ko)"}),(0,a.jsx)(e.td,{style:{textAlign:"left"},children:"ko"})]}),(0,a.jsxs)(e.tr,{children:[(0,a.jsx)(e.td,{style:{textAlign:"left"},children:"Dutch (nl)"}),(0,a.jsx)(e.td,{style:{textAlign:"left"},children:"nl"})]}),(0,a.jsxs)(e.tr,{children:[(0,a.jsx)(e.td,{style:{textAlign:"left"},children:"Norwegian (no)"}),(0,a.jsx)(e.td,{style:{textAlign:"left"},children:"no"})]}),(0,a.jsxs)(e.tr,{children:[(0,a.jsx)(e.td,{style:{textAlign:"left"},children:"Punjabi (pa)"}),(0,a.jsx)(e.td,{style:{textAlign:"left"},children:"pa"})]}),(0,a.jsxs)(e.tr,{children:[(0,a.jsx)(e.td,{style:{textAlign:"left"},children:"Polish (pl)"}),(0,a.jsx)(e.td,{style:{textAlign:"left"},children:"pl"})]}),(0,a.jsxs)(e.tr,{children:[(0,a.jsx)(e.td,{style:{textAlign:"left"},children:"Portuguese (pt)"}),(0,a.jsx)(e.td,{style:{textAlign:"left"},children:"pt"})]}),(0,a.jsxs)(e.tr,{children:[(0,a.jsx)(e.td,{style:{textAlign:"left"},children:"Russian (ru)"}),(0,a.jsx)(e.td,{style:{textAlign:"left"},children:"ru"})]}),(0,a.jsxs)(e.tr,{children:[(0,a.jsx)(e.td,{style:{textAlign:"left"},children:"Swedish (sv)"}),(0,a.jsx)(e.td,{style:{textAlign:"left"},children:"sv"})]}),(0,a.jsxs)(e.tr,{children:[(0,a.jsx)(e.td,{style:{textAlign:"left"},children:"Turkish (tr)"}),(0,a.jsx)(e.td,{style:{textAlign:"left"},children:"tr"})]}),(0,a.jsxs)(e.tr,{children:[(0,a.jsx)(e.td,{style:{textAlign:"left"},children:"Chinese Simplified (zh)"}),(0,a.jsx)(e.td,{style:{textAlign:"left"},children:"zh"})]}),(0,a.jsxs)(e.tr,{children:[(0,a.jsx)(e.td,{style:{textAlign:"left"},children:"Chinese Traditional (zh-TW)"}),(0,a.jsx)(e.td,{style:{textAlign:"left"},children:"zh-TW"})]})]})]}),"\n",(0,a.jsx)(e.h2,{id:"default-language",children:"Default Language"}),"\n",(0,a.jsx)(e.p,{children:"When you create a new Application, you must specify a default language. This will be the default language concepts are returned in when you do not explicitly set a language in an API request."}),"\n",(0,a.jsx)(e.p,{children:"You cannot change the default language. You can however change languages per request."}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.img,{alt:"create new app",src:t(93239).A+"",width:"1918",height:"749"})}),"\n","\n","\n","\n","\n","\n","\n","\n",(0,a.jsx)(e.h2,{id:"list-language-translations-by-concept-id",children:"List Language Translations by Concept ID"}),"\n",(0,a.jsxs)(e.p,{children:["You can see all the language translations for a given concept ID with a GET call. This call supports ",(0,a.jsx)(e.a,{href:"https://docs.clarifai.com/api-guide/advanced-topics/pagination/",children:"pagination"}),"."]}),"\n",(0,a.jsx)(e.p,{children:"Below is an example of how you would list language translations by concept ID."}),"\n",(0,a.jsx)(e.admonition,{type:"info",children:(0,a.jsxs)(e.p,{children:["The initialization code used in the following examples is outlined in detail on the ",(0,a.jsx)(e.a,{href:"https://docs.clarifai.com/api-guide/api-overview/api-clients/#client-installation-instructions",children:"client installation page."})]})}),"\n",(0,a.jsxs)(i.A,{children:[(0,a.jsx)(r.A,{value:"grpc_python",label:"gRPC Python",children:(0,a.jsx)(c.A,{className:"language-python",children:o})}),(0,a.jsx)(r.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,a.jsx)(c.A,{className:"language-javascript",children:g})}),(0,a.jsx)(r.A,{value:"grpc_nodejs",label:"gRPC NodeJS",children:(0,a.jsx)(c.A,{className:"language-javascript",children:A})}),(0,a.jsx)(r.A,{value:"grpc_java",label:"gRPC Java",children:(0,a.jsx)(c.A,{className:"language-java",children:I})}),(0,a.jsx)(r.A,{value:"grpc_php",label:"gRPC PHP",children:(0,a.jsx)(c.A,{className:"language-php",children:m})}),(0,a.jsx)(r.A,{value:"curl",label:"cURL",children:(0,a.jsx)(c.A,{className:"language-bash",children:x})})]}),"\n",(0,a.jsxs)(G,{children:[(0,a.jsx)("summary",{children:"JSON Output Example"}),(0,a.jsx)(c.A,{className:"language-js",children:w})]}),"\n",(0,a.jsx)(e.h2,{id:"get-specific-language-translation-for-a-concept",children:"Get Specific Language Translation for a Concept"}),"\n",(0,a.jsx)(e.p,{children:"Below is an example of how to get a single language translation for a concept. You can get it by the language code and concept ID."}),"\n",(0,a.jsxs)(i.A,{children:[(0,a.jsx)(r.A,{value:"grpc_python",label:"gRPC Python",children:(0,a.jsx)(c.A,{className:"language-python",children:l})}),(0,a.jsx)(r.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,a.jsx)(c.A,{className:"language-javascript",children:d})}),(0,a.jsx)(r.A,{value:"grpc_nodejs",label:"gRPC NodeJS",children:(0,a.jsx)(c.A,{className:"language-javascript",children:E})}),(0,a.jsx)(r.A,{value:"grpc_java",label:"gRPC Java",children:(0,a.jsx)(c.A,{className:"language-java",children:P})}),(0,a.jsx)(r.A,{value:"grpc_php",label:"gRPC PHP",children:(0,a.jsx)(c.A,{className:"language-php",children:N})}),(0,a.jsx)(r.A,{value:"curl",label:"cURL",children:(0,a.jsx)(c.A,{className:"language-bash",children:O})})]}),"\n",(0,a.jsxs)(G,{children:[(0,a.jsx)("summary",{children:"JSON Output Example"}),(0,a.jsx)(c.A,{className:"language-js",children:j})]}),"\n",(0,a.jsx)(e.h2,{id:"add-a-language-translation-for-a-concept",children:"Add a Language Translation for a Concept"}),"\n",(0,a.jsx)(e.p,{children:"Below is an example of how to create a language translation for a concept by POSTing that language translation."}),"\n",(0,a.jsxs)(i.A,{children:[(0,a.jsx)(r.A,{value:"grpc_python",label:"gRPC Python",children:(0,a.jsx)(c.A,{className:"language-python",children:u})}),(0,a.jsx)(r.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,a.jsx)(c.A,{className:"language-javascript",children:h})}),(0,a.jsx)(r.A,{value:"grpc_nodejs",label:"gRPC NodeJS",children:(0,a.jsx)(c.A,{className:"language-javascript",children:C})}),(0,a.jsx)(r.A,{value:"grpc_java",label:"gRPC Java",children:(0,a.jsx)(c.A,{className:"language-java",children:D})}),(0,a.jsx)(r.A,{value:"grpc_php",label:"gRPC PHP",children:(0,a.jsx)(c.A,{className:"language-php",children:R})}),(0,a.jsx)(r.A,{value:"curl",label:"cURL",children:(0,a.jsx)(c.A,{className:"language-bash",children:U})})]}),"\n",(0,a.jsxs)(G,{children:[(0,a.jsx)("summary",{children:"JSON Output Example"}),(0,a.jsx)(c.A,{className:"language-js",children:L})]}),"\n",(0,a.jsx)(e.h2,{id:"update-a-language-translation-for-a-concept",children:"Update a Language Translation for a Concept"}),"\n",(0,a.jsx)(e.p,{children:"Below is an example of how to update a language translation for a concept by PATCHing that language translation."}),"\n",(0,a.jsxs)(i.A,{children:[(0,a.jsx)(r.A,{value:"grpc_python",label:"gRPC Python",children:(0,a.jsx)(c.A,{className:"language-python",children:p})}),(0,a.jsx)(r.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,a.jsx)(c.A,{className:"language-javascript",children:_})}),(0,a.jsx)(r.A,{value:"grpc_nodejs",label:"gRPC NodeJS",children:(0,a.jsx)(c.A,{className:"language-javascript",children:f})}),(0,a.jsx)(r.A,{value:"grpc_java",label:"gRPC Java",children:(0,a.jsx)(c.A,{className:"language-java",children:T})}),(0,a.jsx)(r.A,{value:"grpc_php",label:"gRPC PHP",children:(0,a.jsx)(c.A,{className:"language-php",children:S})}),(0,a.jsx)(r.A,{value:"curl",label:"cURL",children:(0,a.jsx)(c.A,{className:"language-bash",children:b})})]}),"\n",(0,a.jsxs)(G,{children:[(0,a.jsx)("summary",{children:"JSON Output Example"}),(0,a.jsx)(c.A,{className:"language-js",children:y})]})]})}function k(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(q,{...n})}):q(n)}},19365:(n,e,t)=>{t.d(e,{A:()=>r});t(96540);var a=t(18215);const s={tabItem:"tabItem_Ymn6"};var i=t(74848);function r(n){let{children:e,hidden:t,className:r}=n;return(0,i.jsx)("div",{role:"tabpanel",className:(0,a.A)(s.tabItem,r),hidden:t,children:e})}},11470:(n,e,t)=>{t.d(e,{A:()=>D});var a=t(96540),s=t(18215),i=t(23104),r=t(56347),c=t(205),o=t(57485),l=t(31682),u=t(70679);function p(n){return a.Children.toArray(n).filter((n=>"\n"!==n)).map((n=>{if(!n||(0,a.isValidElement)(n)&&function(n){const{props:e}=n;return!!e&&"object"==typeof e&&"value"in e}(n))return n;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof n.type?n.type:n.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function g(n){const{values:e,children:t}=n;return(0,a.useMemo)((()=>{const n=e??function(n){return p(n).map((n=>{let{props:{value:e,label:t,attributes:a,default:s}}=n;return{value:e,label:t,attributes:a,default:s}}))}(t);return function(n){const e=(0,l.X)(n,((n,e)=>n.value===e.value));if(e.length>0)throw new Error(`Docusaurus error: Duplicate values "${e.map((n=>n.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(n),n}),[e,t])}function d(n){let{value:e,tabValues:t}=n;return t.some((n=>n.value===e))}function h(n){let{queryString:e=!1,groupId:t}=n;const s=(0,r.W6)(),i=function(n){let{queryString:e=!1,groupId:t}=n;if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:e,groupId:t});return[(0,o.aZ)(i),(0,a.useCallback)((n=>{if(!i)return;const e=new URLSearchParams(s.location.search);e.set(i,n),s.replace({...s.location,search:e.toString()})}),[i,s])]}function _(n){const{defaultValue:e,queryString:t=!1,groupId:s}=n,i=g(n),[r,o]=(0,a.useState)((()=>function(n){let{defaultValue:e,tabValues:t}=n;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!d({value:e,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${t.map((n=>n.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const a=t.find((n=>n.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:e,tabValues:i}))),[l,p]=h({queryString:t,groupId:s}),[_,A]=function(n){let{groupId:e}=n;const t=function(n){return n?`docusaurus.tab.${n}`:null}(e),[s,i]=(0,u.Dv)(t);return[s,(0,a.useCallback)((n=>{t&&i.set(n)}),[t,i])]}({groupId:s}),E=(()=>{const n=l??_;return d({value:n,tabValues:i})?n:null})();(0,c.A)((()=>{E&&o(E)}),[E]);return{selectedValue:r,selectValue:(0,a.useCallback)((n=>{if(!d({value:n,tabValues:i}))throw new Error(`Can't select invalid tab value=${n}`);o(n),p(n),A(n)}),[p,A,i]),tabValues:i}}var A=t(92303);const E={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var C=t(74848);function f(n){let{className:e,block:t,selectedValue:a,selectValue:r,tabValues:c}=n;const o=[],{blockElementScrollPositionUntilNextRender:l}=(0,i.a_)(),u=n=>{const e=n.currentTarget,t=o.indexOf(e),s=c[t].value;s!==a&&(l(e),r(s))},p=n=>{let e=null;switch(n.key){case"Enter":u(n);break;case"ArrowRight":{const t=o.indexOf(n.currentTarget)+1;e=o[t]??o[0];break}case"ArrowLeft":{const t=o.indexOf(n.currentTarget)-1;e=o[t]??o[o.length-1];break}}e?.focus()};return(0,C.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":t},e),children:c.map((n=>{let{value:e,label:t,attributes:i}=n;return(0,C.jsx)("li",{role:"tab",tabIndex:a===e?0:-1,"aria-selected":a===e,ref:n=>o.push(n),onKeyDown:p,onClick:u,...i,className:(0,s.A)("tabs__item",E.tabItem,i?.className,{"tabs__item--active":a===e}),children:t??e},e)}))})}function I(n){let{lazy:e,children:t,selectedValue:s}=n;const i=(Array.isArray(t)?t:[t]).filter(Boolean);if(e){const n=i.find((n=>n.props.value===s));return n?(0,a.cloneElement)(n,{className:"margin-top--md"}):null}return(0,C.jsx)("div",{className:"margin-top--md",children:i.map(((n,e)=>(0,a.cloneElement)(n,{key:e,hidden:n.props.value!==s})))})}function P(n){const e=_(n);return(0,C.jsxs)("div",{className:(0,s.A)("tabs-container",E.tabList),children:[(0,C.jsx)(f,{...e,...n}),(0,C.jsx)(I,{...e,...n})]})}function D(n){const e=(0,A.A)();return(0,C.jsx)(P,{...n,children:p(n.children)},String(e))}},93239:(n,e,t)=>{t.d(e,{A:()=>a});const a=t.p+"assets/images/create-new-app-new-7cbf2db984b3a40538c5dbec7ed09773.png"}}]);
"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[4410],{11470:(e,n,t)=>{t.d(n,{A:()=>w});var o=t(96540),s=t(18215),a=t(17559),r=t(23104),i=t(56347),l=t(205),c=t(57485),p=t(31682),u=t(70679);function d(e){return o.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,o.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function _(e){const{values:n,children:t}=e;return(0,o.useMemo)(()=>{const e=n??function(e){return d(e).map(({props:{value:e,label:n,attributes:t,default:o}})=>({value:e,label:n,attributes:t,default:o}))}(t);return function(e){const n=(0,p.XI)(e,(e,n)=>e.value===n.value);if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[n,t])}function h({value:e,tabValues:n}){return n.some(n=>n.value===e)}function E({queryString:e=!1,groupId:n}){const t=(0,i.W6)(),s=function({queryString:e=!1,groupId:n}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,c.aZ)(s),(0,o.useCallback)(e=>{if(!s)return;const n=new URLSearchParams(t.location.search);n.set(s,e),t.replace({...t.location,search:n.toString()})},[s,t])]}function m(e){const{defaultValue:n,queryString:t=!1,groupId:s}=e,a=_(e),[r,i]=(0,o.useState)(()=>function({defaultValue:e,tabValues:n}){if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!h({value:e,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const t=n.find(e=>e.default)??n[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:a})),[c,p]=E({queryString:t,groupId:s}),[d,m]=function({groupId:e}){const n=function(e){return e?`docusaurus.tab.${e}`:null}(e),[t,s]=(0,u.Dv)(n);return[t,(0,o.useCallback)(e=>{n&&s.set(e)},[n,s])]}({groupId:s}),f=(()=>{const e=c??d;return h({value:e,tabValues:a})?e:null})();(0,l.A)(()=>{f&&i(f)},[f]);return{selectedValue:r,selectValue:(0,o.useCallback)(e=>{if(!h({value:e,tabValues:a}))throw new Error(`Can't select invalid tab value=${e}`);i(e),p(e),m(e)},[p,m,a]),tabValues:a}}var f=t(92303);const I={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var D=t(74848);function R({className:e,block:n,selectedValue:t,selectValue:o,tabValues:a}){const i=[],{blockElementScrollPositionUntilNextRender:l}=(0,r.a_)(),c=e=>{const n=e.currentTarget,s=i.indexOf(n),r=a[s].value;r!==t&&(l(n),o(r))},p=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const t=i.indexOf(e.currentTarget)+1;n=i[t]??i[0];break}case"ArrowLeft":{const t=i.indexOf(e.currentTarget)-1;n=i[t]??i[i.length-1];break}}n?.focus()};return(0,D.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":n},e),children:a.map(({value:e,label:n,attributes:o})=>(0,D.jsx)("li",{role:"tab",tabIndex:t===e?0:-1,"aria-selected":t===e,ref:e=>{i.push(e)},onKeyDown:p,onClick:c,...o,className:(0,s.A)("tabs__item",I.tabItem,o?.className,{"tabs__item--active":t===e}),children:n??e},e))})}function P({lazy:e,children:n,selectedValue:t}){const a=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){const e=a.find(e=>e.props.value===t);return e?(0,o.cloneElement)(e,{className:(0,s.A)("margin-top--md",e.props.className)}):null}return(0,D.jsx)("div",{className:"margin-top--md",children:a.map((e,n)=>(0,o.cloneElement)(e,{key:n,hidden:e.props.value!==t}))})}function O(e){const n=m(e);return(0,D.jsxs)("div",{className:(0,s.A)(a.G.tabs.container,"tabs-container",I.tabList),children:[(0,D.jsx)(R,{...n,...e}),(0,D.jsx)(P,{...n,...e})]})}function w(e){const n=(0,f.A)();return(0,D.jsx)(O,{...e,children:d(e.children)},String(n))}},19365:(e,n,t)=>{t.d(n,{A:()=>r});t(96540);var o=t(18215);const s={tabItem:"tabItem_Ymn6"};var a=t(74848);function r({children:e,hidden:n,className:t}){return(0,a.jsx)("div",{role:"tabpanel",className:(0,o.A)(s.tabItem,t),hidden:n,children:e})}},76405:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>x,contentTitle:()=>U,default:()=>k,frontMatter:()=>N,metadata:()=>o,toc:()=>v});const o=JSON.parse('{"id":"create/workflows/examples/prompter-model","title":"Custom Prompter Model","description":"Learn how to integrate a prompter model into an LLM workflow","source":"@site/docs/create/workflows/examples/prompter-model.md","sourceDirName":"create/workflows/examples","slug":"/create/workflows/examples/prompter-model","permalink":"/create/workflows/examples/prompter-model","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"description":"Learn how to integrate a prompter model into an LLM workflow","sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"Custom KNN Face Classifier","permalink":"/create/workflows/examples/knn-classifier"},"next":{"title":"Agent System Operators","permalink":"/create/agent-system-operators/"}}');var s=t(74848),a=t(28453),r=t(11470),i=t(19365),l=t(88149);const c="##########################################################################################\n# In this section, we set the user authentication, app ID, model ID, and model type ID.\n# Change these strings to run your own example.\n#########################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to create your own model\nMODEL_ID = 'my-prompter-model'\nMODEL_TYPE_ID = 'prompter'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\npost_models_response = stub.PostModels(\n    service_pb2.PostModelsRequest(\n        user_app_id=userDataObject,\n        models=[\n            resources_pb2.Model(\n                id=MODEL_ID,\n                model_type_id=MODEL_TYPE_ID             \n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif post_models_response.status.code != status_code_pb2.SUCCESS:\n    print(post_models_response.status)\n    raise Exception(\"Post models failed, status: \" + post_models_response.status.description)\n",p="\x3c!--index.html file--\x3e\n\n<script>\n    ///////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, model ID, and model type ID.\n    // Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = 'YOUR_USER_ID_HERE';\n    // Your PAT (Personal Access Token) can be found in the Account's Security section\n    const PAT = 'YOUR_PAT_HERE';\n    const APP_ID = 'YOUR_APP_ID_HERE';\n    // Change these to create your own model\n    const MODEL_ID = 'my-prompter-model';\n    const MODEL_TYPE_ID = 'prompter';\n    \n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        \"user_app_id\": {\n            \"user_id\": USER_ID,\n            \"app_id\": APP_ID\n        },\n        \"model\": {\n            \"id\": MODEL_ID,\n            \"model_type_id\": MODEL_TYPE_ID         \n        }\n    });\n\n    const requestOptions = {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        },\n        body: raw\n    };\n\n    fetch(\"https://api.clarifai.com/v2/models\", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n\n<\/script>",u='//index.js file\n\n////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, model ID, and model type ID.\n// Change these strings to run your own example.\n///////////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n// Change these to create your own model\nconst MODEL_ID = \'my-prompter-model\';\nconst MODEL_TYPE_ID = \'prompter\';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PostModels(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        models: [\n            {\n                id: MODEL_ID,\n                model_type_id: MODEL_TYPE_ID               \n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post models failed, status: " + response.status.description);\n        }\n    }\n);',d='package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    ////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, model ID, and model type ID.\n    // Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to create your own model    \n    static final String MODEL_ID = "my-prompter-model";\n    static final String MODEL_TYPE_ID = "prompter";\n    \n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\t\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        SingleModelResponse postModelsResponse = stub.postModels(\n            PostModelsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .addModels(\n                Model.newBuilder()\n                .setId(MODEL_ID)\n                .setModelTypeId(MODEL_TYPE_ID)              \n            ).build()\n        );\n\n        if (postModelsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post models failed, status: " + postModelsResponse.getStatus());\n        }\n\n    }\n\n}',_='curl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/models" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "model": {\n      "id": "my-prompter-model",\n      "model_type_id": "prompter"\n    }\n  }\'',h='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n/////////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, model ID, and model type ID.\n// Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change these to create your own model\n$MODEL_ID = "my-prompter-model";\n$MODEL_TYPE_ID = "prompter";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\Model;\nuse Clarifai\\Api\\PostModelsRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID,\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PostModels(\n        // The request object carries the request along with the request status and other metadata related to the request itself\n        new PostModelsRequest([\n            "user_app_id" => $userDataObject,\n            "models" => [\n                new Model([                    \n                    "id" => $MODEL_ID,\n                    "model_type_id" => $MODEL_TYPE_ID,\n                ]),\n            ],\n        ]),\n        $metadata\n    )->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure\n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription() . " " . $response->getStatus()->getDetails());\n}\n\n?>',E='###############################################################################################\n# In this section, we set the user authentication, app ID, model ID, and prompter details.\n# Change these strings to run your own example.\n###############################################################################################\n\nUSER_ID = "YOUR_USER_ID_HERE"\n# Your PAT (Personal Access Token) can be found in the Account\'s Security section\nPAT = "YOUR_PAT_HERE"\nAPP_ID = "YOUR_APP_ID_HERE"\n# Change these to train your own model\nMODEL_ID = "my-prompter-model"\nPROMPTER_DESCRIPTION = "Positive or negative sentiment classifier prompter"\nPROMPT_TEMPLATE = "Classify whether the sentiment of the given text is positive or negative {data.text.raw}"\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\nfrom google.protobuf.struct_pb2 import Struct\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nparams = Struct()\nparams.update({\n    "prompt_template": PROMPT_TEMPLATE\n    })\n\nmetadata = (("authorization", "Key " + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\npost_model_versions = stub.PostModelVersions(\n    service_pb2.PostModelVersionsRequest(\n        user_app_id=userDataObject,\n        model_id=MODEL_ID,\n        description=PROMPTER_DESCRIPTION,\n        model_versions=[\n            resources_pb2.ModelVersion(\n                output_info=resources_pb2.OutputInfo(params=params)\n            )\n        ],\n    ),\n    metadata=metadata,\n)\n\nif post_model_versions.status.code != status_code_pb2.SUCCESS:\n    print(post_model_versions.status)\n    raise Exception("Post models versions failed, status: " + post_model_versions.status.description)\n\nprint(post_model_versions)\n',m='\x3c!--index.html file--\x3e\n\n<script>\n    ////////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, model ID, and prompter details.\n    // Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = "YOUR_USER_ID_HERE";\n    // Your PAT (Personal Access Token) can be found in the Account\'s Security section\n    const PAT = "YOUR_PAT_HERE";\n    const APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to train your own model\n    const MODEL_ID = "my-prompter-model";\n    const PROMPTER_DESCRIPTION = "Positive or negative sentiment classifier prompter";\n    const PROMPT_TEMPLATE = "Classify whether the sentiment of the given text is positive or negative {data.text.raw}";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        "user_app_id": {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        "description": PROMPTER_DESCRIPTION,\n        "model_versions": [{\n            "output_info": {\n                "params": {\n                    "prompt_template": PROMPT_TEMPLATE\n                }\n            }\n        }]\n\n    });\n\n    const requestOptions = {\n        method: "POST",\n        headers: {\n            "Content-Type": "application/json",\n            "Authorization": "Key " + PAT\n        },\n        body: raw\n    };\n\n    fetch(`https://api.clarifai.com/v2/models/${MODEL_ID}/versions`, requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log("error", error));\n\n<\/script>',f='package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.status.StatusCode;\nimport com.google.protobuf.Struct;\nimport com.google.protobuf.Value;\n\npublic class ClarifaiExample {\n\n    //////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, model ID, and prompter details.\n    // Change these strings to run your own example.\n    /////////////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    // Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to train your own model\n    static final String MODEL_ID = "my-prompter-model";\n    static final String PROMPTER_DESCRIPTION = "Positive or negative sentiment classifier prompter";\n    static final String PROMPT_TEMPLATE = "Classify whether the sentiment of the given text is positive or negative {data.text.raw}";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\t\n\n    public static void main(String[] args) {\n        \n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n                .withCallCredentials(new ClarifaiCallCredentials(PAT));\n        \n        Struct.Builder params = Struct.newBuilder()\n                .putFields("prompt_template", Value.newBuilder().setStringValue(PROMPT_TEMPLATE).build());\n        \n        SingleModelResponse postModelVersionsResponse = stub.postModelVersions(\n                PostModelVersionsRequest.newBuilder()\n                        .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n                        .setModelId(MODEL_ID)\n                        .setDescription(PROMPTER_DESCRIPTION)\n                        .addModelVersions(ModelVersion.newBuilder()\n                                .setOutputInfo(OutputInfo.newBuilder()\n                                        .setParams(params)\n                                )\n                        )\n                        .build()\n        );\n        \n        if (postModelVersionsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post model outputs failed, status: " + postModelVersionsResponse.getStatus());\n        }\n        \n    }\n}\n',I='curl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/models/my-prompter-model/versions" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "description": "Positive or negative sentiment classifier prompter",\n    "model_versions": [{\n       "output_info": {\n          "params": {\n             "prompt_template": "Classify whether the sentiment of the given text is positive or negative {data.text.raw}"\n          }\n       }\n    }]\n}\'',D="########################################################################################\n# In this section, we set the user authentication, app ID, and the details of the new\n# custom workflow. Change these strings to run your own example.\n########################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to create your own custom workflow\nWORKFLOW_ID = 'my-custom-prompter-workflow'\n\nNODE_ID_1 = 'prompter-model'\nPROMPTER_MODEL_ID = 'my-prompter-model'\nPROMPTER_MODEL_USER_ID = 'YOUR_USER_ID_HERE'\nPROMPTER_MODEL_APP_ID = 'my-custom-app'\nPROMPTER_MODEL_VERSION_ID = 'e851fb99a3b14df788ce11accee45c19'\n\nNODE_ID_2 = 'text-to-text'\nLLM_MODEL_ID = 'GPT-4'\nLLM_MODEL_USER_ID = 'openai'\nLLM_MODEL_APP_ID = 'chat-completion'\nLLM_MODEL_VERSION = '5d7a50b44aec4a01a9c492c5a5fcf387'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID) # The userDataObject is required when using a PAT\n\npost_workflows_response = stub.PostWorkflows(\n    service_pb2.PostWorkflowsRequest(\n      user_app_id=userDataObject,  \n      workflows=[\n        resources_pb2.Workflow(\n          id=WORKFLOW_ID,\n          nodes=[\n            resources_pb2.WorkflowNode(\n              id=NODE_ID_1,\n              model=resources_pb2.Model(\n                id=PROMPTER_MODEL_ID,\n                user_id=PROMPTER_MODEL_USER_ID,\n                app_id=PROMPTER_MODEL_APP_ID,\n                model_version=resources_pb2.ModelVersion(\n                  id=PROMPTER_MODEL_VERSION_ID\n                )\n              )\n            ),\n            resources_pb2.WorkflowNode(\n              id=NODE_ID_2,\n              model=resources_pb2.Model(\n                id=LLM_MODEL_ID,\n                user_id=LLM_MODEL_USER_ID,\n                app_id=LLM_MODEL_APP_ID,\n                model_version=resources_pb2.ModelVersion(\n                  id=LLM_MODEL_VERSION\n                )\n              ),\n              node_inputs=[\n                resources_pb2.NodeInput(node_id=NODE_ID_1)\n                ]\n            ),\n          ]\n        )\n      ]\n    ),\n    metadata=metadata\n)               \n\nif post_workflows_response.status.code != status_code_pb2.SUCCESS:\n    print(post_workflows_response.status)\n    raise Exception(\"Post workflows failed, status: \" + post_workflows_response.status.description) \n\nprint(post_workflows_response)\n",R='\x3c!--index.html file--\x3e\n\n<script>\n    //////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the details of the new\n    // custom workflow. Change these strings to run your own example.\n    /////////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = "YOUR_USER_ID_HERE";\n    // Your PAT (Personal Access Token) can be found in the Account\'s Security section\n    const PAT = "YOUR_PAT_HERE";\n    const APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to create your own custom workflow\n    const WORKFLOW_ID = "my-custom-prompter-workflow";\n\n    const NODE_ID_1 = "prompter-model";\n    const PROMPTER_MODEL_ID = "my-prompter-model";\n    const PROMPTER_MODEL_USER_ID = "YOUR_USER_ID_HERE";\n    const PROMPTER_MODEL_APP_ID = "my-custom-app";\n    const PROMPTER_MODEL_VERSION_ID = "e851fb99a3b14df788ce11accee45c19";\n\n    const NODE_ID_2 = "text-to-text";\n    const LLM_MODEL_ID = "GPT-4";\n    const LLM_MODEL_USER_ID = "openai";\n    const LLM_MODEL_APP_ID = "chat-completion";\n    const LLM_MODEL_VERSION = "5d7a50b44aec4a01a9c492c5a5fcf387";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////   \n\n    const raw = JSON.stringify({\n        "user_app_id": {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        "workflows": [{\n            "id": WORKFLOW_ID,\n            "nodes": [\n                {\n                    "id": NODE_ID_1,\n                    "model": {\n                        "id": PROMPTER_MODEL_ID,\n                        "user_id": PROMPTER_MODEL_USER_ID,\n                        "app_id": PROMPTER_MODEL_APP_ID,\n                        "model_version": {\n                            "id": PROMPTER_MODEL_VERSION_ID\n                        }\n                    }\n                },\n                {\n                    "id": NODE_ID_2,\n                    "model": {\n                        "id": LLM_MODEL_ID,\n                        "user_id": LLM_MODEL_USER_ID,\n                        "app_id": LLM_MODEL_APP_ID,\n                        "model_version": {\n                            "id": LLM_MODEL_VERSION\n                        }\n                    },\n                        "node_inputs": [\n                            {\n                                "node_id": NODE_ID_1\n                            }\n                        ]\n                }\n            ]\n        }]\n    });\n\n    const requestOptions = {\n        method: \'POST\',\n        headers: {\n            \'Accept\': \'application/json\',\n            \'Authorization\': \'Key \' + PAT\n        },\n        body: raw\n    };\n\n    fetch(`https://api.clarifai.com/v2/workflows`, requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log(\'error\', error));\n\n<\/script>',P='//index.js file\n\n//////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the details of the new\n// custom workflow. Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = "YOUR_PAT_HERE";\nconst APP_ID = "YOUR_APP_ID_HERE";\n// Change these to create your own custom workflow\nconst WORKFLOW_ID = "my-custom-prompter-workflow";\n\nconst NODE_ID_1 = "prompter-model";\nconst PROMPTER_MODEL_ID = "my-prompter-model";\nconst PROMPTER_MODEL_USER_ID = "YOUR_USER_ID_HERE";\nconst PROMPTER_MODEL_APP_ID = "my-custom-app";\nconst PROMPTER_MODEL_VERSION_ID = "e851fb99a3b14df788ce11accee45c19";\n\nconst NODE_ID_2 = "text-to-text";\nconst LLM_MODEL_ID = "GPT-4";\nconst LLM_MODEL_USER_ID = "openai";\nconst LLM_MODEL_APP_ID = "chat-completion";\nconst LLM_MODEL_VERSION = "5d7a50b44aec4a01a9c492c5a5fcf387";\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PostWorkflows(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        workflows: [\n            {\n                id: WORKFLOW_ID,\n                nodes: [\n                    {\n                        id: NODE_ID_1,\n                        model: {\n                            id: PROMPTER_MODEL_ID,\n                            user_id: PROMPTER_MODEL_USER_ID,\n                            app_id: PROMPTER_MODEL_APP_ID,\n                            model_version: {\n                                id: PROMPTER_MODEL_VERSION_ID\n                            }\n                        }\n                    },\n                    {\n                        id: NODE_ID_2,\n                        model: {\n                            id: LLM_MODEL_ID,\n                            user_id: LLM_MODEL_USER_ID,\n                            app_id: LLM_MODEL_APP_ID,\n                            model_version: {\n                                id: LLM_MODEL_VERSION\n                            }\n                        },\n                        node_inputs: [\n                            {\n                                node_id: NODE_ID_1 \n                            }\n                        ]\n                    }\n                ]\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post workflows failed, status: " + response.status.description);\n        }\n\n        console.log(response);\n    }\n);',O='package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    //////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the details of the new\n    // custom workflow. Change these strings to run your own example.\n    /////////////////////////////////////////////////////////////////////////////////////////\n    \n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to create your own custom workflow\n    static final String WORKFLOW_ID = "my-custom-prompter-workflow";\n\n    static final String NODE_ID_1 = "prompter-model";\n    static final String PROMPTER_MODEL_ID = "my-prompter-model";\n    static final String PROMPTER_MODEL_USER_ID = "YOUR_USER_ID_HERE";\n    static final String PROMPTER_MODEL_APP_ID = "my-custom-app";\n    static final String PROMPTER_MODEL_VERSION_ID = "e851fb99a3b14df788ce11accee45c19";\n\n    static final String NODE_ID_2 = "text-to-text";\n    static final String LLM_MODEL_ID = "GPT-4";\n    static final String LLM_MODEL_USER_ID = "openai";\n    static final String LLM_MODEL_APP_ID = "chat-completion";\n    static final String LLM_MODEL_VERSION = "5d7a50b44aec4a01a9c492c5a5fcf387";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n                .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiWorkflowResponse postWorkflowsResponse = stub.postWorkflows(\n                PostWorkflowsRequest.newBuilder()\n                        .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n                        .addWorkflows(\n                                Workflow.newBuilder()\n                                        .setId(WORKFLOW_ID)\n                                        .addNodes(\n                                                WorkflowNode.newBuilder()\n                                                        .setId(NODE_ID_1)\n                                                        .setModel(\n                                                                Model.newBuilder()\n                                                                        .setId(PROMPTER_MODEL_ID)\n                                                                        .setUserId(PROMPTER_MODEL_USER_ID)\n                                                                        .setAppId(PROMPTER_MODEL_APP_ID)\n                                                                        .setModelVersion(ModelVersion.newBuilder().setId(PROMPTER_MODEL_VERSION_ID))\n                                                        )\n                                        )\n                                        .addNodes(\n                                                WorkflowNode.newBuilder()\n                                                        .setId(NODE_ID_2)\n                                                        .setModel(\n                                                                Model.newBuilder()\n                                                                        .setId(LLM_MODEL_ID)\n                                                                        .setUserId(LLM_MODEL_USER_ID)\n                                                                        .setAppId(LLM_MODEL_APP_ID)\n                                                                        .setModelVersion(ModelVersion.newBuilder().setId(LLM_MODEL_VERSION))\n                                                        )\n                                                        .addNodeInputs(NodeInput.newBuilder().setNodeId(NODE_ID_1))\n                                        )\n                        ).build()\n        );\n\n        if (postWorkflowsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post workflows failed, status: " + postWorkflowsResponse.getStatus());\n        }\n\n    }\n\n}\n',w='curl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/workflows" \\\n    -H "Content-Type: application/json" \\\n    -H "Authorization: Key YOUR_PAT_HERE" \\\n    --data-raw \'{\n      "workflows": [{\n        "id": "my-custom-prompter-workflow",\n        "nodes": [\n          {\n            "id": "prompter-model",\n            "model": {\n              "id": "my-prompter-model",\n              "user_id": "YOUR_USER_ID_HERE",\n              "app_id": "my-custom-app",\n              "model_version": {\n                "id": "e851fb99a3b14df788ce11accee45c19"\n              }\n            }\n          },\n          {\n            "id": "text-to-text",\n            "model": {\n              "id": "GPT-4",\n              "user_id": "openai",\n              "app_id": "chat-completion",\n              "model_version": {\n                "id": "5d7a50b44aec4a01a9c492c5a5fcf387"\n              }\n            },\n              "node_inputs": [\n                {\n                  "node_id": "prompter-model"\n                }\n              ]\n          }\n        ]\n      }]\n    }\'',T='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n//////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the details of the new\n// custom workflow. Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change these to create your own custom workflow\n$WORKFLOW_ID = "my-custom-prompter-workflow";\n\n$NODE_ID_1 = "prompter-model";\n$PROMPTER_MODEL_ID = "my-prompter-model";\n$PROMPTER_MODEL_USER_ID = "YOUR_USER_ID_HERE";\n$PROMPTER_MODEL_APP_ID = "my-custom-app";\n$PROMPTER_MODEL_VERSION_ID = "e851fb99a3b14df788ce11accee45c19";\n\n$NODE_ID_2 = "text-to-text";\n$LLM_MODEL_ID = "GPT-4";\n$LLM_MODEL_USER_ID = "openai";\n$LLM_MODEL_APP_ID = "chat-completion";\n$LLM_MODEL_VERSION = "5d7a50b44aec4a01a9c492c5a5fcf387";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\PostWorkflowsRequest;\nuse Clarifai\\Api\\Workflow;\nuse Clarifai\\Api\\WorkflowNode;\nuse Clarifai\\Api\\NodeInput;\nuse Clarifai\\Api\\Model;\nuse Clarifai\\Api\\ModelVersion;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]]; \n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PostWorkflows(\n        // The request object carries the request along with the request status and other metadata related to the request itself\n        new PostWorkflowsRequest([\n            "user_app_id" => $userDataObject,\n            "workflows" => [\n                new Workflow([\n                    "id"=> $WORKFLOW_ID,\n                    "nodes" => [\n                        new WorkflowNode([\n                            "id" => $NODE_ID_1,                            \n                            "model" => new Model([\n                                "id" => $PROMPTER_MODEL_ID,\n                                "user_id" => $PROMPTER_MODEL_USER_ID,\n                                "app_id" => $PROMPTER_MODEL_APP_ID,\n                                "model_version" => new ModelVersion([\n                                    "id" => $PROMPTER_MODEL_VERSION_ID\n                                ])\n                            ])\n\n                        ]),\n                        new WorkflowNode([\n                            "id" => $NODE_ID_2,\n                            "model"=> new Model([\n                                "id" => $LLM_MODEL_ID,\n                                "user_id" => $LLM_MODEL_ID,\n                                "app_id" => $LLM_MODEL_APP_ID,\n                                "model_version" => new ModelVersion([\n                                    "id" => $LLM_MODEL_VERSION\n                                ])\n                            ]),\n                            "node_inputs" => [\n                                new NodeInput([\n                                    "node_id"=> $NODE_ID_1\n                                ])\n                            ]\n                        ])                       \n                    ]\n                ])\n            ]\n        ]),\n        $metadata\n    )->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\n?>',g='######################################################################################################\n# In this section, we set the user authentication, app ID, workflow ID, and the text \n# we want as an input. Change these strings to run your own example.\n######################################################################################################\n\nUSER_ID = \'YOUR_USER_ID_HERE\'\n# Your PAT (Personal Access Token) can be found in the Account\'s Security section\nPAT = \'YOUR_PAT_HERE\'\nAPP_ID = \'YOUR_APP_ID_HERE\'\n# Change these to make your own predictions\nWORKFLOW_ID = "my-custom-prompter-workflow"\nRAW_TEXT = "I love your product very much"\n# To use a hosted text file, assign the URL variable\n# TEXT_FILE_URL = "https://samples.clarifai.com/negative_sentence_12.txt"\n# Or, to use a local text file, assign the location variable\n# TEXT_FILE_LOCATION = "YOUR_TEXT_FILE_LOCATION_HERE"\n\n############################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n############################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (("authorization", "Key " + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\n# To use a local text file, uncomment the following lines\n# with open(TEXT_FILE_LOCATION, "rb") as f:\n#    file_bytes = f.read()\n\npost_workflow_results_response = stub.PostWorkflowResults(\n    service_pb2.PostWorkflowResultsRequest(\n        user_app_id=userDataObject,\n        workflow_id=WORKFLOW_ID,\n        inputs=[\n            resources_pb2.Input(\n                data=resources_pb2.Data(\n                    text=resources_pb2.Text(\n                        raw=RAW_TEXT\n                        # url=TEXT_FILE_URL\n                        # raw=file_bytes\n                    )\n                )\n            )\n        ],\n    ),\n    metadata=metadata,\n)\nif post_workflow_results_response.status.code != status_code_pb2.SUCCESS:\n    print(post_workflow_results_response.status)\n    raise Exception("Post workflow results failed, status: " + post_workflow_results_response.status.description)\n\n# We\'ll get one WorkflowResult for each input we used above. Because of one input, we have here one WorkflowResult\nresults = post_workflow_results_response.results[0]\n\n# Each model we have in the workflow will produce one output.\nfor output in results.outputs:\n    model = output.model\n\n    print("Predicted output for the model: `%s`" % model.id)       \n    print(output.data.text.raw)\n\n# Uncomment this line to print the raw output\n# print(results)',A='\x3c!--index.html file--\x3e\n\n<script>\n    ////////////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, workflow ID, and the text \n    // we want as an input. Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////////////////////////////////\n  \n    // Your PAT (Personal Access Token) can be found in the Account\'s Security section\n    const USER_ID = "YOUR_USER_ID_HERE";\n    // Your PAT (Personal Access Token) can be found in the Account\'s Security section\n    const PAT = "YOUR_PAT_HERE";\n    const APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to make your own predictions\n    const WORKFLOW_ID = "my-custom-prompter-workflow";\n    const RAW_TEXT = "I love your product very much";\n    // To use a hosted text file, assign the URL variable\n    // const TEXT_FILE_URL = "https://samples.clarifai.com/negative_sentence_12.txt";\n  \n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    /////////////////////////////////////////////////////////////////////////////////// \n  \n    const raw = JSON.stringify({\n      "user_app_id": {\n        "user_id": USER_ID,\n        "app_id": APP_ID\n      },\n      "inputs": [\n        {\n          "data": {\n            "text": {\n              "raw": RAW_TEXT\n              // "url": TEXT_FILE_URL\n            }\n          }\n        }\n      ]\n    });\n  \n    const requestOptions = {\n      method: "POST",\n      headers: {\n        "Accept": "application/json",\n        "Authorization": "Key " + PAT\n      },\n      body: raw\n    };\n  \n    fetch(`https://api.clarifai.com/v2/workflows/${WORKFLOW_ID}/results`, requestOptions)\n      .then(response => response.text())\n      .then(result => console.log(result))\n      .catch(error => console.log("error", error));\n  \n  <\/script>',S='//index.js file\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, workflow ID, and the text \n// we want as an input. Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n// Change these to make your own predictions\nconst WORKFLOW_ID = "my-custom-prompter-workflow";\nconst RAW_TEXT = "I love your product very much";\n// To use a hosted text file, assign the URL variable\n// const TEXT_FILE_URL = "https://samples.clarifai.com/negative_sentence_12.txt"\n// Or, to use a local text file, assign the location variable\n// TEXT_FILE_LOCATION = "YOUR_TEXT_FILE_LOCATION_HERE"\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\n// To use a local text file, uncomment the following lines\n// const fs = require("fs");\n// const fileBytes = fs.readFileSync(TEXT_FILE_LOCATION);\n\nstub.PostWorkflowResults({\n    user_app_id: {\n        "user_id": USER_ID,\n        "app_id": APP_ID,\n    },\n    workflow_id: WORKFLOW_ID,\n    inputs: [{\n        data: {\n            text: {\n                raw: RAW_TEXT\n                // url: TEXT_FILE_URL,\n                // raw: fileBytes\n            }\n        }\n    }],\n},\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error(\n                "Post workflow results failed, status: " + response.status.description\n            );\n        }\n\n        // We\'ll get one WorkflowResult for each input we used above. Because of one input, we have here \n        // one WorkflowResult\n        const results = response.results[0];\n\n        // Each model we have in the workflow will produce one output.\n        for (const output of results.outputs) {\n            const model = output.model;\n\n            console.log(`Predicted concepts for the model \'${model.id}\'`);\n            console.log(output.data.text.raw);\n\n        }\n        // Uncomment this line to print the raw output\n        // console.log(results);\n    }\n);',L='package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.StatusCode;\n\nimport com.google.protobuf.ByteString;\nimport java.io.File;\nimport java.io.IOException;\nimport java.nio.file.Files;\n\npublic class ClarifaiExample {\n\n    /////////////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, workflow ID, and the text \n    // we want as an input. Change these strings to run your own example.\n    /////////////////////////////////////////////////////////////////////////////////////////////////////\n    \n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to make your own predictions\n    static final String WORKFLOW_ID = "my-custom-prompter-workflow";\n    static final String RAW_TEXT = "I love your product very much";    \n    // To use a hosted text file, assign the URL variable\n    // static final String TEXT_FILE_URL = "https://samples.clarifai.com/negative_sentence_12.txt";\n    // Or, to use a local text file, assign the location variable\n    // static final String TEXT_FILE_LOCATION = "YOUR_TEXT_FILE_LOCATION_HERE";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n    \n    public static void main(String[] args) throws IOException {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n                .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        PostWorkflowResultsResponse postWorkflowResultsResponse = stub.postWorkflowResults(\n                PostWorkflowResultsRequest.newBuilder()\n                        .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n                        .setWorkflowId(WORKFLOW_ID)\n                        .addInputs(\n                                Input.newBuilder().setData(\n                                        Data.newBuilder().setText(\n                                                Text.newBuilder().setRaw(RAW_TEXT)\n                                                // Text.newBuilder().setUrl(TEXT_FILE_URL)\n                                                // Text.newBuilder().setRawBytes(ByteString.copyFrom(Files.readAllBytes(\n                                                       // new File(TEXT_FILE_LOCATION).toPath()\n                                                //)))\n                                        )\n                                )\n                        )\n                        .build()\n        );\n\n        if (postWorkflowResultsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post workflow results failed, status: " + postWorkflowResultsResponse.getStatus());\n        }\n\n        // We\'ll get one WorkflowResult for each input we used above. Because of one input, we have here\n        // one WorkflowResult\n        WorkflowResult results = postWorkflowResultsResponse.getResults(0);\n\n        // Each model we have in the workflow will produce its output       \n        for (Output output : results.getOutputsList()) {\n            Model model = output.getModel();\n\n            System.out.println("Predicted concepts for the model \'" + model.getId() + "\'");\n            \n            System.out.println(output.getData().getText().getRaw());\n \n        }\n\n        // Uncomment this line to print the raw output\n        // System.out.println(results);\n    }\n\n}',M='curl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/workflows/my-custom-prompter-workflow/results" \\\n  -H "authorization: Key YOUR_PAT_HERE" \\\n  -H "content-type: application/json" \\\n  -d \'{\n    "inputs": [\n        {\n          "data": {\n            "text": {\n              "raw": "I love your product very much"\n          }\n        }\n      }\n    ]\n}\'',b='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, user and app ID, workflow ID, and the text \n// we want as an input. Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change these to make your own predictions\n$WORKFLOW_ID = "my-custom-prompter-workflow";\n$RAW_TEXT = "I love your product very much";\n// To use a hosted text file, assign the URL variable\n// $TEXT_FILE_URL = "https://samples.clarifai.com/negative_sentence_12.txt";\n// Or, to use a local text file, assign the location variable\n// $TEXT_FILE_LOCATION = "YOUR_TEXT_FILE_LOCATION_HERE";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\Data;\nuse Clarifai\\Api\\Text;\nuse Clarifai\\Api\\Input;\nuse Clarifai\\Api\\PostWorkflowResultsRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID,\n]);\n\n// To use a local text file, uncomment the following lines\n// $textData = file_get_contents($TEXT_FILE_LOCATION); \n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client\n    ->PostWorkflowResults(\n        // The request object carries the request along with the request status and other metadata related to the request itself\n        new PostWorkflowResultsRequest([\n            "user_app_id" => $userDataObject,\n            "workflow_id" => $WORKFLOW_ID,\n            "inputs" => [\n                new Input([\n                    // The Input object wraps the Data object in order to meet the API specification\n                    "data" => new Data([\n                        // The Data object is constructed around the Image object. It offers a container that has additional image independent\n                        // metadata. In this particular use case, no other metadata is needed to be specified\n                        "text" => new Text([\n                            // In the Clarifai platform, a text is defined by a special Text object\n                            "raw" => $RAW_TEXT\n                            // "url" => $TEXT_FILE_URL \n                            // "raw" => $textData \n                        ]),\n                    ]),\n                ]),\n            ],\n        ]),\n        $metadata\n    )\n    ->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure\n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    throw new Exception(\n        "Failure response: " .\n            $response->getStatus()->getDescription() .\n            " " .\n            $response->getStatus()->getDetails()\n    );\n}\n\n// We\'ll get one WorkflowResult for each input we used above. Because of one input, we have here one WorkflowResult\n$results = $response->getResults()[0];\n\n// Each model we have in the workflow will produce one output\nforeach ($results->getOutputs() as $output) {\n    $model = $output->getModel();\n\n    echo "Predicted concepts for the model \'{$model->getId()}\'" . "\\n";\n\n    $convertDataToJSONString = $output->getData()->getText()->getRaw();\n\n    echo  $convertDataToJSONString . "\\n";\n}\n\n// Uncomment this line to print the raw output\n// print_r($results);\n\n?>',C="Predicted output for the model: `my-prompter-model`\nClassify whether the sentiment of the given text is positive or negative I love your product very much\n\nPredicted output for the model: `GPT-4`\nThe sentiment of the given text is positive.",N={description:"Learn how to integrate a prompter model into an LLM workflow",sidebar_position:5},U="Custom Prompter Model",x={},v=[{value:"Create a Prompter Model",id:"create-a-prompter-model",level:2},{value:"Train a Prompter Model",id:"train-a-prompter-model",level:2},{value:"Add to a Workflow",id:"add-to-a-workflow",level:2},{value:"Workflow Predict",id:"workflow-predict",level:2}];function y(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",strong:"strong",...(0,a.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"custom-prompter-model",children:"Custom Prompter Model"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Integrate a prompter model into an LLM workflow"})}),"\n",(0,s.jsx)("hr",{}),"\n",(0,s.jsxs)(n.p,{children:["A ",(0,s.jsx)(n.a,{href:"https://docs.clarifai.com/portal-guide/agent-system-operators/prompter",children:"prompter model"})," is a type of language model specifically designed to craft instructions that guide the output of large language models (LLMs). It helps in prompt engineering, focusing on optimizing the responses of LLMs to prompts."]}),"\n",(0,s.jsxs)(n.p,{children:["Let's demonstrate how you can create your own prompter model and connect it to an LLM in a ",(0,s.jsx)(n.a,{href:"https://docs.clarifai.com/api-guide/workflows/",children:"workflow"}),"."]}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["Before using the ",(0,s.jsx)(n.a,{href:"https://docs.clarifai.com/additional-resources/api-overview/python-sdk",children:"Python SDK"}),", ",(0,s.jsx)(n.a,{href:"https://docs.clarifai.com/additional-resources/api-overview/nodejs-sdk",children:"Node.js SDK"}),", or any of our ",(0,s.jsx)(n.a,{href:"https://docs.clarifai.com/additional-resources/api-overview/grpc-clients",children:"gRPC clients"}),", ensure they are properly installed on your machine. Refer to their respective installation guides for instructions on how to install and initialize them."]})}),"\n","\n","\n","\n","\n","\n","\n",(0,s.jsx)(n.h2,{id:"create-a-prompter-model",children:"Create a Prompter Model"}),"\n",(0,s.jsxs)(r.A,{groupId:"code",children:[(0,s.jsx)(i.A,{value:"grpc_python",label:"Python (gRPC)",children:(0,s.jsx)(l.A,{className:"language-python",children:c})}),(0,s.jsx)(i.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(l.A,{className:"language-javascript",children:p})}),(0,s.jsx)(i.A,{value:"grpc_nodejs",label:"Node.js (gRPC)",children:(0,s.jsx)(l.A,{className:"language-javascript",children:u})}),(0,s.jsx)(i.A,{value:"grpc_java",label:"Java (gRPC)",children:(0,s.jsx)(l.A,{className:"language-java",children:d})}),(0,s.jsx)(i.A,{value:"php",label:"PHP (gRPC)",children:(0,s.jsx)(l.A,{className:"language-php",children:h})}),(0,s.jsx)(i.A,{value:"curl",label:"cURL",children:(0,s.jsx)(l.A,{className:"language-bash",children:_})})]}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{children:"Text Output Example"}),(0,s.jsx)(l.A,{className:"language-js",children:C})]}),"\n",(0,s.jsx)(n.h2,{id:"train-a-prompter-model",children:"Train a Prompter Model"}),"\n",(0,s.jsx)(n.p,{children:"When training a prompter model, you need to provide a prompt template, which serves as a pre-configured piece of text for instructing an LLM."}),"\n",(0,s.jsxs)(n.p,{children:["Note that your prompt template should include at least one instance of the placeholder ",(0,s.jsx)(n.code,{children:"{data.text.raw}"}),". When you input your text data at inference time, all occurrences of ",(0,s.jsx)(n.code,{children:"{data.text.raw}"})," within the template will be replaced with the provided text."]}),"\n",(0,s.jsxs)(r.A,{groupId:"code",children:[(0,s.jsx)(i.A,{value:"grpc_python",label:"Python (gRPC)",children:(0,s.jsx)(l.A,{className:"language-python",children:E})}),(0,s.jsx)(i.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(l.A,{className:"language-javascript",children:m})}),(0,s.jsx)(i.A,{value:"grpc_java",label:"Java (gRPC)",children:(0,s.jsx)(l.A,{className:"language-java",children:f})}),(0,s.jsx)(i.A,{value:"curl",label:"cURL",children:(0,s.jsx)(l.A,{className:"language-bash",children:I})})]}),"\n",(0,s.jsx)(n.h2,{id:"add-to-a-workflow",children:"Add to a Workflow"}),"\n",(0,s.jsx)(n.p,{children:"After training your prompter model, you can now put it to work by integrating it into an LLM workflow and using it to accomplish various tasks."}),"\n",(0,s.jsxs)(n.p,{children:["Below is an example of how to connect a prompter model to an LLM like ",(0,s.jsx)(n.a,{href:"https://clarifai.com/openai/chat-completion/models/GPT-4",children:"GPT-4"})," for text-to-text tasks."]}),"\n",(0,s.jsxs)(r.A,{groupId:"code",children:[(0,s.jsx)(i.A,{value:"grpc_python",label:"Python (gRPC)",children:(0,s.jsx)(l.A,{className:"language-python",children:D})}),(0,s.jsx)(i.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(l.A,{className:"language-javascript",children:R})}),(0,s.jsx)(i.A,{value:"grpc_nodejs",label:"Node.js (gRPC)",children:(0,s.jsx)(l.A,{className:"language-javascript",children:P})}),(0,s.jsx)(i.A,{value:"grpc_java",label:"Java (gRPC)",children:(0,s.jsx)(l.A,{className:"language-java",children:O})}),(0,s.jsx)(i.A,{value:"php",label:"PHP (gRPC)",children:(0,s.jsx)(l.A,{className:"language-php",children:T})}),(0,s.jsx)(i.A,{value:"curl",label:"cURL",children:(0,s.jsx)(l.A,{className:"language-bash",children:w})})]}),"\n",(0,s.jsx)(n.h2,{id:"workflow-predict",children:"Workflow Predict"}),"\n",(0,s.jsx)(n.p,{children:"After creating the workflow, let's now use it to perform a text sentiment prediction task."}),"\n",(0,s.jsxs)(r.A,{groupId:"code",children:[(0,s.jsx)(i.A,{value:"grpc_python",label:"Python (gRPC)",children:(0,s.jsx)(l.A,{className:"language-python",children:g})}),(0,s.jsx)(i.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(l.A,{className:"language-javascript",children:A})}),(0,s.jsx)(i.A,{value:"grpc_nodejs",label:"Node.js (gRPC)",children:(0,s.jsx)(l.A,{className:"language-javascript",children:S})}),(0,s.jsx)(i.A,{value:"grpc_java",label:"Java (gRPC)",children:(0,s.jsx)(l.A,{className:"language-java",children:L})}),(0,s.jsx)(i.A,{value:"php",label:"PHP (gRPC)",children:(0,s.jsx)(l.A,{className:"language-php",children:b})}),(0,s.jsx)(i.A,{value:"curl",label:"cURL",children:(0,s.jsx)(l.A,{className:"language-bash",children:M})})]}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{children:"Text Output Example"}),(0,s.jsx)(l.A,{className:"language-js",children:C})]}),"\n",(0,s.jsxs)(n.p,{children:["As you can see on the output above, the response contains the predictions of each model in the workflow. The prompt text starts with the earlier provided template text, and the ",(0,s.jsx)(n.code,{children:"{data.text.raw}"})," placeholder is substituted with the provided input text. That is what is used as a prompt for the GPT-4 model."]}),"\n",(0,s.jsx)(n.p,{children:"And the model correctly predicts the sentiment of the provided input text."})]})}function k(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(y,{...e})}):y(e)}}}]);
"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[4833],{85162:function(n,e,t){t.d(e,{Z:function(){return o}});var a=t(67294),s=t(34334),r="tabItem_Ymn6";function o(n){let{children:e,hidden:t,className:o}=n;return a.createElement("div",{role:"tabpanel",className:(0,s.Z)(r,o),hidden:t},e)}},65488:function(n,e,t){t.d(e,{Z:function(){return _}});var a=t(83117),s=t(67294),r=t(34334),o=t(72389),i=t(67392),l=t(7094),p=t(12466),c="tabList__CuJ",u="tabItem_LNqP";function d(n){var e,t;const{lazy:o,block:d,defaultValue:_,values:T,groupId:h,className:E}=n,k=s.Children.map(n.children,(n=>{if((0,s.isValidElement)(n)&&"value"in n.props)return n;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof n.type?n.type:n.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),I=null!=T?T:k.map((n=>{let{props:{value:e,label:t,attributes:a}}=n;return{value:e,label:t,attributes:a}})),m=(0,i.l)(I,((n,e)=>n.value===e.value));if(m.length>0)throw new Error('Docusaurus error: Duplicate values "'+m.map((n=>n.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const g=null===_?_:null!=(e=null!=_?_:null==(t=k.find((n=>n.props.default)))?void 0:t.props.value)?e:k[0].props.value;if(null!==g&&!I.some((n=>n.value===g)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+g+'" but none of its children has the corresponding value. Available values are: '+I.map((n=>n.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:A,setTabGroupChoices:N}=(0,l.U)(),[y,R]=(0,s.useState)(g),O=[],{blockElementScrollPositionUntilNextRender:w}=(0,p.o5)();if(null!=h){const n=A[h];null!=n&&n!==y&&I.some((e=>e.value===n))&&R(n)}const P=n=>{const e=n.currentTarget,t=O.indexOf(e),a=I[t].value;a!==y&&(w(e),R(a),null!=h&&N(h,String(a)))},S=n=>{var e;let t=null;switch(n.key){case"ArrowRight":{var a;const e=O.indexOf(n.currentTarget)+1;t=null!=(a=O[e])?a:O[0];break}case"ArrowLeft":{var s;const e=O.indexOf(n.currentTarget)-1;t=null!=(s=O[e])?s:O[O.length-1];break}}null==(e=t)||e.focus()};return s.createElement("div",{className:(0,r.Z)("tabs-container",c)},s.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":d},E)},I.map((n=>{let{value:e,label:t,attributes:o}=n;return s.createElement("li",(0,a.Z)({role:"tab",tabIndex:y===e?0:-1,"aria-selected":y===e,key:e,ref:n=>O.push(n),onKeyDown:S,onFocus:P,onClick:P},o,{className:(0,r.Z)("tabs__item",u,null==o?void 0:o.className,{"tabs__item--active":y===e})}),null!=t?t:e)}))),o?(0,s.cloneElement)(k.filter((n=>n.props.value===y))[0],{className:"margin-top--md"}):s.createElement("div",{className:"margin-top--md"},k.map(((n,e)=>(0,s.cloneElement)(n,{key:e,hidden:n.props.value!==y})))))}function _(n){const e=(0,o.Z)();return s.createElement(d,(0,a.Z)({key:String(e)},n))}},81666:function(n,e,t){t.r(e),t.d(e,{assets:function(){return u},contentTitle:function(){return p},default:function(){return T},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return d}});var a=t(83117),s=(t(67294),t(3905)),r=t(65488),o=t(85162),i=t(66066);const l={description:"Group your labeling work into tasks that can be delegated.",sidebar_position:4},p="Tasks",c={unversionedId:"api-guide/annotate/tasks",id:"api-guide/annotate/tasks",title:"Tasks",description:"Group your labeling work into tasks that can be delegated.",source:"@site/docs/api-guide/annotate/tasks.md",sourceDirName:"api-guide/annotate",slug:"/api-guide/annotate/tasks",permalink:"/api-guide/annotate/tasks",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{description:"Group your labeling work into tasks that can be delegated.",sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Positive and Negative Annotations",permalink:"/api-guide/annotate/positive-and-negative-annotations"},next:{title:"Task Annotations",permalink:"/api-guide/annotate/task-annotations"}},u={},d=[{value:"Create",id:"create",level:2},{value:"Non-Assigned Task",id:"non-assigned-task",level:3},{value:"Assigned Task",id:"assigned-task",level:3},{value:"Task With Partitioned Worker Strategy",id:"task-with-partitioned-worker-strategy",level:2},{value:"Task With Consensus Review",id:"task-with-consensus-review",level:2},{value:"Get",id:"get",level:2},{value:"Get Task by ID",id:"get-task-by-id",level:3},{value:"List All Tasks",id:"list-all-tasks",level:3},{value:"List Tasks Assigned to User",id:"list-tasks-assigned-to-user",level:3},{value:"List Tasks Assigned to User for Review",id:"list-tasks-assigned-to-user-for-review",level:3},{value:"Update",id:"update",level:2},{value:"Update Task",id:"update-task",level:3},{value:"Delete",id:"delete",level:2},{value:"Delete Multiple Tasks",id:"delete-multiple-tasks",level:3}],_={toc:d};function T(n){let{components:e,...t}=n;return(0,s.kt)("wrapper",(0,a.Z)({},_,t,{components:e,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"tasks"},"Tasks"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Group your labeling work into tasks that can be delegated")),(0,s.kt)("hr",null),(0,s.kt)("p",null,"Tasks are a powerful tool that can help your team to annotate inputs from your application."),(0,s.kt)("h2",{id:"create"},"Create"),(0,s.kt)("p",null,"To create a new task in your app, you ",(0,s.kt)("inlineCode",{parentName:"p"},"POST")," the task information to ",(0,s.kt)("inlineCode",{parentName:"p"},"v2/task")," endpoint."),(0,s.kt)("h3",{id:"non-assigned-task"},"Non-Assigned Task"),(0,s.kt)("p",null,"A task should be assigned to a list of users, but it's not required. The following code will create a non-assigned task."),(0,s.kt)(r.Z,{mdxType:"Tabs"},(0,s.kt)(o.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},'curl -X POST \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'\n  {\n      "tasks": [\n          {\n              "type": "CONCEPTS_CLASSIFICATION",\n              "name": "Annotate {{concept_id}}",\n              "worker": {\n                  "strategy": "FULL"\n              },\n              "concept_ids": [\n                  "{{concept_id}}"\n              ],\n              "input_source": {\n                  "type": "ALL_INPUTS"\n              },\n              "sample_ms": 1000,\n              "review": {\n                  "strategy": "NONE"\n              }\n          }\n      ]\n  }\'\\\n  https://api.clarifai.com/v2/tasks\n'))),(0,s.kt)(o.Z,{value:"js_rest",label:"JavaScript (REST)",mdxType:"TabItem"},(0,s.kt)(i.Z,{className:"language-javascript",mdxType:"CodeBlock"},'\x3c!--index.html file--\x3e\n\n<script>\n    ///////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and concept ID.\n    // Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = \'YOUR_USER_ID_HERE\';\n    // Your PAT (Personal Access Token) can be found in the portal under Authentification\n    const PAT = \'YOUR_PAT_HERE\';\n    const APP_ID = \'YOUR_APP_ID_HERE\';\n    // Change this to create your own non-assigned task \n    const CONCEPT_ID = "water";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        "user_app_id": {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        "tasks": [\n            {\n                "type": "CONCEPTS_CLASSIFICATION",\n                "name": "Annotate " + CONCEPT_ID,\n                "worker": {\n                    "strategy": "FULL"\n                },\n                "concept_ids": [\n                    CONCEPT_ID\n                ],\n                "input_source": {\n                    "type": "ALL_INPUTS"\n                },\n                "sample_ms": 1000,\n                "review": {\n                    "strategy": "NONE"\n                }\n            }\n        ]\n    });\n\n    const requestOptions = {\n        method: \'POST\',\n        headers: {\n            \'Accept\': \'application/json\',\n            \'Authorization\': \'Key \' + PAT\n        },\n        body: raw\n    };\n\n    fetch("https://api.clarifai.com/v2/tasks", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log(\'error\', error));\n\n<\/script>'))),(0,s.kt)("h3",{id:"assigned-task"},"Assigned Task"),(0,s.kt)("p",null,"A task should be assigned to a list of users. These users will do the work, so they're also called workers. A task may also be assigned to a list of users for review."),(0,s.kt)(r.Z,{mdxType:"Tabs"},(0,s.kt)(o.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},'curl -X POST \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'\n    {\n        "tasks": [\n            {\n                "type": "CONCEPTS_CLASSIFICATION",\n                "name": "Annotate {{concept_id}}",\n                "worker": {\n                    "strategy": "FULL",\n                    "users": [\n                        {"id": "{{worker_user_id}}"}\n                    ]\n                },\n                "concept_ids": [\n                    "{{concept_id}}"\n                ],\n                "input_source": {\n                    "type": "ALL_INPUTS"\n                },\n                "sample_ms": 1000,\n                "review": {\n                    "strategy": "MANUAL",\n                    "manual_strategy_info": {\n                        "sample_percentage": 0.5\n                    },\n                    "users": [\n                        {"id": "{{reviewer_user_id}}"}\n                    ]\n                }\n            }\n        ]\n    }\'\\\n  https://api.clarifai.com/v2/tasks\n'))),(0,s.kt)(o.Z,{value:"js_rest",label:"JavaScript (REST)",mdxType:"TabItem"},(0,s.kt)(i.Z,{className:"language-javascript",mdxType:"CodeBlock"},'\x3c!--index.html file--\x3e\n\n<script>\n    ///////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and details for\n    // assigning a task. Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = \'YOUR_USER_ID_HERE\';\n    // Your PAT (Personal Access Token) can be found in the portal under Authentification\n    const PAT = \'YOUR_PAT_HERE\';\n    const APP_ID = \'YOUR_APP_ID_HERE\';\n    // Change these to assign your own task \n    const CONCEPT_ID = "water";\n    const WORKER_USER_ID = "WORKER_USER_ID_HERE";\n    const REVIEWER_USER_ID = "REVIEWER_USER_ID_HERE";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        "user_app_id": {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        "tasks": [\n            {\n                "type": "CONCEPTS_CLASSIFICATION",\n                "name": "Annotate " + CONCEPT_ID,\n                "worker": {\n                    "strategy": "FULL",\n                    "users": [\n                        {"id": WORKER_USER_ID}\n                    ]\n                },\n                "concept_ids": [\n                    CONCEPT_ID\n                ],\n                "input_source": {\n                    "type": "ALL_INPUTS"\n                },\n                "sample_ms": 1000,\n                "review": {\n                    "strategy": "MANUAL",\n                    "manual_strategy_info": {\n                        "sample_percentage": 0.5\n                    },\n                    "users": [\n                        {"id": REVIEWER_USER_ID}\n                    ]\n                }\n            }\n        ]\n    });\n\n    const requestOptions = {\n        method: \'POST\',\n        headers: {\n            \'Accept\': \'application/json\',\n            \'Authorization\': \'Key \' + PAT\n        },\n        body: raw\n    };\n\n    fetch("https://api.clarifai.com/v2/tasks", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log(\'error\', error));\n\n<\/script>'))),(0,s.kt)("h2",{id:"task-with-partitioned-worker-strategy"},"Task With Partitioned Worker Strategy"),(0,s.kt)("p",null,"The previous tasks were created with full worker strategy."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},'{\n    "strategy": "FULL"\n}\n')),(0,s.kt)("p",null,"In case of ",(0,s.kt)("inlineCode",{parentName:"p"},"FULL")," worker strategy, each worker will work on all inputs selected in the input source."),(0,s.kt)("p",null,"If you wish the work to be distributed between workers, then you can select the ",(0,s.kt)("inlineCode",{parentName:"p"},"PARTITIONED")," worker strategy."),(0,s.kt)("p",null,"In the following example, there are two workers:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"workers_per_input"),": each input will be assigned to 1 worker"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"weights.{{user_id1}}"),": the first worker will get 90% of inputs"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"weights.{{user_id2}}"),": the second worker will get 10% of inputs")),(0,s.kt)(r.Z,{mdxType:"Tabs"},(0,s.kt)(o.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},'curl -X POST \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'\n    {\n        "tasks": [\n            {\n                "type": "CONCEPTS_CLASSIFICATION",\n                "name": "Annotate {{concept_id}}",\n                "worker": {\n                    "strategy": "PARTITIONED",\n                    "users": [\n                        {"id": "{{user_id1}}"},\n                        {"id": "{{user_id2}}"}\n                    ],\n                    "partitioned_strategy_info": {\n                        "type": "WEIGHTED",\n                        "workers_per_input": 1,\n                        "weights": {\n                            "{{user_id1}}": 90,\n                            "{{user_id2}}": 10\n                        }\n                    }\n                },\n                "concept_ids": [\n                    "{{concept_id}}"\n                ],\n                "input_source": {\n                    "type": "ALL_INPUTS"\n                },\n                "sample_ms": 1000,\n                "review": {\n                    "strategy": "NONE"\n                }\n            }\n        ]\n    }\'\\\n  https://api.clarifai.com/v2/tasks\n'))),(0,s.kt)(o.Z,{value:"js_rest",label:"JavaScript (REST)",mdxType:"TabItem"},(0,s.kt)(i.Z,{className:"language-javascript",mdxType:"CodeBlock"},'\x3c!--index.html file--\x3e\n\n<script>\n    ///////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and details for\n    // creating a task. Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = \'YOUR_USER_ID_HERE\';\n    // Your PAT (Personal Access Token) can be found in the portal under Authentification\n    const PAT = \'YOUR_PAT_HERE\';\n    const APP_ID = \'YOUR_APP_ID_HERE\';\n    // Change these to create your own task with partitioned worker strategy \n    const CONCEPT_ID = "water";\n    const USER_ID_1 = "USER_ID_1_HERE";\n    const USER_ID_2 = "USER_ID_2_HERE";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        "user_app_id": {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        "tasks": [\n            {\n                "type": "CONCEPTS_CLASSIFICATION",\n                "name": "Annotate " + CONCEPT_ID,\n                "worker": {\n                    "strategy": "PARTITIONED",\n                    "users": [\n                        {"id": USER_ID_1},\n                        {"id": USER_ID_2}\n                    ],\n                    "partitioned_strategy_info": {\n                        "type": "WEIGHTED",\n                        "workers_per_input": 1,\n                        "weights": {\n                            USER_ID_1: 90,\n                            USER_ID_2: 10\n                        }\n                    }\n                },\n                "concept_ids": [\n                    CONCEPT_ID\n                ],\n                "input_source": {\n                    "type": "ALL_INPUTS"\n                },\n                "sample_ms": 1000,\n                "review": {\n                    "strategy": "NONE"\n                }\n            }\n        ]\n    });\n\n    const requestOptions = {\n        method: \'POST\',\n        headers: {\n            \'Accept\': \'application/json\',\n            \'Authorization\': \'Key \' + PAT\n        },\n        body: raw\n    };\n\n    fetch("https://api.clarifai.com/v2/tasks", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log(\'error\', error));\n\n<\/script>'))),(0,s.kt)("admonition",{type:"info"},(0,s.kt)("ul",{parentName:"admonition"},(0,s.kt)("li",{parentName:"ul"},"It is not required for the weights to add up to 100. For example, the weights ","[","9, 1","]"," are equivalent with weights ","[","90, 10","]","."),(0,s.kt)("li",{parentName:"ul"},"The partitioning is approximate. This means that the number of assigned inputs to each worker may have a small error margin, but it will be close to the assigned weight percentage."))),(0,s.kt)("h2",{id:"task-with-consensus-review"},"Task With Consensus Review"),(0,s.kt)("p",null,"The previous tasks were created with no review or manual review strategy."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},'{\n  "strategy": "MANUAL"\n}\n')),(0,s.kt)("p",null,"We recommend to create tasks with ",(0,s.kt)("inlineCode",{parentName:"p"},"CONSENSUS")," review strategy. When enough workers label an input in the same way, it will automatically be approved, with no need for the reviewer to spend time to check. In this way, the reviewer will be able to focus on the inputs where the workers don't agree."),(0,s.kt)("p",null,"Note that an approval threshold must be set. For example, in case of 3 workers and ",(0,s.kt)("inlineCode",{parentName:"p"},"approval_threshold")," set to 2, if an input is labeled in the same way by 2 workers, they form a majority and the group reaches a consensus."),(0,s.kt)(r.Z,{mdxType:"Tabs"},(0,s.kt)(o.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},'curl -X POST \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'\n    {\n        "tasks": [\n            {\n                "type": "CONCEPTS_CLASSIFICATION",\n                "name": "Annotate {{concept_id}}",\n                "worker": {\n                    "strategy": "PARTITIONED",\n                    "users": [\n                        {"id": "{{user_id1}}"},\n                        {"id": "{{user_id2}}"},\n                        {"id": "{{user_id3}}"}\n                    ],\n                    "partitioned_strategy_info": {\n                        "type": "WEIGHTED",\n                        "workers_per_input": 1,\n                        "weights": {\n                            "{{user_id1}}": 1,\n                            "{{user_id2}}": 1,\n                            "{{user_id3}}": 1\n                        }\n                    }\n                },\n                "concept_ids": [\n                    "{{concept_id}}"\n                ],\n                "input_source": {\n                    "type": "ALL_INPUTS"\n                },\n                "sample_ms": 1000,\n                "review": {\n                    "strategy": "CONSENSUS",\n                    "consensus_strategy_info": {\n                        "approval_threshold": 2\n                    },\n                    "users": [\n                        {"id": "{{user_id4}}"}\n                    ]\n                }\n            }\n        ]\n    }\'\\\n  https://api.clarifai.com/v2/tasks\n'))),(0,s.kt)(o.Z,{value:"js_rest",label:"JavaScript (REST)",mdxType:"TabItem"},(0,s.kt)(i.Z,{className:"language-javascript",mdxType:"CodeBlock"},'\x3c!--index.html file--\x3e\n\n<script>\n    ///////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and details for\n    // creating a task. Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = \'YOUR_USER_ID_HERE\';\n    // Your PAT (Personal Access Token) can be found in the portal under Authentification\n    const PAT = \'YOUR_PAT_HERE\';\n    const APP_ID = \'YOUR_APP_ID_HERE\';\n    // Change these to create your own task with consensus review \n    const CONCEPT_ID = "water";\n    const USER_ID_1 = "USER_ID_1_HERE";\n    const USER_ID_2 = "USER_ID_2_HERE";\n    const USER_ID_3 = "USER_ID_3_HERE";\n    const USER_ID_4 = "USER_ID_4_HERE";\n\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        "user_app_id": {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        "tasks": [\n            {\n                "type": "CONCEPTS_CLASSIFICATION",\n                "name": "Annotate " + CONCEPT_ID,\n                "worker": {\n                    "strategy": "PARTITIONED",\n                    "users": [\n                        {"id": USER_ID_1},\n                        {"id": USER_ID_2},\n                        {"id": USER_ID_3}\n                    ],\n                    "partitioned_strategy_info": {\n                        "type": "WEIGHTED",\n                        "workers_per_input": 1,\n                        "weights": {\n                            USER_ID_1: 1,\n                            USER_ID_2: 1,\n                            USER_ID_3: 1\n                        }\n                    }\n                },\n                "concept_ids": [\n                    CONCEPT_ID\n                ],\n                "input_source": {\n                    "type": "ALL_INPUTS"\n                },\n                "sample_ms": 1000,\n                "review": {\n                    "strategy": "CONSENSUS",\n                    "consensus_strategy_info": {\n                        "approval_threshold": 2\n                    },\n                    "users": [\n                        {"id": USER_ID_4}\n                    ]\n                }\n            }\n        ]\n    });\n\n    const requestOptions = {\n        method: \'POST\',\n        headers: {\n            \'Accept\': \'application/json\',\n            \'Authorization\': \'Key \' + PAT\n        },\n        body: raw\n    };\n\n    fetch("https://api.clarifai.com/v2/tasks", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log(\'error\', error));\n\n<\/script>'))),(0,s.kt)("h2",{id:"get"},"Get"),(0,s.kt)("h3",{id:"get-task-by-id"},"Get Task by ID"),(0,s.kt)("p",null,"You can get a singular task by its ID. The ID was automatically generated when it was created."),(0,s.kt)(r.Z,{mdxType:"Tabs"},(0,s.kt)(o.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},'curl -X GET \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  https://api.clarifai.com/v2/tasks/{task_id}\n'))),(0,s.kt)(o.Z,{value:"js_rest",label:"JavaScript (REST)",mdxType:"TabItem"},(0,s.kt)(i.Z,{className:"language-javascript",mdxType:"CodeBlock"},"\x3c!--index.html file--\x3e\n\n<script>\n    ///////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and task ID.\n    // Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////////////\n\n    // Your PAT (Personal Access Token) can be found in the portal under Authentification\n    const PAT = 'YOUR_PAT_HERE';\n    const APP_ID = 'YOUR_APP_ID_HERE';\n    // Change this to get a task by its ID\n    const TASK_ID = '77f156b3616f40c887c765f4ccb45c87';\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const requestOptions = {\n        method: 'GET',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        }\n    };\n\n    fetch(`https://api.clarifai.com/v2/users/me/apps/${APP_ID}/tasks/${TASK_ID}`, requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n\n<\/script>"))),(0,s.kt)("h3",{id:"list-all-tasks"},"List All Tasks"),(0,s.kt)("p",null,"You can get a list of tasks within your app with a ",(0,s.kt)("inlineCode",{parentName:"p"},"GET")," call. This call supports ",(0,s.kt)("a",{parentName:"p",href:"https://docs.clarifai.com/api-guide/advanced-topics/pagination/"},"pagination"),"."),(0,s.kt)(r.Z,{mdxType:"Tabs"},(0,s.kt)(o.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},'curl -X GET \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  https://api.clarifai.com/v2/tasks\n'))),(0,s.kt)(o.Z,{value:"js_rest",label:"JavaScript (REST)",mdxType:"TabItem"},(0,s.kt)(i.Z,{className:"language-javascript",mdxType:"CodeBlock"},"\x3c!--index.html file--\x3e\n\n<script>\n    ///////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication and app ID.\n    // Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////\n  \n    // Your PAT (Personal Access Token) can be found in the portal under Authentification\n    const PAT = 'YOUR_PAT_HERE';\n    const APP_ID = 'YOUR_APP_ID_HERE';\n  \n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n  \n    const requestOptions = {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + PAT\n      }\n    };\n  \n    fetch(`https://api.clarifai.com/v2/users/me/apps/${APP_ID}/tasks`, requestOptions)\n      .then(response => response.text())\n      .then(result => console.log(result))\n      .catch(error => console.log('error', error));\n  \n  <\/script>"))),(0,s.kt)("h3",{id:"list-tasks-assigned-to-user"},"List Tasks Assigned to User"),(0,s.kt)("p",null,"Get only the tasks assigned to a specific user for work."),(0,s.kt)(r.Z,{mdxType:"Tabs"},(0,s.kt)(o.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},'curl -X GET \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  https://api.clarifai.com/v2/tasks?worker_user_ids={{user_id}}\n'))),(0,s.kt)(o.Z,{value:"js_rest",label:"JavaScript (REST)",mdxType:"TabItem"},(0,s.kt)(i.Z,{className:"language-javascript",mdxType:"CodeBlock"},"\x3c!--index.html file--\x3e\n\n<script>\n    ///////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and\n    // worker user ID. Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////\n\n    // Your PAT (Personal Access Token) can be found in the portal under Authentification\n    const PAT = 'YOUR_PAT_HERE';\n    const APP_ID = 'YOUR_APP_ID_HERE';\n    const WORKER_USER_ID = 'WORKER_USER_ID_HERE';\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const requestOptions = {\n        method: 'GET',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        }\n    };\n\n    fetch(`https://api.clarifai.com/v2/users/me/apps/${APP_ID}/tasks?worker_user_ids=${WORKER_USER_ID}`, requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n\n<\/script>"))),(0,s.kt)("h3",{id:"list-tasks-assigned-to-user-for-review"},"List Tasks Assigned to User for Review"),(0,s.kt)("p",null,"Get only the tasks assigned to a specific user for review."),(0,s.kt)(r.Z,{mdxType:"Tabs"},(0,s.kt)(o.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},'curl -X GET \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  https://api.clarifai.com/v2/tasks?review_user_ids={{user_id}}\n'))),(0,s.kt)(o.Z,{value:"js_rest",label:"JavaScript (REST)",mdxType:"TabItem"},(0,s.kt)(i.Z,{className:"language-javascript",mdxType:"CodeBlock"},"\x3c!--index.html file--\x3e\n\n<script>\n    ///////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and\n    // review user ID. Change these strings to run your own example\n    ///////////////////////////////////////////////////////////////////\n  \n    // Your PAT (Personal Access Token) can be found in the portal under Authentification\n    const PAT = 'YOUR_PAT_HERE';\n    const APP_ID = 'YOUR_APP_ID_HERE';\n    const REVIEW_USER_ID = 'REVIEW_USER_ID_HERE';\n  \n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n  \n    const requestOptions = {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + PAT\n      }\n    };\n  \n    fetch(`https://api.clarifai.com/v2/users/me/apps/${APP_ID}/tasks?review_user_ids=${REVIEW_USER_ID}`, requestOptions)\n      .then(response => response.text())\n      .then(result => console.log(result))\n      .catch(error => console.log('error', error));\n  \n  <\/script>"))),(0,s.kt)("h2",{id:"update"},"Update"),(0,s.kt)("p",null,"Currently, we only support updating a task by providing all information at once."),(0,s.kt)("h3",{id:"update-task"},"Update Task"),(0,s.kt)(r.Z,{mdxType:"Tabs"},(0,s.kt)(o.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},'curl -X PATCH \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'\n    {\n        "action": "overwrite",\n        "tasks": [\n            {\n                "id": "{{task_id}}",\n                "type": "CONCEPTS_CLASSIFICATION",\n                "name": "Annotate {{concept_id}}",\n                "worker": {\n                    "strategy": "PARTITIONED",\n                    "users": [\n                        {"id": "{{user_id1}}"},\n                        {"id": "{{user_id2}}"}\n                    ],\n                    "partitioned_strategy_info": {\n                        "type": "WEIGHTED",\n                        "workers_per_input": 1,\n                        "weights": {\n                            "{{user_id1}}": 1,\n                            "{{user_id2}}": 1\n                        }\n                    }\n                },\n                "concept_ids": [\n                    "{{concept_id}}"\n                ],\n                "input_source": {\n                    "type": "ALL_INPUTS"\n                },\n                "sample_ms": 1000,\n                "review": {\n                    "strategy": "CONSENSUS",\n                    "consensus_strategy_info": {\n                        "approval_threshold": 2\n                    },\n                    "users": [\n                        {"id": "{{user_id3}}"}\n                    ]\n                },\n                "status": {\n                    "code": "TASK_DONE"\n                }\n            }\n        ]\n    }\'\\\n  https://api.clarifai.com/v2/tasks\n'))),(0,s.kt)(o.Z,{value:"js_rest",label:"JavaScript (REST)",mdxType:"TabItem"},(0,s.kt)(i.Z,{className:"language-javascript",mdxType:"CodeBlock"},'\x3c!--index.html file--\x3e\n\n<script>\n    ///////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and details for\n    // updating a task. Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = \'YOUR_USER_ID_HERE\';\n    // Your PAT (Personal Access Token) can be found in the portal under Authentification\n    const PAT = \'YOUR_PAT_HERE\';\n    const APP_ID = \'YOUR_APP_ID_HERE\';\n    // Change these to update your own task \n    const TASK_ID = \'66262884195c427595d4bca033b2114e\';\n    const CONCEPT_ID = "water";\n    const USER_ID_1 = "USER_ID_1_HERE";\n    const USER_ID_2 = "USER_ID_2_HERE";\n    const USER_ID_3 = "USER_ID_3_HERE";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        "user_app_id": {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        "action": "overwrite",\n        "tasks": [\n            {\n                "id": TASK_ID,\n                "type": "CONCEPTS_CLASSIFICATION",\n                "name": "Annotate " + CONCEPT_ID,\n                "worker": {\n                    "strategy": "PARTITIONED",\n                    "users": [\n                        {"id": USER_ID_1},\n                        {"id": USER_ID_2}\n                    ],\n                    "partitioned_strategy_info": {\n                        "type": "WEIGHTED",\n                        "workers_per_input": 1,\n                        "weights": {\n                            USER_ID_1: 1,\n                            USER_ID_2: 1\n                        }\n                    }\n                },\n                "concept_ids": [\n                    CONCEPT_ID\n                ],\n                "input_source": {\n                    "type": "ALL_INPUTS"\n                },\n                "sample_ms": 1000,\n                "review": {\n                    "strategy": "CONSENSUS",\n                    "consensus_strategy_info": {\n                        "approval_threshold": 2\n                    },\n                    "users": [\n                        {"id": USER_ID_3}\n                    ]\n                },\n                "status": {\n                    "code": "TASK_DONE"\n                }\n            }\n        ]\n    });\n\n    const requestOptions = {\n        method: \'PATCH\',\n        headers: {\n            \'Accept\': \'application/json\',\n            \'Authorization\': \'Key \' + PAT\n        },\n        body: raw\n    };\n\n    fetch("https://api.clarifai.com/v2/tasks", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log(\'error\', error));\n\n<\/script>'))),(0,s.kt)("h2",{id:"delete"},"Delete"),(0,s.kt)("h3",{id:"delete-multiple-tasks"},"Delete Multiple Tasks"),(0,s.kt)("p",null,"You can delete tasks using their IDs."),(0,s.kt)(r.Z,{mdxType:"Tabs"},(0,s.kt)(o.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},'curl -X DELETE \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'\n    {\n        "ids":["{{task_id}}"]\n    }\'\\\n  https://api.clarifai.com/v2/tasks\n'))),(0,s.kt)(o.Z,{value:"js_rest",label:"JavaScript (REST)",mdxType:"TabItem"},(0,s.kt)(i.Z,{className:"language-javascript",mdxType:"CodeBlock"},"\x3c!--index.html file--\x3e\n\n<script>\n    ///////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and task ID. \n    // Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = 'YOUR_USER_ID_HERE';\n    // Your PAT (Personal Access Token) can be found in the portal under Authentification\n    const PAT = 'YOUR_PAT_HERE';\n    const APP_ID = 'YOUR_APP_ID_HERE';\n    // Change this to delete your own task \n    const TASK_ID = '66262884195c427595d4bca033b2114e';\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        \"user_app_id\": {\n            \"user_id\": USER_ID,\n            \"app_id\": APP_ID\n        },\n        \"ids\": [TASK_ID]\n    });\n\n    const requestOptions = {\n        method: 'DELETE',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        },\n        body: raw\n    };\n\n    fetch(\"https://api.clarifai.com/v2/tasks\", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n\n\n<\/script>"))))}T.isMDXComponent=!0}}]);
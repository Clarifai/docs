"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[1385],{40797:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>u,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>c,toc:()=>h});var t=n(74848),i=n(28453),r=n(11470),s=n(19365);const o={description:"Set up authentication to make API calls",sidebar_position:3},l="Authorize",c={id:"clarifai-basics/authentication/authorize",title:"Authorize",description:"Set up authentication to make API calls",source:"@site/docs/clarifai-basics/authentication/authorize.md",sourceDirName:"clarifai-basics/authentication",slug:"/clarifai-basics/authentication/authorize",permalink:"/clarifai-basics/authentication/authorize",draft:!1,unlisted:!1,editUrl:"https://github.com/Clarifai/docs/blob/main/docs/clarifai-basics/authentication/authorize.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{description:"Set up authentication to make API calls",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"App-Specific API Keys",permalink:"/clarifai-basics/authentication/app-specific-api-keys"},next:{title:"Scopes",permalink:"/clarifai-basics/authentication/scopes"}},u={},h=[{value:"Authorization Keys",id:"authorization-keys",level:2},{value:"Authorization Examples",id:"authorization-examples",level:2},{value:"CORS Policy",id:"cors-policy",level:2}];function d(e){const a={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(a.h1,{id:"authorize",children:"Authorize"}),"\n",(0,t.jsx)(a.p,{children:(0,t.jsx)(a.strong,{children:"Authorize before securely making API requests"})}),"\n",(0,t.jsx)("hr",{}),"\n",(0,t.jsx)(a.p,{children:"After creating your access credentials, you are ready to make API calls. Most of our API clients require setting up authentication during initialization; though, it can be changed for particular requests, if needed."}),"\n",(0,t.jsxs)(a.p,{children:["If you are using a REST API, you will need to add the ",(0,t.jsx)(a.code,{children:"Authorization"})," header as illustrated in the cURL example below."]}),"\n",(0,t.jsx)(a.h2,{id:"authorization-keys",children:"Authorization Keys"}),"\n",(0,t.jsx)(a.p,{children:"The key used for authorization can either be:"}),"\n",(0,t.jsxs)(a.ul,{children:["\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.a,{href:"https://docs.clarifai.com/clarifai-basics/authentication/personal-access-tokens",children:"A Personal Access Token (PAT)"}),", which is tied to a user; or,"]}),"\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.a,{href:"https://docs.clarifai.com/clarifai-basics/authentication/app-specific-api-keys",children:"An API Key"}),", which is tied to a specific application."]}),"\n"]}),"\n",(0,t.jsx)(a.admonition,{title:"IMPORTANT NOTE",type:"important",children:(0,t.jsxs)(a.ul,{children:["\n",(0,t.jsx)(a.li,{children:"PAT is the primary authentication mechanism we use."}),"\n"]})}),"\n",(0,t.jsx)(a.p,{children:"Using a PAT is more powerful than an API Key. A PAT represents you when accessing the Clarifai API. It allows you to access multiple applications with a single key."}),"\n",(0,t.jsx)(a.p,{children:"With a PAT, you can access your own apps as well as any other apps you have permissions to use, such as public apps, apps you're added as a collaborator, or apps belonging to your organization's team. Also, certain endpoints support only PATs, such as creating a new application or a new API Key."}),"\n",(0,t.jsx)(a.p,{children:"When using a PAT to call the API, you need to specify your user ID alongside the application ID to which the request should be applied."}),"\n",(0,t.jsx)(a.p,{children:"On the other hand, an API Key restricts your access only to a single app. So, it could be suitable for accessing resources that are specifically locked down to a single app."}),"\n",(0,t.jsx)(a.p,{children:"When using an app-specific API Key, you do not need to specify either the user ID or the application ID as they are already part of the API Key."}),"\n",(0,t.jsx)(a.admonition,{type:"tip",children:(0,t.jsxs)(a.p,{children:["Clarifai provides various clients you can use to access the API in your favorite programming language. Learn how to install your preferred client ",(0,t.jsx)(a.a,{href:"https://docs.clarifai.com/api-guide/api-overview/api-clients/",children:"here"}),"."]})}),"\n",(0,t.jsx)(a.h2,{id:"authorization-examples",children:"Authorization Examples"}),"\n","\n",(0,t.jsxs)(r.A,{children:[(0,t.jsx)(s.A,{value:"python",label:"Python",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-python",children:"###############################################################################################\n# Initialize the gRPC-based client to communicate with the Clarifai platform.\n###############################################################################################\n\n# Import the Clarifai gRPC-based objects needed\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_pb2, status_code_pb2\n\n# Construct the communications channel \nchannel = ClarifaiChannel.get_grpc_channel()\n# Construct the V2Stub object for accessing all the Clarifai API functionality\nstub = service_pb2_grpc.V2Stub(channel)\n\n##############################################################################################\n# This is where you set up the metadata object that's used to authenticate. \n# This authorization will be used by every Clarifai API call.\n# Change the following authorization key to your own credentials\n# Example: metadata = (('authorization', 'Key ' + 'a123457612345678'),)\n##############################################################################################\n \nmetadata = (('authorization', 'Key ' + 'YOUR_CLARIFAI_PAT_HERE'),)\n# Or, if you were to use an API Key:\n# metadata = (('authorization', 'Key ' + 'YOUR_CLARIFAI_API_KEY_HERE'),)\n# Yes, the word 'Key' appears in addition to the alphanumeric PAT or API Key\n\n##############################################################################################\n# A UserAppIDSet object is needed when using a PAT. It contains two pieces of information: \n# user_id (your user id) and app_id (app id that contains the model of interest). \n# Both of them are specified as string values.\n##############################################################################################\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id='YOUR_USER_ID_HERE', app_id='YOUR_APPLICATION_ID_HERE')\n"})})}),(0,t.jsx)(s.A,{value:"nodejs",label:"NodeJS",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-javascript",children:'/////////////////////////////////////////////////////////////////////////////////////////////\n// Initialize the gRPC-based client to communicate with the Clarifai platform.\n////////////////////////////////////////////////////////////////////////////////////////////\n\n// Import the Clarifai gRPC-based client\nconst {ClarifaiStub, grpc} = require("clarifai-nodejs-grpc");\n\n// Construct the stub object for accessing all the Clarifai API functionality\nconst stub = ClarifaiStub.grpc();\n\n////////////////////////////////////////////////////////////////////////////////////////////\n// This is where you set up the Metadata object that\'s used to authenticate. \n// This authorization will be used by every Clarifai API call.\n// Change the following authorization key to your own credentials\n// Example: metadata.set("authorization", "Key " + "a123457612345678");\n////////////////////////////////////////////////////////////////////////////////////////////\n\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + "YOUR_CLARIFAI_PAT_HERE");\n// Or, if you were to use an API Key:\n// metadata.set("authorization", "Key " + "YOUR_CLARIFAI_API_KEY_HERE");\n// Yes, the word \'Key\' appears in addition to the alphanumeric PAT or API Key\n\n/////////////////////////////////////////////////////////////////////////////////////////////\n// A UserAppIDSet object is needed when using a PAT. It contains two pieces of information: \n// user_id (your user id) and app_id (app id that contains the model of interest). \n// Both of them are specified as string values.\n/////////////////////////////////////////////////////////////////////////////////////////////\n\nuser_app_id: {\n    "user_id": "YOUR_USER_ID_HERE",\n    "app_id": "YOUR_APPLICATION_ID_HERE"\n}\n'})})}),(0,t.jsx)(s.A,{value:"java",label:"Java",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-java",children:'/////////////////////////////////////////////////////////////////////////////////////////////\n// Initialize the gRPC-based client to communicate with the Clarifai platform.\n////////////////////////////////////////////////////////////////////////////////////////////\n\n// Import the Clarifai gRPC-based objects needed\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\n\n/////////////////////////////////////////////////////////////////////////////////////////////\n// Construct the communications channel.\n// Construct the stub object for accessing all the Clarifai API functionality.\n// Set up the authorization that will be used by every Clarifai API call.\n/////////////////////////////////////////////////////////////////////////////////////////////\n\nChannel channel = ClarifaiChannel.INSTANCE.getGrpcChannel();\n\nV2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(channel)\n.withCallCredentials(new ClarifaiCallCredentials("YOUR_CLARIFAI_PAT_HERE"));\n\n// Or, if you were to use an API Key:\n//.withCallCredentials(new ClarifaiCallCredentials("YOUR_CLARIFAI_API_KEY_HERE"));\n\n/////////////////////////////////////////////////////////////////////////////////////////////\n// A UserAppIDSet object is needed when using a PAT. It contains two pieces of information: \n// user_id (your user id) and app_id (app id that contains the model of interest). \n// Both of them are specified as string values.\n/////////////////////////////////////////////////////////////////////////////////////////////\n\n.setUserAppId(UserAppIDSet.newBuilder().setUserId("YOUR_USER_ID_HERE").setAppId("YOUR_APPLICATION_ID_HERE"))\n'})})}),(0,t.jsx)(s.A,{value:"php",label:"PHP",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-php",children:"/////////////////////////////////////////////////////////////////////////////////////////////\n// Initialize the gRPC-based client to communicate with the Clarifai platform.\n////////////////////////////////////////////////////////////////////////////////////////////\n\n// Enable use of the ClarifaiClient object from the Clarifai namespace\nuse Clarifai\\ClarifaiClient;\n\n// Construct the initialization object for accessing all the Clarifai API functionality\n$client = ClarifaiClient::grpc();\n\n////////////////////////////////////////////////////////////////////////////////////////////\n// This is where you set up the Metadata object that's used to authenticate. \n// This authorization will be used by every Clarifai API call.\n// Change the following authorization key to your own credentials\n// Example: $metadata = ['Authorization' => ['Key a123457612345678']];\n////////////////////////////////////////////////////////////////////////////////////////////\n\n$metadata = ['Authorization' => ['Key YOUR_CLARIFAI_PAT_HERE']];\n\n// Or, if you were to use an API Key:\n// $metadata = ['Authorization' => ['Key YOUR_CLARIFAI_API_KEY_HERE']];\n// Yes, the word 'Key' appears in addition to the alphanumeric PAT or API Key\n\n/////////////////////////////////////////////////////////////////////////////////////////////\n// A UserAppIDSet object is needed when using a PAT. It contains two pieces of information: \n// user_id (your user id) and app_id (app id that contains the model of interest). \n// Both of them are specified as string values.\n/////////////////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\Api\\UserAppIDSet;\n\n$userDataObject = new UserAppIDSet([\n    'user_id' => 'YOUR_USER_ID_HERE', \n    'app_id' => 'YOUR_APPLICATION_ID_HERE' \n]);\n\n"})})}),(0,t.jsx)(s.A,{value:"cURL",label:"cURL",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-bash",children:'curl -X POST \\\n  -H "Authorization: Key YOUR_CLARIFAI_PAT_HERE" \\\n  -H "Content-Type: application/json" \\  \n'})})}),(0,t.jsx)(s.A,{value:"csharp",label:"C#",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-csharp",children:'using System.Threading.Tasks;\nusing Clarifai.API;\nnamespace YourNamespace\n{\n    public class YourClassName\n    {\n        public static async Task Main()\n        {\n            var client = new ClarifaiClient("YOUR_API_KEY");\n        }\n    }\n}\n'})})}),(0,t.jsx)(s.A,{value:"objective-c",label:"Objective-C",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectivec",children:'ClarifaiApp *app = [[ClarifaiApp alloc] initWithApiKey:@"YOUR_API_KEY"];\n'})})})]}),"\n",(0,t.jsx)(a.admonition,{type:"caution",children:(0,t.jsxs)(a.ul,{children:["\n",(0,t.jsx)(a.li,{children:"If your PAT or API Key does not have the required scope(s) to execute a given request, you will get an error message reporting the missing scopes and/or endpoints that are needed to execute the request."}),"\n",(0,t.jsx)(a.li,{children:"An invalid PAT or API Key may be reported as 'API key not found'."}),"\n",(0,t.jsx)(a.li,{children:"Failure to include the required PAT or API Key may result in 'Invalid request'."}),"\n"]})}),"\n",(0,t.jsx)(a.h2,{id:"cors-policy",children:"CORS Policy"}),"\n",(0,t.jsx)(a.p,{children:"Our APIs adhere to industry standards for Cross-Origin Resource Sharing (CORS) to ensure security and proper access control. The Access-Control-Allow-Origin header is limited to a predefined list of allowed origins."}),"\n",(0,t.jsx)(a.p,{children:"This means that only requests originating from allowed origins will receive a successful CORS response. If your Javascript application(s) encounter a CORS error while calling our APIs, it is likely that the origin is not on the allowed list."}),"\n",(0,t.jsx)(a.p,{children:"To avoid such issues, we recommend following established patterns such as using a backend server to proxy API requests or ensuring your application is hosted on an approved origin."}),"\n",(0,t.jsxs)(a.p,{children:["For more information about CORS and best practices, you can refer to ",(0,t.jsx)(a.a,{href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS",children:"this resource"}),"."]}),"\n",(0,t.jsxs)(a.p,{children:["If you need additional support or would like to request for your custom domain, please reach out to ",(0,t.jsx)(a.a,{href:"mailto:support@clarifai.com",children:"support@clarifai.com"})," for assistance."]})]})}function p(e={}){const{wrapper:a}={...(0,i.R)(),...e.components};return a?(0,t.jsx)(a,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},19365:(e,a,n)=>{n.d(a,{A:()=>s});n(96540);var t=n(18215);const i={tabItem:"tabItem_Ymn6"};var r=n(74848);function s(e){let{children:a,hidden:n,className:s}=e;return(0,r.jsx)("div",{role:"tabpanel",className:(0,t.A)(i.tabItem,s),hidden:n,children:a})}},11470:(e,a,n)=>{n.d(a,{A:()=>_});var t=n(96540),i=n(18215),r=n(23104),s=n(56347),o=n(205),l=n(57485),c=n(31682),u=n(70679);function h(e){return t.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,t.isValidElement)(e)&&function(e){const{props:a}=e;return!!a&&"object"==typeof a&&"value"in a}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function d(e){const{values:a,children:n}=e;return(0,t.useMemo)((()=>{const e=a??function(e){return h(e).map((e=>{let{props:{value:a,label:n,attributes:t,default:i}}=e;return{value:a,label:n,attributes:t,default:i}}))}(n);return function(e){const a=(0,c.X)(e,((e,a)=>e.value===a.value));if(a.length>0)throw new Error(`Docusaurus error: Duplicate values "${a.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[a,n])}function p(e){let{value:a,tabValues:n}=e;return n.some((e=>e.value===a))}function f(e){let{queryString:a=!1,groupId:n}=e;const i=(0,s.W6)(),r=function(e){let{queryString:a=!1,groupId:n}=e;if("string"==typeof a)return a;if(!1===a)return null;if(!0===a&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:a,groupId:n});return[(0,l.aZ)(r),(0,t.useCallback)((e=>{if(!r)return;const a=new URLSearchParams(i.location.search);a.set(r,e),i.replace({...i.location,search:a.toString()})}),[r,i])]}function m(e){const{defaultValue:a,queryString:n=!1,groupId:i}=e,r=d(e),[s,l]=(0,t.useState)((()=>function(e){let{defaultValue:a,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(a){if(!p({value:a,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${a}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return a}const t=n.find((e=>e.default))??n[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:a,tabValues:r}))),[c,h]=f({queryString:n,groupId:i}),[m,b]=function(e){let{groupId:a}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(a),[i,r]=(0,u.Dv)(n);return[i,(0,t.useCallback)((e=>{n&&r.set(e)}),[n,r])]}({groupId:i}),A=(()=>{const e=c??m;return p({value:e,tabValues:r})?e:null})();(0,o.A)((()=>{A&&l(A)}),[A]);return{selectedValue:s,selectValue:(0,t.useCallback)((e=>{if(!p({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);l(e),h(e),b(e)}),[h,b,r]),tabValues:r}}var b=n(92303);const A={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var y=n(74848);function g(e){let{className:a,block:n,selectedValue:t,selectValue:s,tabValues:o}=e;const l=[],{blockElementScrollPositionUntilNextRender:c}=(0,r.a_)(),u=e=>{const a=e.currentTarget,n=l.indexOf(a),i=o[n].value;i!==t&&(c(a),s(i))},h=e=>{let a=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const n=l.indexOf(e.currentTarget)+1;a=l[n]??l[0];break}case"ArrowLeft":{const n=l.indexOf(e.currentTarget)-1;a=l[n]??l[l.length-1];break}}a?.focus()};return(0,y.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.A)("tabs",{"tabs--block":n},a),children:o.map((e=>{let{value:a,label:n,attributes:r}=e;return(0,y.jsx)("li",{role:"tab",tabIndex:t===a?0:-1,"aria-selected":t===a,ref:e=>l.push(e),onKeyDown:h,onClick:u,...r,className:(0,i.A)("tabs__item",A.tabItem,r?.className,{"tabs__item--active":t===a}),children:n??a},a)}))})}function I(e){let{lazy:a,children:n,selectedValue:i}=e;const r=(Array.isArray(n)?n:[n]).filter(Boolean);if(a){const e=r.find((e=>e.props.value===i));return e?(0,t.cloneElement)(e,{className:"margin-top--md"}):null}return(0,y.jsx)("div",{className:"margin-top--md",children:r.map(((e,a)=>(0,t.cloneElement)(e,{key:a,hidden:e.props.value!==i})))})}function C(e){const a=m(e);return(0,y.jsxs)("div",{className:(0,i.A)("tabs-container",A.tabList),children:[(0,y.jsx)(g,{...a,...e}),(0,y.jsx)(I,{...a,...e})]})}function _(e){const a=(0,b.A)();return(0,y.jsx)(C,{...e,children:h(e.children)},String(a))}},28453:(e,a,n)=>{n.d(a,{R:()=>s,x:()=>o});var t=n(96540);const i={},r=t.createContext(i);function s(e){const a=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function o(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),t.createElement(r.Provider,{value:a},e.children)}}}]);
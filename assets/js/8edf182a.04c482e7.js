"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[2216],{11470:(n,e,t)=>{t.d(e,{A:()=>N});var a=t(96540),s=t(18215),i=t(23104),o=t(56347),r=t(205),l=t(57485),c=t(31682),u=t(70679);function d(n){return a.Children.toArray(n).filter(n=>"\n"!==n).map(n=>{if(!n||(0,a.isValidElement)(n)&&function(n){const{props:e}=n;return!!e&&"object"==typeof e&&"value"in e}(n))return n;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof n.type?n.type:n.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function p(n){const{values:e,children:t}=n;return(0,a.useMemo)(()=>{const n=e??function(n){return d(n).map(({props:{value:n,label:e,attributes:t,default:a}})=>({value:n,label:e,attributes:t,default:a}))}(t);return function(n){const e=(0,c.XI)(n,(n,e)=>n.value===e.value);if(e.length>0)throw new Error(`Docusaurus error: Duplicate values "${e.map(n=>n.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(n),n},[e,t])}function _({value:n,tabValues:e}){return e.some(e=>e.value===n)}function I({queryString:n=!1,groupId:e}){const t=(0,o.W6)(),s=function({queryString:n=!1,groupId:e}){if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!e)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return e??null}({queryString:n,groupId:e});return[(0,l.aZ)(s),(0,a.useCallback)(n=>{if(!s)return;const e=new URLSearchParams(t.location.search);e.set(s,n),t.replace({...t.location,search:e.toString()})},[s,t])]}function h(n){const{defaultValue:e,queryString:t=!1,groupId:s}=n,i=p(n),[o,l]=(0,a.useState)(()=>function({defaultValue:n,tabValues:e}){if(0===e.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!_({value:n,tabValues:e}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${e.map(n=>n.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const t=e.find(n=>n.default)??e[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:e,tabValues:i})),[c,d]=I({queryString:t,groupId:s}),[h,A]=function({groupId:n}){const e=function(n){return n?`docusaurus.tab.${n}`:null}(n),[t,s]=(0,u.Dv)(e);return[t,(0,a.useCallback)(n=>{e&&s.set(n)},[e,s])]}({groupId:s}),b=(()=>{const n=c??h;return _({value:n,tabValues:i})?n:null})();(0,r.A)(()=>{b&&l(b)},[b]);return{selectedValue:o,selectValue:(0,a.useCallback)(n=>{if(!_({value:n,tabValues:i}))throw new Error(`Can't select invalid tab value=${n}`);l(n),d(n),A(n)},[d,A,i]),tabValues:i}}var A=t(92303);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var f=t(74848);function E({className:n,block:e,selectedValue:t,selectValue:a,tabValues:o}){const r=[],{blockElementScrollPositionUntilNextRender:l}=(0,i.a_)(),c=n=>{const e=n.currentTarget,s=r.indexOf(e),i=o[s].value;i!==t&&(l(e),a(i))},u=n=>{let e=null;switch(n.key){case"Enter":c(n);break;case"ArrowRight":{const t=r.indexOf(n.currentTarget)+1;e=r[t]??r[0];break}case"ArrowLeft":{const t=r.indexOf(n.currentTarget)-1;e=r[t]??r[r.length-1];break}}e?.focus()};return(0,f.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":e},n),children:o.map(({value:n,label:e,attributes:a})=>(0,f.jsx)("li",{role:"tab",tabIndex:t===n?0:-1,"aria-selected":t===n,ref:n=>{r.push(n)},onKeyDown:u,onClick:c,...a,className:(0,s.A)("tabs__item",b.tabItem,a?.className,{"tabs__item--active":t===n}),children:e??n},n))})}function D({lazy:n,children:e,selectedValue:t}){const i=(Array.isArray(e)?e:[e]).filter(Boolean);if(n){const n=i.find(n=>n.props.value===t);return n?(0,a.cloneElement)(n,{className:(0,s.A)("margin-top--md",n.props.className)}):null}return(0,f.jsx)("div",{className:"margin-top--md",children:i.map((n,e)=>(0,a.cloneElement)(n,{key:e,hidden:n.props.value!==t}))})}function T(n){const e=h(n);return(0,f.jsxs)("div",{className:(0,s.A)("tabs-container",b.tabList),children:[(0,f.jsx)(E,{...e,...n}),(0,f.jsx)(D,{...e,...n})]})}function N(n){const e=(0,A.A)();return(0,f.jsx)(T,{...n,children:d(n.children)},String(e))}},19365:(n,e,t)=>{t.d(e,{A:()=>o});t(96540);var a=t(18215);const s={tabItem:"tabItem_Ymn6"};var i=t(74848);function o({children:n,hidden:e,className:t}){return(0,i.jsx)("div",{role:"tabpanel",className:(0,a.A)(s.tabItem,t),hidden:e,children:n})}},78859:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>S,contentTitle:()=>U,default:()=>w,frontMatter:()=>m,metadata:()=>a,toc:()=>C});const a=JSON.parse('{"id":"create/labeling/api/annotations-delete","title":"Delete Annotations","description":"Label your data.","source":"@site/docs/create/labeling/api/annotations-delete.md","sourceDirName":"create/labeling/api","slug":"/create/labeling/api/annotations-delete","permalink":"/create/labeling/api/annotations-delete","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"description":"Label your data.","sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Positive and Negative Annotations","permalink":"/create/labeling/api/positive-negative"},"next":{"title":"Tasks : Create, Get, Update, Delete","permalink":"/create/labeling/api/tasks"}}');var s=t(74848),i=t(28453),o=t(11470),r=t(19365),l=t(73748);const c="#######################################################################\n# In this section, we set the user authentication, app ID, input IDs, \n# and annotation IDs. Change these strings to run your own example.\n#######################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these based on the annotations you want to bulk delete \nINPUT_ID_1 = 'b76fe0adb0294906942f169bb1f6cacf'\nINPUT_ID_2 = 'e838fac8da9d40c89f2291a6496593da'\nANNOTATION_ID_1 = '35c37cda9ad8460fae12b2b2b6a23f1d'\nANNOTATION_ID_2 = '63d69000ae3343d0b70b892ea3dcb01d'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\ndelete_annotations_response = stub.DeleteAnnotations(\n    service_pb2.DeleteAnnotationsRequest(\n        user_app_id=userDataObject,  # The userDataObject is created in the overview and is required when using a PAT\n        input_ids=[INPUT_ID_1, INPUT_ID_2],\n        ids=[ANNOTATION_ID_1, ANNOTATION_ID_2]\n    ),\n    metadata=metadata\n)\n\nif delete_annotations_response.status.code != status_code_pb2.SUCCESS:\n    print(delete_annotations_response.status)   \n    raise Exception(\"Delete annotations failed, status: \" + delete_annotations_response.status.description)\n    \n",u="##########################################################################\n# In this section, we set the user authentication, app ID, and input IDs. \n# Change these strings to run your own example.\n##########################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these based on the annotations you want to bulk delete \nINPUT_ID_1 = '53d0362a9dfa4e03b2293375e2d0db73'\nINPUT_ID_2 = '00f6d742124147ac8ca7788f73736fb9' \n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\ndelete_annotations_response = stub.DeleteAnnotations(\n    service_pb2.DeleteAnnotationsRequest(\n        user_app_id=userDataObject,  # The userDataObject is created in the overview and is required when using a PAT\n        input_ids=[INPUT_ID_1, INPUT_ID_2]\n    ),\n    metadata=metadata\n)\n\nif delete_annotations_response.status.code != status_code_pb2.SUCCESS:\n    print(delete_annotations_response.status)\n    raise Exception(\"Delete annotations failed, status: \" + delete_annotations_response.status.description)\n\n",d="#####################################################################\n# In this section, we set the user authentication, app ID, input ID, \n# and annotation ID. Change these strings to run your own example.\n#####################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these based on the annotation you want to delete \nINPUT_ID = '53d0362a9dfa4e03b2293375e2d0db73'\nANNOTATION_ID = '300b8e39a65e4f33ae4e15e86eaf4a3b'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\ndelete_annotation_response = stub.DeleteAnnotation(\n    service_pb2.DeleteAnnotationRequest(\n        user_app_id=userDataObject,  # The userDataObject is created in the overview and is required when using a PAT\n        input_id=INPUT_ID,\n        annotation_id=ANNOTATION_ID\n    ),\n    metadata=metadata\n)\n\nif delete_annotation_response.status.code != status_code_pb2.SUCCESS:\n    print(delete_annotation_response.status)\n    raise Exception(\"Delete annotations failed, status: \" + delete_annotation_response.status.description)\n",p="\x3c!--index.html file--\x3e\n\n<script>\n    ///////////////////////////////////////////////////////////////////////////\n    //  In this section, we set the user authentication, app ID, input IDs, \n    // and annotation IDs. Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = 'YOUR_USER_ID_HERE';\n    // Your PAT (Personal Access Token) can be found in the Account's Security section\n    const PAT = 'YOUR_PAT_HERE';\n    const APP_ID = 'YOUR_APP_ID_HERE';\n    // Change these based on the annotations you want to bulk delete \n    const INPUT_ID_1 = 'c99f1b557d1d43d1916b46f8ce4a0487';\n    const INPUT_ID_2 = '7c5f489bcafe43fe8a71c68091cb64ce';\n    const ANNOTATION_ID_1 = '6793f476f6c24712b447316ae2fc12c1';\n    const ANNOTATION_ID_2 = 'd703cafff61b45bbb4d8c1d9575420b3';\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        \"user_app_id\": {\n            \"user_id\": USER_ID,\n            \"app_id\": APP_ID\n        },\n        \"input_ids\": [INPUT_ID_1, INPUT_ID_2],\n        \"ids\": [ANNOTATION_ID_1, ANNOTATION_ID_2]\n    });\n\n    const requestOptions = {\n        method: 'DELETE',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        },\n        body: raw\n    };\n\n    fetch(\"https://api.clarifai.com/v2/annotations\", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n\n<\/script>",_="\x3c!--index.html file--\x3e\n\n<script>\n    ////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and input IDs. \n    // Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = 'YOUR_USER_ID_HERE';\n    // Your PAT (Personal Access Token) can be found in the Account's Security section\n    const PAT = 'YOUR_PAT_HERE';\n    const APP_ID = 'YOUR_APP_ID_HERE';\n    // Change these based on the annotations you want to bulk delete \n    const INPUT_ID_1 = 'b5585a6869d34c04bbcaf631e7cd5816';\n    const INPUT_ID_2 = 'a8748df4938447e4844b2f505c8eaaef';\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        \"user_app_id\": {\n            \"user_id\": USER_ID,\n            \"app_id\": APP_ID\n        },\n        \"input_ids\": [INPUT_ID_1, INPUT_ID_2]\n    });\n\n    const requestOptions = {\n        method: 'DELETE',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        },\n        body: raw\n    };\n\n    fetch(\"https://api.clarifai.com/v2/annotations\", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n\n<\/script>",I="\x3c!--index.html file--\x3e\n\n<script>\n    ///////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, input ID, \n    // and annotation ID. Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = 'YOUR_USER_ID_HERE';\n    // Your PAT (Personal Access Token) can be found in the Account's Security section\n    const PAT = 'YOUR_PAT_HERE';\n    const APP_ID = 'YOUR_APP_ID_HERE';\n    // Change these based on the annotation you want to delete \n    const INPUT_ID = 'c99f1b557d1d43d1916b46f8ce4a0487';\n    const ANNOTATION_ID = '244b8a39e51944ffb43bde7f6d33f0a7';\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const requestOptions = {\n        method: 'DELETE',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        }\n    };\n\n    fetch(`https://api.clarifai.com/v2/users/${USER_ID}/apps/${APP_ID}/inputs/${INPUT_ID}/annotations/${ANNOTATION_ID}`, requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n\n<\/script>",h="//index.js file\n\n///////////////////////////////////////////////////////////////////////////\n//  In this section, we set the user authentication, app ID, input IDs, \n// and annotation IDs. Change these strings to run your own example.\n///////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = 'YOUR_USER_ID_HERE';\n// Your PAT (Personal Access Token) can be found in the Account's Security section\nconst PAT = 'YOUR_PAT_HERE';\nconst APP_ID = 'YOUR_APP_ID_HERE';\n// Change these based on the annotations you want to bulk delete \nconst INPUT_ID_1 = 'c99f1b557d1d43d1916b46f8ce4a0487';\nconst INPUT_ID_2 = '7c5f489bcafe43fe8a71c68091cb64ce';\nconst ANNOTATION_ID_1 = '9bcbdbc381c34a6da64bb3d635e82833';\nconst ANNOTATION_ID_2 = 'e5f8310fbd824354b657050132311e64';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require(\"clarifai-nodejs-grpc\");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set(\"authorization\", \"Key \" + PAT);\n\nstub.DeleteAnnotations(\n    {\n        user_app_id: {\n            \"user_id\": USER_ID,\n            \"app_id\": APP_ID\n        },\n        input_ids: [INPUT_ID_1, INPUT_ID_2],\n        annotation_ids: [ANNOTATION_ID_1, ANNOTATION_ID_2]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error(\"Delete annotations failed, status: \" + response.status.description);\n        }\n    }\n);",A='//index.js file\n\n////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and input IDs. \n// Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n// Change these based on the annotations you want to bulk delete \nconst INPUT_ID_1 = \'b5585a6869d34c04bbcaf631e7cd5816\';\nconst INPUT_ID_2 = \'a8748df4938447e4844b2f505c8eaaef\';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\n\nstub.DeleteAnnotations(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        input_ids: [INPUT_ID_1, INPUT_ID_2]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Delete annotations failed, status: " + response.status.description);\n        }\n    }\n);',b='//index.js file\n\n///////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, input ID, \n// and annotation ID. Change these strings to run your own example.\n///////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n// Change these based on the annotation you want to delete \nconst INPUT_ID = \'c99f1b557d1d43d1916b46f8ce4a0487\';\nconst ANNOTATION_ID = \'b65d2a9106ba448382a0cee540f7c582\';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.DeleteAnnotation(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        input_id: INPUT_ID,\n        annotation_id: ANNOTATION_ID\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Delete annotation failed, status: " + response.status.description);\n        }\n    }\n);',f='package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.status.BaseResponse;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    /////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, input IDs, \n    // and annotation IDs. Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these based on the annotations you want to bulk delete \n    static final String INPUT_ID_1 = "c99f1b557d1d43d1916b46f8ce4a0487";\n    static final String INPUT_ID_2 = "7c5f489bcafe43fe8a71c68091cb64ce";\n    static final String ANNOTATION_ID_1 = "9bcbdbc381c34a6da64bb3d635e82833";\n    static final String ANNOTATION_ID_2 = "e5f8310fbd824354b657050132311e64";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\t\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        BaseResponse deleteAnnotationsResponse = stub.deleteAnnotations(\n            DeleteAnnotationsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .addInputIds(INPUT_ID_1)\n            .addInputIds(INPUT_ID_2)\n            .addIds(ANNOTATION_ID_1)\n            .addIds(ANNOTATION_ID_2)\n            .build()\n        );\n\n        if (deleteAnnotationsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Delete annotations failed, status: " + deleteAnnotationsResponse.getStatus());\n        }\n\n    }\n\n}',E='package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.status.BaseResponse;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    ////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and input IDs. \n    // Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these based on the annotations you want to bulk delete \n    static final String INPUT_ID_1 = "b5585a6869d34c04bbcaf631e7cd5816";\n    static final String INPUT_ID_2 = "a8748df4938447e4844b2f505c8eaaef";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\t\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        BaseResponse deleteAnnotationsResponse = stub.deleteAnnotations(\n            DeleteAnnotationsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .addInputIds(INPUT_ID_1)\n            .addInputIds(INPUT_ID_2)\n            .build()\n        );\n\n        if (deleteAnnotationsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Delete annotations failed, status: " + deleteAnnotationsResponse.getStatus());\n        }\n\n    }\n\n}',D='package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.status.BaseResponse;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    /////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, input ID, \n    // and annotation ID. Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these based on the annotation you want to delete \n    static final String INPUT_ID = "c99f1b557d1d43d1916b46f8ce4a0487";\n    static final String ANNOTATION_ID = "b65d2a9106ba448382a0cee540f7c582";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\t\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        BaseResponse deleteAnnotationResponse = stub.deleteAnnotation(\n            DeleteAnnotationRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .setInputId(INPUT_ID)\n            .setAnnotationId(ANNOTATION_ID)\n            .build()\n        );\n\n        if (deleteAnnotationResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Delete annotation failed, status: " + deleteAnnotationResponse.getStatus());\n        }\n\n    }\n\n}',T="",N="",g="",P='curl -X DELETE "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/annotations"  \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -d \'{\n    "input_ids":["YOUR_INPUT_ID_1_HERE","YOUR_INPUT_ID_2_HERE"],\n    "ids":["YOUR_ANNOTATION_ID_1_HERE", "YOUR_ANNOTATION_ID_2_HERE"]\n  }\'\n  ',R='curl -X DELETE "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/annotations" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -d \'{\n    "input_ids":["YOUR_INPUT_ID_1_HERE","YOUR_INPUT_ID_2_HERE"]\n  }\'',O='curl -X DELETE "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/inputs/YOUR_INPUT_ID_HERE/annotations/YOUR_ANNOTATION_ID_HERE" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  ',m={description:"Label your data.",sidebar_position:4},U="Delete Annotations",S={},C=[{value:"Delete Annotation by Input ID and Annotation ID",id:"delete-annotation-by-input-id-and-annotation-id",level:3},{value:"Bulk Delete Annotations by Input IDs and Annotation IDs",id:"bulk-delete-annotations-by-input-ids-and-annotation-ids",level:3},{value:"Bulk Delete All Annotations by Input IDs",id:"bulk-delete-all-annotations-by-input-ids",level:3}];function v(n){const e={a:"a",admonition:"admonition",h1:"h1",h3:"h3",header:"header",p:"p",...(0,i.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"delete-annotations",children:"Delete Annotations"})}),"\n",(0,s.jsx)(e.admonition,{type:"info",children:(0,s.jsxs)(e.p,{children:["Before using the ",(0,s.jsx)(e.a,{href:"https://docs.clarifai.com/additional-resources/api-overview/python-sdk",children:"Python SDK"}),", ",(0,s.jsx)(e.a,{href:"https://docs.clarifai.com/additional-resources/api-overview/nodejs-sdk",children:"Node.js SDK"}),", or any of our ",(0,s.jsx)(e.a,{href:"https://docs.clarifai.com/additional-resources/api-overview/grpc-clients",children:"gRPC clients"}),", ensure they are properly installed on your machine. Refer to their respective installation guides for instructions on how to install and initialize them."]})}),"\n",(0,s.jsx)(e.h3,{id:"delete-annotation-by-input-id-and-annotation-id",children:"Delete Annotation by Input ID and Annotation ID"}),"\n",(0,s.jsx)(e.p,{children:"Below is an example of how to delete a single annotation by input ID and annotation ID."}),"\n",(0,s.jsxs)(o.A,{groupId:"code",children:[(0,s.jsx)(r.A,{value:"python",label:"Python (gRPC)",children:(0,s.jsx)(l.A,{className:"language-python",children:d})}),(0,s.jsx)(r.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(l.A,{className:"language-javascript",children:I})}),(0,s.jsx)(r.A,{value:"nodejs",label:"Node.js (gRPC)",children:(0,s.jsx)(l.A,{className:"language-javascript",children:b})}),(0,s.jsx)(r.A,{value:"java",label:"Java (gRPC)",children:(0,s.jsx)(l.A,{className:"language-java",children:D})}),(0,s.jsx)(r.A,{value:"php",label:"PHP (gRPC)",children:(0,s.jsx)(l.A,{className:"language-php",children:g})}),(0,s.jsx)(r.A,{value:"curl",label:"cURL",children:(0,s.jsx)(l.A,{className:"language-bash",children:O})})]}),"\n",(0,s.jsx)(e.h3,{id:"bulk-delete-annotations-by-input-ids-and-annotation-ids",children:"Bulk Delete Annotations by Input IDs and Annotation IDs"}),"\n",(0,s.jsx)(e.p,{children:"You can delete multiple annotations in one API call. You need to provide a list of input IDs and a list of annotation IDs. The number of input IDs has to match the number of annotation IDs."}),"\n",(0,s.jsx)(e.p,{children:"Below is an example of how to do that."}),"\n",(0,s.jsxs)(o.A,{groupId:"code",children:[(0,s.jsx)(r.A,{value:"python",label:"Python (gRPC)",children:(0,s.jsx)(l.A,{className:"language-python",children:c})}),(0,s.jsx)(r.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(l.A,{className:"language-javascript",children:p})}),(0,s.jsx)(r.A,{value:"nodejs",label:"Node.js (gRPC)",children:(0,s.jsx)(l.A,{className:"language-javascript",children:h})}),(0,s.jsx)(r.A,{value:"java",label:"Java (gRPC)",children:(0,s.jsx)(l.A,{className:"language-java",children:f})}),(0,s.jsx)(r.A,{value:"php",label:"PHP (gRPC)",children:(0,s.jsx)(l.A,{className:"language-php",children:T})}),(0,s.jsx)(r.A,{value:"curl",label:"cURL",children:(0,s.jsx)(l.A,{className:"language-bash",children:P})})]}),"\n",(0,s.jsx)(e.h3,{id:"bulk-delete-all-annotations-by-input-ids",children:"Bulk Delete All Annotations by Input IDs"}),"\n",(0,s.jsx)(e.p,{children:"To delete all annotations of a given input, you just need to set their input ID(s). This will delete all annotations for these input(s), EXCEPT the input level annotations, which only get deleted if you delete the inputs themselves."}),"\n",(0,s.jsx)(e.p,{children:"Below is an example of how to do that."}),"\n",(0,s.jsxs)(o.A,{groupId:"code",children:[(0,s.jsx)(r.A,{value:"python",label:"Python (gRPC)",children:(0,s.jsx)(l.A,{className:"language-python",children:u})}),(0,s.jsx)(r.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(l.A,{className:"language-javascript",children:_})}),(0,s.jsx)(r.A,{value:"nodejs",label:"Node.js (gRPC)",children:(0,s.jsx)(l.A,{className:"language-javascript",children:A})}),(0,s.jsx)(r.A,{value:"java",label:"Java (gRPC)",children:(0,s.jsx)(l.A,{className:"language-java",children:E})}),(0,s.jsx)(r.A,{value:"php",label:"PHP (gRPC)",children:(0,s.jsx)(l.A,{className:"language-php",children:N})}),(0,s.jsx)(r.A,{value:"curl",label:"cURL",children:(0,s.jsx)(l.A,{className:"language-bash",children:R})})]})]})}function w(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(v,{...n})}):v(n)}}}]);
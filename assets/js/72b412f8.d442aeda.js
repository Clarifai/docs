"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[6206],{85162:(e,t,a)=>{a.d(t,{Z:()=>s});var n=a(67294),r=a(86010);const i={tabItem:"tabItem_Ymn6"};function s(e){let{children:t,hidden:a,className:s}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(i.tabItem,s),hidden:a},t)}},74866:(e,t,a)=>{a.d(t,{Z:()=>v});var n=a(87462),r=a(67294),i=a(86010),s=a(12466),o=a(16550),l=a(91980),c=a(67392),u=a(50012);function p(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:a,attributes:n,default:r}}=e;return{value:t,label:a,attributes:n,default:r}}))}function d(e){const{values:t,children:a}=e;return(0,r.useMemo)((()=>{const e=t??p(a);return function(e){const t=(0,c.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,a])}function m(e){let{value:t,tabValues:a}=e;return a.some((e=>e.value===t))}function h(e){let{queryString:t=!1,groupId:a}=e;const n=(0,o.k6)(),i=function(e){let{queryString:t=!1,groupId:a}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:t,groupId:a});return[(0,l._X)(i),(0,r.useCallback)((e=>{if(!i)return;const t=new URLSearchParams(n.location.search);t.set(i,e),n.replace({...n.location,search:t.toString()})}),[i,n])]}function f(e){const{defaultValue:t,queryString:a=!1,groupId:n}=e,i=d(e),[s,o]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const n=a.find((e=>e.default))??a[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:i}))),[l,c]=h({queryString:a,groupId:n}),[p,f]=function(e){let{groupId:t}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(t),[n,i]=(0,u.Nk)(a);return[n,(0,r.useCallback)((e=>{a&&i.set(e)}),[a,i])]}({groupId:n}),g=(()=>{const e=l??p;return m({value:e,tabValues:i})?e:null})();(0,r.useLayoutEffect)((()=>{g&&o(g)}),[g]);return{selectedValue:s,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);o(e),c(e),f(e)}),[c,f,i]),tabValues:i}}var g=a(72389);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function _(e){let{className:t,block:a,selectedValue:o,selectValue:l,tabValues:c}=e;const u=[],{blockElementScrollPositionUntilNextRender:p}=(0,s.o5)(),d=e=>{const t=e.currentTarget,a=u.indexOf(t),n=c[a].value;n!==o&&(p(t),l(n))},m=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const a=u.indexOf(e.currentTarget)+1;t=u[a]??u[0];break}case"ArrowLeft":{const a=u.indexOf(e.currentTarget)-1;t=u[a]??u[u.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":a},t)},c.map((e=>{let{value:t,label:a,attributes:s}=e;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:o===t?0:-1,"aria-selected":o===t,key:t,ref:e=>u.push(e),onKeyDown:m,onClick:d},s,{className:(0,i.Z)("tabs__item",b.tabItem,s?.className,{"tabs__item--active":o===t})}),a??t)})))}function y(e){let{lazy:t,children:a,selectedValue:n}=e;const i=(Array.isArray(a)?a:[a]).filter(Boolean);if(t){const e=i.find((e=>e.props.value===n));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},i.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==n}))))}function k(e){const t=f(e);return r.createElement("div",{className:(0,i.Z)("tabs-container",b.tabList)},r.createElement(_,(0,n.Z)({},e,t)),r.createElement(y,(0,n.Z)({},e,t)))}function v(e){const t=(0,g.Z)();return r.createElement(k,(0,n.Z)({key:String(t)},e))}},94346:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>b,contentTitle:()=>f,default:()=>v,frontMatter:()=>h,metadata:()=>g,toc:()=>_});var n=a(87462),r=(a(67294),a(3905)),i=a(74866),s=a(85162),o=a(90814);const l="from clarifai.client.search import Search\nfrom clarifai.client.input import Inputs\nfrom PIL import Image\nimport requests\nfrom IPython.display import display\n\n# Define your Clarifai credentials\nUSER_ID = ''\nAPP_ID = ''\nPAT = ''\n\n# Initialize the Clarifai client with your credentials\nclient = User(user_id=USER_ID)\n\n# Create an application within Clarifai with the specified ID and base workflow\n# The 'Universal' workflow is a general-purpose workflow that can handle various types of data\napp = client.create_app(app_id=APP_ID, base_workflow=\"Universal\", pat=PAT)\n\n# Initialize a search object for the specified user, application, and access token\ns = Search(user_id=USER_ID, app_id=APP_ID, pat=PAT)\n\n# Initialize an Inputs object for the specified user, application, and access token\ninp_obj = Inputs(user_id=USER_ID, app_id=APP_ID, pat=PAT)\n\n# Prepare an input protobuf message from the provided image URL\ninput_proto = inp_obj.get_input_from_url(\n        input_id=\"dog-tiff\",\n        image_url=\"https://samples.clarifai.com/dog.tiff\",\n        labels=[\"dog\"],\n        geo_info=[-30.0, 40.0],  # longitude, latitude\n)\n\n# Upload the prepared input protobuf message to the Clarifai application\ninp_obj.upload_inputs([input_proto])\n\n# Perform a search query with specified ranks and filters\nresponse = s.query(ranks=[{\"image_url\": \"https://samples.clarifai.com/dog.tiff\"}], filters=[{\"concepts\": [{'name':'dog','value':1}]}])\n\n# Process the response to extract the URL of the first matching image\nresp = list(response)\nfor r in resp:\n    hit = r.hits[0].input.data.image.url\n    break\n\n# Print the URL of the matched image\nprint(hit)\n\n# Open the matched image URL, resize it, and display it\nhit_img = Image.open(requests.get(hit, stream=True).raw).resize((300,250))\ndisplay(hit_img)",c='# Import necessary modules\nfrom clarifai.client.search import Search\nfrom clarifai.client.user import User\nfrom google.protobuf import struct_pb2\nfrom PIL import Image\nimport requests\nfrom IPython.display import display\n\n# User-specific credentials\nUSER_ID = \'\'  # User ID\nAPP_ID = \'\'   # Application ID\nPAT = \'\'      # Personal Access Token\n\n# Define dataset and image URL\nCREATE_DATASET_ID = "ci_search_dataset"\nDOG_IMG_URL = "https://samples.clarifai.com/dog.tiff"\n\n# Create Clarifai application\napp_obj = User(user_id=USER_ID, pat=PAT).create_app(app_id=APP_ID, base_workflow="General")\n\n# Create a dataset\ndataset_obj = app_obj.create_dataset(CREATE_DATASET_ID)\n\n# Initialize inputs object\ninp_obj = app_obj.inputs()\n\n# Define metadata for the image\nmetadata = struct_pb2.Struct()\nmetadata.update({"Breed": "Saint Bernard"})\n\n# Get input from URL and upload it\ninput_proto = inp_obj.get_input_from_url(\n        dataset_id=CREATE_DATASET_ID,\n        input_id="dog-tiff",\n        image_url=DOG_IMG_URL,\n        labels=["dog"],\n        geo_info=[-30.0, 40.0],  # longitude, latitude\n        metadata=metadata)\ninp_obj.upload_inputs([input_proto])\n\n# Define OR filter\nor_filter = [{  # OR\n              "concepts": [{\n                  "name": "deer",\n                  "value": 1\n              }, {\n                  "name": "dog",\n                  "value": 1\n              }]\n          }]\n\n# Perform search with OR filter\nsearch = app_obj.search()\nres = search.query(ranks=[{"image_url": "https://samples.clarifai.com/dog.tiff"}], filters=or_filter)\n\n# Process search results\nresp = list(res)\nfor r in resp:\n    hit = r.hits[0].input.data.image.url\n    break\n\n# Display the image\nprint(hit)\nhit_img = Image.open(requests.get(hit, stream=True).raw).resize((300,250))\ndisplay(hit_img)',u='# Import necessary modules\nfrom clarifai.client.search import Search\nfrom clarifai.client.user import User\nfrom google.protobuf import struct_pb2\nfrom PIL import Image\nimport requests\nfrom IPython.display import display\n\n# Define user-specific credentials\nUSER_ID=\'\'\nAPP_ID=\'\'\nPAT=\'\'\n\n# Define constants\nCREATE_DATASET_ID = "ci_search_dataset"\nDOG_IMG_URL = "https://samples.clarifai.com/dog.tiff"\n\n# Create a new application\napp_obj = User(user_id=USER_ID, pat=PAT).create_app(app_id=APP_ID, base_workflow="General")\n\n# Create a new dataset\ndataset_obj = app_obj.create_dataset(CREATE_DATASET_ID)\n\n# Initialize Inputs object for uploading data\ninp_obj = app_obj.inputs()\n\n# Define metadata for the input\nmetadata = struct_pb2.Struct()\nmetadata.update({"Breed": "Saint Bernard"})\n\n# Get input from URL and upload it to the dataset\ninput_proto = inp_obj.get_input_from_url(\n        dataset_id=CREATE_DATASET_ID,\n        input_id="dog-tiff",\n        image_url=DOG_IMG_URL,\n        labels=["dog"],\n        geo_info=[-30.0, 40.0],  # longitude, latitude\n        metadata=metadata)\ninp_obj.upload_inputs([input_proto])\n\n# Define an AND filter\nand_filter = [\n              {  # AND\n                  "concepts": [{\n                      "name": "dog",\n                      "value": 1\n                  }]\n              },\n              {\n                  "concepts": [{\n                      "name": "deer",\n                      "value": 1\n                  }]\n              }\n          ]\n\n# Create a search object\nsearch = app_obj.search()\n\n# Perform a search query with the specified rank and AND filter\nres = search.query(ranks=[{"image_url": "https://samples.clarifai.com/dog.tiff"}], filters=and_filter)\n\n# Convert search results to a list\nresp = list(res)\n\n# Print the length of the search results\nprint(len(resp)) # Should be zero',p="https://samples.clarifai.com/dog.tiff",d="https://samples.clarifai.com/dog.tiff",m="0",h={description:"Learn how to perform Advanced Search",sidebar_position:3},f="Advance Search Operations",g={unversionedId:"python-sdk/Search/Advance-Search",id:"python-sdk/Search/Advance-Search",title:"Advance Search Operations",description:"Learn how to perform Advanced Search",source:"@site/docs/python-sdk/Search/Advance-Search.md",sourceDirName:"python-sdk/Search",slug:"/python-sdk/Search/Advance-Search",permalink:"/python-sdk/Search/Advance-Search",draft:!1,editUrl:"https://github.com/Clarifai/docs/blob/main/docs/python-sdk/Search/Advance-Search.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{description:"Learn how to perform Advanced Search",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Filter",permalink:"/python-sdk/Search/Filter"},next:{title:"SDK Notebook Examples",permalink:"/python-sdk/notebook-examples"}},b={},_=[{value:"Custom Concepts",id:"custom-concepts",level:2},{value:"OR",id:"or",level:2},{value:"AND",id:"and",level:2}],y={toc:_},k="wrapper";function v(e){let{components:t,...a}=e;return(0,r.kt)(k,(0,n.Z)({},y,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"advance-search-operations"},"Advance Search Operations"),(0,r.kt)("p",null,"In this section we are showcasing Clarifai\u2019s  powerful capabilities for refining search results based on complex criteria. The use of AND and OR operations allows users to perform more nuanced searches, combining multiple conditions to precisely filter content. With AND, users can narrow down results to items that meet all specified criteria simultaneously, while OR expands the search scope to include items that meet any of the provided conditions. Additionally, leveraging custom concepts enables users to define their own labels or categories, further enhancing search flexibility."),(0,r.kt)("h2",{id:"custom-concepts"},"Custom Concepts"),(0,r.kt)("p",null,'Searching with custom concepts in Clarifai involves associating user-defined labels or concepts with data, enabling more targeted searches. By specifying custom concepts like "dog," users can retrieve relevant results efficiently. This approach streamlines tasks such as content organization and classification, enhancing applications like image recognition and content moderation.'),(0,r.kt)("p",null,"Click ",(0,r.kt)("a",{parentName:"p",href:"https://docs.clarifai.com/api-guide/search/rank"},"here")," to know more about Custom Concept search."),(0,r.kt)(i.Z,{mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,r.kt)(o.Z,{className:"language-python",mdxType:"CodeBlock"},l))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Output"),(0,r.kt)(o.Z,{className:"language-text",mdxType:"CodeBlock"},p),(0,r.kt)("img",{src:"/img/python-sdk/as_cc.png",width:"700",height:"700"})),(0,r.kt)("h2",{id:"or"},"OR"),(0,r.kt)("p",null,"In Clarifai, the OR search operation provides users with a flexible means to retrieve search results that satisfy one or more specified criteria. By employing the OR filter, users can broaden their search scope to include items that meet any of the provided conditions."),(0,r.kt)("p",null,"Click ",(0,r.kt)("a",{parentName:"p",href:"https://docs.clarifai.com/api-guide/search/legacy-search/"},"here")," to know more about OR search."),(0,r.kt)(i.Z,{mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,r.kt)(o.Z,{className:"language-python",mdxType:"CodeBlock"},c))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Output"),(0,r.kt)(o.Z,{className:"language-text",mdxType:"CodeBlock"},d),(0,r.kt)("img",{src:"/img/python-sdk/as_or.png",width:"700",height:"700"})),(0,r.kt)("h2",{id:"and"},"AND"),(0,r.kt)("p",null,'In Clarifai, the AND operation allows users to refine search results by specifying multiple criteria that must all be met simultaneously. When conducting an AND search, the system retrieves items that fulfill all specified conditions, resulting in a subset of results that satisfy the intersection of the provided criteria. For example, if a user searches for images containing both "dog" and "deer" concepts, only images that are labeled as both dogs and deers will be returned.'),(0,r.kt)("p",null,"Click ",(0,r.kt)("a",{parentName:"p",href:"https://docs.clarifai.com/api-guide/search/legacy-search/"},"here")," to know more about AND search."),(0,r.kt)(i.Z,{mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,r.kt)(o.Z,{className:"language-python",mdxType:"CodeBlock"},u))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Output"),(0,r.kt)(o.Z,{className:"language-text",mdxType:"CodeBlock"},m)))}v.isMDXComponent=!0}}]);
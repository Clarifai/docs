"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[4053],{3905:function(e,n,t){t.d(n,{Zo:function(){return l},kt:function(){return m}});var a=t(67294);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function p(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,a,s=function(e,n){if(null==e)return{};var t,a,s={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var o=a.createContext({}),u=function(e){var n=a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):p(p({},n),e)),t},l=function(e){var n=u(e.components);return a.createElement(o.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,s=e.mdxType,i=e.originalType,o=e.parentName,l=r(e,["components","mdxType","originalType","parentName"]),d=u(t),m=s,h=d["".concat(o,".").concat(m)]||d[m]||c[m]||i;return t?a.createElement(h,p(p({ref:n},l),{},{components:t})):a.createElement(h,p({ref:n},l))}));function m(e,n){var t=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var i=t.length,p=new Array(i);p[0]=d;var r={};for(var o in n)hasOwnProperty.call(n,o)&&(r[o]=n[o]);r.originalType=e,r.mdxType="string"==typeof e?e:s,p[1]=r;for(var u=2;u<i;u++)p[u]=t[u];return a.createElement.apply(null,p)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},58215:function(e,n,t){var a=t(67294);n.Z=function(e){var n=e.children,t=e.hidden,s=e.className;return a.createElement("div",{role:"tabpanel",hidden:t,className:s},n)}},26396:function(e,n,t){t.d(n,{Z:function(){return d}});var a=t(87462),s=t(67294),i=t(72389),p=t(79443);var r=function(){var e=(0,s.useContext)(p.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},o=t(53810),u=t(86010),l="tabItem_vU9c";function c(e){var n,t,i,p=e.lazy,c=e.block,d=e.defaultValue,m=e.values,h=e.groupId,I=e.className,_=s.Children.map(e.children,(function(e){if((0,s.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),g=null!=m?m:_.map((function(e){var n=e.props;return{value:n.value,label:n.label,attributes:n.attributes}})),f=(0,o.lx)(g,(function(e,n){return e.value===n.value}));if(f.length>0)throw new Error('Docusaurus error: Duplicate values "'+f.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var v=null===d?d:null!=(n=null!=d?d:null==(t=_.find((function(e){return e.props.default})))?void 0:t.props.value)?n:null==(i=_[0])?void 0:i.props.value;if(null!==v&&!g.some((function(e){return e.value===v})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+v+'" but none of its children has the corresponding value. Available values are: '+g.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var w=r(),b=w.tabGroupChoices,y=w.setTabGroupChoices,R=(0,s.useState)(v),T=R[0],k=R[1],S=[],U=(0,o.o5)().blockElementScrollPositionUntilNextRender;if(null!=h){var N=b[h];null!=N&&N!==T&&g.some((function(e){return e.value===N}))&&k(N)}var P=function(e){var n=e.currentTarget,t=S.indexOf(n),a=g[t].value;a!==T&&(U(n),k(a),null!=h&&y(h,a))},C=function(e){var n,t=null;switch(e.key){case"ArrowRight":var a=S.indexOf(e.currentTarget)+1;t=S[a]||S[0];break;case"ArrowLeft":var s=S.indexOf(e.currentTarget)-1;t=S[s]||S[S.length-1]}null==(n=t)||n.focus()};return s.createElement("div",{className:"tabs-container"},s.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,u.Z)("tabs",{"tabs--block":c},I)},g.map((function(e){var n=e.value,t=e.label,i=e.attributes;return s.createElement("li",(0,a.Z)({role:"tab",tabIndex:T===n?0:-1,"aria-selected":T===n,key:n,ref:function(e){return S.push(e)},onKeyDown:C,onFocus:P,onClick:P},i,{className:(0,u.Z)("tabs__item",l,null==i?void 0:i.className,{"tabs__item--active":T===n})}),null!=t?t:n)}))),p?(0,s.cloneElement)(_.filter((function(e){return e.props.value===T}))[0],{className:"margin-vert--md"}):s.createElement("div",{className:"margin-vert--md"},_.map((function(e,n){return(0,s.cloneElement)(e,{key:n,hidden:e.props.value!==T})}))))}function d(e){var n=(0,i.Z)();return s.createElement(c,(0,a.Z)({key:String(n)},e))}},70204:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return u},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return d},default:function(){return h}});var a=t(87462),s=t(63366),i=(t(67294),t(3905)),p=t(26396),r=t(58215),o=["components"],u={description:"Manage the data in your app.",sidebar_position:3},l="Adding and Removing Data",c={unversionedId:"api-guide/data/create-get-update-delete",id:"api-guide/data/create-get-update-delete",title:"Adding and Removing Data",description:"Manage the data in your app.",source:"@site/docs/api-guide/data/create-get-update-delete.md",sourceDirName:"api-guide/data",slug:"/api-guide/data/create-get-update-delete",permalink:"/docs-new/api-guide/data/create-get-update-delete",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/api-guide/data/create-get-update-delete.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{description:"Manage the data in your app.",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Supported Formats",permalink:"/docs-new/api-guide/data/supported-formats"},next:{title:"Collectors",permalink:"/docs-new/api-guide/data/collectors"}},d=[{value:"Inputs",id:"inputs",children:[{value:"Add Inputs",id:"add-inputs",children:[{value:"Add an input using a publicly accessible URL",id:"add-an-input-using-a-publicly-accessible-url",children:[],level:4},{value:"Add an input using bytes",id:"add-an-input-using-bytes",children:[],level:4},{value:"Add multiple inputs with ids",id:"add-multiple-inputs-with-ids",children:[],level:4}],level:3},{value:"Add inputs with concepts",id:"add-inputs-with-concepts",children:[],level:3},{value:"Add inputs with custom metadata",id:"add-inputs-with-custom-metadata",children:[],level:3},{value:"List inputs",id:"list-inputs",children:[],level:3},{value:"List inputs (streaming)",id:"list-inputs-streaming",children:[],level:3},{value:"Get input by id",id:"get-input-by-id",children:[],level:3},{value:"Get inputs status",id:"get-inputs-status",children:[],level:3}],level:2},{value:"Update inputs",id:"update-inputs",children:[{value:"Update input with concepts",id:"update-input-with-concepts",children:[],level:3},{value:"Bulk update inputs with concepts",id:"bulk-update-inputs-with-concepts",children:[],level:3}],level:2},{value:"Delete inputs",id:"delete-inputs",children:[{value:"Delete concepts from an input",id:"delete-concepts-from-an-input",children:[],level:3},{value:"Bulk delete concepts from a list of inputs",id:"bulk-delete-concepts-from-a-list-of-inputs",children:[],level:3},{value:"Delete Input By Id",id:"delete-input-by-id",children:[],level:3},{value:"Delete a list of inputs",id:"delete-a-list-of-inputs",children:[],level:3}],level:2}],m={toc:d};function h(e){var n=e.components,t=(0,s.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"adding-and-removing-data"},"Adding and Removing Data"),(0,i.kt)("h2",{id:"inputs"},"Inputs"),(0,i.kt)("p",null,"The API is built around a simple idea. You send inputs ","(","images",")"," to the service and it returns predictions. In addition to receiving predictions on inputs, you can also index inputs and their predictions to later search against. You can also index inputs with concepts to later train your own model."),(0,i.kt)("p",null,"When you add an input to your app, the base workflow of your app runs, computing the outputs from all the models in that workflow and indexes those outputs. Those indexed outputs are what incur the indexing fee monthly, and enable search and training on top of the outputs of the base workflow models."),(0,i.kt)("h3",{id:"add-inputs"},"Add Inputs"),(0,i.kt)("p",null,"You can add inputs one by one or in bulk. If you do send bulk, you are limited to sending 128 inputs at a time."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Important: adding inputs is an asynchronous operation.")," That means it will process indexing of your inputs through your default workflow in the background, which can take some time. In order to check the status of each input you add, see the section on ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Clarifai/docs/tree/1c1d25cdd43190c38a2edb313297c0d566b3a0e3/api-guide/inputs/inputs.md#get-input-by-id"},"Get Input by ID")," to look for status 30000 ","(","INPUT","_","IMAGE","_","DOWNLOAD","_","SUCCESS",")"," status code on each input to know when it's successfully been indexed."),(0,i.kt)("h4",{id:"add-an-input-using-a-publicly-accessible-url"},"Add an input using a publicly accessible URL"),(0,i.kt)(p.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nMultiInputResponse postInputsResponse = stub.postInputs(\n    PostInputsRequest.newBuilder().addInputs(\n        Input.newBuilder().setData(\n            Data.newBuilder().setImage(\n                Image.newBuilder()\n                    .setUrl("https://samples.clarifai.com/metro-north.jpg")\n                    .setAllowDuplicateUrl(true)\n            )\n        )\n    ).build()\n);\n\nif (postInputsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n    throw new RuntimeException("Post inputs failed, status: " + postInputsResponse.getStatus());\n}\n'))),(0,i.kt)(r.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nstub.PostInputs(\n    {\n        inputs: [{data: {image: {url: "https://samples.clarifai.com/metro-north.jpg", allow_duplicate_url: true}}}]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post inputs failed, status: " + response.status.description);\n        }\n    }\n);\n'))),(0,i.kt)(r.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'# Insert here the initialization code as outlined on this page:\n# https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\npost_inputs_response = stub.PostInputs(\n    service_pb2.PostInputsRequest(\n        inputs=[\n            resources_pb2.Input(\n                data=resources_pb2.Data(\n                    image=resources_pb2.Image(\n                        url="https://samples.clarifai.com/metro-north.jpg",\n                        allow_duplicate_url=True\n                    )\n                )\n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif post_inputs_response.status.code != status_code_pb2.SUCCESS:\n    print("There was an error with your request!")\n    print("\\tCode: {}".format(post_inputs_response.outputs[0].status.code))\n    print("\\tDescription: {}".format(post_inputs_response.outputs[0].status.description))\n    print("\\tDetails: {}".format(post_inputs_response.outputs[0].status.details))\n    raise Exception("Post inputs failed, status: " + post_inputs_response.status.description)\n'))),(0,i.kt)(r.Z,{value:"csharp",label:"C#",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'var response = client.PostInputs(\n    new PostInputsRequest()\n    {\n        UserAppId = new UserAppIDSet()\n        { \n            UserId = "{YOUR_USER_ID}",\n            AppId = "{YOUR_APP_ID}"\n        },\n                Inputs =\n        {\n            new List<Input>()\n            {\n                new Input()\n                {\n                    Data = new Data()\n                    {\n                        Image = new Image()\n                        {\n                            Url = "https://samples.clarifai.com/metro-north.jpg",\n                                                        AllowDuplicateUrl = true // optional\n                        }\n                    }\n                }\n            }\n        }\n    },\n    metadata\n);\n\nif (response.Status.Code != StatusCode.Success)\n    throw new Exception("Request failed, response: " + response);\n'))),(0,i.kt)(r.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'\n  {\n    "inputs": [\n      {\n        "data": {\n          "image": {\n            "url": "https://samples.clarifai.com/metro-north.jpg",\n            "allow_duplicate_url": true\n          }\n        }\n      }\n    ]\n  }\'\\\n  https://api.clarifai.com/v2/inputs\n'))),(0,i.kt)(r.Z,{value:"js_rest",label:"Javascript (REST)",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'const raw = JSON.stringify({\n    "user_app_id": {\n        "user_id": "{YOUR_USER_ID}",\n        "app_id": "{YOUR_APP_ID}"\n    },\n  "inputs": [\n    {\n      "data": {\n        "image": {\n          "url": "https://samples.clarifai.com/metro-north.jpg",\n          "allow_duplicate_url": true\n        }\n      }\n    }\n  ]\n});\n\nconst requestOptions = {\n  method: \'POST\',\n  headers: {\n    \'Accept\': \'application/json\',\n    \'Authorization\': \'Key {YOUR_PERSONAL_TOKEN}\'\n  },\n  body: raw\n};\n\nfetch("https://api.clarifai.com/v2/inputs", requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log(\'error\', error));\n')))),(0,i.kt)("h4",{id:"add-an-input-using-bytes"},"Add an input using bytes"),(0,i.kt)("p",null,"The data must be base64 encoded. When you add a base64 image to our servers, a copy will be stored and hosted on our servers. If you already have an image hosting service we recommend using it and adding images via the ",(0,i.kt)("inlineCode",{parentName:"p"},"url")," parameter."),(0,i.kt)(p.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\nimport com.google.protobuf.ByteString;\nimport java.io.File;\nimport java.nio.file.Files;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nMultiInputResponse postInputsResponse = stub.postInputs(\n    PostInputsRequest.newBuilder().addInputs(\n        Input.newBuilder().setData(\n            Data.newBuilder().setImage(\n                Image.newBuilder()\n                    .setBase64(ByteString.copyFrom(Files.readAllBytes(\n                        new File("{YOUR_IMAGE_LOCATION}").toPath()\n                    )))\n            )\n        )\n    ).build()\n);\n\nif (postInputsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n    throw new RuntimeException("Post inputs failed, status: " + postInputsResponse.getStatus());\n}\n'))),(0,i.kt)(r.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nconst fs = require("fs");\nconst imageBytes = fs.readFileSync("{YOUR_IMAGE_LOCATION}");\n\nstub.PostInputs(\n    {\n        inputs: [{data: {image: {base64: imageBytes}}}]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post inputs failed, status: " + response.status.description);\n        }\n    }\n);\n'))),(0,i.kt)(r.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'# Insert here the initialization code as outlined on this page:\n# https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nwith open("{YOUR_IMAGE_LOCATION}", "rb") as f:\n    file_bytes = f.read()\n\npost_inputs_response = stub.PostInputs(\n    service_pb2.PostInputsRequest(\n        inputs=[\n            resources_pb2.Input(\n                data=resources_pb2.Data(\n                    image=resources_pb2.Image(\n                        base64=file_bytes\n                    )\n                )\n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif post_inputs_response.status.code != status_code_pb2.SUCCESS:\n    print("There was an error with your request!")\n    print("\\tCode: {}".format(post_inputs_response.outputs[0].status.code))\n    print("\\tDescription: {}".format(post_inputs_response.outputs[0].status.description))\n    print("\\tDetails: {}".format(post_inputs_response.outputs[0].status.details))\n    raise Exception("Post inputs failed, status: " + post_inputs_response.status.description)\n'))),(0,i.kt)(r.Z,{value:"csharp",label:"C#",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'var response = client.PostInputs(\n    new PostInputsRequest()\n    {\n        UserAppId = new UserAppIDSet()\n        { \n            UserId = "{YOUR_USER_ID}",\n            AppId = "{YOUR_APP_ID}"\n        },\n                Inputs =\n        {\n            new List<Input>()\n            {\n                new Input()\n                {\n                    Data = new Data()\n                    {\n                        Image = new Image()\n                        {\n                            Base64 = "{YOUR_IMAGE_BYTES_STRING}",\n                                                        AllowDuplicateUrl = true // optional\n                        }\n                    }\n                }\n            }\n        }\n    },\n    metadata\n);\n\nif (response.Status.Code != StatusCode.Success)\n    throw new Exception("Request failed, response: " + response);\n'))),(0,i.kt)(r.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'\n  {\n    "inputs": [\n      {\n        "data": {\n          "image": {\n            "base64": \'"`base64 /home/user/image.jpeg`"\'"\n          }\n        }\n      }\n    ]\n  }\'\\\n  https://api.clarifai.com/v2/inputs\n'))),(0,i.kt)(r.Z,{value:"js_rest",label:"Javascript (REST)",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'const raw = JSON.stringify({\n    "user_app_id": {\n        "user_id": "{YOUR_USER_ID}",\n        "app_id": "{YOUR_APP_ID}"\n    },\n  "inputs": [\n    {\n      "data": {\n        "image": {\n          "base64": "{YOUR_BYTES_STRING}"\n        },\n      }\n    }\n  ]\n});\n\nconst requestOptions = {\n  method: \'POST\',\n  headers: {\n    \'Accept\': \'application/json\',\n    \'Authorization\': \'Key {YOUR_PERSONAL_TOKEN}\'\n  },\n  body: raw\n};\n\nfetch("https://api.clarifai.com/v2/inputs", requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log(\'error\', error));\n')))),(0,i.kt)("h4",{id:"add-multiple-inputs-with-ids"},"Add multiple inputs with ids"),(0,i.kt)("p",null,"In cases where you have your own ",(0,i.kt)("inlineCode",{parentName:"p"},"id")," and you only have one item per image, you are encouraged to send inputs with your own ",(0,i.kt)("inlineCode",{parentName:"p"},"id"),". This will help you later match the input to your own database. If you do not send an ",(0,i.kt)("inlineCode",{parentName:"p"},"id"),", one will be created for you. If you have more than one item per image, it is recommended that you put the product id in metadata."),(0,i.kt)(p.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nMultiInputResponse postInputsResponse = stub.postInputs(\n    PostInputsRequest.newBuilder()\n        .addInputs(\n            Input.newBuilder()\n                .setId("train1")\n                .setData(\n                    Data.newBuilder().setImage(\n                        Image.newBuilder()\n                            .setUrl("https://samples.clarifai.com/metro-north.jpg")\n                            .setAllowDuplicateUrl(true)\n                    )\n                )\n        )\n        .addInputs(\n            Input.newBuilder()\n                .setId("puppy1")\n                .setData(\n                    Data.newBuilder().setImage(\n                        Image.newBuilder()\n                            .setUrl("https://samples.clarifai.com/puppy.jpeg")\n                            .setAllowDuplicateUrl(true)\n                    )\n                )\n        )\n        .build()\n);\n\nif (postInputsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n    for (Input input : postInputsResponse.getInputsList()) {\n        System.out.println("Input " + input.getId() + " status: ");\n        System.out.println(input.getStatus() + "\\n");\n    }\n\n    throw new RuntimeException("Post inputs failed, status: " + postInputsResponse.getStatus());\n}\n'))),(0,i.kt)(r.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nstub.PostInputs(\n    {\n        inputs: [\n            {\n                id: "train1",\n                data: {image: {url: "https://samples.clarifai.com/metro-north.jpg", allow_duplicate_url: true}}\n            },\n            {\n                id: "puppy1",\n                data: {image: {url: "https://samples.clarifai.com/puppy.jpeg", allow_duplicate_url: true}}\n            },\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            for (const input of response.inputs) {\n                console.log("Input " + input.id + " status: ");\n                console.log(JSON.stringify(input.status, null, 2) + "\\n");\n            }\n\n            throw new Error("Post inputs failed, status: " + response.status.description);\n        }\n    }\n);\n'))),(0,i.kt)(r.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'# Insert here the initialization code as outlined on this page:\n# https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\npost_inputs_response = stub.PostInputs(\n    service_pb2.PostInputsRequest(\n        inputs=[\n            resources_pb2.Input(\n                id="train1",\n                data=resources_pb2.Data(\n                    image=resources_pb2.Image(\n                        url="https://samples.clarifai.com/metro-north.jpg",\n                        allow_duplicate_url=True\n                    )\n                )\n            ),\n            resources_pb2.Input(\n                id="puppy1",\n                data=resources_pb2.Data(\n                    image=resources_pb2.Image(\n                        url="https://samples.clarifai.com/puppy.jpeg",\n                        allow_duplicate_url=True\n                    )\n                )\n            ),\n        ]\n    ),\n    metadata=metadata\n)\n\nif post_inputs_response.status.code != status_code_pb2.SUCCESS:\n    print("There was an error with your request!")\n    for input_object in post_inputs_response.inputs:\n        print("Input " + input_object.id + " status:")\n        print(input_object.status)\n    print("\\tCode: {}".format(post_inputs_response.outputs[0].status.code))\n    print("\\tDescription: {}".format(post_inputs_response.outputs[0].status.description))\n    print("\\tDetails: {}".format(post_inputs_response.outputs[0].status.details))\n    raise Exception("Post inputs failed, status: " + post_inputs_response.status.description)\n'))),(0,i.kt)(r.Z,{value:"csharp",label:"C#",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'var response = client.PostInputs(\n    new PostInputsRequest()\n    {\n        UserAppId = new UserAppIDSet()\n        { \n            UserId = "{YOUR_USER_ID}",\n            AppId = "{YOUR_APP_ID}"\n        },\n                Inputs =\n        {\n            new List<Input>()\n            {\n                new Input()\n                {\n                                        Id = "train1"\n                    Data = new Data()\n                    {\n                        Image = new Image()\n                        {\n                            Url = "https://samples.clarifai.com/metro-north.jpg",\n                                                        AllowDuplicateUrl = true // optional\n                        }\n                    }\n                }\n            },\n                        {\n                new Input()\n                {\n                                        Id = "puppy1"\n                    Data = new Data()\n                    {\n                        Image = new Image()\n                        {\n                            Url = "https://samples.clarifai.com/puppy.jpeg",\n                                                        AllowDuplicateUrl = true // optional\n                        }\n                    }\n                }\n            }\n        }\n    },\n    metadata\n);\n\nif (response.Status.Code != StatusCode.Success)\n    throw new Exception("Request failed, response: " + response);\n'))),(0,i.kt)(r.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'\n  {\n    "inputs": [\n      {\n        "data": {\n          "image": {\n            "url": "https://samples.clarifai.com/metro-north.jpg",\n            "allow_duplicate_url": true\n          }\n        },\n        "id": "train1"\n      },\n      {\n        "data": {\n          "image": {\n            "url": "https://samples.clarifai.com/puppy.jpeg",\n            "allow_duplicate_url": true\n          }\n        },\n        "id": "puppy1"\n      }\n    ]\n  }\'\\\n  https://api.clarifai.com/v2/inputs\n'))),(0,i.kt)(r.Z,{value:"js_rest",label:"Javascript (REST)",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'const raw = JSON.stringify({\n    "user_app_id": {\n        "user_id": "{YOUR_USER_ID}",\n        "app_id": "{YOUR_APP_ID}"\n    },\n    "inputs": [\n        {\n        "data": {\n            "image": {\n            "url": "https://samples.clarifai.com/metro-north.jpg",\n            "allow_duplicate_url": true\n            }\n        },\n        "id": "input1"\n        },\n            {\n        "data": {\n            "image": {\n            "url": "https://samples.clarifai.com/puppy.jpeg",\n            "allow_duplicate_url": true\n            }\n        },\n        "id": "puppy1"\n        }\n    ]\n});\n\nconst requestOptions = {\n  method: \'POST\',\n  headers: {\n    \'Accept\': \'application/json\',\n    \'Authorization\': \'Key {YOUR_PERSONAL_TOKEN}\'\n  },\n  body: raw\n};\n\nfetch("https://api.clarifai.com/v2/inputs", requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log(\'error\', error));\n')))),(0,i.kt)("h3",{id:"add-inputs-with-concepts"},"Add inputs with concepts"),(0,i.kt)("p",null,"If you would like to add an input with concepts, you can do so like this. Concepts play an important role in creating your own models using your own concepts. You can learn more about ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Clarifai/docs/tree/5882f46bd17affcd85ed3e2ec98f4d6f355b58a9/train.md"},"creating your own models")," above. Concepts also help you search for inputs. You can ",(0,i.kt)("a",{parentName:"p",href:"../search/"},"learn more about search")," here."),(0,i.kt)("p",null,"When you add a concept to an input, you need to indicate whether the concept is present in the image or if it is not present."),(0,i.kt)("p",null,"You can add inputs with concepts as either a URL or bytes."),(0,i.kt)(p.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nMultiInputResponse postInputsResponse = stub.postInputs(\n    PostInputsRequest.newBuilder().addInputs(\n        Input.newBuilder().setData(\n            Data.newBuilder()\n                .setImage(\n                    Image.newBuilder()\n                        .setUrl("https://samples.clarifai.com/puppy.jpeg")\n                        .setAllowDuplicateUrl(true)\n                )\n                .addConcepts(\n                    Concept.newBuilder()\n                        .setId("charlie")\n                        .setValue(1f)\n                )\n        )\n    ).build()\n);\n\nif (postInputsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n    throw new RuntimeException("Post inputs failed, status: " + postInputsResponse.getStatus());\n}\n'))),(0,i.kt)(r.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nstub.PostInputs(\n    {\n        inputs: [{data: {\n            image: {url: "https://samples.clarifai.com/puppy.jpeg", allow_duplicate_url: true},\n            concepts: [{id: "charlie", value: 1.}]\n        }}]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post inputs failed, status: " + response.status.description);\n        }\n    }\n);\n'))),(0,i.kt)(r.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'# Insert here the initialization code as outlined on this page:\n# https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\npost_inputs_response = stub.PostInputs(\n    service_pb2.PostInputsRequest(\n        inputs=[\n            resources_pb2.Input(\n                data=resources_pb2.Data(\n                    image=resources_pb2.Image(\n                        url="https://samples.clarifai.com/puppy.jpeg",\n                        allow_duplicate_url=True\n                    ),\n                    concepts=[resources_pb2.Concept(id="charlie", value=1.)]\n                )\n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif post_inputs_response.status.code != status_code_pb2.SUCCESS:\n    print("There was an error with your request!")\n    print("\\tCode: {}".format(post_inputs_response.outputs[0].status.code))\n    print("\\tDescription: {}".format(post_inputs_response.outputs[0].status.description))\n    print("\\tDetails: {}".format(post_inputs_response.outputs[0].status.details))\n    raise Exception("Post inputs failed, status: " + post_inputs_response.status.description)\n'))),(0,i.kt)(r.Z,{value:"csharp",label:"C#",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'var response = client.PostInputs(\n    new PostInputsRequest()\n    {\n        UserAppId = new UserAppIDSet()\n        { \n            UserId = "{YOUR_USER_ID}",\n            AppId = "{YOUR_APP_ID}"\n        },\n                Inputs =\n        {\n            new List<Input>()\n            {\n                new Input()\n                {\n                    Data = new Data()\n                    {\n                        Image = new Image()\n                        {\n                            Url = "https://samples.clarifai.com/puppy.jpeg",\n                                                        AllowDuplicateUrl = true // optional\n                        },\n                                                Concepts = \n                                                {\n                            new List<Concept>\n                            {\n                                new Concept\n                                {\n                                    Id = "charlie",\n                                                                        Value = 1\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    },\n    metadata\n);\n\nif (response.Status.Code != StatusCode.Success)\n    throw new Exception("Request failed, response: " + response);\n'))),(0,i.kt)(r.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'\n  {\n    "inputs": [\n      {\n        "data": {\n          "image": {\n            "url": "https://samples.clarifai.com/puppy.jpeg",\n            "allow_duplicate_url": true\n          },\n          "concepts":[\n            {\n              "id": "charlie",\n              "value": 1\n            }\n          ]\n        }\n      }\n    ]\n  }\'\\\n  https://api.clarifai.com/v2/inputs\n'))),(0,i.kt)(r.Z,{value:"js_rest",label:"Javascript (REST)",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'const raw = JSON.stringify({\n    "user_app_id": {\n        "user_id": "{YOUR_USER_ID}",\n        "app_id": "{YOUR_APP_ID}"\n    },\n  "inputs": [\n      {\n      "data": {\n          "image": {\n            "url": "https://samples.clarifai.com/puppy.jpeg",\n            "allow_duplicate_url": true\n          },\n          // Optionally add a concept with your input\n          "concepts": [\n          {\n            "id": "charlie",\n            "value": 1\n          }\n        ]\n      }\n    }\n  ]\n});\n\nconst requestOptions = {\n  method: \'POST\',\n  headers: {\n    \'Accept\': \'application/json\',\n    \'Authorization\': \'Key {YOUR_PERSONAL_TOKEN}\'\n  },\n  body: raw\n};\n\nfetch("https://api.clarifai.com/v2/inputs", requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log(\'error\', error));\n')))),(0,i.kt)("h3",{id:"add-inputs-with-custom-metadata"},"Add inputs with custom metadata"),(0,i.kt)("p",null,"In addition to adding an input with concepts, you can also add an input with custom metadata. This metadata will then be ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Clarifai/docs/tree/5882f46bd17affcd85ed3e2ec98f4d6f355b58a9/advanced-searches.md#by-custom-metadata"},"searchable"),". Metadata can be any arbitrary JSON."),(0,i.kt)("p",null,"If you have more than one item per image it is recommended to put the id in metadata like:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},'{\n  "product_id": "xyz"\n}\n')),(0,i.kt)(p.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\nimport com.google.protobuf.Struct;\nimport com.google.protobuf.Value;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nMultiInputResponse postInputsResponse = stub.postInputs(\n    PostInputsRequest.newBuilder().addInputs(\n        Input.newBuilder().setData(\n            Data.newBuilder()\n                .setImage(\n                    Image.newBuilder()\n                        .setUrl("https://samples.clarifai.com/puppy.jpeg")\n                        .setAllowDuplicateUrl(true)\n                )\n                .setMetadata(\n                    Struct.newBuilder()\n                        .putFields("id", Value.newBuilder().setStringValue("id001").build())\n                        .putFields("type", Value.newBuilder().setStringValue("animal").build())\n                        .putFields("size", Value.newBuilder().setNumberValue(100).build())\n                )\n        )\n    ).build()\n);\n\nif (postInputsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n    throw new RuntimeException("Post inputs failed, status: " + postInputsResponse.getStatus());\n}\n'))),(0,i.kt)(r.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nstub.PostInputs(\n    {\n        inputs: [{data: {\n            image: {url: "https://samples.clarifai.com/puppy.jpeg", allow_duplicate_url: true},\n            metadata: {id: "id001", type: "animal", size: 100}\n        }}]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post inputs failed, status: " + response.status.description);\n        }\n    }\n);\n'))),(0,i.kt)(r.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'from google.protobuf.struct_pb2 import Struct\n\n# Insert here the initialization code as outlined on this page:\n# https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\ninput_metadata = Struct()\ninput_metadata.update({"id": "id001", "type": "animal", "size": 100})\n\npost_inputs_response = stub.PostInputs(\n    service_pb2.PostInputsRequest(\n        inputs=[\n            resources_pb2.Input(\n                data=resources_pb2.Data(\n                    image=resources_pb2.Image(\n                        url="https://samples.clarifai.com/puppy.jpeg",\n                        allow_duplicate_url=True\n                    ),\n                    metadata=input_metadata\n                )\n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif post_inputs_response.status.code != status_code_pb2.SUCCESS:\n    print("There was an error with your request!")\n    print("\\tCode: {}".format(post_inputs_response.outputs[0].status.code))\n    print("\\tDescription: {}".format(post_inputs_response.outputs[0].status.description))\n    print("\\tDetails: {}".format(post_inputs_response.outputs[0].status.details))\n    raise Exception("Post inputs failed, status: " + post_inputs_response.status.description)\n'))),(0,i.kt)(r.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'\n  {\n    "inputs": [\n      {\n        "data": {\n          "image": {\n            "url": "https://samples.clarifai.com/puppy.jpeg",\n            "allow_duplicate_url": true\n          },\n          "metadata": {"id": "id001", "type": "animal", "size": 100}\n        }\n      }\n    ]\n  }\'\\\n  https://api.clarifai.com/v2/inputs\n'))),(0,i.kt)(r.Z,{value:"js_rest",label:"Javascript (REST)",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'const raw = JSON.stringify({\n    "user_app_id": {\n        "user_id": "{YOUR_USER_ID}",\n        "app_id": "{YOUR_APP_ID}"\n    },\n  "inputs": [\n    {\n      "data": {\n        "image": {\n          "url": "https://samples.clarifai.com/puppy.jpeg",\n          "allow_duplicate_url": true\n        },\n        "metadata": {"id": "id001", "type": "animal", "size": 100}\n      }\n    }\n  ]\n});\n\nconst requestOptions = {\n  method: \'POST\',\n  headers: {\n    \'Accept\': \'application/json\',\n    \'Authorization\': \'Key {YOUR_PERSONAL_TOKEN}\'\n  },\n  body: raw\n};\n\nfetch("https://api.clarifai.com/v2/inputs", requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log(\'error\', error));\n')))),(0,i.kt)("h3",{id:"list-inputs"},"List inputs"),(0,i.kt)("p",null,"You can list all the inputs ","(","images",")"," you have previously added either for ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Clarifai/docs/tree/5882f46bd17affcd85ed3e2ec98f4d6f355b58a9/advanced-searches.md"},"search")," or ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Clarifai/docs/tree/5882f46bd17affcd85ed3e2ec98f4d6f355b58a9/train.md"},"train"),"."),(0,i.kt)("p",null,"If you added inputs with concepts, they will be returned in the response as well."),(0,i.kt)("p",null,"This request is paginated."),(0,i.kt)(p.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nMultiInputResponse listInputsResponse = stub.listInputs(\n    ListInputsRequest.newBuilder()\n        .setPage(1)\n        .setPerPage(10)\n        .build()\n);\n\nif (listInputsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n    throw new RuntimeException("List inputs failed, status: " + listInputsResponse.getStatus());\n}\n\nfor (Input input : listInputsResponse.getInputsList()) {\n    System.out.println(input);\n}\n'))),(0,i.kt)(r.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nstub.ListInputs(\n    {page: 1, per_page: 10},\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("List inputs failed, status: " + response.status.description);\n        }\n\n        for (const input of response.inputs) {\n            console.log(JSON.stringify(input, null, 2));\n        }\n    }\n);\n'))),(0,i.kt)(r.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'# Insert here the initialization code as outlined on this page:\n# https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nlist_inputs_response = stub.ListInputs(\n    service_pb2.ListInputsRequest(page=1, per_page=10),\n    metadata=metadata\n)\n\nif list_inputs_response.status.code != status_code_pb2.SUCCESS:\n    print("There was an error with your request!")\n    print("\\tCode: {}".format(list_inputs_response.outputs[0].status.code))\n    print("\\tDescription: {}".format(list_inputs_response.outputs[0].status.description))\n    print("\\tDetails: {}".format(list_inputs_response.outputs[0].status.details))\n    raise Exception("List inputs failed, status: " + list_inputs_response.status.description)\n\nfor input_object in list_inputs_response.inputs:\n    print(input_object)\n'))),(0,i.kt)(r.Z,{value:"csharp",label:"C#",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'var response = client.ListInputs(\n    new ListInputsRequest()\n    {\n        UserAppId = new UserAppIDSet()\n        { \n            UserId = "{YOUR_USER_ID}",\n            AppId = "{YOUR_APP_ID}"\n        },\n                Page = 1,\n                PerPage = 10\n    },\n    metadata\n);\n\nif (response.Status.Code != StatusCode.Success)\n    throw new Exception("Request failed, response: " + response);\n'))),(0,i.kt)(r.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X GET \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  https://api.clarifai.com/v2/inputs?page=1&per_page=10\n'))),(0,i.kt)(r.Z,{value:"js_rest",label:"Javascript (REST)",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const appId = '{YOUR_APP_ID}'\n\nconst requestOptions = {\n  method: 'GET',\n  headers: {\n    'Accept': 'application/json',\n    'Authorization': 'Key {YOUR_PERSONAL_TOKEN}'\n  }\n};\n\nfetch(`https://api.clarifai.com/v2/users/me/apps/${appId}/inputs?page=1&per_page=10`, requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log('error', error));\n")))),(0,i.kt)("h3",{id:"list-inputs-streaming"},"List inputs ","(","streaming",")"),(0,i.kt)("p",null,"Another method for listing inputs which was built to scalably list app's inputs in an iterative / streaming fashion. ",(0,i.kt)("inlineCode",{parentName:"p"},"StreamInputs")," will return ",(0,i.kt)("inlineCode",{parentName:"p"},"per_page")," number of inputs from a certain input onward, controlled by the optional ",(0,i.kt)("inlineCode",{parentName:"p"},"last_id")," parameter ","(","defaults to the first input",")","."),(0,i.kt)("p",null,"By default, the stream will return inputs from oldest to newest. Set the ",(0,i.kt)("inlineCode",{parentName:"p"},"descending")," field to true to reverse that order."),(0,i.kt)(p.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'import java.util.List;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\n// To start from beginning, do not provide the last ID parameter.\nMultiInputResponse firstStreamInputsResponse = stub.streamInputs(\n    StreamInputsRequest.newBuilder()\n        .setPerPage(10)\n        .build()\n);\n\nif (firstStreamInputsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n    throw new RuntimeException("Stream inputs failed, status: " + firstStreamInputsResponse.getStatus());\n}\n\nSystem.out.println("First response (starting from the first input):");\nList<Input> inputs = firstStreamInputsResponse.getInputsList();\nfor (Input input : inputs) {\n    System.out.println("\\t" + input.getId());\n}\n\nString lastId = inputs.get(inputs.size() - 1).getId();\n\n// Set last ID to get the next set of inputs. The returned inputs will not include the last ID input.\nMultiInputResponse secondStreamInputsResponse = stub.streamInputs(\n    StreamInputsRequest.newBuilder()\n        .setLastId(lastId)\n        .setPerPage(10)\n        .build()\n);\n\nif (secondStreamInputsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n    throw new RuntimeException("Stream inputs failed, status: " + secondStreamInputsResponse.getStatus());\n}\n\nSystem.out.println(String.format("Second response (first input is the one following input ID %s)", lastId));\nfor (Input input : secondStreamInputsResponse.getInputsList()) {\n    System.out.println("\\t" + input.getId());\n}\n'))),(0,i.kt)(r.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nstub.StreamInputs(\n    {\n        per_page: 10\n    },\n    metadata,\n    (err, firstResponse) => {\n        if (err) {\n            done(err);\n            return;\n        }\n\n        if (firstResponse.status.code !== 10000) {\n            done(new Error("Received status: " + firstResponse.status.description + "\\n" + firstResponse.status.details));\n            return;\n        }\n\n        console.log("First response (starting from the first input):");\n        for (const input of firstResponse.inputs) {\n            console.log("\\t" + input.id);\n        }\n\n        const lastId = firstResponse.inputs[firstResponse.inputs.length - 1].id;\n        stub.StreamInputs(\n            {\n                last_id: lastId,\n                per_page: 10\n            },\n            metadata,\n            (err, secondResponse) => {\n                if (err) {\n                    done(err);\n                    return;\n                }\n\n                if (secondResponse.status.code !== 10000) {\n                    done(new Error("Received status: " + secondResponse.status.description + "\\n" + secondResponse.status.details));\n                    return;\n                }\n\n                console.log("Second response (first input is the one following input ID " + lastId + ")");\n                for (const input of secondResponse.inputs) {\n                    console.log("\\t" + input.id);\n                }\n\n                done();\n            }\n        );\n    }\n);\n'))),(0,i.kt)(r.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'# Insert here the initialization code as outlined on this page:\n# https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\n# To start from beginning, do not provide the last_id parameter.\nstream_inputs_response = stub.StreamInputs(\n    service_pb2.StreamInputsRequest(per_page=10),\n    metadata=metadata\n)\n\nif stream_inputs_response.status.code != status_code_pb2.SUCCESS:\n    print("There was an error with your request!")\n    print("\\tCode: {}".format(stream_inputs_response.outputs[0].status.code))\n    print("\\tDescription: {}".format(stream_inputs_response.outputs[0].status.description))\n    print("\\tDetails: {}".format(stream_inputs_response.outputs[0].status.details))\n    raise Exception("Stream inputs failed, status: " + stream_inputs_response.status.description)\n\nprint("First response (starting from the first input):")\nfor input_object in stream_inputs_response.inputs:\n    print("\\t" + input_object.id)\n\nlast_id = stream_inputs_response.inputs[-1].id\n\n# Set last_id to get the next set of inputs. The returned inputs will not include the last_id input.\nstream_inputs_response = stub.StreamInputs(\n    service_pb2.StreamInputsRequest(per_page=10, last_id=last_id),\n    metadata=metadata\n)\n\nprint(f"Second response (first input is the one following input ID {last_id}):")\nfor input_object in stream_inputs_response.inputs:\n    print("\\t" + input_object.id)\n'))),(0,i.kt)(r.Z,{value:"js_rest",label:"Javascript (REST)",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"// We can implement the API call with a Promise\nconst streamInputs = (reqAddress) => {\n  return new Promise(async (resolve, reject) => {\n    fetch(reqAddress, requestOptions)\n    .then(data => {\n        return data.json()\n    }).then(data => {\n        resolve(data)\n    }).catch(e => {\n        console.error('REQUEST -> ', e)\n        reject(e)\n    })\n  })\n}\n\n// Async function that will allow us to wait for the first API call\nconst run = async () => {\n\n    const appId = '{YOUR_APP_ID}'\n\n  const requestOptions = {\n    method: 'GET',\n    headers: {\n      'Accept': 'application/json',\n      'Authorization': 'Key {YOUR_PERSONAL_TOKEN}'\n    }\n  };\n\n  const REQ_ADDRESS = `https://api.clarifai.com/v2/users/me/apps/${appId}/inputs/stream?per_page=5`\n\n  const req1 = await streamInputs(REQ_ADDRESS)\n\n    // Grab the last input_id from the first request to use it in the second request\n  const lastId = req1['inputs'][req1['inputs'].length - 1].id\n\n  const req2 = await streamInputs(REQ_ADDRESS + `&last_id=${lastId}`)\n\n    // You're only receiving the inputs from up to the last_id onward\n  console.log(req2)\n}\n\nrun()\n")))),(0,i.kt)("h3",{id:"get-input-by-id"},"Get input by id"),(0,i.kt)("p",null,"If you'd like to get a specific input by id, you can do that as well."),(0,i.kt)(p.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nSingleInputResponse getInputResponse = stub.getInput(\n    GetInputRequest.newBuilder()\n        .setInputId("{YOUR_INPUT_ID}")\n        .build()\n);\n\nif (getInputResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n    throw new RuntimeException("Get input failed, status: " + getInputResponse.getStatus());\n}\n\nInput input = getInputResponse.getInput();\nSystem.out.println(input);\n'))),(0,i.kt)(r.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nstub.GetInput(\n    {input_id: "{YOUR_INPUT_ID}"},\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Get input failed, status: " + response.status.description);\n        }\n\n        const input = response.input;\n        console.log(JSON.stringify(input, null, 2));\n    }\n);\n'))),(0,i.kt)(r.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'# Insert here the initialization code as outlined on this page:\n# https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nget_input_response = stub.GetInput(\n    service_pb2.GetInputRequest(input_id="{YOUR_INPUT_ID}"),\n    metadata=metadata\n)\n\nif get_input_response.status.code != status_code_pb2.SUCCESS:\n    print("There was an error with your request!")\n    print("\\tCode: {}".format(get_input_response.outputs[0].status.code))\n    print("\\tDescription: {}".format(get_input_response.outputs[0].status.description))\n    print("\\tDetails: {}".format(get_input_response.outputs[0].status.details))\n    raise Exception("Get input failed, status: " + get_input_response.status.description)\n\ninput_object = get_input_response.input\nprint(input_object)\n'))),(0,i.kt)(r.Z,{value:"csharp",label:"C#",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'var response = client.ListInputs(\n    new ListInputsRequest()\n    {\n        UserAppId = new UserAppIDSet()\n        { \n            UserId = "{YOUR_USER_ID}",\n            AppId = "{YOUR_APP_ID}"\n        },\n                InputId = "{YOUR_INPUT_ID}"\n    },\n    metadata\n);\n\nif (response.Status.Code != StatusCode.Success)\n    throw new Exception("Request failed, response: " + response);\n'))),(0,i.kt)(r.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X GET \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  https://api.clarifai.com/v2/inputs/{YOUR_INPUT_ID}\n'))),(0,i.kt)(r.Z,{value:"js_rest",label:"Javascript (REST)",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const inputId = '{YOUR_INPUT_ID}'\nconst appId = '{YOUR_APP_ID}'\n\nconst requestOptions = {\n  method: 'GET',\n  headers: {\n    'Accept': 'application/json',\n    'Authorization': 'Key {YOUR_PERSONAL_TOKEN}'\n  }\n};\n\nfetch(`https://api.clarifai.com/v2/users/me/apps/${appId}/inputs/${inputId}`, requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log('error', error));\n")))),(0,i.kt)("h3",{id:"get-inputs-status"},"Get inputs status"),(0,i.kt)("p",null,"If you add inputs in bulk, they will process in the background. You can get the status of all your inputs ","(","processed, to","_","process and errors",")"," like this:"),(0,i.kt)(p.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nSingleInputCountResponse getInputCountResponse = stub.getInputCount(\n    GetInputCountRequest.newBuilder().build()\n);\n\nif (getInputCountResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n    throw new RuntimeException("Get input count failed, status: " + getInputCountResponse.getStatus());\n}\n\nInputCount inputCount = getInputCountResponse.getCounts();\nSystem.out.println(inputCount);\n'))),(0,i.kt)(r.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nstub.GetInputCount(\n    {},\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Get input count failed, status: " + response.status.description);\n        }\n\n        const counts = response.counts;\n        console.log(JSON.stringify(counts, null, 2));\n    }\n);\n'))),(0,i.kt)(r.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'# Insert here the initialization code as outlined on this page:\n# https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nget_input_count_response = stub.GetInputCount(\n    service_pb2.GetInputCountRequest(),\n    metadata=metadata\n)\n\nif get_input_count_response.status.code != status_code_pb2.SUCCESS:\n    print("There was an error with your request!")\n    print("\\tCode: {}".format(get_input_count_response.outputs[0].status.code))\n    print("\\tDescription: {}".format(get_input_count_response.outputs[0].status.description))\n    print("\\tDetails: {}".format(get_input_count_response.outputs[0].status.details))\n    raise Exception("Get input count failed, status: " + get_input_count_response.status.description)\n\ncounts = get_input_count_response.counts\nprint(counts)\n'))),(0,i.kt)(r.Z,{value:"csharp",label:"C#",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'var response = client.GetInputCount(\n    new GetInputCountRequest()\n    {\n        UserAppId = new UserAppIDSet()\n        { \n            UserId = "{YOUR_USER_ID}",\n            AppId = "{YOUR_APP_ID}"\n        }\n    },\n    metadata\n);\n\nif (response.Status.Code != StatusCode.Success)\n    throw new Exception("Request failed, response: " + response);\n\nConsole.WriteLine(response.Counts);\n'))),(0,i.kt)(r.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X GET \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  https://api.clarifai.com/v2/inputs/status\n'))),(0,i.kt)(r.Z,{value:"js_rest",label:"Javascript (REST)",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const appId = '{YOUR_APP_ID}'\n\nconst requestOptions = {\n  method: 'GET',\n  headers: {\n    'Accept': 'application/json',\n    'Authorization': 'Key {YOUR_PERSONAL_ACCESS_TOKEN}'\n  }\n};\n\nfetch(`https://api.clarifai.com/v2/users/me/apps/${appId}/inputs/status`, requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log('error', error));\n")))),(0,i.kt)("h2",{id:"update-inputs"},"Update inputs"),(0,i.kt)("h3",{id:"update-input-with-concepts"},"Update input with concepts"),(0,i.kt)("p",null,"To update an input with a new concept, or to change a concept value from true/false, you can do that:"),(0,i.kt)(p.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"grpc_java",label:"gRPC Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nMultiInputResponse patchInputsResponse = stub.patchInputs(\n    PatchInputsRequest.newBuilder()\n        .setAction("merge")  // Supported actions: overwrite, merge, remove.\n        .addInputs(\n            Input.newBuilder()\n                .setId("{YOUR_INPUT_ID}")\n                .setData(\n                    Data.newBuilder()\n                        .addConcepts(\n                            Concept.newBuilder()\n                                .setId("tree")\n                                .setValue(1f)  // 1 means true, this concept is present.\n                        )\n                        .addConcepts(\n                            Concept.newBuilder()\n                                .setId("water")\n                                .setValue(0f)  // 0 means false, this concept is not present.\n                        )\n                )\n                .build()\n        )\n        .build()\n);\n\nif (patchInputsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n    throw new RuntimeException("Patch inputs failed, status: " + patchInputsResponse.getStatus());\n}\n'))),(0,i.kt)(r.Z,{value:"grpc_nodejs",label:"gRPC NodeJS",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nstub.PatchInputs(\n    {\n        action: "merge",  // Supported actions: overwrite, merge, remove.\n        inputs: [\n            {\n                id: "{YOUR_INPUT_ID}",\n                // 1 means true, this concept is present.\n                // 0 means false, this concept is not present.\n                data: {concepts: [{id: "tree", value: 1}, {id: "water", value: 0}]}\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Patch inputs failed, status: " + response.status.description);\n        }\n    }\n);\n'))),(0,i.kt)(r.Z,{value:"grpc_python",label:"gRPC Python",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'# Insert here the initialization code as outlined on this page:\n# https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\npatch_inputs_response = stub.PatchInputs(\n    service_pb2.PatchInputsRequest(\n        action="merge",  # Supported actions: overwrite, merge, remove.\n        inputs=[\n            resources_pb2.Input(\n                id="{YOUR_INPUT_ID}",\n                data=resources_pb2.Data(\n                    concepts=[\n                        resources_pb2.Concept(id="tree", value=1.),  # 1 means true, this concept is present.\n                        resources_pb2.Concept(id="water", value=0.)  # 0 means false, this concept is not present.\n                    ]\n                )\n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif patch_inputs_response.status.code != status_code_pb2.SUCCESS:\n    print("There was an error with your request!")\n    print("\\tCode: {}".format(patch_inputs_response.outputs[0].status.code))\n    print("\\tDescription: {}".format(patch_inputs_response.outputs[0].status.description))\n    print("\\tDetails: {}".format(patch_inputs_response.outputs[0].status.details))\n    raise Exception("Patch inputs failed, status: " + patch_inputs_response.status.description)\n'))),(0,i.kt)(r.Z,{value:"csharp",label:"C#",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'var response = client.PatchInputs(\n    new PatchInputsRequest()\n    {\n        UserAppId = new UserAppIDSet()\n        { \n            UserId = "{YOUR_USER_ID}",\n            AppId = "{YOUR_APP_ID}"\n        }\n                Action = "merge",\n                Inputs =\n        {\n            new List<Input>()\n            {\n                new Input()\n                {\n                                        InputId = "{YOUR_INPUT_ID}",\n                    Data = new Data()\n                    {\n                                                Concepts = \n                                                {\n                            new List<Concept>\n                            {\n                                new Concept\n                                {\n                                    Id = "tree",\n                                                                        Value = 1\n                                }\n                            },\n                                                                new Concept\n                                {\n                                    Id = "water",\n                                                                        Value = O\n                                }\n                        }\n                    }\n                }\n            }\n        }\n    },\n    metadata\n);\n\nif (response.Status.Code != StatusCode.Success)\n    throw new Exception("Request failed, response: " + response);\n'))),(0,i.kt)(r.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'# Value of 1 means true, this concept is present.\n# Value of 0 means false, this concept is not present.\n# Supported actions: overwrite, merge, remove.\ncurl -X PATCH \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'\n  {\n    "inputs": [\n      {\n        "id": "{YOUR_INPUT_ID}",\n        "data": {\n          "concepts": [\n            {\n              "id": "tree",\n              "value": 1\n            },\n            {\n              "id": "water",\n              "value": 0\n            }\n          ]\n        }\n      }\n    ],\n    "action":"merge"\n}\'\\\n  https://api.clarifai.com/v2/inputs\n'))),(0,i.kt)(r.Z,{value:"js_rest",label:"Javascript (REST)",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'const raw = JSON.stringify({\n    "user_app_id": {\n        "user_id": "{YOUR_USER_ID}",\n        "app_id": "{YOUR_APP_ID}"\n    },\n  "inputs": [\n    {\n      "id": "{YOUR_INPUT_ID}",\n      "data": {\n        "concepts": [\n          {\n            "id": "tree",\n                        "value": 1\n          },\n          {\n            "id": "water",\n                        "value": 0\n          }\n        ]\n      }\n    }\n  ],\n  "action": "merge"\n});\n\nconst requestOptions = {\n  method: \'PATCH\',\n  headers: {\n    \'Accept\': \'application/json\',\n    \'Authorization\': \'Key {YOUR_PERSONAL_TOKEN}\'\n  },\n  body: raw\n};\n\nfetch("https://api.clarifai.com/v2/inputs", requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log(\'error\', error));\n')))),(0,i.kt)("h3",{id:"bulk-update-inputs-with-concepts"},"Bulk update inputs with concepts"),(0,i.kt)("p",null,"You can update an existing input using its Id. This is useful if you'd like to add concepts to an input after its already been added."),(0,i.kt)(p.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nMultiInputResponse patchInputsResponse = stub.patchInputs(\n    PatchInputsRequest.newBuilder()\n        .setAction("merge")  // Supported actions: overwrite, merge, remove.\n        .addInputs(\n            Input.newBuilder()\n                .setId("{YOUR_INPUT_ID_1}")\n                .setData(\n                    Data.newBuilder()\n                        .addConcepts(\n                            Concept.newBuilder()\n                                .setId("tree")\n                                .setValue(1f)  // 1 means true, this concept is present.\n                        )\n                        .addConcepts(\n                            Concept.newBuilder()\n                                .setId("water")\n                                .setValue(0f)  // 0 means false, this concept is not present.\n                        )\n                )\n                .build()\n        )\n        .addInputs(\n            Input.newBuilder()\n                .setId("{YOUR_INPUT_ID_2}")\n                .setData(\n                    Data.newBuilder()\n                        .addConcepts(\n                            Concept.newBuilder()\n                                .setId("animal")\n                                .setValue(1f)\n                        )\n                        .addConcepts(\n                            Concept.newBuilder()\n                                .setId("fruit")\n                                .setValue(0f)\n                        )\n                )\n                .build()\n        )\n        .build()\n);\n\nif (patchInputsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n    throw new RuntimeException("Patch inputs failed, status: " + patchInputsResponse.getStatus());\n}\n'))),(0,i.kt)(r.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nstub.PatchInputs(\n    {\n        action: "merge",  // Supported actions: overwrite, merge, remove.\n        inputs: [\n            {\n                id: "{YOUR_INPUT_ID_1}",\n                data: {concepts: [{id: "tree", value: 1}, {id: "water", value: 0}]}\n            },\n            {\n                id: "{YOUR_INPUT_ID_2}",\n                data: {concepts: [{id: "animal", value: 1}, {id: "fruit", value: 0}]}\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Patch inputs failed, status: " + response.status.description);\n        }\n    }\n);\n'))),(0,i.kt)(r.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'# Insert here the initialization code as outlined on this page:\n# https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\npatch_inputs_response = stub.PatchInputs(\n    service_pb2.PatchInputsRequest(\n        action="merge",  # Supported actions: overwrite, merge, remove.\n        inputs=[\n            resources_pb2.Input(\n                id="{YOUR_INPUT_ID_1}",\n                data=resources_pb2.Data(\n                    concepts=[\n                        resources_pb2.Concept(id="tree", value=1.),  # 1 means true, this concept is present.\n                        resources_pb2.Concept(id="water", value=0.)  # 0 means false, this concept is not present.\n                    ]\n                )\n            ),\n            resources_pb2.Input(\n                id="{YOUR_INPUT_ID_2}",\n                data=resources_pb2.Data(\n                    concepts=[\n                        resources_pb2.Concept(id="animal", value=1.),\n                        resources_pb2.Concept(id="fruit", value=0.)\n                    ]\n                )\n            ),\n        ]\n    ),\n    metadata=metadata\n)\n\nif patch_inputs_response.status.code != status_code_pb2.SUCCESS:\n    print("There was an error with your request!")\n    print("\\tCode: {}".format(patch_inputs_response.outputs[0].status.code))\n    print("\\tDescription: {}".format(patch_inputs_response.outputs[0].status.description))\n    print("\\tDetails: {}".format(patch_inputs_response.outputs[0].status.details))\n    raise Exception("Patch inputs failed, status: " + patch_inputs_response.status.description)\n'))),(0,i.kt)(r.Z,{value:"csharp",label:"C#",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'var response = client.PatchInputs(\n    new PatchInputsRequest()\n    {\n        UserAppId = new UserAppIDSet()\n        { \n            UserId = "{YOUR_USER_ID}",\n            AppId = "{YOUR_APP_ID}"\n        }\n                Action = "merge",\n                Inputs =\n        {\n            new List<Input>()\n            {\n                new Input()\n                {\n                                        InputId = "{YOUR_INPUT_ID_1}",\n                    Data = new Data()\n                    {\n                                                Concepts = \n                                                {\n                            new List<Concept>\n                            {\n                                new Concept\n                                {\n                                    Id = "tree",\n                                                                        Value = 1\n                                }\n                            },\n                                                                new Concept\n                                {\n                                    Id = "water",\n                                                                        Value = O\n                                }\n                        }\n                    }\n                }\n            },\n                        {\n                new Input()\n                {\n                                        InputId = "{YOUR_INPUT_ID_2}",\n                    Data = new Data()\n                    {\n                                                Concepts = \n                                                {\n                            new List<Concept>\n                            {\n                                new Concept\n                                {\n                                    Id = "animal",\n                                                                        Value = 1\n                                }\n                            },\n                                                                new Concept\n                                {\n                                    Id = "fruit",\n                                                                        Value = O\n                                }\n                        }\n                    }\n                }\n            }\n        }\n    },\n    metadata\n);\n\nif (response.Status.Code != StatusCode.Success)\n    throw new Exception("Request failed, response: " + response);\n'))),(0,i.kt)(r.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'# Value of 1 means true, this concept is present.\n# Value of 0 means false, this concept is not present.\n# Supported actions: overwrite, merge, remove.\ncurl -X PATCH \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'\n  {\n    "inputs": [\n      {\n        "id": "{YOUR_INPUT_ID_1}",\n        "data": {\n          "concepts": [\n            {\n              "id": "tree",\n              "value": 1\n            },\n            {\n              "id": "water",\n              "value": 0\n            }\n          ]\n        }\n      },\n      {\n        "id": "{YOUR_INPUT_ID_2}",\n        "data": {\n          "concepts": [\n            {\n              "id": "animal",\n              "value": 1\n            },\n            {\n              "id": "fruit",\n              "value": 0\n            }\n          ]\n        }\n      }\n    ],\n    "action":"merge"\n}\'\\\n  https://api.clarifai.com/v2/inputs\n'))),(0,i.kt)(r.Z,{value:"js_rest",label:"Javascript (REST)",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'const raw = JSON.stringify({\n    "user_app_id": {\n        "user_id": "{YOUR_USER_ID}",\n        "app_id": "{YOUR_APP_ID}"\n    },\n  "inputs": [\n    {\n      "id": "{YOUR_INPUT_ID_1}",\n      "data": {\n        "concepts": [\n          {\n            "id": "tree",\n            "value": 1\n          },\n          {\n            "id": "water",\n            "value": 0\n          }\n        ]\n      }\n    },\n    {\n      "id": "{YOUR_INPUT_ID_2}",\n      "data": {\n        "concepts": [\n          {\n            "id": "animal",\n            "value": 1\n          },\n          {\n            "id": "fruit",\n            "value": 0\n          }\n        ]\n      }\n    }\n  ],\n  "action": "merge"\n});\n\nconst requestOptions = {\n  method: \'PATCH\',\n  headers: {\n    \'Accept\': \'application/json\',\n    \'Authorization\': \'Key {YOUR_PERSONAL_TOKEN}\'\n  },\n  body: raw\n};\n\nfetch("https://api.clarifai.com/v2/inputs", requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log(\'error\', error));\n')))),(0,i.kt)("h2",{id:"delete-inputs"},"Delete inputs"),(0,i.kt)("h3",{id:"delete-concepts-from-an-input"},"Delete concepts from an input"),(0,i.kt)("p",null,"To remove concepts that were already added to an input, you can do this:"),(0,i.kt)(p.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nMultiInputResponse patchInputsResponse = stub.patchInputs(\n    PatchInputsRequest.newBuilder()\n        .setAction("remove")  // Supported actions: overwrite, merge, remove.\n        .addInputs(\n            Input.newBuilder()\n                .setId("{YOUR_INPUT_ID}")\n                .setData(\n                    Data.newBuilder()\n                        .addConcepts(\n                            // We\'re removing the concept, so there\'s no need to specify\n                            // the concept value.\n                            Concept.newBuilder().setId("tree")\n                        )\n                )\n                .build()\n        )\n        .build()\n);\n\nif (patchInputsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n    throw new RuntimeException("Patch inputs failed, status: " + patchInputsResponse.getStatus());\n}\n'))),(0,i.kt)(r.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nMultiInputResponse patchInputsResponse = stub.patchInputs(\n    PatchInputsRequest.newBuilder()\n        .setAction("remove")  // Supported actions: overwrite, merge, remove.\n        .addInputs(\n            Input.newBuilder()\n                .setId("{YOUR_INPUT_ID}")\n                .setData(\n                    Data.newBuilder()\n                        .addConcepts(\n                            // We\'re removing the concept, so there\'s no need to specify\n                            // the concept value.\n                            Concept.newBuilder().setId("tree")\n                        )\n                )\n                .build()\n        )\n        .build()\n);\n\nif (patchInputsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n    throw new RuntimeException("Patch inputs failed, status: " + patchInputsResponse.getStatus());\n}\n'))),(0,i.kt)(r.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'# Insert here the initialization code as outlined on this page:\n# https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\npatch_inputs_response = stub.PatchInputs(\n    service_pb2.PatchInputsRequest(\n        action="remove",  # Supported actions: overwrite, merge, remove.\n        inputs=[\n            resources_pb2.Input(\n                id="{YOUR_INPUT_ID}",\n                data=resources_pb2.Data(\n                    concepts=[\n                        # We\'re removing the concept, so there\'s no need to specify\n                        # the concept value.\n                        resources_pb2.Concept(id="water"),\n                    ]\n                )\n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif patch_inputs_response.status.code != status_code_pb2.SUCCESS:\n    print("There was an error with your request!")\n    print("\\tCode: {}".format(patch_inputs_response.outputs[0].status.code))\n    print("\\tDescription: {}".format(patch_inputs_response.outputs[0].status.description))\n    print("\\tDetails: {}".format(patch_inputs_response.outputs[0].status.details))\n    raise Exception("Patch inputs failed, status: " + patch_inputs_response.status.description)\n'))),(0,i.kt)(r.Z,{value:"csharp",label:"C#",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'var response = client.PatchInputs(\n    new PatchInputsRequest()\n    {\n        UserAppId = new UserAppIDSet()\n        { \n            UserId = "{YOUR_USER_ID}",\n            AppId = "{YOUR_APP_ID}"\n        }\n                Action = "remove",\n                Inputs =\n        {\n            new List<Input>()\n            {\n                new Input()\n                {\n                                        InputId = "{YOUR_INPUT_ID}",\n                    Data = new Data()\n                    {\n                                                Concepts = \n                                                {\n                            new List<Concept>\n                            {\n                                new Concept\n                                {\n                                    Id = "tree"\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    },\n    metadata\n);\n\nif (response.Status.Code != StatusCode.Success)\n    throw new Exception("Request failed, response: " + response);\n'))),(0,i.kt)(r.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'# We\'re removing the concept, so there\'s no need to specify\n# the concept value.\ncurl -X PATCH \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'\n  {\n    "inputs": [\n      {\n        "id":"{YOUR_INPUT_ID}",\n        "data": {\n            "concepts":[\n                {"id":"water"}\n            ]\n        }\n      }\n    ],\n    "action":"remove"\n  }\'\\\n  https://api.clarifai.com/v2/inputs/\n'))),(0,i.kt)(r.Z,{value:"js_rest",label:"Javascript (REST)",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'const raw = JSON.stringify({\n    "user_app_id": {\n        "user_id": "{YOUR_USER_ID}",\n        "app_id": "{YOUR_APP_ID}"\n    },\n  "inputs": [\n    {\n      "id":"{YOUR_INPUT_ID}",\n      "data": {\n          "concepts":[\n              {"id":"water"}\n          ]\n      }\n    }\n  ],\n  "action":"remove"\n});\n\nconst requestOptions = {\n  method: \'PATCH\',\n  headers: {\n    \'Accept\': \'application/json\',\n    \'Authorization\': \'Key {YOUR_PERSONAL_TOKEN}\'\n  },\n  body: raw\n};\n\nfetch("https://api.clarifai.com/v2/inputs", requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log(\'error\', error));\n')))),(0,i.kt)("h3",{id:"bulk-delete-concepts-from-a-list-of-inputs"},"Bulk delete concepts from a list of inputs"),(0,i.kt)("p",null,"You can bulk delete multiple concepts from a list of inputs:"),(0,i.kt)(p.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nMultiInputResponse patchInputsResponse = stub.patchInputs(\n    PatchInputsRequest.newBuilder()\n        .setAction("remove")  // Supported actions: overwrite, merge, remove.\n        .addInputs(\n            Input.newBuilder()\n                .setId("{YOUR_INPUT_ID_1}")\n                .setData(\n                    Data.newBuilder()\n                        // We\'re removing the concepts, so there\'s no need to specify\n                        // the concept value.\n                        .addConcepts(\n                            Concept.newBuilder().setId("tree")\n                        )\n                        .addConcepts(\n                            Concept.newBuilder().setId("water")\n                        )\n                )\n                .build()\n        )\n        .addInputs(\n            Input.newBuilder()\n                .setId("{YOUR_INPUT_ID_2}")\n                .setData(\n                    Data.newBuilder()\n                        .addConcepts(\n                            Concept.newBuilder().setId("animal")\n                        )\n                        .addConcepts(\n                            Concept.newBuilder().setId("fruit")\n                        )\n                )\n                .build()\n        )\n        .build()\n);\n\nif (patchInputsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n    throw new RuntimeException("Patch inputs failed, status: " + patchInputsResponse.getStatus());\n}\n'))),(0,i.kt)(r.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nstub.PatchInputs(\n    {\n        action: "remove",  // Supported actions: overwrite, merge, remove.\n        inputs: [\n            {\n                id: "{YOUR_INPUT_ID_1}",\n                // We\'re removing the concepts, so there\'s no need to specify\n                // the concept value.\n                data: {concepts: [{id: "tree"}, {id: "water"}]}\n            },\n            {\n                id: "{YOUR_INPUT_ID_2}",\n                data: {concepts: [{id: "animal"}, {id: "fruit"}]}\n            },\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Patch inputs failed, status: " + response.status.description);\n        }\n    }\n);\n'))),(0,i.kt)(r.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'# Insert here the initialization code as outlined on this page:\n# https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\npatch_inputs_response = stub.PatchInputs(\n    service_pb2.PatchInputsRequest(\n        action="remove",  # Supported actions: overwrite, merge, remove.\n        inputs=[\n            resources_pb2.Input(\n                id="{YOUR_INPUT_ID_1}",\n                data=resources_pb2.Data(\n                    concepts=[\n                        # We\'re removing the concepts, so there\'s no need to specify\n                        # the concept value.\n                        resources_pb2.Concept(id="tree"),\n                        resources_pb2.Concept(id="water"),\n                    ]\n                )\n            ),\n            resources_pb2.Input(\n                id="{YOUR_INPUT_ID_2}",\n                data=resources_pb2.Data(\n                    concepts=[\n                        resources_pb2.Concept(id="animal"),\n                        resources_pb2.Concept(id="fruit"),\n                    ]\n                )\n            ),\n        ]\n    ),\n    metadata=metadata\n)\n\nif patch_inputs_response.status.code != status_code_pb2.SUCCESS:\n    print("There was an error with your request!")\n    print("\\tCode: {}".format(patch_inputs_response.outputs[0].status.code))\n    print("\\tDescription: {}".format(patch_inputs_response.outputs[0].status.description))\n    print("\\tDetails: {}".format(patch_inputs_response.outputs[0].status.details))\n    raise Exception("Patch inputs failed, status: " + patch_inputs_response.status.description)\n'))),(0,i.kt)(r.Z,{value:"csharp",label:"C#",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'var response = client.DeleteInput(\n    new DeleteInputRequest()\n    {\n        UserAppId = new UserAppIDSet()\n        { \n            UserId = "{YOUR_USER_ID}",\n            AppId = "{YOUR_APP_ID}"\n        }\n                Action = "remove",\n                Inputs =\n        {\n            new List<Input>()\n            {\n                new Input()\n                {\n                                        InputId = "{YOUR_INPUT_ID_1}",\n                    Data = new Data()\n                    {\n                                                Concepts = \n                                                {\n                            new List<Concept>\n                            {\n                                new Concept\n                                {\n                                    Id = "tree"\n                                }\n                            },\n                                                        {\n                                new Concept\n                                {\n                                    Id = "water"\n                                }\n                            }\n                        }\n                    }\n                }\n            },\n                        {\n                new Input()\n                {\n                                        InputId = "{YOUR_INPUT_ID_2}",\n                    Data = new Data()\n                    {\n                                                Concepts = \n                                                {\n                            new List<Concept>\n                            {\n                                new Concept\n                                {\n                                    Id = "animal"\n                                }\n                            },\n                                                        {\n                                new Concept\n                                {\n                                    Id = "fruit"\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    },\n    metadata\n);\n\nif (response.Status.Code != StatusCode.Success)\n    throw new Exception("Request failed, response: " + response);\n'))),(0,i.kt)(r.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'# We\'re removing the concept, so there\'s no need to specify\n# the concept value.\ncurl -X PATCH \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'\n  {\n    "inputs": [\n      {\n        "id": "{YOUR_INPUT_ID_1}",\n        "data": {\n          "concepts":[\n            {\n              "id": "tree"\n            },\n            {\n              "id": "water"\n            }\n          ]\n        }\n      },\n      {\n        "id": "{YOUR_INPUT_ID_2}",\n        "data": {\n          "concepts":[\n            {\n              "id": "animal"\n            },\n            {\n              "id": "fruit"\n            }\n          ]\n        }\n      }\n    ],\n    "action":"remove"\n  }\'\\\n  https://api.clarifai.com/v2/inputs\n'))),(0,i.kt)(r.Z,{value:"js_rest",label:"Javascript (REST)",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'const raw = JSON.stringify({\n    "user_app_id": {\n        "user_id": "{YOUR_USER_ID}",\n        "app_id": "{YOUR_APP_ID}"\n    },\n  "inputs": [\n    {\n      "id": "{YOUR_INPUT_ID_1}",\n      "data": {\n        "concepts":[\n          {\n            "id": "tree"\n          },\n          {\n            "id": "water"\n          }\n        ]\n      }\n    },\n    {\n      "id": "{YOUR_INPUT_ID_2}",\n      "data": {\n        "concepts":[\n          {\n            "id": "animal"\n          },\n          {\n            "id": "fruit"\n          }\n        ]\n      }\n    }\n  ],\n  "action":"remove"\n});\n\nconst requestOptions = {\n  method: \'PATCH\',\n  headers: {\n    \'Accept\': \'application/json\',\n    \'Authorization\': \'Key {YOUR_PERSONAL_TOKEN}\'\n  },\n  body: raw\n};\n\nfetch("https://api.clarifai.com/v2/inputs", requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log(\'error\', error));\n')))),(0,i.kt)("h3",{id:"delete-input-by-id"},"Delete Input By Id"),(0,i.kt)("p",null,"You can delete a single input by id:"),(0,i.kt)(p.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"grpc_java",label:"gRPC Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nBaseResponse deleteInputResponse = stub.deleteInput(\n    DeleteInputRequest.newBuilder()\n        .setInputId("{YOUR_INPUT_ID}")\n        .build()\n);\n\nif (deleteInputResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n    throw new RuntimeException("Delete input failed, status: " + deleteInputResponse.getStatus());\n}\n'))),(0,i.kt)(r.Z,{value:"grpc_nodejs",label:"gRPC NodeJS",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nstub.DeleteInput(\n    {\n        input_id: "{YOUR_INPUT_ID}"\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Delete input failed, status: " + response.status.description);\n        }\n    }\n);\n'))),(0,i.kt)(r.Z,{value:"grpc_python",label:"gRPC Python",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'# Insert here the initialization code as outlined on this page:\n# https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\ndelete_input_response = stub.DeleteInput(\n    service_pb2.DeleteInputRequest(input_id="{YOUR_INPUT_ID}"),\n    metadata=metadata\n)\n\nif delete_input_response.status.code != status_code_pb2.SUCCESS:\n    print("There was an error with your request!")\n    print("\\tCode: {}".format(delete_input_response.outputs[0].status.code))\n    print("\\tDescription: {}".format(delete_input_response.outputs[0].status.description))\n    print("\\tDetails: {}".format(delete_input_response.outputs[0].status.details))\n    raise Exception("Delete input failed, status: " + delete_input_response.status.description)\n'))),(0,i.kt)(r.Z,{value:"csharp",label:"C#",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'var response = client.DeleteInput(\n    new DeleteInputRequest()\n    {\n        UserAppId = new UserAppIDSet()\n        { \n            UserId = "{YOUR_USER_ID}",\n            AppId = "{YOUR_APP_ID}"\n        },\n                inputId = "{YOUR_INPUT_ID}"\n    },\n    metadata\n);\n\nif (response.Status.Code != StatusCode.Success)\n    throw new Exception("Request failed, response: " + response);\n'))),(0,i.kt)(r.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X DELETE \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  https://api.clarifai.com/v2/inputs/{YOUR_INPUT_ID}\n'))),(0,i.kt)(r.Z,{value:"js_rest",label:"Javascript (REST)",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const inputId = '{YOUR_INPUT_ID}'\nconst appId = '{YOUR_APP_ID}'\n\nconst requestOptions = {\n  method: 'DELETE',\n  headers: {\n    'Accept': 'application/json',\n    'Authorization': 'Key {YOUR_PERSONAL_TOKEN}'\n  }\n};\n\nfetch(`https://api.clarifai.com/v2/users/me/apps/${appId}/inputs/${inputId}`, requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log('error', error));\n")))),(0,i.kt)("h3",{id:"delete-a-list-of-inputs"},"Delete a list of inputs"),(0,i.kt)("p",null,"You can also delete multiple inputs in one API call. This will happen asynchronously."),(0,i.kt)(p.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nBaseResponse listInputsResponse = stub.deleteInputs(\n    DeleteInputsRequest.newBuilder()\n        .addIds("{YOUR_INPUT_ID_1}")\n        .addIds("{YOUR_INPUT_ID_2}")\n        .build()\n);\n\nif (listInputsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n    throw new RuntimeException("Delete inputs failed, status: " + listInputsResponse.getStatus());\n}\n'))),(0,i.kt)(r.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nstub.DeleteInputs(\n    {\n        ids: ["{YOUR_INPUT_ID_1}", "{YOUR_INPUT_ID_2}"]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Delete inputs failed, status: " + response.status.description);\n        }\n    }\n);\n'))),(0,i.kt)(r.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'# Insert here the initialization code as outlined on this page:\n# https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\ndelete_inputs_response = stub.DeleteInputs(\n    service_pb2.DeleteInputsRequest(\n        ids=["{YOUR_INPUT_ID_1}", "{YOUR_INPUT_ID_2}"]\n    ),\n    metadata=metadata\n)\n\nif delete_inputs_response.status.code != status_code_pb2.SUCCESS:\n    print("There was an error with your request!")\n    print("\\tCode: {}".format(delete_inputs_response.outputs[0].status.code))\n    print("\\tDescription: {}".format(delete_inputs_response.outputs[0].status.description))\n    print("\\tDetails: {}".format(delete_inputs_response.outputs[0].status.details))\n    raise Exception("Delete inputs failed, status: " + delete_inputs_response.status.description)\n'))),(0,i.kt)(r.Z,{value:"csharp",label:"C#",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'var response = client.DeleteInput(\n    new DeleteInputRequest()\n    {\n        UserAppId = new UserAppIDSet()\n        { \n            UserId = "{YOUR_USER_ID}",\n            AppId = "{YOUR_APP_ID}"\n        },\n                Ids = {\n            new List<string>()\n            {\n                "{YOUR_INPUT_ID_1}", \n                                "{YOUR_INPUT_ID_2}"\n            }\n        }\n    },\n    metadata\n);\n\nif (response.Status.Code != StatusCode.Success)\n    throw new Exception("Request failed, response: " + response);\n'))),(0,i.kt)(r.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X DELETE \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'\n  {\n    "ids":["{YOUR_INPUT_ID_1}","{YOUR_INPUT_ID_2}"]\n  }\'\\\n  https://api.clarifai.com/v2/inputs\n'))),(0,i.kt)(r.Z,{value:"js_rest",label:"Javascript (REST)",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'const raw = JSON.stringify({\n    "user_app_id": {\n        "user_id": "{YOUR_USER_ID}",\n        "app_id": "{YOUR_APP_ID}"\n    },\n  "ids":["{YOUR_INPUT_ID_1}","{YOUR_INPUT_ID_2}"]\n});\n\nconst requestOptions = {\n  method: \'DELETE\',\n  headers: {\n    \'Accept\': \'application/json\',\n    \'Authorization\': \'Key {YOUR_PERSONAL_TOKEN}\'\n  },\n  body: raw\n};\n\nfetch("https://api.clarifai.com/v2/inputs", requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log(\'error\', error));\n')))))}h.isMDXComponent=!0}}]);
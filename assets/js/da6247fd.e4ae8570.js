"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[8691],{19365:(e,t,n)=>{n.d(t,{A:()=>i});var r=n(96540),a=n(20053);const o={tabItem:"tabItem_Ymn6"};function i(e){let{children:t,hidden:n,className:i}=e;return r.createElement("div",{role:"tabpanel",className:(0,a.A)(o.tabItem,i),hidden:n},t)}},11470:(e,t,n)=>{n.d(t,{A:()=>v});var r=n(58168),a=n(96540),o=n(20053),i=n(23104),s=n(56347),u=n(57485),l=n(31682),c=n(89466);function d(e){return function(e){return a.Children.map(e,(e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:r,default:a}}=e;return{value:t,label:n,attributes:r,default:a}}))}function p(e){const{values:t,children:n}=e;return(0,a.useMemo)((()=>{const e=t??d(n);return function(e){const t=(0,l.X)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function g(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function f(e){let{queryString:t=!1,groupId:n}=e;const r=(0,s.W6)(),o=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,u.aZ)(o),(0,a.useCallback)((e=>{if(!o)return;const t=new URLSearchParams(r.location.search);t.set(o,e),r.replace({...r.location,search:t.toString()})}),[o,r])]}function h(e){const{defaultValue:t,queryString:n=!1,groupId:r}=e,o=p(e),[i,s]=(0,a.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!g({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const r=n.find((e=>e.default))??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:o}))),[u,l]=f({queryString:n,groupId:r}),[d,h]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[r,o]=(0,c.Dv)(n);return[r,(0,a.useCallback)((e=>{n&&o.set(e)}),[n,o])]}({groupId:r}),m=(()=>{const e=u??d;return g({value:e,tabValues:o})?e:null})();(0,a.useLayoutEffect)((()=>{m&&s(m)}),[m]);return{selectedValue:i,selectValue:(0,a.useCallback)((e=>{if(!g({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);s(e),l(e),h(e)}),[l,h,o]),tabValues:o}}var m=n(92303);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function y(e){let{className:t,block:n,selectedValue:s,selectValue:u,tabValues:l}=e;const c=[],{blockElementScrollPositionUntilNextRender:d}=(0,i.a_)(),p=e=>{const t=e.currentTarget,n=c.indexOf(t),r=l[n].value;r!==s&&(d(t),u(r))},g=e=>{let t=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const n=c.indexOf(e.currentTarget)+1;t=c[n]??c[0];break}case"ArrowLeft":{const n=c.indexOf(e.currentTarget)-1;t=c[n]??c[c.length-1];break}}t?.focus()};return a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.A)("tabs",{"tabs--block":n},t)},l.map((e=>{let{value:t,label:n,attributes:i}=e;return a.createElement("li",(0,r.A)({role:"tab",tabIndex:s===t?0:-1,"aria-selected":s===t,key:t,ref:e=>c.push(e),onKeyDown:g,onClick:p},i,{className:(0,o.A)("tabs__item",b.tabItem,i?.className,{"tabs__item--active":s===t})}),n??t)})))}function _(e){let{lazy:t,children:n,selectedValue:r}=e;const o=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=o.find((e=>e.props.value===r));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return a.createElement("div",{className:"margin-top--md"},o.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==r}))))}function w(e){const t=h(e);return a.createElement("div",{className:(0,o.A)("tabs-container",b.tabList)},a.createElement(y,(0,r.A)({},e,t)),a.createElement(_,(0,r.A)({},e,t)))}function v(e){const t=(0,m.A)();return a.createElement(w,(0,r.A)({key:String(t)},e))}},68942:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>b,contentTitle:()=>h,default:()=>v,frontMatter:()=>f,metadata:()=>m,toc:()=>y});var r=n(58168),a=(n(96540),n(15680)),o=n(11470),i=n(19365),s=n(77964);const u="import os  # Importing the os module for environment variable access\n\n# Importing necessary configurations and classes from unstructured.ingest.connector.fsspec.dropbox\nfrom unstructured.ingest.connector.fsspec.dropbox import DropboxAccessConfig, SimpleDropboxConfig\n\n# Importing configuration classes from unstructured.ingest.interfaces\nfrom unstructured.ingest.interfaces import (\n   PartitionConfig,\n   ProcessorConfig,\n   ReadConfig,\n)\n\n# Importing the DropboxRunner class from unstructured.ingest.runner\nfrom unstructured.ingest.runner import DropboxRunner\n\n# Importing necessary configurations and classes from unstructured.ingest.connector.clarifai\nfrom unstructured.ingest.connector.clarifai import (\n   ClarifaiAccessConfig,\n   ClarifaiWriteConfig,\n   SimpleClarifaiConfig,\n)\n\n# Importing base writer and ClarifaiWriter from unstructured.ingest.runner.writers.clarifai\nfrom unstructured.ingest.runner.writers.base_writer import Writer\nfrom unstructured.ingest.runner.writers.clarifai import (\n   ClarifaiWriter,\n)\n",l='def clarifai_writer() -> Writer:\n    # This function defines a writer for the Clarifai service.\n    # It returns an instance of ClarifaiWriter class.\n\n    return ClarifaiWriter(\n        connector_config=SimpleClarifaiConfig(\n            # Configuration for accessing the Clarifai API.\n            access_config=ClarifaiAccessConfig(\n                api_key="PAT"  # API key for accessing the Clarifai service.\n            ),\n            # Configuration specific to the Clarifai application.\n            app_id="app_id",  # The ID of the Clarifai application.\n            user_id="user_id"  # The ID of the Clarifai user.\n        ),\n        write_config=ClarifaiWriteConfig()  # Configuration for writing data to Clarifai.\n    )',c='if __name__ == "__main__":\n    # Creating a writer instance using the clarifai_writer function\n    writer = clarifai_writer()\n    \n    # Creating an instance of DropboxRunner with various configurations\n    runner = DropboxRunner(\n        processor_config=ProcessorConfig(\n            verbose=True,  # Enable verbose output\n            output_dir="dropbox-output",  # Directory to store output locally\n            num_processes=2,  # Number of processes to use\n        ),\n        read_config=ReadConfig(),  # Configuration for reading data\n        partition_config=PartitionConfig(),  # Configuration for partitioning data\n        connector_config=SimpleDropboxConfig(\n            access_config=DropboxAccessConfig(token=os.getenv("DROPBOX_ACCESS_TOKEN")),  # Access config using environment variable for Dropbox token\n            remote_url="dropbox file URL",  # URL of the Dropbox file\n            recursive=True,  # Whether to recursively read files in the directory\n        ),\n        writer=writer,  # Writer to use for output\n        writer_kwargs={},  # Additional arguments for the writer\n    )\n    \n    # Running the DropboxRunner\n    runner.run()\n',d='from clarifai.rag import RAG\n\nWORKFLOW_URL = \'rag_workflow_url\'\n# creating RAG object with prebuilt workflow\nrag_object_from_url = RAG(workflow_url = WORKFLOW_URL)\nresult=rag_object_from_url.chat(messages=[{"role":"human", "content":"what is brake fluid"}])\n# Extract the content of the response and split it by newline character (\'\\n\') into a list \'ans\'.\nanswer = result[0]["content"].split(\'\\n\')\nprint(answer)',p='2024-06-11 10:03:55,063 MainProcess DEBUG    updating download directory to: /root/.cache/unstructured/ingest/dropbox/a5d8d1c6ed\n2024-06-11 10:03:55,068 MainProcess INFO     running pipeline: DocFactory -> Reader -> Partitioner -> Writer -> Copier with config: {"reprocess": false, "verbose": true, "work_dir": "/root/.cache/unstructured/ingest/pipeline", "output_dir": "dropbox-output", "num_processes": 2, "raise_on_error": false}\n2024-06-11 10:03:55,152 MainProcess INFO     Running doc factory to generate ingest docs. Source connector: {"processor_config": {"reprocess": false, "verbose": true, "work_dir": "/root/.cache/unstructured/ingest/pipeline", "output_dir": "dropbox-output", "num_processes": 2, "raise_on_error": false}, "read_config": {"download_dir": "/root/.cache/unstructured/ingest/dropbox/a5d8d1c6ed", "re_download": false, "preserve_downloads": false, "download_only": false, "max_docs": null}, "connector_config": {"remote_url": "dropbox://test", "uncompress": false, "recursive": true, "file_glob": null, "access_config": {"token": "*******"}, "protocol": "dropbox", "path_without_protocol": "test", "dir_path": "test", "file_path": ""}}\n2024-06-11 10:03:55,568 MainProcess INFO     processing 2 docs via 2 processes\n2024-06-11 10:03:55,571 MainProcess INFO     Calling Reader with 2 docs\n2024-06-11 10:03:55,573 MainProcess INFO     Running source node to download data associated with ingest docs\n2024-06-11 10:04:03,339 MainProcess INFO     Calling Partitioner with 2 docs\n2024-06-11 10:04:03,341 MainProcess INFO     Running partition node to extract content from json files. Config: {"pdf_infer_table_structure": false, "strategy": "auto", "ocr_languages": null, "encoding": null, "additional_partition_args": {}, "skip_infer_table_types": null, "fields_include": ["element_id", "text", "type", "metadata", "embeddings"], "flatten_metadata": false, "metadata_exclude": [], "metadata_include": [], "partition_endpoint": "https://api.unstructured.io/general/v0/general", "partition_by_api": false, "api_key": "*******", "hi_res_model_name": null}, partition kwargs: {}]\n2024-06-11 10:04:03,346 MainProcess INFO     Creating /root/.cache/unstructured/ingest/pipeline/partitioned\n2024-06-11 10:04:14,063 MainProcess INFO     Calling Copier with 1 docs\n2024-06-11 10:04:14,067 MainProcess INFO     Running copy node to move content to desired output location\n2024-06-11 10:04:15,970 MainProcess INFO     uploading elements from 1 document(s) to the destination\n2024-06-11 10:04:15,972 MainProcess INFO     Calling Writer with 1 docs\n2024-06-11 10:04:15,975 MainProcess INFO     Running write node to upload content. Destination connector: {"write_config": {"batch_size": 50}, "connector_config": {"access_config": {"api_key": "*******"}, "app_id": "unst-clf", "user_id": "8tzpjy1a841y", "dataset_id": null}, "_client": null}]\n2024-06-11 10:04:16,425 MainProcess INFO     Extending 506 json elements from content in dropbox-output/Crawfords_Auto_Repair_Guide.txt.json\n2024-06-11 10:04:16,445 MainProcess INFO     writing 506 objects to destination app unst-clf \n2024-06-11 10:04:19 INFO     clarifai.client.input:                                                    input.py:706\n                             Inputs Uploaded                                                                       \n                             code: SUCCESS                                                                         \n                             description: "Ok"                                                                     \n                             details: "All inputs successfully added"                                              \n                             req_id: "2216655c3ae641f1b3789c45f367fdd0" \n',g="'Brake fluid is a type of hydraulic fluid used in hydraulic brake and hydraulic clutch applications in vehicles. \nIt is responsible for transferring force into pressure, and to amplify braking force. \nThe level of brake fluid in a vehicle can be checked via a clear reservoir, and it should ideally be between the minimum and maximum level marks. If the fluid is low, it could indicate a potential issue and might require a visit to a mechanic. Most vehicles also have a dashboard light that illuminates when the brake fluid is low.'",f={},h="Chat With Dropbox Using Unstructured.io",m={unversionedId:"integrations/unstructured/dropbox",id:"integrations/unstructured/dropbox",title:"Chat With Dropbox Using Unstructured.io",description:"Learn how to chat with data from Dropbox",source:"@site/docs/integrations/unstructured/dropbox.md",sourceDirName:"integrations/unstructured",slug:"/integrations/unstructured/dropbox",permalink:"/integrations/unstructured/dropbox",draft:!1,editUrl:"https://github.com/Clarifai/docs/blob/main/docs/integrations/unstructured/dropbox.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Data Ingestion Using Unstructured.io",permalink:"/integrations/unstructured/data-ingestion"},next:{title:"Use RAG With Unstructured.io",permalink:"/integrations/unstructured/s3-rag"}},b={},y=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Initialization",id:"initialization",level:2},{value:"Data Ingestion",id:"data-ingestion",level:2},{value:"Chat",id:"chat",level:2}],_={toc:y},w="wrapper";function v(e){let{components:t,...n}=e;return(0,a.yg)(w,(0,r.A)({},_,n,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"chat-with-dropbox-using-unstructuredio"},"Chat With Dropbox Using Unstructured.io"),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Learn how to chat with data from Dropbox")),(0,a.yg)("hr",null),(0,a.yg)("p",null,(0,a.yg)("a",{parentName:"p",href:"https://www.dropbox.com/official-teams-page?_tk=paid_sem_goog_biz_b&_camp=1018334849&_kw=dropbox%7Ce&_ad=666300362351%7C%7Cc&gad_source=1&gclid=CjwKCAjw1K-zBhBIEiwAWeCOFw939qj3aTgFRDagZZw0ugD4sLAMy1AeGE_ReqKsEyd5dgMn96KX8RoCzJ4QAvD_BwE"},"Dropbox")," is a cloud storage service that allows users to store, sync, and share files online. It provides seamless file synchronization across devices, enabling access to updated files from anywhere with an internet connection. Users can easily share files and folders with others, even if they don't have a Dropbox account.  Using Dropbox as a source connector you can now ingest data to a Clarifai app and then leverage all of Clarifai platform's abilities. In this example, we are going to chat with our data ingested into the Clarifai app using RAG."),(0,a.yg)("h2",{id:"prerequisites"},"Prerequisites"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Setting up the Clarifai Python SDK along with PAT. Refer to the installation and configuration with the PAT token ",(0,a.yg)("a",{parentName:"li",href:"https://docs.clarifai.com/python-sdk/sdk-overview/"},"here"),".")),(0,a.yg)("admonition",{type:"note"},(0,a.yg)("p",{parentName:"admonition"},"Guide to get your ",(0,a.yg)("a",{parentName:"p",href:"https://docs.clarifai.com/clarifai-basics/authentication/personal-access-tokens"},"PAT"))),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-python"},"import os\nos.environ['CLARIFAI_PAT'] =\"YOUR_PAT\"\n")),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Install the required packages.")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},'! pip install "unstructured[clarifai]"\n! pip install "unstructured[dropbox]"\n')),(0,a.yg)("h2",{id:"initialization"},"Initialization"),(0,a.yg)("p",null,"First, let us setup the data we are going to ingest into the app. The data we are going to use will be stored in Dropbox. To access the data using Unstructured.io, we have to provide Dropbox access token."),(0,a.yg)("admonition",{type:"info"},(0,a.yg)("p",{parentName:"admonition"},"Setup dropbox access token. Refer ",(0,a.yg)("a",{parentName:"p",href:"https://developers.dropbox.com/oauth-guide"},"this")," page for instructions.")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-python"},'DROPBOX_ACCESS_TOKEN="YOUR_ACCESS_TOKEN"\n')),(0,a.yg)("p",null,"After setting up the access tokens, let\u2019s import some necessary libraries."),(0,a.yg)(o.A,{mdxType:"Tabs"},(0,a.yg)(i.A,{value:"python",label:"Python",mdxType:"TabItem"},(0,a.yg)(s.A,{className:"language-python",mdxType:"CodeBlock"},u))),(0,a.yg)("p",null,"Next, we will have to write a function to set up the ingestion configurations required to upload the data into our app in the Clarifai platform."),(0,a.yg)(o.A,{mdxType:"Tabs"},(0,a.yg)(i.A,{value:"python",label:"Python",mdxType:"TabItem"},(0,a.yg)(s.A,{className:"language-python",mdxType:"CodeBlock"},l))),(0,a.yg)("h2",{id:"data-ingestion"},"Data Ingestion"),(0,a.yg)("p",null,"In data ingestion, there are two important concepts Source Connector and Destination Connector. For our use case the Source Connector will fetch the data from Dropbox and the Destination Connector will send the transformed data to the Clarifai app."),(0,a.yg)("p",null,"Click ",(0,a.yg)("a",{parentName:"p",href:"https://unstructured-io.github.io/unstructured/ingest/index.html"},"here")," to learn more about Ingestion."),(0,a.yg)(o.A,{mdxType:"Tabs"},(0,a.yg)(i.A,{value:"python",label:"Python",mdxType:"TabItem"},(0,a.yg)(s.A,{className:"language-python",mdxType:"CodeBlock"},c))),(0,a.yg)("details",null,(0,a.yg)("summary",null,"Output"),(0,a.yg)(s.A,{className:"language-python",mdxType:"CodeBlock"},p)),(0,a.yg)("h2",{id:"chat"},"Chat"),(0,a.yg)("p",null,"In the final step, we are going to perform information retrieval using RAG based on the data we ingested from Dropbox to the Clarifai app using Unstructured.io. You can use a workflow with a RAG prompter for initialising RAG. After successfully creating a workflow, you can get the URL from the Clarifai portal. After creating the rag object using workflow URL you can start retrieving text from the data we ingested using Unstructured.io."),(0,a.yg)(o.A,{mdxType:"Tabs"},(0,a.yg)(i.A,{value:"python",label:"Python",mdxType:"TabItem"},(0,a.yg)(s.A,{className:"language-python",mdxType:"CodeBlock"},d))),(0,a.yg)("details",null,(0,a.yg)("summary",null,"Output"),(0,a.yg)(s.A,{className:"language-python",mdxType:"CodeBlock"},g)))}v.isMDXComponent=!0}}]);
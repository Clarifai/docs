"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[3252],{11470:(e,t,a)=>{a.d(t,{A:()=>b});var n=a(96540),s=a(18215),i=a(23104),r=a(56347),l=a(205),o=a(57485),d=a(31682),c=a(70679);function u(e){return n.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,n.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function p(e){const{values:t,children:a}=e;return(0,n.useMemo)(()=>{const e=t??function(e){return u(e).map(({props:{value:e,label:t,attributes:a,default:n}})=>({value:e,label:t,attributes:a,default:n}))}(a);return function(e){const t=(0,d.XI)(e,(e,t)=>e.value===t.value);if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[t,a])}function h({value:e,tabValues:t}){return t.some(t=>t.value===e)}function m({queryString:e=!1,groupId:t}){const a=(0,r.W6)(),s=function({queryString:e=!1,groupId:t}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:e,groupId:t});return[(0,o.aZ)(s),(0,n.useCallback)(e=>{if(!s)return;const t=new URLSearchParams(a.location.search);t.set(s,e),a.replace({...a.location,search:t.toString()})},[s,a])]}function f(e){const{defaultValue:t,queryString:a=!1,groupId:s}=e,i=p(e),[r,o]=(0,n.useState)(()=>function({defaultValue:e,tabValues:t}){if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!h({value:e,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${t.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const a=t.find(e=>e.default)??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:i})),[d,u]=m({queryString:a,groupId:s}),[f,g]=function({groupId:e}){const t=function(e){return e?`docusaurus.tab.${e}`:null}(e),[a,s]=(0,c.Dv)(t);return[a,(0,n.useCallback)(e=>{t&&s.set(e)},[t,s])]}({groupId:s}),x=(()=>{const e=d??f;return h({value:e,tabValues:i})?e:null})();(0,l.A)(()=>{x&&o(x)},[x]);return{selectedValue:r,selectValue:(0,n.useCallback)(e=>{if(!h({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);o(e),u(e),g(e)},[u,g,i]),tabValues:i}}var g=a(92303);const x={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var _=a(74848);function v({className:e,block:t,selectedValue:a,selectValue:n,tabValues:r}){const l=[],{blockElementScrollPositionUntilNextRender:o}=(0,i.a_)(),d=e=>{const t=e.currentTarget,s=l.indexOf(t),i=r[s].value;i!==a&&(o(t),n(i))},c=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const a=l.indexOf(e.currentTarget)+1;t=l[a]??l[0];break}case"ArrowLeft":{const a=l.indexOf(e.currentTarget)-1;t=l[a]??l[l.length-1];break}}t?.focus()};return(0,_.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":t},e),children:r.map(({value:e,label:t,attributes:n})=>(0,_.jsx)("li",{role:"tab",tabIndex:a===e?0:-1,"aria-selected":a===e,ref:e=>{l.push(e)},onKeyDown:c,onClick:d,...n,className:(0,s.A)("tabs__item",x.tabItem,n?.className,{"tabs__item--active":a===e}),children:t??e},e))})}function y({lazy:e,children:t,selectedValue:a}){const i=(Array.isArray(t)?t:[t]).filter(Boolean);if(e){const e=i.find(e=>e.props.value===a);return e?(0,n.cloneElement)(e,{className:(0,s.A)("margin-top--md",e.props.className)}):null}return(0,_.jsx)("div",{className:"margin-top--md",children:i.map((e,t)=>(0,n.cloneElement)(e,{key:t,hidden:e.props.value!==a}))})}function j(e){const t=f(e);return(0,_.jsxs)("div",{className:(0,s.A)("tabs-container",x.tabList),children:[(0,_.jsx)(v,{...t,...e}),(0,_.jsx)(y,{...t,...e})]})}function b(e){const t=(0,g.A)();return(0,_.jsx)(j,{...e,children:u(e.children)},String(t))}},19365:(e,t,a)=>{a.d(t,{A:()=>r});a(96540);var n=a(18215);const s={tabItem:"tabItem_Ymn6"};var i=a(74848);function r({children:e,hidden:t,className:a}){return(0,i.jsx)("div",{role:"tabpanel",className:(0,n.A)(s.tabItem,a),hidden:t,children:e})}},50589:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>D,contentTitle:()=>P,default:()=>k,frontMatter:()=>I,metadata:()=>n,toc:()=>N});const n=JSON.parse('{"id":"create/models/deep-fine-tuning/text-classifier","title":"Text Classifier","description":"Learn about our text classifier model type","source":"@site/docs/create/models/deep-fine-tuning/text-classifier.md","sourceDirName":"create/models/deep-fine-tuning","slug":"/create/models/deep-fine-tuning/text-classifier","permalink":"/create/models/deep-fine-tuning/text-classifier","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"description":"Learn about our text classifier model type","sidebar_position":8},"sidebar":"tutorialSidebar","previous":{"title":"Clusterer","permalink":"/create/models/deep-fine-tuning/clusterer"},"next":{"title":"Text Generation","permalink":"/create/models/deep-fine-tuning/text-to-text"}}');var s=a(74848),i=a(28453),r=a(11470),l=a(19365),o=a(73748);const d='from clarifai.client.user import User\n#replace your "user_id"\nclient = User(user_id="user_id")\napp = client.create_app(app_id="demo_train", base_workflow="Universal")',c="#importing load_module_dataloader for calling the dataloader object in dataset.py in the local data folder\nfrom clarifai.datasets.upload.utils import load_module_dataloader\n\n\n# Construct the path to the dataset folder\nCSV_PATH = os.path.join(os.getcwd().split('/models/model_train')[0],'datasets/upload/data/imdb.csv')\n\n\n# Create a Clarifai dataset with the specified dataset_id \ndataset = app.create_dataset(dataset_id=\"text_dataset\")\n# Upload the dataset using the provided dataloader and get the upload status\ndataset.upload_from_csv(csv_path=CSV_PATH,input_type='text',csv_type='raw', labels=True)",u="print(app.list_trainable_model_types())",p='MODEL_ID = "model_text_classifier"\nMODEL_TYPE_ID = "text-classifier"\n\n# Create a model by passing the model name and model type as parameter\nmodel = app.create_model(model_id=MODEL_ID, model_type_id=MODEL_TYPE_ID)\n',h="print(model.list_training_templates())",m="# get the model parameters\nmodel_params = model.get_params(template='HuggingFace_AdvancedConfig')\nconcepts = [concept.id for concept in app.list_concepts()]\n# update the concept field in model parameters\nmodel.update_params(dataset_id = 'text_dataset',concepts = [\"id-pos\",\"id-neg\"])",f='import time\n#Starting the training\nmodel_version_id = model.train()\n\n#Checking the status of training\nwhile True:\n    status = model.training_status(version_id=model_version_id,training_logs=False)\n    if status.code == 21106: #MODEL_TRAINING_FAILED\n        print(status)\n        break\n    elif status.code == 21100: #MODEL_TRAINED\n        print(status)\n        break\n    else:\n        print("Current Status:",status)\n        print("Waiting---")\n        time.sleep(120)\n',g="# Getting the predictions\nTEXT = b\"This is a great place to work\"\nmodel_prediction = model.predict_by_bytes(TEXT, input_type=\"text\")\n\n# Get the output\nprint('Input: ',TEXT)\nfor concept in model_prediction.outputs[0].data.concepts:\n    print(concept.id,':',round(concept.value,2))",x="# Evaluate the model using the specified dataset ID 'text_dataset' and evaluation ID 'one'.\nmodel.evaluate(dataset_id='text_dataset', eval_id='one')\n\n# Retrieve the evaluation result for the evaluation ID 'one'.\nresult = model.get_eval_by_id(eval_id=\"one\")\n\n# Print the summary of the evaluation result.\nprint(result.summary)\n",_="#importing load_module_dataloader for calling the dataloader object in dataset.py in the local data folder\nfrom clarifai.datasets.upload.utils import load_module_dataloader\n\n\n# Construct the path to the dataset folder\nCSV_PATH = os.path.join(os.getcwd().split('/models/model_train')[0],'datasets/upload/data/test_imdb.csv')\n\n\n# Create a Clarifai dataset with the specified dataset_id\ntest_dataset = app.create_dataset(dataset_id=\"test_text_dataset\")\n# Upload the dataset using the provided dataloader and get the upload status\ntest_dataset.upload_from_csv(csv_path=CSV_PATH,input_type='text',csv_type='raw', labels=True)\n\n# Evaluate the model using the specified test text dataset identified as 'test_text_dataset'\n# and the evaluation identifier 'two'.\nmodel.evaluate(dataset_id='test_text_dataset', eval_id='two')\n\n# Retrieve the evaluation result with the identifier 'two'.\nresult = model.get_eval_by_id(\"two\")\n\n# Print the summary of the evaluation result.\nprint(result.summary)\n",v="from clarifai.utils.evaluation import EvalResultCompare\n\n# Creating an instance of EvalResultCompare class with specified models and datasets\neval_result = EvalResultCompare(models=[model], datasets=[dataset, test_dataset])\n\n# Printing a detailed summary of the evaluation result\nprint(eval_result.detailed_summary())",y="# get the model parameters\nmodel_params = model.get_params(template='HuggingFace_AdvancedConfig')",j="['visual-classifier',\n 'visual-detector',\n 'visual-segmenter',\n 'visual-embedder',\n 'clusterer',\n 'text-classifier',\n 'embedding-classifier',\n 'text-to-text']",b="['HF_GPTNeo_125m_lora',\n 'HF_GPTNeo_2p7b_lora',\n 'HF_Llama_2_13b_chat_GPTQ_lora',\n 'HF_Llama_2_7b_chat_GPTQ_lora',\n 'HF_Mistral_7b_instruct_GPTQ_lora',\n 'HuggingFace_AdvancedConfig']\n",A="{'dataset_id': 'text_dataset',\n 'dataset_version_id': '',\n 'concepts': ['id-pos', 'id-neg'],\n 'train_params': {'invalid_data_tolerance_percent': 5.0,\n  'template': 'HuggingFace_AdvancedConfig',\n  'model_config': {'problem_type': 'multi_label_classification',\n   'pretrained_model_name_or_path': 'bert-base-cased',\n   'torch_dtype': 'torch.float32'},\n  'tokenizer_config': {},\n  'trainer_config': {'num_train_epochs': 1.0,\n   'auto_find_batch_size': True,\n   'output_dir': 'checkpoint'}},\n 'inference_params': {'select_concepts': []}}\n",w="Input:  b'This is a great place to work'\n\nid-neg : 0.56\n\nid-pos : 0.39",T="macro_avg_roc_auc: 0.6499999761581421\nmacro_std_roc_auc: 0.07468751072883606\nmacro_avg_f1_score: 0.75\nmacro_avg_precision: 0.6000000238418579\nmacro_avg_recall: 0.5",C="macro_avg_roc_auc: 0.6161290407180786\nmacro_std_roc_auc: 0.1225806474685669\nmacro_avg_f1_score: 0.7207207679748535\nmacro_avg_precision: 0.5633803009986877\nmacro_avg_recall: 0.5",S="(  Concept  Accuracy (ROC AUC)  Total Labeled  Total Predicted  True Positives  \\\n 0  id-pos               0.725             80                0               0   \n 0  id-neg               0.575            120              200             120   \n 0  id-pos               0.739             31                0               0   \n 0  id-neg               0.494             40               71              40   \n \n    False Negatives  False Positives  Recall  Precision        F1  \\\n 0               80                0     0.0     1.0000  0.000000   \n 0                0               80     1.0     0.6000  0.750000   \n 0               31                0     0.0     1.0000  0.000000   \n 0                0               31     1.0     0.5634  0.720737   \n \n               Dataset  \n 0       text_dataset2  \n 0       text_dataset2  \n 0  test_text_dataset3  \n 0  test_text_dataset3  ,\n                 Total Concept  Accuracy (ROC AUC)  Total Labeled  \\\n 0       Dataset:text_dataset2            0.650000            200   \n 0  Dataset:test_text_dataset3            0.616129             71   \n \n    Total Predicted  True Positives  False Negatives  False Positives   Recall  \\\n 0              200             120               80               80  0.60000   \n 0               71              40               31               31  0.56338   \n \n    Precision        F1  \n 0   0.760000  0.670588  \n 0   0.754028  0.644909  )",I={description:"Learn about our text classifier model type",sidebar_position:8},P="Text Classifier",D={},N=[{value:"Example Use Case",id:"example-use-case",level:2},{value:"Create and Train Text Classifier",id:"create-and-train-text-classifier",level:2},{value:"Step 1: App Creation",id:"step-1-app-creation",level:3},{value:"Step 2: Dataset Upload",id:"step-2-dataset-upload",level:3},{value:"Step 3: Model Creation",id:"step-3-model-creation",level:3},{value:"Step 4: Template Selection",id:"step-4-template-selection",level:3},{value:"Step 5: Set Up Model Parameters",id:"step-5-set-up-model-parameters",level:3},{value:"Step 6: Initiate Model Training",id:"step-6-initiate-model-training",level:3},{value:"Step 7: Model Prediction",id:"step-7-model-prediction",level:3},{value:"Step 8: Model Evaluation",id:"step-8-model-evaluation",level:3}];function E(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,i.R)(),...e.components},{Details:a}=t;return a||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"text-classifier",children:"Text Classifier"})}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Learn about our text classifier model type"})}),"\n",(0,s.jsx)("hr",{}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Input"}),": Text"]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Output"}),": Concepts"]}),"\n",(0,s.jsx)(t.p,{children:"Text classifier is a type of deep fine-tuned model designed to automatically categorize or classify text data into predefined categories or concepts. This is a common task in natural language processing (NLP) and has a wide range of applications, including sentiment analysis, spam detection, topic categorization, and more."}),"\n",(0,s.jsx)(t.admonition,{type:"info",children:(0,s.jsxs)(t.p,{children:["The text classifier model type also comes with various ",(0,s.jsx)(t.a,{href:"https://docs.clarifai.com/portal-guide/model/deep-training/text-templates",children:"templates"})," that give you the control to choose the specific architecture used by your neural network, as well as define a set of hyperparameters you can use to fine-tune the way your model learns."]})}),"\n",(0,s.jsx)(t.p,{children:"You may choose a text classifier model type in cases where:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"You need an automated way to process and categorize large amounts of textual data, enabling applications that require efficient and accurate text categorization."}),"\n",(0,s.jsxs)(t.li,{children:['You need a text classification model to learn new features not recognized by the existing Clarifai models. In that case, you may need to "deep fine-tune" your custom model and integrate it directly within your ',(0,s.jsx)(t.a,{href:"https://docs.clarifai.com/portal-guide/workflows/",children:"workflows"}),"."]}),"\n",(0,s.jsx)(t.li,{children:"You have a custom-tailored dataset, accurate labels, and the expertise and time to fine-tune models."}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"example-use-case",children:"Example Use Case"}),"\n",(0,s.jsx)(t.p,{children:"A company wants to monitor customer sentiment towards its products by analyzing online reviews. They receive a large number of product reviews on their website and social media platforms. To efficiently understand customer opinions, they can employ a text classifier model to automatically classify these reviews as positive, negative, or neutral."}),"\n",(0,s.jsx)(t.admonition,{type:"tip",children:(0,s.jsxs)(t.p,{children:["You can explore the step-by-step tutorial on fine-tuning the GPT-Neo LoRA template for text classification tasks ",(0,s.jsx)(t.a,{href:"https://www.clarifai.com/blog/fine-tuning-gpt-neo-for-text-classification",children:"here"}),"."]})}),"\n",(0,s.jsx)(t.h2,{id:"create-and-train-text-classifier",children:"Create and Train Text Classifier"}),"\n",(0,s.jsx)(t.p,{children:"Let's demonstrate how to create and train a text classifier model using our API."}),"\n",(0,s.jsx)(t.admonition,{type:"info",children:(0,s.jsxs)(t.p,{children:["Before using the ",(0,s.jsx)(t.a,{href:"https://docs.clarifai.com/additional-resources/api-overview/python-sdk",children:"Python SDK"}),", ",(0,s.jsx)(t.a,{href:"https://docs.clarifai.com/additional-resources/api-overview/nodejs-sdk",children:"Node.js SDK"}),", or any of our ",(0,s.jsx)(t.a,{href:"https://docs.clarifai.com/additional-resources/api-overview/grpc-clients",children:"gRPC clients"}),", ensure they are properly installed on your machine. Refer to their respective installation guides for instructions on how to install and initialize them."]})}),"\n","\n","\n","\n",(0,s.jsx)(t.h3,{id:"step-1-app-creation",children:"Step 1: App Creation"}),"\n",(0,s.jsxs)(t.p,{children:["Let's start by creating an ",(0,s.jsx)(t.a,{href:"https://docs.clarifai.com/create-manage/applications/create",children:"app"}),"."]}),"\n",(0,s.jsx)(r.A,{groupId:"code",children:(0,s.jsx)(l.A,{value:"python",label:"Python SDK",children:(0,s.jsx)(o.A,{className:"language-python",children:d})})}),"\n",(0,s.jsx)(t.h3,{id:"step-2-dataset-upload",children:"Step 2: Dataset Upload"}),"\n",(0,s.jsxs)(t.p,{children:["Next, let\u2019s upload the ",(0,s.jsx)(t.a,{href:"https://docs.clarifai.com/create-manage/datasets/upload",children:"dataset"})," that will be used to train the model to the app."]}),"\n",(0,s.jsxs)(t.p,{children:["You can find the dataset we used ",(0,s.jsx)(t.a,{href:"https://github.com/Clarifai/examples/tree/main/datasets/upload/data",children:"here"}),"."]}),"\n",(0,s.jsx)(r.A,{groupId:"code",children:(0,s.jsx)(l.A,{value:"python",label:"Python SDK",children:(0,s.jsx)(o.A,{className:"language-python",children:c})})}),"\n",(0,s.jsx)(t.h3,{id:"step-3-model-creation",children:"Step 3: Model Creation"}),"\n",(0,s.jsx)(t.p,{children:"Let's list all the available trainable model types in the Clarifai platform."}),"\n",(0,s.jsx)(r.A,{groupId:"code",children:(0,s.jsx)(l.A,{value:"python",label:"Python SDK",children:(0,s.jsx)(o.A,{className:"language-python",children:u})})}),"\n",(0,s.jsxs)(a,{children:[(0,s.jsx)("summary",{children:"Output"}),(0,s.jsx)(o.A,{className:"language-text",children:j})]}),"\n",(0,s.jsxs)(t.p,{children:["Next, let's select the ",(0,s.jsx)(t.code,{children:"text-classifier"})," model type and use it to create a model."]}),"\n",(0,s.jsx)(r.A,{groupId:"code",children:(0,s.jsx)(l.A,{value:"python",label:"Python SDK",children:(0,s.jsx)(o.A,{className:"language-python",children:p})})}),"\n",(0,s.jsx)(t.h3,{id:"step-4-template-selection",children:"Step 4: Template Selection"}),"\n",(0,s.jsx)(t.p,{children:"Let's list all the available training templates in the Clarifai platform."}),"\n",(0,s.jsx)(r.A,{groupId:"code",children:(0,s.jsx)(l.A,{value:"python",label:"Python SDK",children:(0,s.jsx)(o.A,{className:"language-python",children:h})})}),"\n",(0,s.jsxs)(a,{children:[(0,s.jsx)("summary",{children:"Output"}),(0,s.jsx)(o.A,{className:"language-text",children:b})]}),"\n",(0,s.jsxs)(t.p,{children:["Next, let's choose the ",(0,s.jsx)(t.code,{children:"'HuggingFace_AdvancedConfig' "}),"template to use for training our model."]}),"\n",(0,s.jsx)(r.A,{groupId:"code",children:(0,s.jsx)(l.A,{value:"python",label:"Python SDK",children:(0,s.jsx)(o.A,{className:"language-python",children:y})})}),"\n",(0,s.jsx)(t.h3,{id:"step-5-set-up-model-parameters",children:"Step 5: Set Up Model Parameters"}),"\n",(0,s.jsx)(t.p,{children:"You can customize the model parameters as needed before starting the training process."}),"\n",(0,s.jsx)(r.A,{groupId:"code",children:(0,s.jsx)(l.A,{value:"python",label:"Python SDK",children:(0,s.jsx)(o.A,{className:"language-python",children:m})})}),"\n",(0,s.jsxs)(a,{children:[(0,s.jsx)("summary",{children:"Output"}),(0,s.jsx)(o.A,{className:"language-text",children:A})]}),"\n",(0,s.jsx)(t.h3,{id:"step-6-initiate-model-training",children:"Step 6: Initiate Model Training"}),"\n",(0,s.jsxs)(t.p,{children:["To initiate the model training process, call the ",(0,s.jsx)(t.code,{children:"model.train()"})," method. The Clarifai API also provides features for monitoring training status and saving training logs to a local file."]}),"\n",(0,s.jsx)(t.admonition,{type:"note",children:(0,s.jsxs)(t.p,{children:["If the training status code returns ",(0,s.jsx)(t.code,{children:"MODEL-TRAINED"}),", it means the model has successfully completed training and is ready for use."]})}),"\n",(0,s.jsx)(r.A,{groupId:"code",children:(0,s.jsx)(l.A,{value:"python",label:"Python SDK",children:(0,s.jsx)(o.A,{className:"language-python",children:f})})}),"\n",(0,s.jsx)(t.h3,{id:"step-7-model-prediction",children:"Step 7: Model Prediction"}),"\n",(0,s.jsx)(t.p,{children:"After the model is trained and ready to use, you can run some predictions with it."}),"\n",(0,s.jsx)(r.A,{groupId:"code",children:(0,s.jsx)(l.A,{value:"python",label:"Python SDK",children:(0,s.jsx)(o.A,{className:"language-python",children:g})})}),"\n",(0,s.jsxs)(a,{children:[(0,s.jsx)("summary",{children:"Output"}),(0,s.jsx)(o.A,{className:"language-text",children:w})]}),"\n",(0,s.jsx)(t.h3,{id:"step-8-model-evaluation",children:"Step 8: Model Evaluation"}),"\n",(0,s.jsx)(t.p,{children:"Let\u2019s evaluate the model using both the training and test datasets. We\u2019ll start by reviewing the evaluation metrics for the training dataset."}),"\n",(0,s.jsx)(r.A,{groupId:"code",children:(0,s.jsx)(l.A,{value:"python",label:"Python SDK",children:(0,s.jsx)(o.A,{className:"language-python",children:x})})}),"\n",(0,s.jsxs)(a,{children:[(0,s.jsx)("summary",{children:"Output"}),(0,s.jsx)(o.A,{className:"language-text",children:T})]}),"\n",(0,s.jsx)(t.p,{children:"Before evaluating the model on the test dataset, ensure it is uploaded using the data loader. Once uploaded, proceed with the evaluation."}),"\n",(0,s.jsx)(r.A,{groupId:"code",children:(0,s.jsx)(l.A,{value:"python",label:"Python SDK",children:(0,s.jsx)(o.A,{className:"language-python",children:_})})}),"\n",(0,s.jsxs)(a,{children:[(0,s.jsx)("summary",{children:"Output"}),(0,s.jsx)(o.A,{className:"language-text",children:C})]}),"\n",(0,s.jsxs)(t.p,{children:["Finally, to gain deeper insights into the model\u2019s performance, use the ",(0,s.jsx)(t.code,{children:"EvalResultCompare"})," method to compare results across multiple datasets."]}),"\n",(0,s.jsx)(r.A,{groupId:"code",children:(0,s.jsx)(l.A,{value:"python",label:"Python SDK",children:(0,s.jsx)(o.A,{className:"language-python",children:v})})}),"\n",(0,s.jsxs)(a,{children:[(0,s.jsx)("summary",{children:"Output"}),(0,s.jsx)(o.A,{className:"language-text",children:S})]})]})}function k(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(E,{...e})}):E(e)}}}]);
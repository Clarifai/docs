"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[2746],{85162:(e,n,t)=>{t.d(n,{Z:()=>i});var a=t(67294),o=t(86010);const s={tabItem:"tabItem_Ymn6"};function i(e){let{children:n,hidden:t,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,o.Z)(s.tabItem,i),hidden:t},n)}},74866:(e,n,t)=>{t.d(n,{Z:()=>T});var a=t(87462),o=t(67294),s=t(86010),i=t(12466),r=t(16550),l=t(91980),p=t(67392),d=t(50012);function u(e){return function(e){return o.Children.map(e,(e=>{if(!e||(0,o.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:n,label:t,attributes:a,default:o}}=e;return{value:n,label:t,attributes:a,default:o}}))}function c(e){const{values:n,children:t}=e;return(0,o.useMemo)((()=>{const e=n??u(t);return function(e){const n=(0,p.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function _(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function m(e){let{queryString:n=!1,groupId:t}=e;const a=(0,r.k6)(),s=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,l._X)(s),(0,o.useCallback)((e=>{if(!s)return;const n=new URLSearchParams(a.location.search);n.set(s,e),a.replace({...a.location,search:n.toString()})}),[s,a])]}function h(e){const{defaultValue:n,queryString:t=!1,groupId:a}=e,s=c(e),[i,r]=(0,o.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!_({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const a=t.find((e=>e.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:s}))),[l,p]=m({queryString:t,groupId:a}),[u,h]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[a,s]=(0,d.Nk)(t);return[a,(0,o.useCallback)((e=>{t&&s.set(e)}),[t,s])]}({groupId:a}),E=(()=>{const e=l??u;return _({value:e,tabValues:s})?e:null})();(0,o.useLayoutEffect)((()=>{E&&r(E)}),[E]);return{selectedValue:i,selectValue:(0,o.useCallback)((e=>{if(!_({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);r(e),p(e),h(e)}),[p,h,s]),tabValues:s}}var E=t(72389);const I={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function g(e){let{className:n,block:t,selectedValue:r,selectValue:l,tabValues:p}=e;const d=[],{blockElementScrollPositionUntilNextRender:u}=(0,i.o5)(),c=e=>{const n=e.currentTarget,t=d.indexOf(n),a=p[t].value;a!==r&&(u(n),l(a))},_=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const t=d.indexOf(e.currentTarget)+1;n=d[t]??d[0];break}case"ArrowLeft":{const t=d.indexOf(e.currentTarget)-1;n=d[t]??d[d.length-1];break}}n?.focus()};return o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":t},n)},p.map((e=>{let{value:n,label:t,attributes:i}=e;return o.createElement("li",(0,a.Z)({role:"tab",tabIndex:r===n?0:-1,"aria-selected":r===n,key:n,ref:e=>d.push(e),onKeyDown:_,onClick:c},i,{className:(0,s.Z)("tabs__item",I.tabItem,i?.className,{"tabs__item--active":r===n})}),t??n)})))}function f(e){let{lazy:n,children:t,selectedValue:a}=e;const s=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=s.find((e=>e.props.value===a));return e?(0,o.cloneElement)(e,{className:"margin-top--md"}):null}return o.createElement("div",{className:"margin-top--md"},s.map(((e,n)=>(0,o.cloneElement)(e,{key:n,hidden:e.props.value!==a}))))}function D(e){const n=h(e);return o.createElement("div",{className:(0,s.Z)("tabs-container",I.tabList)},o.createElement(g,(0,a.Z)({},e,n)),o.createElement(f,(0,a.Z)({},e,n)))}function T(e){const n=(0,E.Z)();return o.createElement(D,(0,a.Z)({key:String(n)},e))}},50708:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>Z,contentTitle:()=>$,default:()=>G,frontMatter:()=>B,metadata:()=>V,toc:()=>j});var a=t(87462),o=(t(67294),t(3905)),s=t(74866),i=t(85162),r=t(90814);const l="##########################################################################################\n# In this section, we set the user authentication, app ID, model ID, and model type ID.\n# Change these strings to run your own example.\n#########################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to create your own model\nMODEL_ID = 'zero-shot-text-model'\nMODEL_TYPE_ID = 'zero-shot-text-classifier'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\npost_models_response = stub.PostModels(\n    service_pb2.PostModelsRequest(\n        user_app_id=userDataObject,\n        models=[\n            resources_pb2.Model(\n                id=MODEL_ID,\n                model_type_id=MODEL_TYPE_ID,\n                notes='zero shot text classifier'         \n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif post_models_response.status.code != status_code_pb2.SUCCESS:\n    print(post_models_response.status)\n    raise Exception(\"Post models failed, status: \" + post_models_response.status.description)\n",p="\x3c!--index.html file--\x3e\n\n<script>\n    ///////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, model ID, and model type ID.\n    // Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = 'YOUR_USER_ID_HERE';\n    // Your PAT (Personal Access Token) can be found in the portal under Authentification\n    const PAT = 'YOUR_PAT_HERE';\n    const APP_ID = 'YOUR_APP_ID_HERE';\n    // Change these to create your own model\n    const MODEL_ID = 'zero-shot-text-model';\n    const MODEL_TYPE_ID = 'zero-shot-text-classifier';\n    \n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        'user_app_id': {\n            'user_id': USER_ID,\n            'app_id': APP_ID\n        },\n        'model': {\n            'id': MODEL_ID,\n            'model_type_id': MODEL_TYPE_ID,\n            'notes': 'zero shot text classifier'       \n        }\n    });\n\n    const requestOptions = {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        },\n        body: raw\n    };\n\n    fetch('https://api.clarifai.com/v2/models', requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n\n<\/script>\n",d="//index.js file\n\n////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, model ID, and model type ID.\n// Change these strings to run your own example.\n///////////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = 'YOUR_USER_ID_HERE';\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\nconst PAT = 'YOUR_PAT_HERE';\nconst APP_ID = 'YOUR_APP_ID_HERE';\n// Change these to create your own model\nconst MODEL_ID = 'zero-shot-text-model';\nconst MODEL_TYPE_ID = 'zero-shot-text-classifier';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require('clarifai-nodejs-grpc');\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set('authorization', 'Key ' + PAT);\n\nstub.PostModels(\n    {\n        user_app_id: {\n            'user_id': USER_ID,\n            'app_id': APP_ID\n        },\n        models: [\n            {\n                id: MODEL_ID,\n                model_type_id: MODEL_TYPE_ID,\n                notes: 'zero shot text classifier'          \n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error('Post models failed, status: ' + response.status.description);\n        }\n    }\n);\n",u='package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    ////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, model ID, and model type ID.\n    // Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to create your own model    \n    static final String MODEL_ID = "zero-shot-text-model";\n    static final String MODEL_TYPE_ID = "zero-shot-text-classifier";\n    \n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\t\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        SingleModelResponse postModelsResponse = stub.postModels(\n            PostModelsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .addModels(\n                Model.newBuilder()\n                .setId(MODEL_ID)\n                .setModelTypeId(MODEL_TYPE_ID) \n                .setNotes("zero shot text classifier")                \n            ).build()\n        );\n\n        if (postModelsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post models failed, status: " + postModelsResponse.getStatus());\n        }\n\n    }\n\n}\n',c='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n/////////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, model ID, and model type ID.\n// Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change these to create your own model\n$MODEL_ID = "zero-shot-text-model";\n$MODEL_TYPE_ID = "zero-shot-text-classifier";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\Model;\nuse Clarifai\\Api\\PostModelsRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID,\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PostModels(\n        // The request object carries the request along with the request status and other metadata related to the request itself\n        new PostModelsRequest([\n            "user_app_id" => $userDataObject,\n            "models" => [\n                new Model([                    \n                    "id" => $MODEL_ID,\n                    "model_type_id" => $MODEL_TYPE_ID,\n                    "notes" => "zero shot text classifier" \n                ]),\n            ],\n        ]),\n        $metadata\n    )->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure\n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription() . " " . $response->getStatus()->getDetails());\n}\n\n?>\n',_='curl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/models" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "model": {\n      "id": "zero-shot-text-model",\n      "model_type_id": "zero-shot-text-classifier",\n      "notes": "zero shot text classifier"\n    }\n  }\'',m='########################################################################################\n# In this section, we set the user authentication, app ID, model ID, and concept IDs.\n# Change these strings to run your own example.\n########################################################################################\n\nUSER_ID = "YOUR_USER_ID_HERE"\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = "YOUR_PAT_HERE"\nAPP_ID = "YOUR_APP_ID_HERE"\n# Change these to import your own model\nMODEL_ID = "zero-shot-text-model"\nCONCEPT_ID_1 = "happy"\nCONCEPT_ID_2 = "sad"\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\nfrom google.protobuf.struct_pb2 import Struct\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nparams = Struct()\nparams.update(\n    {\n        "toolkit":"HuggingFace",\n        "pipeline_name":"zero-shot-classification",\n        "model_name":"facebook/bart-large-mnli",\n        "tokenizer_config":{},\n        "use_gpu": True\n    }\n    )\n\nmetadata = (("authorization", "Key " + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\npost_model_versions = stub.PostModelVersions(\n    service_pb2.PostModelVersionsRequest(\n        user_app_id=userDataObject,\n        model_id=MODEL_ID,\n        model_versions=[\n            resources_pb2.ModelVersion(\n                import_info=resources_pb2.ImportInfo(\n                    params=params,\n                ),\n                output_info=resources_pb2.OutputInfo(\n                    data=resources_pb2.Data(\n                        concepts=[\n                            resources_pb2.Concept(id=CONCEPT_ID_1),\n                            resources_pb2.Concept(id=CONCEPT_ID_2)\n                            ]\n                    ),\n                ),\n            )\n        ],\n    ),\n    metadata=metadata,\n)\n\nif post_model_versions.status.code != status_code_pb2.SUCCESS:\n    print(post_model_versions.status)\n    raise Exception("Post models versions failed, status: " + post_model_versions.status.description)',h='\x3c!--index.html file--\x3e\n\n<script>\n    //////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, model ID, and concept IDs.\n    // Change these strings to run your own example.\n    /////////////////////////////////////////////////////////////////////////////////////////\n  \n    const USER_ID = "YOUR_USER_ID_HERE";\n    // Your PAT (Personal Access Token) can be found in the portal under Authentification\n    const PAT = "YOUR_PAT_HERE";\n    const APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to import your own model\n    const MODEL_ID = "zero-shot-text-model";\n    const CONCEPT_ID_1 = "happy";\n    const CONCEPT_ID_2 = "sad";\n  \n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n  \n    const raw = JSON.stringify({\n        "user_app_id": {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        "model_versions": [{\n            "import_info": {\n                "params": {\n                  "toolkit":"HuggingFace",\n                  "pipeline_name":"zero-shot-classification",\n                  "model_name":"facebook/bart-large-mnli",\n                  "tokenizer_config":{},\n                  "use_gpu": true\n                }\n            },\n            "output_info": {\n                "data": {\n                    "concepts": [\n                        {\n                            "id": CONCEPT_ID_1\n                        },\n                        {\n                            "id": CONCEPT_ID_2\n                        }\n                    ]\n                }\n            }\n        }]\n  \n    });\n  \n    const requestOptions = {\n        method: "POST",\n        headers: {\n            "Content-Type": "application/json",\n            "Authorization": "Key " + PAT\n        },\n        body: raw\n    };\n  \n    fetch(`https://api.clarifai.com/v2/models/${MODEL_ID}/versions`, requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log("error", error));\n  \n  <\/script>',E='package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.status.StatusCode;\nimport com.google.protobuf.Struct;\nimport com.google.protobuf.Value;\n\npublic class ClarifaiExample {\n\n    //////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, model ID, and concept IDs.\n    // Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    // Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to import your own model\n    static final String MODEL_ID = "zero-shot-text-model";\n    static final String CONCEPT_ID_1 = "happy";\n    static final String CONCEPT_ID_2 = "sad";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\t\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n                .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        Struct.Builder params = Struct.newBuilder()\n                .putFields("toolkit", Value.newBuilder().setStringValue("HuggingFace").build())\n                .putFields("pipeline_name", Value.newBuilder().setStringValue("zero-shot-classification").build())\n                .putFields("model_name", Value.newBuilder().setStringValue("facebook/bart-large-mnli").build())\n                .putFields("tokenizer_config", Value.newBuilder().setStructValue(Struct.newBuilder()).build())\n                .putFields("use_gpu", Value.newBuilder().setBoolValue(true).build());\n\n        SingleModelResponse postModelVersionsResponse = stub.postModelVersions(\n                PostModelVersionsRequest.newBuilder()\n                        .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n                        .setModelId(MODEL_ID)\n                        .addModelVersions(ModelVersion.newBuilder()\n                                .setImportInfo(ImportInfo.newBuilder()\n                                        .setParams(params)\n                                )\n                                .setOutputInfo(OutputInfo.newBuilder()\n                                        .setData(Data.newBuilder()\n                                                .addConcepts(Concept.newBuilder()\n                                                        .setId(CONCEPT_ID_1)\n                                                )\n                                                .addConcepts(Concept.newBuilder()\n                                                        .setId(CONCEPT_ID_2)\n                                                )\n                                        )\n                                )\n                        )\n                        .build()\n        );\n\n        if (postModelVersionsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post model outputs failed, status: " + postModelVersionsResponse.getStatus());\n        }\n\n    }\n}',I='curl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/models/zero-shot-text-model/versions" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n        "model_versions": [{\n            "import_info": {\n                "params": {\n                  "toolkit":"HuggingFace",\n                  "pipeline_name":"zero-shot-classification",\n                  "model_name":"facebook/bart-large-mnli",\n                  "tokenizer_config":{},\n                  "use_gpu": true\n                }\n            },\n            "output_info": {\n                "data": {\n                    "concepts": [\n                        {\n                            "id": "happy"\n                        },\n                        {\n                            "id": "sad"\n                        }\n                    ]\n                }\n            }\n        }] \n  }\'',g="##########################################################################################\n# In this section, we set the user authentication, app ID, model ID, and model type ID.\n# Change these strings to run your own example.\n#########################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to create your own model\nMODEL_ID = 'text-generation-model'\nMODEL_TYPE_ID = 'text-to-text'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\npost_models_response = stub.PostModels(\n    service_pb2.PostModelsRequest(\n        user_app_id=userDataObject,\n        models=[\n            resources_pb2.Model(\n                id=MODEL_ID,\n                model_type_id=MODEL_TYPE_ID,\n                notes='text generation notes'         \n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif post_models_response.status.code != status_code_pb2.SUCCESS:\n    print(post_models_response.status)\n    raise Exception(\"Post models failed, status: \" + post_models_response.status.description)\n",f="\x3c!--index.html file--\x3e\n\n<script>\n    ///////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, model ID, and model type ID.\n    // Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = 'YOUR_USER_ID_HERE';\n    // Your PAT (Personal Access Token) can be found in the portal under Authentification\n    const PAT = 'YOUR_PAT_HERE';\n    const APP_ID = 'YOUR_APP_ID_HERE';\n    // Change these to create your own model\n    const MODEL_ID = 'text-generation-model';\n    const MODEL_TYPE_ID = 'text-to-text';\n    \n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        'user_app_id': {\n            'user_id': USER_ID,\n            'app_id': APP_ID\n        },\n        'model': {\n            'id': MODEL_ID,\n            'model_type_id': MODEL_TYPE_ID,\n            'notes': 'text generation notes'       \n        }\n    });\n\n    const requestOptions = {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        },\n        body: raw\n    };\n\n    fetch('https://api.clarifai.com/v2/models', requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n\n<\/script>\n",D="//index.js file\n\n////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, model ID, and model type ID.\n// Change these strings to run your own example.\n///////////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = 'YOUR_USER_ID_HERE';\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\nconst PAT = 'YOUR_PAT_HERE';\nconst APP_ID = 'YOUR_APP_ID_HERE';\n// Change these to create your own model\nconst MODEL_ID = 'text-generation-model';\nconst MODEL_TYPE_ID = 'text-to-text';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require('clarifai-nodejs-grpc');\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set('authorization', 'Key ' + PAT);\n\nstub.PostModels(\n    {\n        user_app_id: {\n            'user_id': USER_ID,\n            'app_id': APP_ID\n        },\n        models: [\n            {\n                id: MODEL_ID,\n                model_type_id: MODEL_TYPE_ID,\n                notes: 'text generation notes'          \n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error('Post models failed, status: ' + response.status.description);\n        }\n    }\n);\n",T='package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    ////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, model ID, and model type ID.\n    // Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to create your own model    \n    static final String MODEL_ID = "text-generation-model";\n    static final String MODEL_TYPE_ID = "text-to-text";\n    \n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\t\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        SingleModelResponse postModelsResponse = stub.postModels(\n            PostModelsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .addModels(\n                Model.newBuilder()\n                .setId(MODEL_ID)\n                .setModelTypeId(MODEL_TYPE_ID) \n                .setNotes("text generation notes")                \n            ).build()\n        );\n\n        if (postModelsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post models failed, status: " + postModelsResponse.getStatus());\n        }\n\n    }\n\n}\n',P='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n/////////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, model ID, and model type ID.\n// Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change these to create your own model\n$MODEL_ID = "text-generation-model";\n$MODEL_TYPE_ID = "text-to-text";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\Model;\nuse Clarifai\\Api\\PostModelsRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID,\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PostModels(\n        // The request object carries the request along with the request status and other metadata related to the request itself\n        new PostModelsRequest([\n            "user_app_id" => $userDataObject,\n            "models" => [\n                new Model([                    \n                    "id" => $MODEL_ID,\n                    "model_type_id" => $MODEL_TYPE_ID,\n                    "notes" => "text generation notes" \n                ]),\n            ],\n        ]),\n        $metadata\n    )->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure\n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription() . " " . $response->getStatus()->getDetails());\n}\n\n?>\n',b='curl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/models" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "model": {\n      "id": "text-generation-model",\n      "model_type_id": "text-to-text",\n      "notes": "text generation notes"\n    }\n  }\'',C='########################################################################################\n# In this section, we set the user authentication, app ID, and model ID.\n# Change these strings to run your own example.\n########################################################################################\n\nUSER_ID = "YOUR_USER_ID_HERE"\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = "YOUR_PAT_HERE"\nAPP_ID = "YOUR_APP_ID_HERE"\n# Change these to import your own model\nMODEL_ID = "text-generation-model"\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\nfrom google.protobuf.struct_pb2 import Struct\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nparams = Struct()\nparams.update(\n    {\n        "toolkit":"HuggingFace",\n        "pipeline_name":"text-generation",\n        "model_name":"hf-internal-testing/tiny-xlm-roberta"\n    }\n    )\n\nmetadata = (("authorization", "Key " + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\npost_model_versions = stub.PostModelVersions(\n    service_pb2.PostModelVersionsRequest(\n        user_app_id=userDataObject,\n        model_id=MODEL_ID,\n        model_versions=[\n            resources_pb2.ModelVersion(\n                import_info=resources_pb2.ImportInfo(\n                    params=params,\n                )  \n            )\n        ],\n    ),\n    metadata=metadata,\n)\n\nif post_model_versions.status.code != status_code_pb2.SUCCESS:\n    print(post_model_versions.status)\n    raise Exception("Post models versions failed, status: " + post_model_versions.status.description)',A='\x3c!--index.html file--\x3e\n\n<script>\n    //////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and model ID.\n    // Change these strings to run your own example.\n    /////////////////////////////////////////////////////////////////////////////////////////\n  \n    const USER_ID = "YOUR_USER_ID_HERE";\n    // Your PAT (Personal Access Token) can be found in the portal under Authentification\n    const PAT = "YOUR_PAT_HERE";\n    const APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to import your own model\n    const MODEL_ID = "text-generation-model";   \n  \n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n  \n    const raw = JSON.stringify({\n        "user_app_id": {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        "model_versions": [{\n            "import_info": {\n                "params": {\n                  "toolkit":"HuggingFace",\n                  "pipeline_name":"text-generation",\n                  "model_name":"hf-internal-testing/tiny-xlm-roberta"\n                }\n            }\n        }]\n  \n    });\n  \n    const requestOptions = {\n        method: "POST",\n        headers: {\n            "Content-Type": "application/json",\n            "Authorization": "Key " + PAT\n        },\n        body: raw\n    };\n  \n    fetch(`https://api.clarifai.com/v2/models/${MODEL_ID}/versions`, requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log("error", error));\n  \n  <\/script>',O='package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.status.StatusCode;\nimport com.google.protobuf.Struct;\nimport com.google.protobuf.Value;\n\npublic class ClarifaiExample {\n\n    //////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and model ID.\n    // Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    // Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to import your own model\n    static final String MODEL_ID = "text-generation-model"; \n  \n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\t\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n                .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        Struct.Builder params = Struct.newBuilder()\n                .putFields("toolkit", Value.newBuilder().setStringValue("HuggingFace").build())\n                .putFields("pipeline_name", Value.newBuilder().setStringValue("text-generation").build())\n                .putFields("model_name", Value.newBuilder().setStringValue("hf-internal-testing/tiny-xlm-roberta").build());\n\n        SingleModelResponse postModelVersionsResponse = stub.postModelVersions(\n                PostModelVersionsRequest.newBuilder()\n                        .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n                        .setModelId(MODEL_ID)\n                        .addModelVersions(ModelVersion.newBuilder()\n                                .setImportInfo(ImportInfo.newBuilder()\n                                        .setParams(params)\n                                )\n                        )\n                        .build()\n        );\n\n        if (postModelVersionsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post model outputs failed, status: " + postModelVersionsResponse.getStatus());\n        }\n\n    }\n}\n',S='curl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/models/text-generation-model/versions" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n        "model_versions": [{\n            "import_info": {\n                "params": {\n                  "toolkit":"HuggingFace",\n                  "pipeline_name":"text-generation",\n                  "model_name":"hf-internal-testing/tiny-xlm-roberta"\n                }\n            }\n        }] \n  }\'',R="##########################################################################################\n# In this section, we set the user authentication, app ID, model ID, and model type ID.\n# Change these strings to run your own example.\n#########################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to create your own model\nMODEL_ID = 'embedding-model'\nMODEL_TYPE_ID = 'text-embedder'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\npost_models_response = stub.PostModels(\n    service_pb2.PostModelsRequest(\n        user_app_id=userDataObject,\n        models=[\n            resources_pb2.Model(\n                id=MODEL_ID,\n                model_type_id=MODEL_TYPE_ID,\n                notes='text embedding notes'         \n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif post_models_response.status.code != status_code_pb2.SUCCESS:\n    print(post_models_response.status)\n    raise Exception(\"Post models failed, status: \" + post_models_response.status.description)\n",U="\x3c!--index.html file--\x3e\n\n<script>\n    ///////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, model ID, and model type ID.\n    // Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = 'YOUR_USER_ID_HERE';\n    // Your PAT (Personal Access Token) can be found in the portal under Authentification\n    const PAT = 'YOUR_PAT_HERE';\n    const APP_ID = 'YOUR_APP_ID_HERE';\n    // Change these to create your own model\n    const MODEL_ID = 'embedding-model';\n    const MODEL_TYPE_ID = 'text-embedder';\n    \n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        'user_app_id': {\n            'user_id': USER_ID,\n            'app_id': APP_ID\n        },\n        'model': {\n            'id': MODEL_ID,\n            'model_type_id': MODEL_TYPE_ID,\n            'notes': 'text embedding notes'       \n        }\n    });\n\n    const requestOptions = {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        },\n        body: raw\n    };\n\n    fetch('https://api.clarifai.com/v2/models', requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n\n<\/script>\n",y="//index.js file\n\n////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, model ID, and model type ID.\n// Change these strings to run your own example.\n///////////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = 'YOUR_USER_ID_HERE';\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\nconst PAT = 'YOUR_PAT_HERE';\nconst APP_ID = 'YOUR_APP_ID_HERE';\n// Change these to create your own model\nconst MODEL_ID = 'embedding-model';\nconst MODEL_TYPE_ID = 'text-embedder';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require('clarifai-nodejs-grpc');\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set('authorization', 'Key ' + PAT);\n\nstub.PostModels(\n    {\n        user_app_id: {\n            'user_id': USER_ID,\n            'app_id': APP_ID\n        },\n        models: [\n            {\n                id: MODEL_ID,\n                model_type_id: MODEL_TYPE_ID,\n                notes: 'text embedding notes'          \n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error('Post models failed, status: ' + response.status.description);\n        }\n    }\n);\n",w='package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    ////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, model ID, and model type ID.\n    // Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to create your own model    \n    static final String MODEL_ID = "embedding-model";\n    static final String MODEL_TYPE_ID = "text-embedder";\n    \n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\t\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        SingleModelResponse postModelsResponse = stub.postModels(\n            PostModelsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .addModels(\n                Model.newBuilder()\n                .setId(MODEL_ID)\n                .setModelTypeId(MODEL_TYPE_ID) \n                .setNotes("text embedding notes")                \n            ).build()\n        );\n\n        if (postModelsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post models failed, status: " + postModelsResponse.getStatus());\n        }\n\n    }\n\n}\n',N='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n/////////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, model ID, and model type ID.\n// Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change these to create your own model\n$MODEL_ID = "embedding-model";\n$MODEL_TYPE_ID = "text-embedder";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\Model;\nuse Clarifai\\Api\\PostModelsRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID,\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PostModels(\n        // The request object carries the request along with the request status and other metadata related to the request itself\n        new PostModelsRequest([\n            "user_app_id" => $userDataObject,\n            "models" => [\n                new Model([                    \n                    "id" => $MODEL_ID,\n                    "model_type_id" => $MODEL_TYPE_ID,\n                    "notes" => "text embedding notes" \n                ]),\n            ],\n        ]),\n        $metadata\n    )->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure\n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription() . " " . $response->getStatus()->getDetails());\n}\n\n?>\n',x='curl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/models" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "model": {\n      "id": "embedding-model",\n      "model_type_id": "text-embedder",\n      "notes": "text embedding notes"\n    }\n  }\'',M='#############################################################################################\n# In this section, we set the user authentication, app ID, model ID, and model ZIP URL.\n# Change these strings to run your own example.\n#############################################################################################\n\nUSER_ID = "YOUR_USER_ID_HERE"\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = "YOUR_PAT_HERE"\nAPP_ID = "YOUR_APP_ID_HERE"\n# Change these to import your own model\nMODEL_ID = "embedding-model"\nMODEL_ZIP_URL = "s3://clarifai-testing-persistent-data/test_triton_upload/jina-embeddings-v2-base-en.zip"\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\nfrom google.protobuf.struct_pb2 import Struct\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\ninput__fields_params = Struct()\ninput__fields_params.update({"text": "text"})\n\noutput__fields_params = Struct()\noutput__fields_params.update({"embeddings": "embeddings"})\n\npretrained_config = resources_pb2.PretrainedModelConfig(\n    input_fields_map=input__fields_params,\n    output_fields_map=output__fields_params,\n    model_zip_url=MODEL_ZIP_URL,\n)\n\nmetadata = (("authorization", "Key " + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\npost_model_versions = stub.PostModelVersions(\n    service_pb2.PostModelVersionsRequest(\n        user_app_id=userDataObject,\n        model_id=MODEL_ID,\n        model_versions=[\n            resources_pb2.ModelVersion(pretrained_model_config=pretrained_config)\n        ],\n    ),\n    metadata=metadata,\n)\n\nif post_model_versions.status.code != status_code_pb2.SUCCESS:\n    print(post_model_versions.status)\n    raise Exception("Post models versions failed, status: " + post_model_versions.status.description)\n',k='\x3c!--index.html file--\x3e\n\n<script>\n    //////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, model ID, and model ZIP URL.\n    // Change these strings to run your own example.\n    /////////////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = "YOUR_USER_ID_HERE";\n    // Your PAT (Personal Access Token) can be found in the portal under Authentification\n    const PAT = "YOUR_PAT_HERE";\n    const APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to import your own model\n    MODEL_ID = "embedding-model";\n    MODEL_ZIP_URL = "s3://clarifai-testing-persistent-data/test_triton_upload/jina-embeddings-v2-base-en.zip";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        "user_app_id": {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        "model_versions": [{\n            "pretrained_model_config": {\n                "model_zip_url": "s3://clarifai-testing-persistent-data/test_triton_upload/jina-embeddings-v2-base-en.zip",\n                "input_fields_map": {\n                    "text": "text"\n                },\n                "output_fields_map": {\n                    "embeddings": "embeddings"\n                }\n            }\n        }]\n    });\n\n    const requestOptions = {\n        method: "POST",\n        headers: {\n            "Content-Type": "application/json",\n            "Authorization": "Key " + PAT\n        },\n        body: raw\n    };\n\n    fetch(`https://api.clarifai.com/v2/models/${MODEL_ID}/versions`, requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log("error", error));\n\n<\/script>\n',H='//index.js file\n\n/////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, model ID, and model ZIP URL.\n// Change these strings to run your own example.\n///////////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\nconst PAT = "YOUR_PAT_HERE";\nconst APP_ID = "YOUR_APP_ID_HERE";\n// Change these to import your own model\nconst MODEL_ID = "embedding-model";\nconst MODEL_ZIP_URL = "s3://clarifai-testing-persistent-data/test_triton_upload/jina-embeddings-v2-base-en.zip";\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PostModelVersions(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        model_id: MODEL_ID,\n        model_versions: [{\n            pretrained_model_config: {\n                model_zip_url: MODEL_ZIP_URL,\n                input_fields_map: {\n                    text: "text"\n                },\n                output_fields_map: {\n                    embeddings: "embeddings"\n                }\n            }\n        }]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            console.error(\'Post models failed, status:\', response.status);\n            throw new Error("Post models failed, status: " + response.status.description);\n        }\n    }\n);\n',v='package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.status.StatusCode;\nimport com.google.protobuf.Struct;\nimport com.google.protobuf.Value;\n\npublic class ClarifaiExample {\n\n    ////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, model ID, and model ZIP URL.\n    // Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    // Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to import your own model    \n    static final String MODEL_ID = "embedding-model";\n    static final String MODEL_ZIP_URL = "s3://clarifai-testing-persistent-data/test_triton_upload/jina-embeddings-v2-base-en.zip";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\t\n    \n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n                .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        Struct.Builder input__fields_params = Struct.newBuilder()\n                .putFields("text", Value.newBuilder().setStringValue("text").build());\n\n        Struct.Builder output__fields_params = Struct.newBuilder()\n                .putFields("embeddings", Value.newBuilder().setStringValue("embeddings").build());\n\n        SingleModelResponse postModelVersionsResponse = stub.postModelVersions(\n                PostModelVersionsRequest.newBuilder()\n                        .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n                        .setModelId(MODEL_ID)\n                        .addModelVersions(ModelVersion.newBuilder()\n                                .setPretrainedModelConfig(PretrainedModelConfig.newBuilder()\n                                        .setInputFieldsMap(input__fields_params)\n                                        .setOutputFieldsMap(output__fields_params)\n                                        .setModelZipUrl(MODEL_ZIP_URL)\n                                )\n                        )\n                        .build()\n        );\n\n        if (postModelVersionsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post model outputs failed, status: " + postModelVersionsResponse.getStatus());\n        }\n\n    }\n}\n',L='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n/////////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, model ID, and model ZIP URL.\n// Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change these to import your own model\n$MODEL_ID = "embedding-model";\n$MODEL_ZIP_URL = "s3://clarifai-testing-persistent-data/test_triton_upload/jina-embeddings-v2-base-en.zip";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\PostModelVersionsRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\nuse Clarifai\\Api\\ModelVersion;\nuse Clarifai\\Api\\PretrainedModelConfig;\nuse Google\\Protobuf\\Struct;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID,\n]);\n\n// create Struct instances\n$input__fields_params = new Struct();\n$input__fields_params->text = "text";\n\n$output__fields_params = new Struct();\n$output__fields_params->embeddings = "embeddings";\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PostModelVersions(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new PostModelVersionsRequest([\n        "user_app_id" => $userDataObject,\n        "model_id" => $MODEL_ID,\n        "model_versions" => [\n            new ModelVersion([\n                "pretrained_model_config" => new PretrainedModelConfig([\n                    "input_fields_map" => $input__fields_params,\n                    "output_fields_map" => $output__fields_params,\n                    "model_zip_url" => $MODEL_ZIP_URL\n                ])\n            ]),\n        ],\n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure\n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription() . " " . $response->getStatus()->getDetails());\n}\n\n?>\n',Y='curl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/models/embedding-model/versions" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n       "model_versions": [{\n            "pretrained_model_config": {\n                "model_zip_url": "s3://clarifai-testing-persistent-data/test_triton_upload/jina-embeddings-v2-base-en.zip",\n                "input_fields_map": {\n                    "text": "text"\n                },\n                "output_fields_map": {\n                    "embeddings": "embeddings"\n                }\n            }            \n        }]\n     }\'',B={description:"Learn how to import models into the Clarifai platform",sidebar_position:7},$="Import Models",V={unversionedId:"api-guide/model/import-model",id:"api-guide/model/import-model",title:"Import Models",description:"Learn how to import models into the Clarifai platform",source:"@site/docs/api-guide/model/import-model.md",sourceDirName:"api-guide/model",slug:"/api-guide/model/import-model",permalink:"/api-guide/model/import-model",draft:!1,editUrl:"https://github.com/Clarifai/docs/blob/main/docs/api-guide/model/import-model.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{description:"Learn how to import models into the Clarifai platform",sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"Deep Fine-Tuning",permalink:"/api-guide/model/deep-training"},next:{title:"Evaluating Models",permalink:"/api-guide/evaluate/"}},Z={},j=[{value:"Hugging Face Importation",id:"hugging-face-importation",level:2},{value:"Zero-Shot-Text-Classifier",id:"zero-shot-text-classifier",level:3},{value:"Text Generation",id:"text-generation",level:3},{value:"Local Model Upload",id:"local-model-upload",level:2},{value:"Text-Embedder",id:"text-embedder",level:3}],q={toc:j},z="wrapper";function G(e){let{components:n,...t}=e;return(0,o.kt)(z,(0,a.Z)({},q,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"import-models"},"Import Models"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Learn how to import models into the Clarifai platform")),(0,o.kt)("hr",null),(0,o.kt)("p",null,"The Clarifai platform allows you to import and integrate externally developed, pre-trained models. This feature allows you to incorporate a diverse array of advanced models into the Clarifai platform and open up new possibilities for harnessing artificial intelligence (AI) in a wide range of applications."),(0,o.kt)("p",null,"Once imported, the model will be deployed and ready to be evaluated, fine-tuned and customized, combined with other models and agent operators in a workflow, or used to serve inference requests as it is."),(0,o.kt)("p",null,"Two main ways are:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("a",{parentName:"strong",href:"https://docs.clarifai.com/portal-guide/model/hf-model-importer"},"Hugging Face Importation"),":")," Find and import pre-trained models from the Hugging Face platform."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("a",{parentName:"strong",href:"https://docs.clarifai.com/portal-guide/model/local-model-upload"},"Local Model Upload"),":")," Upload your own trained models if they meet Clarifai's format requirements.")),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"The import model functionality is exclusively available to Enterprise users.")),(0,o.kt)("h2",{id:"hugging-face-importation"},"Hugging Face Importation"),(0,o.kt)("p",null,"Let\u2019s illustrate how you could import a model from ",(0,o.kt)("a",{parentName:"p",href:"https://huggingface.co/models"},"Hugging Face")," and deploy it on your own Clarifai app. "),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("a",{parentName:"p",href:"https://docs.clarifai.com/portal-guide/model/hf-model-importer#step-1-find-a-model-on-hugging-face"},"Click here")," to learn how to find a model that meets Clarifai's requirements. ")),(0,o.kt)("h3",{id:"zero-shot-text-classifier"},"Zero-Shot-Text-Classifier"),(0,o.kt)("p",null,"To import a ",(0,o.kt)("inlineCode",{parentName:"p"},"zero-shot-text-classifier")," model type, you need to start by creating it. "),(0,o.kt)(s.Z,{mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-python",mdxType:"CodeBlock"},l)),(0,o.kt)(i.Z,{value:"js_rest",label:"JavaScript (REST)",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-javascript",mdxType:"CodeBlock"},p)),(0,o.kt)(i.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-javascript",mdxType:"CodeBlock"},d)),(0,o.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-java",mdxType:"CodeBlock"},u)),(0,o.kt)(i.Z,{value:"php",label:"PHP",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-php",mdxType:"CodeBlock"},c)),(0,o.kt)(i.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-bash",mdxType:"CodeBlock"},_))),(0,o.kt)("p",null,"Next, import the model by creating a new version for it. "),(0,o.kt)(s.Z,{mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-python",mdxType:"CodeBlock"},m)),(0,o.kt)(i.Z,{value:"js_rest",label:"JavaScript (REST)",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-javascript",mdxType:"CodeBlock"},h)),(0,o.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-java",mdxType:"CodeBlock"},E)),(0,o.kt)(i.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-bash",mdxType:"CodeBlock"},I))),(0,o.kt)("h3",{id:"text-generation"},"Text Generation"),(0,o.kt)("p",null,"To import a text generation (",(0,o.kt)("inlineCode",{parentName:"p"},"text-to-text"),") model type, you need to start by creating it. "),(0,o.kt)(s.Z,{mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-python",mdxType:"CodeBlock"},g)),(0,o.kt)(i.Z,{value:"js_rest",label:"JavaScript (REST)",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-javascript",mdxType:"CodeBlock"},f)),(0,o.kt)(i.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-javascript",mdxType:"CodeBlock"},D)),(0,o.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-java",mdxType:"CodeBlock"},T)),(0,o.kt)(i.Z,{value:"php",label:"PHP",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-php",mdxType:"CodeBlock"},P)),(0,o.kt)(i.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-bash",mdxType:"CodeBlock"},b))),(0,o.kt)("p",null,"Next, import the model by creating a new version for it. "),(0,o.kt)(s.Z,{mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-python",mdxType:"CodeBlock"},C)),(0,o.kt)(i.Z,{value:"js_rest",label:"JavaScript (REST)",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-javascript",mdxType:"CodeBlock"},A)),(0,o.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-java",mdxType:"CodeBlock"},O)),(0,o.kt)(i.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-bash",mdxType:"CodeBlock"},S))),(0,o.kt)("h2",{id:"local-model-upload"},"Local Model Upload"),(0,o.kt)("p",null,"Let\u2019s illustrate how you could import a custom-built model from your local development environment directly into the Clarifai platform. "),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("a",{parentName:"p",href:"https://github.com/Clarifai/clarifai-python/tree/master/clarifai/models/model_serving"},"Click here")," to learn how to build a model that meets Clarifai's requirements.")),(0,o.kt)("h3",{id:"text-embedder"},"Text-Embedder"),(0,o.kt)("p",null,"To import a locally-built ",(0,o.kt)("inlineCode",{parentName:"p"},"text-embedder")," model type, you need to start by creating it. "),(0,o.kt)(s.Z,{mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-python",mdxType:"CodeBlock"},R)),(0,o.kt)(i.Z,{value:"js_rest",label:"JavaScript (REST)",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-javascript",mdxType:"CodeBlock"},U)),(0,o.kt)(i.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-javascript",mdxType:"CodeBlock"},y)),(0,o.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-java",mdxType:"CodeBlock"},w)),(0,o.kt)(i.Z,{value:"php",label:"PHP",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-php",mdxType:"CodeBlock"},N)),(0,o.kt)(i.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-bash",mdxType:"CodeBlock"},x))),(0,o.kt)("p",null,"Next, import the model by creating a new version for it. "),(0,o.kt)(s.Z,{mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-python",mdxType:"CodeBlock"},M)),(0,o.kt)(i.Z,{value:"js_rest",label:"JavaScript (REST)",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-javascript",mdxType:"CodeBlock"},k)),(0,o.kt)(i.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-javascript",mdxType:"CodeBlock"},H)),(0,o.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-java",mdxType:"CodeBlock"},v)),(0,o.kt)(i.Z,{value:"php",label:"PHP",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-php",mdxType:"CodeBlock"},L)),(0,o.kt)(i.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,o.kt)(r.Z,{className:"language-bash",mdxType:"CodeBlock"},Y))))}G.isMDXComponent=!0}}]);
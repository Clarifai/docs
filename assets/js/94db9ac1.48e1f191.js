"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[8352],{34682:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>R,contentTitle:()=>I,default:()=>D,frontMatter:()=>j,metadata:()=>E,toc:()=>C});var l=n(74848),o=n(28453),s=n(11470),r=n(19365),i=n(21432);const a='from clarifai.client.user import User\nimport os\n\n# Set the PAT key\nos.environ["CLARIFAI_PAT"] = "YOUR_PAT_HERE"  \n\n# Initialize the client\nclient = User(\n    user_id="YOUR_USER_ID_HERE",\n    base_url="https://api.clarifai.com"\n)\n\n# Get and print the compute cluster\ncompute_cluster = client.compute_cluster(\n    compute_cluster_id="test-compute-cluster"\n)\nprint(compute_cluster)\n',c='from clarifai.client.user import User\nimport os\n\n# Set the PAT key\nos.environ["CLARIFAI_PAT"] = "YOUR_PAT_HERE"  \n\n# Initialize the client\nclient = User(\n    user_id="YOUR_USER_ID_HERE",\n    base_url="https://api.clarifai.com"\n)\n\n# Get and print all the compute clusters\nall_compute_clusters = list(\n    client.list_compute_clusters()\n)\nprint(all_compute_clusters)',d='from clarifai.client.compute_cluster import ComputeCluster\nimport os\n\n# Set the PAT key\nos.environ["CLARIFAI_PAT"] = "YOUR_PAT_HERE" \n\n# Initialize the ComputeCluster instance\ncompute_cluster = ComputeCluster(\n    user_id="YOUR_USER_ID_HERE",\n    compute_cluster_id="test-compute-cluster",\n    base_url="https://api.clarifai.com"\n)\n\n# Get and print the nodepool \nnodepool = compute_cluster.nodepool(\n    nodepool_id="test-nodepool"\n)\nprint(nodepool)',u='from clarifai.client.compute_cluster import ComputeCluster\nimport os\n\n# Set the PAT key\nos.environ["CLARIFAI_PAT"] = "YOUR_PAT_HERE" \n\n# Initialize the ComputeCluster instance\ncompute_cluster = ComputeCluster(\n    user_id="YOUR_USER_ID_HERE",\n    compute_cluster_id="test-compute-cluster",\n    base_url="https://api.clarifai.com"\n)\n\n# Get and print all the nodepools \nall_nodepools = list(\n    compute_cluster.list_nodepools()\n)\nprint(all_nodepools)\n',p='from clarifai.client.nodepool import Nodepool\nimport os\n\n# Set the PAT key\nos.environ["CLARIFAI_PAT"] = "YOUR_PAT_HERE" \n\n# Initialize the Nodepool instance\nnodepool = Nodepool(\n    user_id="YOUR_USER_ID_HERE",            \n    nodepool_id="test-nodepool",   \n    base_url="https://api.clarifai.com"            \n)\n\n## Get and print the deployment\ndeployment = nodepool.deployment(\n    deployment_id="test-deployment"\n)\nprint(deployment)',m='from clarifai.client.nodepool import Nodepool\nimport os\n\n# Set the PAT key\nos.environ["CLARIFAI_PAT"] = "YOUR_PAT_HERE" \n\n# Initialize the Nodepool instance\nnodepool = Nodepool(\n    user_id="YOUR_USER_ID_HERE",            \n    nodepool_id="test-nodepool",   \n    base_url="https://api.clarifai.com"            \n)\n\n# Get and print all the deployments \nall_deployments = list(\n    nodepool.list_deployments()\n)\nprint(all_deployments)',h='from clarifai.client.nodepool import Nodepool\nimport os\n\n# Set the PAT key\nos.environ["CLARIFAI_PAT"] = "YOUR_PAT_HERE" \n\n# Initialize the Nodepool instance\nnodepool = Nodepool(\n    user_id="YOUR_USER_ID_HERE",\n    nodepool_id="test-nodepool",\n    base_url="https://api.clarifai.com"\n)\n\n# Get all the deployments in the nodepool\nall_deployments = list(nodepool.list_deployments())\n\n# Extract deployment IDs for deletion\ndeployment_ids = [deployment.id for deployment in all_deployments]\n\n# Delete a specific deployment by providing its deployment ID\n# deployment_ids = ["test-deployment"]\n\n# Delete the deployments\nnodepool.delete_deployments(deployment_ids=deployment_ids)\n',_='from clarifai.client.compute_cluster import ComputeCluster\nimport os\n\n# Set the PAT key\nos.environ["CLARIFAI_PAT"] = "YOUR_PAT_HERE" \n\n# Initialize the ComputeCluster instance\ncompute_cluster = ComputeCluster(\n    user_id="YOUR_USER_ID_HERE",           \n    compute_cluster_id="test-compute-cluster",\n    base_url="https://api.clarifai.com"\n)\n\n# Get all nodepools within the compute cluster\nall_nodepools = list(compute_cluster.list_nodepools())\n\n# Extract nodepool IDs for deletion\nnodepool_ids = [nodepool.id for nodepool in all_nodepools]\n\n# Delete a specific nodepool by providing its ID\n# nodepool_ids = ["test-nodepool"]\n\n# Delete the nodepools\ncompute_cluster.delete_nodepools(nodepool_ids=nodepool_ids)\n',y='from clarifai.client.user import User\nimport os\n\n# Set the PAT key\nos.environ["CLARIFAI_PAT"] = "YOUR_PAT_HERE" \n\n# Initialize the User client\nclient = User(\n    user_id="YOUR_USER_ID_HERE",           \n    base_url="https://api.clarifai.com"\n)\n\n# Get all compute clusters associated with the user\nall_compute_clusters = list(client.list_compute_clusters())\n\n# Extract compute cluster IDs for deletion\ncompute_cluster_ids = [compute_cluster.id for compute_cluster in all_compute_clusters]\n\n# Delete a specific nodepool by providing its ID\n# compute_cluster_ids = ["test-compute-cluster"]\n\n# Delete the compute clusters\nclient.delete_compute_clusters(compute_cluster_ids=compute_cluster_ids)\n',f="$ clarifai computecluster list",x="$ clarifai nodepool list --compute_cluster_id <compute-cluster-id>",b="$ clarifai deployment list --nodepool_id <nodepool-id>",v="$ clarifai computecluster delete --compute_cluster_id <compute-cluster-id>",g="$ clarifai nodepool delete --compute_cluster_id <compute-cluster-id> --nodepool_id <nodepool-id>",A="$ clarifai deployment delete --nodepool_id <nodepool-id> --deployment_id <deployment-id>",j={description:"Manage your clusters, nodepools, and deployments",sidebar_position:4,pagination_next:null},I="Managing Your Compute",E={id:"sdk/compute-orchestration/manage-compute",title:"Managing Your Compute",description:"Manage your clusters, nodepools, and deployments",source:"@site/docs/sdk/compute-orchestration/manage-compute.md",sourceDirName:"sdk/compute-orchestration",slug:"/sdk/compute-orchestration/manage-compute",permalink:"/sdk/compute-orchestration/manage-compute",draft:!1,unlisted:!1,editUrl:"https://github.com/Clarifai/docs/blob/main/docs/sdk/compute-orchestration/manage-compute.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{description:"Manage your clusters, nodepools, and deployments",sidebar_position:4,pagination_next:null},sidebar:"tutorialSidebar",previous:{title:"Clusters and Nodepools",permalink:"/sdk/compute-orchestration/set-up-compute"}},R={},C=[{value:"Cluster Operations",id:"cluster-operations",level:2},{value:"Get a Cluster",id:"get-a-cluster",level:3},{value:"List All Clusters",id:"list-all-clusters",level:3},{value:"Nodepool Operations",id:"nodepool-operations",level:2},{value:"Get a Nodepool",id:"get-a-nodepool",level:3},{value:"List All Nodepools",id:"list-all-nodepools",level:3},{value:"Deployment Operations",id:"deployment-operations",level:2},{value:"Get a Deployment",id:"get-a-deployment",level:3},{value:"List All Deployments",id:"list-all-deployments",level:3},{value:"Delete Resources",id:"delete-resources",level:2},{value:"Delete Deployments",id:"delete-deployments",level:3},{value:"Delete Nodepools",id:"delete-nodepools",level:3},{value:"Delete Compute Clusters",id:"delete-compute-clusters",level:3}];function T(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",strong:"strong",...(0,o.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(t.h1,{id:"managing-your-compute",children:"Managing Your Compute"}),"\n",(0,l.jsx)(t.p,{children:(0,l.jsx)(t.strong,{children:"Manage your clusters, nodepools, and deployments"})}),"\n",(0,l.jsx)("hr",{}),"\n",(0,l.jsx)(t.p,{children:"You can efficiently manage your clusters, nodepools, and deployments within the Clarifai platform to optimize performance and costs. You can gain valuable insights by retrieving detailed resource information, and streamline your compute environment by removing unused resources."}),"\n","\n","\n",(0,l.jsx)(t.h2,{id:"cluster-operations",children:"Cluster Operations"}),"\n",(0,l.jsx)(t.h3,{id:"get-a-cluster",children:"Get a Cluster"}),"\n",(0,l.jsxs)(t.p,{children:["To get a specific compute cluster, pass the ",(0,l.jsx)(t.code,{children:"compute_cluster_id"})," to the ",(0,l.jsx)(t.code,{children:"compute_cluster"})," method of the ",(0,l.jsx)(t.code,{children:"User"})," class."]}),"\n",(0,l.jsx)(s.A,{children:(0,l.jsx)(r.A,{value:"python",label:"Python",children:(0,l.jsx)(i.A,{className:"language-python",children:a})})}),"\n",(0,l.jsx)(t.h3,{id:"list-all-clusters",children:"List All Clusters"}),"\n",(0,l.jsxs)(t.p,{children:["To list your existing compute clusters, call the ",(0,l.jsx)(t.code,{children:"list_compute_clusters"})," method of the ",(0,l.jsx)(t.code,{children:"User"})," class."]}),"\n",(0,l.jsxs)(s.A,{children:[(0,l.jsx)(r.A,{value:"python",label:"Python",children:(0,l.jsx)(i.A,{className:"language-python",children:c})}),(0,l.jsx)(r.A,{value:"bash",label:"Bash",children:(0,l.jsx)(i.A,{className:"language-yaml",children:f})})]}),"\n",(0,l.jsx)(t.h2,{id:"nodepool-operations",children:"Nodepool Operations"}),"\n",(0,l.jsx)(t.h3,{id:"get-a-nodepool",children:"Get a Nodepool"}),"\n",(0,l.jsxs)(t.p,{children:["To get a specific nodepool, provide the ",(0,l.jsx)(t.code,{children:"nodepool_id"})," to the ",(0,l.jsx)(t.code,{children:"nodepool"})," method of the ",(0,l.jsx)(t.code,{children:"ComputeCluster"})," class."]}),"\n",(0,l.jsx)(s.A,{children:(0,l.jsx)(r.A,{value:"python",label:"Python",children:(0,l.jsx)(i.A,{className:"language-python",children:d})})}),"\n",(0,l.jsx)(t.h3,{id:"list-all-nodepools",children:"List All Nodepools"}),"\n",(0,l.jsxs)(t.p,{children:["To list the existing nodepools, call the ",(0,l.jsx)(t.code,{children:"list_nodepools"})," method of the ",(0,l.jsx)(t.code,{children:"ComputeCluster"})," class."]}),"\n",(0,l.jsxs)(s.A,{children:[(0,l.jsx)(r.A,{value:"python",label:"Python",children:(0,l.jsx)(i.A,{className:"language-python",children:u})}),(0,l.jsx)(r.A,{value:"bash",label:"Bash",children:(0,l.jsx)(i.A,{className:"language-yaml",children:x})})]}),"\n",(0,l.jsx)(t.h2,{id:"deployment-operations",children:"Deployment Operations"}),"\n",(0,l.jsx)(t.h3,{id:"get-a-deployment",children:"Get a Deployment"}),"\n",(0,l.jsxs)(t.p,{children:["To get a specific deployment, provide the ",(0,l.jsx)(t.code,{children:"deployment_id"})," to the ",(0,l.jsx)(t.code,{children:"deployment"})," method of the ",(0,l.jsx)(t.code,{children:"Nodepool"})," class."]}),"\n",(0,l.jsx)(s.A,{children:(0,l.jsx)(r.A,{value:"python",label:"Python",children:(0,l.jsx)(i.A,{className:"language-python",children:p})})}),"\n",(0,l.jsx)(t.h3,{id:"list-all-deployments",children:"List All Deployments"}),"\n",(0,l.jsxs)(t.p,{children:["To list existing deployments, call the ",(0,l.jsx)(t.code,{children:"list_deployments"})," method of the ",(0,l.jsx)(t.code,{children:"Nodepool"})," class."]}),"\n",(0,l.jsxs)(s.A,{children:[(0,l.jsx)(r.A,{value:"python",label:"Python",children:(0,l.jsx)(i.A,{className:"language-python",children:m})}),(0,l.jsx)(r.A,{value:"bash",label:"Bash",children:(0,l.jsx)(i.A,{className:"language-yaml",children:b})})]}),"\n",(0,l.jsx)(t.h2,{id:"delete-resources",children:"Delete Resources"}),"\n",(0,l.jsx)(t.h3,{id:"delete-deployments",children:"Delete Deployments"}),"\n",(0,l.jsxs)(t.p,{children:["To delete deployments, pass a list of deployment IDs to the ",(0,l.jsx)(t.code,{children:"delete_deployments"})," method of the ",(0,l.jsx)(t.code,{children:"Nodepool"})," class."]}),"\n",(0,l.jsxs)(s.A,{children:[(0,l.jsx)(r.A,{value:"python",label:"Python",children:(0,l.jsx)(i.A,{className:"language-python",children:h})}),(0,l.jsx)(r.A,{value:"bash",label:"Bash",children:(0,l.jsx)(i.A,{className:"language-yaml",children:A})})]}),"\n",(0,l.jsx)(t.h3,{id:"delete-nodepools",children:"Delete Nodepools"}),"\n",(0,l.jsxs)(t.p,{children:["To delete nodepools, provide a list of nodepool IDs to the ",(0,l.jsx)(t.code,{children:"delete_nodepools"})," method of the ",(0,l.jsx)(t.code,{children:"ComputeCluster"})," class."]}),"\n",(0,l.jsxs)(s.A,{children:[(0,l.jsx)(r.A,{value:"python",label:"Python",children:(0,l.jsx)(i.A,{className:"language-python",children:_})}),(0,l.jsx)(r.A,{value:"bash",label:"Bash",children:(0,l.jsx)(i.A,{className:"language-yaml",children:g})})]}),"\n",(0,l.jsx)(t.h3,{id:"delete-compute-clusters",children:"Delete Compute Clusters"}),"\n",(0,l.jsxs)(t.p,{children:["To delete compute clusters, provide a list of compute cluster IDs to the ",(0,l.jsx)(t.code,{children:"delete_compute_clusters"})," method of the ",(0,l.jsx)(t.code,{children:"User"})," class."]}),"\n",(0,l.jsxs)(s.A,{children:[(0,l.jsx)(r.A,{value:"python",label:"Python",children:(0,l.jsx)(i.A,{className:"language-python",children:y})}),(0,l.jsx)(r.A,{value:"bash",label:"Bash",children:(0,l.jsx)(i.A,{className:"language-yaml",children:v})})]})]})}function D(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,l.jsx)(t,{...e,children:(0,l.jsx)(T,{...e})}):T(e)}},19365:(e,t,n)=>{n.d(t,{A:()=>r});n(96540);var l=n(18215);const o={tabItem:"tabItem_Ymn6"};var s=n(74848);function r(e){let{children:t,hidden:n,className:r}=e;return(0,s.jsx)("div",{role:"tabpanel",className:(0,l.A)(o.tabItem,r),hidden:n,children:t})}},11470:(e,t,n)=>{n.d(t,{A:()=>A});var l=n(96540),o=n(18215),s=n(23104),r=n(56347),i=n(205),a=n(57485),c=n(31682),d=n(70679);function u(e){return l.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,l.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function p(e){const{values:t,children:n}=e;return(0,l.useMemo)((()=>{const e=t??function(e){return u(e).map((e=>{let{props:{value:t,label:n,attributes:l,default:o}}=e;return{value:t,label:n,attributes:l,default:o}}))}(n);return function(e){const t=(0,c.X)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function h(e){let{queryString:t=!1,groupId:n}=e;const o=(0,r.W6)(),s=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,a.aZ)(s),(0,l.useCallback)((e=>{if(!s)return;const t=new URLSearchParams(o.location.search);t.set(s,e),o.replace({...o.location,search:t.toString()})}),[s,o])]}function _(e){const{defaultValue:t,queryString:n=!1,groupId:o}=e,s=p(e),[r,a]=(0,l.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const l=n.find((e=>e.default))??n[0];if(!l)throw new Error("Unexpected error: 0 tabValues");return l.value}({defaultValue:t,tabValues:s}))),[c,u]=h({queryString:n,groupId:o}),[_,y]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[o,s]=(0,d.Dv)(n);return[o,(0,l.useCallback)((e=>{n&&s.set(e)}),[n,s])]}({groupId:o}),f=(()=>{const e=c??_;return m({value:e,tabValues:s})?e:null})();(0,i.A)((()=>{f&&a(f)}),[f]);return{selectedValue:r,selectValue:(0,l.useCallback)((e=>{if(!m({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);a(e),u(e),y(e)}),[u,y,s]),tabValues:s}}var y=n(92303);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var x=n(74848);function b(e){let{className:t,block:n,selectedValue:l,selectValue:r,tabValues:i}=e;const a=[],{blockElementScrollPositionUntilNextRender:c}=(0,s.a_)(),d=e=>{const t=e.currentTarget,n=a.indexOf(t),o=i[n].value;o!==l&&(c(t),r(o))},u=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=a.indexOf(e.currentTarget)+1;t=a[n]??a[0];break}case"ArrowLeft":{const n=a.indexOf(e.currentTarget)-1;t=a[n]??a[a.length-1];break}}t?.focus()};return(0,x.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.A)("tabs",{"tabs--block":n},t),children:i.map((e=>{let{value:t,label:n,attributes:s}=e;return(0,x.jsx)("li",{role:"tab",tabIndex:l===t?0:-1,"aria-selected":l===t,ref:e=>a.push(e),onKeyDown:u,onClick:d,...s,className:(0,o.A)("tabs__item",f.tabItem,s?.className,{"tabs__item--active":l===t}),children:n??t},t)}))})}function v(e){let{lazy:t,children:n,selectedValue:o}=e;const s=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=s.find((e=>e.props.value===o));return e?(0,l.cloneElement)(e,{className:"margin-top--md"}):null}return(0,x.jsx)("div",{className:"margin-top--md",children:s.map(((e,t)=>(0,l.cloneElement)(e,{key:t,hidden:e.props.value!==o})))})}function g(e){const t=_(e);return(0,x.jsxs)("div",{className:(0,o.A)("tabs-container",f.tabList),children:[(0,x.jsx)(b,{...t,...e}),(0,x.jsx)(v,{...t,...e})]})}function A(e){const t=(0,y.A)();return(0,x.jsx)(g,{...e,children:u(e.children)},String(t))}}}]);
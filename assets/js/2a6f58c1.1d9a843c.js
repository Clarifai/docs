"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[9971],{65537:(e,t,n)=>{n.d(t,{A:()=>k});var r=n(96540),a=n(18215),s=n(65627),i=n(56347),o=n(50372),l=n(30604),p=n(11861),c=n(78749);function h(e){return r.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function u(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??function(e){return h(e).map((e=>{let{props:{value:t,label:n,attributes:r,default:a}}=e;return{value:t,label:n,attributes:r,default:a}}))}(n);return function(e){const t=(0,p.XI)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function d(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function m(e){let{queryString:t=!1,groupId:n}=e;const a=(0,i.W6)(),s=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,l.aZ)(s),(0,r.useCallback)((e=>{if(!s)return;const t=new URLSearchParams(a.location.search);t.set(s,e),a.replace({...a.location,search:t.toString()})}),[s,a])]}function f(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,s=u(e),[i,l]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!d({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const r=n.find((e=>e.default))??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:s}))),[p,h]=m({queryString:n,groupId:a}),[f,g]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,s]=(0,c.Dv)(n);return[a,(0,r.useCallback)((e=>{n&&s.set(e)}),[n,s])]}({groupId:a}),I=(()=>{const e=p??f;return d({value:e,tabValues:s})?e:null})();(0,o.A)((()=>{I&&l(I)}),[I]);return{selectedValue:i,selectValue:(0,r.useCallback)((e=>{if(!d({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);l(e),h(e),g(e)}),[h,g,s]),tabValues:s}}var g=n(9136);const I={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var b=n(74848);function x(e){let{className:t,block:n,selectedValue:r,selectValue:i,tabValues:o}=e;const l=[],{blockElementScrollPositionUntilNextRender:p}=(0,s.a_)(),c=e=>{const t=e.currentTarget,n=l.indexOf(t),a=o[n].value;a!==r&&(p(t),i(a))},h=e=>{let t=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const n=l.indexOf(e.currentTarget)+1;t=l[n]??l[0];break}case"ArrowLeft":{const n=l.indexOf(e.currentTarget)-1;t=l[n]??l[l.length-1];break}}t?.focus()};return(0,b.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.A)("tabs",{"tabs--block":n},t),children:o.map((e=>{let{value:t,label:n,attributes:s}=e;return(0,b.jsx)("li",{role:"tab",tabIndex:r===t?0:-1,"aria-selected":r===t,ref:e=>{l.push(e)},onKeyDown:h,onClick:c,...s,className:(0,a.A)("tabs__item",I.tabItem,s?.className,{"tabs__item--active":r===t}),children:n??t},t)}))})}function w(e){let{lazy:t,children:n,selectedValue:s}=e;const i=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=i.find((e=>e.props.value===s));return e?(0,r.cloneElement)(e,{className:(0,a.A)("margin-top--md",e.props.className)}):null}return(0,b.jsx)("div",{className:"margin-top--md",children:i.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==s})))})}function v(e){const t=f(e);return(0,b.jsxs)("div",{className:(0,a.A)("tabs-container",I.tabList),children:[(0,b.jsx)(x,{...t,...e}),(0,b.jsx)(w,{...t,...e})]})}function k(e){const t=(0,g.A)();return(0,b.jsx)(v,{...e,children:h(e.children)},String(t))}},69201:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>I,contentTitle:()=>g,default:()=>w,frontMatter:()=>f,metadata:()=>r,toc:()=>b});const r=JSON.parse('{"id":"sdk/Search/Ranks","title":"Ranks","description":"Learn how to perform Rank Search","source":"@site/docs/sdk/Search/Ranks.md","sourceDirName":"sdk/Search","slug":"/sdk/Search/Ranks","permalink":"/sdk/Search/Ranks","draft":false,"unlisted":false,"editUrl":"https://github.com/Clarifai/docs/blob/main/docs/sdk/Search/Ranks.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"description":"Learn how to perform Rank Search"},"sidebar":"tutorialSidebar","previous":{"title":"Search","permalink":"/sdk/Search/"},"next":{"title":"Filter","permalink":"/sdk/Search/Filter"}}');var a=n(74848),s=n(28453),i=n(65537),o=n(79329),l=n(58069);const p='from clarifai.client.user import User  # Importing the User class from the Clarifai client library for user-related functionalities\nfrom PIL import Image  # Importing the Image module from the Python Imaging Library (PIL) for image processing\nimport requests  # Importing the requests library to handle HTTP requests\nfrom IPython.display import display  # Importing the display function from IPython.display module for displaying images in IPython\n\nUSER_ID=\'\'  # Placeholder for user ID\nAPP_ID=\'\'  # Placeholder for application ID\nPAT=\'\'  # Placeholder for personal access token (PAT)\n\n# Initialize the User object with user ID and PAT\nclient = User(user_id=USER_ID, pat=PAT)\n\n# Create a new application with specified ID and base workflow\napp = client.create_app(app_id=APP_ID, base_workflow="Universal", pat=PAT)\n\n# List of image URLs to be uploaded\nurls = [\n    "https://images.pexels.com/photos/139257/pexels-photo-139257.jpeg",\n    "https://images.pexels.com/photos/1879386/pexels-photo-1879386.jpeg",\n    "https://images.pexels.com/photos/1071882/pexels-photo-1071882.jpeg"\n]\n\ninput_obj = app.inputs()  # Initialize Inputs object to manage input data\n\n# Upload images from URLs to the application\nfor i, url in enumerate(urls):\n    input_obj.upload_from_url(input_id=f"input{i}", image_url=url)\n\n# Initialize the search functionality for the application with top_k parameter set to 1\nsearch = app.search(top_k=1)\n\n# Perform a search query with a specified text rank\nresponse = search.query(ranks=[{"text_raw": "Red pineapples on the beach."}])\n\n# Extract the URL of the first hit from the search response\nfor r in response:\n    hit = r.hits[0].input.data.image.url\n    break\n\n# Print the URL of the hit image\nprint(hit)\n\n# Open the hit image from URL, resize it, and display it\nhit_img = Image.open(requests.get(hit, stream=True).raw).resize((300,250))\ndisplay(hit_img)\n',c='import { User, Input, Search } from "clarifai-nodejs"; // Importing the User class from the Clarifai client library for user-related functionalities\n\n\nconst appId = "test_app"; // Placeholder for application ID\n\n// Initialize the User object with user ID and PAT\nconst client = new User({\n  userId: process.env.CLARIFAI_USER_ID,\n  pat: process.env.CLARIFAI_PAT,\n  appId,\n});\n\n// Create a new application with specified ID and base workflow\nawait client.createApp({ appId, baseWorkflow: "Universal" });\n\n// List of image URLs to be uploaded\nconst urls = [\n  "https://images.pexels.com/photos/139257/pexels-photo-139257.jpeg",\n  "https://images.pexels.com/photos/1879386/pexels-photo-1879386.jpeg",\n  "https://images.pexels.com/photos/1071882/pexels-photo-1071882.jpeg",\n];\n\n// Initialize Inputs object to manage input data\nconst input = new Input({\n  authConfig: {\n    userId: process.env.CLARIFAI_USER_ID,\n    pat: process.env.CLARIFAI_PAT,\n    appId,\n  },\n});\n\n// Upload images from URLs to the application\nfor (let i = 0; i < urls.length; i++) {\n  await input.uploadFromUrl({ inputId: `input${i}`, imageUrl: urls[i] });\n}\n\n// Initialize the search functionality for the application with topK parameter set to 1\nconst search = new Search({\n  authConfig: {\n    userId: process.env.CLARIFAI_USER_ID,\n    pat: process.env.CLARIFAI_PAT,\n    appId,\n  },\n  topK: 1,\n  metric: "euclidean",\n});\n\n// Perform a search query with a specified text rank\nconst response = search.query({\n  ranks: [{ textRaw: "Red pineapples on the beach." }],\n});\n\n// Extract the URL of the first hit from the search response\nlet hit;\nfor await (const r of response) {\n  hit = r?.hitsList?.[0]?.input?.data?.image?.url;\n  break;\n}\n\n// Print the URL of the hit image\nconsole.log(hit);\n',h="from clarifai.client.user import User\nfrom PIL import Image\nimport requests\nfrom IPython.display import display\n\n# Replace these variables with your actual user ID, app ID, and PAT (Personal Access Token)\nUSER_ID = ''\nAPP_ID = ''\nPAT = ''\n\n# Initialize a User object with the provided user ID and PAT\nclient = User(user_id=USER_ID, pat=PAT)\n\n# Create an application with the provided app ID, using the Universal workflow\n# The PAT is also provided for authentication\napp = client.create_app(app_id=APP_ID, base_workflow=\"Universal\", pat=PAT)\n\n# URLs of the images to be uploaded and searched\nurls = [\n    \"https://images.pexels.com/photos/139257/pexels-photo-139257.jpeg\",\n    \"https://images.pexels.com/photos/1879386/pexels-photo-1879386.jpeg\",\n    \"https://images.pexels.com/photos/1071882/pexels-photo-1071882.jpeg\"\n]\n\n# Initialize an Inputs object to manage input data\ninput_obj = app.inputs()\n\n# Initialize a Search object to perform searches\n# Limit the number of returned results to 2 (top_k=2)\nsearch = app.search(top_k=2)\n\n# Upload each image from the provided URLs\nfor i, url in enumerate(urls):\n    input_obj.upload_from_url(input_id=f\"input{i}\", image_url=url)\n\n# Perform a search with a specified rank (image URL)\nres = search.query(ranks=[{'image_url': 'https://images.pexels.com/photos/139257/pexels-photo-139257.jpeg'}])\n\n# Extract the URL of the first hit from the search results\nfor r in res:\n    hit = r.hits[0].input.data.image.url\n    break\n\n# Print the URL of the hit image\nprint(hit)\n\n# Open the hit image using PIL, resize it, and display it\nhit_img = Image.open(requests.get(hit, stream=True).raw).resize((300, 250))\ndisplay(hit_img)",u='import { User, Input, Search } from "clarifai-nodejs";\n\nconst appId = "test_app"; // Placeholder for application ID\n\n// Initialize a User object with the provided user ID and PAT\nconst client = new User({\n  userId: process.env.CLARIFAI_USER_ID,\n  pat: process.env.CLARIFAI_PAT,\n  appId,\n});\n\n// Create an application with the provided app ID, using the Universal workflow\nawait client.createApp({ appId, baseWorkflow: "Universal" });\n\n// URLs of the images to be uploaded and searched\nconst urls = [\n  "https://images.pexels.com/photos/139257/pexels-photo-139257.jpeg",\n  "https://images.pexels.com/photos/1879386/pexels-photo-1879386.jpeg",\n  "https://images.pexels.com/photos/1071882/pexels-photo-1071882.jpeg",\n];\n\n// Initialize an Inputs object to manage input data\nconst input = new Input({\n  authConfig: {\n    userId: process.env.CLARIFAI_USER_ID,\n    pat: process.env.CLARIFAI_PAT,\n    appId,\n  },\n});\n\n// Upload each image from the provided URLs\nfor (let i = 0; i < urls.length; i++) {\n  await input.uploadFromUrl({ inputId: `input${i}`, imageUrl: urls[i] });\n}\n\n// Initialize a Search object to perform searches\n// Limit the number of returned results to 2 (topK=2)\nconst search = new Search({\n  authConfig: {\n    userId: process.env.CLARIFAI_USER_ID,\n    pat: process.env.CLARIFAI_PAT,\n    appId,\n  },\n  topK: 2,\n  metric: "euclidean",\n});\n\n// Perform a search with a specified rank (image URL)\nconst res = search.query({\n  ranks: [\n    {\n      imageUrl:\n        "https://images.pexels.com/photos/139257/pexels-photo-139257.jpeg",\n    },\n  ],\n});\n\n// Extract the URL of the first hit from the search results\nlet hit;\nfor await (const r of res) {\n  hit = r.hitsList?.[0]?.input?.data?.image?.url;\n  break;\n}\n\n// Print the URL of the hit image\nconsole.log(hit);\n',d="https://images.pexels.com/photos/139257/pexels-photo-139257.jpeg",m="https://samples.clarifai.com/XiJinping.jpg",f={sidebar_position:1,description:"Learn how to perform Rank Search"},g="Ranks",I={},b=[{value:"Rank with Text",id:"rank-with-text",level:2},{value:"Rank with Image URL",id:"rank-with-image-url",level:2}];function x(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",strong:"strong",...(0,s.R)(),...e.components},{Details:n}=t;return n||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"ranks",children:"Ranks"})}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.strong,{children:"Learn how to perform search with ranks using Clarifai SDKs"})}),"\n",(0,a.jsx)("hr",{}),"\n",(0,a.jsx)(t.p,{children:"The rank feature in Clarifai allows users to specify the criteria for prioritizing search results based on relevance or similarity to a reference."}),"\n",(0,a.jsx)(t.p,{children:"In the provided example, it conducts a vector search over inputs, comparing their features to those of a reference image specified by its URL. The search results are then ranked based on their similarity to the reference using the cosine metric."}),"\n",(0,a.jsxs)(t.p,{children:["Note that the following search query method with the ",(0,a.jsx)(t.code,{children:"ranks"})," parameter leverages internal ",(0,a.jsx)(t.a,{href:"https://docs.clarifai.com/api-guide/search/rank",children:"gRPC methods"})," that are more verbose and flexible."]}),"\n",(0,a.jsx)(t.h2,{id:"rank-with-text",children:"Rank with Text"}),"\n",(0,a.jsx)(t.p,{children:"By incorporating text-based ranking, users can enhance the relevance and specificity of search results, ensuring that items closely aligned with specified textual criteria appear higher in the ranked list."}),"\n",(0,a.jsxs)(i.A,{children:[(0,a.jsxs)(o.A,{value:"python",label:"Python",children:[(0,a.jsx)(l.A,{className:"language-python",children:p}),(0,a.jsxs)(n,{children:[(0,a.jsx)("summary",{children:"Output"}),(0,a.jsx)(l.A,{className:"language-text",children:d}),(0,a.jsx)("img",{src:"/img/python-sdk/rk_text.png"})]})]}),(0,a.jsx)(o.A,{value:"typescript",label:"Typescript",children:(0,a.jsx)(l.A,{className:"language-typescript",children:c})})]}),"\n",(0,a.jsx)(t.h2,{id:"rank-with-image-url",children:"Rank with Image URL"}),"\n",(0,a.jsx)(t.p,{children:"Ranking with image URL in Clarifai allows users to prioritize search results based on the similarity or relevance of images specified by their URLs."}),"\n",(0,a.jsxs)(i.A,{children:[(0,a.jsxs)(o.A,{value:"python",label:"Python",children:[(0,a.jsx)(l.A,{className:"language-python",children:h}),(0,a.jsxs)(n,{children:[(0,a.jsx)("summary",{children:"Output"}),(0,a.jsx)(l.A,{className:"language-text",children:m}),(0,a.jsx)("img",{src:"/img/python-sdk/rk_imurl.png"})]})]}),(0,a.jsx)(o.A,{value:"typescript",label:"Typescript",children:(0,a.jsx)(l.A,{className:"language-typescript",children:u})})]})]})}function w(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(x,{...e})}):x(e)}},79329:(e,t,n)=>{n.d(t,{A:()=>i});n(96540);var r=n(18215);const a={tabItem:"tabItem_Ymn6"};var s=n(74848);function i(e){let{children:t,hidden:n,className:i}=e;return(0,s.jsx)("div",{role:"tabpanel",className:(0,r.A)(a.tabItem,i),hidden:n,children:t})}}}]);
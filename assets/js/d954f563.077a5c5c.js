"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[9873],{58215:function(n,e,t){var a=t(67294);e.Z=function(n){var e=n.children,t=n.hidden,o=n.className;return a.createElement("div",{role:"tabpanel",hidden:t,className:o},e)}},26396:function(n,e,t){t.d(e,{Z:function(){return p}});var a=t(87462),o=t(67294),r=t(72389),i=t(79443);var s=function(){var n=(0,o.useContext)(i.Z);if(null==n)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return n},u=t(63616),l=t(86010),c="tabItem_vU9c";function d(n){var e,t,r,i=n.lazy,d=n.block,p=n.defaultValue,f=n.values,h=n.groupId,m=n.className,v=o.Children.map(n.children,(function(n){if((0,o.isValidElement)(n)&&void 0!==n.props.value)return n;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof n.type?n.type:n.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),k=null!=f?f:v.map((function(n){var e=n.props;return{value:e.value,label:e.label,attributes:e.attributes}})),b=(0,u.lx)(k,(function(n,e){return n.value===e.value}));if(b.length>0)throw new Error('Docusaurus error: Duplicate values "'+b.map((function(n){return n.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var T=null===p?p:null!=(e=null!=p?p:null==(t=v.find((function(n){return n.props.default})))?void 0:t.props.value)?e:null==(r=v[0])?void 0:r.props.value;if(null!==T&&!k.some((function(n){return n.value===T})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+T+'" but none of its children has the corresponding value. Available values are: '+k.map((function(n){return n.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var _=s(),g=_.tabGroupChoices,I=_.setTabGroupChoices,E=(0,o.useState)(T),w=E[0],N=E[1],P=[],y=(0,u.o5)().blockElementScrollPositionUntilNextRender;if(null!=h){var A=g[h];null!=A&&A!==w&&k.some((function(n){return n.value===A}))&&N(A)}var D=function(n){var e=n.currentTarget,t=P.indexOf(e),a=k[t].value;a!==w&&(y(e),N(a),null!=h&&I(h,a))},C=function(n){var e,t=null;switch(n.key){case"ArrowRight":var a=P.indexOf(n.currentTarget)+1;t=P[a]||P[0];break;case"ArrowLeft":var o=P.indexOf(n.currentTarget)-1;t=P[o]||P[P.length-1]}null==(e=t)||e.focus()};return o.createElement("div",{className:"tabs-container"},o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":d},m)},k.map((function(n){var e=n.value,t=n.label,r=n.attributes;return o.createElement("li",(0,a.Z)({role:"tab",tabIndex:w===e?0:-1,"aria-selected":w===e,key:e,ref:function(n){return P.push(n)},onKeyDown:C,onFocus:D,onClick:D},r,{className:(0,l.Z)("tabs__item",c,null==r?void 0:r.className,{"tabs__item--active":w===e})}),null!=t?t:e)}))),i?(0,o.cloneElement)(v.filter((function(n){return n.props.value===w}))[0],{className:"margin-vert--md"}):o.createElement("div",{className:"margin-vert--md"},v.map((function(n,e){return(0,o.cloneElement)(n,{key:e,hidden:n.props.value!==w})}))))}function p(n){var e=(0,r.Z)();return o.createElement(d,(0,a.Z)({key:String(e)},n))}},83926:function(n,e,t){t.r(e),t.d(e,{contentTitle:function(){return d},default:function(){return m},frontMatter:function(){return c},metadata:function(){return p},toc:function(){return f}});var a=t(87462),o=t(63366),r=(t(67294),t(3905)),i=t(26396),s=t(58215),u=t(19055),l=["components"],c={description:"This is a page about performing task annotations with the Clarifai API.",sidebar_position:5},d="Task Annotations",p={unversionedId:"api-guide/annotate/task-annotations",id:"api-guide/annotate/task-annotations",title:"Task Annotations",description:"This is a page about performing task annotations with the Clarifai API.",source:"@site/docs/api-guide/annotate/task-annotations.md",sourceDirName:"api-guide/annotate",slug:"/api-guide/annotate/task-annotations",permalink:"/api-guide/annotate/task-annotations",tags:[],version:"current",sidebarPosition:5,frontMatter:{description:"This is a page about performing task annotations with the Clarifai API.",sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Tasks",permalink:"/api-guide/annotate/tasks"},next:{title:"Creating and Training Models",permalink:"/api-guide/model/"}},f=[],h={toc:f};function m(n){var e=n.components,t=(0,o.Z)(n,l);return(0,r.kt)("wrapper",(0,a.Z)({},h,t,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"task-annotations"},"Task Annotations"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Perform task annotations")),(0,r.kt)("hr",null),(0,r.kt)("p",null,"In order to keep track of each user's work assigned to a task, all the annotations of this user related to this task should be linked to the task ID."),(0,r.kt)("p",null,"Therefore, when a user creates an annotation, the task ID should be provided as below:"),(0,r.kt)(i.Z,{mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'\n    {\n      "annotations": [\n        {\n          "input_id": "{{asset_id}}",\n          "data": {\n            "concepts": [\n              {\n                "id": "tree",\n                "value": 1\n              },\n              {\n                "id": "water",\n                "value": 0\n              }\n            ]\n          },\n          "annotation_info": {\n            "task_id": "{{task_id}}"\n          }\n        }\n      ]\n    }\'\\\n  https://api.clarifai.com/v2/annotations\n'))),(0,r.kt)(s.Z,{value:"js_rest",label:"JavaScript (REST)",mdxType:"TabItem"},(0,r.kt)(u.Z,{className:"language-javascript",mdxType:"CodeBlock"},'\x3c!--index.html file--\x3e\n\n<script>\n    //////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the details for\n    // performing task annotations. Change these strings to run your own example.\n    /////////////////////////////////////////////////////////////////////////////////\n  \n    const USER_ID = \'YOUR_USER_ID_HERE\';\n    // Your PAT (Personal Access Token) can be found in the portal under Authentification\n    const PAT = \'YOUR_PAT_HERE\';\n    const APP_ID = \'YOUR_APP_ID_HERE\';\n    // Change these to perform your own task annotations  \n    const INPUT_ID = \'c99f1b557d1d43d1916b46f8ce4a0487\';\n    const CONCEPT_ID_1 = \'tree\';\n    const CONCEPT_ID_2 = \'water\';\n    const TASK_ID = \'c37aed156e474e03bb5246576d9f48fd\';\n  \n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n  \n    const raw = JSON.stringify({\n      "user_app_id": {\n        "user_id": USER_ID,\n        "app_id": APP_ID\n      },\n      "annotations": [\n        {\n          "input_id": INPUT_ID,\n          "data": {\n            "concepts": [\n              {\n                "id": CONCEPT_ID_1,\n                "value": 1\n              },\n              {\n                "id": CONCEPT_ID_2,\n                "value": 0\n              }\n            ]\n          },\n          "annotation_info": {\n            "task_id": TASK_ID\n          }\n        }\n      ]\n    });\n  \n    const requestOptions = {\n      method: \'POST\',\n      headers: {\n        \'Accept\': \'application/json\',\n        \'Authorization\': \'Key \' + PAT\n      },\n      body: raw\n    };\n  \n    fetch("https://api.clarifai.com/v2/annotations", requestOptions)\n      .then(response => response.text())\n      .then(result => console.log(result))\n      .catch(error => console.log(\'error\', error));\n  \n  <\/script>'))))}m.isMDXComponent=!0}}]);
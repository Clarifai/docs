"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[8465],{19365:(e,n,t)=>{t.d(n,{A:()=>o});var a=t(96540),r=t(20053);const s={tabItem:"tabItem_Ymn6"};function o(e){let{children:n,hidden:t,className:o}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.A)(s.tabItem,o),hidden:t},n)}},11470:(e,n,t)=>{t.d(n,{A:()=>C});var a=t(58168),r=t(96540),s=t(20053),o=t(23104),i=t(56347),l=t(57485),u=t(31682),c=t(89466);function d(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:n,label:t,attributes:a,default:r}}=e;return{value:n,label:t,attributes:a,default:r}}))}function f(e){const{values:n,children:t}=e;return(0,r.useMemo)((()=>{const e=n??d(t);return function(e){const n=(0,u.X)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function g(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function m(e){let{queryString:n=!1,groupId:t}=e;const a=(0,i.W6)(),s=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,l.aZ)(s),(0,r.useCallback)((e=>{if(!s)return;const n=new URLSearchParams(a.location.search);n.set(s,e),a.replace({...a.location,search:n.toString()})}),[s,a])]}function p(e){const{defaultValue:n,queryString:t=!1,groupId:a}=e,s=f(e),[o,i]=(0,r.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!g({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const a=t.find((e=>e.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:s}))),[l,u]=m({queryString:t,groupId:a}),[d,p]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[a,s]=(0,c.Dv)(t);return[a,(0,r.useCallback)((e=>{t&&s.set(e)}),[t,s])]}({groupId:a}),h=(()=>{const e=l??d;return g({value:e,tabValues:s})?e:null})();(0,r.useLayoutEffect)((()=>{h&&i(h)}),[h]);return{selectedValue:o,selectValue:(0,r.useCallback)((e=>{if(!g({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);i(e),u(e),p(e)}),[u,p,s]),tabValues:s}}var h=t(92303);const y={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function _(e){let{className:n,block:t,selectedValue:i,selectValue:l,tabValues:u}=e;const c=[],{blockElementScrollPositionUntilNextRender:d}=(0,o.a_)(),f=e=>{const n=e.currentTarget,t=c.indexOf(n),a=u[t].value;a!==i&&(d(n),l(a))},g=e=>{let n=null;switch(e.key){case"Enter":f(e);break;case"ArrowRight":{const t=c.indexOf(e.currentTarget)+1;n=c[t]??c[0];break}case"ArrowLeft":{const t=c.indexOf(e.currentTarget)-1;n=c[t]??c[c.length-1];break}}n?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":t},n)},u.map((e=>{let{value:n,label:t,attributes:o}=e;return r.createElement("li",(0,a.A)({role:"tab",tabIndex:i===n?0:-1,"aria-selected":i===n,key:n,ref:e=>c.push(e),onKeyDown:g,onClick:f},o,{className:(0,s.A)("tabs__item",y.tabItem,o?.className,{"tabs__item--active":i===n})}),t??n)})))}function b(e){let{lazy:n,children:t,selectedValue:a}=e;const s=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=s.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},s.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==a}))))}function w(e){const n=p(e);return r.createElement("div",{className:(0,s.A)("tabs-container",y.tabList)},r.createElement(_,(0,a.A)({},e,n)),r.createElement(b,(0,a.A)({},e,n)))}function C(e){const n=(0,h.A)();return r.createElement(w,(0,a.A)({key:String(n)},e))}},35030:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>b,contentTitle:()=>y,default:()=>I,frontMatter:()=>h,metadata:()=>_,toc:()=>w});var a=t(58168),r=(t(96540),t(15680)),s=t(11470),o=t(19365),i=t(77964);const l="import os  # Importing the os module for environment variable access\n\n# Importing necessary configurations and classes from unstructured.ingest.connector.salesforce\nfrom unstructured.ingest.connector.salesforce import SalesforceAccessConfig, SimpleSalesforceConfig\n\n# Importing configuration classes from unstructured.ingest.interfaces\nfrom unstructured.ingest.interfaces import PartitionConfig, ProcessorConfig, ReadConfig\n\n# Importing the SalesforceRunner class from unstructured.ingest.runner\nfrom unstructured.ingest.runner import SalesforceRunner\n\n# Importing necessary configurations and classes from unstructured.ingest.connector.clarifai\nfrom unstructured.ingest.connector.clarifai import (\n    ClarifaiAccessConfig,\n    ClarifaiWriteConfig,\n    SimpleClarifaiConfig,\n)\n\n# Importing base writer and ClarifaiWriter from unstructured.ingest.runner.writers.clarifai\nfrom unstructured.ingest.runner.writers.base_writer import Writer\nfrom unstructured.ingest.runner.writers.clarifai import ClarifaiWriter",u='def clarifai_writer() -> Writer:\n    # This function defines a writer for the Clarifai service.\n    # It returns an instance of ClarifaiWriter class.\n\n    return ClarifaiWriter(\n        connector_config=SimpleClarifaiConfig(\n            # Configuration for accessing the Clarifai API.\n            access_config=ClarifaiAccessConfig(\n                api_key="PAT"  # API key for accessing the Clarifai service.\n            ),\n            # Configuration specific to the Clarifai application.\n            app_id="app_id",  # The ID of the Clarifai application.\n            user_id="user_id"  # The ID of the Clarifai user.\n        ),\n        write_config=ClarifaiWriteConfig()  # Configuration for writing data to Clarifai.\n    )',c='if __name__ == "__main__":\n    # Creating a writer instance using the clarifai_writer function\n    writer = clarifai_writer()\n    \n    # Creating an instance of SalesforceRunner with various configurations\n    runner = SalesforceRunner(\n        processor_config=ProcessorConfig(\n            verbose=True,  # Enable verbose output\n            output_dir="salesforce-output",  # Directory to store output locally\n            num_processes=2,  # Number of processes to use\n        ),\n        read_config=ReadConfig(),  # Configuration for reading data\n        partition_config=PartitionConfig(),  # Configuration for partitioning data\n        connector_config=SimpleSalesforceConfig(\n            access_config=SalesforceAccessConfig(\n                consumer_key="YOUR_SALESFORCE_CONSUMER_KEY",  # Salesforce consumer key\n                private_key="PATH_TO_server.key_FILE",  # Path to the private key file\n            ),\n            username="SALESFORCE_USERNAME",  # Salesforce username\n            categories=["EmailMessage"],  # Categories to read data from\n            recursive=True,  # Whether to recursively read data\n        ),\n        writer=writer,  # Writer to use for output\n        writer_kwargs={},  # Additional arguments for the writer\n    )\n    \n    # Running the SalesforceRunner\n    runner.run()',d='from clarifai.rag import RAG\n\nWORKFLOW_URL = \'rag_workflow_url\'\n# creating RAG object with prebuilt workflow\nrag_object_from_url = RAG(workflow_url = WORKFLOW_URL)\n\nresult=rag_object_from_url.chat(messages=[{"role":"human", "content":"Summarize emails send to Wayne_llc "}])\n\nanswer = result[0]["content"].split(\'\\n\')\nprint(answer)',f='result=rag_object_from_url.chat(messages=[{"role":"human", "content":"What kind of product does Stark llc sell "}])\n\nanswer = result[0]["content"].split(\'\\n\')\nprint(answer)',g='2024-06-12 09:15:19,685 MainProcess DEBUG    updating download directory to: /root/.cache/unstructured/ingest/salesforce/54298b8afd\n2024-06-12 09:15:19,690 MainProcess INFO     running pipeline: DocFactory -> Reader -> Partitioner -> Writer -> Copier with config: {"reprocess": false, "verbose": true, "work_dir": "/root/.cache/unstructured/ingest/pipeline", "output_dir": "salesforce-output", "num_processes": 2, "raise_on_error": false}\n2024-06-12 09:15:19,785 MainProcess INFO     Running doc factory to generate ingest docs. Source connector: {"processor_config": {"reprocess": false, "verbose": true, "work_dir": "/root/.cache/unstructured/ingest/pipeline", "output_dir": "salesforce-output", "num_processes": 2, "raise_on_error": false}, "read_config": {"download_dir": "/root/.cache/unstructured/ingest/salesforce/54298b8afd", "re_download": false, "preserve_downloads": false, "download_only": false, "max_docs": null}, "connector_config": {"access_config": {"consumer_key": "*******", "private_key": "*******"}, "categories": ["EmailMessage"], "username": "adithyansukumar@testing.com", "recursive": true}}\n2024-06-12 09:15:21,944 MainProcess INFO     processing 14 docs via 2 processes\n2024-06-12 09:15:21,951 MainProcess INFO     Calling Reader with 14 docs\n2024-06-12 09:15:21,953 MainProcess INFO     Running source node to download data associated with ingest docs\n2024-06-12 09:15:40,018 MainProcess INFO     Calling Partitioner with 14 docs\n2024-06-12 09:15:40,021 MainProcess INFO     Running partition node to extract content from json files. Config: {"pdf_infer_table_structure": false, "strategy": "auto", "ocr_languages": null, "encoding": null, "additional_partition_args": {}, "skip_infer_table_types": null, "fields_include": ["element_id", "text", "type", "metadata", "embeddings"], "flatten_metadata": false, "metadata_exclude": [], "metadata_include": [], "partition_endpoint": "https://api.unstructured.io/general/v0/general", "partition_by_api": false, "api_key": "*******", "hi_res_model_name": null}, partition kwargs: {}]\n2024-06-12 09:15:40,024 MainProcess INFO     Creating /root/.cache/unstructured/ingest/pipeline/partitioned\n2024-06-12 09:15:48,787 MainProcess INFO     Calling Copier with 14 docs\n2024-06-12 09:15:48,790 MainProcess INFO     Running copy node to move content to desired output location\n2024-06-12 09:15:52,096 MainProcess INFO     uploading elements from 14 document(s) to the destination\n2024-06-12 09:15:52,098 MainProcess INFO     Calling Writer with 14 docs\n2024-06-12 09:15:52,102 MainProcess INFO     Running write node to upload content. Destination connector: {"write_config": {"batch_size": 50}, "connector_config": {"access_config": {"api_key": "*******"}, "app_id": "salesforce_app_3", "user_id": "8tzpjy1a841y", "dataset_id": null}, "_client": null}]\n2024-06-12 09:15:52,442 MainProcess INFO     Extending 3 json elements from content in salesforce-output/EmailMessage/02sdL000000BwlRQAS.eml.json\n2024-06-12 09:15:52,443 MainProcess INFO     Extending 2 json elements from content in salesforce-output/EmailMessage/02sdL000000By7JQAS.eml.json\n2024-06-12 09:15:52,447 MainProcess INFO     Extending 22 json elements from content in salesforce-output/EmailMessage/02sdL000000ByYjQAK.eml.json\n2024-06-12 09:15:52,450 MainProcess INFO     Extending 1 json elements from content in salesforce-output/EmailMessage/02sdL000000CJIDQA4.eml.json\n2024-06-12 09:15:52,453 MainProcess INFO     Extending 10 json elements from content in salesforce-output/EmailMessage/02sdL000000DGQMQA4.eml.json\n2024-06-12 09:15:52,455 MainProcess INFO     Extending 10 json elements from content in salesforce-output/EmailMessage/02sdL000000DGetQAG.eml.json\n2024-06-12 09:15:52,456 MainProcess INFO     Extending 10 json elements from content in salesforce-output/EmailMessage/02sdL000000DGwbQAG.eml.json\n2024-06-12 09:15:52,458 MainProcess INFO     Extending 9 json elements from content in salesforce-output/EmailMessage/02sdL000000DGyDQAW.eml.json\n2024-06-12 09:15:52,460 MainProcess INFO     Extending 11 json elements from content in salesforce-output/EmailMessage/02sdL000000DGzpQAG.eml.json\n2024-06-12 09:15:52,462 MainProcess INFO     Extending 11 json elements from content in salesforce-output/EmailMessage/02sdL000000DH1RQAW.eml.json\n2024-06-12 09:15:52,463 MainProcess INFO     Extending 12 json elements from content in salesforce-output/EmailMessage/02sdL000000DH33QAG.eml.json\n2024-06-12 09:15:52,465 MainProcess INFO     Extending 9 json elements from content in salesforce-output/EmailMessage/02sdL000000DH9VQAW.eml.json\n2024-06-12 09:15:52,466 MainProcess INFO     Extending 11 json elements from content in salesforce-output/EmailMessage/02sdL000000DHB7QAO.eml.json\n2024-06-12 09:15:52,468 MainProcess INFO     Extending 11 json elements from content in salesforce-output/EmailMessage/02sdL000000DHHZQA4.eml.json\n2024-06-12 09:15:52,475 MainProcess INFO     writing 132 objects to destination app salesforce_app_3 \n2024-06-12 09:15:55 INFO     clarifai.client.input:                                                    input.py:706\n                             Inputs Uploaded                                                                       \n                             code: SUCCESS                                                                         \n                             description: "Ok"                                                                     \n                             details: "All inputs successfully added"                                              \n                             req_id: "af1aca7b33bf498e898c859c47259ef4"\n',m="'The email sent to Wayne LLC was from jane.doe@xyzhospitality.com. In her email, she mentioned that they have reviewed their inventory and are interested in placing a new order. She requested for an updated product catalog and availability list. Additionally, she also asked if there are any new products or special offers that they should be aware of.'",p="'Stark LLC sells office furniture, including Modular Office Furniture Sets and Office Chairs.'",h={},y="Ingest Email Messages From Salesforce Using Unstructured.io",_={unversionedId:"integrations/unstructured/salesforce",id:"integrations/unstructured/salesforce",title:"Ingest Email Messages From Salesforce Using Unstructured.io",description:"Learn how to ingest email messages from Salesforce",source:"@site/docs/integrations/unstructured/salesforce.md",sourceDirName:"integrations/unstructured",slug:"/integrations/unstructured/salesforce",permalink:"/integrations/unstructured/salesforce",draft:!1,editUrl:"https://github.com/Clarifai/docs/blob/main/docs/integrations/unstructured/salesforce.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Use RAG With Unstructured.io",permalink:"/integrations/unstructured/s3-rag"},next:{title:"Clarifai API Basics",permalink:"/api-guide/api-overview/"}},b={},w=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Initialization",id:"initialization",level:2},{value:"Data Ingestion",id:"data-ingestion",level:2},{value:"Chat",id:"chat",level:2}],C={toc:w},v="wrapper";function I(e){let{components:n,...t}=e;return(0,r.yg)(v,(0,a.A)({},C,t,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"ingest-email-messages-from-salesforce-using-unstructuredio"},"Ingest Email Messages From Salesforce Using Unstructured.io"),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Learn how to ingest email messages from Salesforce")),(0,r.yg)("hr",null),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"https://www.salesforce.com/in/"},"Salesforce")," is a cloud-based customer relationship management (CRM) platform that assists businesses in managing their relationships and interactions with customers and prospects. It offers a comprehensive suite of tools including Sales Cloud, Service Cloud, Marketing Cloud, Commerce Cloud, and Analytics Cloud, among others, to streamline various business processes. In Salesforce, email messages play a crucial role in customer communication and interaction tracking. The platform integrates seamlessly with popular email services like Outlook and Gmail through Salesforce Inbox, allowing users to log emails directly into Salesforce. Additionally, Salesforce supports the creation of email templates, enabling consistent and personalized communication using merge fields from Salesforce records.  In this tutorial, we are going to ingest the email messages from Salesforce to the Clarifai app and then use LLM to classify and summarize emails."),(0,r.yg)("h2",{id:"prerequisites"},"Prerequisites"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Setting up the Clarifai Python SDK along with PAT. Refer to the installation and configuration with the PAT token ",(0,r.yg)("a",{parentName:"li",href:"https://docs.clarifai.com/python-sdk/sdk-overview/"},"here"),".",(0,r.yg)("admonition",{parentName:"li",type:"note"},(0,r.yg)("p",{parentName:"admonition"},"Guide to get your ",(0,r.yg)("a",{parentName:"p",href:"https://docs.clarifai.com/clarifai-basics/authentication/personal-access-tokens"},"PAT"))))),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"import os\nos.environ['CLARIFAI_PAT'] =\"YOUR_PAT\"\n")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Install the required packages.")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},'! pip install "unstructured[clarifai]" \n! pip install "unstructured[salesforce]"\n')),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Setup JWT authorization in Salesforce. Refer ",(0,r.yg)("a",{parentName:"li",href:"https://developer.salesforce.com/docs/atlas.en-us.sfdx_dev.meta/sfdx_dev/sfdx_dev_auth_key_and_cert.htm"},"this")," page for instructions.")),(0,r.yg)("h2",{id:"initialization"},"Initialization"),(0,r.yg)("p",null,"The data we are going to ingest into our app is the body of the email messages in Salesforce. Since we have already set the JWT authorization for Salesforce let\u2019s import some required libraries,"),(0,r.yg)(s.A,{mdxType:"Tabs"},(0,r.yg)(o.A,{value:"python",label:"Python",mdxType:"TabItem"},(0,r.yg)(i.A,{className:"language-python",mdxType:"CodeBlock"},l))),(0,r.yg)("p",null,"Next we will have to write a function to setup the ingestion configurations required to upload the data into our app in the Clarifai platform."),(0,r.yg)(s.A,{mdxType:"Tabs"},(0,r.yg)(o.A,{value:"python",label:"Python",mdxType:"TabItem"},(0,r.yg)(i.A,{className:"language-python",mdxType:"CodeBlock"},u))),(0,r.yg)("h2",{id:"data-ingestion"},"Data Ingestion"),(0,r.yg)("p",null,"In data ingestion, there are two important concepts, Source Connector and Destination Connector. For our use case the Source Connector will fetch the data from Salesforce and the Destination Connector will send the transformed data to the Clarifai app."),(0,r.yg)("p",null,"Click ",(0,r.yg)("a",{parentName:"p",href:"https://unstructured-io.github.io/unstructured/ingest/index.html"},"here")," to learn more about Ingestion."),(0,r.yg)("admonition",{type:"info"},(0,r.yg)("p",{parentName:"admonition"},"In ",(0,r.yg)("inlineCode",{parentName:"p"},"SalesforceAccessConfig"),", the category is set as ",(0,r.yg)("inlineCode",{parentName:"p"},"EmailMessage")," for this task. Unstructured.io also supports other fields like ",(0,r.yg)("inlineCode",{parentName:"p"},"Account"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"Case"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"Campaign"),", and ",(0,r.yg)("inlineCode",{parentName:"p"},"Lead")," .")),(0,r.yg)(s.A,{mdxType:"Tabs"},(0,r.yg)(o.A,{value:"python",label:"Python",mdxType:"TabItem"},(0,r.yg)(i.A,{className:"language-python",mdxType:"CodeBlock"},c))),(0,r.yg)("details",null,(0,r.yg)("summary",null,"Output"),(0,r.yg)(i.A,{className:"language-python",mdxType:"CodeBlock"},g)),(0,r.yg)("h2",{id:"chat"},"Chat"),(0,r.yg)("p",null,"In the final step, we are going to chat with the data using RAG. You can use a workflow with a RAG prompter for initialising RAG. After successfully creating a workflow, you can get the URL from the Clarifai portal. After creating the rag object using workflow URL you can start retrieving text from the data we ingested using Unstructured.io. "),(0,r.yg)(s.A,{mdxType:"Tabs"},(0,r.yg)(o.A,{value:"python",label:"Python",mdxType:"TabItem"},(0,r.yg)(i.A,{className:"language-python",mdxType:"CodeBlock"},d))),(0,r.yg)("details",null,(0,r.yg)("summary",null,"Output"),(0,r.yg)(i.A,{className:"language-python",mdxType:"CodeBlock"},m)),(0,r.yg)(s.A,{mdxType:"Tabs"},(0,r.yg)(o.A,{value:"python",label:"Python",mdxType:"TabItem"},(0,r.yg)(i.A,{className:"language-python",mdxType:"CodeBlock"},f))),(0,r.yg)("details",null,(0,r.yg)("summary",null,"Output"),(0,r.yg)(i.A,{className:"language-python",mdxType:"CodeBlock"},p)))}I.isMDXComponent=!0}}]);
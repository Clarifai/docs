"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[7220],{51318:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>ee,contentTitle:()=>Z,default:()=>se,frontMatter:()=>J,metadata:()=>Q,toc:()=>ne});var s=t(74848),o=t(28453),a=t(11470),r=t(19365),i=t(21432);const l="########################################################################################\n# In this section, we set the user authentication, app ID, and the details of the new\n# custom workflow we want to create. Change these strings to run your own example.\n########################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to create your own custom workflow\nWORKFLOW_ID = 'my-custom-workflow'\nNODE_ID_1 = 'optical-character-recognizer'\nMODEL_ID_1 = 'ocr-scene-english-paddleocr'\nMODEL_VERSION_ID_1 = '40dbb2c9cde44a27af226782e7157006'\n\nNODE_ID_2 = 'text-to-text'\nMODEL_ID_2 = 'text-translation-english-spanish'\nMODEL_VERSION_ID_2 = '643f30558de34013aff72b0e21f244f5'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID) # The userDataObject is required when using a PAT\n\npost_workflows_response = stub.PostWorkflows(\n    service_pb2.PostWorkflowsRequest(\n      user_app_id=userDataObject,  \n      workflows=[\n        resources_pb2.Workflow(\n          id=WORKFLOW_ID,\n          nodes=[\n            resources_pb2.WorkflowNode(\n              id=NODE_ID_1,\n              model=resources_pb2.Model(\n                id=MODEL_ID_1,\n                model_version=resources_pb2.ModelVersion(\n                  id=MODEL_VERSION_ID_1\n                )\n              )\n            ),\n            resources_pb2.WorkflowNode(\n              id=NODE_ID_2,\n              model=resources_pb2.Model(\n                id=MODEL_ID_2,\n                model_version=resources_pb2.ModelVersion(\n                  id=MODEL_VERSION_ID_2\n                )\n              ),\n              node_inputs=[\n                resources_pb2.NodeInput(node_id=NODE_ID_1)\n                ]\n            ),\n          ]\n        )\n      ]\n    ),\n    metadata=metadata\n)               \n\nif post_workflows_response.status.code != status_code_pb2.SUCCESS:\n    print(post_workflows_response.status)\n    raise Exception(\"Post workflows failed, status: \" + post_workflows_response.status.description) \n\n",c="#############################################################################\n# In this section, we set the user authentication, app ID, workflow ID, and  \n# image URL. Change these strings to run your own example.\n##############################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to make your own predictions\nWORKFLOW_ID = 'my-custom-workflow'\nIMAGE_URL = 'https://samples.clarifai.com/featured-models/ocr-woman-holding-sold-sign.jpg'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID) # The userDataObject is required when using a PAT\n\npost_workflow_results_response = stub.PostWorkflowResults(\n    service_pb2.PostWorkflowResultsRequest(\n        user_app_id=userDataObject,  \n        workflow_id=WORKFLOW_ID,\n        inputs=[\n            resources_pb2.Input(\n                data=resources_pb2.Data(\n                    image=resources_pb2.Image(\n                        url=IMAGE_URL\n                    )\n                )\n            )\n        ]\n    ),\n    metadata=metadata\n)\nif post_workflow_results_response.status.code != status_code_pb2.SUCCESS:\n    print(post_workflow_results_response.status)\n    raise Exception(\"Post workflow results failed, status: \" + post_workflow_results_response.status.description)\n\n# We'll get one WorkflowResult for each input we used above. Because of one input, we have here one WorkflowResult\nresults = post_workflow_results_response.results[0]\n\n# Each model we have in the workflow will produce its output\nfor output in results.outputs:\n    model = output.model    \n    print(\"Output for the model: `%s`\" % model.id)\n    i = 0\n    while(i < len(output.data.regions)):\n        print(output.data.regions[i].data.text.raw)\n        i += 1        \n",u="###################################################################\n# In this section, we set the user authentication and app ID.  \n# Change these strings to run your own example.\n###################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID) # The userDataObject is required when using a PAT\n\nlist_workflows_response = stub.ListWorkflows(\n    service_pb2.ListWorkflowsRequest(\n        user_app_id=userDataObject  \n    ),\n    metadata=metadata\n)\n\nif list_workflows_response.status.code != status_code_pb2.SUCCESS:\n    print(list_workflows_response.status)\n    raise Exception(\"List workflows failed, status: \" + list_workflows_response.status.description)\n\nfor workflow in list_workflows_response.workflows:\n    print(f\"The workflow {workflow.id} consists of these models:\")\n    for workflow_node in workflow.nodes:\n        model = workflow_node.model\n        print(model.id)\n    print()",d="############################################################################\n# In this section, we set the user authentication, app ID, and workflow ID. \n# Change these strings to run your own example.\n#############################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change this to your own workflow ID \nWORKFLOW_ID = 'my-custom-workflow'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID) # The userDataObject is required when using a PAT\n\nget_workflow_response = stub.GetWorkflow(\n    service_pb2.GetWorkflowRequest(\n        user_app_id=userDataObject,  \n        workflow_id=WORKFLOW_ID\n    ),\n    metadata=metadata\n)\n\nif get_workflow_response.status.code != status_code_pb2.SUCCESS:\n    print(get_workflow_response.status)\n    raise Exception(\"Get workflow failed, status: \" + get_workflow_response.status.description)\n\nworkflow = get_workflow_response.workflow\nprint(f\"The workflow consists of these models:\")\nfor workflow_node in workflow.nodes:\n    model = workflow_node.model\n    print(model.id)",p="###################################################################################\n# In this section, we set the user authentication, app ID, and the details of the \n# workflow we want to update. Change these strings to run your own example.\n###################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to update your own workflow \nWORKFLOW_ID = 'my-custom-workflow'\nNODE_ID_1 = 'audio-to-text'\nMODEL_ID_1 = 'asr-wav2vec2-base-960h-english'\nMODEL_VERSION_ID_1 = 'f4deae70a473492a8e2f9b7bb1dbee85'\n\nNODE_ID_2 = 'text-summarization'\nMODEL_ID_2 = 'text-summarization-english-distilbart-cnn-12-6'\nMODEL_VERSION_ID_2 = '8279cec2221a4b1d9db774470940aebd'\n\nNODE_ID_3 = 'english-to-french'\nMODEL_ID_3 = 'translation-english-to-french-text'\nMODEL_VERSION_ID_3 = 'c65a4a51c2b646fca5f0e4bf1ff200d7'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID) # The userDataObject is required when using a PAT\n\npatch_workflows_response = stub.PatchWorkflows(\n    service_pb2.PatchWorkflowsRequest(\n      user_app_id=userDataObject,  \n      action=\"overwrite\",\n      workflows=[\n        resources_pb2.Workflow(\n          id=WORKFLOW_ID,\n          nodes=[\n            resources_pb2.WorkflowNode(\n              id=NODE_ID_1,\n              model=resources_pb2.Model(\n                id=MODEL_ID_1,\n                model_version=resources_pb2.ModelVersion(\n                  id=MODEL_VERSION_ID_1\n                )\n              )\n            ),\n            resources_pb2.WorkflowNode(\n              id=NODE_ID_2,\n              model=resources_pb2.Model(              \n                id=MODEL_ID_2,\n                model_version=resources_pb2.ModelVersion(\n                  id=MODEL_VERSION_ID_2\n                )\n              ),\n              node_inputs=[\n                  resources_pb2.NodeInput(node_id=NODE_ID_1) \n                  ]\n            ),\n            resources_pb2.WorkflowNode(\n              id=NODE_ID_3,\n              model=resources_pb2.Model(\n                id=MODEL_ID_3,\n                model_version=resources_pb2.ModelVersion(\n                  id=MODEL_VERSION_ID_3\n                )\n              ),\n              node_inputs=[\n                  resources_pb2.NodeInput(node_id=NODE_ID_2) \n                  ]\n            ),\n          ]\n        )\n      ]\n    ),\n    metadata=metadata\n)\n\nif patch_workflows_response.status.code != status_code_pb2.SUCCESS:\n    print(patch_workflows_response.status)\n    raise Exception(\"Patch workflows failed, status: \" + patch_workflows_response.status.description)",_="###################################################################################\n# In this section, we set the user authentication, app ID, and the ID of the \n# workflow we want to delete. Change these strings to run your own example.\n###################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change this to delete your own workflow \nWORKFLOW_ID = 'my-custom-workflow'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID) # The userDataObject is required when using a PAT\n\ndelete_workflow_response = stub.DeleteWorkflow(\n    service_pb2.DeleteWorkflowRequest(\n      user_app_id=userDataObject,  \n      workflow_id=WORKFLOW_ID\n    ),\n    metadata=metadata\n)\n\nif delete_workflow_response.status.code != status_code_pb2.SUCCESS:\n    print(delete_workflow_response.status)\n    raise Exception(\"Delete workflow failed, status: \" + delete_workflow_response.status.description)\n",h="###################################################################\n# In this section, we set the user authentication and app ID.\n# Change these strings to run your own example.\n###################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID) # The userDataObject is required when using a PAT\n\ndelete_workflows_response = stub.DeleteWorkflows(\n    service_pb2.DeleteWorkflowsRequest(\n      user_app_id=userDataObject,  \n      delete_all=True\n      # ids = ['workflow_id_1', 'workflow_id_2'] # Specify a list of workflow IDs to be deleted\n    \n    ),\n    metadata=metadata\n)\n\nif delete_workflows_response.status.code != status_code_pb2.SUCCESS:\n    print(delete_workflows_response.status)\n    raise Exception(\"Delete workflows failed, status: \" + delete_workflows_response.status.description)\n",f='\x3c!--index.html file--\x3e\n\n<script>\n    //////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the details of the new\n    // custom workflow we want to create. Change these strings to run your own example.\n    /////////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = \'YOUR_USER_ID_HERE\';\n    // Your PAT (Personal Access Token) can be found in the Account\'s Security section\n    const PAT = \'YOUR_PAT_HERE\';\n    const APP_ID = \'YOUR_APP_ID_HERE\';\n    // Change these to create your own custom workflow\n    const WORKFLOW_ID = \'my-custom-workflow\';\n    const NODE_ID_1 = \'optical-character-recognizer\';\n    const MODEL_ID_1 = \'ocr-scene-english-paddleocr\';\n    const MODEL_VERSION_ID_1 = \'40dbb2c9cde44a27af226782e7157006\';\n\n    const NODE_ID_2 = \'text-to-text\';\n    const MODEL_ID_2 = \'text-translation-english-spanish\';\n    const MODEL_VERSION_ID_2 = \'643f30558de34013aff72b0e21f244f5\';\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////   \n\n    const raw = JSON.stringify({\n        "user_app_id": {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        "workflows": [{\n            "id": WORKFLOW_ID,\n            "nodes": [\n                {\n                    "id": NODE_ID_1,\n                    "model": {\n                        "id": MODEL_ID_1,\n                        "model_version": {\n                            "id": MODEL_VERSION_ID_1\n                        }\n                    }\n                },\n                {\n                    "id": NODE_ID_2,\n                    "model": {\n                        "id": MODEL_ID_2,\n                        "model_version": {\n                            "id": MODEL_VERSION_ID_2\n                        }\n                    },\n                        "node_inputs": [\n                            {\n                                "node_id": NODE_ID_1\n                            }\n                        ]\n                }\n            ]\n        }]\n    });\n\n    const requestOptions = {\n        method: \'POST\',\n        headers: {\n            \'Accept\': \'application/json\',\n            \'Authorization\': \'Key \' + PAT\n        },\n        body: raw\n    };\n\n    fetch(`https://api.clarifai.com/v2/workflows`, requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log(\'error\', error));\n\n<\/script>',w='\x3c!--index.html file--\x3e\n\n<script>\n  ///////////////////////////////////////////////////////////////////////////////////\n  // In this section, we set the user authentication, app ID, workflow ID, and\n  // image URL. Change these strings to run your own example.\n  ///////////////////////////////////////////////////////////////////////////////////\n\n  const USER_ID = "YOUR_USER_ID_HERE";\n  // Your PAT (Personal Access Token) can be found in the Account\'s Security section\n  const PAT = "YOUR_PAT_HERE";\n  const APP_ID = "YOUR_APP_ID_HERE";\n  // Change these to make your own predictions\n  const WORKFLOW_ID = "my-custom-workflow";\n  const IMAGE_URL = "https://samples.clarifai.com/featured-models/ocr-woman-holding-sold-sign.jpg";\n\n  ///////////////////////////////////////////////////////////////////////////////////\n  // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n  /////////////////////////////////////////////////////////////////////////////////// \n\n  const raw = JSON.stringify({\n    "user_app_id": {\n      "user_id": USER_ID,\n      "app_id": APP_ID\n    },\n    "inputs": [\n      {\n        "data": {\n          "image": {\n            "url": IMAGE_URL\n          }\n        }\n      }\n    ]\n  });\n\n  const requestOptions = {\n    method: \'POST\',\n    headers: {\n      \'Accept\': \'application/json\',\n      \'Authorization\': \'Key \' + PAT\n    },\n    body: raw\n  };\n\n  fetch(`https://api.clarifai.com/v2/workflows/${WORKFLOW_ID}/results`, requestOptions)\n    .then(response => response.text())\n    .then(result => console.log(result))\n    .catch(error => console.log(\'error\', error));\n<\/script>',E='\x3c!--index.html file--\x3e\n\n<script>\n  ///////////////////////////////////////////////////////////////////////\n  // In this section, we set the user authentication and app ID.\n  // Change these strings to run your own example.\n  ///////////////////////////////////////////////////////////////////////\n\n  const USER_ID = "YOUR_USER_ID_HERE";\n  // Your PAT (Personal Access Token) can be found in the Account\'s Security section\n  const PAT = "YOUR_PAT_HERE";\n  const APP_ID = "YOUR_APP_ID_HERE";\n\n  ///////////////////////////////////////////////////////////////////////////////////\n  // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n  ///////////////////////////////////////////////////////////////////////////////////\n\n  const requestOptions = {\n    method: "GET",\n    headers: {\n      "Accept": "application/json",\n      "Authorization": "Key " + PAT,\n    },\n  };\n\n  fetch(\n    `https://api.clarifai.com/v2/users/${USER_ID}/apps/${APP_ID}/workflows`,\n    requestOptions\n  )\n    .then((response) => response.text())\n    .then((result) => console.log(result))\n    .catch((error) => console.log("error", error));\n<\/script>\n',I='\x3c!--index.html file--\x3e\n\n<script>\n  ///////////////////////////////////////////////////////////////////////////////\n  // In this section, we set the user authentication, app ID, and workflow ID.\n  // Change these strings to run your own example.\n  //////////////////////////////////////////////////////////////////////////////\n\n  const USER_ID = "YOUR_USER_ID_HERE";\n  // Your PAT (Personal Access Token) can be found in the Account\'s Security section\n  const PAT = "YOUR_PAT_HERE";\n  const APP_ID = "YOUR_APP_ID_HERE";\n  // Change this to your own workflow ID\n  const WORKFLOW_ID = "my-custom-workflow";\n\n  ///////////////////////////////////////////////////////////////////////////////////\n  // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n  ///////////////////////////////////////////////////////////////////////////////////\n\n  const requestOptions = {\n    method: "GET",\n    headers: {\n      "Accept": "application/json",\n      "Authorization": "Key " + PAT,\n    },\n  };\n\n  fetch(\n    `https://api.clarifai.com/v2/users/${USER_ID}/apps/${APP_ID}/workflows/${WORKFLOW_ID}`,\n    requestOptions\n  )\n    .then((response) => response.text())\n    .then((result) => console.log(result))\n    .catch((error) => console.log("error", error));\n<\/script>',D='\x3c!--index.html file--\x3e\n\n<script>\n  ///////////////////////////////////////////////////////////////////////////////////////\n  // In this section, we set the user authentication, app ID, and the details of the\n  // workflow we want to update. Change these strings to run your own example.\n  ///////////////////////////////////////////////////////////////////////////////////////\n\n  const USER_ID = \'YOUR_USER_ID_HERE\';\n  // Your PAT (Personal Access Token) can be found in the Account\'s Security section\n  const PAT = \'YOUR_PAT_HERE\';\n  const APP_ID = \'YOUR_APP_ID_HERE\';\n  // Change these to update your own workflow\n  const WORKFLOW_ID = "my-custom-workflow";\n  const NODE_ID_1 = "audio-to-text";\n  const MODEL_ID_1 = "asr-wav2vec2-base-960h-english";\n  const MODEL_VERSION_ID_1 = "f4deae70a473492a8e2f9b7bb1dbee85";\n\n  const NODE_ID_2 = "text-summarization";\n  const MODEL_ID_2 = "text-summarization-english-distilbart-cnn-12-6";\n  const MODEL_VERSION_ID_2 = "8279cec2221a4b1d9db774470940aebd";\n\n  const NODE_ID_3 = "english-to-french";\n  const MODEL_ID_3 = "translation-english-to-french-text";\n  const MODEL_VERSION_ID_3 = "c65a4a51c2b646fca5f0e4bf1ff200d7";\n\n  ///////////////////////////////////////////////////////////////////////////////////\n  // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n  ///////////////////////////////////////////////////////////////////////////////////\n\n  const raw = JSON.stringify({\n    "user_app_id": {\n      "user_id": USER_ID,\n      "app_id": APP_ID\n    },\n    "action": "overwrite",\n    "workflows": [\n      {\n        "id": WORKFLOW_ID,\n        "nodes": [\n          {\n            "id": NODE_ID_1,\n            "model": {\n              "id": MODEL_ID_1,\n              "model_version": {\n                "id": MODEL_VERSION_ID_1\n              }\n            }\n          },\n          {\n            "id": NODE_ID_2,\n            "model": {\n              "id": MODEL_ID_2,\n              "model_version": {\n                "id": MODEL_VERSION_ID_2\n              }\n            },\n            "node_inputs": [\n                {\n                  "node_id": NODE_ID_1\n                }\n              ]\n          },\n          {\n            "id": NODE_ID_3,\n            "model": {\n              "id": MODEL_ID_3,\n              "model_version": {\n                "id": MODEL_VERSION_ID_3\n              }\n            },\n            "node_inputs": [\n                {\n                  "node_id": NODE_ID_2\n                }\n              ]\n          }\n        ]\n      }\n    ]\n  });\n\n  const requestOptions = {\n    method: "PATCH",\n    headers: {\n      "Accept": \'application/json\',\n      "Authorization": \'Key \' + PAT\n    },\n    body: raw\n  };\n\n  fetch(`https://api.clarifai.com/v2/workflows`, requestOptions)\n    .then(response => response.text())\n    .then(result => console.log(result))\n    .catch(error => console.log(\'error\', error));\n\n<\/script>',g='\x3c!--index.html file--\x3e\n\n<script>\n  ///////////////////////////////////////////////////////////////////////////////////\n  // In this section, we set the user authentication, app ID, and the ID of the\n  // workflow we want to delete. Change these strings to run your own example.\n  ///////////////////////////////////////////////////////////////////////////////////\n\n  // Your PAT (Personal Access Token) can be found in the Account\'s Security section\n  const PAT = "YOUR_PAT_HERE";\n  const APP_ID = "YOUR_APP_ID_HERE";\n  // Change this to delete your own workflow\n  const WORKFLOW_ID = "my-custom-workflow";\n\n  ///////////////////////////////////////////////////////////////////////////////////\n  // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n  ///////////////////////////////////////////////////////////////////////////////////\n\n  const requestOptions = {\n    method: "DELETE",\n    headers: {\n      "Accept": "application/json",\n      "Authorization": "Key " + PAT,\n    },\n  };\n\n  fetch(\n    `https://api.clarifai.com/v2/users/me/apps/${APP_ID}/workflows/${WORKFLOW_ID}`,\n    requestOptions\n  )\n    .then((response) => response.text())\n    .then((result) => console.log(result))\n    .catch((error) => console.log("error", error));\n<\/script>',O='\x3c!--index.html file--\x3e\n\n<script>\n  /////////////////////////////////////////////////////////////////////\n  // In this section, we set the user authentication and app ID.\n  // Change these strings to run your own example.\n  /////////////////////////////////////////////////////////////////////\n\n  const USER_ID = "YOUR_USER_ID_HERE";\n  // Your PAT (Personal Access Token) can be found in the Account\'s Security section\n  const PAT = "YOUR_PAT_HERE";\n  const APP_ID = "YOUR_APP_ID_HERE";\n\n  ///////////////////////////////////////////////////////////////////////////////////\n  // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n  ///////////////////////////////////////////////////////////////////////////////////\n\n  const raw = JSON.stringify({\n    "user_app_id": {\n      "user_id": USER_ID,\n      "app_id": APP_ID,\n    },\n    "delete_all": true,\n    //"ids": [\'workflow_id_1\', \'workflow_id_2\'] // Specify a list of workflow IDs to be deleted\n  });\n\n  const requestOptions = {\n    method: "DELETE",\n    headers: {\n      "Accept": "application/json",\n      "Authorization": "Key " + PAT,\n    },\n    body: raw,\n  };\n\n  fetch(`https://api.clarifai.com/v2/workflows`, requestOptions)\n    .then((response) => response.text())\n    .then((result) => console.log(result))\n    .catch((error) => console.log("error", error));\n<\/script>',m="//index.js file\n\n//////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the details of the new\n// custom workflow we want to create. Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = 'YOUR_USER_ID_HERE';\n// Your PAT (Personal Access Token) can be found in the Account's Security section\nconst PAT = 'YOUR_PAT_HERE';\nconst APP_ID = 'YOUR_APP_ID_HERE';\n// Change these to create your own custom workflow\nconst WORKFLOW_ID = 'my-custom-workflow';\nconst NODE_ID_1 = 'optical-character-recognizer';\nconst MODEL_ID_1 = 'ocr-scene-english-paddleocr';\nconst MODEL_VERSION_ID_1 = '40dbb2c9cde44a27af226782e7157006';\n\nconst NODE_ID_2 = 'text-to-text';\nconst MODEL_ID_2 = 'text-translation-english-spanish';\nconst MODEL_VERSION_ID_2 = '643f30558de34013aff72b0e21f244f5';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require(\"clarifai-nodejs-grpc\");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set(\"authorization\", \"Key \" + PAT);\n\nstub.PostWorkflows(\n    {\n        user_app_id: {\n            \"user_id\": USER_ID,\n            \"app_id\": APP_ID\n        },\n        workflows: [\n            {\n                id: WORKFLOW_ID,\n                nodes: [\n                    {\n                        id: NODE_ID_1,\n                        model: {\n                            id: MODEL_ID_1,\n                            model_version: {\n                                id: MODEL_VERSION_ID_1\n                            }\n                        }\n                    },\n                    {\n                        id: NODE_ID_2,\n                        model: {\n                            id: MODEL_ID_2,\n                            model_version: {\n                                id: MODEL_VERSION_ID_2\n                            }\n                        },\n                        node_inputs: [\n                            {\n                                node_id: NODE_ID_1 \n                            }\n                        ]\n                    }\n                ]\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error(\"Post workflows failed, status: \" + response.status.description);\n        }\n    }\n);",A='//index.js file\n\n///////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, workflow ID, and\n// image URL. Change these strings to run your own example.\n///////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = "YOUR_PAT_HERE";\nconst APP_ID = "YOUR_APP_ID_HERE";\n// Change these to make your own predictions\nconst WORKFLOW_ID = "my-custom-workflow";\nconst IMAGE_URL = "https://samples.clarifai.com/featured-models/ocr-woman-holding-sold-sign.jpg";\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PostWorkflowResults(\n  {\n    user_app_id: {\n      "user_id": USER_ID,\n      "app_id": APP_ID,\n    },\n    workflow_id: WORKFLOW_ID,\n    inputs: [{ data: { image: { url: IMAGE_URL } } }],\n  },\n  metadata,\n  (err, response) => {\n    if (err) {\n      throw new Error(err);\n    }\n\n    if (response.status.code !== 10000) {\n      throw new Error(\n        "Post workflow results failed, status: " + response.status.description\n      );\n    }\n\n    // We\'ll get one WorkflowResult for each input we used above. Because of one input, we have here \n    // one WorkflowResult\n    const results = response.results[0];\n\n    // Each model we have in the workflow will produce its output.\n    for (const output of results.outputs) {\n      const model = output.model;\n      console.log("Output for the model: `" + model.id + "`");\n      let i = 0;\n      while(i < output.data.regions.length){\n        console.log(output.data.regions[i].data.text.raw);\n        i += 1; \n      }    \n    }\n  }\n);\n',R='//index.js file\n\n///////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication and app ID.\n// Change these strings to run your own example.\n///////////////////////////////////////////////////////////////////////\n\nconst USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = "YOUR_PAT_HERE";\nconst APP_ID = "YOUR_APP_ID_HERE";\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.ListWorkflows(\n  {\n    user_app_id: {\n      "user_id": USER_ID,\n      "app_id": APP_ID\n    },\n  },\n  metadata,\n  (err, response) => {\n    if (err) {\n      throw new Error(err);\n    }\n\n    if (response.status.code !== 10000) {\n      throw new Error(\n        "List workflows failed, status: " + response.status.description\n      );\n    }\n\n    for (const workflow of response.workflows) {\n      console.log("The workflow " + workflow.id + " consists of these models:");\n      for (const workflowNode of workflow.nodes) {\n        const model = workflowNode.model;\n        console.log(model.id);\n      }\n      console.log();\n    }\n  }\n);\n',S='//index.js file\n\n///////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and workflow ID.\n// Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = "YOUR_PAT_HERE";\nconst APP_ID = "YOUR_APP_ID_HERE";\n// Change this to your own workflow ID\nconst WORKFLOW_ID = "my-custom-workflow";\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.GetWorkflow(\n  {\n    user_app_id: {\n      "user_id": USER_ID,\n      "app_id": APP_ID,\n    },\n    workflow_id: WORKFLOW_ID,\n  },\n  metadata,\n  (err, response) => {\n    if (err) {\n      throw new Error(err);\n    }\n\n    if (response.status.code !== 10000) {\n      throw new Error(\n        "Get workflow failed, status: " + response.status.description\n      );\n    }\n\n    const workflow = response.workflow;\n\n    console.log("The workflow consists of these models:");\n    for (const workflowNode of workflow.nodes) {\n      const model = workflowNode.model;\n      console.log(model.id);\n    }\n  }\n);\n',P='//index.js file\n\n///////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the details of the\n// workflow we want to update. Change these strings to run your own example.\n///////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = "YOUR_PAT_HERE";\nconst APP_ID = "YOUR_APP_ID_HERE";\n// Change these to update your own workflow\nconst WORKFLOW_ID = "my-custom-workflow";\nconst NODE_ID_1 = "audio-to-text";\nconst MODEL_ID_1 = "asr-wav2vec2-base-960h-english";\nconst MODEL_VERSION_ID_1 = "f4deae70a473492a8e2f9b7bb1dbee85";\n\nconst NODE_ID_2 = "text-summarization";\nconst MODEL_ID_2 = "text-summarization-english-distilbart-cnn-12-6";\nconst MODEL_VERSION_ID_2 = "8279cec2221a4b1d9db774470940aebd";\n\nconst NODE_ID_3 = "english-to-french";\nconst MODEL_ID_3 = "translation-english-to-french-text";\nconst MODEL_VERSION_ID_3 = "c65a4a51c2b646fca5f0e4bf1ff200d7";\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PatchWorkflows(\n  {\n    user_app_id: {\n      "user_id": USER_ID,\n      "app_id": APP_ID,\n    },\n    action: "overwrite",\n    workflows: [\n      {\n        id: WORKFLOW_ID,\n        nodes: [\n          {\n            id: NODE_ID_1,\n            model: {\n              id: MODEL_ID_1,\n              model_version: {\n                id: MODEL_VERSION_ID_1,\n              }\n            }\n          },\n          {\n            id: NODE_ID_2,\n            model: {\n              id: MODEL_ID_2,\n              model_version: {\n                id: MODEL_VERSION_ID_2\n              }\n            },\n            node_inputs: [\n                {\n                    node_id: NODE_ID_1 \n                }\n            ]\n          },\n          {\n            id: NODE_ID_3,\n            model: {\n              id: MODEL_ID_3,\n              model_version: {\n                id: MODEL_VERSION_ID_3\n              }\n            },\n            node_inputs: [\n                {\n                    node_id: NODE_ID_2\n                }\n            ]\n          }\n        ]\n      }\n    ]\n  },\n  metadata,\n  (err, response) => {\n    if (err) {\n      throw new Error(err);\n    }\n\n    if (response.status.code !== 10000) {\n      throw new Error(\n        "Patch workflows failed, status: " + response.status.description\n      );\n    }\n  }\n);\n',b='//index.js file\n\n//////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the ID of the\n// workflow we want to delete. Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = "YOUR_PAT_HERE";\nconst APP_ID = "YOUR_APP_ID_HERE";\n// Change this to delete your own workflow\nconst WORKFLOW_ID = "my-custom-workflow";\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.DeleteWorkflow(\n  {\n    user_app_id: {\n      "user_id": USER_ID,\n      "app_id": APP_ID,\n    },\n    workflow_id: WORKFLOW_ID,\n  },\n  metadata,\n  (err, response) => {\n    if (err) {\n      throw new Error(err);\n    }\n\n    if (response.status.code !== 10000) {\n      throw new Error(\n        "Delete workflow failed, status: " + response.status.description\n      );\n    }\n  }\n);\n',k='//index.js file\n\n/////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication and app ID.\n// Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////\n\nconst USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = "YOUR_PAT_HERE";\nconst APP_ID = "YOUR_APP_ID_HERE";\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.DeleteWorkflows(\n  {\n    user_app_id: {\n      "user_id": USER_ID,\n      "app_id": APP_ID,\n    },\n    delete_all: true\n    //ids: [\'workflow_id_1\', \'workflow_id_2\'] // Specify a list of workflow IDs to be deleted\n  },\n  metadata,\n  (err, response) => {\n    if (err) {\n      throw new Error(err);\n    }\n\n    if (response.status.code !== 10000) {\n      throw new Error(\n        "Delete workflows failed, status: " + response.status.description\n      );\n    }\n  }\n);\n',N='package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    //////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the details of the new\n    // custom workflow we want to create. Change these strings to run your own example.\n    /////////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to create your own custom workflow\n    static final String WORKFLOW_ID = "my-custom-workflow";\n    static final String NODE_ID_1 = "optical-character-recognizer";\n    static final String MODEL_ID_1 = "ocr-scene-english-paddleocr";\n    static final String MODEL_VERSION_ID_1 = "40dbb2c9cde44a27af226782e7157006";\n\n    static final String NODE_ID_2 = "text-to-text";\n    static final String MODEL_ID_2 = "text-translation-english-spanish";\n    static final String MODEL_VERSION_ID_2 = "643f30558de34013aff72b0e21f244f5";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiWorkflowResponse postWorkflowsResponse = stub.postWorkflows(\n            PostWorkflowsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .addWorkflows(\n                Workflow.newBuilder()\n                .setId(WORKFLOW_ID)\n                .addNodes(\n                    WorkflowNode.newBuilder()\n                    .setId(NODE_ID_1)\n                    .setModel(\n                        Model.newBuilder()\n                        .setId(MODEL_ID_1)\n                        .setModelVersion(ModelVersion.newBuilder().setId(MODEL_VERSION_ID_1))\n                    )\n                )\n                .addNodes(\n                    WorkflowNode.newBuilder()\n                    .setId(NODE_ID_2)\n                    .setModel(\n                        Model.newBuilder()\n                        .setId(MODEL_ID_2)\n                        .setModelVersion(ModelVersion.newBuilder().setId(MODEL_VERSION_ID_2))\n                    )\n                    .addNodeInputs(NodeInput.newBuilder().setNodeId(NODE_ID_1))\n                )\n            ).build()\n        );\n\n        if (postWorkflowsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post workflows failed, status: " + postWorkflowsResponse.getStatus());\n        }\n\n    }\n\n}',T='package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, workflow ID, and\n    // image URL. Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to make your own predictions\n    static final String WORKFLOW_ID = "my-custom-workflow";\n    static final String IMAGE_URL = "https://samples.clarifai.com/featured-models/ocr-woman-holding-sold-sign.jpg";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        PostWorkflowResultsResponse postWorkflowResultsResponse = stub.postWorkflowResults(\n            PostWorkflowResultsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .setWorkflowId(WORKFLOW_ID)\n            .addInputs(\n                Input.newBuilder().setData(\n                    Data.newBuilder().setImage(\n                        Image.newBuilder().setUrl(IMAGE_URL)\n                    )\n                )\n            )\n            .build()\n        );\n\n        if (postWorkflowResultsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post workflow results failed, status: " + postWorkflowResultsResponse.getStatus());\n        }\n\n        // We\'ll get one WorkflowResult for each input we used above. Because of one input, we have here\n        // one WorkflowResult\n        WorkflowResult results = postWorkflowResultsResponse.getResults(0);\n\n        // Each model we have in the workflow will produce its output\n        for (Output output: results.getOutputsList()) {\n            Model model = output.getModel();\n            System.out.println("Output for the model: `" + model.getId() + "`");            \n            int i = 0;\n            while(i < output.getData().getRegionsCount()) {\n            \tString modelOutput = output.getData().getRegionsList().get(i).getData().getText().getRaw();\n            \tSystem.out.println(modelOutput);            \n                i += 1;            \t\n            }\n        }\n\n    }\n\n}',C='package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    ///////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication and app ID.\n    // Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiWorkflowResponse listWorkflowsResponse = stub.listWorkflows(\n            ListWorkflowsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .build());\n\n        if (listWorkflowsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("List workflows failed, status: " + listWorkflowsResponse.getStatus());\n        }\n\n        for (Workflow workflow: listWorkflowsResponse.getWorkflowsList()) {\n            System.out.println("The workflow " + workflow.getId() + " consists of these models:");\n            for (WorkflowNode workflowNode: workflow.getNodesList()) {\n                Model model = workflowNode.getModel();\n                System.out.println(model.getId());\n            }\n            System.out.println();\n        }\n\n    }\n\n}',U='package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    ///////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and workflow ID.\n    // Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change this to your own workflow ID\n    static final String WORKFLOW_ID = "food-and-general";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        SingleWorkflowResponse getWorkflowResponse = stub.getWorkflow(\n            GetWorkflowRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .setWorkflowId(WORKFLOW_ID)\n            .build()\n        );\n\n        if (getWorkflowResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Get workflow failed, status: " + getWorkflowResponse.getStatus());\n        }\n\n        Workflow workflow = getWorkflowResponse.getWorkflow();\n\n        System.out.println("The workflow consists of these models:");\n        for (WorkflowNode workflowNode: workflow.getNodesList()) {\n            Model model = workflowNode.getModel();\n            System.out.println(model.getId());\n        }\n\n    }\n\n}',x='package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    ///////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the details of the\n    // workflow we want to update. Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to update your own workflow\n    static final String WORKFLOW_ID = "my-custom-workflow";\n    static final String NODE_ID_1 = "audio-to-text";\n    static final String MODEL_ID_1 = "asr-wav2vec2-base-960h-english";\n    static final String MODEL_VERSION_ID_1 = "f4deae70a473492a8e2f9b7bb1dbee85";\n\n    static final String NODE_ID_2 = "text-summarization";\n    static final String MODEL_ID_2 = "text-summarization-english-distilbart-cnn-12-6";\n    static final String MODEL_VERSION_ID_2 = "8279cec2221a4b1d9db774470940aebd";\n\n    static final String NODE_ID_3 = "english-to-french";\n    static final String MODEL_ID_3 = "translation-english-to-french-text";\n    static final String MODEL_VERSION_ID_3 = "c65a4a51c2b646fca5f0e4bf1ff200d7";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiWorkflowResponse patchWorkflowsResponse = stub.patchWorkflows(\n            PatchWorkflowsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .setAction("overwrite")\n            .addWorkflows(\n                Workflow.newBuilder()\n                .setId(WORKFLOW_ID)\n                .addNodes(\n                    WorkflowNode.newBuilder()\n                    .setId(NODE_ID_1)\n                    .setModel(\n                        Model.newBuilder()\n                        .setId(MODEL_ID_1)\n                        .setModelVersion(ModelVersion.newBuilder().setId(MODEL_VERSION_ID_1))\n                    )\n                )\n                .addNodes(\n                    WorkflowNode.newBuilder()\n                    .setId(NODE_ID_2)\n                    .setModel(\n                        Model.newBuilder()\n                        .setId(MODEL_ID_2)\n                        .setModelVersion(ModelVersion.newBuilder().setId(MODEL_VERSION_ID_2))\n                    )\n                    .addNodeInputs(NodeInput.newBuilder().setNodeId(NODE_ID_1))\n                )\n                .addNodes(\n                    WorkflowNode.newBuilder()\n                    .setId(NODE_ID_3)\n                    .setModel(\n                        Model.newBuilder()\n                        .setId(MODEL_ID_3)\n                        .setModelVersion(ModelVersion.newBuilder().setId(MODEL_VERSION_ID_3))\n                    )\n                    .addNodeInputs(NodeInput.newBuilder().setNodeId(NODE_ID_2))\n                )\n            ).build()\n        );\n\n        if (patchWorkflowsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Patch workflows failed, status: " + patchWorkflowsResponse.getStatus());\n        }\n\n    }\n\n}',L='package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.BaseResponse;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    //////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the ID of the\n    // workflow we want to delete. Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change this to delete your own workflow\n    static final String WORKFLOW_ID = "my-custom-workflow";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        BaseResponse deleteWorkflowResponse = stub.deleteWorkflow(\n            DeleteWorkflowRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .setWorkflowId(WORKFLOW_ID)\n            .build()\n        );\n\n        if (deleteWorkflowResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Delete workflow failed, status: " + deleteWorkflowResponse.getStatus());\n        }\n\n    }\n\n}',W='package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.BaseResponse;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    //////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication and app ID.\n    // Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        BaseResponse deleteWorkflowsResponse = stub.deleteWorkflows(\n            DeleteWorkflowsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .setDeleteAll(true)\n            .build()\n        );\n\n        if (deleteWorkflowsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Delete workflows failed, status: " + deleteWorkflowsResponse.getStatus());\n        }\n\n    }\n\n}',j='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n//////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the details of the new\n// custom workflow we want to create. Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change these to create your own custom workflow\n$WORKFLOW_ID = "my-custom-workflow";\n$NODE_ID_1 = "optical-character-recognizer";\n$MODEL_ID_1 = "ocr-scene-english-paddleocr";\n$MODEL_VERSION_ID_1 = "40dbb2c9cde44a27af226782e7157006";\n\n$NODE_ID_2 = "text-to-text";\n$MODEL_ID_2 = "text-translation-english-spanish";\n$MODEL_VERSION_ID_2 = "643f30558de34013aff72b0e21f244f5";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\PostWorkflowsRequest;\nuse Clarifai\\Api\\Workflow;\nuse Clarifai\\Api\\WorkflowNode;\nuse Clarifai\\Api\\NodeInput;\nuse Clarifai\\Api\\Model;\nuse Clarifai\\Api\\ModelVersion;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]]; \n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PostWorkflows(\n        // The request object carries the request along with the request status and other metadata related to the request itself\n        new PostWorkflowsRequest([\n            "user_app_id" => $userDataObject,\n            "workflows" => [\n                new Workflow([\n                    "id"=> $WORKFLOW_ID,\n                    "nodes" => [\n                        new WorkflowNode([\n                            "id" => $NODE_ID_1,\n                            "model" => new Model([\n                                "id" => $MODEL_ID_1,\n                                "model_version" => new ModelVersion([\n                                    "id" => $MODEL_VERSION_ID_1\n                                ])\n                            ])\n\n                        ]),\n                        new WorkflowNode([\n                            "id" => $NODE_ID_2,\n                            "model"=> new Model([\n                                "id" => $MODEL_ID_2,\n                                "model_version" => new ModelVersion([\n                                    "id" => $MODEL_VERSION_ID_2\n                                ])\n                            ]),\n                            "node_inputs" => [\n                                new NodeInput([\n                                    "node_id"=> $NODE_ID_1\n                                ])\n                            ]\n                        ])                       \n                    ]\n                ])\n            ]\n        ]),\n        $metadata\n    )->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\n?>\n',H="<?php\n\nrequire __DIR__ . '/vendor/autoload.php';\n\n/////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, workflow ID, and  \n// image URL. Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = 'YOUR_USER_ID_HERE';\n// Your PAT (Personal Access Token) can be found in the Account's Security section\n$PAT = 'YOUR_PAT_HERE';\n$APP_ID = 'YOUR_APP_ID_HERE';\n// Change these to make your own predictions\n$WORKFLOW_ID = 'my-custom-workflow';\n$IMAGE_URL = 'https://samples.clarifai.com/featured-models/ocr-woman-holding-sold-sign.jpg';\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\Data;\nuse Clarifai\\Api\\Image;\nuse Clarifai\\Api\\Input;\nuse Clarifai\\Api\\PostWorkflowResultsRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ['Authorization' => ['Key ' . $PAT ]];\n\n$userDataObject = new UserAppIDSet([\n    'user_id' => $USER_ID, \n    'app_id' => $APP_ID \n]);\n\n// Let's make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PostWorkflowResults(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new PostWorkflowResultsRequest([\n        'user_app_id' => $userDataObject,\n        'workflow_id' => $WORKFLOW_ID,          \n        'inputs' => [\n            new Input([ // The Input object wraps the Data object in order to meet the API specification                \n                'data' => new Data([ // The Data object is constructed around the Image object. It offers a container that has additional image independent\n                                    // metadata. In this particular use case, no other metadata is needed to be specified\n                    'image' => new Image([ // In the Clarifai platform, an image is defined by a special Image object\n                        'url' => $IMAGE_URL\n                    ])\n                ])\n            ])\n        ]\n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception(\"Error: {$status->details}\");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    throw new Exception(\"Failure response: \" . $response->getStatus()->getDescription() . \" \" .\n        $response->getStatus()->getDetails());\n}\n\n// We'll get one WorkflowResult for each input we used above. Because of one input, we have here one WorkflowResult\n$results = $response->getResults()[0];\n\n// Each model we have in the workflow will produce its output\nforeach ($results->getOutputs() as $output) {\n    $model = $output->getModel();\n    echo \"Output for the model: '\" . $model->getId() . \"'\" . \"`<br>\";\n    $i = 0;\n    while ($i < count($output->getData()->getRegions())) {\n        echo $output->getData()->getRegions()[$i]->getData()->getText()->getRaw() . \"`<br>\";\n        $i++;\n    }\n}\n\n?>",v='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n/////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication and app ID.\n// Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\ListWorkflowsRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID,\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client\n    ->ListWorkflows(\n        // The request object carries the request along with the request status and other metadata related to the request itself\n        new ListWorkflowsRequest([\n            "user_app_id" => $userDataObject,\n        ]),\n        $metadata\n    )\n    ->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure\n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    throw new Exception(\n        "Failure response: " .\n            $response->getStatus()->getDescription() .\n            " " .\n            $response->getStatus()->getDetails()\n    );\n}\n\n// Print details of each workflow\nforeach ($response->getWorkflows() as $workflow) {\n    echo "The workflow " . $workflow->getId() . " consists of these models:\\n";\n    foreach ($workflow->getNodes() as $workflowNode) {\n        $model = $workflowNode->getModel();\n        echo $model->getId();\n    }\n    echo "\\n";\n}\n\n?>',y='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n/////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and workflow ID.\n// Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change this to your own workflow ID\n$WORKFLOW_ID = "my-custom-workflow";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\GetWorkflowRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID,\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client\n    ->GetWorkflow(\n        // The request object carries the request along with the request status and other metadata related to the request itself\n        new GetWorkflowRequest([\n            "user_app_id" => $userDataObject,\n            "workflow_id" => $WORKFLOW_ID,\n        ]),\n        $metadata\n    )\n    ->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure\n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    throw new Exception(\n        "Failure response: " .\n            $response->getStatus()->getDescription() .\n            " " .\n            $response->getStatus()->getDetails()\n    );\n}\n\n$workflow = $response->getWorkflow();\necho "The workflow consists of these models:" . "\\n";\nforeach ($workflow->getNodes() as $workflowNode) {\n    $model = $workflowNode->getModel();\n    echo $model->getId() . "\\n";\n}\n\n?>',Y='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n//////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the details of the\n// workflow we want to update. Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change these to update your own workflow\n$WORKFLOW_ID = "my-custom-workflow";\n$NODE_ID_1 = "audio-to-text";\n$MODEL_ID_1 = "asr-wav2vec2-base-960h-english";\n$MODEL_VERSION_ID_1 = "f4deae70a473492a8e2f9b7bb1dbee85";\n\n$NODE_ID_2 = "text-summarization";\n$MODEL_ID_2 = "text-summarization-english-distilbart-cnn-12-6";\n$MODEL_VERSION_ID_2 = "8279cec2221a4b1d9db774470940aebd";\n\n$NODE_ID_3 = "english-to-french";\n$MODEL_ID_3 = "translation-english-to-french-text";\n$MODEL_VERSION_ID_3 = "c65a4a51c2b646fca5f0e4bf1ff200d7";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\PatchWorkflowsRequest;\nuse Clarifai\\Api\\Workflow;\nuse Clarifai\\Api\\WorkflowNode;\nuse Clarifai\\Api\\NodeInput;\nuse Clarifai\\Api\\Model;\nuse Clarifai\\Api\\ModelVersion;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID,\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client\n    ->PatchWorkflows(\n        // The request object carries the request along with the request status and other metadata related to the request itself\n        new PatchWorkflowsRequest([\n            "user_app_id" => $userDataObject,\n            "action" => "overwrite",\n            "workflows" => [\n                new Workflow([\n                    "id" => $WORKFLOW_ID,\n                    "nodes" => [\n                        new WorkflowNode([\n                            "id" => $NODE_ID_1,\n                            "model" => new Model([\n                                "id" => $MODEL_ID_1,\n                                "model_version" => new ModelVersion([\n                                    "id" => $MODEL_VERSION_ID_1,\n                                ]),\n                            ]),\n                        ]),\n                        new WorkflowNode([\n                            "id" => $NODE_ID_2,\n                            "model" => new Model([\n                                "id" => $MODEL_ID_2,\n                                "model_version" => new ModelVersion([\n                                    "id" => $MODEL_VERSION_ID_2,\n                                ]),\n                            ]),\n                            "node_inputs" => [\n                                new NodeInput([\n                                    "node_id" => $NODE_ID_1,\n                                ]),\n                            ],\n                        ]),\n                        new WorkflowNode([\n                            "id" => $NODE_ID_3,\n                            "model" => new Model([\n                                "id" => $MODEL_ID_3,\n                                "model_version" => new ModelVersion([\n                                    "id" => $MODEL_VERSION_ID_3,\n                                ]),\n                            ]),\n                            "node_inputs" => [\n                                new NodeInput([\n                                    "node_id" => $NODE_ID_2,\n                                ]),\n                            ],\n                        ]),\n                    ],\n                ]),\n            ],\n        ]),\n        $metadata\n    )\n    ->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure\n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception(\n        "Failure response: " . $response->getStatus()->getDescription()\n    );\n}\n\n?>\n',$='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n/////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the ID of the\n// workflow we want to delete. Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change this to delete your own workflow\n$WORKFLOW_ID = "my-custom-workflow";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\DeleteWorkflowRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID,\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client\n    ->DeleteWorkflow(\n        // The request object carries the request along with the request status and other metadata related to the request itself\n        new DeleteWorkflowRequest([\n            "user_app_id" => $userDataObject,\n            "workflow_id" => $WORKFLOW_ID,\n        ]),\n        $metadata\n    )\n    ->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure\n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    throw new Exception(\n        "Failure response: " .\n            $response->getStatus()->getDescription() .\n            " " .\n            $response->getStatus()->getDetails()\n    );\n}\n\n?>\n',M='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n/////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication and app ID.\n// Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\DeleteWorkflowsRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID,\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client\n    ->DeleteWorkflows(\n        // The request object carries the request along with the request status and other metadata related to the request itself\n        new DeleteWorkflowsRequest([\n            "user_app_id" => $userDataObject,\n            "delete_all" => true,\n        ]),\n        $metadata\n    )\n    ->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure\n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    throw new Exception(\n        "Failure response: " .\n            $response->getStatus()->getDescription() .\n            " " .\n            $response->getStatus()->getDetails()\n    );\n}\n\n?>\n',G='curl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/workflows" \\\n    -H "Content-Type: application/json" \\\n    -H "Authorization: Key YOUR_PAT_HERE" \\\n    --data-raw \'{\n      "workflows": [{\n        "id": "my-custom-workflow",\n        "nodes": [\n          {\n            "id": "optical-character-recognizer",\n            "model": {\n              "id": "ocr-scene-english-paddleocr",\n              "model_version": {\n                "id": "40dbb2c9cde44a27af226782e7157006"\n              }\n            }\n          },\n          {\n            "id": "text-to-text",\n            "model": {\n              "id": "text-translation-english-spanish",\n              "model_version": {\n                "id": "643f30558de34013aff72b0e21f244f5"\n              }\n            },\n              "node_inputs": [\n                {\n                  "node_id": "optical-character-recognizer"\n                }\n              ]\n          }\n        ]\n      }]\n    }\'',V='curl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/workflows/YOUR_WORKFLOW_ID_HERE/results" \\\n  -H "authorization: Key YOUR_PAT_HERE" \\\n  -H "content-type: application/json" \\\n  -d \'{\n    "inputs": [\n        {\n          "data": {\n            "image": {\n              "url": "https://samples.clarifai.com/featured-models/ocr-woman-holding-sold-sign.jpg"\n          }\n        }\n      }\n    ]\n}\'',q='curl -X GET "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/workflows/" \\\n    -H "Content-Type: application/json" \\\n    -H "Authorization: Key YOUR_PAT_HERE"',B='curl -X GET "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/workflows/YOUR_WORKFLOW_ID_HERE" \\\n    -H "Content-Type: application/json" \\\n    -H "Authorization: Key YOUR_PAT_HERE"',K='curl -X PATCH "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/workflows/" \\\n    -H "Content-Type: application/json" \\\n    -H "Authorization: Key YOUR_PAT_HERE" \\\n    --data-raw \'{\n        "action": "overwrite",\n        "workflows": [\n            {\n                "id": "my-custom-workflow",\n                "nodes": [\n                    {\n                        "id": "audio-to-text",\n                        "model": {\n                            "id": "asr-wav2vec2-base-960h-english",\n                            "model_version": {\n                                "id": "f4deae70a473492a8e2f9b7bb1dbee85"\n                            }\n                        }\n                    },\n                    {\n                        "id": "text-summarization",\n                        "model": {\n                            "id": "text-summarization-english-distilbart-cnn-12-6",\n                            "model_version": {\n                                "id": "8279cec2221a4b1d9db774470940aebd"\n                            }\n                        },\n                        "node_inputs": [\n                            {\n                                "node_id": "audio-to-text"\n                            }\n                        ]                        \n                    },\n                    {\n                        "id": "english-to-french",\n                        "model": {\n                            "id": "translation-english-to-french-text",\n                            "model_version": {\n                                "id": "c65a4a51c2b646fca5f0e4bf1ff200d7"\n                            }\n                        },\n                        "node_inputs": [\n                            {\n                                "node_id": "text-summarization"\n                            }\n                        ] \n                    }\n                ]\n            }\n        ]\n    }\'',F='curl -X DELETE "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/workflows/YOUR_WORKFLOW_ID_HERE" \\\n    -H "Content-Type: application/json" \\\n    -H "Authorization: Key YOUR_PAT_HERE"',z='curl -X DELETE "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/workflows" \\\n    -H "Content-Type: application/json" \\\n    -H "Authorization: Key YOUR_PAT_HERE" \\\n    --data-raw \'{\n        "delete_all": true\n    }\'',X="Output for the model: `ocr-scene-english-paddleocr`\nSOLD\nWe can SELL YOURS too!\nOutput for the model: `text-translation-english-spanish`\nVENDIDO\n\xa1Nosotros tambi\xe9n podemos venderla!",J={description:"Manage your Mesh Workflows.",sidebar_position:2},Z="Create, Get, Update, Delete",Q={id:"api-guide/workflows/create-get-update-delete",title:"Create, Get, Update, Delete",description:"Manage your Mesh Workflows.",source:"@site/docs/api-guide/workflows/create-get-update-delete.md",sourceDirName:"api-guide/workflows",slug:"/api-guide/workflows/create-get-update-delete",permalink:"/api-guide/workflows/create-get-update-delete",draft:!1,unlisted:!1,editUrl:"https://github.com/Clarifai/docs/blob/main/docs/api-guide/workflows/create-get-update-delete.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{description:"Manage your Mesh Workflows.",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Input Nodes",permalink:"/api-guide/workflows/input_nodes"},next:{title:"Common Workflows Examples",permalink:"/api-guide/workflows/common-workflows/"}},ee={},ne=[{value:"Create",id:"create",level:2},{value:"Workflow Predict",id:"workflow-predict",level:2},{value:"Get",id:"get",level:2},{value:"Get all Workflows in an App",id:"get-all-workflows-in-an-app",level:3},{value:"Get a Workflow by a Specific ID",id:"get-a-workflow-by-a-specific-id",level:3},{value:"Update",id:"update",level:2},{value:"Patch Workflow",id:"patch-workflow",level:3},{value:"Delete",id:"delete",level:2},{value:"Delete Workflow by ID",id:"delete-workflow-by-id",level:3},{value:"Delete all Workflows",id:"delete-all-workflows",level:3}];function te(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",strong:"strong",ul:"ul",...(0,o.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"create-get-update-delete",children:"Create, Get, Update, Delete"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Manage your Mesh Workflows"})}),"\n",(0,s.jsx)("hr",{}),"\n",(0,s.jsx)(n.p,{children:"Workflows is a useful Clarifai's feature that allows you to combine multiple models and carry out different operations. With workflows, you can create a powerful multimodal system that meets various use cases in a single API call \u2014 instead of relying only on one model."}),"\n",(0,s.jsx)(n.p,{children:"You can use Clarifai's built-in models or your own custom models."}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["The initialization code used in the following examples is outlined in detail on the ",(0,s.jsx)(n.a,{href:"https://docs.clarifai.com/api-guide/api-overview/api-clients/#client-installation-instructions",children:"client installation page."})]})}),"\n","\n","\n","\n","\n","\n","\n","\n","\n",(0,s.jsx)(n.h2,{id:"create",children:"Create"}),"\n",(0,s.jsx)(n.p,{children:"In this example, we'll create a simple custom workflow that first extracts text from an image and then translates the extracted text to Spanish."}),"\n",(0,s.jsx)(n.p,{children:"We'll connect the following two models to achieve our objective:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.a,{href:"https://clarifai.com/clarifai/main/models/ocr-scene-english-paddleocr",children:"ocr-scene-english-paddleocr"})," model, which detects and recognizes English texts in images;"]}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.a,{href:"https://clarifai.com/helsinkinlp/translation/models/text-translation-english-spanish",children:"text-translation-english-spanish"})," model, which translates texts from English to Spanish."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"We'll specify the IDs of the models and their versions \u2014 since a model can have several versions."}),"\n",(0,s.jsxs)(a.A,{children:[(0,s.jsx)(r.A,{value:"python",label:"Python",children:(0,s.jsx)(i.A,{className:"language-python",children:l})}),(0,s.jsx)(r.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(i.A,{className:"language-javascript",children:f})}),(0,s.jsx)(r.A,{value:"nodejs",label:"NodeJS",children:(0,s.jsx)(i.A,{className:"language-javascript",children:m})}),(0,s.jsx)(r.A,{value:"java",label:"Java",children:(0,s.jsx)(i.A,{className:"language-java",children:N})}),(0,s.jsx)(r.A,{value:"php",label:"PHP",children:(0,s.jsx)(i.A,{className:"language-php",children:j})}),(0,s.jsx)(r.A,{value:"curl",label:"cURL",children:(0,s.jsx)(i.A,{className:"language-bash",children:G})})]}),"\n",(0,s.jsx)(n.h2,{id:"workflow-predict",children:"Workflow Predict"}),"\n",(0,s.jsxs)(n.p,{children:["After creating the workflow, let's now use it to extract texts from ",(0,s.jsx)(n.a,{href:"https://samples.clarifai.com/featured-models/ocr-woman-holding-sold-sign.jpg",children:"this image"})," and translate them into Spanish."]}),"\n",(0,s.jsx)(n.p,{children:"The response will contain the predictions each model in the workflow returns for the input."}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:["If you want to make a predict call with an external workflow that is outside the scope of your app, you need to use a PAT while specifying the ",(0,s.jsx)(n.code,{children:"app_id"})," and the ",(0,s.jsx)(n.code,{children:"user_id"})," associated with the workflow you want to use."]})}),"\n",(0,s.jsxs)(a.A,{children:[(0,s.jsx)(r.A,{value:"python",label:"Python",children:(0,s.jsx)(i.A,{className:"language-python",children:c})}),(0,s.jsx)(r.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(i.A,{className:"language-javascript",children:w})}),(0,s.jsx)(r.A,{value:"nodejs",label:"NodeJS",children:(0,s.jsx)(i.A,{className:"language-javascript",children:A})}),(0,s.jsx)(r.A,{value:"java",label:"Java",children:(0,s.jsx)(i.A,{className:"language-java",children:T})}),(0,s.jsx)(r.A,{value:"php",label:"PHP",children:(0,s.jsx)(i.A,{className:"language-php",children:H})}),(0,s.jsx)(r.A,{value:"curl",label:"cURL",children:(0,s.jsx)(i.A,{className:"language-bash",children:V})})]}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{children:"Text Output Example"}),(0,s.jsx)(i.A,{className:"language-text",children:X})]}),"\n",(0,s.jsx)(n.h2,{id:"get",children:"Get"}),"\n",(0,s.jsx)(n.h3,{id:"get-all-workflows-in-an-app",children:"Get all Workflows in an App"}),"\n",(0,s.jsx)(n.p,{children:"You can return all custom workflows in your app."}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:["If you want to get a list of the workflows not within the scope of your app, you need to use your PAT while specifying the ",(0,s.jsx)(n.code,{children:"user_id"})," of their owner and the ",(0,s.jsx)(n.code,{children:"app_id"})," of the application that you\u2019re accessing. For example, to get Clarifai's workflows in the ",(0,s.jsx)(n.code,{children:"main"})," app, you need to use your PAT while specifying Clarifai's ",(0,s.jsx)(n.code,{children:"user_id"}),' as "clarifai" and ',(0,s.jsx)(n.code,{children:"app_id"}),' as "main" in the request.']})}),"\n",(0,s.jsxs)(a.A,{children:[(0,s.jsx)(r.A,{value:"python",label:"Python",children:(0,s.jsx)(i.A,{className:"language-python",children:u})}),(0,s.jsx)(r.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(i.A,{className:"language-javascript",children:E})}),(0,s.jsx)(r.A,{value:"nodejs",label:"NodeJS",children:(0,s.jsx)(i.A,{className:"language-javascript",children:R})}),(0,s.jsx)(r.A,{value:"java",label:"Java",children:(0,s.jsx)(i.A,{className:"language-java",children:C})}),(0,s.jsx)(r.A,{value:"php",label:"PHP",children:(0,s.jsx)(i.A,{className:"language-php",children:v})}),(0,s.jsx)(r.A,{value:"curl",label:"cURL",children:(0,s.jsx)(i.A,{className:"language-bash",children:q})})]}),"\n",(0,s.jsx)(n.h3,{id:"get-a-workflow-by-a-specific-id",children:"Get a Workflow by a Specific ID"}),"\n",(0,s.jsx)(n.p,{children:"You can return information about a specific workflow."}),"\n",(0,s.jsxs)(a.A,{children:[(0,s.jsx)(r.A,{value:"python",label:"Python",children:(0,s.jsx)(i.A,{className:"language-python",children:d})}),(0,s.jsx)(r.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(i.A,{className:"language-javascript",children:I})}),(0,s.jsx)(r.A,{value:"nodejs",label:"NodeJS",children:(0,s.jsx)(i.A,{className:"language-javascript",children:S})}),(0,s.jsx)(r.A,{value:"java",label:"Java",children:(0,s.jsx)(i.A,{className:"language-javascript",children:U})}),(0,s.jsx)(r.A,{value:"php",label:"PHP",children:(0,s.jsx)(i.A,{className:"language-php",children:y})}),(0,s.jsx)(r.A,{value:"curl",label:"cURL",children:(0,s.jsx)(i.A,{className:"language-bash",children:B})})]}),"\n",(0,s.jsx)(n.h2,{id:"update",children:"Update"}),"\n",(0,s.jsx)(n.h3,{id:"patch-workflow",children:"Patch Workflow"}),"\n",(0,s.jsx)(n.p,{children:"You can change a workflow; that is, change the models of which the workflow consists."}),"\n",(0,s.jsxs)(n.p,{children:["The possible actions are ",(0,s.jsx)(n.code,{children:"overwrite"}),", ",(0,s.jsx)(n.code,{children:"merge"}),", and ",(0,s.jsx)(n.code,{children:"remove"}),"."]}),"\n",(0,s.jsxs)(a.A,{children:[(0,s.jsx)(r.A,{value:"python",label:"Python",children:(0,s.jsx)(i.A,{className:"language-python",children:p})}),(0,s.jsx)(r.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(i.A,{className:"language-javascript",children:D})}),(0,s.jsx)(r.A,{value:"nodejs",label:"NodeJS",children:(0,s.jsx)(i.A,{className:"language-javascript",children:P})}),(0,s.jsx)(r.A,{value:"java",label:"Java",children:(0,s.jsx)(i.A,{className:"language-java",children:x})}),(0,s.jsx)(r.A,{value:"php",label:"PHP",children:(0,s.jsx)(i.A,{className:"language-php",children:Y})}),(0,s.jsx)(r.A,{value:"curl",label:"cURL",children:(0,s.jsx)(i.A,{className:"language-bash",children:K})})]}),"\n",(0,s.jsx)(n.h2,{id:"delete",children:"Delete"}),"\n",(0,s.jsx)(n.h3,{id:"delete-workflow-by-id",children:"Delete Workflow by ID"}),"\n",(0,s.jsx)(n.p,{children:"You can delete a specific workflow."}),"\n",(0,s.jsxs)(a.A,{children:[(0,s.jsx)(r.A,{value:"python",label:"Python",children:(0,s.jsx)(i.A,{className:"language-python",children:_})}),(0,s.jsx)(r.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(i.A,{className:"language-javascript",children:g})}),(0,s.jsx)(r.A,{value:"nodejs",label:"NodeJS",children:(0,s.jsx)(i.A,{className:"language-javascript",children:b})}),(0,s.jsx)(r.A,{value:"java",label:"Java",children:(0,s.jsx)(i.A,{className:"language-java",children:L})}),(0,s.jsx)(r.A,{value:"php",label:"PHP",children:(0,s.jsx)(i.A,{className:"language-php",children:$})}),(0,s.jsx)(r.A,{value:"curl",label:"cURL",children:(0,s.jsx)(i.A,{className:"language-bash",children:F})})]}),"\n",(0,s.jsx)(n.h3,{id:"delete-all-workflows",children:"Delete all Workflows"}),"\n",(0,s.jsx)(n.p,{children:"You can delete all custom workflows."}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:["Instead of ",(0,s.jsx)(n.code,{children:"delete_all"}),", you can specify a list of workflow IDs to be deleted, using the ",(0,s.jsx)(n.code,{children:"ids"})," field."]})}),"\n",(0,s.jsxs)(a.A,{children:[(0,s.jsx)(r.A,{value:"python",label:"Python",children:(0,s.jsx)(i.A,{className:"language-python",children:h})}),(0,s.jsx)(r.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(i.A,{className:"language-javascript",children:O})}),(0,s.jsx)(r.A,{value:"nodejs",label:"NodeJS",children:(0,s.jsx)(i.A,{className:"language-javascript",children:k})}),(0,s.jsx)(r.A,{value:"java",label:"Java",children:(0,s.jsx)(i.A,{className:"language-java",children:W})}),(0,s.jsx)(r.A,{value:"php",label:"PHP",children:(0,s.jsx)(i.A,{className:"language-php",children:M})}),(0,s.jsx)(r.A,{value:"curl",label:"cURL",children:(0,s.jsx)(i.A,{className:"language-bash",children:z})})]})]})}function se(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(te,{...e})}):te(e)}},19365:(e,n,t)=>{t.d(n,{A:()=>r});t(96540);var s=t(18215);const o={tabItem:"tabItem_Ymn6"};var a=t(74848);function r(e){let{children:n,hidden:t,className:r}=e;return(0,a.jsx)("div",{role:"tabpanel",className:(0,s.A)(o.tabItem,r),hidden:t,children:n})}},11470:(e,n,t)=>{t.d(n,{A:()=>m});var s=t(96540),o=t(18215),a=t(23104),r=t(56347),i=t(205),l=t(57485),c=t(31682),u=t(70679);function d(e){return s.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,s.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function p(e){const{values:n,children:t}=e;return(0,s.useMemo)((()=>{const e=n??function(e){return d(e).map((e=>{let{props:{value:n,label:t,attributes:s,default:o}}=e;return{value:n,label:t,attributes:s,default:o}}))}(t);return function(e){const n=(0,c.X)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function _(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function h(e){let{queryString:n=!1,groupId:t}=e;const o=(0,r.W6)(),a=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,l.aZ)(a),(0,s.useCallback)((e=>{if(!a)return;const n=new URLSearchParams(o.location.search);n.set(a,e),o.replace({...o.location,search:n.toString()})}),[a,o])]}function f(e){const{defaultValue:n,queryString:t=!1,groupId:o}=e,a=p(e),[r,l]=(0,s.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!_({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const s=t.find((e=>e.default))??t[0];if(!s)throw new Error("Unexpected error: 0 tabValues");return s.value}({defaultValue:n,tabValues:a}))),[c,d]=h({queryString:t,groupId:o}),[f,w]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[o,a]=(0,u.Dv)(t);return[o,(0,s.useCallback)((e=>{t&&a.set(e)}),[t,a])]}({groupId:o}),E=(()=>{const e=c??f;return _({value:e,tabValues:a})?e:null})();(0,i.A)((()=>{E&&l(E)}),[E]);return{selectedValue:r,selectValue:(0,s.useCallback)((e=>{if(!_({value:e,tabValues:a}))throw new Error(`Can't select invalid tab value=${e}`);l(e),d(e),w(e)}),[d,w,a]),tabValues:a}}var w=t(92303);const E={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var I=t(74848);function D(e){let{className:n,block:t,selectedValue:s,selectValue:r,tabValues:i}=e;const l=[],{blockElementScrollPositionUntilNextRender:c}=(0,a.a_)(),u=e=>{const n=e.currentTarget,t=l.indexOf(n),o=i[t].value;o!==s&&(c(n),r(o))},d=e=>{let n=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const t=l.indexOf(e.currentTarget)+1;n=l[t]??l[0];break}case"ArrowLeft":{const t=l.indexOf(e.currentTarget)-1;n=l[t]??l[l.length-1];break}}n?.focus()};return(0,I.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.A)("tabs",{"tabs--block":t},n),children:i.map((e=>{let{value:n,label:t,attributes:a}=e;return(0,I.jsx)("li",{role:"tab",tabIndex:s===n?0:-1,"aria-selected":s===n,ref:e=>l.push(e),onKeyDown:d,onClick:u,...a,className:(0,o.A)("tabs__item",E.tabItem,a?.className,{"tabs__item--active":s===n}),children:t??n},n)}))})}function g(e){let{lazy:n,children:t,selectedValue:o}=e;const a=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=a.find((e=>e.props.value===o));return e?(0,s.cloneElement)(e,{className:"margin-top--md"}):null}return(0,I.jsx)("div",{className:"margin-top--md",children:a.map(((e,n)=>(0,s.cloneElement)(e,{key:n,hidden:e.props.value!==o})))})}function O(e){const n=f(e);return(0,I.jsxs)("div",{className:(0,o.A)("tabs-container",E.tabList),children:[(0,I.jsx)(D,{...n,...e}),(0,I.jsx)(g,{...n,...e})]})}function m(e){const n=(0,w.A)();return(0,I.jsx)(O,{...e,children:d(e.children)},String(n))}}}]);
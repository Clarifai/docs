"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[1411],{7334:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>Ye,contentTitle:()=>Le,default:()=>Ve,frontMatter:()=>ye,metadata:()=>s,toc:()=>$e});const s=JSON.parse('{"id":"create/models/manage","title":"Manage Models","description":"Learn how to get, update, search, and delete models","source":"@site/docs/create/models/manage.md","sourceDirName":"create/models","slug":"/create/models/manage","permalink":"/create/models/manage","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"description":"Learn how to get, update, search, and delete models","sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Model Versions","permalink":"/create/models/model-versions/"},"next":{"title":"Evaluating Models","permalink":"/create/models/evaluate/"}}');var a=t(74848),o=t(28453),i=t(11470),r=t(19365),l=t(88149);const c="#####################################################################################################\n# In this section, we set the user authentication, app ID, and how we want to update the model. \n# Change these strings to run your own example.\n#####################################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to update your own model \nMODEL_ID = 'petsID'\nMODEL_NAME = 'newname'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\npatch_models_response = stub.PatchModels(\n    service_pb2.PatchModelsRequest(\n        user_app_id=userDataObject,\n        action=\"overwrite\",\n        models=[\n            resources_pb2.Model(\n                id=MODEL_ID,\n                name=MODEL_NAME\n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif patch_models_response.status.code != status_code_pb2.SUCCESS:\n    print(patch_models_response.status)\n    raise Exception(\"Patch models failed, status: \" + patch_models_response.status.description)\n",p="#####################################################################################################\n# In this section, we set the user authentication, app ID, and how we want to update the model. \n# Change these strings to run your own example.\n#####################################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to update your own model\nMODEL_ID = 'petsID'\nMODEL_VERSION_ID = 'b0b89c973e5d4b6d9599ce13da04b894'\nMINIMUM_VALUE = 0.95\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\nfrom google.protobuf.struct_pb2 import Struct\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\nparams = Struct()\nparams.update({\n    \"min_value\": MINIMUM_VALUE\n})\n\npatch_models_response = stub.PatchModelVersions(\n    service_pb2.PatchModelVersionsRequest(\n        user_app_id=userDataObject,\n        action=\"overwrite\",\n        model_id=MODEL_ID,\n        model_versions=[\n            resources_pb2.ModelVersion(\n                id=MODEL_VERSION_ID,\n                output_info=resources_pb2.OutputInfo(\n                        params=params\n                )\n            )\n        ]\n\n    ),\n    metadata=metadata\n)\n\nif patch_models_response.status.code != status_code_pb2.SUCCESS:\n    print(patch_models_response.status)\n    raise Exception(\"Patch models failed, status: \" + patch_models_response.status.description)\n",d="################################################################\n# In this section, we set the user authentication and app ID. \n# Change these strings to run your own example.\n################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\nresponse = stub.ListModelTypes(\n    service_pb2.ListModelTypesRequest(\n        user_app_id=userDataObject\n    ), \n    metadata=metadata\n    )\n\nif response.status.code != status_code_pb2.SUCCESS:\n    print(response.status)\n    raise Exception(\"List models failed, status: \" + response.status.description)\n\nfor model_type in response.model_types:\n  print(model_type)\n",u="#################################################################\n# In this section, we set the user authentication and app ID. \n# Change these strings to run your own example.\n#################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\nlist_models_response = stub.ListModels(\n    service_pb2.ListModelsRequest(\n         user_app_id=userDataObject\n    ),\n    metadata=metadata\n)\n\nif list_models_response.status.code != status_code_pb2.SUCCESS:\n    print(list_models_response.status)\n    raise Exception(\"List models failed, status: \" + list_models_response.status.description)\n\nfor model in list_models_response.models:\n    print(model)\n",h="################################################################################\n# In this section, we set the user authentication, app ID, and the model ID we\n# want to get its details. Change these strings to run your own example.\n################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change to your own model ID\nMODEL_ID = 'petsID'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\nget_model_response = stub.GetModel(\n    service_pb2.GetModelRequest(\n        user_app_id=userDataObject,\n        model_id=MODEL_ID\n    ),\n    metadata=metadata\n)\n\nif get_model_response.status.code != status_code_pb2.SUCCESS:\n    print(get_model_response.status)\n    raise Exception(\"Get model failed, status: \" + get_model_response.status.description)\n\nmodel = get_model_response.model\nprint(model)\n",_="###############################################################################\n# In this section, we set the user authentication, app ID, and the model ID we\n# want to get its output info. Change these strings to run your own example.\n###############################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change to your own model ID\nMODEL_ID = 'petsID'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\nget_model_response = stub.GetModelOutputInfo(\n    service_pb2.GetModelRequest(\n        user_app_id=userDataObject,\n        model_id=MODEL_ID\n    ),\n    metadata=metadata\n)\n\nif get_model_response.status.code != status_code_pb2.SUCCESS:\n    print(get_model_response.status)\n    raise Exception(\"Get model failed, status: \" + get_model_response.status.description)\n\nmodel = get_model_response.model\nprint(model)\n",E="###########################################################################\n# In this section, we set the user authentication and model ID.\n# Change these strings to run your own example.\n###########################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change this to whatever model you want to retrieve its concepts\nMODEL_ID = 'YOUR_MODEL_ID_HERE'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\nlist_model_concepts_response = stub.ListModelConcepts(\n    service_pb2.ListModelConceptsRequest(\n        user_app_id=userDataObject, \n        model_id=MODEL_ID\n    ),    \n    metadata=metadata\n)\n\nif list_model_concepts_response.status.code != status_code_pb2.SUCCESS:\n    print(list_model_concepts_response.status)\n    raise Exception(\"List model concept failed, status: \" + list_model_concepts_response.status.description)\n    \nprint(list_model_concepts_response)",m="###############################################################################\n# In this section, we set the user authentication, app ID, and the model ID we\n# want to list its versions. Change these strings to run your own example.\n###############################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change to your own model ID\nMODEL_ID = 'petsID'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\nlist_model_versions_response = stub.ListModelVersions(\n    service_pb2.ListModelVersionsRequest(\n        user_app_id=userDataObject,\n        model_id=MODEL_ID\n    ),\n    metadata=metadata\n)\n\nif list_model_versions_response.status.code != status_code_pb2.SUCCESS:\n    print(list_model_versions_response.status)\n    raise Exception(\"List model versions failed, status: \" + list_model_versions_response.status.description)\n\nfor model_version in list_model_versions_response.model_versions:\n    print(model_version)\n",I="#########################################################################################\n# In this section, we set the user authentication, app ID, and the ID and version\n# of the model we want to get its details. Change these strings to run your own example.\n#########################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to your own model ID and version\nMODEL_ID = 'petsID'\nMODEL_VERSION_ID = 'daf51b311c8644a486bbbe57c0680bc2'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\nget_model_version_response = stub.GetModelVersion(\n    service_pb2.GetModelVersionRequest(\n        user_app_id=userDataObject,\n        model_id=MODEL_ID,\n        version_id=MODEL_VERSION_ID\n    ),\n    metadata=metadata\n)\n\nif get_model_version_response.status.code != status_code_pb2.SUCCESS:\n    print(get_model_version_response.status)\n    raise Exception(\"Get model version failed, status: \" + get_model_version_response.status.description)\n\nmodel_version = get_model_version_response.model_version\nprint(model_version)\n",A="##########################################################################\n# In this section, we set the user authentication, app ID, and model ID.\n# Change these strings to run your own example.\n##########################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change this to your own model ID \nMODEL_ID = 'petsID'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\ndelete_model_response = stub.DeleteModel(\n    service_pb2.DeleteModelRequest(\n        user_app_id=userDataObject,\n        model_id=MODEL_ID\n    ),\n    metadata=metadata\n)\n\nif delete_model_response.status.code != status_code_pb2.SUCCESS:\n    print(delete_model_response.status)\n    raise Exception(\"Delete model inputs failed, status: \" + delete_model_response.status.description)\n",D="##################################################################################\n# In this section, we set the user authentication, app ID, and the ID and version\n# of the model we want to delete. Change these strings to run your own example.\n##################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to your own model ID and version\nMODEL_ID = 'petsID'\nMODEL_VERSION_ID = '9641cbbb019b424db17e593b48ebc7ff'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\ndelete_model_version_response = stub.DeleteModelVersion(\n    service_pb2.DeleteModelVersionRequest(\n        user_app_id=userDataObject,\n        model_id=MODEL_ID,\n        version_id=MODEL_VERSION_ID\n    ),\n    metadata=metadata\n)\n\nif delete_model_version_response.status.code != status_code_pb2.SUCCESS:\n    print(delete_model_version_response.status)\n    raise Exception(\"Delete model version failed, status: \" + delete_model_version_response.status.description)\n",g="################################################################\n# In this section, we set the user authentication and app ID. \n# Change these strings to run your own example.\n################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\ndelete_models_response = stub.DeleteModels(\n    service_pb2.DeleteModelsRequest(\n        user_app_id=userDataObject,\n        delete_all=True\n    ),\n    metadata=metadata\n)\n\nif delete_models_response.status.code != status_code_pb2.SUCCESS:\n    print(delete_models_response.status)\n    raise Exception(\"Delete models failed, status: \" + delete_models_response.status.description)\n",f="################################################################\n# In this section, we set the user authentication and app ID.\n# Change these strings to run your own example.\n#################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\npost_models_searches_response = stub.PostModelsSearches(\n    service_pb2.PostModelsSearchesRequest(\n        user_app_id=userDataObject,\n        model_query=resources_pb2.ModelQuery(\n            name=\"gen*\", # This supports wild card queries like \"gen*\" to match \"general\" as an example\n            model_type_id=\"concept\"\n        )\n    ),\n    metadata=metadata\n)\n\nif post_models_searches_response.status.code != status_code_pb2.SUCCESS:\n    print(post_models_searches_response.status)\n    raise Exception(\"Post models searches failed, status: \" + post_models_searches_response.status.description)\n\nfor model in post_models_searches_response.models:\n    print(model)\n",R='import os\nfrom clarifai.client import User\n\nos.environ["CLARIFAI_PAT"] = "YOUR_PAT_HERE"\n\nuser = User()\n\n# Get all models of current user\nuser.list_models(show=True)\n\n# Or, get models of a specific user_id such as openai\n#user.list_models(show=True, user_id="openai") ',P="# Get all models of current user\nclarifai model list\n\n# Or, get models of a specific user_id such as openai\n#clarifai model list openai",S="\nuser_id    app_id           id                                model_type          url                                                                                 supported_openai_client    UNARY_UNARY    UNARY_STREAMING    STREAMING_STREAMING\n---------  ---------------  --------------------------------  ------------------  ----------------------------------------------------------------------------------  -------------------------  -------------  -----------------  ---------------------\nopenai     tts              openai-tts-1-hd                   text-to-audio       https://clarifai.com/openai/tts/models/openai-tts-1-hd                              False                      ['predict']\nopenai     chat-completion  gpt-4o                            multimodal-to-text  https://clarifai.com/openai/chat-completion/models/gpt-4o                           True                       ['predict']    ['generate']\nopenai     chat-completion  gpt-4_1                           multimodal-to-text  https://clarifai.com/openai/chat-completion/models/gpt-4_1                          True                       ['predict']    ['generate']\nopenai     chat-completion  o3                                multimodal-to-text  https://clarifai.com/openai/chat-completion/models/o3                               True                       ['predict']    ['generate']\nopenai     chat-completion  o4-mini                           multimodal-to-text  https://clarifai.com/openai/chat-completion/models/o4-mini                          True                       ['predict']    ['generate']\nopenai     embed            text-embedding-ada-002            text-embedder       https://clarifai.com/openai/embed/models/text-embedding-ada-002                     True                       ['predict']\nopenai     whisper          whisper-large-v3                  audio-to-text       https://clarifai.com/openai/whisper/models/whisper-large-v3                         False                      ['predict']\nopenai     transcription    whisper                           audio-to-text       https://clarifai.com/openai/transcription/models/whisper                            False                      ['predict']\nopenai     completion       gpt-3_5-turbo-instruct            text-to-text        https://clarifai.com/openai/completion/models/gpt-3_5-turbo-instruct                False                      ['predict']\nopenai     tts              openai-tts-1                      text-to-audio       https://clarifai.com/openai/tts/models/openai-tts-1                                 False                      ['predict']\nopenai     whisper          whisper-large-v2                  audio-to-text       https://clarifai.com/openai/whisper/models/whisper-large-v2                         False                      ['predict']\nopenai     embed            text-embedding-ada                text-embedder       https://clarifai.com/openai/embed/models/text-embedding-ada                         False                      ['predict']\nopenai     embed            text-embedding-3-large            text-embedder       https://clarifai.com/openai/embed/models/text-embedding-3-large                     False                      ['predict']\nopenai     embed            text-embedding-3-small            text-embedder       https://clarifai.com/openai/embed/models/text-embedding-3-small                     False                      ['predict']\nopenai     dall-e           DALL-E                            text-to-image       https://clarifai.com/openai/dall-e/models/DALL-E                                    False                      ['predict']\nopenai     dall-e           dall-e-3                          text-to-image       https://clarifai.com/openai/dall-e/models/dall-e-3                                  False                      ['predict']\nopenai     chat-completion  GPT-3_5-turbo                     text-to-text        https://clarifai.com/openai/chat-completion/models/GPT-3_5-turbo                    False                      ['predict']\nopenai     chat-completion  GPT-4                             text-to-text        https://clarifai.com/openai/chat-completion/models/GPT-4                            False                      ['predict']\nopenai     chat-completion  gpt-4-turbo                       text-to-text        https://clarifai.com/openai/chat-completion/models/gpt-4-turbo                      False                      ['predict']\nopenai     chat-completion  gpt-4o-mini                       multimodal-to-text  https://clarifai.com/openai/chat-completion/models/gpt-4o-mini                      False                      ['predict']\nopenai     chat-completion  o1-preview                        text-to-text        https://clarifai.com/openai/chat-completion/models/o1                               False                      ['predict']\nopenai     chat-completion  o1-mini                           text-to-text        https://clarifai.com/openai/chat-completion/models/o1-mini                          False                      ['predict']\nopenai     Auto-Labelling   workflow-model-0b0a-342dc669ef03  annotation-writer   https://clarifai.com/openai/Auto-Labelling/models/workflow-model-0b0a-342dc669ef03  False                      ['predict']\nopenai     Auto-Labelling   workflow-model-1b18-0b926d4b87ea  prompter            https://clarifai.com/openai/Auto-Labelling/models/workflow-model-1b18-0b926d4b87ea  False                      ['predict']\n",O="\x3c!--index.html file--\x3e\n\n<script>\n    ////////////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and how we want to update the model.\n    // Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = 'YOUR_USER_ID_HERE';\n    // Your PAT (Personal Access Token) can be found in the Account's Security section\n    const PAT = 'YOUR_PAT_HERE';\n    const APP_ID = 'YOUR_APP_ID_HERE';\n    // Change these to update your own model \n    const MODEL_ID = 'petsID';\n    const MODEL_NAME = 'newname';    \n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        \"user_app_id\": {\n            \"user_id\": USER_ID,\n            \"app_id\": APP_ID\n        },\n        \"models\": [\n            {\n                \"id\": \"petsID\",\n                \"name\": MODEL_NAME\n            }\n        ],\n        \"action\": \"overwrite\"\n    });\n\n    const requestOptions = {\n        method: 'PATCH',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        },\n        body: raw\n    };\n\n    fetch(\"https://api.clarifai.com/v2/models\", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n\n<\/script>",T="\x3c!--index.html file--\x3e\n\n<script>\n    ////////////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and how we want to update the model.\n    // Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = 'YOUR_USER_ID_HERE';\n    // Your PAT (Personal Access Token) can be found in the Account's Security section\n    const PAT = 'YOUR_PAT_HERE';\n    const APP_ID = 'YOUR_APP_ID_HERE';\n    // Change these to update your own model \n    const MODEL_ID = 'petsID';\n    const MODEL_VERSION_ID = 'b0b89c973e5d4b6d9599ce13da04b894';\n    const MINIMUM_VALUE = 0.95;\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        \"action\": \"overwrite\",\n        \"model_versions\":[{\n            \"id\": MODEL_VERSION_ID, \n            \"output_info\": {\n                \"params\": {\n                    \"min_value\": MINIMUM_VALUE\n                }  \n            }\n        }]        \n    });\n\n    const requestOptions = {\n        method: 'PATCH',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        },\n        body: raw\n    };\n\n    fetch(`https://api.clarifai.com/v2/users/${USER_ID}/apps/${APP_ID}/models/${MODEL_ID}/versions`, requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n\n<\/script>",C="\x3c!--index.html file--\x3e\n\n<script>\n    ////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication and app ID. \n    // Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////  \n\n    const USER_ID = 'YOUR_USER_ID_HERE';\n    // Your PAT (Personal Access Token) can be found in the Account's Security section\n    const PAT = 'YOUR_PAT_HERE';\n    const APP_ID = 'YOUR_APP_ID_HERE';\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const requestOptions = {\n        method: 'GET',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        }\n    };\n\n    fetch(`https://api.clarifai.com/v2/users/${USER_ID}/apps/${APP_ID}/models/types?per_page=20&page=1`, requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n\n<\/script>",U="\x3c!--index.html file--\x3e\n\n<script>\n    ////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication and app ID. \n    // Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////\n\n    const USER_ID = 'YOUR_USER_ID_HERE';\n    // Your PAT (Personal Access Token) can be found in the Account's Security section\n    const PAT = 'YOUR_PAT_HERE';\n    const APP_ID = 'YOUR_APP_ID_HERE';\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const requestOptions = {\n        method: 'GET',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        }\n    };\n\n    fetch(`https://api.clarifai.com/v2/users/${USER_ID}/apps/${APP_ID}/models`, requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n\n<\/script>",b="\x3c!--index.html file--\x3e\n\n<script>\n    //////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the model ID we\n    // want to get its details. Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = 'YOUR_USER_ID_HERE';\n    // Your PAT (Personal Access Token) can be found in the Account's Security section\n    const PAT = 'YOUR_PAT_HERE';\n    const APP_ID = 'YOUR_APP_ID_HERE';\n    // Change to your own model ID\n    const MODEL_ID = 'petsID';\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const requestOptions = {\n        method: 'GET',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        }\n    };\n\n    fetch(`https://api.clarifai.com/v2/users/${USER_ID}/apps/${APP_ID}/models/${MODEL_ID}`, requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n\n<\/script>",w="\x3c!--index.html file--\x3e\n\n<script>\n    //////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the model ID we\n    // want to get its output info. Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////////////////  \n\n    const USER_ID = 'YOUR_USER_ID_HERE';\n    // Your PAT (Personal Access Token) can be found in the Account's Security section\n    const PAT = 'YOUR_PAT_HERE';\n    const APP_ID = 'YOUR_APP_ID_HERE';\n    // Change to your own model ID\n    const MODEL_ID = 'petsID';\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const requestOptions = {\n        method: 'GET',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        }\n    };\n\n    fetch(`https://api.clarifai.com/v2/users/${USER_ID}/apps/${APP_ID}/models/${MODEL_ID}/output_info`, requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n\n<\/script>",N="\x3c!--index.html file--\x3e\n\n<script>\n    ///////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication and model ID.\n    // Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////\n\n    const USER_ID = 'YOUR_USER_ID_HERE';\n    //Your PAT (Personal Access Token) can be found in the Account's Security section\n    const PAT = 'YOUR_PAT_HERE';\n    const APP_ID = 'YOUR_APP_ID_HERE';\n    // Change this to whatever model you want to retrieve its concepts\n    const MODEL_ID = 'YOUR_MODEL_ID_HERE';\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const requestOptions = {\n        method: 'GET',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        },\n    };\n\n    fetch(\"https://api.clarifai.com/v2/users/\" + USER_ID + \"/apps/\" + APP_ID + \"/models/\" + MODEL_ID + \"/concepts\", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n<\/script>\n",x="\x3c!--index.html file--\x3e\n\n<script>\n    //////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the model ID we\n    // want to list its versions. Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = 'YOUR_USER_ID_HERE';\n    // Your PAT (Personal Access Token) can be found in the Account's Security section\n    const PAT = 'YOUR_PAT_HERE';\n    const APP_ID = 'YOUR_APP_ID_HERE';\n    // Change to your own model ID\n    const MODEL_ID = 'petsID';\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const requestOptions = {\n        method: 'GET',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        }\n    };\n\n    fetch(`https://api.clarifai.com/v2/users/${USER_ID}/apps/${APP_ID}/models/${MODEL_ID}/versions`, requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n\n<\/script>",H="\x3c!--index.html file--\x3e\n\n<script>\n    ////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the ID and version\n    // of the model we want to get its details. Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = 'YOUR_USER_ID_HERE';\n    // Your PAT (Personal Access Token) can be found in the Account's Security section\n    const PAT = 'YOUR_PAT_HERE';\n    const APP_ID = 'YOUR_APP_ID_HERE';\n    // Change these to your own model ID and version\n    const MODEL_ID = 'petsID';\n    const MODEL_VERSION_ID = '7625a111b626438bb81a34c3b84d732f';\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const requestOptions = {\n        method: 'GET',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        }\n    };\n\n    fetch(`https://api.clarifai.com/v2/users/${USER_ID}/apps/${APP_ID}/models/${MODEL_ID}/versions/${MODEL_VERSION_ID}`, requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n\n<\/script>",v="\x3c!--index.html file--\x3e\n\n<script>\n    //////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and model ID.\n    // Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = 'YOUR_USER_ID_HERE'; \n    // Your PAT (Personal Access Token) can be found in the Account's Security section\n    const PAT = 'YOUR_PAT_HERE';\n    const APP_ID = 'YOUR_APP_ID_HERE';\n    // Change this to your own model ID \n    const MODEL_ID = 'petsID';\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const requestOptions = {\n        method: 'DELETE',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        }\n    };\n\n    fetch(`https://api.clarifai.com/v2/users/${USER_ID}/apps/${APP_ID}/models/${MODEL_ID}`, requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n\n<\/script>",M="\x3c!--index.html file--\x3e\n\n<script>\n    /////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the ID and version\n    // of the model we want to delete. Change these strings to run your own example.\n    /////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = 'YOUR_USER_ID_HERE';\n    // Your PAT (Personal Access Token) can be found in the Account's Security section\n    const PAT = 'YOUR_PAT_HERE';\n    const APP_ID = 'YOUR_APP_ID_HERE';\n    // Change these to your own model ID and version\n    const MODEL_ID = 'petsID';\n    const MODEL_VERSION_ID = '090d937cdf11489f8c3d0b76b61a5fc5';\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const requestOptions = {\n        method: 'DELETE',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        }\n    };\n\n    fetch(`https://api.clarifai.com/v2/users/${USER_ID}/apps/${APP_ID}/models/${MODEL_ID}/versions/${MODEL_VERSION_ID}`, requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n<\/script>",j="\x3c!--index.html file--\x3e\n\n<script>\n    ///////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication and app ID. \n    // Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = 'YOUR_USER_ID_HERE';\n    // Your PAT (Personal Access Token) can be found in the Account's Security section\n    const PAT = 'YOUR_PAT_HERE';\n    const APP_ID = 'YOUR_APP_ID_HERE';\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        \"user_app_id\": {\n            \"user_id\": USER_ID,\n            \"app_id\": APP_ID\n        },\n        delete_all: true\n    });\n\n    const requestOptions = {\n        method: 'DELETE',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        },\n        body: raw\n    };\n\n    fetch(\"https://api.clarifai.com/v2/models\", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n\n<\/script>",y='\x3c!--index.html file--\x3e\n\n<script>\n    ////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication and app ID.\n    // Change these strings to run your own example.\n    /////////////////////////////////////////////////////////////////////\n\n    const USER_ID = \'YOUR_USER_ID_HERE\';\n    // Your PAT (Personal Access Token) can be found in the Account\'s Security section\n    const PAT = \'YOUR_PAT_HERE\';\n    const APP_ID = \'YOUR_APP_ID_HERE\';\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        "user_app_id": {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        "model_query": {\n            "name": "gen*", //This supports wild card queries like "gen*" to match "general" as an example\n            "model_type_id": "concept"\n        }\n    });\n\n    const requestOptions = {\n        method: \'POST\',\n        headers: {\n            \'Accept\': \'application/json\',\n            \'Authorization\': \'Key \' + PAT\n        },\n        body: raw\n    };\n\n    fetch("https://api.clarifai.com/v2/models/searches", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log(\'error\', error));\n\n<\/script>',L='//index.js file\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and how we want to update the model. \n// Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n// Change these to update your own model \nconst MODEL_ID = \'petsID\';\nconst MODEL_NAME = \'newname\';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PatchModels(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        action: "overwrite",\n        models: [\n            {\n                id: MODEL_ID,\n                name: MODEL_NAME\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Patch models failed, status: " + response.status.description);\n        }\n    }\n);',Y='//index.js file\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and how we want to update the model. \n// Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n// Change these to update your own model \nconst MODEL_ID = \'petsID\';\nconst MODEL_VERSION_ID = \'b0b89c973e5d4b6d9599ce13da04b894\';\nconst MINIMUM_VALUE = 0.95;\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PatchModelVersions(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        action: "overwrite",\n        model_id: MODEL_ID,\n        model_versions:[{\n            "id": MODEL_VERSION_ID, \n            "output_info": {\n                "params": {\n                    "min_value": MINIMUM_VALUE\n                } \n            }\n        }],\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Patch models failed, status: " + response.status.description);\n        }\n    }\n);',$='//index.js file\n\n/////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication and app ID. \n// Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.ListModelTypes(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        page: 1,\n        per_page: 500\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Received status: " + response.status.description + "\\n" + response.status.details);\n        }\n\n        for (const model_type of response.model_types) {\n            console.log(model_type)\n        }\n    }\n);',G='//index.js file\n\n/////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication and app ID. \n// Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.ListModels(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("List models failed, status: " + response.status.description);\n        }\n\n        for (const model of response.models) {\n            console.log(JSON.stringify(model, null, 2));\n        }\n    }\n);',V='//index.js file\n\n//////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the model ID we\n// want to get its details. Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n// Change to your own model ID\nconst MODEL_ID = \'petsID\';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.GetModel(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        model_id: MODEL_ID\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("List models failed, status: " + response.status.description);\n        }\n\n        const model = response.model;\n        console.log(JSON.stringify(model, null, 2));\n    }\n);',q='//index.js file\n\n//////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the model ID we\n// want to get its output info. Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n// Change to your own model ID\nconst MODEL_ID = \'petsID\';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.GetModelOutputInfo(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        model_id: MODEL_ID\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("List models failed, status: " + response.status.description);\n        }\n\n        const model = response.model;\n        console.log(JSON.stringify(model, null, 2));\n    }\n);',k='//index.js file\n\n//////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the model ID we\n// want to list its versions. Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n// Change to your own model ID\nconst MODEL_ID = \'petsID\';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.ListModelVersions(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        model_id: MODEL_ID\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("List model versions failed, status: " + response.status.description);\n        }\n\n        for (const model_version of response.model_versions) {\n            console.log(JSON.stringify(model_version, null, 2));\n        }\n    }\n);',B='//index.js file\n\n//////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication and model ID.\n// Change these strings to run your own example. \n//////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = "YOUR_PAT_HERE";\nconst APP_ID = "YOUR_APP_ID_HERE";\n// Change this to whatever model you want to retrieve its concepts\nconst MODEL_ID = "YOUR_MODEL_ID_HERE"\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.ListModelConcepts(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        model_id: MODEL_ID\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("List model versions failed, status: " + response.status.description);\n        }\n\n        console.log(response);\n\n    }\n\n);',X='//index.js file\n\n////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the ID and version\n// of the model we want to get its details. Change these strings to run your own example.\n///////////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n// Change these to your own model ID and version\nconst MODEL_ID = \'petsID\';\nconst MODEL_VERSION_ID = \'7625a111b626438bb81a34c3b84d732f\';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.GetModelVersion(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        model_id: MODEL_ID,\n        version_id: MODEL_VERSION_ID\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Get model version failed, status: " + response.status.description);\n        }\n\n        const model_version = response.model_version;\n        console.log(JSON.stringify(model_version, null, 2));\n    }\n);',z='//index.js file\n\n//////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and model ID.\n// Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n// Change this to your own model ID \nconst MODEL_ID = \'petsID\';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.DeleteModel(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        model_id: MODEL_ID\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Delete model failed, status: " + response.status.description);\n        }\n    }\n);',K='//index.js file\n\n/////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the ID and version\n// of the model we want to delete. Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n// Change these to your own model ID and version\nconst MODEL_ID = \'petsID\';\nconst MODEL_VERSION_ID = \'304ae281b04349e5ae51d11be10ed95a\';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.DeleteModelVersion(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        model_id: MODEL_ID,\n        version_id: MODEL_VERSION_ID\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Delete model version failed, status: " + response.status.description);\n        }\n    }\n);',W='//index.js file\n\n//////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication and app ID. \n// Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.DeleteModels(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        delete_all: true\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Delete models failed, status: " + response.status.description);\n        }\n    }\n);',J='//index.js file\n\n////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication and app ID.\n// Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PostModelsSearches(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        model_query: {\n            name: "gen*", //This supports wild card queries like "gen*" to match "general" as an example\n            model_type_id: "concept"\n        }\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post model searches failed, status: " + response.status.description);\n        }\n\n        const models = response.models;\n        for (const model of models) {\n            console.log(JSON.stringify(model, null, 2));\n        }\n    }\n);',F='package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    /////////////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and how we want to update the model. \n    // Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to update your own model \n    static final String MODEL_ID = "petsID";\n    static final String MODEL_NAME = "newname";\n   \n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\t\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiModelResponse patchModelsResponse = stub.patchModels(\n            PatchModelsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .setAction("overwrite")\n            .addModels(\n                Model.newBuilder()\n                .setId(MODEL_ID)\n                .setName(MODEL_NAME)\n            ).build()\n        );\n\n        if (patchModelsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Patch models failed, status: " + patchModelsResponse.getStatus());\n        }\n\n    }\n\n}',Q='package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.status.StatusCode;\nimport com.google.protobuf.Struct;\nimport com.google.protobuf.Value;\n\npublic class ClarifaiExample {\n\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and how we want to update the model. \n    // Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    // Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to update your own model\n    static final String MODEL_ID = "petsID";\n    static final String MODEL_VERSION_ID = "0b87504a8c1a47dc88b69ce63f4cf814";\n    static final Double MINIMUM_VALUE = 0.95;\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\t\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n                .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        Struct.Builder params = Struct.newBuilder()\n                .putFields("min_value", Value.newBuilder().setNumberValue(MINIMUM_VALUE).build());\n\n        MultiModelVersionResponse patchModelsResponse = stub.patchModelVersions(\n                PatchModelVersionsRequest.newBuilder()\n                        .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n                        .setAction("overwrite")\n                        .setModelId(MODEL_ID)\n                        .addModelVersions(ModelVersion.newBuilder()\n                                .setId(MODEL_VERSION_ID)\n                                .setOutputInfo(OutputInfo.newBuilder()\n                                        .setParams(params)\n                                )\n                        )\n                        .build()\n        );\n\n        if (patchModelsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post model outputs failed, status: " + patchModelsResponse.getStatus());\n        }\n\n    }\n}\n',Z='package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.StatusCode;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\n\npublic class ClarifaiExample {\n\n    ////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication and app ID. \n    // Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiModelTypeResponse listModelTypesResponse = stub.listModelTypes(\n            ListModelTypesRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .build()\n        );\n\n        if (listModelTypesResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("List models failed, status: " + listModelTypesResponse.getStatus());\n        }\n\n        for (ModelType modelType: listModelTypesResponse.getModelTypesList()) {\n            System.out.println(modelType);\n        }\n\n    }\n\n}',ee='package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.StatusCode;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\n\npublic class ClarifaiExample {\n\n    //////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication and model ID.\n    // Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change this to whatever model you want to retrieve its concepts\n    static final String MODEL_ID = "YOUR_MODEL_ID_HERE";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n                .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiConceptResponse listModelConceptsResponse = stub.listModelConcepts(\n                ListModelConceptsRequest.newBuilder()\n                        .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n                        .setModelId(MODEL_ID)\n                        .build()\n        );\n\n        if (listModelConceptsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("List model versions failed, status: " + listModelConceptsResponse.getStatus());\n        }\n\n        System.out.println(listModelConceptsResponse);\n\n    }\n\n}\n',ne='package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.StatusCode;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport java.util.List;\n\npublic class ClarifaiExample {\n\n    ////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication and app ID. \n    // Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////// \n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiModelResponse listModelsResponse = stub.listModels(\n            ListModelsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .build()\n        );\n\n        if (listModelsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("List models failed, status: " + listModelsResponse.getStatus());\n        }\n\n        List<Model> models = listModelsResponse.getModelsList();\n        for (Model model : models) {\n            System.out.println(model);\n        }\n\n    }\n\n}',te='package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.StatusCode;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\n\npublic class ClarifaiExample {\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the model ID we\n    // want to get its details. Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change to your own model ID\n    static final String MODEL_ID = "petsID";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        SingleModelResponse getModelResponse = stub.getModel(\n            GetModelRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .setModelId(MODEL_ID)\n            .build()\n        );\n\n        if (getModelResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Get model failed, status: " + getModelResponse.getStatus());\n        }\n\n        Model model = getModelResponse.getModel();\n        System.out.println(model);\n\n    }\n\n}',se='package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.StatusCode;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\n\npublic class ClarifaiExample {\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the model ID we\n    // want to get its output info. Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change to your own model ID\n    static final String MODEL_ID = "petsID";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        SingleModelResponse getModelOutputInfoResponse = stub.getModelOutputInfo(\n            GetModelRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .setModelId(MODEL_ID)\n            .build()\n        );\n\n        if (getModelOutputInfoResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Get model output info failed, status: " + getModelOutputInfoResponse.getStatus());\n        }\n\n        Model model = getModelOutputInfoResponse.getModel();\n        System.out.println(model);\n    }\n\n}',ae='package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.StatusCode;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport java.util.List;\n\npublic class ClarifaiExample {\n\n    //////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the model ID we\n    // want to list its versions. Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change to your own model ID\n    static final String MODEL_ID = "petsID";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiModelVersionResponse listModelVersionsResponse = stub.listModelVersions(\n            ListModelVersionsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .setModelId(MODEL_ID)\n            .build()\n        );\n\n        if (listModelVersionsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("List model versions failed, status: " + listModelVersionsResponse.getStatus());\n        }\n\n        List<ModelVersion> modelVersions = listModelVersionsResponse.getModelVersionsList();\n        for (ModelVersion modelVersion : modelVersions) {\n            System.out.println(modelVersion);\n        }\n\n    }\n\n}',oe='package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.StatusCode;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\n\npublic class ClarifaiExample {\n\n    ////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the ID and version\n    // of the model we want to get its details. Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to your own model ID and version\n    static final String MODEL_ID = "petsID";\n    static final String MODEL_VERSION_ID = "7625a111b626438bb81a34c3b84d732f";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        SingleModelVersionResponse getModelVersionResponse = stub.getModelVersion(\n            GetModelVersionRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .setModelId(MODEL_ID)\n            .setVersionId(MODEL_VERSION_ID)\n            .build()\n        );\n\n        if (getModelVersionResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Get model version failed, status: " + getModelVersionResponse.getStatus());\n        }\n\n        ModelVersion modelVersion = getModelVersionResponse.getModelVersion();\n        System.out.println(modelVersion);\n\n    }\n\n}',ie='package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.BaseResponse;\nimport com.clarifai.grpc.api.status.StatusCode;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\n\npublic class ClarifaiExample {\n\n    //////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and model ID.\n    // Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change this to your own model ID \n    static final String MODEL_ID = "petsID";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        BaseResponse deleteModelResponse = stub.deleteModel(\n            DeleteModelRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .setModelId(MODEL_ID)\n            .build()\n        );\n\n        if (deleteModelResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Delete model failed, status: " + deleteModelResponse.getStatus());\n        }\n\n    }\n\n}',re='package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.BaseResponse;\nimport com.clarifai.grpc.api.status.StatusCode;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\n\npublic class ClarifaiExample {\n\n    /////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the ID and version\n    // of the model we want to delete. Change these strings to run your own example.\n    /////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to your own model ID and version\n    static final String MODEL_ID = "petsID";\n    static final String MODEL_VERSION_ID = "304ae281b04349e5ae51d11be10ed95a";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        BaseResponse deleteModelVersionResponse = stub.deleteModelVersion(\n            DeleteModelVersionRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .setModelId(MODEL_ID)\n            .setVersionId(MODEL_VERSION_ID)\n            .build()\n        );\n\n        if (deleteModelVersionResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Delete model version failed, status: " + deleteModelVersionResponse.getStatus());\n        }\n\n    }\n\n}',le='package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.BaseResponse;\nimport com.clarifai.grpc.api.status.StatusCode;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\n\npublic class ClarifaiExample {\n\n    //////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication and app ID. \n    // Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        BaseResponse deleteModelsResponse = stub.deleteModels(\n            DeleteModelsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .setDeleteAll(true)\n            .build()\n        );\n\n        if (deleteModelsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Delete models failed, status: " + deleteModelsResponse.getStatus());\n        }\n\n    }\n\n}',ce='package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.StatusCode;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport java.util.List;\n\npublic class ClarifaiExample {\n\n    ////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication and app ID.\n    // Change these strings to run your own example.\n    /////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiModelResponse postModelsSearchesResponse = stub.postModelsSearches(\n            PostModelsSearchesRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .setModelQuery(\n                ModelQuery.newBuilder()\n                .setName("gen*") // This supports wild card queries like "gen*" to match "general" as an example\n                .setModelTypeId("concept")\n            )\n            .build()\n        );\n\n        if (postModelsSearchesResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post models searches failed, status: " + postModelsSearchesResponse.getStatus());\n        }\n\n        List<Model> models = postModelsSearchesResponse.getModelsList();\n        for (Model model : models) {\n            System.out.println(model);\n        }\n\n    }\n\n}',pe='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and how we want to update the model. \n// Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change these to update your own model \n$MODEL_ID = "petsID";\n$MODEL_NAME = "newname";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\PatchModelsRequest;\nuse Clarifai\\Api\\Model;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID,\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PatchModels(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new PatchModelsRequest([\n        "user_app_id" => $userDataObject,\n        "action" => "overwrite",\n        "models" => [\n            new Model([\n                "id" => $MODEL_ID,\n                "name" => $MODEL_NAME\n            ])\n        ]\n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure\n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription() . " " . $response->getStatus()->getDetails());\n}\n\n?>\n',de='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and how we want to update the model. \n// Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change these to update your own model\n$MODEL_ID = "petsID";\n$MODEL_VERSION_ID = "b0b89c973e5d4b6d9599ce13da04b894";\n$MINIMUM_VALUE = 0.95;\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\PatchModelVersionsRequest;\nuse Clarifai\\Api\\ModelVersion;\nuse Clarifai\\Api\\OutputInfo;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\nuse Google\\Protobuf\\Struct;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID,\n]);\n\n// create Struct instance\n$params = new Struct();\n$params->min_value = $MINIMUM_VALUE;\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PatchModelVersions(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new PatchModelVersionsRequest([\n        "user_app_id" => $userDataObject,\n        "action" => "overwrite",\n        "model_id" => $MODEL_ID,\n        "model_versions" => [\n            new ModelVersion([\n                "id" => $MODEL_VERSION_ID,\n                "output_info" => new OutputInfo([\n                    "params" => $params\n                ])\n            ])\n        ]\n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure\n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription() . " " . $response->getStatus()->getDetails());\n}\n\n?>\n',ue='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication and app ID. \n// Change these strings to run your own example.\n///////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\ListModelTypesRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID,\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->ListModelTypes(\n        // The request object carries the request along with the request status and other metadata related to the request itself\n        new ListModelTypesRequest([\n            "user_app_id" => $userDataObject           \n        ]),\n        $metadata\n    )->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure\n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription() . " " . $response->getStatus()->getDetails());\n}\n\nforeach ($response->getModelTypes() as $modelType) {\n    echo $modelType->serializeToJsonString() . "\\n";\n}\n\n?>\n',he='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication and app ID. \n// Change these strings to run your own example.\n///////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\ListModelsRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID,\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->ListModels(\n        // The request object carries the request along with the request status and other metadata related to the request itself\n        new ListModelsRequest([\n            "user_app_id" => $userDataObject           \n        ]),\n        $metadata\n    )->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure\n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription() . " " . $response->getStatus()->getDetails());\n}\n\nforeach ($response->getModels() as $model) {\n    echo $model->serializeToJsonString() . "\\n";\n}\n\n?>\n',_e='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n///////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the model ID we\n// want to get its details. Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change to your own model ID\n$MODEL_ID = "petsID";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\GetModelRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID,\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->GetModel(\n        // The request object carries the request along with the request status and other metadata related to the request itself\n        new GetModelRequest([\n            "user_app_id" => $userDataObject,   \n            "model_id"=> $MODEL_ID        \n        ]),\n        $metadata\n    )->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure\n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription() . " " . $response->getStatus()->getDetails());\n}\n\n$model = $response->getModel();\necho $model->serializeToJsonString();\n\n?>\n',Ee='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n///////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the model ID we\n// want to get its output info. Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change to your own model ID\n$MODEL_ID = "petsID";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\GetModelRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID,\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->GetModelOutputInfo(\n        // The request object carries the request along with the request status and other metadata related to the request itself\n        new GetModelRequest([\n            "user_app_id" => $userDataObject,   \n            "model_id"=> $MODEL_ID        \n        ]),\n        $metadata\n    )->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure\n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription() . " " . $response->getStatus()->getDetails());\n}\n\n$model = $response->getModel();\necho $model->serializeToJsonString();\n\n?>\n',me='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n//////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication and model ID.\n// Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change this to whatever model you want to retrieve its concepts\n$MODEL_ID = "petsID";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\ListModelConceptsRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID,\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->ListModelConcepts(\n        // The request object carries the request along with the request status and other metadata related to the request itself\n        new ListModelConceptsRequest([\n            "user_app_id" => $userDataObject,   \n            "model_id"=> $MODEL_ID        \n        ]),\n        $metadata\n    )->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure\n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription() . " " . $response->getStatus()->getDetails());\n}\n\necho($response->serializeToJsonString());\n\n?>\n',Ie='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n//////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the model ID we\n// want to list its versions. Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change to your own model ID\n$MODEL_ID = "petsID";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\ListModelVersionsRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID,\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->ListModelVersions(\n        // The request object carries the request along with the request status and other metadata related to the request itself\n        new ListModelVersionsRequest([\n            "user_app_id" => $userDataObject,   \n            "model_id"=> $MODEL_ID        \n        ]),\n        $metadata\n    )->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure\n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription() . " " . $response->getStatus()->getDetails());\n}\n\nforeach ($response->getModelVersions() as $modelVersion) {\n    echo $modelVersion->serializeToJsonString() . "\\n";\n}\n\n?>\n',Ae='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n////////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the ID and version\n// of the model we want to get its details. Change these strings to run your own example\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change these to your own model ID and version\n$MODEL_ID = "petsID";\n$MODEL_VERSION_ID = "daf51b311c8644a486bbbe57c0680bc2";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\GetModelVersionRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID,\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->GetModelVersion(\n        // The request object carries the request along with the request status and other metadata related to the request itself\n        new GetModelVersionRequest([\n            "user_app_id" => $userDataObject,   \n            "model_id"=> $MODEL_ID,\n            "version_id" => $MODEL_VERSION_ID        \n        ]),\n        $metadata\n    )->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure\n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription() . " " . $response->getStatus()->getDetails());\n}\n\n$modelVersion = $response->getModelVersion();\necho $modelVersion->serializeToJsonString();\n\n?>\n',De='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and model ID.\n// Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change this to your own model ID \n$MODEL_ID = "petsID";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\DeleteModelRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID,\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->DeleteModel(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new DeleteModelRequest([  \n        "user_app_id" => $userDataObject,\n        "model_id" => $MODEL_ID\n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure\n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription() . " " . $response->getStatus()->getDetails());\n}\n\n?>\n',ge='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n///////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the ID and version\n// of the model we want to delete. Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change these to your own model ID and version\n$MODEL_ID = "petsID";\n$MODEL_VERSION_ID = "6c0effb1efff40e3add11afd2aa35375";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\DeleteModelVersionRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID,\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->DeleteModelVersion(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new DeleteModelVersionRequest([  \n        "user_app_id" => $userDataObject,\n        "model_id" => $MODEL_ID,\n        "version_id" => $MODEL_VERSION_ID\n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure\n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription() . " " . $response->getStatus()->getDetails());\n}\n\n?>\n',fe='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication and app ID. \n// Change these strings to run your own example.\n///////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\DeleteModelsRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID,\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->DeleteModels(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new DeleteModelsRequest([  \n        "user_app_id" => $userDataObject,\n        "delete_all" => true\n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure\n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription() . " " . $response->getStatus()->getDetails());\n}\n\n?>\n',Re='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication and app ID.\n// Change these strings to run your own example.\n///////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\PostModelsSearchesRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\nuse Clarifai\\Api\\ModelQuery;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID,\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PostModelsSearches(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new PostModelsSearchesRequest([  \n        "user_app_id" => $userDataObject,\n        "model_query" => new ModelQuery([\n            "name" => "gen*", // This supports wild card queries like "gen*" to match "general" as an example\n            "model_type_id" => "concept"\n        ])\n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure\n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription() . " " . $response->getStatus()->getDetails());\n}\n\nforeach ($response->getModels() as $model) {\n    echo $model->serializeToJsonString() . "\\n";\n}\n\n?>\n',Pe='curl -X PATCH "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/models" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "models": [\n      {\n        "id": "petsID",\n        "name": "newname"\n      }\n    ],\n    "action": "overwrite"\n  }\'\n ',Se='curl -X PATCH "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/models/YOUR_MODEL_ID_HERE/versions" \\\n-H "Authorization: Key YOUR_PAT_HERE" \\\n-H "Content-Type: application/json" \\\n-d \'{\n  "model_versions": [\n    {\n      "id": "YOUR_MODEL_VERSION_ID_HERE",\n      "output_info": {\n          "params": {\n            "min_value": 0.95\n          }\n      }\n    }\n  ],\n  "action": "overwrite"\n}\'\n',Oe='curl -X GET "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/models/types?per_page=20&page=1" \\\n    -H "Authorization: Key YOUR_PAT_HERE"',Te='curl -X GET "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/models/" \\\n    -H "Authorization: Key YOUR_PAT_HERE"',Ce='curl -X GET "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/models/YOUR_MODEL_ID_HERE" \\\n    -H "Authorization: Key YOUR_PAT_HERE"',Ue='curl -X GET "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/models/YOUR_MODEL_ID_HERE/output_info" \\\n    -H "Authorization: Key YOUR_PAT_HERE"',be='curl -X GET "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/models/YOUR_MODEL_ID_HERE/versions" \\\n    -H "Authorization: Key YOUR_PAT_HERE"',we='curl -X GET "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/models/YOUR_MODEL_ID_HERE/concepts" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n ',Ne='curl -X GET "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/models/YOUR_MODEL_ID_HERE/versions/YOUR_MODEL_VERSION_ID_HERE" \\\n    -H "Authorization: Key YOUR_PAT_HERE"',xe='curl -X DELETE "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/models/YOUR_MODEL_ID_HERE" \\\n    -H "Authorization: Key YOUR_PAT_HERE"',He='curl -X DELETE "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/models/YOUR_MODEL_ID_HERE/versions/YOUR_MODEL_VERSION_ID_HERE" \\\n    -H "Authorization: Key YOUR_PAT_HERE"',ve='curl -X DELETE "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/models/" \\\n    -H "Authorization: Key YOUR_PAT_HERE" \\\n    -d \'{\n        "delete_all": true\n    }\'',Me='# "gen*" supports wild card queries like "gen*" to match "general" as an example\n\ncurl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/models/searches" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "model_query": {\n      "name": "gen*",\n      "model_type_id": "concept"\n    }\n  }\'';var je=t(92027);const ye={description:"Learn how to get, update, search, and delete models",sidebar_position:4},Le="Manage Models",Ye={},$e=[{value:"Get",id:"get",level:2},{value:"List Model Types",id:"list-model-types",level:3},{value:"List Models",id:"list-models",level:3},{value:"Get Model by ID",id:"get-model-by-id",level:3},{value:"Get Model Output Info by ID",id:"get-model-output-info-by-id",level:3},{value:"List Model Concepts",id:"list-model-concepts",level:3},{value:"List Model Versions",id:"list-model-versions",level:3},{value:"Get Model Version by ID",id:"get-model-version-by-id",level:3},{value:"Update",id:"update",level:2},{value:"Update Model Name",id:"update-model-name",level:3},{value:"Update Model Configuration",id:"update-model-configuration",level:3},{value:"Other Patch Operations",id:"other-patch-operations",level:3},{value:"Search",id:"search",level:2},{value:"Search Models by Name and Type",id:"search-models-by-name-and-type",level:3},{value:"Delete",id:"delete",level:2},{value:"Delete a Model",id:"delete-a-model",level:3},{value:"Delete a Model Version",id:"delete-a-model-version",level:3},{value:"Delete all Models",id:"delete-all-models",level:3}];function Ge(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,o.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"manage-models",children:"Manage Models"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Learn how to get, update, search, and delete models"})}),"\n",(0,a.jsx)("hr",{}),"\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n",(0,a.jsx)(n.admonition,{type:"info",children:(0,a.jsxs)(n.p,{children:["Before using the ",(0,a.jsx)(n.a,{href:"https://docs.clarifai.com/additional-resources/api-overview/python-sdk",children:"Python SDK"}),", ",(0,a.jsx)(n.a,{href:"https://docs.clarifai.com/resources/api-overview/cli",children:"CLI"}),", ",(0,a.jsx)(n.a,{href:"https://docs.clarifai.com/additional-resources/api-overview/nodejs-sdk",children:"Node.js SDK"}),", or any of our ",(0,a.jsx)(n.a,{href:"https://docs.clarifai.com/additional-resources/api-overview/grpc-clients",children:"gRPC clients"}),", ensure they are properly installed on your machine. Refer to their respective installation guides for instructions on how to install and initialize them."]})}),"\n",(0,a.jsx)(n.h2,{id:"get",children:"Get"}),"\n",(0,a.jsx)(n.h3,{id:"list-model-types",children:"List Model Types"}),"\n",(0,a.jsxs)(n.p,{children:["Learn about the available model types and their hyperparameters. This endpoint lets you list all the possible models that are creatable (when ",(0,a.jsx)(n.code,{children:"creatable=true"}),") or generally in the platform (the other ones have ",(0,a.jsx)(n.code,{children:"creatable=false"}),")."]}),"\n",(0,a.jsxs)(i.A,{groupId:"code",children:[(0,a.jsx)(r.A,{value:"python",label:"Python (gRPC)",children:(0,a.jsx)(l.A,{className:"language-python",children:d})}),(0,a.jsx)(r.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,a.jsx)(l.A,{className:"language-javascript",children:C})}),(0,a.jsx)(r.A,{value:"nodejs",label:"Node.js (gRPC)",children:(0,a.jsx)(l.A,{className:"language-javascript",children:$})}),(0,a.jsx)(r.A,{value:"java",label:"Java (gRPC)",children:(0,a.jsx)(l.A,{className:"language-java",children:Z})}),(0,a.jsx)(r.A,{value:"php",label:"PHP (gRPC)",children:(0,a.jsx)(l.A,{className:"language-php",children:ue})}),(0,a.jsx)(r.A,{value:"curl",label:"cURL",children:(0,a.jsx)(l.A,{className:"language-bash",children:Oe})})]}),"\n",(0,a.jsx)(n.h3,{id:"list-models",children:"List Models"}),"\n",(0,a.jsx)(n.p,{children:"Below is an example of how to get a list of all the models you've created in your app."}),"\n",(0,a.jsx)(n.admonition,{type:"info",children:(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.strong,{children:"ListModels"})," endpoint will return details of all the models in your app, alongside the details of their latest versions."]})}),"\n",(0,a.jsx)(n.admonition,{type:"tip",children:(0,a.jsxs)(n.p,{children:["If you want to get a list of the models not within the scope of your app, you need to use your PAT while specifying the ",(0,a.jsx)(n.code,{children:"user_id"})," of their owner and the ",(0,a.jsx)(n.code,{children:"app_id"})," of the application that you\u2019re accessing. For example, to get Clarifai's models in the ",(0,a.jsx)(n.code,{children:"main"})," app, you need to use your PAT while specifying Clarifai's ",(0,a.jsx)(n.code,{children:"user_id"}),' as "clarifai" and ',(0,a.jsx)(n.code,{children:"app_id"}),' as "main" in the request.']})}),"\n",(0,a.jsxs)(i.A,{groupId:"code",children:[(0,a.jsx)(r.A,{value:"python",label:"Python SDK",children:(0,a.jsx)(l.A,{className:"language-python",children:R})}),(0,a.jsx)(r.A,{value:"CLI",label:"CLI",children:(0,a.jsx)(l.A,{className:"language-python",children:P})}),(0,a.jsx)(r.A,{value:"python2",label:"Python (gRPC)",children:(0,a.jsx)(l.A,{className:"language-python",children:u})}),(0,a.jsx)(r.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,a.jsx)(l.A,{className:"language-javascript",children:U})}),(0,a.jsx)(r.A,{value:"nodejs",label:"Node.js (gRPC)",children:(0,a.jsx)(l.A,{className:"language-javascript",children:G})}),(0,a.jsx)(r.A,{value:"java",label:"Java (gRPC)",children:(0,a.jsx)(l.A,{className:"language-java",children:ne})}),(0,a.jsx)(r.A,{value:"php",label:"PHP (gRPC)",children:(0,a.jsx)(l.A,{className:"language-php",children:he})}),(0,a.jsx)(r.A,{value:"curl",label:"cURL",children:(0,a.jsx)(l.A,{className:"language-bash",children:Te})})]}),"\n",(0,a.jsxs)(t,{children:[(0,a.jsx)("summary",{children:"Output Example"}),(0,a.jsx)(l.A,{className:"language-text",children:S})]}),"\n",(0,a.jsx)(n.h3,{id:"get-model-by-id",children:"Get Model by ID"}),"\n",(0,a.jsx)(n.p,{children:"All models have unique IDs. You can get a specific model by its ID."}),"\n",(0,a.jsxs)(i.A,{groupId:"code",children:[(0,a.jsx)(r.A,{value:"python",label:"Python (gRPC)",children:(0,a.jsx)(l.A,{className:"language-python",children:h})}),(0,a.jsx)(r.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,a.jsx)(l.A,{className:"language-javascript",children:b})}),(0,a.jsx)(r.A,{value:"nodejs",label:"Node.js (gRPC)",children:(0,a.jsx)(l.A,{className:"language-javascript",children:V})}),(0,a.jsx)(r.A,{value:"java",label:"Java (gRPC)",children:(0,a.jsx)(l.A,{className:"language-java",children:te})}),(0,a.jsx)(r.A,{value:"php",label:"PHP (gRPC)",children:(0,a.jsx)(l.A,{className:"language-php",children:_e})}),(0,a.jsx)(r.A,{value:"curl",label:"cURL",children:(0,a.jsx)(l.A,{className:"language-bash",children:Ce})})]}),"\n",(0,a.jsx)(n.h3,{id:"get-model-output-info-by-id",children:"Get Model Output Info by ID"}),"\n",(0,a.jsx)(n.p,{children:"The output info of a model lists the concepts contained in the latest version of the model\u2014unless a particular version is specified."}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"GetModelOutputInfo"})," endpoint does not support pagination. If you want to split your results into pages, use the below-described ",(0,a.jsx)(n.code,{children:"ListModelConcepts"})," endpoint."]})}),"\n",(0,a.jsxs)(i.A,{groupId:"code",children:[(0,a.jsx)(r.A,{value:"python",label:"Python (gRPC)",children:(0,a.jsx)(l.A,{className:"language-python",children:_})}),(0,a.jsx)(r.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,a.jsx)(l.A,{className:"language-javascript",children:w})}),(0,a.jsx)(r.A,{value:"nodejs",label:"Node.js (gRPC)",children:(0,a.jsx)(l.A,{className:"language-javascript",children:q})}),(0,a.jsx)(r.A,{value:"java",label:"Java (gRPC)",children:(0,a.jsx)(l.A,{className:"language-java",children:se})}),(0,a.jsx)(r.A,{value:"php",label:"PHP (gRPC)",children:(0,a.jsx)(l.A,{className:"language-php",children:Ee})}),(0,a.jsx)(r.A,{value:"curl",label:"cURL",children:(0,a.jsx)(l.A,{className:"language-bash",children:Ue})})]}),"\n",(0,a.jsx)(n.h3,{id:"list-model-concepts",children:"List Model Concepts"}),"\n",(0,a.jsxs)(n.p,{children:["Apart from the ",(0,a.jsx)(n.code,{children:"GetModelOutputInfo"})," endpoint, you can also use the ",(0,a.jsx)(n.code,{children:"ListModelConcepts"})," endpoint to list the concepts in your model."]}),"\n",(0,a.jsxs)(n.p,{children:["A major difference between the two is that the ",(0,a.jsx)(n.code,{children:"ListModelConcepts"})," endpoint supports ",(0,a.jsx)(n.a,{href:"https://docs.clarifai.com/api-guide/advanced-topics/pagination/",children:"pagination"}),", which lets you easily list concepts instead of displaying all of them at once."]}),"\n",(0,a.jsx)(n.admonition,{type:"info",children:(0,a.jsxs)(n.p,{children:["If you are using any of the Clarifai gRPC clients, the ",(0,a.jsx)(n.code,{children:"ListModelConcepts"})," endpoint is only available from release 8.10.0."]})}),"\n",(0,a.jsxs)(i.A,{groupId:"code",children:[(0,a.jsx)(r.A,{value:"python",label:"Python (gRPC)",children:(0,a.jsx)(l.A,{className:"language-python",children:E})}),(0,a.jsx)(r.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,a.jsx)(l.A,{className:"language-javascript",children:N})}),(0,a.jsx)(r.A,{value:"nodejs",label:"Node.js (gRPC)",children:(0,a.jsx)(l.A,{className:"language-javascript",children:B})}),(0,a.jsx)(r.A,{value:"java",label:"Java (gRPC)",children:(0,a.jsx)(l.A,{className:"language-java",children:ee})}),(0,a.jsx)(r.A,{value:"php",label:"PHP (gRPC)",children:(0,a.jsx)(l.A,{className:"language-php",children:me})}),(0,a.jsx)(r.A,{value:"curl",label:"cURL",children:(0,a.jsx)(l.A,{className:"language-bash",children:we})})]}),"\n",(0,a.jsx)(n.h3,{id:"list-model-versions",children:"List Model Versions"}),"\n",(0,a.jsx)(n.p,{children:"Every time you train a model, it creates a new version. You can list all the versions created."}),"\n",(0,a.jsxs)(i.A,{groupId:"code",children:[(0,a.jsx)(r.A,{value:"python",label:"Python (gRPC)",children:(0,a.jsx)(l.A,{className:"language-python",children:m})}),(0,a.jsx)(r.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,a.jsx)(l.A,{className:"language-javascript",children:x})}),(0,a.jsx)(r.A,{value:"nodejs",label:"Node.js (gRPC)",children:(0,a.jsx)(l.A,{className:"language-javascript",children:k})}),(0,a.jsx)(r.A,{value:"java",label:"Java (gRPC)",children:(0,a.jsx)(l.A,{className:"language-java",children:ae})}),(0,a.jsx)(r.A,{value:"php",label:"PHP (gRPC)",children:(0,a.jsx)(l.A,{className:"language-php",children:Ie})}),(0,a.jsx)(r.A,{value:"curl",label:"cURL",children:(0,a.jsx)(l.A,{className:"language-bash",children:be})})]}),"\n",(0,a.jsx)(n.h3,{id:"get-model-version-by-id",children:"Get Model Version by ID"}),"\n",(0,a.jsxs)(n.p,{children:["To get the details of a specific model version, you must provide the ",(0,a.jsx)(n.code,{children:"model_id"})," as well as the ",(0,a.jsx)(n.code,{children:"version_id"})," parameters. You can inspect the model version status to determine if your model is trained or still training."]}),"\n",(0,a.jsxs)(i.A,{groupId:"code",children:[(0,a.jsx)(r.A,{value:"python",label:"Python (gRPC)",children:(0,a.jsx)(l.A,{className:"language-python",children:I})}),(0,a.jsx)(r.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,a.jsx)(l.A,{className:"language-javascript",children:H})}),(0,a.jsx)(r.A,{value:"nodejs",label:"Node.js (gRPC)",children:(0,a.jsx)(l.A,{className:"language-javascript",children:X})}),(0,a.jsx)(r.A,{value:"java",label:"Java (gRPC)",children:(0,a.jsx)(l.A,{className:"language-java",children:oe})}),(0,a.jsx)(r.A,{value:"php",label:"PHP (gRPC)",children:(0,a.jsx)(l.A,{className:"language-php",children:Ae})}),(0,a.jsx)(r.A,{value:"curl",label:"cURL",children:(0,a.jsx)(l.A,{className:"language-bash",children:Ne})})]}),"\n",(0,a.jsx)(n.h2,{id:"update",children:"Update"}),"\n",(0,a.jsx)(n.p,{children:"After creating a model, you can perform patch operations on it by merging, removing, or overwriting data. By default, all actions support overwriting, but they handle lists of objects in specific ways."}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["The ",(0,a.jsx)(n.code,{children:"merge"})," action updates a ",(0,a.jsx)(n.code,{children:"key:value"})," pair with ",(0,a.jsx)(n.code,{children:"key:new_value"})," or appends to an existing list. For dictionaries, it merges entries that share the same ",(0,a.jsx)(n.code,{children:"id"})," field."]}),"\n",(0,a.jsxs)(n.li,{children:["The ",(0,a.jsx)(n.code,{children:"remove"})," action is only used to delete the model's cover image on the platform UI."]}),"\n",(0,a.jsxs)(n.li,{children:["The ",(0,a.jsx)(n.code,{children:"overwrite"})," action completely replaces an existing object with a new one."]}),"\n"]}),"\n",(0,a.jsx)(n.admonition,{type:"info",children:(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["The ",(0,a.jsx)(n.strong,{children:"PatchModels"})," endpoint allows you to patch only the model level fields, and nothing in the model version. It only updates things like name, description, notes, and other metadata type information field you may have."]}),"\n",(0,a.jsxs)(n.li,{children:["The ",(0,a.jsx)(n.strong,{children:"PatchModelVersions"})," endpoint allows you to change most of the model version fields like gettable, metadata, license, description, notes, and ",(0,a.jsx)(n.code,{children:"output_info"})," (not including concepts)."]}),"\n"]})}),"\n",(0,a.jsx)(n.h3,{id:"update-model-name",children:"Update Model Name"}),"\n",(0,a.jsxs)(n.p,{children:["Let's use the ",(0,a.jsx)(n.strong,{children:"PatchModels"})," endpoint to change the model name to ",(0,a.jsx)(n.code,{children:"newname"}),"."]}),"\n",(0,a.jsxs)(i.A,{groupId:"code",children:[(0,a.jsx)(r.A,{value:"python",label:"Python (gRPC)",children:(0,a.jsx)(l.A,{className:"language-python",children:c})}),(0,a.jsx)(r.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,a.jsx)(l.A,{className:"language-javascript",children:O})}),(0,a.jsx)(r.A,{value:"nodejs",label:"Node.js (gRPC)",children:(0,a.jsx)(l.A,{className:"language-javascript",children:L})}),(0,a.jsx)(r.A,{value:"java",label:"Java (gRPC)",children:(0,a.jsx)(l.A,{className:"language-java",children:F})}),(0,a.jsx)(r.A,{value:"php",label:"PHP (gRPC)",children:(0,a.jsx)(l.A,{className:"language-php",children:pe})}),(0,a.jsx)(r.A,{value:"curl",label:"cURL",children:(0,a.jsx)(l.A,{className:"language-bash",children:Pe})})]}),"\n",(0,a.jsx)(n.h3,{id:"update-model-configuration",children:"Update Model Configuration"}),"\n",(0,a.jsxs)(n.p,{children:["Let's use the ",(0,a.jsx)(n.strong,{children:"PatchModelVersions"})," endpoint to configure the minimum probability threshold for the outputs we want to view from the model. We can modify the ",(0,a.jsx)(n.code,{children:"min_value"})," parameter available for this model type to filter the outputs to see only the concepts with a probability score of 0.95 or higher."]}),"\n",(0,a.jsx)(n.admonition,{type:"tip",children:(0,a.jsxs)(n.p,{children:["For embedding-classifiers, the ",(0,a.jsx)(n.code,{children:"min_value"})," parameter falls within the range of 0 to 1, with a step size of 0.01. For most of the other model types, it falls within the range of 0 to 100, with a step size of 0.1."]})}),"\n",(0,a.jsxs)(i.A,{groupId:"code",children:[(0,a.jsx)(r.A,{value:"python",label:"Python (gRPC)",children:(0,a.jsx)(l.A,{className:"language-python",children:p})}),(0,a.jsx)(r.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,a.jsx)(l.A,{className:"language-javascript",children:T})}),(0,a.jsx)(r.A,{value:"nodejs",label:"Node.js (gRPC)",children:(0,a.jsx)(l.A,{className:"language-javascript",children:Y})}),(0,a.jsx)(r.A,{value:"java",label:"Java (gRPC)",children:(0,a.jsx)(l.A,{className:"language-java",children:Q})}),(0,a.jsx)(r.A,{value:"php",label:"PHP (gRPC)",children:(0,a.jsx)(l.A,{className:"language-php",children:de})}),(0,a.jsx)(r.A,{value:"curl",label:"cURL",children:(0,a.jsx)(l.A,{className:"language-bash",children:Se})})]}),"\n",(0,a.jsx)(n.h3,{id:"other-patch-operations",children:"Other Patch Operations"}),"\n",(0,a.jsx)(n.p,{children:"Below is an example of performing other patch operations on a model, such as updating its description and notes."}),"\n",(0,a.jsx)(i.A,{groupId:"code",children:(0,a.jsx)(r.A,{value:"python",label:"Python SDK",children:(0,a.jsx)(l.A,{className:"language-python",children:je.A})})}),"\n",(0,a.jsx)(n.h2,{id:"search",children:"Search"}),"\n",(0,a.jsx)(n.h3,{id:"search-models-by-name-and-type",children:"Search Models by Name and Type"}),"\n",(0,a.jsx)(n.p,{children:"You can search all your models by name and type of model."}),"\n",(0,a.jsxs)(i.A,{groupId:"code",children:[(0,a.jsx)(r.A,{value:"python",label:"Python (gRPC)",children:(0,a.jsx)(l.A,{className:"language-python",children:f})}),(0,a.jsx)(r.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,a.jsx)(l.A,{className:"language-javascript",children:y})}),(0,a.jsx)(r.A,{value:"nodejs",label:"Node.js (gRPC)",children:(0,a.jsx)(l.A,{className:"language-javascript",children:J})}),(0,a.jsx)(r.A,{value:"java",label:"Java (gRPC)",children:(0,a.jsx)(l.A,{className:"language-java",children:ce})}),(0,a.jsx)(r.A,{value:"php",label:"PHP (gRPC)",children:(0,a.jsx)(l.A,{className:"language-php",children:Re})}),(0,a.jsx)(r.A,{value:"curl",label:"cURL",children:(0,a.jsx)(l.A,{className:"language-bash",children:Me})})]}),"\n",(0,a.jsx)(n.h2,{id:"delete",children:"Delete"}),"\n",(0,a.jsx)(n.h3,{id:"delete-a-model",children:"Delete a Model"}),"\n",(0,a.jsxs)(n.p,{children:["You can delete a model by using the ",(0,a.jsx)(n.code,{children:"model_id"})," parameter."]}),"\n",(0,a.jsxs)(i.A,{groupId:"code",children:[(0,a.jsx)(r.A,{value:"python",label:"Python (gRPC)",children:(0,a.jsx)(l.A,{className:"language-python",children:A})}),(0,a.jsx)(r.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,a.jsx)(l.A,{className:"language-javascript",children:v})}),(0,a.jsx)(r.A,{value:"nodejs",label:"Node.js (gRPC)",children:(0,a.jsx)(l.A,{className:"language-javascript",children:z})}),(0,a.jsx)(r.A,{value:"java",label:"Java (gRPC)",children:(0,a.jsx)(l.A,{className:"language-java",children:ie})}),(0,a.jsx)(r.A,{value:"php",label:"PHP (gRPC)",children:(0,a.jsx)(l.A,{className:"language-php",children:De})}),(0,a.jsx)(r.A,{value:"curl",label:"cURL",children:(0,a.jsx)(l.A,{className:"language-bash",children:xe})})]}),"\n",(0,a.jsx)(n.h3,{id:"delete-a-model-version",children:"Delete a Model Version"}),"\n",(0,a.jsxs)(n.p,{children:["You can also delete a specific version of a model with the ",(0,a.jsx)(n.code,{children:"model_id"})," and ",(0,a.jsx)(n.code,{children:"version_id"})," parameters."]}),"\n",(0,a.jsxs)(i.A,{groupId:"code",children:[(0,a.jsx)(r.A,{value:"python",label:"Python (gRPC)",children:(0,a.jsx)(l.A,{className:"language-python",children:D})}),(0,a.jsx)(r.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,a.jsx)(l.A,{className:"language-javascript",children:M})}),(0,a.jsx)(r.A,{value:"nodejs",label:"Node.js (gRPC)",children:(0,a.jsx)(l.A,{className:"language-javascript",children:K})}),(0,a.jsx)(r.A,{value:"java",label:"Java (gRPC)",children:(0,a.jsx)(l.A,{className:"language-java",children:re})}),(0,a.jsx)(r.A,{value:"php",label:"PHP (gRPC)",children:(0,a.jsx)(l.A,{className:"language-php",children:ge})}),(0,a.jsx)(r.A,{value:"curl",label:"cURL",children:(0,a.jsx)(l.A,{className:"language-bash",children:He})})]}),"\n",(0,a.jsx)(n.h3,{id:"delete-all-models",children:"Delete all Models"}),"\n",(0,a.jsx)(n.p,{children:"If you would like to delete all models associated with an application, you can also do that."}),"\n",(0,a.jsx)(n.admonition,{type:"caution",children:(0,a.jsx)(n.p,{children:"Please proceed with extreme caution as deleted models cannot be recovered."})}),"\n",(0,a.jsxs)(i.A,{groupId:"code",children:[(0,a.jsx)(r.A,{value:"python",label:"Python (gRPC)",children:(0,a.jsx)(l.A,{className:"language-python",children:g})}),(0,a.jsx)(r.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,a.jsx)(l.A,{className:"language-javascript",children:j})}),(0,a.jsx)(r.A,{value:"nodejs",label:"Node.js (gRPC)",children:(0,a.jsx)(l.A,{className:"language-javascript",children:W})}),(0,a.jsx)(r.A,{value:"java",label:"Java (gRPC)",children:(0,a.jsx)(l.A,{className:"language-java",children:le})}),(0,a.jsx)(r.A,{value:"php",label:"PHP (gRPC)",children:(0,a.jsx)(l.A,{className:"language-php",children:fe})}),(0,a.jsx)(r.A,{value:"curl",label:"cURL",children:(0,a.jsx)(l.A,{className:"language-bash",children:ve})})]})]})}function Ve(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(Ge,{...e})}):Ge(e)}},11470:(e,n,t)=>{t.d(n,{A:()=>P});var s=t(96540),a=t(18215),o=t(17559),i=t(23104),r=t(56347),l=t(205),c=t(57485),p=t(31682),d=t(70679);function u(e){return s.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,s.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function h(e){const{values:n,children:t}=e;return(0,s.useMemo)(()=>{const e=n??function(e){return u(e).map(({props:{value:e,label:n,attributes:t,default:s}})=>({value:e,label:n,attributes:t,default:s}))}(t);return function(e){const n=(0,p.XI)(e,(e,n)=>e.value===n.value);if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[n,t])}function _({value:e,tabValues:n}){return n.some(n=>n.value===e)}function E({queryString:e=!1,groupId:n}){const t=(0,r.W6)(),a=function({queryString:e=!1,groupId:n}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,c.aZ)(a),(0,s.useCallback)(e=>{if(!a)return;const n=new URLSearchParams(t.location.search);n.set(a,e),t.replace({...t.location,search:n.toString()})},[a,t])]}function m(e){const{defaultValue:n,queryString:t=!1,groupId:a}=e,o=h(e),[i,r]=(0,s.useState)(()=>function({defaultValue:e,tabValues:n}){if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!_({value:e,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const t=n.find(e=>e.default)??n[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:o})),[c,p]=E({queryString:t,groupId:a}),[u,m]=function({groupId:e}){const n=function(e){return e?`docusaurus.tab.${e}`:null}(e),[t,a]=(0,d.Dv)(n);return[t,(0,s.useCallback)(e=>{n&&a.set(e)},[n,a])]}({groupId:a}),I=(()=>{const e=c??u;return _({value:e,tabValues:o})?e:null})();(0,l.A)(()=>{I&&r(I)},[I]);return{selectedValue:i,selectValue:(0,s.useCallback)(e=>{if(!_({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);r(e),p(e),m(e)},[p,m,o]),tabValues:o}}var I=t(92303);const A={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var D=t(74848);function g({className:e,block:n,selectedValue:t,selectValue:s,tabValues:o}){const r=[],{blockElementScrollPositionUntilNextRender:l}=(0,i.a_)(),c=e=>{const n=e.currentTarget,a=r.indexOf(n),i=o[a].value;i!==t&&(l(n),s(i))},p=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const t=r.indexOf(e.currentTarget)+1;n=r[t]??r[0];break}case"ArrowLeft":{const t=r.indexOf(e.currentTarget)-1;n=r[t]??r[r.length-1];break}}n?.focus()};return(0,D.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.A)("tabs",{"tabs--block":n},e),children:o.map(({value:e,label:n,attributes:s})=>(0,D.jsx)("li",{role:"tab",tabIndex:t===e?0:-1,"aria-selected":t===e,ref:e=>{r.push(e)},onKeyDown:p,onClick:c,...s,className:(0,a.A)("tabs__item",A.tabItem,s?.className,{"tabs__item--active":t===e}),children:n??e},e))})}function f({lazy:e,children:n,selectedValue:t}){const o=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){const e=o.find(e=>e.props.value===t);return e?(0,s.cloneElement)(e,{className:(0,a.A)("margin-top--md",e.props.className)}):null}return(0,D.jsx)("div",{className:"margin-top--md",children:o.map((e,n)=>(0,s.cloneElement)(e,{key:n,hidden:e.props.value!==t}))})}function R(e){const n=m(e);return(0,D.jsxs)("div",{className:(0,a.A)(o.G.tabs.container,"tabs-container",A.tabList),children:[(0,D.jsx)(g,{...n,...e}),(0,D.jsx)(f,{...n,...e})]})}function P(e){const n=(0,I.A)();return(0,D.jsx)(R,{...e,children:u(e.children)},String(n))}},19365:(e,n,t)=>{t.d(n,{A:()=>i});t(96540);var s=t(18215);const a={tabItem:"tabItem_Ymn6"};var o=t(74848);function i({children:e,hidden:n,className:t}){return(0,o.jsx)("div",{role:"tabpanel",className:(0,s.A)(a.tabItem,t),hidden:n,children:e})}},92027:(e,n,t)=>{t.d(n,{A:()=>s});const s='from clarifai.client.app import App\n\napp = App(app_id="YOUR_APP_ID_HERE", user_id="YOUR_USER_ID_HERE", pat="YOUR_PAT_HERE")\n\n# Update the details of the model\napp.patch_model(model_id="model_clusterer", action="merge", description="description", notes="notes", toolkits=["OpenAI"], use_cases=["llm"], languages=["en"], image_url="https://samples.clarifai.com/metro-north.jpg")\n\n# Update the model\'s image by specifying the \'remove\' action\napp.patch_model(model_id=\'model_clusterer\', action=\'remove\', image_url=\'https://samples.clarifai.com/metro-north.jpg\')\n'}}]);
"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[3909],{16873:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>we,contentTitle:()=>be,default:()=>je,frontMatter:()=>Oe,metadata:()=>a,toc:()=>Ne});const a=JSON.parse('{"id":"api-guide/data/create-get-update-delete","title":"Add, Get, Update, Delete","description":"Manage the data in your app","source":"@site/docs/api-guide/data/create-get-update-delete.md","sourceDirName":"api-guide/data","slug":"/api-guide/data/create-get-update-delete","permalink":"/api-guide/data/create-get-update-delete","draft":false,"unlisted":false,"editUrl":"https://github.com/Clarifai/docs/blob/main/docs/api-guide/data/create-get-update-delete.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"description":"Manage the data in your app","sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Supported Formats","permalink":"/api-guide/data/supported-formats"},"next":{"title":"Datasets","permalink":"/api-guide/data/datasets/"}}');var s=t(74848),i=t(28453),r=t(65537),o=t(79329),c=t(58069);const p="##########################################################################\n# In this section, we set the user authentication, app ID, and input URL. \n# Change these strings to run your own example.\n##########################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change this to whatever image input you want to add\nIMAGE_URL = 'https://samples.clarifai.com/metro-north.jpg'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\npost_inputs_response = stub.PostInputs(\n    service_pb2.PostInputsRequest(\n        user_app_id=userDataObject,\n        inputs=[\n            resources_pb2.Input(\n                data=resources_pb2.Data(\n                    image=resources_pb2.Image(\n                        url=IMAGE_URL,\n                        allow_duplicate_url=True\n                    )\n                )\n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif post_inputs_response.status.code != status_code_pb2.SUCCESS:\n    print(post_inputs_response.status)\n    raise Exception(\"Post inputs failed, status: \" + post_inputs_response.status.description)\n",u="##################################################################################\n# In this section, we set the user authentication, app ID, and the location\n# of the image we want as an input. Change these strings to run your own example.\n##################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change this to whatever image input you want to add\nIMAGE_FILE_LOCATION = 'YOUR_IMAGE_FILE_LOCATION'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\nwith open(IMAGE_FILE_LOCATION, \"rb\") as f:\n    file_bytes = f.read()\n\npost_inputs_response = stub.PostInputs(\n    service_pb2.PostInputsRequest(\n        user_app_id=userDataObject,\n        inputs=[\n            resources_pb2.Input(\n                data=resources_pb2.Data(\n                    image=resources_pb2.Image(\n                        base64=file_bytes\n                    )\n                )\n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif post_inputs_response.status.code != status_code_pb2.SUCCESS:\n    print(post_inputs_response.status)\n    raise Exception(\"Post inputs failed, status: \" + post_inputs_response.status.description)\n\n",l="##################################################################################\n# In this section, we set the user authentication, app ID, and the URLs and IDs \n# of the images we want as inputs. Change these strings to run your own example.\n##################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to whatever inputs you want to add\nIMAGE_URL_1 = 'https://samples.clarifai.com/metro-north.jpg'\nIMAGE_URL_2 = 'https://samples.clarifai.com/puppy.jpeg'\nINPUT_ID_1 = 'mytrain'\nINPUT_ID_2 = 'mypuppy'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\npost_inputs_response = stub.PostInputs(\n    service_pb2.PostInputsRequest(\n        user_app_id=userDataObject,\n        inputs=[\n            resources_pb2.Input(\n                id=INPUT_ID_1,\n                data=resources_pb2.Data(\n                    image=resources_pb2.Image(\n                        url=IMAGE_URL_1,\n                        allow_duplicate_url=True\n                    )\n                )\n            ),\n            resources_pb2.Input(\n                id=INPUT_ID_2,\n                data=resources_pb2.Data(\n                    image=resources_pb2.Image(\n                        url=IMAGE_URL_2,\n                        allow_duplicate_url=True\n                    )\n                )\n            ),\n        ]\n    ),\n    metadata=metadata\n)\n\nif post_inputs_response.status.code != status_code_pb2.SUCCESS:\n    print(\"There was an error with your request!\")\n    for input_object in post_inputs_response.inputs:\n        print(\"Input \" + input_object.id + \" status:\")\n        print(input_object.status)    \n    raise Exception(\"Post inputs failed, status: \" + post_inputs_response.status.description)\n",d="##################################################################################\n# In this section, we set the user authentication, app ID, and the input to add\n# with concept. Change these strings to run your own example.\n##################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to whatever input and concept you want to add\nIMAGE_URL = 'https://samples.clarifai.com/puppy.jpeg'\nCONCEPT_ID = 'charlie'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\npost_inputs_response = stub.PostInputs(\n    service_pb2.PostInputsRequest(\n        user_app_id=userDataObject,\n        inputs=[\n            resources_pb2.Input(\n                data=resources_pb2.Data(\n                    image=resources_pb2.Image(\n                        url=IMAGE_URL,\n                        allow_duplicate_url=True\n                    ),\n                    concepts=[resources_pb2.Concept(id=CONCEPT_ID, value=1.)]\n                )\n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif post_inputs_response.status.code != status_code_pb2.SUCCESS:\n    print(post_inputs_response.status)\n    raise Exception(\"Post inputs failed, status: \" + post_inputs_response.status.description)\n",_="##################################################################################\n# In this section, we set the user authentication, app ID, and the input to add\n# with concepts. Change these strings to run your own example.\n##################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to whatever input and concepts you want to add\nIMAGE_URL = 'https://samples.clarifai.com/puppy.jpeg'\nCONCEPT_IDS_LIST = ['one', 'two', 'three', 'four', 'five', 'six']\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\npost_inputs_response = stub.PostInputs(\n    service_pb2.PostInputsRequest(\n        user_app_id=userDataObject,\n        inputs=[\n            resources_pb2.Input(\n                data=resources_pb2.Data(\n                    image=resources_pb2.Image(\n                        url=IMAGE_URL,\n                        allow_duplicate_url=True\n                    ),\n                    # We use Python list comprehension to iterate through the list of concepts\n                    concepts=[resources_pb2.Concept(id=str(i), value=1.) for i in CONCEPT_IDS_LIST] \n                )\n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif post_inputs_response.status.code != status_code_pb2.SUCCESS:\n    print(post_inputs_response.status)\n    raise Exception(\"Post inputs failed, status: \" + post_inputs_response.status.description)\n",h="####################################################################################\n# In this section, we set the user authentication, app ID, and the custom metadata \n# and input we want to add. Change these strings to run your own example.\n####################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to whatever input and custom metadata you want to add\nCUSTOM_METADATA = {\"id\": \"id001\", \"type\": \"animal\", \"size\": 100}\nIMAGE_URL = 'https://samples.clarifai.com/puppy.jpeg'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\nfrom google.protobuf.struct_pb2 import Struct\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\ninput_metadata = Struct()\n\ninput_metadata.update(CUSTOM_METADATA)\n\npost_inputs_response = stub.PostInputs(\n    service_pb2.PostInputsRequest(\n        user_app_id=userDataObject,\n        inputs=[\n            resources_pb2.Input(\n                data=resources_pb2.Data(\n                    image=resources_pb2.Image(\n                        url=IMAGE_URL,\n                        allow_duplicate_url=True\n                    ),\n                    metadata=input_metadata\n                )\n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif post_inputs_response.status.code != status_code_pb2.SUCCESS:\n    print(post_inputs_response.status)\n    raise Exception(\"Post inputs failed, status: \" + post_inputs_response.status.description)\n",I="###############################################################\n# In this section, we set the user authentication and app ID. \n# Change these strings to run your own example.\n###############################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\nlist_inputs_response = stub.ListInputs(\n    service_pb2.ListInputsRequest(\n        user_app_id=userDataObject,\n        page=1, \n        per_page=10\n    ),\n    metadata=metadata\n)\n\nif list_inputs_response.status.code != status_code_pb2.SUCCESS:\n    print(list_inputs_response.status)\n    raise Exception(\"List inputs failed, status: \" + list_inputs_response.status.description)\n\nfor input_object in list_inputs_response.inputs:\n    print(input_object)\n",E="###############################################################\n# In this section, we set the user authentication and app ID. \n# Change these strings to run your own example.\n###############################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\n# To start from beginning, do not provide the last_id parameter.\nstream_inputs_response = stub.StreamInputs(\n    service_pb2.StreamInputsRequest(\n        user_app_id=userDataObject,\n        per_page=5,\n        # descending = True # Set to reverse order\n    ),\n    metadata=metadata\n)\n\nif stream_inputs_response.status.code != status_code_pb2.SUCCESS:\n    print(stream_inputs_response.status)\n    raise Exception(\"Stream inputs failed, status: \" + stream_inputs_response.status.description)\n\nprint(\"First response (starting from the first input):\")\nfor input_object in stream_inputs_response.inputs:\n    print(\"\\t\" + input_object.id)\n\nlast_id = stream_inputs_response.inputs[-1].id\n\n# Set last_id to get the next set of inputs. The returned inputs will not include the last_id input.\nstream_inputs_response = stub.StreamInputs(\n    service_pb2.StreamInputsRequest(\n        user_app_id=userDataObject,\n        per_page=5, \n        last_id=last_id\n    ),\n    metadata=metadata\n)\n\nprint(f\"Second response (first input is the one following input ID {last_id}):\")\nfor input_object in stream_inputs_response.inputs:\n    print(\"\\t\" + input_object.id)",A="###############################################################################\n# In this section, we set the user authentication, app ID, and the input's ID\n# Change these strings to run your own example.\n###############################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change this ID to whatever input you want its details\nINPUT_ID = 'eec128fd81974543bafff48702edca4d'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\nget_input_response = stub.GetInput(\n    service_pb2.GetInputRequest(\n        user_app_id=userDataObject, \n        input_id=INPUT_ID\n    ),\n    metadata=metadata\n)\n\nif get_input_response.status.code != status_code_pb2.SUCCESS:\n    print(get_input_response.status)\n    raise Exception(\"Get input failed, status: \" + get_input_response.status.description)\n\ninput_object = get_input_response.input\nprint(input_object)",f="##################################################################\n# In this section, we set the user authentication and the app ID.\n# Change these strings to run your own example.\n##################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\nget_input_count_response = stub.GetInputCount(\n    service_pb2.GetInputCountRequest(\n         user_app_id=userDataObject            \n    ),\n    metadata=metadata\n)\n\nif get_input_count_response.status.code != status_code_pb2.SUCCESS:\n    print(get_input_count_response.status)\n    raise Exception(\"Get input count failed, status: \" + get_input_count_response.status.description)\n\ncounts = get_input_count_response.counts\nprint(counts)",g="##############################################################################\n# In this section, we set the user authentication, app ID, and the input and \n# concept ID we want to update. Change these strings to run your own example.\n##############################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these based on the update you want to make\nINPUT_ID = 'eec128fd81974543bafff48702edca4d'\nCONCEPT_ID_1 = 'tree'\nCONCEPT_ID_2 = 'water'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\npatch_inputs_response = stub.PatchInputs(\n    service_pb2.PatchInputsRequest(\n        user_app_id=userDataObject,\n        action=\"merge\",  # Supported actions: overwrite, merge, remove\n        inputs=[\n            resources_pb2.Input(\n                id=INPUT_ID,\n                data=resources_pb2.Data(\n                    concepts=[\n                        resources_pb2.Concept(id=CONCEPT_ID_1, value=1.),  # 1 means true, this concept is present.\n                        resources_pb2.Concept(id=CONCEPT_ID_2, value=0.)  # 0 means false, this concept is not present.\n                    ]\n                )\n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif patch_inputs_response.status.code != status_code_pb2.SUCCESS:\n    print(patch_inputs_response.status)\n    raise Exception(\"Patch inputs failed, status: \" + patch_inputs_response.status.description)\n",P="################################################################################\n# In this section, we set the user authentication, app ID, and the inputs and \n# concepts IDs we want to update. Change these strings to run your own example.\n################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these based on the updates you want to make\nINPUT_ID_1 = '2e9c4a86555d40ffb47c7b045d7e3048'\nINPUT_ID_2 = '52b467c2005946cbbbe7a5eec76e29cf'\nCONCEPT_ID_1 = 'tree'\nCONCEPT_ID_2 = 'water'\nCONCEPT_ID_3 = 'animal'\nCONCEPT_ID_4 = 'fruit'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\npatch_inputs_response = stub.PatchInputs(\n    service_pb2.PatchInputsRequest(\n        user_app_id=userDataObject,\n        action=\"merge\",  # Supported actions: overwrite, merge, remove.\n        inputs=[\n            resources_pb2.Input(\n                id=INPUT_ID_1,\n                data=resources_pb2.Data(\n                    concepts=[\n                        resources_pb2.Concept(id=CONCEPT_ID_1, value=1.),  # 1 means true, this concept is present.\n                        resources_pb2.Concept(id=CONCEPT_ID_2, value=0.)  # 0 means false, this concept is not present.\n                    ]\n                )\n            ),\n            resources_pb2.Input(\n                id=INPUT_ID_2,\n                data=resources_pb2.Data(\n                    concepts=[\n                        resources_pb2.Concept(id=CONCEPT_ID_3, value=1.),\n                        resources_pb2.Concept(id=CONCEPT_ID_4, value=0.)\n                    ]\n                )\n            ),\n        ]\n    ),\n    metadata=metadata\n)\n\nif patch_inputs_response.status.code != status_code_pb2.SUCCESS:\n    print(patch_inputs_response.status)\n    raise Exception(\"Patch inputs failed, status: \" + patch_inputs_response.status.description)\n",D="##############################################################################\n# In this section, we set the user authentication, app ID, and the input and \n# concept ID. Change these strings to run your own example.\n##############################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these based on the concept you want to remove\nINPUT_ID = '2e9c4a86555d40ffb47c7b045d7e3048'\nCONCEPT_ID = 'water'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\npatch_inputs_response = stub.PatchInputs(\n    service_pb2.PatchInputsRequest(\n        user_app_id=userDataObject,\n        action=\"remove\",  # Supported actions: overwrite, merge, remove.\n        inputs=[\n            resources_pb2.Input(\n                id=INPUT_ID,\n                data=resources_pb2.Data(\n                    concepts=[\n                        # We're removing the concept, so there's no need to specify\n                        # the concept value.\n                        resources_pb2.Concept(id=CONCEPT_ID),\n                    ]\n                )\n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif patch_inputs_response.status.code != status_code_pb2.SUCCESS:\n    print(patch_inputs_response.status)\n    raise Exception(\"Patch inputs failed, status: \" + patch_inputs_response.status.description)\n",T="##############################################################################\n# In this section, we set the user authentication, app ID, and the inputs and \n# concepts IDs. Change these strings to run your own example.\n##############################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these based on the concepts you want to remove\nINPUT_ID_1 = '2e9c4a86555d40ffb47c7b045d7e3048'\nINPUT_ID_2 = '52b467c2005946cbbbe7a5eec76e29cf'\nCONCEPT_ID_1 = 'tree'\nCONCEPT_ID_2 = 'water'\nCONCEPT_ID_3 = 'animal'\nCONCEPT_ID_4 = 'fruit'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\npatch_inputs_response = stub.PatchInputs(\n    service_pb2.PatchInputsRequest(\n        user_app_id=userDataObject,\n        action=\"remove\",  # Supported actions: overwrite, merge, remove.\n        inputs=[\n            resources_pb2.Input(\n                id=INPUT_ID_1,\n                data=resources_pb2.Data(\n                    concepts=[\n                        # We're removing the concepts, so there's no need to specify\n                        # the concept value.\n                        resources_pb2.Concept(id=CONCEPT_ID_1),\n                        resources_pb2.Concept(id=CONCEPT_ID_2),\n                    ]\n                )\n            ),\n            resources_pb2.Input(\n                id=INPUT_ID_2,\n                data=resources_pb2.Data(\n                    concepts=[\n                        resources_pb2.Concept(id=CONCEPT_ID_3),\n                        resources_pb2.Concept(id=CONCEPT_ID_4),\n                    ]\n                )\n            ),\n        ]\n    ),\n    metadata=metadata\n)\n\nif patch_inputs_response.status.code != status_code_pb2.SUCCESS:\n    print(patch_inputs_response.status)\n    raise Exception(\"Patch inputs failed, status: \" + patch_inputs_response.status.description)\n",C="##############################################################################\n# In this section, we set the user authentication, app ID, and the ID of the \n# input we want to delete. Change these strings to run your own example.\n##############################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change this based on the input you want to delete\nINPUT_ID = '2e9c4a86555d40ffb47c7b045d7e3048'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\ndelete_input_response = stub.DeleteInput(\n    service_pb2.DeleteInputRequest(\n    user_app_id=userDataObject, \n    input_id=INPUT_ID\n    ),\n    metadata=metadata\n)\n\nif delete_input_response.status.code != status_code_pb2.SUCCESS:\n    print(delete_input_response.status)\n    raise Exception(\"Delete input failed, status: \" + delete_input_response.status.description)\n",m="##############################################################################\n# In this section, we set the user authentication, app ID, and the IDs of the \n# inputs we want to delete. Change these strings to run your own example.\n##############################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these based on the inputs you want to delete\nINPUT_ID_1 = '97eb76d22e964c7cbbf06a51532c6fbe'\nINPUT_ID_2 = '86b1272feabb45d4bcd2de51eedd729b'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\ndelete_inputs_response = stub.DeleteInputs(\n    service_pb2.DeleteInputsRequest(\n    user_app_id=userDataObject, \n    ids=[INPUT_ID_1, INPUT_ID_2]\n    ),\n    metadata=metadata\n)\n\nif delete_inputs_response.status.code != status_code_pb2.SUCCESS:\n    print(delete_inputs_response.status)\n    raise Exception(\"Delete input failed, status: \" + delete_inputs_response.status.description)\n",S="\x3c!--index.html file--\x3e\n\n<script>\n    ////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and input URL. \n    // Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = 'YOUR_USER_ID_HERE';\n    // Your PAT (Personal Access Token) can be found in the Account's Security section\n    const PAT = 'YOUR_PAT_HERE';\n    const APP_ID = 'YOUR_APP_ID_HERE';\n    // Change this to whatever image input you want to add\n    const IMAGE_URL = 'https://samples.clarifai.com/metro-north.jpg';\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        \"user_app_id\": {\n            \"user_id\": USER_ID,\n            \"app_id\": APP_ID\n        },\n        \"inputs\": [\n            {\n                \"data\": {\n                    \"image\": {\n                        \"url\": IMAGE_URL,\n                        \"allow_duplicate_url\": true\n                    }\n                }\n            }\n        ]\n    });\n\n    const requestOptions = {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        },\n        body: raw\n    };\n\n    fetch(\"https://api.clarifai.com/v2/inputs\", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n\n<\/script>",R="\x3c!--index.html file--\x3e\n\n<script>\n    ////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the location\n    // of the image we want as an input. Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = 'YOUR_USER_ID_HERE';\n    // Your PAT (Personal Access Token) can be found in the Account's Security section\n    const PAT = 'YOUR_PAT_HERE';\n    const APP_ID = 'YOUR_APP_ID_HERE';\n    // Change this to whatever image input you want to add\n    const BYTES_STRING = '/9j/4AAQSkZJRgABAQAAAQABAAD/2wBDAAUDBAQEAwUEBAQFBQUGBwwIBwcHBw8LCwkMEQ8SEhEPERETFhwXExQaFRERGCEYGh0dHx8fExciJCIeJBweHx7/2wBDAQUFBQcGBw4ICA4eFBEUHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh7/wAARCAAoACgDASIAAhEBAxEB/8QAGQAAAgMBAAAAAAAAAAAAAAAAAAYDBQcE/8QAMBAAAQMDAwMDAgQHAAAAAAAAAQIDBAAFEQYSIQcTMTJBURRhCBYikSNScXKhsdH/xAAZAQACAwEAAAAAAAAAAAAAAAAFBgIDBAf/xAAtEQABAwMBBgQHAQAAAAAAAAABAgMRAAQhMQUSE0FRYQaBocEUFiJCcrHR8P/aAAwDAQACEQMRAD8A3+RYY1unSYzCS0ttZUkAgktn0q5yT7jPyDUC4wdGwycH5U2Kt9ZQ7VI1qw5PkvQy3CSVPpf7aQjuKyFH25xzn3pHn3TVNy01Hl2hyy6YdkSpKsS9sl/6RlI3rRu3dxWd6spwnAGPIJTfl925fcLaoSDHXvyo6i9SlCQrU9wKln3OyWiaDN1RAbW3kKbSd7gPtwMkH/tTWy9afuy1iPfnXMAblITwkE4yf08cn3pSbYt1uts24XH6fUbiLAuY1MWyGkLEmUW0rcCRvUpQ5CtwKQCPgi4S1ZbDe4sd9NntDEe79m3uOBLTr0IR9jzodSMqUpTu9JJ8owD7UTT4ZCfv9PbP7860m+s+HBSrejWRuz2kAxoesGYxTW/Zlpkwo1vkuSly3UgKWQUhHJUvIHsAaKTemF8XE6sWmxyZkiaZrMh1jv8ArQNpUVqB8FW0njHqx4zRVVhsph1KlKk5xQ+7uHmikaSJrQerMByet2IwvtuTLa4xv2k7Rk84H9x/esHv92d01boenLXGcuiWrFIhLlpbcaQ2/JdK3VJCkAq2pAR7Zz7YxWudY9fxNIdQbNGkR5TyX4aisNNpUMFZAzkj4NK0jq9ZpbLr0PSlzkhrlZDaQlP3P8Q4/ap3F87bPucJEkx/hHv60b2TYXLrKN5sramYECSQRk9M6c6zmJ+eb5Hi22M7cnWGIQgFLbX0zSo4PDa1YBcTgDyMjJ/qbGPabH08SJt1Uzc9QqRliGg5QySPKvgc+TyfYDmmTUWpNYz7ctxoQdPQshCktupckDJUPUcJT6DwMq8YyaQ9VL0pCS8zapcq4SVOBZmPDO8/cnknlWcDBwn4NYnPjLkQ+qE9OtOVlYpeVHDCEkkkJyT+SuQzy5Y0ru6Ez511/Efa5s1fdkOtyVurIxgdlQAA9gOKKPwolU7remU5hCGYEgo38KUv9I/0TRTDYJCWQBSF4rIN/CRgAR0iTpVD1j1g/qDqJcJqlKcjB9bcda142MpOEJAzgeMnjyTSyze5KEuNRpDoDvC0oe4X9iAeaKKFK+oya6fbOqYbDTeEiAPKpHdS3gBLYc7RQkp3ApQog+cq8nwPJrljzxnPZbUfnugn/NFFRgEVch9xKsH0H8pg6e3x3T3UC1ajaZITGkJLoS4MKbOUrzz/ACKVRRRVzVwtoQmhG1NkWu0HuI+JI8u/Kv/Z';\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        \"user_app_id\": {\n            \"user_id\": USER_ID,\n            \"app_id\": APP_ID\n        },\n        \"inputs\": [\n            {\n                \"data\": {\n                    \"image\": {\n                        \"base64\": BYTES_STRING\n                    },\n                }\n            }\n        ]\n    });\n\n    const requestOptions = {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        },\n        body: raw\n    };\n\n    fetch(\"https://api.clarifai.com/v2/inputs\", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n\n<\/script>",U='\x3c!--index.html file--\x3e\n\n<script>\n    ////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the URLs and IDs \n    // of the images we want as inputs. Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = \'YOUR_USER_ID_HERE\';\n    // Your PAT (Personal Access Token) can be found in the Account\'s Security section\n    const PAT = \'YOUR_PAT_HERE\';\n    const APP_ID = \'YOUR_APP_ID_HERE\';\n    // Change these to whatever inputs you want to add\n    const IMAGE_URL_1 = \'https://samples.clarifai.com/metro-north.jpg\';\n    const IMAGE_URL_2 = \'https://samples.clarifai.com/puppy.jpeg\';\n    const INPUT_ID_1 = \'input1\';\n    const INPUT_ID_2 = \'puppy1\';\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        "user_app_id": {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        "inputs": [\n            {\n                "data": {\n                    "image": {\n                        "url": IMAGE_URL_1,\n                        "allow_duplicate_url": true\n                    }\n                },\n                "id": INPUT_ID_1\n            },\n            {\n                "data": {\n                    "image": {\n                        "url": IMAGE_URL_2,\n                        "allow_duplicate_url": true\n                    }\n                },\n                "id": INPUT_ID_2\n            }\n        ]\n    });\n\n    const requestOptions = {\n        method: \'POST\',\n        headers: {\n            \'Accept\': \'application/json\',\n            \'Authorization\': \'Key \' + PAT\n        },\n        body: raw\n    };\n\n    fetch("https://api.clarifai.com/v2/inputs", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log(\'error\', error));\n\n<\/script>',O='\x3c!--index.html file--\x3e\n\n<script>\n    ////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the input to add\n    // with concept. Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = \'YOUR_USER_ID_HERE\';\n    // Your PAT (Personal Access Token) can be found in the Account\'s Security section\n    const PAT = \'YOUR_PAT_HERE\';\n    const APP_ID = \'YOUR_APP_ID_HERE\';\n    // Change these to whatever input and concept you want to add\n    const IMAGE_URL = \'https://samples.clarifai.com/puppy.jpeg\';\n    const CONCEPT_ID = \'charlie\';\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        "user_app_id": {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        "inputs": [\n            {\n                "data": {\n                    "image": {\n                        "url": IMAGE_URL,\n                        "allow_duplicate_url": true\n                    },\n                    // Optionally add a concept with your input\n                    "concepts": [\n                        {\n                            "id": CONCEPT_ID,\n                            "value": 1\n                        }\n                    ]\n                }\n            }\n        ]\n    });\n\n    const requestOptions = {\n        method: \'POST\',\n        headers: {\n            \'Accept\': \'application/json\',\n            \'Authorization\': \'Key \' + PAT\n        },\n        body: raw\n    };\n\n    fetch("https://api.clarifai.com/v2/inputs", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log(\'error\', error));\n\n<\/script>',b="\x3c!--index.html file--\x3e\n\n<script>\n    ////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the input to add\n    // with concepts. Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = 'YOUR_USER_ID_HERE';\n    // Your PAT (Personal Access Token) can be found in the Account's Security section\n    const PAT = 'YOUR_PAT_HERE';\n    const APP_ID = 'YOUR_APP_ID_HERE';\n    // Change these to whatever input and concepts you want to add\n    const IMAGE_URL = 'https://samples.clarifai.com/puppy.jpeg';\n    const CONCEPT_IDS_LIST = ['one', 'two', 'three', 'four', 'five', 'six'];\n\n    // We use a map function to iterate through the list of concepts\n    const myFunction = () => {\n       return CONCEPT_IDS_LIST.map((concept)=>({\"id\":concept,\"value\":1}));\n    }\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        \"user_app_id\": {\n            \"user_id\": USER_ID,\n            \"app_id\": APP_ID\n        },\n        \"inputs\": [\n            {\n                \"data\": {\n                    \"image\": {\n                        \"url\": IMAGE_URL,\n                        \"allow_duplicate_url\": true\n                    },\n                    \n                    \"concepts\": myFunction()\n                }\n            }\n        ]\n    });\n\n    const requestOptions = {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        },\n        body: raw\n    };\n\n    fetch(\"https://api.clarifai.com/v2/inputs\", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n\n<\/script>",w='\x3c!--index.html file--\x3e\n\n<script>\n    ///////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the input and custom\n    // metadata we want to add. Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = \'YOUR_USER_ID_HERE\';\n    // Your PAT (Personal Access Token) can be found in the Account\'s Security section\n    const PAT = \'YOUR_PAT_HERE\';\n    const APP_ID = \'YOUR_APP_ID_HERE\';\n    // Change these to whatever input and custom metadata you want to add\n    const IMAGE_URL = \'https://samples.clarifai.com/puppy.jpeg\';\n    const CUSTOM_METADATA = { "id": "id001", "type": "animal", "size": 100 };\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        "user_app_id": {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        "inputs": [\n            {\n                "data": {\n                    "image": {\n                        "url": IMAGE_URL,\n                        "allow_duplicate_url": true\n                    },\n                    "metadata": CUSTOM_METADATA\n                }\n            }\n        ]\n    });\n\n    const requestOptions = {\n        method: \'POST\',\n        headers: {\n            \'Accept\': \'application/json\',\n            \'Authorization\': \'Key \' + PAT\n        },\n        body: raw\n    };\n\n    fetch("https://api.clarifai.com/v2/inputs", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log(\'error\', error));\n\n<\/script>',N="\x3c!--index.html file--\x3e\n\n<script>\n  //////////////////////////////////////////////////////////////////////\n  // In this section, we set the user authentication and app ID. \n  // Change these strings to run your own example.\n  //////////////////////////////////////////////////////////////////////\n\n  const USER_ID = 'YOUR_USER_ID_HERE';\n  // Your PAT (Personal Access Token) can be found in the Account's Security section\n  const PAT = 'YOUR_PAT_HERE';\n  const APP_ID = 'YOUR_APP_ID_HERE';\n\n  ///////////////////////////////////////////////////////////////////////////\n  // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n  ////////////////////////////////////////////////////////////////////////////\n\n  const requestOptions = {\n    method: 'GET',\n    headers: {\n      'Accept': 'application/json',\n      'Authorization': 'Key ' + PAT\n    }\n  };\n\n  fetch(`https://api.clarifai.com/v2/users/${USER_ID}/apps/${APP_ID}/inputs?page=1&per_page=10`, requestOptions)\n    .then(response => response.text())\n    .then(result => console.log(result))\n    .catch(error => console.log('error', error));\n\n<\/script>",H="\x3c!--index.html file--\x3e\n\n<script>\n    //////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication and app ID. \n    // Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////\n\n    const USER_ID = 'YOUR_USER_ID_HERE';\n    // Your PAT (Personal Access Token) can be found in the Account's Security section\n    const PAT = 'YOUR_PAT_HERE';\n    const APP_ID = 'YOUR_APP_ID_HERE';\n\n    ///////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ////////////////////////////////////////////////////////////////////////////\n\n    const requestOptions = {\n        method: 'GET',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        }\n    }\n\n    // We can implement the API call with a Promise\n    const streamInputs = (reqAddress) => {\n        return new Promise(async (resolve, reject) => {\n            fetch(reqAddress, requestOptions)\n                .then(data => {\n                    return data.json()\n                }).then(data => {\n                    resolve(data)\n                }).catch(e => {\n                    console.error('REQUEST -> ', e)\n                    reject(e)\n                })\n        })\n    }\n\n    // Async function that will allow us to wait for the first API call\n    const run = async () => {\n\n        const REQ_ADDRESS = `https://api.clarifai.com/v2/users/${USER_ID}/apps/${APP_ID}/inputs/stream?per_page=5`\n\n        const req1 = await streamInputs(REQ_ADDRESS)\n\n        // Grab the last input_id from the first request to use it in the second request\n        const lastId = req1['inputs'][req1['inputs'].length - 1].id\n\n        const req2 = await streamInputs(REQ_ADDRESS + `&last_id=${lastId}`)\n\n        // You're only receiving the inputs from up to the last_id onward\n        console.log(req2)\n    }\n\n    run()\n\n<\/script>",j="\x3c!--index.html file--\x3e\n\n<script>\n    /////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and input ID.\n    // Change these strings to run your own example.\n    /////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = 'YOUR_USER_ID_HERE';\n    // Your PAT (Personal Access Token) can be found in the Account's Security section\n    const PAT = 'YOUR_PAT_HERE';\n    const APP_ID = 'YOUR_APP_ID_HERE';\n    // Change this ID to whatever input you want its details\n    const INPUT_ID = 'ff79664eefe94db1878f51931f9d6fd9';\n\n    ////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ////////////////////////////////////////////////////////////////////////////\n\n    const requestOptions = {\n        method: 'GET',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        }\n    };\n\n    fetch(`https://api.clarifai.com/v2/users/${USER_ID}/apps/${APP_ID}/inputs/${INPUT_ID}`, requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n<\/script>",x="\x3c!--index.html file--\x3e\n\n<script>\n    //////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication and app ID.\n    // Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////\n\n    const USER_ID = 'YOUR_USER_ID_HERE';\n    // Your PAT (Personal Access Token) can be found in the Account's Security section\n    const PAT = 'YOUR_PAT_HERE';\n    const APP_ID = 'YOUR_APP_ID_HERE';\n\n    ////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ////////////////////////////////////////////////////////////////////////////\n\n\n    const requestOptions = {\n        method: 'GET',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        }\n    };\n\n    fetch(`https://api.clarifai.com/v2/users/${USER_ID}/apps/${APP_ID}/inputs/status`, requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n\n<\/script>",v='\x3c!--index.html file--\x3e\n\n<script>\n    //////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and input ID and concept IDs\n    // we want to update. Change these strings to run your own example.\n    /////////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = \'YOUR_USER_ID_HERE\';\n    // Your PAT (Personal Access Token) can be found in the Account\'s Security section\n    const PAT = \'YOUR_PAT_HERE\';\n    const APP_ID = \'YOUR_APP_ID_HERE\';\n    // Change these based on the update you want to make\n    const INPUT_ID = \'7c5f489bcafe43fe8a71c68091cb64ce\';\n    const CONCEPT_ID_1 = \'tree\';\n    const CONCEPT_ID_2 = \'water\';\n\n    ////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        "user_app_id": {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        "inputs": [\n            {\n                "id": INPUT_ID,\n                "data": {\n                    "concepts": [\n                        {\n                            "id": CONCEPT_ID_1,\n                            "value": 1\n                        },\n                        {\n                            "id": CONCEPT_ID_2,\n                            "value": 0\n                        }\n                    ]\n                }\n            }\n        ],\n        "action": "merge"\n    });\n\n    const requestOptions = {\n        method: \'PATCH\',\n        headers: {\n            \'Accept\': \'application/json\',\n            \'Authorization\': \'Key \' + PAT\n        },\n        body: raw\n    };\n\n    fetch("https://api.clarifai.com/v2/inputs", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log(\'error\', error));\n\n<\/script>',y='\x3c!--index.html file--\x3e\n\n<script>\n    ////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the inputs and \n    // concepts IDs we want to update. Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = \'YOUR_USER_ID_HERE\';\n    // Your PAT (Personal Access Token) can be found in the Account\'s Security section\n    const PAT = \'YOUR_PAT_HERE\';\n    const APP_ID = \'YOUR_APP_ID_HERE\';\n    // Change these based on the updates you want to make\n    const INPUT_ID_1 = \'c99f1b557d1d43d1916b46f8ce4a0487\';\n    const INPUT_ID_2 = \'1be923b967f148dbb4e588cf4a723da1\';\n    const CONCEPT_ID_1 = \'tree\';\n    const CONCEPT_ID_2 = \'water\';\n    const CONCEPT_ID_3 = \'animal\';\n    const CONCEPT_ID_4 = \'fruit\';\n\n    ////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        "user_app_id": {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        "inputs": [\n            {\n                "id": INPUT_ID_1,\n                "data": {\n                    "concepts": [\n                        {\n                            "id": CONCEPT_ID_1,\n                            "value": 1\n                        },\n                        {\n                            "id": CONCEPT_ID_2,\n                            "value": 0\n                        }\n                    ]\n                }\n            },\n            {\n                "id": INPUT_ID_2,\n                "data": {\n                    "concepts": [\n                        {\n                            "id": CONCEPT_ID_3,\n                            "value": 1\n                        },\n                        {\n                            "id": CONCEPT_ID_4,\n                            "value": 0\n                        }\n                    ]\n                }\n            }\n        ],\n        "action": "merge"\n    });\n\n    const requestOptions = {\n        method: \'PATCH\',\n        headers: {\n            \'Accept\': \'application/json\',\n            \'Authorization\': \'Key \' + PAT\n        },\n        body: raw\n    };\n\n    fetch("https://api.clarifai.com/v2/inputs", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log(\'error\', error));\n\n<\/script>',Y="\x3c!--index.html file--\x3e\n\n<script>\n    ////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the input and \n    // concept ID. Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = 'YOUR_USER_ID_HERE';\n    // Your PAT (Personal Access Token) can be found in the Account's Security section\n    const PAT = 'YOUR_PAT_HERE';\n    const APP_ID = 'YOUR_APP_ID_HERE';\n    // Change these based on the concept you want to remove\n    const INPUT_ID = 'c99f1b557d1d43d1916b46f8ce4a0487';\n    const CONCEPT_ID = 'water';\n\n    ////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        \"user_app_id\": {\n            \"user_id\": USER_ID,\n            \"app_id\": APP_ID\n        },\n        \"inputs\": [\n            {\n                \"id\": INPUT_ID,\n                \"data\": {\n                    \"concepts\": [\n                        { \"id\": CONCEPT_ID }\n                    ]\n                }\n            }\n        ],\n        \"action\": \"remove\"\n    });\n\n    const requestOptions = {\n        method: 'PATCH',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        },\n        body: raw\n    };\n\n    fetch(\"https://api.clarifai.com/v2/inputs\", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n\n<\/script>",L='\x3c!--index.html file--\x3e\n\n<script>\n    ////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the inputs and \n    // concepts IDs. Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = \'YOUR_USER_ID_HERE\';\n    // Your PAT (Personal Access Token) can be found in the Account\'s Security section\n    const PAT = \'YOUR_PAT_HERE\';\n    const APP_ID = \'YOUR_APP_ID_HERE\';\n    // Change these based on the concepts you want to remove\n    const INPUT_ID_1 = \'ff79664eefe94db1878f51931f9d6fd9\';\n    const INPUT_ID_2 = \'f54b89ef64874888a64f7016cf6f33ad\';\n    const CONCEPT_ID_1 = \'tree\';\n    const CONCEPT_ID_2 = \'water\';\n    const CONCEPT_ID_3 = \'animal\';\n    const CONCEPT_ID_4 = \'fruit\';\n\n    ////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        "user_app_id": {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        "inputs": [\n            {\n                "id": INPUT_ID_1,\n                "data": {\n                    "concepts": [\n                        {\n                            "id": CONCEPT_ID_1\n                        },\n                        {\n                            "id": CONCEPT_ID_2\n                        }\n                    ]\n                }\n            },\n            {\n                "id": INPUT_ID_2,\n                "data": {\n                    "concepts": [\n                        {\n                            "id": CONCEPT_ID_3\n                        },\n                        {\n                            "id": CONCEPT_ID_4\n                        }\n                    ]\n                }\n            }\n        ],\n        "action": "remove"\n    });\n\n    const requestOptions = {\n        method: \'PATCH\',\n        headers: {\n            \'Accept\': \'application/json\',\n            \'Authorization\': \'Key \' + PAT\n        },\n        body: raw\n    };\n\n    fetch("https://api.clarifai.com/v2/inputs", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log(\'error\', error));\n\n<\/script>',$="\x3c!--index.html file--\x3e\n\n<script>\n    ////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the ID of the \n    // input we want to delete. Change these strings to run your own example\n    ////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = 'YOUR_USER_ID_HERE';\n    // Your PAT (Personal Access Token) can be found in the Account's Security section\n    const PAT = 'YOUR_PAT_HERE';\n    const APP_ID = 'YOUR_APP_ID_HERE';\n    // Change this based on the input you want to delete\n    const INPUT_ID = 'c83f332be7274f19950a87bd3e89d766';\n\n    ////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ////////////////////////////////////////////////////////////////////////////\n\n    const requestOptions = {\n        method: 'DELETE',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        }\n    };\n\n    fetch(`https://api.clarifai.com/v2/users/${USER_ID}/apps/${APP_ID}/inputs/${INPUT_ID}`, requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n\n<\/script>",G="\x3c!--index.html file--\x3e\n\n<script>\n    ////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the IDs of the \n    // inputs we want to delete. Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = 'YOUR_USER_ID_HERE';\n    // Your PAT (Personal Access Token) can be found in the Account's Security section\n    const PAT = 'YOUR_PAT_HERE';\n    const APP_ID = 'YOUR_APP_ID_HERE';\n    // Change these based on the inputs you want to delete\n    const INPUT_ID_1 = 'eefbb9fa8f2342d2b4f19b8083098c9e';\n    const INPUT_ID_2 = '148582f7916e4001b24579b89a6f6a82';\n\n    ////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        \"user_app_id\": {\n            \"user_id\": USER_ID,\n            \"app_id\": APP_ID\n        },\n        \"ids\": [INPUT_ID_1, INPUT_ID_2]\n    });\n\n    const requestOptions = {\n        method: 'DELETE',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        },\n        body: raw\n    };\n\n    fetch(\"https://api.clarifai.com/v2/inputs\", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n\n<\/script>",B='//index.js file\n\n////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and input URL. \n// Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n// Change this to whatever image input you want to add\nconst IMAGE_URL = \'https://samples.clarifai.com/metro-north.jpg\';\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PostInputs(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        inputs: [\n            { data: { image: { url: IMAGE_URL, allow_duplicate_url: true } } }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            console.log(response.status);\n            throw new Error("Post inputs failed, status: " + response.status.description);\n        }\n    }\n\n);',k='//index.js file\n\n////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the location\n// of the image we want as an input. Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n// Change this to whatever image input you want to add\nconst IMAGE_FILE_LOCATION = \'YOUR_IMAGE_FILE_LOCATION\';\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nconst fs = require("fs");\nconst imageBytes = fs.readFileSync(IMAGE_FILE_LOCATION);\n\nstub.PostInputs(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n\n        inputs: [\n            { data: { image: { base64: imageBytes } } }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            console.log(response.status)\n            throw new Error("Post inputs failed, status: " + response.status.description);\n        }\n    }\n);',M='//index.js file\n\n////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the URLs and IDs \n// of the images we want as inputs. Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n// Change these to whatever inputs you want to add\nconst IMAGE_URL_1 = \'https://samples.clarifai.com/metro-north.jpg\';\nconst IMAGE_URL_2 = \'https://samples.clarifai.com/puppy.jpeg\';\nconst INPUT_ID_1 = \'train1\';\nconst INPUT_ID_2 = \'puppy1\';\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PostInputs(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n\n        inputs: [\n            {\n                id: INPUT_ID_1,\n                data: {image: {url: IMAGE_URL_1, allow_duplicate_url: true}}\n            },\n            {\n                id: INPUT_ID_2,\n                data: {image: {url: IMAGE_URL_2, allow_duplicate_url: true}}\n            },\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            for (const input of response.inputs) {\n                console.log("Input " + input.id + " status: ");\n                console.log(JSON.stringify(input.status, null, 2) + "\\n");\n            }\n\n            throw new Error("Post inputs failed, status: " + response.status.description);\n        }\n    }\n);',q='//index.js file\n\n////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the input to add\n// with concept. Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n// Change these to whatever input and concept you want to add\nconst IMAGE_URL = \'https://samples.clarifai.com/puppy.jpeg\';\nconst CONCEPT_ID = \'charlie\';\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PostInputs(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        inputs: [{\n            data: {\n                image: { url: IMAGE_URL, allow_duplicate_url: true },\n                concepts: [{ id: CONCEPT_ID, value: 1. }]\n            }\n        }]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post inputs failed, status: " + response.status.description);\n        }\n    }\n);',J="//index.js file\n\n////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the input to add\n// with concepts. Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = 'YOUR_USER_ID_HERE';\n// Your PAT (Personal Access Token) can be found in the Account's Security section\nconst PAT = 'YOUR_PAT_HERE';\nconst APP_ID = 'YOUR_APP_ID_HERE';\n// Change these to whatever input and concepts you want to add\nconst IMAGE_URL = 'https://samples.clarifai.com/puppy.jpeg';\nconst CONCEPT_IDS_LIST = ['one', 'two', 'three', 'four', 'five', 'six'];\n\n// We use a map function to iterate through the list of concepts\nconst myFunction = () => {\n    return CONCEPT_IDS_LIST.map((concept) => ({\"id\":concept,\"value\":1}));\n }\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require(\"clarifai-nodejs-grpc\");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set(\"authorization\", \"Key \" + PAT);\n\nstub.PostInputs(\n    {\n        user_app_id: {\n            \"user_id\": USER_ID,\n            \"app_id\": APP_ID\n        },\n        inputs: [{\n            data: {\n                image: { url: IMAGE_URL, allow_duplicate_url: true },\n                concepts: myFunction()\n            }\n        }]\n    },\n    metadata,    \n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }        \n        if (response.status.code !== 10000) {\n            throw new Error(\"Post inputs failed, status: \" + response.status.description);\n        }\n    }    \n);",W='//index.js file\n\n///////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the input and custom\n// metadata we want to add. Change these strings to run your own example.\n///////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n// Change these to whatever input and custom metadata you want to add\nconst IMAGE_URL = \'https://samples.clarifai.com/puppy.jpeg\';\nconst CUSTOM_METADATA = { id: "id001", type: "animal", size: 100 };\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PostInputs(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        inputs: [{\n            data: {\n                image: { url: IMAGE_URL, allow_duplicate_url: true },\n                metadata: CUSTOM_METADATA\n            }\n        }]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post inputs failed, status: " + response.status.description);\n        }\n    }\n);',X='//index.js file\n\n//////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication and app ID. \n// Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.ListInputs(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        page: 1,\n        per_page: 10\n\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("List inputs failed, status: " + response.status.description);\n        }\n\n        for (const input of response.inputs) {\n            console.log(JSON.stringify(input, null, 2));\n        }\n    }\n);',z='//index.js file\n\n//////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication and app ID. \n// Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.StreamInputs(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        per_page: 10\n    },\n    metadata,\n    (err, firstResponse) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (firstResponse.status.code !== 10000) {\n            throw new Error("Received status: " + firstResponse.status.description + "\\n" + firstResponse.status.details);\n\n        }\n\n        console.log("First response (starting from the first input):");\n        for (const input of firstResponse.inputs) {\n            console.log("\\t" + input.id);\n        }\n\n        const lastId = firstResponse.inputs[firstResponse.inputs.length - 1].id;\n\n        stub.StreamInputs(\n            {\n                user_app_id: {\n                    "user_id": USER_ID,\n                    "app_id": APP_ID\n                },\n                last_id: lastId,\n                per_page: 10\n            },\n            metadata,\n            (err, secondResponse) => {\n                if (err) {\n                    throw new Error(err);\n                }\n\n                if (secondResponse.status.code !== 10000) {\n                    throw new Error("Received status: " + secondResponse.status.description + "\\n" + secondResponse.status.details);\n                }\n\n                console.log("Second response (first input is the one following input ID " + lastId + ")");\n                for (const input of secondResponse.inputs) {\n                    console.log("\\t" + input.id);\n                }\n\n            }\n        );\n    }\n);',K='//index.js file\n\n/////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and input ID\n// Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n// Change this ID to whatever input you want its details\nconst INPUT_ID = \'ff79664eefe94db1878f51931f9d6fd9\';\n\n////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.GetInput(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        input_id: INPUT_ID\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Get input failed, status: " + response.status.description);\n        }\n\n        const input = response.input;\n        console.log(JSON.stringify(input, null, 2));\n    }\n);\n',V='//index.js file\n\n//////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication and app ID.\n// Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.GetInputCount(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        }\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Get input count failed, status: " + response.status.description);\n        }\n\n        const counts = response.counts;\n        console.log(JSON.stringify(counts, null, 2));\n    }\n);\n',Q='//index.js file\n\n//////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and input ID and concept IDs\n// we want to update. Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n// Change these based on the update you want to make\nconst INPUT_ID = \'7c5f489bcafe43fe8a71c68091cb64ce\';\nconst CONCEPT_ID_1 = \'tree\';\nconst CONCEPT_ID_2 = \'water\';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PatchInputs(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        action: "merge",  // Supported actions: overwrite, merge, remove\n        inputs: [\n            {\n                id: INPUT_ID,\n                // 1 means true, this concept is present\n                // 0 means false, this concept is not present\n                data: { concepts: [{ id: CONCEPT_ID_1, value: 1 }, { id: CONCEPT_ID_2, value: 0 }] }\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Patch inputs failed, status: " + response.status.description);\n        }\n    }\n);',F="//index.js file\n\n////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the inputs and \n// concepts IDs we want to update. Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = 'YOUR_USER_ID_HERE';\n// Your PAT (Personal Access Token) can be found in the Account's Security section\nconst PAT = 'YOUR_PAT_HERE';\nconst APP_ID = 'YOUR_APP_ID_HERE';\n// Change these based on the updates you want to make\nconst INPUT_ID_1 = 'c99f1b557d1d43d1916b46f8ce4a0487';\nconst INPUT_ID_2 = '1be923b967f148dbb4e588cf4a723da1';\nconst CONCEPT_ID_1 = 'tree';\nconst CONCEPT_ID_2 = 'water';\nconst CONCEPT_ID_3 = 'animal';\nconst CONCEPT_ID_4 = 'fruit';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require(\"clarifai-nodejs-grpc\");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set(\"authorization\", \"Key \" + PAT);\n\nstub.PatchInputs(\n    {\n        user_app_id: {\n            \"user_id\": USER_ID,\n            \"app_id\": APP_ID\n        },\n        action: \"merge\",  // Supported actions: overwrite, merge, remove.\n        inputs: [\n            {\n                id: INPUT_ID_1,\n                data: { concepts: [{ id: CONCEPT_ID_1, value: 1 }, { id: CONCEPT_ID_2, value: 0 }] }\n            },\n            {\n                id: INPUT_ID_2,\n                data: { concepts: [{ id: CONCEPT_ID_3, value: 1 }, { id: CONCEPT_ID_4, value: 0 }] }\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error(\"Patch inputs failed, status: \" + response.status.description);\n        }\n    }\n);",Z='//index.js file\n\n//////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the input and \n// concept ID. Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n// Change these based on the concept you want to remove\nconst INPUT_ID = \'c99f1b557d1d43d1916b46f8ce4a0487\';\nconst CONCEPT_ID = \'tree\';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PatchInputs(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        action: "remove",  // Supported actions: overwrite, merge, remove\n        inputs: [\n            {\n                id: INPUT_ID,\n                // We\'re removing the concept, so there\'s no need to specify\n                // the concept value\n                data: { concepts: [{ id: CONCEPT_ID }] }\n            },\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Patch inputs failed, status: " + response.status.description);\n        }\n    }\n);',nn="//index.js file\n\n////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the inputs and \n// concepts IDs. Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = 'YOUR_USER_ID_HERE';\n// Your PAT (Personal Access Token) can be found in the Account's Security section\nconst PAT = 'YOUR_PAT_HERE';\nconst APP_ID = 'YOUR_APP_ID_HERE';\n// Change these based on the concepts you want to remove\nconst INPUT_ID_1 = 'ff79664eefe94db1878f51931f9d6fd9';\nconst INPUT_ID_2 = 'f54b89ef64874888a64f7016cf6f33ad';\nconst CONCEPT_ID_1 = 'tree';\nconst CONCEPT_ID_2 = 'water';\nconst CONCEPT_ID_3 = 'animal';\nconst CONCEPT_ID_4 = 'fruit';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require(\"clarifai-nodejs-grpc\");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set(\"authorization\", \"Key \" + PAT);\n\nstub.PatchInputs(\n    {\n        user_app_id: {\n            \"user_id\": USER_ID,\n            \"app_id\": APP_ID\n        },\n        action: \"remove\",  // Supported actions: overwrite, merge, remove\n        inputs: [\n            {\n                id: INPUT_ID_1,\n                // We're removing the concepts, so there's no need to specify\n                // the concept value\n                data: { concepts: [{ id: CONCEPT_ID_1 }, { id: CONCEPT_ID_2 }] }\n            },\n            {\n                id: INPUT_ID_2,\n                data: { concepts: [{ id: CONCEPT_ID_3 }, { id: CONCEPT_ID_4 }] }\n            },\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error(\"Patch inputs failed, status: \" + response.status.description);\n        }\n    }\n);",en='//index.js file\n\n////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the ID of the \n// input we want to delete. Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n// Change this based on the input you want to delete\nconst INPUT_ID = \'ff79664eefe94db1878f51931f9d6fd9\';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call+\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.DeleteInput(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        input_id: INPUT_ID\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Delete input failed, status: " + response.status.description);\n        }\n    }\n);',tn='//index.js file\n\n////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the IDs of the \n// inputs we want to delete. Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n// Change these based on the inputs you want to delete\nconst INPUT_ID_1 = \'d4319bb362d9487e812970a3ed9ba028\';\nconst INPUT_ID_2 = \'fc449e98ce3847c788954e3fec871d02\';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.DeleteInputs(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        ids: [INPUT_ID_1, INPUT_ID_2]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Delete inputs failed, status: " + response.status.description);\n        }\n    }\n);',an='package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.status.*;\n\npublic class ClarifaiExample {\n\n    ////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and input URL.\n    // Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change this to whatever image input you want to add\n    static final String IMAGE_URL = "https://samples.clarifai.com/metro-north.jpg";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiInputResponse postInputsResponse = stub.postInputs(\n            PostInputsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .addInputs(\n                Input.newBuilder().setData(\n                    Data.newBuilder().setImage(\n                        Image.newBuilder()\n                        .setUrl(IMAGE_URL)\n                        .setAllowDuplicateUrl(true)\n                    )\n                )\n            ).build()\n        );\n\n        if (postInputsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post inputs failed, status: " + postInputsResponse.getStatus());\n        }\n\n    }\n\n}',sn='package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\nimport com.google.protobuf.ByteString;\nimport java.io.File;\nimport java.io.IOException;\nimport java.nio.file.Files;\n\npublic class ClarifaiExample {\n\n    ////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the location\n    // of the image we want as an input. Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change this to whatever image input you want to add\n    static final String IMAGE_FILE_LOCATION = "YOUR_IMAGE_FILE_LOCATION";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) throws IOException {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiInputResponse postInputsResponse = stub.postInputs(\n            PostInputsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .addInputs(\n                Input.newBuilder().setData(\n                    Data.newBuilder().setImage(\n                        Image.newBuilder()\n                        .setBase64(ByteString.copyFrom(Files.readAllBytes(\n                            new File(IMAGE_FILE_LOCATION).toPath()\n                        )))\n                    )\n                )\n            ).build()\n        );\n\n        if (postInputsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post inputs failed, status: " + postInputsResponse.getStatus());\n        }\n    }\n}',rn='package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n\npublic class ClarifaiExample {\n\n    ////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the URLs and IDs\n    // of the images we want as inputs. Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to whatever inputs you want to add\n    static final String IMAGE_URL_1 = "https://samples.clarifai.com/metro-north.jpg";\n    static final String IMAGE_URL_2 = "https://samples.clarifai.com/puppy.jpeg";\n    static final String INPUT_ID_1 = "train1";\n    static final String INPUT_ID_2 = "puppy1";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiInputResponse postInputsResponse = stub.postInputs(\n            PostInputsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .addInputs(\n                Input.newBuilder()\n                .setId(INPUT_ID_1)\n                .setData(\n                    Data.newBuilder().setImage(\n                        Image.newBuilder()\n                        .setUrl(IMAGE_URL_1)\n                        .setAllowDuplicateUrl(true)\n                    )\n                )\n            )\n            .addInputs(\n                Input.newBuilder()\n                .setId(INPUT_ID_2)\n                .setData(\n                    Data.newBuilder().setImage(\n                        Image.newBuilder()\n                        .setUrl(IMAGE_URL_2)\n                        .setAllowDuplicateUrl(true)\n                    )\n                )\n            )\n            .build()\n        );\n\n        if (postInputsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            for (Input input: postInputsResponse.getInputsList()) {\n                System.out.println("Input " + input.getId() + " status: ");\n                System.out.println(input.getStatus() + "\\n");\n            }\n\n            throw new RuntimeException("Post inputs failed, status: " + postInputsResponse.getStatus());\n        }\n\n    }\n}',on='package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n\npublic class ClarifaiExample {\n\n    ////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the input to add\n    // with concept. Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to whatever input and concept you want to add\n    static final String IMAGE_URL = "https://samples.clarifai.com/puppy.jpeg";\n    static final String CONCEPT_ID = "charlie";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiInputResponse postInputsResponse = stub.postInputs(\n            PostInputsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .addInputs(\n                Input.newBuilder().setData(\n                    Data.newBuilder()\n                    .setImage(\n                        Image.newBuilder()\n                        .setUrl(IMAGE_URL)\n                        .setAllowDuplicateUrl(true)\n                    )\n                    .addConcepts(\n                        Concept.newBuilder()\n                        .setId(CONCEPT_ID)\n                        .setValue(1f)\n                    )\n                )\n            ).build()\n        );\n\n        if (postInputsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post inputs failed, status: " + postInputsResponse.getStatus());\n        }\n\n    }\n}',cn='package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\nimport com.google.protobuf.Struct;\nimport com.google.protobuf.Value;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\n\npublic class ClarifaiExample {\n\n    //////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the input  \n    // we want to add. Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change this to whatever input you want to add\n    static final String IMAGE_URL = "https://samples.clarifai.com/puppy.jpeg";\n   \n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n       \n        MultiInputResponse postInputsResponse = stub.postInputs(\n            PostInputsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .addInputs(\n                Input.newBuilder().setData(\n                    Data.newBuilder()\n                        .setImage(\n                            Image.newBuilder()\n                                .setUrl(IMAGE_URL)\n                                .setAllowDuplicateUrl(true)\n                        )\n                        .setMetadata(\n                            Struct.newBuilder()\n                                .putFields("id", Value.newBuilder().setStringValue("id001").build())\n                                .putFields("type", Value.newBuilder().setStringValue("animal").build())\n                                .putFields("size", Value.newBuilder().setNumberValue(100).build())\n                        )\n                )\n            ).build()\n        );\n\n        if (postInputsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post inputs failed, status: " + postInputsResponse.getStatus());\n        }            \n       \n    }  \n}',pn='package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\npublic class ClarifaiExample {\n\n    ////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication and app ID.\n    // Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n       \n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));      \n       \n        MultiInputResponse listInputsResponse = stub.listInputs(\n            ListInputsRequest.newBuilder()\n                .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n                .setPage(1)\n                .setPerPage(10)\n                .build()\n        );\n\n        if (listInputsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("List inputs failed, status: " + listInputsResponse.getStatus());\n        }\n\n        for (Input input : listInputsResponse.getInputsList()) {\n            System.out.println(input);\n        }      \n       \n    }  \n}',un='package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\nimport java.util.List;\n\npublic class ClarifaiExample {\n\n    ////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication and app ID. \n    // Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\t\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        // To start from beginning, do not provide the last ID parameter.\n        MultiInputResponse firstStreamInputsResponse = stub.streamInputs(\n            StreamInputsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .setPerPage(10)\n            .build()\n        );\n\n        if (firstStreamInputsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Stream inputs failed, status: " + firstStreamInputsResponse.getStatus());\n        }\n\n        System.out.println("First response (starting from the first input):");\n        List < Input > inputs = firstStreamInputsResponse.getInputsList();\n        for (Input input: inputs) {\n            System.out.println("\\t" + input.getId());\n        }\n\n        String lastId = inputs.get(inputs.size() - 1).getId();\n\n        // Set last ID to get the next set of inputs. The returned inputs will not include the last ID input.\n        MultiInputResponse secondStreamInputsResponse = stub.streamInputs(\n            StreamInputsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .setLastId(lastId)\n            .setPerPage(10)\n            .build()\n        );\n\n        if (secondStreamInputsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Stream inputs failed, status: " + secondStreamInputsResponse.getStatus());\n        }\n\n        System.out.println(String.format("Second response (first input is the one following input ID %s)", lastId));\n        for (Input input: secondStreamInputsResponse.getInputsList()) {\n            System.out.println("\\t" + input.getId());\n        }\n\n    }\n}',ln='package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\npublic class ClarifaiExample {\n\n    /////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and input ID.\n    // Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change this ID to whatever input you want its details\n    static final String INPUT_ID = "ff79664eefe94db1878f51931f9d6fd9";\n       \n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));    \n       \n        SingleInputResponse getInputResponse = stub.getInput(\n            GetInputRequest.newBuilder()\n                .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n                .setInputId(INPUT_ID)\n                .build()\n        );\n\n        if (getInputResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Get input failed, status: " + getInputResponse.getStatus());\n        }\n\n        Input input = getInputResponse.getInput();\n        System.out.println(input);            \n   \n    }  \n}',dn='package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\npublic class ClarifaiExample {\n\n    ////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication and app ID.\n    // Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n       \n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));    \n       \n        SingleInputCountResponse getInputCountResponse = stub.getInputCount(\n           GetInputCountRequest.newBuilder()\n           .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n           .build()\n        );\n\n        if (getInputCountResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n           throw new RuntimeException("Get input count failed, status: " + getInputCountResponse.getStatus());\n        }\n\n        InputCount inputCount = getInputCountResponse.getCounts();\n        System.out.println(inputCount);      \n               \n    }  \n}',_n='package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\npublic class ClarifaiExample {\n\n    /////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and input ID and concept IDs\n    // we want to update. Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these based on the update you want to make\n    static final String INPUT_ID = "7c5f489bcafe43fe8a71c68091cb64ce";\n    static final String CONCEPT_ID_1 = "tree";\n    static final String CONCEPT_ID_2 = "water";\n       \n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));    \n               \n        MultiInputResponse patchInputsResponse = stub.patchInputs(\n            PatchInputsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n                .setAction("merge")  // Supported actions: overwrite, merge, remove\n                .addInputs(\n                    Input.newBuilder()\n                        .setId(INPUT_ID)\n                        .setData(\n                            Data.newBuilder()\n                                .addConcepts(\n                                    Concept.newBuilder()\n                                        .setId(CONCEPT_ID_1)\n                                        .setValue(1f)  // 1 means true, this concept is present\n                                )\n                                .addConcepts(\n                                    Concept.newBuilder()\n                                        .setId(CONCEPT_ID_2)\n                                        .setValue(0f)  // 0 means false, this concept is not present\n                                )\n                        )\n                        .build()\n                )\n                .build()\n        );\n\n        if (patchInputsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Patch inputs failed, status: " + patchInputsResponse.getStatus());\n        }\n     \n    }  \n}',hn='package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\npublic class ClarifaiExample {\n\n    /////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and input ID and concept IDs\n    // we want to update. Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";;\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these based on the updates you want to make\n    static final String INPUT_ID_1 = "c99f1b557d1d43d1916b46f8ce4a0487";\n    static final String INPUT_ID_2 = "1be923b967f148dbb4e588cf4a723da1";\n    static final String CONCEPT_ID_1 = "tree";\n    static final String CONCEPT_ID_2 = "water";\n    static final String CONCEPT_ID_3 = "animal";\n    static final String CONCEPT_ID_4 = "fruit";\n       \n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n       \n        MultiInputResponse patchInputsResponse = stub.patchInputs(\n            PatchInputsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n                .setAction("merge")  // Supported actions: overwrite, merge, remove\n                .addInputs(\n                    Input.newBuilder()\n                        .setId(INPUT_ID_1)\n                        .setData(\n                            Data.newBuilder()\n                                .addConcepts(\n                                    Concept.newBuilder()\n                                        .setId(CONCEPT_ID_1)\n                                        .setValue(1f)  // 1 means true, this concept is present\n                                )\n                                .addConcepts(\n                                    Concept.newBuilder()\n                                        .setId(CONCEPT_ID_2)\n                                        .setValue(0f)  // 0 means false, this concept is not present\n                                )\n                        )\n                        .build()\n                )\n                .addInputs(\n                    Input.newBuilder()\n                        .setId(INPUT_ID_2)\n                        .setData(\n                            Data.newBuilder()\n                                .addConcepts(\n                                    Concept.newBuilder()\n                                        .setId(CONCEPT_ID_3)\n                                        .setValue(1f)\n                                )\n                                .addConcepts(\n                                    Concept.newBuilder()\n                                        .setId(CONCEPT_ID_4)\n                                        .setValue(0f)\n                                )\n                        )\n                        .build()\n                )\n                .build()\n        );\n\n        if (patchInputsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Patch inputs failed, status: " + patchInputsResponse.getStatus());\n        }            \n         \n    }  \n}',In='package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\npublic class ClarifaiExample {\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the input and\n    // concept ID. Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these based on the concept you want to remove\n    static final String INPUT_ID = "c99f1b557d1d43d1916b46f8ce4a0487";\n    static final String CONCEPT_ID = "tree";\n       \n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));        \n       \n        MultiInputResponse patchInputsResponse = stub.patchInputs(\n            PatchInputsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n                .setAction("remove")  // Supported actions: overwrite, merge, remove\n                .addInputs(\n                    Input.newBuilder()\n                        .setId(INPUT_ID)\n                        .setData(\n                            Data.newBuilder()\n                                .addConcepts(\n                                    // We\'re removing the concept, so there\'s no need to specify\n                                    // the concept value\n                                    Concept.newBuilder().setId(CONCEPT_ID)\n                                )\n                        )\n                        .build()\n                )\n                .build()\n        );\n\n        if (patchInputsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Patch inputs failed, status: " + patchInputsResponse.getStatus());\n        }    \n         \n    }  \n}',En='package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\npublic class ClarifaiExample {\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the inputs and\n    // concepts IDs. Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these based on the concepts you want to remove\n    static final String INPUT_ID_1 = "ff79664eefe94db1878f51931f9d6fd9";\n    static final String INPUT_ID_2 = "f54b89ef64874888a64f7016cf6f33ad";\n    static final String CONCEPT_ID_1 = "tree";\n    static final String CONCEPT_ID_2 = "water";\n    static final String CONCEPT_ID_3 = "animal";\n    static final String CONCEPT_ID_4 = "fruit";\n       \n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));            \n\n        MultiInputResponse patchInputsResponse = stub.patchInputs(\n            PatchInputsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n                .setAction("remove")  // Supported actions: overwrite, merge, remove\n                .addInputs(\n                    Input.newBuilder()\n                        .setId(INPUT_ID_1)\n                        .setData(\n                            Data.newBuilder()\n                                // We\'re removing the concepts, so there\'s no need to specify\n                                // the concept value\n                                .addConcepts(\n                                    Concept.newBuilder().setId(CONCEPT_ID_1)\n                                )\n                                .addConcepts(\n                                    Concept.newBuilder().setId(CONCEPT_ID_2)\n                                )\n                        )\n                        .build()\n                )\n                .addInputs(\n                    Input.newBuilder()\n                        .setId(INPUT_ID_2)\n                        .setData(\n                            Data.newBuilder()\n                                .addConcepts(\n                                    Concept.newBuilder().setId(CONCEPT_ID_3)\n                                )\n                                .addConcepts(\n                                    Concept.newBuilder().setId(CONCEPT_ID_4)\n                                )\n                        )\n                        .build()\n                )\n                .build()\n        );\n\n        if (patchInputsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Patch inputs failed, status: " + patchInputsResponse.getStatus());\n        }  \n               \n    }  \n}',An='package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\npublic class ClarifaiExample {\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the ID of the\n    // input we want to delete. Change these strings to run your own example\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID =  "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change this based on the input you want to delete\n    static final String INPUT_ID = "ff79664eefe94db1878f51931f9d6fd9";\n       \n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));            \n\n        BaseResponse deleteInputResponse = stub.deleteInput(\n            DeleteInputRequest.newBuilder()\n               .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n                .setInputId(INPUT_ID)\n                .build()\n        );\n\n        if (deleteInputResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Delete input failed, status: " + deleteInputResponse.getStatus());\n        }  \n                       \n    }  \n}',fn='package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\npublic class ClarifaiExample {\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the IDs of the\n    // inputs we want to delete. Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID =  "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these based on the inputs you want to delete\n    static final String INPUT_ID_1 = "d4319bb362d9487e812970a3ed9ba028";\n    static final String INPUT_ID_2 = "fc449e98ce3847c788954e3fec871d02";\n       \n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));      \n       \n        BaseResponse listInputsResponse = stub.deleteInputs(\n            DeleteInputsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n                .addIds(INPUT_ID_1)\n                .addIds(INPUT_ID_2)\n                .build()\n        );\n\n        if (listInputsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Delete inputs failed, status: " + listInputsResponse.getStatus());\n        }\n                       \n    }  \n}',gn='curl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/inputs" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "inputs": [\n      {\n        "data": {\n          "image": {\n            "url": "https://samples.clarifai.com/metro-north.jpg",\n            "allow_duplicate_url": true\n          }\n        }\n      }\n    ]\n  }\'\n  ',Pn='curl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/inputs" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "inputs": [\n      {\n        "data": {\n          "image": {\n            "base64": "/9j/4AAQSkZJRgABAQAAAQABAAD/2wBDAAUDBAQEAwUEBAQFBQUGBwwIBwcHBw8LCwkMEQ8SEhEPERETFhwXExQaFRERGCEYGh0dHx8fExciJCIeJBweHx7/2wBDAQUFBQcGBw4ICA4eFBEUHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh7/wAARCAAoACgDASIAAhEBAxEB/8QAGQAAAgMBAAAAAAAAAAAAAAAAAAYDBQcE/8QAMBAAAQMDAwMDAgQHAAAAAAAAAQIDBAAFEQYSIQcTMTJBURRhCBYikSNScXKhsdH/xAAZAQACAwEAAAAAAAAAAAAAAAAFBgIDBAf/xAAtEQABAwMBBgQHAQAAAAAAAAABAgMRAAQhMQUSE0FRYQaBocEUFiJCcrHR8P/aAAwDAQACEQMRAD8A3+RYY1unSYzCS0ttZUkAgktn0q5yT7jPyDUC4wdGwycH5U2Kt9ZQ7VI1qw5PkvQy3CSVPpf7aQjuKyFH25xzn3pHn3TVNy01Hl2hyy6YdkSpKsS9sl/6RlI3rRu3dxWd6spwnAGPIJTfl925fcLaoSDHXvyo6i9SlCQrU9wKln3OyWiaDN1RAbW3kKbSd7gPtwMkH/tTWy9afuy1iPfnXMAblITwkE4yf08cn3pSbYt1uts24XH6fUbiLAuY1MWyGkLEmUW0rcCRvUpQ5CtwKQCPgi4S1ZbDe4sd9NntDEe79m3uOBLTr0IR9jzodSMqUpTu9JJ8owD7UTT4ZCfv9PbP7860m+s+HBSrejWRuz2kAxoesGYxTW/Zlpkwo1vkuSly3UgKWQUhHJUvIHsAaKTemF8XE6sWmxyZkiaZrMh1jv8ArQNpUVqB8FW0njHqx4zRVVhsph1KlKk5xQ+7uHmikaSJrQerMByet2IwvtuTLa4xv2k7Rk84H9x/esHv92d01boenLXGcuiWrFIhLlpbcaQ2/JdK3VJCkAq2pAR7Zz7YxWudY9fxNIdQbNGkR5TyX4aisNNpUMFZAzkj4NK0jq9ZpbLr0PSlzkhrlZDaQlP3P8Q4/ap3F87bPucJEkx/hHv60b2TYXLrKN5sramYECSQRk9M6c6zmJ+eb5Hi22M7cnWGIQgFLbX0zSo4PDa1YBcTgDyMjJ/qbGPabH08SJt1Uzc9QqRliGg5QySPKvgc+TyfYDmmTUWpNYz7ctxoQdPQshCktupckDJUPUcJT6DwMq8YyaQ9VL0pCS8zapcq4SVOBZmPDO8/cnknlWcDBwn4NYnPjLkQ+qE9OtOVlYpeVHDCEkkkJyT+SuQzy5Y0ru6Ez511/Efa5s1fdkOtyVurIxgdlQAA9gOKKPwolU7remU5hCGYEgo38KUv9I/0TRTDYJCWQBSF4rIN/CRgAR0iTpVD1j1g/qDqJcJqlKcjB9bcda142MpOEJAzgeMnjyTSyze5KEuNRpDoDvC0oe4X9iAeaKKFK+oya6fbOqYbDTeEiAPKpHdS3gBLYc7RQkp3ApQog+cq8nwPJrljzxnPZbUfnugn/NFFRgEVch9xKsH0H8pg6e3x3T3UC1ajaZITGkJLoS4MKbOUrzz/ACKVRRRVzVwtoQmhG1NkWu0HuI+JI8u/Kv/Z",\n            "allow_duplicate_url": true\n          }\n        }\n      }\n    ]\n  }\'\n  ',Dn='curl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/inputs" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "inputs": [\n      {\n        "data": {\n          "image": {\n            "url": "https://samples.clarifai.com/metro-north.jpg",\n            "allow_duplicate_url": true\n          }\n        },\n        "id": "train1"\n      },\n      {\n        "data": {\n          "image": {\n            "url": "https://samples.clarifai.com/puppy.jpeg",\n            "allow_duplicate_url": true\n          }\n        },\n        "id": "puppy1"\n      }\n    ]\n  }\'',Tn='curl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/inputs" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "inputs": [\n      {\n        "data": {\n          "image": {\n            "url": "https://samples.clarifai.com/puppy.jpeg",\n            "allow_duplicate_url": true\n          },\n          "concepts":[\n            {\n              "id": "charlie",\n              "value": 1\n            }\n          ]\n        }\n      }\n    ]\n  }\'',Cn='curl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/inputs" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "inputs": [\n      {\n        "data": {\n          "image": {\n            "url": "https://samples.clarifai.com/puppy.jpeg",\n            "allow_duplicate_url": true\n          },\n          "metadata": {"id": "id001", "type": "animal", "size": 100}\n        }\n      }\n    ]\n  }\'',mn='curl -X GET "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/inputs?page=1&per_page=10" \\\n  -H "Authorization: Key YOUR_PAT_HERE" ',Sn='curl -X GET "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/inputs/YOUR_INPUT_ID_HERE" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \n',Rn='curl -X GET "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/inputs/status" \\\n  -H "Authorization: Key YOUR_PAT_HERE" ',Un='# Value of 1 means true, this concept is present\n# Value of 0 means false, this concept is not present\n# Supported actions are overwrite, merge, and remove\n\ncurl -X PATCH "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/inputs" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "inputs": [\n      {\n        "id": "YOUR_INPUT_ID_HERE",\n        "data": {\n          "concepts": [\n            {\n              "id": "tree",\n              "value": 1\n            },\n            {\n              "id": "water",\n              "value": 0\n            }\n          ]\n        }\n      }\n    ],\n    "action":"merge"\n}\'\n ',On='# Value of 1 means true, this concept is present\n# Value of 0 means false, this concept is not present\n# Supported actions are overwrite, merge, and remove\n\ncurl -X PATCH "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/inputs" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "inputs": [\n      {\n        "id": "YOUR_INPUT_ID_1_HERE",\n        "data": {\n          "concepts": [\n            {\n              "id": "tree",\n              "value": 1\n            },\n            {\n              "id": "water",\n              "value": 0\n            }\n          ]\n        }\n      },\n      {\n        "id": "YOUR_INPUT_ID_2_HERE",\n        "data": {\n          "concepts": [\n            {\n              "id": "animal",\n              "value": 1\n            },\n            {\n              "id": "fruit",\n              "value": 0\n            }\n          ]\n        }\n      }\n    ],\n    "action":"merge"\n}\'',bn='# We\'re removing the concept, so no need to specify the concept value\n \ncurl -X PATCH "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/inputs" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "inputs": [\n      {\n        "id":"YOUR_INPUT_ID_HERE",\n        "data": {\n            "concepts":[\n                {"id":"water"}\n            ]\n        }\n      }\n    ],\n    "action":"remove"\n  }\'\n  ',wn='# We\'re removing the concepts, so no need to specify the concept value\n\ncurl -X PATCH "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/inputs" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "inputs": [\n      {\n        "id": "YOUR_INPUT_ID_1_HERE",\n        "data": {\n          "concepts":[\n            {\n              "id": "tree"\n            },\n            {\n              "id": "water"\n            }\n          ]\n        }\n      },\n      {\n        "id": "YOUR_INPUT_ID_2_HERE",\n        "data": {\n          "concepts":[\n            {\n              "id": "animal"\n            },\n            {\n              "id": "fruit"\n            }\n          ]\n        }\n      }\n    ],\n    "action":"remove"\n  }\'',Nn='curl -X DELETE "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/inputs/YOUR_INPUT_ID_HERE" \\\n  -H "Authorization: Key YOUR_PAT_HERE" ',Hn='curl -X DELETE "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/inputs" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "ids":["YOUR_INPUT_ID_1_HERE","YOUR_INPUT_ID_2_HERE"]\n  }\'',jn="<?php\n\nrequire __DIR__ . '/vendor/autoload.php';\n\n////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and input URL. \n// Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = 'YOUR_USER_ID_HERE';\n// Your PAT (Personal Access Token) can be found in the Account's Security section\n$PAT = 'YOUR_PAT_HERE';\n$APP_ID = 'YOUR_APP_ID_HERE';\n// Change this to whatever image input you want to add\n$IMAGE_URL = 'https://samples.clarifai.com/metro-north.jpg';\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\Data;\nuse Clarifai\\Api\\Image;\nuse Clarifai\\Api\\Input;\nuse Clarifai\\Api\\PostInputsRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ['Authorization' => ['Key ' . $PAT ]];\n\n$userDataObject = new UserAppIDSet([\n    'user_id' => $USER_ID, \n    'app_id' => $APP_ID \n]);\n\n// Let's make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PostInputs(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new PostInputsRequest([\n        'user_app_id' => $userDataObject,\n        'inputs' => [\n            new Input([ // The Input object wraps the Data object in order to meet the API specification                \n                'data' => new Data([ // The Data object is constructed around the Image object. It offers a container that has additional image independent\n                                    // metadata. In this particular use case, no other metadata is needed to be specified\n                    'image' => new Image([ // In the Clarifai platform, an image is defined by a special Image object\n                        'url' => $IMAGE_URL,\n                        'allow_duplicate_url' => true\n                    ])\n                ])\n            ])\n        ]        \n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception(\"Error: {$status->details}\");\n}\n\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    throw new Exception(\"Failure response: \" . $response->getStatus()->getDescription() . \" \" .\n        $response->getStatus()->getDetails());\n}\n\n?>",xn="<?php\n\nrequire __DIR__ . '/vendor/autoload.php';\n\n////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the location\n// of the image we want as an input. Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = 'YOUR_USER_ID_HERE';\n// Your PAT (Personal Access Token) can be found in the Account's Security section\n$PAT = 'YOUR_PAT_HERE';\n$APP_ID = 'YOUR_APP_ID_HERE';\n// Change this to whatever image input you want to add\n$IMAGE_FILE_LOCATION = 'YOUR_IMAGE_FILE_LOCATION';\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\Data;\nuse Clarifai\\Api\\Image;\nuse Clarifai\\Api\\Input;\nuse Clarifai\\Api\\PostInputsRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ['Authorization' => ['Key ' . $PAT ]];\n\n$userDataObject = new UserAppIDSet([\n    'user_id' => $USER_ID, \n    'app_id' => $APP_ID \n]);\n\n$imageData = file_get_contents($IMAGE_FILE_LOCATION); // Get the image bytes data from the location\n\n// Let's make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PostInputs(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new PostInputsRequest([\n        'user_app_id' => $userDataObject,\n        'inputs' => [\n            new Input([ // The Input object wraps the Data object in order to meet the API specification                \n                'data' => new Data([ // The Data object is constructed around the Image object. It offers a container that has additional image independent\n                                    // metadata. In this particular use case, no other metadata is needed to be specified\n                    'image' => new Image([ // In the Clarifai platform, an image is defined by a special Image object\n                        'base64' => $imageData\n                    ])\n                ])\n            ])\n        ]        \n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception(\"Error: {$status->details}\");\n}\n\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    throw new Exception(\"Failure response: \" . $response->getStatus()->getDescription() . \" \" .\n        $response->getStatus()->getDetails());\n}\n\n?>",vn='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the URLs and IDs\n// of the images we want as inputs. Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change these to whatever inputs you want to add\n$IMAGE_URL_1 = "https://samples.clarifai.com/metro-north.jpg";\n$IMAGE_URL_2 = "https://samples.clarifai.com/puppy.jpeg";\n$INPUT_ID_1 = "train1";\n$INPUT_ID_2 = "puppy1";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\Data;\nuse Clarifai\\Api\\Image;\nuse Clarifai\\Api\\Input;\nuse Clarifai\\Api\\PostInputsRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PostInputs(\n        // The request object carries the request along with the request status and other metadata related to the request itself\n        new PostInputsRequest([\n            "user_app_id" => $userDataObject,\n            "inputs" => [\n                new Input([\n                    // The Input object wraps the Data object in order to meet the API specification\n                    "id" => $INPUT_ID_1,\n                    "data" => new Data([\n                        // The Data object is constructed around the Image object. It offers a container that has additional image independent\n                        // metadata. In this particular use case, no other metadata is needed to be specified\n                        "image" => new Image([\n                            // In the Clarifai platform, an image is defined by a special Image object\n                            "url" => $IMAGE_URL_1,\n                            "allow_duplicate_url" => true\n                        ])\n                    ])\n                ]),\n                new Input([\n                    "id" => $INPUT_ID_2,\n                    "data" => new Data([\n                        "image" => new Image([\n                            "url" => $IMAGE_URL_2,\n                            "allow_duplicate_url" => true\n                        ])\n                    ])\n                ])\n            ]\n        ]),\n        $metadata\n    )->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure\n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print "There was an error with your request!" . "<br>";\n    foreach ($response->getInputs() as $input_object) {\n        print "Input " . $input_object->getId() . " status: ";\n        print $input_object->getStatus()->getDetails() . "<br>";\n    }\n    throw new Exception("Post inputs failed, status: " . $response->getStatus()->getDescription());\n}\n\n?>\n',yn='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the input to add\n// with concept. Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change these to whatever input and concept you want to add\n$IMAGE_URL = \'https://samples.clarifai.com/puppy.jpeg\';\n$CONCEPT_ID = \'charlie\';\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\Api\\Concept;\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\Data;\nuse Clarifai\\Api\\Image;\nuse Clarifai\\Api\\Input;\nuse Clarifai\\Api\\PostInputsRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PostInputs(\n        // The request object carries the request along with the request status and other metadata related to the request itself\n        new PostInputsRequest([\n            "user_app_id" => $userDataObject,\n            "inputs" => [\n                new Input([\n                    // The Input object wraps the Data object in order to meet the API specification                    \n                    "data" => new Data([\n                        // The Data object is constructed around the Image object. It offers a container that has additional image independent\n                        // metadata. In this particular use case, no other metadata is needed to be specified\n                        "image" => new Image([\n                            // In the Clarifai platform, an image is defined by a special Image object\n                            "url" => $IMAGE_URL,\n                            "allow_duplicate_url" => true\n                        ]),\n                        "concepts" => [\n                            new Concept([\n                            "id" => $CONCEPT_ID,\n                            "value" => 1\n                        ])\n                        ]\n                    ])\n                ])                \n            ]\n        ]),\n        $metadata\n    )->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\n?>\n',Yn='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the input and custom\n// metadata we want to add. Change these strings to run your own example.\n///////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change these to whatever input and custom metadata you want to add\n$IMAGE_URL = "https://samples.clarifai.com/puppy.jpeg";\n$CUSTOM_METADATA = \'{"id": "id001", "type": "animal", "size": 100}\';\n// Decode a JSON object into a PHP object\n$CUSTOM_METADATA_DECODE = var_dump(json_decode($CUSTOM_METADATA));\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\Data;\nuse Clarifai\\Api\\Image;\nuse Clarifai\\Api\\Input;\nuse Clarifai\\Api\\PostInputsRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PostInputs(\n        // The request object carries the request along with the request status and other metadata related to the request itself\n        new PostInputsRequest([\n            "user_app_id" => $userDataObject,\n            "inputs" => [\n                new Input([\n                    // The Input object wraps the Data object in order to meet the API specification                    \n                    "data" => new Data([\n                        // The Data object is constructed around the Image object. It offers a container that has additional image independent\n                        // metadata. In this particular use case, no other metadata is needed to be specified\n                        "image" => new Image([\n                            // In the Clarifai platform, an image is defined by a special Image object\n                            "url" => $IMAGE_URL,\n                            "allow_duplicate_url" => true\n                        ]),\n                        "metadata" => $CUSTOM_METADATA_DECODE\n                    ])\n                ])                \n            ]\n        ]),\n        $metadata\n    )->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\n?>\n',Ln='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n//////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication and app ID. \n// Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\ListInputsRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->ListInputs(\n        // The request object carries the request along with the request status and other metadata related to the request itself\n        new ListInputsRequest([\n            "user_app_id" => $userDataObject,\n            "page" => 1,\n            "per_page" => 10\n        ]),\n        $metadata\n    )->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\nforeach ($response->getInputs() as $input_object){\n    print $input_object->getId() . "<br>";\n}\n\n?>\n',$n='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n//////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication and app ID. \n// Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\StreamInputsRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->StreamInputs(\n        // The request object carries the request along with the request status and other metadata related to the request itself\n        new StreamInputsRequest([\n            "user_app_id" => $userDataObject,            \n            "per_page" => 5\n        ]),\n        $metadata\n    )->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\nprint "First response (starting from the first input): <br>";\nforeach ($response->getInputs() as $input_object){\n    print $input_object->getId() . "<br>";\n}\n\n$last_id = $response->getInputs()[count($response->getInputs())-1]->getId();\n\n// Set last_id to get the next set of inputs. The returned inputs will not include the last_id input\n[$response, $status] = $client->StreamInputs(   \n    new StreamInputsRequest([\n        "user_app_id" => $userDataObject,            \n        "per_page" => 5,\n        "last_id" => $last_id\n    ]),\n    $metadata\n)->wait();\n\nprint "<br>";\nprint "Second response (first input is the one following input ID $last_id): <br>";\nforeach ($response->getInputs() as $input_object){\n    print $input_object->getId() . "<br>";\n}\n\n?>\n',Gn='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n/////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and input ID.\n// Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change this ID to whatever input you want its details\n$INPUT_ID = \'ff79664eefe94db1878f51931f9d6fd9\';\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\GetInputRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->GetInput(\n        // The request object carries the request along with the request status and other metadata related to the request itself\n        new GetInputRequest([\n            "user_app_id" => $userDataObject,\n            "input_id"=> $INPUT_ID\n        ]),\n        $metadata\n    )->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\n$input_object = $response->getInput()->serializeToJsonString();\n\nprint $input_object;\n\n?>\n',Bn='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n/////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and input ID.\n// Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\GetInputCountRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->GetInputCount(\n        // The request object carries the request along with the request status and other metadata related to the request itself\n        new GetInputCountRequest([\n            "user_app_id" => $userDataObject\n        ]),\n        $metadata\n    )->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\n$input_object = $response->getCounts()->serializeToJsonString();\n\necho $input_object;\n\n?>\n',kn='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n///////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and input ID and concept IDs\n// we want to update. Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change these based on the update you want to make\n$INPUT_ID = \'7c5f489bcafe43fe8a71c68091cb64ce\';\n$CONCEPT_ID_1 = \'tree\';\n$CONCEPT_ID_2 = \'water\';\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\Data;\nuse Clarifai\\Api\\Input;\nuse Clarifai\\Api\\Concept;\nuse Clarifai\\Api\\PatchInputsRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PatchInputs(\n        // The request object carries the request along with the request status and other metadata related to the request itself\n        new PatchInputsRequest([\n            "user_app_id" => $userDataObject,\n            "action" => "merge",  // Supported actions: overwrite, merge, remove\n            \'inputs\' => [\n                new Input([ // The Input object wraps the id and Data object in order to meet the API specification \n                    "id" => $INPUT_ID,             \n                    \'data\' => new Data([ // The Data object is constructed around the Concept object. It offers a container that has additional concept independent\n                                        // metadata                    \n                        "concepts" => [\n                            new Concept([\n                            "id" => $CONCEPT_ID_1,\n                            "value" => 1 // 1 means true, this concept is present\n                            ]),\n                            new Concept([\n                                "id" => $CONCEPT_ID_2,\n                                "value" => 0 // 0 means false, this concept is not present\n                            ])\n                        ]\n                    ])\n                ])\n            ]\n        ]),\n        $metadata\n    )->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\n?>\n',Mn='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the inputs and \n// concepts IDs we want to update. Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change these based on the updates you want to make\n$INPUT_ID_1 = \'c99f1b557d1d43d1916b46f8ce4a0487\';\n$INPUT_ID_2 = \'1be923b967f148dbb4e588cf4a723da1\';\n$CONCEPT_ID_1 = \'tree\';\n$CONCEPT_ID_2 = \'water\';\n$CONCEPT_ID_3 = \'animal\';\n$CONCEPT_ID_4 = \'fruit\';\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\Data;\nuse Clarifai\\Api\\Input;\nuse Clarifai\\Api\\Concept;\nuse Clarifai\\Api\\PatchInputsRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PatchInputs(\n        // The request object carries the request along with the request status and other metadata related to the request itself\n        new PatchInputsRequest([\n            "user_app_id" => $userDataObject,\n            "action" => "merge",  // Supported actions: overwrite, merge, remove\n            \'inputs\' => [\n                new Input([ // The Input object wraps the id and Data object in order to meet the API specification \n                    "id" => $INPUT_ID_1,             \n                    \'data\' => new Data([ // The Data object is constructed around the Concept object. It offers a container that has additional concept independent\n                                        // metadata                    \n                        "concepts" => [\n                            new Concept([\n                            "id" => $CONCEPT_ID_1,\n                            "value" => 1 // 1 means true, this concept is present\n                            ]),\n                            new Concept([\n                                "id" => $CONCEPT_ID_2,\n                                "value" => 0 // 0 means false, this concept is not present\n                            ])\n                        ]\n                    ])\n                            ]),\n                new Input([ \n                    "id" => $INPUT_ID_2,             \n                    \'data\' => new Data([                          \n                        "concepts" => [\n                            new Concept([\n                            "id" => $CONCEPT_ID_3,\n                            "value" => 1 \n                            ]),\n                            new Concept([\n                                "id" => $CONCEPT_ID_4,\n                                "value" => 0 \n                            ])\n                        ]\n                    ])\n                ])\n            ]\n        ]),\n        $metadata\n    )->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\n?>\n',qn='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n//////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the input and \n// concept ID. Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change these based on the concept you want to remove\n$INPUT_ID = \'c99f1b557d1d43d1916b46f8ce4a0487\';\n$CONCEPT_ID = \'tree\';\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\Data;\nuse Clarifai\\Api\\Input;\nuse Clarifai\\Api\\Concept;\nuse Clarifai\\Api\\PatchInputsRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PatchInputs(\n        // The request object carries the request along with the request status and other metadata related to the request itself\n        new PatchInputsRequest([\n            "user_app_id" => $userDataObject,\n            "action" => "remove",  // Supported actions: overwrite, merge, remove\n            \'inputs\' => [\n                new Input([ // The Input object wraps the id and Data object in order to meet the API specification \n                    "id" => $INPUT_ID,             \n                    \'data\' => new Data([ // The Data object is constructed around the Concept object. It offers a container that has additional concept independent\n                                        // metadata                    \n                        "concepts" => [\n                            new Concept([\n                            "id" => $CONCEPT_ID // We\'re removing the concept, so there\'s no need to specify\n                                                // the concept value\n                            ])                            \n                        ]\n                    ])\n                ])\n            ]\n        ]),\n        $metadata\n    )->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\n?>\n',Jn='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the inputs and \n// concepts IDs. Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change these based on the concepts you want to remove\n$INPUT_ID_1 = \'ff79664eefe94db1878f51931f9d6fd9\';\n$INPUT_ID_2 = \'f54b89ef64874888a64f7016cf6f33ad\';\n$CONCEPT_ID_1 = \'tree\';\n$CONCEPT_ID_2 = \'water\';\n$CONCEPT_ID_3 = \'animal\';\n$CONCEPT_ID_4 = \'fruit\';\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\Data;\nuse Clarifai\\Api\\Input;\nuse Clarifai\\Api\\Concept;\nuse Clarifai\\Api\\PatchInputsRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PatchInputs(\n        // The request object carries the request along with the request status and other metadata related to the request itself\n        new PatchInputsRequest([\n            "user_app_id" => $userDataObject,\n            "action" => "remove",  // Supported actions: overwrite, merge, remove\n            \'inputs\' => [\n                new Input([ // The Input object wraps the id and Data object in order to meet the API specification \n                    "id" => $INPUT_ID_1,             \n                    \'data\' => new Data([ // The Data object is constructed around the Concept object. It offers a container that has additional concept independent\n                                        // metadata                    \n                        "concepts" => [\n                            new Concept([\n                            "id" => $CONCEPT_ID_1 // We\'re removing the concepts, so there\'s no need to specify\n                                                  // the concept value\n                            ]),\n                            new Concept([\n                                "id" => $CONCEPT_ID_2\n                            ])\n                        ]\n                    ])\n                            ]),\n                new Input([ \n                    "id" => $INPUT_ID_2,             \n                    \'data\' => new Data([                          \n                        "concepts" => [\n                            new Concept([\n                            "id" => $CONCEPT_ID_3\n                            ]),\n                            new Concept([\n                                "id" => $CONCEPT_ID_4    \n                            ])\n                        ]\n                    ])\n                ])\n            ]\n        ]),\n        $metadata\n    )->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\n?>\n',Wn='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the ID of the \n// input we want to delete. Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change this based on the input you want to delete\n$INPUT_ID = \'ff79664eefe94db1878f51931f9d6fd9\';\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\DeleteInputRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->DeleteInput(\n        // The request object carries the request along with the request status and other metadata related to the request itself\n        new DeleteInputRequest([\n            "user_app_id" => $userDataObject,\n            \'input_id\' => $INPUT_ID \n        ]),\n        $metadata\n    )->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\n?>\n',Xn='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the IDs of the\n// inputs we want to delete. Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change these based on the inputs you want to delete\n$INPUT_ID_1 = \'d4319bb362d9487e812970a3ed9ba028\';\n$INPUT_ID_2 = \'fc449e98ce3847c788954e3fec871d02\';\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\DeleteInputsRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->DeleteInputs(\n        // The request object carries the request along with the request status and other metadata related to the request itself\n        new DeleteInputsRequest([\n            "user_app_id" => $userDataObject,\n            \'ids\' => [$INPUT_ID_1, $INPUT_ID_2]\n        ]),\n        $metadata\n    )->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\n?>\n',zn='######################################################################################################\n# In this section, we set the user authentication, app ID, ID to collect statistics about inputs job \n# to be created, and cloud storage URL. Change these strings to run your own example.\n######################################################################################################\n\nUSER_ID = "YOUR_USER_ID_HERE"\n# Your PAT (Personal Access Token) can be found in the Portal under Account > Security\nPAT = "YOUR_PAT_HERE"\nAPP_ID = "YOUR_APP_ID_HERE"\n# Change these to create your own extraction job\nINPUTS_JOB_ID = ""  # If empty, ID will be autogenerated; if non-empty, the given ID will be used\nCLOUD_STORAGE_URL = "s3://samples.clarifai.com/storage/"\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (("authorization", "Key " + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\npost_inputs_response = stub.PostInputsDataSources(\n    service_pb2.PostInputsDataSourcesRequest(\n        user_app_id=userDataObject,\n        app_pat=PAT,\n        data_sources=[\n            resources_pb2.InputsDataSource(\n                inputs_add_job_id=INPUTS_JOB_ID,\n                url=resources_pb2.DataSourceURL(\n                    url=CLOUD_STORAGE_URL,\n                    # Uncomment to add credentials\n                    # credentials=resources_pb2.DataSourceCredentials(\n                    # s3_creds=resources_pb2.AWSCreds(\n                    # id="ADD_ACCESS_ID_HERE",\n                    # secret="ADD_SECRET_HERE",\n                    # region="ADD_AWS_REGION_HERE"\n                    # )\n                    # If using GCP\n                    # gcpCreds="" # GCP uses service account key data (creds.json) as Byte array for authentication\n                    # ),\n                ),\n            )\n        ],\n    ),\n    metadata=metadata,\n)\n\nif post_inputs_response.status.code != status_code_pb2.SUCCESS:\n    print(post_inputs_response.status)\n    raise Exception(\n        "Post inputs failed, status: " + post_inputs_response.status.description\n    )\n\nprint(post_inputs_response)\n',Kn='\x3c!--index.html file--\x3e\n\n<script>\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, ID to collect statistics about inputs job \n    // to be created, and cloud storage URL. Change these strings to run your own example.\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = "YOUR_USER_ID_HERE";\n    // Your PAT (Personal Access Token) can be found in the Account\'s Security section\n    const PAT = "YOUR_PAT_HERE";\n    const APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to create your own extraction job\n    const INPUTS_JOB_ID = "";  // If empty, ID will be autogenerated; if non-empty, the given ID will be used\n    const CLOUD_STORAGE_URL = "s3://samples.clarifai.com/storage/";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        "user_app_id": {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        "app_pat": PAT,\n        "data_sources": [\n            {\n                "inputs_add_job_id": INPUTS_JOB_ID,\n                "url": {\n                    "url": CLOUD_STORAGE_URL,\n                    // Uncomment to add credentials\n                   /* "credentials": {\n                        "s3_creds": { "id": "ADD_ACCESS_ID_HERE", "secret": "ADD_SECRET_HERE", "region": "ADD_AWS_REGION_HERE" }\n                    }*/\n                }\n            }\n        ]\n\n    });\n\n    const requestOptions = {\n        method: \'POST\',\n        headers: {\n            \'Accept\': \'application/json\',\n            \'Authorization\': \'Key \' + PAT\n        },\n        body: raw\n    };\n\n    fetch("https://api.clarifai.com/v2/inputs/data_sources/", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log(\'error\', error));\n\n<\/script>\n',Vn='//index.js file\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, ID to collect statistics about inputs job \n// to be created, and cloud storage URL. Change these strings to run your own example.\n///////////////////////////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = "YOUR_PAT_HERE";\nconst APP_ID = "YOUR_APP_ID_HERE";\n// Change these to create your own extraction job\nconst INPUTS_JOB_ID = "";  // If empty, ID will be autogenerated; if non-empty, the given ID will be used\nconst CLOUD_STORAGE_URL = "s3://samples.clarifai.com/storage/";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PostInputsDataSources(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        "app_pat": PAT,\n        "data_sources": [\n            {\n                "inputs_add_job_id": INPUTS_JOB_ID,\n                "url": {\n                    "url": CLOUD_STORAGE_URL,\n                    // Uncomment to add credentials\n                    /* "credentials": {\n                         "s3_creds": { "id": "ADD_ACCESS_ID_HERE", "secret": "ADD_SECRET_HERE", "region": "ADD_AWS_REGION_HERE" }\n                     }*/\n                }\n            }\n        ]\n\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            console.log(response.status);\n            throw new Error("Post inputs failed, status: " + response.status.description);\n        }\n\n        console.log(response);\n    }\n\n);',Qn='package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.status.*;\n\npublic class ClarifaiExample {\n\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, ID to collect statistics about inputs job \n    // to be created, and cloud storage URL. Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to create your own extraction job\n    static final String INPUTS_JOB_ID = "";  // If empty, ID will be autogenerated; if non-empty, the given ID will be used\n    static final String CLOUD_STORAGE_URL = "s3://samples.clarifai.com/storage/";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n                .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiInputsAddJobResponse postInputsResponse = stub.postInputsDataSources(\n                PostInputsDataSourcesRequest.newBuilder()\n                        .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n                        .setAppPat(PAT)\n                        .addDataSources(InputsDataSource.newBuilder().setInputsAddJobId(INPUTS_JOB_ID)\n                                .setUrl(DataSourceURL.newBuilder()\n                                        .setUrl(CLOUD_STORAGE_URL)\n                                // Uncomment to add credentials\n                                /*.setCredentials(DataSourceCredentials.newBuilder()\n                                                .setS3Creds(AWSCreds.newBuilder()\n                                                        .setId("ADD_ACCESS_ID_HERE")\n                                                        .setSecret("ADD_SECRET_HERE")\n                                                        .setRegion("ADD_AWS_REGION_HERE")\n                                                )\n                                        )*/\n                                )\n                        ).build()\n        );\n\n        if (postInputsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post inputs failed, status: " + postInputsResponse.getStatus());\n        }\n\n        System.out.println(postInputsResponse);\n\n    }\n\n}\n',Fn="<?php\n\nrequire __DIR__ . '/vendor/autoload.php';\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, ID to collect statistics about inputs job \n// to be created, and cloud storage URL. Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = 'YOUR_USER_ID_HERE';\n// Your PAT (Personal Access Token) can be found in the Account's Security section\n$PAT = 'YOUR_PAT_HERE';\n$APP_ID = 'YOUR_APP_ID_HERE';\n# Change these to create your own extraction job\n$INPUTS_JOB_ID = ''; # If empty, ID will be autogenerated; if non-empty, the given ID will be used\n$CLOUD_STORAGE_URL = 's3://samples.clarifai.com/storage/';\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\PostInputsDataSourcesRequest;\nuse Clarifai\\Api\\InputsDataSource;\nuse Clarifai\\Api\\DataSourceURL;\nuse Clarifai\\Api\\DataSourceCredentials;\nuse Clarifai\\Api\\AWSCreds;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ['Authorization' => ['Key ' . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    'user_id' => $USER_ID,\n    'app_id' => $APP_ID\n]);\n\n// Let's make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PostInputsDataSources(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new PostInputsDataSourcesRequest([\n        'user_app_id' => $userDataObject,\n        'app_pat' => $PAT,\n        'data_sources' => [\n            new InputsDataSource([\n                'inputs_add_job_id' => $INPUTS_JOB_ID,\n                'url' => new DataSourceURL([\n                    'url' => $CLOUD_STORAGE_URL,\n                    // Uncomment to add credentials\n                    /*'credentials' => new DataSourceCredentials([\n                        's3_creds' => new AWSCreds([\n                            'id' => 'ADD_ACCESS_ID_HERE',\n                            'secret' => 'ADD_SECRET_HERE',\n                            'region' => 'ADD_AWS_REGION_HERE'\n                        ])\n                    ])*/\n                ])\n            ])\n        ]\n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception(\"Error: {$status->details}\");\n}\n\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    throw new Exception(\"Failure response: \" . $response->getStatus()->getDescription() . \" \" .\n        $response->getStatus()->getDetails());\n}\n\necho $response->serializeToJsonString();\n\n?>\n",Zn='curl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/inputs/data_sources/" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "app_pat": "YOUR_PAT_HERE",\n    "data_sources": [\n        {\n            "inputs_add_job_id": "",\n            "url": {\n                "url": "s3://samples.clarifai.com/storage/",\n                "credentials": {\n                    "s3_creds": {"id":"ADD_ACCESS_ID_HERE", "secret":"ADD_SECRET_HERE", "region":"ADD_AWS_REGION_HERE"},\n                    // Or, you can use GCP credentials\n                    "gcpCreds": "" // GCP uses service account key data (creds.json) as Byte array for authentication\n                }\n            }\n        }\n    ]\n  }\'\n',ne='###################################################################################################\n# In this section, we set the user authentication, app ID, and the inputs extraction job ID.\n# Change these strings to run your own example.\n###################################################################################################\n\nUSER_ID = "YOUR_USER_ID_HERE"\n# Your PAT (Personal Access Token) can be found in the Portal under Account > Security\nPAT = "YOUR_PAT_HERE"\nAPP_ID = "YOUR_APP_ID_HERE"\n# Change this ID to whatever inputs you want to track their upload process\nINPUTS_EXTRACTION_JOB_ID = "2a6f1f69cced42029986a72009e7d4da"\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (("authorization", "Key " + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\nget_inputs_extraction_response = stub.GetInputsExtractionJob(\n    service_pb2.GetInputsExtractionJobRequest(\n        user_app_id=userDataObject,\n        inputs_extraction_job_id=INPUTS_EXTRACTION_JOB_ID\n    ),\n    metadata=metadata,\n)\n\nif get_inputs_extraction_response.status.code != status_code_pb2.SUCCESS:\n    print(get_inputs_extraction_response.status)\n    raise Exception(\n        "Get input failed, status: " + get_inputs_extraction_response.status.description\n    )\n\nprint(get_inputs_extraction_response)\n',ee="\x3c!--index.html file--\x3e\n\n<script>\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the inputs extraction job ID.\n    // Change these strings to run your own example.\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = \"YOUR_USER_ID_HERE\";\n    // Your PAT (Personal Access Token) can be found in the Account's Security section\n    const PAT = \"YOUR_PAT_HERE\";\n    const APP_ID = \"YOUR_APP_ID_HERE\";\n    // Change this ID to whatever inputs you want to track their upload process\n    const INPUTS_EXTRACTION_JOB_ID = \"2a6f1f69cced42029986a72009e7d4da\";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const requestOptions = {\n        method: 'GET',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        }\n    };\n\n    fetch(`https://api.clarifai.com/v2/users/${USER_ID}/apps/${APP_ID}/inputs/jobs/extraction/${INPUTS_EXTRACTION_JOB_ID}`, requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n\n<\/script>",te='//index.js file\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the inputs extraction job ID.\n// Change these strings to run your own example.\n///////////////////////////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = "YOUR_PAT_HERE";\nconst APP_ID = "YOUR_APP_ID_HERE";\n// Change this ID to whatever inputs you want to track their upload process\nconst INPUTS_EXTRACTION_JOB_ID = "2a6f1f69cced42029986a72009e7d4da";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\n\nmetadata.set("authorization", "Key " + PAT);\n\nstub.GetInputsExtractionJob(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        "inputs_extraction_job_id": INPUTS_EXTRACTION_JOB_ID\n\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            console.log(response.status);\n            throw new Error("Get inputs failed, status: " + response.status.description);\n        }\n\n        console.log(response);\n    }\n\n);',ae='package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.status.*;\n\npublic class ClarifaiExample {\n\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the inputs extraction job ID.\n    // Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change this ID to whatever inputs you want to track their upload process\n    static final String INPUTS_EXTRACTION_JOB_ID = "2a6f1f69cced42029986a72009e7d4da";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n                .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        SingleInputsExtractionJobResponse getInputsResponse = stub.getInputsExtractionJob(\n                GetInputsExtractionJobRequest.newBuilder()\n                        .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n                        .setInputsExtractionJobId(INPUTS_EXTRACTION_JOB_ID)\n                        .build()\n        );\n\n        if (getInputsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post inputs failed, status: " + getInputsResponse.getStatus());\n        }\n\n        System.out.println(getInputsResponse);\n\n    }\n\n}\n',se="<?php\n\nrequire __DIR__ . '/vendor/autoload.php';\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the inputs extraction job ID.\n// Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = 'YOUR_USER_ID_HERE';\n// Your PAT (Personal Access Token) can be found in the Account's Security section\n$PAT = 'YOUR_PAT_HERE';\n$APP_ID = 'YOUR_APP_ID_HERE';\n// Change this ID to whatever inputs you want to track their upload process\n$INPUTS_EXTRACTION_JOB_ID = '2a6f1f69cced42029986a72009e7d4da';\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\GetInputsExtractionJobRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ['Authorization' => ['Key ' . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    'user_id' => $USER_ID,\n    'app_id' => $APP_ID\n]);\n\n// Let's make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->GetInputsExtractionJob(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new GetInputsExtractionJobRequest([\n        'user_app_id' => $userDataObject,        \n        'inputs_extraction_job_id' => $INPUTS_EXTRACTION_JOB_ID\n\n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception('Error: {$status->details}');\n}\n\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    throw new Exception('Failure response: ' . $response->getStatus()->getDescription() . ' ' .\n        $response->getStatus()->getDetails());\n}\n\necho $response->serializeToJsonString();\n\n?>\n",ie='curl -X GET "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/inputs/jobs/extraction/YOUR_INPUTS_EXTRACTION_JOB_ID_HERE" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n',re='##################################################################\n# In this section, we set the user authentication and app ID.\n# Change these strings to run your own example.\n###################################################################\n\nUSER_ID = "YOUR_USER_ID_HERE"\n# Your PAT (Personal Access Token) can be found in the Portal under Account > Security\nPAT = "YOUR_PAT_HERE"\nAPP_ID = "YOUR_APP_ID_HERE"\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (("authorization", "Key " + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\nlist_inputs_extraction_jobs = stub.ListInputsExtractionJobs(\n    service_pb2.ListInputsExtractionJobsRequest(\n        user_app_id=userDataObject, per_page=1000, page=1\n    ),\n    metadata=metadata,\n)\n\nif list_inputs_extraction_jobs.status.code != status_code_pb2.SUCCESS:\n    print(list_inputs_extraction_jobs.status)\n    raise Exception(\n        "List input failed, status: " + list_inputs_extraction_jobs.status.description\n    )\n\nprint(list_inputs_extraction_jobs)\n',oe="\x3c!--index.html file--\x3e\n\n<script>\n    ///////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication and app ID.\n    // Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////\n\n    const USER_ID = \"YOUR_USER_ID_HERE\";\n    // Your PAT (Personal Access Token) can be found in the Account's Security section\n    const PAT = \"YOUR_PAT_HERE\";\n    const APP_ID = \"YOUR_APP_ID_HERE\";\n   \n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const requestOptions = {\n        method: 'GET',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        }\n    };\n\n    fetch(`https://api.clarifai.com/v2/users/${USER_ID}/apps/${APP_ID}/inputs/jobs/extraction?per_page=1000&page=1`, requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n\n<\/script>\n",ce='//index.js file\n\n//////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication and app ID.\n// Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////\n\nconst USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = "YOUR_PAT_HERE";\nconst APP_ID = "YOUR_APP_ID_HERE";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\n\nmetadata.set("authorization", "Key " + PAT);\n\nstub.ListInputsExtractionJobs(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        per_page: 1000, \n        page: 1\n\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            console.log(response.status);\n            throw new Error("List inputs failed, status: " + response.status.description);\n        }\n\n        console.log(response);\n    }\n\n);\n',pe='package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.status.*;\n\npublic class ClarifaiExample {\n\n    ///////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication and app ID.\n    // Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n        \n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n                .withCallCredentials(new ClarifaiCallCredentials(PAT));\n        \n        MultiInputsExtractionJobResponse listInputsResponse = stub.listInputsExtractionJobs(\n                ListInputsExtractionJobsRequest.newBuilder()\n                        .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n                        .setPerPage(100).setPage(1)\n                        .build()\n        );\n        \n        if (listInputsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("List inputs failed, status: " + listInputsResponse.getStatus());\n        }\n        \n        System.out.println(listInputsResponse);\n        \n    }\n    \n}\n',ue="<?php\n\nrequire __DIR__ . '/vendor/autoload.php';\n\n///////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication and app ID.\n// Change these strings to run your own example.\n///////////////////////////////////////////////////////////////////////\n\n$USER_ID = 'YOUR_USER_ID_HERE';\n// Your PAT (Personal Access Token) can be found in the Account's Security section\n$PAT = 'YOUR_PAT_HERE';\n$APP_ID = 'YOUR_APP_ID_HERE';\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\ListInputsExtractionJobsRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ['Authorization' => ['Key ' . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    'user_id' => $USER_ID,\n    'app_id' => $APP_ID\n]);\n\n// Let's make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->ListInputsExtractionJobs(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new ListInputsExtractionJobsRequest([\n        'user_app_id' => $userDataObject,\n        'per_page'=> 1000, \n        'page'=> 1\n\n\n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception('Error: {$status->details}');\n}\n\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    throw new Exception('Failure response: ' . $response->getStatus()->getDescription() . ' ' .\n        $response->getStatus()->getDetails());\n}\n\necho $response->serializeToJsonString();\n\n?>\n",le='curl -X GET "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/inputs/jobs/extraction?per_page=1000&page=1" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\',de='#####################################################################################################\n# In this section, we set the user authentication, app ID, and the inputs extraction job ID.\n# Change these strings to run your own example.\n#####################################################################################################\n\nUSER_ID = "YOUR_USER_ID_HERE"\n# Your PAT (Personal Access Token) can be found in the Portal under Account > Security\nPAT = "YOUR_PAT_HERE"\nAPP_ID = "YOUR_APP_ID_HERE"\n# Change this ID to whatever inputs you want to cancel their upload process\nINPUTS_EXTRACTION_JOB_ID = "2a6f1f69cced42029986a72009e7d4da"\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (("authorization", "Key " + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\ncancel_inputs_extraction_response = stub.CancelInputsExtractionJobs(\n    service_pb2.CancelInputsExtractionJobsRequest(\n        user_app_id=userDataObject, ids=[INPUTS_EXTRACTION_JOB_ID]\n    ),\n    metadata=metadata,\n)\n\nif cancel_inputs_extraction_response.status.code != status_code_pb2.SUCCESS:\n    print(cancel_inputs_extraction_response.status)\n    raise Exception(\n        "Cancel input failed, status: "\n        + cancel_inputs_extraction_response.status.description\n    )\n\nprint(cancel_inputs_extraction_response)\n',_e="\x3c!--index.html file--\x3e\n\n<script>\n    //////////////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the inputs extraction job ID.\n    // Change these strings to run your own example.\n    /////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = \"YOUR_USER_ID_HERE\";\n    // Your PAT (Personal Access Token) can be found in the Account's Security section\n    const PAT = \"YOUR_PAT_HERE\";\n    const APP_ID = \"YOUR_APP_ID_HERE\";\n    // Change this ID to whatever inputs you want to cancel their upload process\n    const INPUTS_EXTRACTION_JOB_ID = \"2a6f1f69cced42029986a72009e7d4da\";\n   \n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const requestOptions = {\n        method: 'GET',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        }\n    };\n\n    fetch(`https://api.clarifai.com/v2/users/${USER_ID}/apps/${APP_ID}/inputs/jobs/extraction/${INPUTS_EXTRACTION_JOB_ID}`, requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n\n<\/script>\n",he='//index.js file\n\n////////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the inputs extraction job ID.\n// Change these strings to run your own example.\n///////////////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = "YOUR_PAT_HERE";\nconst APP_ID = "YOUR_APP_ID_HERE";\n// Change this ID to whatever inputs you want to cancel their upload process\nconst INPUTS_EXTRACTION_JOB_ID = "2a6f1f69cced42029986a72009e7d4da";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\n\nmetadata.set("authorization", "Key " + PAT);\n\nstub.CancelInputsExtractionJobs(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        ids: [INPUTS_EXTRACTION_JOB_ID]\n\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            console.log(response.status);\n            throw new Error("List inputs failed, status: " + response.status.description);\n        }\n\n        console.log(response);\n    }\n\n);\n',Ie='package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.status.*;\n\npublic class ClarifaiExample {\n\n    //////////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the inputs extraction job ID.\n    // Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change this ID to whatever inputs you want to cancel their upload process\n    static final String INPUTS_EXTRACTION_JOB_ID = "2a6f1f69cced42029986a72009e7d4da";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n        \n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n                .withCallCredentials(new ClarifaiCallCredentials(PAT));\n        \n        MultiInputsExtractionJobResponse cancelInputsResponse = stub.cancelInputsExtractionJobs(\n                CancelInputsExtractionJobsRequest.newBuilder()\n                        .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n                        .addIds(INPUTS_EXTRACTION_JOB_ID)\n                        .build()\n        );\n        \n        if (cancelInputsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post inputs failed, status: " + cancelInputsResponse.getStatus());\n        }\n        \n        System.out.println(cancelInputsResponse);\n        \n    }\n    \n}\n',Ee="<?php\n\nrequire __DIR__ . '/vendor/autoload.php';\n\n///////////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the inputs extraction job ID.\n// Change these strings to run your own example.\n///////////////////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = 'YOUR_USER_ID_HERE';\n// Your PAT (Personal Access Token) can be found in the Account's Security section\n$PAT = 'YOUR_PAT_HERE';\n$APP_ID = 'YOUR_APP_ID_HERE';\n// Change this ID to whatever inputs you want to cancel their upload process\n$INPUTS_EXTRACTION_JOB_ID = \"2a6f1f69cced42029986a72009e7d4da\";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\CancelInputsExtractionJobsRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ['Authorization' => ['Key ' . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    'user_id' => $USER_ID,\n    'app_id' => $APP_ID\n]);\n\n// Let's make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->CancelInputsExtractionJobs(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new CancelInputsExtractionJobsRequest([\n        'user_app_id' => $userDataObject,\n        'ids' => [$INPUTS_EXTRACTION_JOB_ID]\n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception('Error: {$status->details}');\n}\n\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    throw new Exception('Failure response: ' . $response->getStatus()->getDescription() . ' ' .\n        $response->getStatus()->getDetails());\n}\n\necho $response->serializeToJsonString();\n\n?>\n",Ae='curl -X GET "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/inputs/jobs/extraction/YOUR_INPUTS_EXTRACTION_JOB_ID_HERE" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\',fe='#####################################################################################################\n# In this section, we set the user authentication, app ID, and the details of the extraction job.\n# Change these strings to run your own example.\n####################################################################################################\n\nUSER_ID = "YOUR_USER_ID_HERE"\n# Your PAT (Personal Access Token) can be found in the Portal under Account > Security\nPAT = "YOUR_PAT_HERE"\nAPP_ID = "YOUR_APP_ID_HERE"\n# Change these to make your own extraction\nINPUTS_JOB_ID = ""\nCLOUD_STORAGE_URL = "s3://samples.clarifai.com/storage/"\nCUSTOM_METADATA = {"id": "id001"}\nDATASET_ID_1 = "dataset-1"\nCONCEPT_ID_1 = "lamborghini23_A"\nCONCEPT_ID_2 = "spiderman_a"\n\n##############################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##############################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\nfrom google.protobuf.struct_pb2 import Struct\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (("authorization", "Key " + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\ninput_metadata = Struct()\n\ninput_metadata.update(CUSTOM_METADATA)\n\npost_inputs_response = stub.PostInputsDataSources(\n    service_pb2.PostInputsDataSourcesRequest(\n        user_app_id=userDataObject,\n        app_pat=PAT,\n        data_sources=[\n            resources_pb2.InputsDataSource(\n                inputs_add_job_id=INPUTS_JOB_ID,\n                url=resources_pb2.DataSourceURL(url=CLOUD_STORAGE_URL),\n                input_template=resources_pb2.Input(\n                    dataset_ids=[DATASET_ID_1],  # List of dataset IDs that this input is part of\n                    data=resources_pb2.Data(\n                        metadata=input_metadata,\n                        concepts=[\n                            resources_pb2.Concept(id=CONCEPT_ID_1, value=1),\n                            resources_pb2.Concept(id=CONCEPT_ID_2, value=1),\n                        ],\n                    ),\n                ),\n            )\n        ],\n    ),\n    metadata=metadata,\n)\n\n\nif post_inputs_response.status.code != status_code_pb2.SUCCESS:\n    print(post_inputs_response.status)\n    raise Exception(\n        "Post inputs failed, status: " + post_inputs_response.status.description\n    )\n\nprint(post_inputs_response)\n',ge='\x3c!--index.html file--\x3e\n\n<script>\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the details of the extraction job.\n    // Change these strings to run your own example.\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = "YOUR_USER_ID_HERE";\n    // Your PAT (Personal Access Token) can be found in the Account\'s Security section\n    const PAT = "YOUR_PAT_HERE";\n    const APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to make your own extraction\n    const INPUTS_JOB_ID = "";\n    const CLOUD_STORAGE_URL = "s3://samples.clarifai.com/storage/";\n    const CUSTOM_METADATA = { "id": "id001" };\n    const DATASET_ID_1 = "dataset-1";\n    const CONCEPT_ID_1 = "lamborghini23_A";\n    const CONCEPT_ID_2 = "spiderman_a";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        "user_app_id": {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        "app_pat": PAT,\n        "data_sources": [\n            {\n                "inputs_add_job_id": INPUTS_JOB_ID,\n                "url": {\n                    "url": CLOUD_STORAGE_URL,\n\n                },\n                "input_template": {\n                    "dataset_ids": [DATASET_ID_1],\n                    "data": {\n                        "metadata": CUSTOM_METADATA,\n                        "concepts": [\n                            {\n                                "id": CONCEPT_ID_1,\n                                "value": 1\n                            },\n                            {\n                                "id": CONCEPT_ID_2,\n                                "value": 1\n                            }\n                        ]\n                    }\n                }\n            }\n        ]\n\n    });\n\n    const requestOptions = {\n        method: \'POST\',\n        headers: {\n            \'Accept\': \'application/json\',\n            \'Authorization\': \'Key \' + PAT\n        },\n        body: raw\n    };\n\n    fetch("https://api.clarifai.com/v2/inputs/data_sources/", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log(\'error\', error));\n\n<\/script>\n',Pe='//index.js file\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the details of the extraction job.\n// Change these strings to run your own example.\n///////////////////////////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = "YOUR_PAT_HERE";\nconst APP_ID = "YOUR_APP_ID_HERE";\n// Change these to make your own extraction\nconst INPUTS_JOB_ID = "";\nconst CLOUD_STORAGE_URL = "s3://samples.clarifai.com/storage/";\nconst CUSTOM_METADATA = { "id": "id001" };\nconst DATASET_ID_1 = "dataset-1";\nconst CONCEPT_ID_1 = "lamborghini23_A";\nconst CONCEPT_ID_2 = "spiderman_a";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PostInputsDataSources(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        "app_pat": PAT,\n        "data_sources": [\n            {\n                "inputs_add_job_id": INPUTS_JOB_ID,\n                "url": {\n                    "url": CLOUD_STORAGE_URL\n                },\n                "input_template": {\n                    "dataset_ids": [DATASET_ID_1],\n                    "data": {\n                        "metadata": CUSTOM_METADATA,\n                        "concepts": [\n                            {\n                                "id": CONCEPT_ID_1,\n                                "value": 1\n                            },\n                            {\n                                "id": CONCEPT_ID_2,\n                                "value": 1\n                            }\n                        ]\n                    }\n                }\n            }\n        ]\n\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            console.log(response.status);\n            throw new Error("Post inputs failed, status: " + response.status.description);\n        }\n\n        console.log(response);\n    }\n\n);\n',De='package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.google.protobuf.Struct;\nimport com.google.protobuf.Value;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.status.*;\n\npublic class ClarifaiExample {\n\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the details of the extraction job.\n    // Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to make your own extraction\n    static final String INPUTS_JOB_ID = "";\n    static final String CLOUD_STORAGE_URL = "s3://samples.clarifai.com/storage/";\n    static final String CUSTOM_METADATA_1 = "id";\n    static final String CUSTOM_METADATA_2 = "id001";\n    static final String DATASET_ID_1 = "dataset-1";\n    static final String CONCEPT_ID_1 = "lamborghini23_A";\n    static final String CONCEPT_ID_2 = "spiderman_a";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n                .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiInputsAddJobResponse postInputsResponse = stub.postInputsDataSources(\n                PostInputsDataSourcesRequest.newBuilder()\n                        .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n                        .setAppPat(PAT)\n                        .addDataSources(InputsDataSource.newBuilder().setInputsAddJobId(INPUTS_JOB_ID)\n                                .setUrl(DataSourceURL.newBuilder()\n                                        .setUrl(CLOUD_STORAGE_URL)\n                                )\n                                .setInputTemplate(Input.newBuilder()\n                                        .addDatasetIds(DATASET_ID_1)\n                                        .setData(Data.newBuilder()\n                                                .setMetadata(\n                                                        Struct.newBuilder()\n                                                                .putFields(CUSTOM_METADATA_1, Value.newBuilder().setStringValue(CUSTOM_METADATA_2).build())\n                                                )\n                                                .addConcepts(Concept.newBuilder()\n                                                        .setId(CONCEPT_ID_1)\n                                                        .setValue(1f)\n                                                )\n                                                .addConcepts(Concept.newBuilder()\n                                                        .setId(CONCEPT_ID_2)\n                                                        .setValue(1f)\n                                                )\n                                        ))\n                        ).build()\n        );\n\n        if (postInputsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post inputs failed, status: " + postInputsResponse.getStatus());\n        }\n\n        System.out.println(postInputsResponse);\n\n    }\n\n}\n',Te="<?php\n\nrequire __DIR__ . '/vendor/autoload.php';\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the details of the extraction job.\n// Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = 'YOUR_USER_ID_HERE';\n// Your PAT (Personal Access Token) can be found in the Account's Security section\n$PAT = 'YOUR_PAT_HERE';\n$APP_ID = 'YOUR_APP_ID_HERE';\n// Change these to make your own extraction\n$INPUTS_JOB_ID = '';\n$CLOUD_STORAGE_URL = 's3://samples.clarifai.com/storage/';\n$CUSTOM_METADATA = '{\"id\": \"id001\"}';\n$DATASET_ID_1 = 'dataset-1';\n$CONCEPT_ID_1 = 'lamborghini23_A';\n$CONCEPT_ID_2 = 'spiderman_a';\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\PostInputsDataSourcesRequest;\nuse Clarifai\\Api\\InputsDataSource;\nuse Clarifai\\Api\\DataSourceURL;\nuse Clarifai\\Api\\Concept;\nuse Clarifai\\Api\\Data;\nuse Clarifai\\Api\\Input;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ['Authorization' => ['Key ' . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    'user_id' => $USER_ID,\n    'app_id' => $APP_ID\n]);\n\n// Decode the JSON object into a PHP object\n$CUSTOM_METADATA_DECODE = var_dump(json_decode($CUSTOM_METADATA));\n\n// Let's make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PostInputsDataSources(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new PostInputsDataSourcesRequest([\n        'user_app_id' => $userDataObject,\n        'app_pat' => $PAT,\n        'data_sources' => [\n            new InputsDataSource([\n                'inputs_add_job_id' => $INPUTS_JOB_ID,\n                'url' => new DataSourceURL([\n                    'url' => $CLOUD_STORAGE_URL,\n\n                ]),\n                'input_template' => new Input([\n                    'dataset_ids' => [$DATASET_ID_1],\n                    'data' => new Data([\n                        'metadata' => $CUSTOM_METADATA_DECODE,\n                        'concepts' => [\n                            new Concept([\n                                'id' => $CONCEPT_ID_1,\n                                'value' => 1\n                            ]),\n                            new Concept([\n                                'id' => $CONCEPT_ID_2,\n                                'value' => 1\n                            ])\n                        ]\n                    ])\n                ])\n            ])\n        ]\n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception(\"Error: {$status->details}\");\n}\n\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    throw new Exception(\"Failure response: \" . $response->getStatus()->getDescription() . \" \" .\n        $response->getStatus()->getDetails());\n}\n\necho $response->serializeToJsonString();\n\n?>\n",Ce='curl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/inputs/data_sources/" \\\n-H "Authorization: Key YOUR_PAT_HERE" \\\n-H "Content-Type: application/json" \\\n-d \'{\n"app_pat": "YOUR_PAT_HERE",\n    "data_sources": [\n        {\n            "inputs_add_job_id": "",\n            "url": {\n                "url": "s3://samples.clarifai.com/storage/"\n            },\n            "input_template": {\n                "dataset_ids": ["dataset-1"],\n                "data": {\n                    "metadata": { "id": "id001" },\n                    "concepts": [\n                        {\n                            "id": "lamborghini23_A",\n                            "value": 1\n                        },\n                        {\n                            "id": "spiderman_a",\n                            "value": 1\n                        }\n                    ]\n                }\n            }\n        }\n    ]\n  }\'',me='status {\n  code: SUCCESS\n  description: "Ok"\n  req_id: "8759d87e31403bbd838794fe6016f36d"\n}\ninputs_add_jobs {\n  id: "2581ebd8d7cd42e7ac0da2bec14d5426"\n  progress {\n  }\n  created_at {\n    seconds: 1708361354\n    nanos: 820114719\n  }\n  modified_at {\n    seconds: 1708361354\n    nanos: 847655746\n  }\n  extraction_jobs {\n    status {\n      code: JOB_QUEUED\n      description: "Job is queued to be ran."\n    }\n    id: "2a6f1f69cced42029986a72009e7d4da"\n    url: "s3://samples.clarifai.com/storage/"\n    progress {\n    }\n    created_at {\n      seconds: 1708361354\n      nanos: 835105396\n    }\n    modified_at {\n      seconds: 1708361354\n      nanos: 835105396\n    }\n  }\n  status {\n    code: JOB_COMPLETED\n    description: "Job successfully ran."\n  }\n}\n',Se='status {\n  code: SUCCESS\n  description: "Ok"\n  req_id: "bae1f832c8931d47388f875653e7035d"\n}\ninputs_extraction_job {\n  status {\n    code: JOB_COMPLETED\n    description: "Job successfully ran."\n  }\n  id: "2a6f1f69cced42029986a72009e7d4da"\n  url: "s3://samples.clarifai.com/storage/"\n  progress {\n    image_inputs_count: 3\n    video_inputs_count: 1\n  }\n  created_at {\n    seconds: 1708361354\n    nanos: 835105000\n  }\n  modified_at {\n    seconds: 1708361355\n    nanos: 386004000\n  }\n}\n',Re='----\ninputs_extraction_jobs {\n  status {\n    code: JOB_COMPLETED\n    description: "Job successfully ran."\n  }\n  id: "487d863784804390a92e1108ee1ae1fb"\n  url: "s3://samples.clarifai.com/storage/"\n  progress {\n    image_inputs_count: 3\n    video_inputs_count: 1\n  }\n  created_at {\n    seconds: 1708406450\n    nanos: 685101000\n  }\n  modified_at {\n    seconds: 1708406451\n    nanos: 191007000\n  }\n}\ninputs_extraction_jobs {\n  status {\n    code: JOB_COMPLETED\n    description: "Job successfully ran."\n  }\n  id: "16d65cdff5d64ae8ba94ae59f5d7f43c"\n  url: "s3://samples.clarifai.com/storage/"\n  progress {\n    image_inputs_count: 3\n    video_inputs_count: 1\n  }\n  created_at {\n    seconds: 1708406156\n    nanos: 2926000\n  }\n  modified_at {\n    seconds: 1708406156\n    nanos: 560108000\n  }\n}\ninputs_extraction_jobs {\n  status {\n    code: JOB_COMPLETED\n    description: "Job successfully ran."\n  }\n  id: "423b4dfa36f64fffbe79cf845918d4c0"\n  url: "s3://samples.clarifai.com/storage/"\n  progress {\n    image_inputs_count: 3\n    video_inputs_count: 1\n  }\n  created_at {\n    seconds: 1708405684\n    nanos: 297689000\n  }\n  modified_at {\n    seconds: 1708405684\n    nanos: 778885000\n  }\n}\ninputs_extraction_jobs {\n  status {\n    code: JOB_COMPLETED\n    description: "Job successfully ran."\n  }\n  id: "a5af6a185ab148d4b7eb02e713d3340d"\n  url: "s3://samples.clarifai.com/storage/"\n  progress {\n    image_inputs_count: 3\n    video_inputs_count: 1\n  }\n  created_at {\n    seconds: 1708405639\n    nanos: 186106000\n  }\n  modified_at {\n    seconds: 1708405639\n    nanos: 696943000\n  }\n}\ninputs_extraction_jobs {\n  status {\n    code: JOB_COMPLETED\n    description: "Job successfully ran."\n  }\n  id: "1c10da09706d40448bf11fc5aaa8664b"\n  url: "s3://samples.clarifai.com/storage/"\n  progress {\n    image_inputs_count: 3\n    video_inputs_count: 1\n  }\n  created_at {\n    seconds: 1708405297\n    nanos: 953730000\n  }\n  modified_at {\n    seconds: 1708405298\n    nanos: 506209000\n  }\n}\ninputs_extraction_jobs {\n  status {\n    code: JOB_COMPLETED\n    description: "Job successfully ran."\n  }\n  id: "10ad7ba72e5e49899a042637178c9452"\n  url: "s3://samples.clarifai.com/storage/"\n  progress {\n    image_inputs_count: 3\n    video_inputs_count: 1\n  }\n  created_at {\n    seconds: 1708404787\n    nanos: 575667000\n  }\n  modified_at {\n    seconds: 1708404788\n    nanos: 141744000\n  }\n}\ninputs_extraction_jobs {\n  status {\n    code: JOB_COMPLETED\n    description: "Job successfully ran."\n  }\n  id: "8d7a240f39494ce18c3a5f4aeea687c1"\n  url: "s3://samples.clarifai.com/storage/"\n  progress {\n    image_inputs_count: 3\n    video_inputs_count: 1\n  }\n  created_at {\n    seconds: 1708403207\n    nanos: 89134000\n  }\n  modified_at {\n    seconds: 1708403207\n    nanos: 729276000\n  }\n}\ninputs_extraction_jobs {\n  status {\n    code: JOB_COMPLETED\n    description: "Job successfully ran."\n  }\n  id: "2a6f1f69cced42029986a72009e7d4da"\n  url: "s3://samples.clarifai.com/storage/"\n  progress {\n    image_inputs_count: 3\n    video_inputs_count: 1\n  }\n  created_at {\n    seconds: 1708361354\n    nanos: 835105000\n  }\n  modified_at {\n    seconds: 1708361355\n    nanos: 386004000\n  }\n}\ninputs_extraction_jobs {\n  status {\n    code: JOB_COMPLETED\n    description: "Job successfully ran."\n  }\n  id: "6db64516daf04abd97852407f9076e42"\n  url: "s3://samples.clarifai.com/storage/"\n  progress {\n    image_inputs_count: 3\n    video_inputs_count: 1\n  }\n  created_at {\n    seconds: 1708361312\n    nanos: 309789000\n  }\n  modified_at {\n    seconds: 1708361313\n    nanos: 435552000\n  }\n}\ninputs_extraction_jobs {\n  status {\n    code: JOB_COMPLETED\n    description: "Job successfully ran."\n  }\n  id: "7e4bd42e84294e8f9423e0a01783e3b1"\n  url: "s3://samples.clarifai.com/storage/"\n  progress {\n    image_inputs_count: 3\n    video_inputs_count: 1\n  }\n  created_at {\n    seconds: 1708354769\n    nanos: 17131000\n  }\n  modified_at {\n    seconds: 1708354769\n    nanos: 473323000\n  }\n  input_template {\n    data {\n      concepts {\n        id: "lamborghini23_A"\n        value: 1\n      }\n      concepts {\n        id: "spiderman_a"\n        value: 1\n      }\n      metadata {\n        fields {\n          key: "id"\n          value {\n            string_value: "id001"\n          }\n        }\n      }\n    }\n    dataset_ids: "dataset-1"\n  }\n}\n-----',Ue='status {\n  code: SUCCESS\n  description: "Ok"\n  req_id: "32694c6a3ef8fe3f6704502c0b053734"\n}\ninputs_add_jobs {\n  id: "66b5ca001e754111a81c4839cdabed10"\n  progress {\n  }\n  created_at {\n    seconds: 1708500170\n    nanos: 508992497\n  }\n  modified_at {\n    seconds: 1708500170\n    nanos: 582792601\n  }\n  extraction_jobs {\n    status {\n      code: JOB_QUEUED\n      description: "Job is queued to be ran."\n    }\n    id: "7e9b139f65fb4426a3d273d609758d34"\n    url: "s3://samples.clarifai.com/storage/"\n    progress {\n    }\n    created_at {\n      seconds: 1708500170\n      nanos: 550291872\n    }\n    modified_at {\n      seconds: 1708500170\n      nanos: 550291872\n    }\n    input_template {\n      data {\n        concepts {\n          id: "lamborghini23_A"\n          value: 1\n        }\n        concepts {\n          id: "spiderman_a"\n          value: 1\n        }\n        metadata {\n          fields {\n            key: "id"\n            value {\n              string_value: "id001"\n            }\n          }\n        }\n      }\n      dataset_ids: "dataset-1"\n    }\n  }\n  status {\n    code: JOB_COMPLETED\n    description: "Job successfully ran."\n  }\n}\n',Oe={description:"Manage the data in your app",sidebar_position:2},be="Add, Get, Update, Delete",we={},Ne=[{value:"Add Inputs",id:"add-inputs",level:2},{value:"Add Inputs via URL",id:"add-inputs-via-url",level:3},{value:"Add Inputs via Bytes",id:"add-inputs-via-bytes",level:3},{value:"Add Multiple Inputs With IDs",id:"add-multiple-inputs-with-ids",level:3},{value:"Add Inputs With Concepts",id:"add-inputs-with-concepts",level:3},{value:"Add Inputs With Multiple Concepts",id:"add-inputs-with-multiple-concepts",level:3},{value:"Add Inputs With Custom Metadata",id:"add-inputs-with-custom-metadata",level:3},{value:"Add Inputs From Cloud Storage",id:"add-inputs-from-cloud-storage",level:2},{value:"Add Inputs via Cloud Storage URLs",id:"add-inputs-via-cloud-storage-urls",level:3},{value:"Track Upload Process",id:"track-upload-process",level:3},{value:"List Inputs Extraction Jobs",id:"list-inputs-extraction-jobs",level:3},{value:"Cancel Extraction Jobs",id:"cancel-extraction-jobs",level:3},{value:"Add Inputs With Concepts and Datasets",id:"add-inputs-with-concepts-and-datasets",level:3},{value:"List Inputs",id:"list-inputs",level:2},{value:"List all Inputs",id:"list-all-inputs",level:3},{value:"List Inputs (Streaming)",id:"list-inputs-streaming",level:3},{value:"Get Inputs",id:"get-inputs",level:2},{value:"Get Input by ID",id:"get-input-by-id",level:3},{value:"Get Inputs&#39; Status",id:"get-inputs-status",level:3},{value:"Update Inputs",id:"update-inputs",level:2},{value:"Update Input With Concepts",id:"update-input-with-concepts",level:3},{value:"Bulk Update Inputs With Concepts",id:"bulk-update-inputs-with-concepts",level:3},{value:"Delete Inputs",id:"delete-inputs",level:2},{value:"Delete Concepts From an Input",id:"delete-concepts-from-an-input",level:3},{value:"Bulk Delete Concepts From a List of Inputs",id:"bulk-delete-concepts-from-a-list-of-inputs",level:3},{value:"Delete Input by ID",id:"delete-input-by-id",level:3},{value:"Delete a List of Inputs",id:"delete-a-list-of-inputs",level:3}];function He(n){const e={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...n.components},{Details:t}=e;return t||function(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"add-get-update-delete",children:"Add, Get, Update, Delete"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Manage the data in your app"})}),"\n",(0,s.jsx)("hr",{}),"\n","\n","\n","\n","\n","\n","\n",(0,s.jsx)(e.p,{children:"The API is built around a simple idea. You send inputs (such as images) to the service and it returns predictions. In addition to receiving predictions on inputs, you can also index inputs and their predictions to later search against. You can also index inputs with concepts to later train your own model."}),"\n",(0,s.jsx)(e.p,{children:"When you add an input to your app, the base workflow of your app runs, computing the outputs from all the models in that workflow and indexing those outputs. Those indexed outputs are what incur the indexing fee monthly, and enable search and training on top of the outputs of the base workflow models."}),"\n",(0,s.jsx)(e.admonition,{type:"info",children:(0,s.jsxs)(e.p,{children:["The initialization code used in the following examples is outlined in detail on the ",(0,s.jsx)(e.a,{href:"https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions",children:"client installation page."})]})}),"\n",(0,s.jsx)(e.h2,{id:"add-inputs",children:"Add Inputs"}),"\n",(0,s.jsxs)(e.p,{children:["You can add inputs one by one or in bulk. If you send them in bulk, you are limited to sending 128 inputs at a time. Learn more ",(0,s.jsx)(e.a,{href:"https://docs.clarifai.com/sdk/managing-inputs#api-upload-limits",children:"here"}),"."]}),"\n",(0,s.jsx)(e.admonition,{title:"Note",type:"important",children:(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Adding inputs is an asynchronous operation."})," That means it will process indexing of your inputs through your default workflow in the background, which can take some time. In order to check the status of each input you add, see the section on ",(0,s.jsx)(e.a,{href:"#get-inputs",children:"Get Inputs"})," and look for status 30000 (INPUT_IMAGE_DOWNLOAD_SUCCESS) status code on each input to know when it has successfully been indexed."]})}),"\n",(0,s.jsx)(e.h3,{id:"add-inputs-via-url",children:"Add Inputs via URL"}),"\n",(0,s.jsx)(e.p,{children:"Below is an example of how to add inputs via a publicly accessible URL."}),"\n",(0,s.jsxs)(r.A,{children:[(0,s.jsx)(o.A,{value:"python",label:"Python",children:(0,s.jsx)(c.A,{className:"language-python",children:p})}),(0,s.jsx)(o.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:S})}),(0,s.jsx)(o.A,{value:"nodejs",label:"NodeJS",children:(0,s.jsx)(c.A,{className:"language-javascript",children:B})}),(0,s.jsx)(o.A,{value:"java",label:"Java",children:(0,s.jsx)(c.A,{className:"language-java",children:an})}),(0,s.jsx)(o.A,{value:"php",label:"PHP",children:(0,s.jsx)(c.A,{className:"language-php",children:jn})}),(0,s.jsx)(o.A,{value:"curl",label:"cURL",children:(0,s.jsx)(c.A,{className:"language-bash",children:gn})})]}),"\n",(0,s.jsx)(e.h3,{id:"add-inputs-via-bytes",children:"Add Inputs via Bytes"}),"\n",(0,s.jsx)(e.p,{children:"Below is an example of how to add inputs via bytes."}),"\n",(0,s.jsx)(e.admonition,{title:"Note",type:"important",children:(0,s.jsxs)(e.p,{children:["The data must be base64 encoded. When you add a base64 image to our servers, a copy will be stored and hosted on our servers. If you already have an image hosting service, we recommend using it and adding images via the ",(0,s.jsx)(e.code,{children:"url"})," parameter."]})}),"\n",(0,s.jsxs)(r.A,{children:[(0,s.jsx)(o.A,{value:"python",label:"Python",children:(0,s.jsx)(c.A,{className:"language-python",children:u})}),(0,s.jsx)(o.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:R})}),(0,s.jsx)(o.A,{value:"nodejs",label:"NodeJS",children:(0,s.jsx)(c.A,{className:"language-javascript",children:k})}),(0,s.jsx)(o.A,{value:"java",label:"Java",children:(0,s.jsx)(c.A,{className:"language-java",children:sn})}),(0,s.jsx)(o.A,{value:"php",label:"PHP",children:(0,s.jsx)(c.A,{className:"language-php",children:xn})}),(0,s.jsx)(o.A,{value:"curl",label:"cURL",children:(0,s.jsx)(c.A,{className:"language-bash",children:Pn})})]}),"\n",(0,s.jsx)(e.h3,{id:"add-multiple-inputs-with-ids",children:"Add Multiple Inputs With IDs"}),"\n",(0,s.jsxs)(e.p,{children:["In cases where you have your own ",(0,s.jsx)(e.code,{children:"id"})," and you only have one item per image, you are encouraged to send inputs with your own ",(0,s.jsx)(e.code,{children:"id"}),". This will help you later match the input to your own database."]}),"\n",(0,s.jsxs)(e.p,{children:["If you do not send an ",(0,s.jsx)(e.code,{children:"id"}),", one will be created for you. If you have more than one item per image, it is recommended that you put the product ",(0,s.jsx)(e.code,{children:"id"})," in the metadata."]}),"\n",(0,s.jsxs)(r.A,{children:[(0,s.jsx)(o.A,{value:"python",label:"Python",children:(0,s.jsx)(c.A,{className:"language-python",children:l})}),(0,s.jsx)(o.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:U})}),(0,s.jsx)(o.A,{value:"nodejs",label:"NodeJS",children:(0,s.jsx)(c.A,{className:"language-javascript",children:M})}),(0,s.jsx)(o.A,{value:"java",label:"Java",children:(0,s.jsx)(c.A,{className:"language-java",children:rn})}),(0,s.jsx)(o.A,{value:"php",label:"PHP",children:(0,s.jsx)(c.A,{className:"language-php",children:vn})}),(0,s.jsx)(o.A,{value:"curl",label:"cURL",children:(0,s.jsx)(c.A,{className:"language-bash",children:Dn})})]}),"\n",(0,s.jsx)(e.h3,{id:"add-inputs-with-concepts",children:"Add Inputs With Concepts"}),"\n",(0,s.jsxs)(e.p,{children:["If you would like to add an input with concepts, you can do so. ",(0,s.jsx)(e.a,{href:"https://docs.clarifai.com/api-guide/concepts/",children:"Concepts"})," play an important role in creating your own models."]}),"\n",(0,s.jsxs)(e.p,{children:["You can learn more about creating your own models ",(0,s.jsx)(e.a,{href:"https://docs.clarifai.com/api-guide/model/",children:"here"}),"."]}),"\n",(0,s.jsxs)(e.p,{children:["Concepts also help you search for inputs. You can learn more about search ",(0,s.jsx)(e.a,{href:"https://docs.clarifai.com/api-guide/search/",children:"here"}),"."]}),"\n",(0,s.jsx)(e.p,{children:"When you add a concept to an input, you need to indicate whether the concept is present in the image or not."}),"\n",(0,s.jsx)(e.p,{children:"You can add inputs with concepts via URLs or bytes."}),"\n",(0,s.jsxs)(r.A,{children:[(0,s.jsx)(o.A,{value:"python",label:"Python",children:(0,s.jsx)(c.A,{className:"language-python",children:d})}),(0,s.jsx)(o.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:O})}),(0,s.jsx)(o.A,{value:"nodejs",label:"NodeJS",children:(0,s.jsx)(c.A,{className:"language-javascript",children:q})}),(0,s.jsx)(o.A,{value:"java",label:"Java",children:(0,s.jsx)(c.A,{className:"language-java",children:on})}),(0,s.jsx)(o.A,{value:"php",label:"PHP",children:(0,s.jsx)(c.A,{className:"language-php",children:yn})}),(0,s.jsx)(o.A,{value:"curl",label:"cURL",children:(0,s.jsx)(c.A,{className:"language-bash",children:Tn})})]}),"\n",(0,s.jsx)(e.h3,{id:"add-inputs-with-multiple-concepts",children:"Add Inputs With Multiple Concepts"}),"\n",(0,s.jsx)(e.p,{children:"You can also add an input with multiple concepts in a single API call. You can provide the concepts in a list and iterate through it."}),"\n",(0,s.jsx)(e.p,{children:"You can add the inputs via URLs or bytes."}),"\n",(0,s.jsxs)(r.A,{children:[(0,s.jsx)(o.A,{value:"python",label:"Python",children:(0,s.jsx)(c.A,{className:"language-python",children:_})}),(0,s.jsx)(o.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:b})}),(0,s.jsx)(o.A,{value:"nodejs",label:"NodeJS",children:(0,s.jsx)(c.A,{className:"language-javascript",children:J})})]}),"\n",(0,s.jsx)(e.h3,{id:"add-inputs-with-custom-metadata",children:"Add Inputs With Custom Metadata"}),"\n",(0,s.jsx)(e.p,{children:"In addition to adding an input with concepts, you can also add an input with custom metadata. This metadata will then be searchable. Metadata can be any arbitrary JSON."}),"\n",(0,s.jsxs)(e.p,{children:["If you have more than one item per image, it is recommended to put the ",(0,s.jsx)(e.code,{children:"id"})," in the metadata like:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-text",children:'{\n  "product_id": "xyz"\n}\n'})}),"\n",(0,s.jsxs)(r.A,{children:[(0,s.jsx)(o.A,{value:"python",label:"Python",children:(0,s.jsx)(c.A,{className:"language-python",children:h})}),(0,s.jsx)(o.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:w})}),(0,s.jsx)(o.A,{value:"nodejs",label:"NodeJS",children:(0,s.jsx)(c.A,{className:"language-javascript",children:W})}),(0,s.jsx)(o.A,{value:"java",label:"Java",children:(0,s.jsx)(c.A,{className:"language-java",children:cn})}),(0,s.jsx)(o.A,{value:"php",label:"PHP",children:(0,s.jsx)(c.A,{className:"language-php",children:Yn})}),(0,s.jsx)(o.A,{value:"curl",label:"cURL",children:(0,s.jsx)(c.A,{className:"language-bash",children:Cn})})]}),"\n",(0,s.jsx)(e.h2,{id:"add-inputs-from-cloud-storage",children:"Add Inputs From Cloud Storage"}),"\n",(0,s.jsx)(e.p,{children:"You can add inputs from various cloud storage platforms, such as S3 (Amazon Simple Storage Service) and GCP (Google Cloud Platform), by simply providing their corresponding URLs. In cases where access credentials are necessary, you can include them as part of the request."}),"\n",(0,s.jsxs)(e.p,{children:["This simplifies the process of adding inputs to our platform, offering a more efficient alternative to the conventional method of using the ",(0,s.jsx)(e.strong,{children:"PostInputs"})," endpoint for users who already have data stored in the cloud platforms."]}),"\n",(0,s.jsx)(e.admonition,{type:"note",children:(0,s.jsxs)(e.p,{children:["This functionality has been introduced starting from the ",(0,s.jsx)(e.a,{href:"https://docs.clarifai.com/product-updates/changelog/release101#api",children:"10.1 release"}),"."]})}),"\n",(0,s.jsx)(e.admonition,{type:"info",children:(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"Image files stored in the cloud platforms will be treated as image inputs, video files as video inputs, etc. Archives will be extracted, and their contents will also be processed like this."}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"We do not support extraction of archives located inside other archives."}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["The cloud URL will serve as a filter prefix. For instance, in the case of an S3 URL like ",(0,s.jsx)(e.code,{children:"s3:/bucket/images_folder/abc"}),", files within the ",(0,s.jsx)(e.code,{children:"images_folder"})," will be processed starting with ",(0,s.jsx)(e.code,{children:"abc"}),", or within a subfolder beginning with ",(0,s.jsx)(e.code,{children:"abc"}),". For example, files such as ",(0,s.jsx)(e.code,{children:"bucket/images_folder/abcImage.png"})," or ",(0,s.jsx)(e.code,{children:"bucket/images_folder/abc-1/Data.zip"})," will be processed accordingly."]}),"\n"]}),"\n"]})}),"\n",(0,s.jsx)(e.h3,{id:"add-inputs-via-cloud-storage-urls",children:"Add Inputs via Cloud Storage URLs"}),"\n",(0,s.jsx)(e.p,{children:"Below is an example of pulling inputs from a subfolder of an S3 bucket."}),"\n","\n","\n","\n","\n","\n","\n",(0,s.jsxs)(r.A,{children:[(0,s.jsx)(o.A,{value:"python",label:"Python",children:(0,s.jsx)(c.A,{className:"language-python",children:zn})}),(0,s.jsx)(o.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:Kn})}),(0,s.jsx)(o.A,{value:"nodejs",label:"NodeJS",children:(0,s.jsx)(c.A,{className:"language-javascript",children:Vn})}),(0,s.jsx)(o.A,{value:"java",label:"Java",children:(0,s.jsx)(c.A,{className:"language-java",children:Qn})}),(0,s.jsx)(o.A,{value:"php",label:"PHP",children:(0,s.jsx)(c.A,{className:"language-php",children:Fn})}),(0,s.jsx)(o.A,{value:"curl",label:"cURL",children:(0,s.jsx)(c.A,{className:"language-bash",children:Zn})})]}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{children:"Output Example"}),(0,s.jsx)(c.A,{className:"language-javascript",children:me})]}),"\n",(0,s.jsx)(e.h3,{id:"track-upload-process",children:"Track Upload Process"}),"\n",(0,s.jsxs)(e.p,{children:["After starting to pull the inputs from a cloud storage service, you can track the progress of the exercise. Note that we\u2019ll use the ",(0,s.jsx)(e.code,{children:"inputs_extraction_job_id"})," returned after running the extraction job."]}),"\n",(0,s.jsxs)(r.A,{children:[(0,s.jsx)(o.A,{value:"python",label:"Python",children:(0,s.jsx)(c.A,{className:"language-python",children:ne})}),(0,s.jsx)(o.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:ee})}),(0,s.jsx)(o.A,{value:"nodejs",label:"NodeJS",children:(0,s.jsx)(c.A,{className:"language-javascript",children:te})}),(0,s.jsx)(o.A,{value:"java",label:"Java",children:(0,s.jsx)(c.A,{className:"language-java",children:ae})}),(0,s.jsx)(o.A,{value:"php",label:"PHP",children:(0,s.jsx)(c.A,{className:"language-php",children:se})}),(0,s.jsx)(o.A,{value:"curl",label:"cURL",children:(0,s.jsx)(c.A,{className:"language-bash",children:ie})})]}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{children:"Output Example"}),(0,s.jsx)(c.A,{className:"language-javascript",children:Se})]}),"\n",(0,s.jsx)(e.h3,{id:"list-inputs-extraction-jobs",children:"List Inputs Extraction Jobs"}),"\n",(0,s.jsx)(e.p,{children:"You can list all your inputs extraction jobs and get their details."}),"\n",(0,s.jsxs)(r.A,{children:[(0,s.jsx)(o.A,{value:"python",label:"Python",children:(0,s.jsx)(c.A,{className:"language-python",children:re})}),(0,s.jsx)(o.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:oe})}),(0,s.jsx)(o.A,{value:"nodejs",label:"NodeJS",children:(0,s.jsx)(c.A,{className:"language-javascript",children:ce})}),(0,s.jsx)(o.A,{value:"java",label:"Java",children:(0,s.jsx)(c.A,{className:"language-java",children:pe})}),(0,s.jsx)(o.A,{value:"php",label:"PHP",children:(0,s.jsx)(c.A,{className:"language-php",children:ue})}),(0,s.jsx)(o.A,{value:"curl",label:"cURL",children:(0,s.jsx)(c.A,{className:"language-bash",children:le})})]}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{children:"Output Example"}),(0,s.jsx)(c.A,{className:"language-javascript",children:Re})]}),"\n",(0,s.jsx)(e.h3,{id:"cancel-extraction-jobs",children:"Cancel Extraction Jobs"}),"\n",(0,s.jsxs)(e.p,{children:["You can cancel the process of extraction of inputs from a cloud storage service. Note that we\u2019ll use the ",(0,s.jsx)(e.code,{children:"inputs_extraction_job_id"})," returned after starting the extraction process."]}),"\n",(0,s.jsxs)(r.A,{children:[(0,s.jsx)(o.A,{value:"python",label:"Python",children:(0,s.jsx)(c.A,{className:"language-python",children:de})}),(0,s.jsx)(o.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:_e})}),(0,s.jsx)(o.A,{value:"nodejs",label:"NodeJS",children:(0,s.jsx)(c.A,{className:"language-javascript",children:he})}),(0,s.jsx)(o.A,{value:"java",label:"Java",children:(0,s.jsx)(c.A,{className:"language-java",children:Ie})}),(0,s.jsx)(o.A,{value:"php",label:"PHP",children:(0,s.jsx)(c.A,{className:"language-php",children:Ee})}),(0,s.jsx)(o.A,{value:"curl",label:"cURL",children:(0,s.jsx)(c.A,{className:"language-bash",children:Ae})})]}),"\n",(0,s.jsx)(e.h3,{id:"add-inputs-with-concepts-and-datasets",children:"Add Inputs With Concepts and Datasets"}),"\n",(0,s.jsxs)(e.p,{children:["You can also add inputs from cloud storage platforms while attaching relevant concepts, assigning them to an already existing ",(0,s.jsx)(e.a,{href:"https://docs.clarifai.com/api-guide/data/datasets/dataset-basics",children:"dataset"}),", or adding other metadata information to them."]}),"\n",(0,s.jsxs)(e.p,{children:["The ",(0,s.jsx)(e.code,{children:"input_template"})," parameter allows you to do that."]}),"\n",(0,s.jsxs)(r.A,{children:[(0,s.jsx)(o.A,{value:"python",label:"Python",children:(0,s.jsx)(c.A,{className:"language-python",children:fe})}),(0,s.jsx)(o.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:ge})}),(0,s.jsx)(o.A,{value:"nodejs",label:"NodeJS",children:(0,s.jsx)(c.A,{className:"language-javascript",children:Pe})}),(0,s.jsx)(o.A,{value:"java",label:"Java",children:(0,s.jsx)(c.A,{className:"language-java",children:De})}),(0,s.jsx)(o.A,{value:"php",label:"PHP",children:(0,s.jsx)(c.A,{className:"language-php",children:Te})}),(0,s.jsx)(o.A,{value:"curl",label:"cURL",children:(0,s.jsx)(c.A,{className:"language-bash",children:Ce})})]}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{children:"Output Example"}),(0,s.jsx)(c.A,{className:"language-javascript",children:Ue})]}),"\n",(0,s.jsx)(e.h2,{id:"list-inputs",children:"List Inputs"}),"\n",(0,s.jsx)(e.h3,{id:"list-all-inputs",children:"List all Inputs"}),"\n",(0,s.jsx)(e.p,{children:"You can list all the inputs (images) you previously added either for search or train. If you added inputs with concepts, they will be returned in the response as well."}),"\n",(0,s.jsxs)(e.p,{children:["This request is ",(0,s.jsx)(e.a,{href:"https://docs.clarifai.com/api-guide/advanced-topics/pagination",children:"paginated"}),"."]}),"\n",(0,s.jsxs)(r.A,{children:[(0,s.jsx)(o.A,{value:"python",label:"Python",children:(0,s.jsx)(c.A,{className:"language-python",children:I})}),(0,s.jsx)(o.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:N})}),(0,s.jsx)(o.A,{value:"nodejs",label:"NodeJS",children:(0,s.jsx)(c.A,{className:"language-javascript",children:X})}),(0,s.jsx)(o.A,{value:"java",label:"Java",children:(0,s.jsx)(c.A,{className:"language-java",children:pn})}),(0,s.jsx)(o.A,{value:"php",label:"PHP",children:(0,s.jsx)(c.A,{className:"language-php",children:Ln})}),(0,s.jsx)(o.A,{value:"curl",label:"cURL",children:(0,s.jsx)(c.A,{className:"language-bash",children:mn})})]}),"\n",(0,s.jsx)(e.h3,{id:"list-inputs-streaming",children:"List Inputs (Streaming)"}),"\n",(0,s.jsxs)(e.p,{children:["This is another method for listing inputs, which was built to scalably list an app's inputs in an iterative / streaming fashion. ",(0,s.jsx)(e.code,{children:"StreamInputs"})," will return ",(0,s.jsx)(e.code,{children:"per_page"})," number of inputs from a certain input onward, controlled by the optional ",(0,s.jsx)(e.code,{children:"last_id"})," parameter (defaults to the first input)."]}),"\n",(0,s.jsxs)(e.p,{children:["By default, the stream will return inputs from oldest to newest. Set the ",(0,s.jsx)(e.code,{children:"descending"})," field to true to reverse that order."]}),"\n",(0,s.jsxs)(r.A,{children:[(0,s.jsx)(o.A,{value:"python",label:"Python",children:(0,s.jsx)(c.A,{className:"language-python",children:E})}),(0,s.jsx)(o.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:H})}),(0,s.jsx)(o.A,{value:"nodejs",label:"NodeJS",children:(0,s.jsx)(c.A,{className:"language-javascript",children:z})}),(0,s.jsx)(o.A,{value:"java",label:"Java",children:(0,s.jsx)(c.A,{className:"language-java",children:un})}),(0,s.jsx)(o.A,{value:"php",label:"PHP",children:(0,s.jsx)(c.A,{className:"language-php",children:$n})})]}),"\n",(0,s.jsx)(e.h2,{id:"get-inputs",children:"Get Inputs"}),"\n",(0,s.jsx)(e.h3,{id:"get-input-by-id",children:"Get Input by ID"}),"\n",(0,s.jsxs)(e.p,{children:["If you'd like to get the details of a specific input by its ",(0,s.jsx)(e.code,{children:"id"}),", you can do that as well."]}),"\n",(0,s.jsxs)(r.A,{children:[(0,s.jsx)(o.A,{value:"python",label:"Python",children:(0,s.jsx)(c.A,{className:"language-python",children:A})}),(0,s.jsx)(o.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:j})}),(0,s.jsx)(o.A,{value:"nodejs",label:"NodeJS",children:(0,s.jsx)(c.A,{className:"language-javascript",children:K})}),(0,s.jsx)(o.A,{value:"java",label:"Java",children:(0,s.jsx)(c.A,{className:"language-java",children:ln})}),(0,s.jsx)(o.A,{value:"php",label:"PHP",children:(0,s.jsx)(c.A,{className:"language-php",children:Gn})}),(0,s.jsx)(o.A,{value:"curl",label:"cURL",children:(0,s.jsx)(c.A,{className:"language-bash",children:Sn})})]}),"\n",(0,s.jsx)(e.h3,{id:"get-inputs-status",children:"Get Inputs' Status"}),"\n",(0,s.jsx)(e.p,{children:"If you add inputs in bulk, they will be procesed in the background. You can get the status of all your inputs (processed, to_process, and errors) like this:"}),"\n",(0,s.jsxs)(r.A,{children:[(0,s.jsx)(o.A,{value:"python",label:"Python",children:(0,s.jsx)(c.A,{className:"language-python",children:f})}),(0,s.jsx)(o.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:x})}),(0,s.jsx)(o.A,{value:"nodejs",label:"NodeJS",children:(0,s.jsx)(c.A,{className:"language-javascript",children:V})}),(0,s.jsx)(o.A,{value:"java",label:"Java",children:(0,s.jsx)(c.A,{className:"language-java",children:dn})}),(0,s.jsx)(o.A,{value:"php",label:"PHP",children:(0,s.jsx)(c.A,{className:"language-php",children:Bn})}),(0,s.jsx)(o.A,{value:"curl",label:"cURL",children:(0,s.jsx)(c.A,{className:"language-bash",children:Rn})})]}),"\n",(0,s.jsx)(e.h2,{id:"update-inputs",children:"Update Inputs"}),"\n",(0,s.jsx)(e.h3,{id:"update-input-with-concepts",children:"Update Input With Concepts"}),"\n",(0,s.jsx)(e.p,{children:"To update an input with a new concept, or to change a concept value from true/false, you can do the following:"}),"\n",(0,s.jsxs)(r.A,{children:[(0,s.jsx)(o.A,{value:"python",label:"Python",children:(0,s.jsx)(c.A,{className:"language-python",children:g})}),(0,s.jsx)(o.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:v})}),(0,s.jsx)(o.A,{value:"nodejs",label:"NodeJS",children:(0,s.jsx)(c.A,{className:"language-javascript",children:Q})}),(0,s.jsx)(o.A,{value:"java",label:"Java",children:(0,s.jsx)(c.A,{className:"language-java",children:_n})}),(0,s.jsx)(o.A,{value:"php",label:"PHP",children:(0,s.jsx)(c.A,{className:"language-php",children:kn})}),(0,s.jsx)(o.A,{value:"curl",label:"cURL",children:(0,s.jsx)(c.A,{className:"language-bash",children:Un})})]}),"\n",(0,s.jsx)(e.h3,{id:"bulk-update-inputs-with-concepts",children:"Bulk Update Inputs With Concepts"}),"\n",(0,s.jsxs)(e.p,{children:["You can update existing inputs using their ",(0,s.jsx)(e.code,{children:"ids"}),". This is useful if you'd like to add concepts to inputs after they have already been added."]}),"\n",(0,s.jsx)(e.p,{children:"Below is an example of how to update multiple inputs with concepts at once."}),"\n",(0,s.jsxs)(r.A,{children:[(0,s.jsx)(o.A,{value:"python",label:"Python",children:(0,s.jsx)(c.A,{className:"language-python",children:P})}),(0,s.jsx)(o.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:y})}),(0,s.jsx)(o.A,{value:"nodejs",label:"NodeJS",children:(0,s.jsx)(c.A,{className:"language-javascript",children:F})}),(0,s.jsx)(o.A,{value:"java",label:"Java",children:(0,s.jsx)(c.A,{className:"language-java",children:hn})}),(0,s.jsx)(o.A,{value:"php",label:"PHP",children:(0,s.jsx)(c.A,{className:"language-php",children:Mn})}),(0,s.jsx)(o.A,{value:"curl",label:"cURL",children:(0,s.jsx)(c.A,{className:"language-bash",children:On})})]}),"\n",(0,s.jsx)(e.h2,{id:"delete-inputs",children:"Delete Inputs"}),"\n",(0,s.jsx)(e.h3,{id:"delete-concepts-from-an-input",children:"Delete Concepts From an Input"}),"\n",(0,s.jsx)(e.p,{children:"To remove concepts that were already added to an input, you can do this:"}),"\n",(0,s.jsxs)(r.A,{children:[(0,s.jsx)(o.A,{value:"python",label:"Python",children:(0,s.jsx)(c.A,{className:"language-python",children:D})}),(0,s.jsx)(o.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:Y})}),(0,s.jsx)(o.A,{value:"nodejs",label:"NodeJS",children:(0,s.jsx)(c.A,{className:"language-javascript",children:Z})}),(0,s.jsx)(o.A,{value:"java",label:"Java",children:(0,s.jsx)(c.A,{className:"language-java",children:In})}),(0,s.jsx)(o.A,{value:"php",label:"PHP",children:(0,s.jsx)(c.A,{className:"language-php",children:qn})}),(0,s.jsx)(o.A,{value:"curl",label:"cURL",children:(0,s.jsx)(c.A,{className:"language-bash",children:bn})})]}),"\n",(0,s.jsx)(e.h3,{id:"bulk-delete-concepts-from-a-list-of-inputs",children:"Bulk Delete Concepts From a List of Inputs"}),"\n",(0,s.jsx)(e.p,{children:"Below is an example of how to bulk delete multiple concepts from a list of inputs."}),"\n",(0,s.jsxs)(r.A,{children:[(0,s.jsx)(o.A,{value:"python",label:"Python",children:(0,s.jsx)(c.A,{className:"language-python",children:T})}),(0,s.jsx)(o.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:L})}),(0,s.jsx)(o.A,{value:"nodejs",label:"NodeJS",children:(0,s.jsx)(c.A,{className:"language-javascript",children:nn})}),(0,s.jsx)(o.A,{value:"java",label:"Java",children:(0,s.jsx)(c.A,{className:"language-java",children:En})}),(0,s.jsx)(o.A,{value:"php",label:"PHP",children:(0,s.jsx)(c.A,{className:"language-php",children:Jn})}),(0,s.jsx)(o.A,{value:"curl",label:"cURL",children:(0,s.jsx)(c.A,{className:"language-bash",children:wn})})]}),"\n",(0,s.jsx)(e.h3,{id:"delete-input-by-id",children:"Delete Input by ID"}),"\n",(0,s.jsxs)(e.p,{children:["Below is an example of how to delete a single input by its ",(0,s.jsx)(e.code,{children:"id"}),"."]}),"\n",(0,s.jsxs)(r.A,{children:[(0,s.jsx)(o.A,{value:"python",label:"Python",children:(0,s.jsx)(c.A,{className:"language-python",children:C})}),(0,s.jsx)(o.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:$})}),(0,s.jsx)(o.A,{value:"nodejs",label:"NodeJS",children:(0,s.jsx)(c.A,{className:"language-javascript",children:en})}),(0,s.jsx)(o.A,{value:"java",label:"Java",children:(0,s.jsx)(c.A,{className:"language-java",children:An})}),(0,s.jsx)(o.A,{value:"php",label:"PHP",children:(0,s.jsx)(c.A,{className:"language-php",children:Wn})}),(0,s.jsx)(o.A,{value:"curl",label:"cURL",children:(0,s.jsx)(c.A,{className:"language-bash",children:Nn})})]}),"\n",(0,s.jsx)(e.h3,{id:"delete-a-list-of-inputs",children:"Delete a List of Inputs"}),"\n",(0,s.jsx)(e.p,{children:"You can also delete multiple inputs in one API call. This will happen asynchronously."}),"\n",(0,s.jsx)(e.admonition,{type:"info",children:(0,s.jsx)(e.p,{children:"We currently support a batch size of 128 inputs per request. So, you can provide a list of 128 input IDs and delete them in one API call."})}),"\n",(0,s.jsxs)(r.A,{children:[(0,s.jsx)(o.A,{value:"python",label:"Python",children:(0,s.jsx)(c.A,{className:"language-python",children:m})}),(0,s.jsx)(o.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:G})}),(0,s.jsx)(o.A,{value:"nodejs",label:"NodeJS",children:(0,s.jsx)(c.A,{className:"language-javascript",children:tn})}),(0,s.jsx)(o.A,{value:"java",label:"Java",children:(0,s.jsx)(c.A,{className:"language-java",children:fn})}),(0,s.jsx)(o.A,{value:"php",label:"PHP",children:(0,s.jsx)(c.A,{className:"language-php",children:Xn})}),(0,s.jsx)(o.A,{value:"curl",label:"cURL",children:(0,s.jsx)(c.A,{className:"language-bash",children:Hn})})]})]})}function je(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(He,{...n})}):He(n)}},65537:(n,e,t)=>{t.d(e,{A:()=>T});var a=t(96540),s=t(18215),i=t(65627),r=t(56347),o=t(50372),c=t(30604),p=t(11861),u=t(78749);function l(n){return a.Children.toArray(n).filter((n=>"\n"!==n)).map((n=>{if(!n||(0,a.isValidElement)(n)&&function(n){const{props:e}=n;return!!e&&"object"==typeof e&&"value"in e}(n))return n;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof n.type?n.type:n.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function d(n){const{values:e,children:t}=n;return(0,a.useMemo)((()=>{const n=e??function(n){return l(n).map((n=>{let{props:{value:e,label:t,attributes:a,default:s}}=n;return{value:e,label:t,attributes:a,default:s}}))}(t);return function(n){const e=(0,p.XI)(n,((n,e)=>n.value===e.value));if(e.length>0)throw new Error(`Docusaurus error: Duplicate values "${e.map((n=>n.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(n),n}),[e,t])}function _(n){let{value:e,tabValues:t}=n;return t.some((n=>n.value===e))}function h(n){let{queryString:e=!1,groupId:t}=n;const s=(0,r.W6)(),i=function(n){let{queryString:e=!1,groupId:t}=n;if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:e,groupId:t});return[(0,c.aZ)(i),(0,a.useCallback)((n=>{if(!i)return;const e=new URLSearchParams(s.location.search);e.set(i,n),s.replace({...s.location,search:e.toString()})}),[i,s])]}function I(n){const{defaultValue:e,queryString:t=!1,groupId:s}=n,i=d(n),[r,c]=(0,a.useState)((()=>function(n){let{defaultValue:e,tabValues:t}=n;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!_({value:e,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${t.map((n=>n.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const a=t.find((n=>n.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:e,tabValues:i}))),[p,l]=h({queryString:t,groupId:s}),[I,E]=function(n){let{groupId:e}=n;const t=function(n){return n?`docusaurus.tab.${n}`:null}(e),[s,i]=(0,u.Dv)(t);return[s,(0,a.useCallback)((n=>{t&&i.set(n)}),[t,i])]}({groupId:s}),A=(()=>{const n=p??I;return _({value:n,tabValues:i})?n:null})();(0,o.A)((()=>{A&&c(A)}),[A]);return{selectedValue:r,selectValue:(0,a.useCallback)((n=>{if(!_({value:n,tabValues:i}))throw new Error(`Can't select invalid tab value=${n}`);c(n),l(n),E(n)}),[l,E,i]),tabValues:i}}var E=t(9136);const A={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var f=t(74848);function g(n){let{className:e,block:t,selectedValue:a,selectValue:r,tabValues:o}=n;const c=[],{blockElementScrollPositionUntilNextRender:p}=(0,i.a_)(),u=n=>{const e=n.currentTarget,t=c.indexOf(e),s=o[t].value;s!==a&&(p(e),r(s))},l=n=>{let e=null;switch(n.key){case"Enter":u(n);break;case"ArrowRight":{const t=c.indexOf(n.currentTarget)+1;e=c[t]??c[0];break}case"ArrowLeft":{const t=c.indexOf(n.currentTarget)-1;e=c[t]??c[c.length-1];break}}e?.focus()};return(0,f.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":t},e),children:o.map((n=>{let{value:e,label:t,attributes:i}=n;return(0,f.jsx)("li",{role:"tab",tabIndex:a===e?0:-1,"aria-selected":a===e,ref:n=>{c.push(n)},onKeyDown:l,onClick:u,...i,className:(0,s.A)("tabs__item",A.tabItem,i?.className,{"tabs__item--active":a===e}),children:t??e},e)}))})}function P(n){let{lazy:e,children:t,selectedValue:i}=n;const r=(Array.isArray(t)?t:[t]).filter(Boolean);if(e){const n=r.find((n=>n.props.value===i));return n?(0,a.cloneElement)(n,{className:(0,s.A)("margin-top--md",n.props.className)}):null}return(0,f.jsx)("div",{className:"margin-top--md",children:r.map(((n,e)=>(0,a.cloneElement)(n,{key:e,hidden:n.props.value!==i})))})}function D(n){const e=I(n);return(0,f.jsxs)("div",{className:(0,s.A)("tabs-container",A.tabList),children:[(0,f.jsx)(g,{...e,...n}),(0,f.jsx)(P,{...e,...n})]})}function T(n){const e=(0,E.A)();return(0,f.jsx)(D,{...n,children:l(n.children)},String(e))}},79329:(n,e,t)=>{t.d(e,{A:()=>r});t(96540);var a=t(18215);const s={tabItem:"tabItem_Ymn6"};var i=t(74848);function r(n){let{children:e,hidden:t,className:r}=n;return(0,i.jsx)("div",{role:"tabpanel",className:(0,a.A)(s.tabItem,r),hidden:t,children:e})}}}]);
"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[7961],{849:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>E,contentTitle:()=>m,default:()=>C,frontMatter:()=>g,metadata:()=>A,toc:()=>b});var a=t(74848),s=t(28453),r=t(11470),o=t(19365),c=t(21432);const i="##########################################################################################\n# In this section, we set the user authentication, app ID, search name, and language ID.\n# Change these strings to run your own example.\n##########################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to whatever concept you want to search for\nSEARCH_NAME = \"\u4eba\"\nLANGUAGE_ID = \"ja\"\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\npost_concepts_searches_response = stub.PostConceptsSearches(\n    service_pb2.PostConceptsSearchesRequest(\n        user_app_id=userDataObject,\n        concept_query=resources_pb2.ConceptQuery(\n            name=SEARCH_NAME,\n            language=LANGUAGE_ID\n        )\n    ),\n    metadata=metadata\n)\n\nif post_concepts_searches_response.status.code != status_code_pb2.SUCCESS:\n    print(post_concepts_searches_response.status)\n    raise Exception(\"Post concepts searches failed, status: \" + post_concepts_searches_response.status.description)\n    \nprint(\"Found concepts:\")\nfor concept in post_concepts_searches_response.concepts:\n    print(\"\\t%s %.2f\" % (concept.name, concept.value))\n\n# Uncomment this line to print the raw output\n#print(post_concepts_searches_response)",l="\x3c!--index.html file--\x3e\n\n<script>\n    ////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, search name, and language ID.\n    // Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = 'YOUR_USER_ID_HERE';\n    // Your PAT (Personal Access Token) can be found in the Account's Security section\n    const PAT = 'YOUR_PAT_HERE';\n    const APP_ID = 'YOUR_APP_ID_HERE';\n    // Change these to whatever concept you want to search for\n    const SEARCH_NAME = \"\u4eba\";\n    const LANGUAGE_ID = \"ja\";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        \"user_app_id\": {\n            \"user_id\": USER_ID,\n            \"app_id\": APP_ID\n        },\n        \"concept_query\": [\n            {\n                \"name\": SEARCH_NAME,\n                \"id\": LANGUAGE_ID\n            }\n        ]\n    });\n\n    const requestOptions = {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        },\n        body: raw\n    };\n\n    fetch(\"https://api.clarifai.com/v2/concepts/searches\", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n<\/script>",u='//index.js file\n\n////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, search name, and language ID.\n// Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n// Change these to whatever concept you want to search for\nconst SEARCH_NAME = "\u4eba";\nconst LANGUAGE_ID = "ja";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PostConceptsSearches(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        concept_query: { name: SEARCH_NAME, language: LANGUAGE_ID }\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post concepts searches failed, status: " + response.status.description);\n        }\n\n        console.log("Found concepts:");\n        for (const concept of response.concepts) {\n            console.log("\\t" + concept.name + " " + concept.value);\n        }\n    }\n);',p='package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    ///////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, search name, and language ID.\n    // Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\t\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to whatever concept you want to search for\n    static final String SEARCH_NAME = "\u4eba";\n    static final String LANGUAGE_ID = "ja";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\t\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiConceptResponse postConceptsSearchesResponse = stub.postConceptsSearches(\n            PostConceptsSearchesRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .setConceptQuery(\n                ConceptQuery.newBuilder()\n                .setName(SEARCH_NAME)\n                .setLanguage(LANGUAGE_ID))\n            .build()\n        );\n\n        if (postConceptsSearchesResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post concepts searches failed, status: " + postConceptsSearchesResponse.getStatus());\n        }\n\n        System.out.println("Found concepts:");\n        for (Concept concept: postConceptsSearchesResponse.getConceptsList()) {\n            System.out.printf("\\t%s %.2f%n", concept.getName(), concept.getValue());\n        }\n\n    }\n\n}',d='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, search name, and language ID.\n// Change these strings to run your own example.\n///////////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change these to whatever concept you want to search for\n$SEARCH_NAME = "\u4eba";\n$LANGUAGE_ID = "ja";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\PostConceptsSearchesRequest;\nuse Clarifai\\Api\\ConceptQuery;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PostConceptsSearches(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new PostConceptsSearchesRequest([\n        "user_app_id" => $userDataObject,        \n        "concept_query" => new ConceptQuery([\n            "name" => $SEARCH_NAME,\n            "language" => $LANGUAGE_ID\n        ])\n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\necho "Found concepts: </br>";\nforeach ($response->getConcepts() as $concept) {\n    echo $concept->getName() . ": " . number_format($concept->getValue(), 2) . "</br>";\n}\n\n?>',h='curl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/concepts/searches" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "concept_query": {\n      "name":"\u4eba",\n      "language": "ja"\n    }\n  }\'',_="Found concepts:\n    \u4eba 1.00\n    \u4eba 1.00",f='status {\n    code: SUCCESS\n    description: "Ok"\n    req_id: "6e24dbc1e4977bd6f4092d0c72169a68"\n  }\n  concepts {\n    id: "ai_ZKJ48TFz"\n    name: "\\344\\272\\272"\n    value: 1.0\n    created_at {\n      seconds: 1458214981\n      nanos: 223962000\n    }\n    language: "ja"\n    app_id: "main"\n    visibility {\n      gettable: PUBLIC\n    }\n    user_id: "clarifai"\n  }\n  concepts {\n    id: "ai_l8TKp2h5"\n    name: "\\344\\272\\272"\n    value: 1.0\n    created_at {\n      seconds: 1458214981\n      nanos: 223962000\n    }\n    language: "ja"\n    app_id: "main"\n    visibility {\n      gettable: PUBLIC\n    }\n    user_id: "clarifai"\n  }\n  ',g={description:"Search based on specific words.",sidebar_position:3,title:"Search by Concept"},m="Search by Concept",A={id:"api-guide/concepts/search-by-concept",title:"Search by Concept",description:"Search based on specific words.",source:"@site/docs/api-guide/concepts/search-by-concept.md",sourceDirName:"api-guide/concepts",slug:"/api-guide/concepts/search-by-concept",permalink:"/api-guide/concepts/search-by-concept",draft:!1,unlisted:!1,editUrl:"https://github.com/Clarifai/docs/blob/main/docs/api-guide/concepts/search-by-concept.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{description:"Search based on specific words.",sidebar_position:3,title:"Search by Concept"},sidebar:"tutorialSidebar",previous:{title:"Languages",permalink:"/api-guide/concepts/languages"},next:{title:"Knowledge Graph",permalink:"/api-guide/concepts/knowledge_graph"}},E={},b=[];function S(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",p:"p",strong:"strong",...(0,s.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"search-by-concept",children:"Search by Concept"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Search based on specific words"})}),"\n",(0,a.jsx)("hr",{}),"\n",(0,a.jsxs)(n.p,{children:["You can search for concepts by ",(0,a.jsx)(n.code,{children:"name"}),", even in a different ",(0,a.jsx)(n.code,{children:"language"}),", using the ",(0,a.jsx)(n.code,{children:"ConceptSearches"})," endpoint."]}),"\n",(0,a.jsx)(n.p,{children:"Below is an example of how to search for concepts."}),"\n",(0,a.jsx)(n.admonition,{type:"info",children:(0,a.jsxs)(n.p,{children:["The initialization code used in the following example is outlined in detail on the ",(0,a.jsx)(n.a,{href:"https://docs.clarifai.com/api-guide/api-overview/api-clients/#client-installation-instructions",children:"client installation page."})]})}),"\n","\n",(0,a.jsxs)(r.A,{children:[(0,a.jsx)(o.A,{value:"python",label:"Python",children:(0,a.jsx)(c.A,{className:"language-python",children:i})}),(0,a.jsx)(o.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,a.jsx)(c.A,{className:"language-javascript",children:l})}),(0,a.jsx)(o.A,{value:"nodejs",label:"NodeJS",children:(0,a.jsx)(c.A,{className:"language-javascript",children:u})}),(0,a.jsx)(o.A,{value:"java",label:"Java",children:(0,a.jsx)(c.A,{className:"language-java",children:p})}),(0,a.jsx)(o.A,{value:"php",label:"PHP",children:(0,a.jsx)(c.A,{className:"language-php",children:d})}),(0,a.jsx)(o.A,{value:"curl",label:"cURL",children:(0,a.jsx)(c.A,{className:"language-bash",children:h})})]}),"\n",(0,a.jsxs)(t,{children:[(0,a.jsx)("summary",{children:"Raw Output Example"}),(0,a.jsx)(c.A,{className:"language-js",children:_})]}),"\n",(0,a.jsxs)(t,{children:[(0,a.jsx)("summary",{children:"JSON Output Example"}),(0,a.jsx)(c.A,{className:"language-js",children:f})]})]})}function C(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(S,{...e})}):S(e)}},19365:(e,n,t)=>{t.d(n,{A:()=>o});t(96540);var a=t(18215);const s={tabItem:"tabItem_Ymn6"};var r=t(74848);function o(e){let{children:n,hidden:t,className:o}=e;return(0,r.jsx)("div",{role:"tabpanel",className:(0,a.A)(s.tabItem,o),hidden:t,children:n})}},11470:(e,n,t)=>{t.d(n,{A:()=>C});var a=t(96540),s=t(18215),r=t(23104),o=t(56347),c=t(205),i=t(57485),l=t(31682),u=t(70679);function p(e){return a.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function d(e){const{values:n,children:t}=e;return(0,a.useMemo)((()=>{const e=n??function(e){return p(e).map((e=>{let{props:{value:n,label:t,attributes:a,default:s}}=e;return{value:n,label:t,attributes:a,default:s}}))}(t);return function(e){const n=(0,l.X)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function h(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function _(e){let{queryString:n=!1,groupId:t}=e;const s=(0,o.W6)(),r=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,i.aZ)(r),(0,a.useCallback)((e=>{if(!r)return;const n=new URLSearchParams(s.location.search);n.set(r,e),s.replace({...s.location,search:n.toString()})}),[r,s])]}function f(e){const{defaultValue:n,queryString:t=!1,groupId:s}=e,r=d(e),[o,i]=(0,a.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!h({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const a=t.find((e=>e.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:r}))),[l,p]=_({queryString:t,groupId:s}),[f,g]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[s,r]=(0,u.Dv)(t);return[s,(0,a.useCallback)((e=>{t&&r.set(e)}),[t,r])]}({groupId:s}),m=(()=>{const e=l??f;return h({value:e,tabValues:r})?e:null})();(0,c.A)((()=>{m&&i(m)}),[m]);return{selectedValue:o,selectValue:(0,a.useCallback)((e=>{if(!h({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);i(e),p(e),g(e)}),[p,g,r]),tabValues:r}}var g=t(92303);const m={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var A=t(74848);function E(e){let{className:n,block:t,selectedValue:a,selectValue:o,tabValues:c}=e;const i=[],{blockElementScrollPositionUntilNextRender:l}=(0,r.a_)(),u=e=>{const n=e.currentTarget,t=i.indexOf(n),s=c[t].value;s!==a&&(l(n),o(s))},p=e=>{let n=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const t=i.indexOf(e.currentTarget)+1;n=i[t]??i[0];break}case"ArrowLeft":{const t=i.indexOf(e.currentTarget)-1;n=i[t]??i[i.length-1];break}}n?.focus()};return(0,A.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":t},n),children:c.map((e=>{let{value:n,label:t,attributes:r}=e;return(0,A.jsx)("li",{role:"tab",tabIndex:a===n?0:-1,"aria-selected":a===n,ref:e=>i.push(e),onKeyDown:p,onClick:u,...r,className:(0,s.A)("tabs__item",m.tabItem,r?.className,{"tabs__item--active":a===n}),children:t??n},n)}))})}function b(e){let{lazy:n,children:t,selectedValue:s}=e;const r=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=r.find((e=>e.props.value===s));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return(0,A.jsx)("div",{className:"margin-top--md",children:r.map(((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==s})))})}function S(e){const n=f(e);return(0,A.jsxs)("div",{className:(0,s.A)("tabs-container",m.tabList),children:[(0,A.jsx)(E,{...n,...e}),(0,A.jsx)(b,{...n,...e})]})}function C(e){const n=(0,g.A)();return(0,A.jsx)(S,{...e,children:p(e.children)},String(n))}}}]);
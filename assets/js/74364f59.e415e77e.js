"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[7757],{3173:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>Sn,contentTitle:()=>bn,default:()=>wn,frontMatter:()=>Rn,metadata:()=>a,toc:()=>Un});const a=JSON.parse('{"id":"create-manage/inputs/manage","title":"Manage Inputs via the API","description":"Learn how to use our API to manage, organize, and process your inputs","source":"@site/docs/create-manage/inputs/manage.md","sourceDirName":"create-manage/inputs","slug":"/create-manage/inputs/manage","permalink":"/create-manage/inputs/manage","draft":false,"unlisted":false,"editUrl":"https://github.com/Clarifai/docs/blob/main/docs/create-manage/inputs/manage.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"description":"Learn how to use our API to manage, organize, and process your inputs","sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Upload via the UI","permalink":"/create-manage/inputs/upload/ui"},"next":{"title":"Vector Search","permalink":"/create-manage/search/"}}');var s=t(74848),i=t(28453),r=t(65537),o=t(79329),c=t(58069);const p='from clarifai.client.input import Inputs\n\n# Initialize the Inputs object with user and app IDs\ninput_object = Inputs(user_id="YOUR_USER_ID_HERE", app_id="YOUR_APP_ID_HERE", pat="YOUR_PAT_HERE")\n                      \n# Bulk delete annotations\ninput_object.delete_annotations(input_ids=["input_id1", "input_id1", "input_id2"], annotation_ids=["annot_id11", "annot_id12", "annot_id21"])\n',u='from clarifai.client.input import Inputs\n\n# Initialize the Inputs object with user and app IDs\ninput_object = Inputs(user_id="YOUR_USER_ID_HERE", app_id="YOUR_APP_ID_HERE", pat="YOUR_PAT_HERE")\n\n# Download inputs  \ninput_object.download_inputs(list(input_object.list_inputs()))\n',l='from clarifai.client.user import User\n\n# Create the input object\ninput_obj = User(user_id="user_id").app(app_id="test_app", pat="YOUR_PAT").inputs()\n# list the inputs with pagination\nall_inputs = list(input_obj.list_inputs(page_no=1,per_page=3))\nprint(all_inputs)',d='from clarifai.client.user import User\n\ninput_obj = User(user_id="user_id", pat="YOUR_PAT").app(app_id="test_app").inputs()\n# You can also provide the inputs ids as parameters in delete_inputs function\ninput_obj.delete_inputs(list(input_obj.list_inputs()))',_='from clarifai.client.input import Inputs\n\n# Initialize the Inputs object with user and app IDs\ninput_object = Inputs(user_id="YOUR_USER_ID_HERE", app_id="YOUR_APP_ID_HERE", pat="YOUR_PAT_HERE")\n\n# Upload the image with a specific input ID\ninput_object.upload_from_url(input_id="bbox", image_url="https://samples.clarifai.com/BarackObama.jpg")\n\n# Upload initial bounding box annotations\nbbox_points = [.1, .1, .8, .9]  # Coordinates of the bounding box\nannotation = input_object.get_bbox_proto(input_id="bbox", label="face", bbox=bbox_points, label_id="id-face", annot_id="demo")\ninput_object.upload_annotations([annotation])\n\n# Update existing bounding box annotations with new coordinates\nbbox_points = [.35, .45, .6, .7]  # New coordinates of the bounding box\nannotation = input_object.get_bbox_proto(input_id="bbox", label="face", bbox=bbox_points, label_id="id-face", annot_id="demo")\ninput_object.patch_annotations([annotation], action=\'merge\')\n\n# Remove the bounding box annotations\nbbox_points = [.3, .3, .6, .7]  # Coordinates of the bounding box to be removed\nannotation = input_object.get_bbox_proto(input_id="bbox", label="face", bbox=bbox_points, label_id="id-face", annot_id="demo")\ninput_object.patch_annotations([annotation], action=\'remove\')',h='from clarifai.client.input import Inputs\n\n# Initialize the Inputs object with user and app IDs\ninput_object = Inputs(user_id="YOUR_USER_ID_HERE", app_id="YOUR_APP_ID_HERE", pat="YOUR_PAT_HERE")\n\n# Upload the image with a specific input ID\ninput_object.upload_from_url(input_id="polygon", image_url="https://samples.clarifai.com/BarackObama.jpg")\n\n# Upload initial polygon annotations\npolygon_pts = [[.1,.1],[.1,.9],[.9,.9],[.9,.1]] # Coordinates of the polygon\nannotation = input_object.get_mask_proto(input_id="polygon", label="label", polygons=polygon_pts, annot_id="annotation_id")\ninput_object.upload_annotations([annotation])\n\n# Update existing polygon annotations with new coordinates\npolygon_pts = [[.15,.15],[.15,.95],[.95,.95],[.95,.15]] # New coordinates of the polygon\nannotation = input_object.get_mask_proto(input_id="polygon", label="label", polygons=polygon_pts, annot_id="annotation_id")\ninput_object.patch_annotations([annotation],action=\'merge\')\n\n# Remove the polygon annotations\npolygon_pts = [[.3,.3],[.3,.7],[.8,.8],[.7,.3]] # Coordinates of the polygon to be removed\nannotation = input_object.get_mask_proto(input_id="polygon", label="label", polygons=polygon_pts, annot_id="annotation_id")\ninput_object.patch_annotations([annotation],action=\'remove\')\n',I='from clarifai.client.input import Inputs\nfrom google.protobuf.struct_pb2 import Struct\n\n# Metadata structure should be of Struct, so we create it, add the necessary details and provide it to input proto\nmetadata = Struct() \nmetadata.update({"split": "test"}) \n\n# Initialize the Inputs object with user and app IDs\ninput_object = Inputs(user_id="YOUR_USER_ID_HERE", app_id="YOUR_APP_ID_HERE", pat="YOUR_PAT_HERE")\n\nnew_input = input_object._get_proto(input_id="YOUR_INPUT_ID_HERE", metadata= metadata)\n\n# Update the metadata\ninput_object.patch_inputs([new_input],action="merge")\n\n# Overwrite the metadata\ninput_object.patch_inputs([new_input],action=\'overwrite\')\n',E='from clarifai.client.input import Inputs\n\n# Initialize the Inputs object with user and app IDs\ninput_object = Inputs(user_id="YOUR_USER_ID_HERE", app_id="YOUR_APP_ID_HERE", pat="YOUR_PAT_HERE")\n\n# This example changes the existing concept label "id-face" to "obama_face"\ninput_object.patch_concepts(\n    concept_ids=["id-face"],  # The ID of the concept you want to update\n    labels=["obama_face"],    # The new label name to overwrite the existing one\n    values=[],                \n    action=\'overwrite\'        # Currently, only the `overwrite` action is supported\n)\n',f='[id: "demo1"\ndata {\n  image {\n    url: "https://samples.clarifai.com/metro-north.jpg"\n    hosted {\n      prefix: "https://data.clarifai.com"\n      suffix: "users/8tzpjy1a841y/apps/test_app/inputs/image/140c856dc82565d2c4d6ea720fceff78"\n      sizes: "orig"\n      sizes: "tiny"\n      sizes: "small"\n      sizes: "large"\n      crossorigin: "use-credentials"\n    }\n    image_info {\n      width: 512\n      height: 384\n      format: "JPEG"\n      color_mode: "YUV"\n    }\n  }\n}\ncreated_at {\n  seconds: 1705917660\n  nanos: 789409000\n}\n...\n  code: INPUT_DOWNLOAD_SUCCESS\n  description: "Download complete"\n}\n]\n',P='2024-01-16 14:44:28 INFO     clarifai.client.input:                                                    input.py:732\n\n                             Inputs Deleted                                                                        \n\n                             code: SUCCESS                                                                         \n\n                             description: "Ok"                                                                     \n\n                             req_id: "4ae26cd15c7da98a1c2d3647b03d2768"  ',g="###############################################################\n# In this section, we set the user authentication and app ID. \n# Change these strings to run your own example.\n###############################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\nlist_inputs_response = stub.ListInputs(\n    service_pb2.ListInputsRequest(\n        user_app_id=userDataObject,\n        page=1, \n        per_page=10\n    ),\n    metadata=metadata\n)\n\nif list_inputs_response.status.code != status_code_pb2.SUCCESS:\n    print(list_inputs_response.status)\n    raise Exception(\"List inputs failed, status: \" + list_inputs_response.status.description)\n\nfor input_object in list_inputs_response.inputs:\n    print(input_object)\n",A="###############################################################\n# In this section, we set the user authentication and app ID. \n# Change these strings to run your own example.\n###############################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\n# To start from beginning, do not provide the last_id parameter.\nstream_inputs_response = stub.StreamInputs(\n    service_pb2.StreamInputsRequest(\n        user_app_id=userDataObject,\n        per_page=5,\n        # descending = True # Set to reverse order\n    ),\n    metadata=metadata\n)\n\nif stream_inputs_response.status.code != status_code_pb2.SUCCESS:\n    print(stream_inputs_response.status)\n    raise Exception(\"Stream inputs failed, status: \" + stream_inputs_response.status.description)\n\nprint(\"First response (starting from the first input):\")\nfor input_object in stream_inputs_response.inputs:\n    print(\"\\t\" + input_object.id)\n\nlast_id = stream_inputs_response.inputs[-1].id\n\n# Set last_id to get the next set of inputs. The returned inputs will not include the last_id input.\nstream_inputs_response = stub.StreamInputs(\n    service_pb2.StreamInputsRequest(\n        user_app_id=userDataObject,\n        per_page=5, \n        last_id=last_id\n    ),\n    metadata=metadata\n)\n\nprint(f\"Second response (first input is the one following input ID {last_id}):\")\nfor input_object in stream_inputs_response.inputs:\n    print(\"\\t\" + input_object.id)",D="###############################################################################\n# In this section, we set the user authentication, app ID, and the input's ID\n# Change these strings to run your own example.\n###############################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change this ID to whatever input you want its details\nINPUT_ID = 'eec128fd81974543bafff48702edca4d'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\nget_input_response = stub.GetInput(\n    service_pb2.GetInputRequest(\n        user_app_id=userDataObject, \n        input_id=INPUT_ID\n    ),\n    metadata=metadata\n)\n\nif get_input_response.status.code != status_code_pb2.SUCCESS:\n    print(get_input_response.status)\n    raise Exception(\"Get input failed, status: \" + get_input_response.status.description)\n\ninput_object = get_input_response.input\nprint(input_object)",C="##################################################################\n# In this section, we set the user authentication and the app ID.\n# Change these strings to run your own example.\n##################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\nget_input_count_response = stub.GetInputCount(\n    service_pb2.GetInputCountRequest(\n         user_app_id=userDataObject            \n    ),\n    metadata=metadata\n)\n\nif get_input_count_response.status.code != status_code_pb2.SUCCESS:\n    print(get_input_count_response.status)\n    raise Exception(\"Get input count failed, status: \" + get_input_count_response.status.description)\n\ncounts = get_input_count_response.counts\nprint(counts)",m="##############################################################################\n# In this section, we set the user authentication, app ID, and the input and \n# concept ID we want to update. Change these strings to run your own example.\n##############################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these based on the update you want to make\nINPUT_ID = 'eec128fd81974543bafff48702edca4d'\nCONCEPT_ID_1 = 'tree'\nCONCEPT_ID_2 = 'water'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\npatch_inputs_response = stub.PatchInputs(\n    service_pb2.PatchInputsRequest(\n        user_app_id=userDataObject,\n        action=\"merge\",  # Supported actions: overwrite, merge, remove\n        inputs=[\n            resources_pb2.Input(\n                id=INPUT_ID,\n                data=resources_pb2.Data(\n                    concepts=[\n                        resources_pb2.Concept(id=CONCEPT_ID_1, value=1.),  # 1 means true, this concept is present.\n                        resources_pb2.Concept(id=CONCEPT_ID_2, value=0.)  # 0 means false, this concept is not present.\n                    ]\n                )\n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif patch_inputs_response.status.code != status_code_pb2.SUCCESS:\n    print(patch_inputs_response.status)\n    raise Exception(\"Patch inputs failed, status: \" + patch_inputs_response.status.description)\n",T="################################################################################\n# In this section, we set the user authentication, app ID, and the inputs and \n# concepts IDs we want to update. Change these strings to run your own example.\n################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these based on the updates you want to make\nINPUT_ID_1 = '2e9c4a86555d40ffb47c7b045d7e3048'\nINPUT_ID_2 = '52b467c2005946cbbbe7a5eec76e29cf'\nCONCEPT_ID_1 = 'tree'\nCONCEPT_ID_2 = 'water'\nCONCEPT_ID_3 = 'animal'\nCONCEPT_ID_4 = 'fruit'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\npatch_inputs_response = stub.PatchInputs(\n    service_pb2.PatchInputsRequest(\n        user_app_id=userDataObject,\n        action=\"merge\",  # Supported actions: overwrite, merge, remove.\n        inputs=[\n            resources_pb2.Input(\n                id=INPUT_ID_1,\n                data=resources_pb2.Data(\n                    concepts=[\n                        resources_pb2.Concept(id=CONCEPT_ID_1, value=1.),  # 1 means true, this concept is present.\n                        resources_pb2.Concept(id=CONCEPT_ID_2, value=0.)  # 0 means false, this concept is not present.\n                    ]\n                )\n            ),\n            resources_pb2.Input(\n                id=INPUT_ID_2,\n                data=resources_pb2.Data(\n                    concepts=[\n                        resources_pb2.Concept(id=CONCEPT_ID_3, value=1.),\n                        resources_pb2.Concept(id=CONCEPT_ID_4, value=0.)\n                    ]\n                )\n            ),\n        ]\n    ),\n    metadata=metadata\n)\n\nif patch_inputs_response.status.code != status_code_pb2.SUCCESS:\n    print(patch_inputs_response.status)\n    raise Exception(\"Patch inputs failed, status: \" + patch_inputs_response.status.description)\n",R="##############################################################################\n# In this section, we set the user authentication, app ID, and the input and \n# concept ID. Change these strings to run your own example.\n##############################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these based on the concept you want to remove\nINPUT_ID = '2e9c4a86555d40ffb47c7b045d7e3048'\nCONCEPT_ID = 'water'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\npatch_inputs_response = stub.PatchInputs(\n    service_pb2.PatchInputsRequest(\n        user_app_id=userDataObject,\n        action=\"remove\",  # Supported actions: overwrite, merge, remove.\n        inputs=[\n            resources_pb2.Input(\n                id=INPUT_ID,\n                data=resources_pb2.Data(\n                    concepts=[\n                        # We're removing the concept, so there's no need to specify\n                        # the concept value.\n                        resources_pb2.Concept(id=CONCEPT_ID),\n                    ]\n                )\n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif patch_inputs_response.status.code != status_code_pb2.SUCCESS:\n    print(patch_inputs_response.status)\n    raise Exception(\"Patch inputs failed, status: \" + patch_inputs_response.status.description)\n",b="##############################################################################\n# In this section, we set the user authentication, app ID, and the inputs and \n# concepts IDs. Change these strings to run your own example.\n##############################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these based on the concepts you want to remove\nINPUT_ID_1 = '2e9c4a86555d40ffb47c7b045d7e3048'\nINPUT_ID_2 = '52b467c2005946cbbbe7a5eec76e29cf'\nCONCEPT_ID_1 = 'tree'\nCONCEPT_ID_2 = 'water'\nCONCEPT_ID_3 = 'animal'\nCONCEPT_ID_4 = 'fruit'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\npatch_inputs_response = stub.PatchInputs(\n    service_pb2.PatchInputsRequest(\n        user_app_id=userDataObject,\n        action=\"remove\",  # Supported actions: overwrite, merge, remove.\n        inputs=[\n            resources_pb2.Input(\n                id=INPUT_ID_1,\n                data=resources_pb2.Data(\n                    concepts=[\n                        # We're removing the concepts, so there's no need to specify\n                        # the concept value.\n                        resources_pb2.Concept(id=CONCEPT_ID_1),\n                        resources_pb2.Concept(id=CONCEPT_ID_2),\n                    ]\n                )\n            ),\n            resources_pb2.Input(\n                id=INPUT_ID_2,\n                data=resources_pb2.Data(\n                    concepts=[\n                        resources_pb2.Concept(id=CONCEPT_ID_3),\n                        resources_pb2.Concept(id=CONCEPT_ID_4),\n                    ]\n                )\n            ),\n        ]\n    ),\n    metadata=metadata\n)\n\nif patch_inputs_response.status.code != status_code_pb2.SUCCESS:\n    print(patch_inputs_response.status)\n    raise Exception(\"Patch inputs failed, status: \" + patch_inputs_response.status.description)\n",S="##############################################################################\n# In this section, we set the user authentication, app ID, and the ID of the \n# input we want to delete. Change these strings to run your own example.\n##############################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change this based on the input you want to delete\nINPUT_ID = '2e9c4a86555d40ffb47c7b045d7e3048'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\ndelete_input_response = stub.DeleteInput(\n    service_pb2.DeleteInputRequest(\n    user_app_id=userDataObject, \n    input_id=INPUT_ID\n    ),\n    metadata=metadata\n)\n\nif delete_input_response.status.code != status_code_pb2.SUCCESS:\n    print(delete_input_response.status)\n    raise Exception(\"Delete input failed, status: \" + delete_input_response.status.description)\n",U="##############################################################################\n# In this section, we set the user authentication, app ID, and the IDs of the \n# inputs we want to delete. Change these strings to run your own example.\n##############################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these based on the inputs you want to delete\nINPUT_ID_1 = '97eb76d22e964c7cbbf06a51532c6fbe'\nINPUT_ID_2 = '86b1272feabb45d4bcd2de51eedd729b'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\ndelete_inputs_response = stub.DeleteInputs(\n    service_pb2.DeleteInputsRequest(\n    user_app_id=userDataObject, \n    ids=[INPUT_ID_1, INPUT_ID_2]\n    ),\n    metadata=metadata\n)\n\nif delete_inputs_response.status.code != status_code_pb2.SUCCESS:\n    print(delete_inputs_response.status)\n    raise Exception(\"Delete input failed, status: \" + delete_inputs_response.status.description)\n",O="\x3c!--index.html file--\x3e\n\n<script>\n  //////////////////////////////////////////////////////////////////////\n  // In this section, we set the user authentication and app ID. \n  // Change these strings to run your own example.\n  //////////////////////////////////////////////////////////////////////\n\n  const USER_ID = 'YOUR_USER_ID_HERE';\n  // Your PAT (Personal Access Token) can be found in the Account's Security section\n  const PAT = 'YOUR_PAT_HERE';\n  const APP_ID = 'YOUR_APP_ID_HERE';\n\n  ///////////////////////////////////////////////////////////////////////////\n  // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n  ////////////////////////////////////////////////////////////////////////////\n\n  const requestOptions = {\n    method: 'GET',\n    headers: {\n      'Accept': 'application/json',\n      'Authorization': 'Key ' + PAT\n    }\n  };\n\n  fetch(`https://api.clarifai.com/v2/users/${USER_ID}/apps/${APP_ID}/inputs?page=1&per_page=10`, requestOptions)\n    .then(response => response.text())\n    .then(result => console.log(result))\n    .catch(error => console.log('error', error));\n\n<\/script>",w="\x3c!--index.html file--\x3e\n\n<script>\n    //////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication and app ID. \n    // Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////\n\n    const USER_ID = 'YOUR_USER_ID_HERE';\n    // Your PAT (Personal Access Token) can be found in the Account's Security section\n    const PAT = 'YOUR_PAT_HERE';\n    const APP_ID = 'YOUR_APP_ID_HERE';\n\n    ///////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ////////////////////////////////////////////////////////////////////////////\n\n    const requestOptions = {\n        method: 'GET',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        }\n    }\n\n    // We can implement the API call with a Promise\n    const streamInputs = (reqAddress) => {\n        return new Promise(async (resolve, reject) => {\n            fetch(reqAddress, requestOptions)\n                .then(data => {\n                    return data.json()\n                }).then(data => {\n                    resolve(data)\n                }).catch(e => {\n                    console.error('REQUEST -> ', e)\n                    reject(e)\n                })\n        })\n    }\n\n    // Async function that will allow us to wait for the first API call\n    const run = async () => {\n\n        const REQ_ADDRESS = `https://api.clarifai.com/v2/users/${USER_ID}/apps/${APP_ID}/inputs/stream?per_page=5`\n\n        const req1 = await streamInputs(REQ_ADDRESS)\n\n        // Grab the last input_id from the first request to use it in the second request\n        const lastId = req1['inputs'][req1['inputs'].length - 1].id\n\n        const req2 = await streamInputs(REQ_ADDRESS + `&last_id=${lastId}`)\n\n        // You're only receiving the inputs from up to the last_id onward\n        console.log(req2)\n    }\n\n    run()\n\n<\/script>",N="\x3c!--index.html file--\x3e\n\n<script>\n    /////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and input ID.\n    // Change these strings to run your own example.\n    /////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = 'YOUR_USER_ID_HERE';\n    // Your PAT (Personal Access Token) can be found in the Account's Security section\n    const PAT = 'YOUR_PAT_HERE';\n    const APP_ID = 'YOUR_APP_ID_HERE';\n    // Change this ID to whatever input you want its details\n    const INPUT_ID = 'ff79664eefe94db1878f51931f9d6fd9';\n\n    ////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ////////////////////////////////////////////////////////////////////////////\n\n    const requestOptions = {\n        method: 'GET',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        }\n    };\n\n    fetch(`https://api.clarifai.com/v2/users/${USER_ID}/apps/${APP_ID}/inputs/${INPUT_ID}`, requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n<\/script>",j="\x3c!--index.html file--\x3e\n\n<script>\n    //////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication and app ID.\n    // Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////\n\n    const USER_ID = 'YOUR_USER_ID_HERE';\n    // Your PAT (Personal Access Token) can be found in the Account's Security section\n    const PAT = 'YOUR_PAT_HERE';\n    const APP_ID = 'YOUR_APP_ID_HERE';\n\n    ////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ////////////////////////////////////////////////////////////////////////////\n\n\n    const requestOptions = {\n        method: 'GET',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        }\n    };\n\n    fetch(`https://api.clarifai.com/v2/users/${USER_ID}/apps/${APP_ID}/inputs/status`, requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n\n<\/script>",v='\x3c!--index.html file--\x3e\n\n<script>\n    //////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and input ID and concept IDs\n    // we want to update. Change these strings to run your own example.\n    /////////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = \'YOUR_USER_ID_HERE\';\n    // Your PAT (Personal Access Token) can be found in the Account\'s Security section\n    const PAT = \'YOUR_PAT_HERE\';\n    const APP_ID = \'YOUR_APP_ID_HERE\';\n    // Change these based on the update you want to make\n    const INPUT_ID = \'7c5f489bcafe43fe8a71c68091cb64ce\';\n    const CONCEPT_ID_1 = \'tree\';\n    const CONCEPT_ID_2 = \'water\';\n\n    ////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        "user_app_id": {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        "inputs": [\n            {\n                "id": INPUT_ID,\n                "data": {\n                    "concepts": [\n                        {\n                            "id": CONCEPT_ID_1,\n                            "value": 1\n                        },\n                        {\n                            "id": CONCEPT_ID_2,\n                            "value": 0\n                        }\n                    ]\n                }\n            }\n        ],\n        "action": "merge"\n    });\n\n    const requestOptions = {\n        method: \'PATCH\',\n        headers: {\n            \'Accept\': \'application/json\',\n            \'Authorization\': \'Key \' + PAT\n        },\n        body: raw\n    };\n\n    fetch("https://api.clarifai.com/v2/inputs", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log(\'error\', error));\n\n<\/script>',x='\x3c!--index.html file--\x3e\n\n<script>\n    ////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the inputs and \n    // concepts IDs we want to update. Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = \'YOUR_USER_ID_HERE\';\n    // Your PAT (Personal Access Token) can be found in the Account\'s Security section\n    const PAT = \'YOUR_PAT_HERE\';\n    const APP_ID = \'YOUR_APP_ID_HERE\';\n    // Change these based on the updates you want to make\n    const INPUT_ID_1 = \'c99f1b557d1d43d1916b46f8ce4a0487\';\n    const INPUT_ID_2 = \'1be923b967f148dbb4e588cf4a723da1\';\n    const CONCEPT_ID_1 = \'tree\';\n    const CONCEPT_ID_2 = \'water\';\n    const CONCEPT_ID_3 = \'animal\';\n    const CONCEPT_ID_4 = \'fruit\';\n\n    ////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        "user_app_id": {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        "inputs": [\n            {\n                "id": INPUT_ID_1,\n                "data": {\n                    "concepts": [\n                        {\n                            "id": CONCEPT_ID_1,\n                            "value": 1\n                        },\n                        {\n                            "id": CONCEPT_ID_2,\n                            "value": 0\n                        }\n                    ]\n                }\n            },\n            {\n                "id": INPUT_ID_2,\n                "data": {\n                    "concepts": [\n                        {\n                            "id": CONCEPT_ID_3,\n                            "value": 1\n                        },\n                        {\n                            "id": CONCEPT_ID_4,\n                            "value": 0\n                        }\n                    ]\n                }\n            }\n        ],\n        "action": "merge"\n    });\n\n    const requestOptions = {\n        method: \'PATCH\',\n        headers: {\n            \'Accept\': \'application/json\',\n            \'Authorization\': \'Key \' + PAT\n        },\n        body: raw\n    };\n\n    fetch("https://api.clarifai.com/v2/inputs", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log(\'error\', error));\n\n<\/script>',H="\x3c!--index.html file--\x3e\n\n<script>\n    ////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the input and \n    // concept ID. Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = 'YOUR_USER_ID_HERE';\n    // Your PAT (Personal Access Token) can be found in the Account's Security section\n    const PAT = 'YOUR_PAT_HERE';\n    const APP_ID = 'YOUR_APP_ID_HERE';\n    // Change these based on the concept you want to remove\n    const INPUT_ID = 'c99f1b557d1d43d1916b46f8ce4a0487';\n    const CONCEPT_ID = 'water';\n\n    ////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        \"user_app_id\": {\n            \"user_id\": USER_ID,\n            \"app_id\": APP_ID\n        },\n        \"inputs\": [\n            {\n                \"id\": INPUT_ID,\n                \"data\": {\n                    \"concepts\": [\n                        { \"id\": CONCEPT_ID }\n                    ]\n                }\n            }\n        ],\n        \"action\": \"remove\"\n    });\n\n    const requestOptions = {\n        method: 'PATCH',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        },\n        body: raw\n    };\n\n    fetch(\"https://api.clarifai.com/v2/inputs\", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n\n<\/script>",y='\x3c!--index.html file--\x3e\n\n<script>\n    ////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the inputs and \n    // concepts IDs. Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = \'YOUR_USER_ID_HERE\';\n    // Your PAT (Personal Access Token) can be found in the Account\'s Security section\n    const PAT = \'YOUR_PAT_HERE\';\n    const APP_ID = \'YOUR_APP_ID_HERE\';\n    // Change these based on the concepts you want to remove\n    const INPUT_ID_1 = \'ff79664eefe94db1878f51931f9d6fd9\';\n    const INPUT_ID_2 = \'f54b89ef64874888a64f7016cf6f33ad\';\n    const CONCEPT_ID_1 = \'tree\';\n    const CONCEPT_ID_2 = \'water\';\n    const CONCEPT_ID_3 = \'animal\';\n    const CONCEPT_ID_4 = \'fruit\';\n\n    ////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        "user_app_id": {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        "inputs": [\n            {\n                "id": INPUT_ID_1,\n                "data": {\n                    "concepts": [\n                        {\n                            "id": CONCEPT_ID_1\n                        },\n                        {\n                            "id": CONCEPT_ID_2\n                        }\n                    ]\n                }\n            },\n            {\n                "id": INPUT_ID_2,\n                "data": {\n                    "concepts": [\n                        {\n                            "id": CONCEPT_ID_3\n                        },\n                        {\n                            "id": CONCEPT_ID_4\n                        }\n                    ]\n                }\n            }\n        ],\n        "action": "remove"\n    });\n\n    const requestOptions = {\n        method: \'PATCH\',\n        headers: {\n            \'Accept\': \'application/json\',\n            \'Authorization\': \'Key \' + PAT\n        },\n        body: raw\n    };\n\n    fetch("https://api.clarifai.com/v2/inputs", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log(\'error\', error));\n\n<\/script>',Y="\x3c!--index.html file--\x3e\n\n<script>\n    ////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the ID of the \n    // input we want to delete. Change these strings to run your own example\n    ////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = 'YOUR_USER_ID_HERE';\n    // Your PAT (Personal Access Token) can be found in the Account's Security section\n    const PAT = 'YOUR_PAT_HERE';\n    const APP_ID = 'YOUR_APP_ID_HERE';\n    // Change this based on the input you want to delete\n    const INPUT_ID = 'c83f332be7274f19950a87bd3e89d766';\n\n    ////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ////////////////////////////////////////////////////////////////////////////\n\n    const requestOptions = {\n        method: 'DELETE',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        }\n    };\n\n    fetch(`https://api.clarifai.com/v2/users/${USER_ID}/apps/${APP_ID}/inputs/${INPUT_ID}`, requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n\n<\/script>",$="\x3c!--index.html file--\x3e\n\n<script>\n    ////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the IDs of the \n    // inputs we want to delete. Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = 'YOUR_USER_ID_HERE';\n    // Your PAT (Personal Access Token) can be found in the Account's Security section\n    const PAT = 'YOUR_PAT_HERE';\n    const APP_ID = 'YOUR_APP_ID_HERE';\n    // Change these based on the inputs you want to delete\n    const INPUT_ID_1 = 'eefbb9fa8f2342d2b4f19b8083098c9e';\n    const INPUT_ID_2 = '148582f7916e4001b24579b89a6f6a82';\n\n    ////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        \"user_app_id\": {\n            \"user_id\": USER_ID,\n            \"app_id\": APP_ID\n        },\n        \"ids\": [INPUT_ID_1, INPUT_ID_2]\n    });\n\n    const requestOptions = {\n        method: 'DELETE',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        },\n        body: raw\n    };\n\n    fetch(\"https://api.clarifai.com/v2/inputs\", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n\n<\/script>",L='//index.js file\n\n//////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication and app ID. \n// Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.ListInputs(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        page: 1,\n        per_page: 10\n\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("List inputs failed, status: " + response.status.description);\n        }\n\n        for (const input of response.inputs) {\n            console.log(JSON.stringify(input, null, 2));\n        }\n    }\n);',G='//index.js file\n\n//////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication and app ID. \n// Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.StreamInputs(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        per_page: 10\n    },\n    metadata,\n    (err, firstResponse) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (firstResponse.status.code !== 10000) {\n            throw new Error("Received status: " + firstResponse.status.description + "\\n" + firstResponse.status.details);\n\n        }\n\n        console.log("First response (starting from the first input):");\n        for (const input of firstResponse.inputs) {\n            console.log("\\t" + input.id);\n        }\n\n        const lastId = firstResponse.inputs[firstResponse.inputs.length - 1].id;\n\n        stub.StreamInputs(\n            {\n                user_app_id: {\n                    "user_id": USER_ID,\n                    "app_id": APP_ID\n                },\n                last_id: lastId,\n                per_page: 10\n            },\n            metadata,\n            (err, secondResponse) => {\n                if (err) {\n                    throw new Error(err);\n                }\n\n                if (secondResponse.status.code !== 10000) {\n                    throw new Error("Received status: " + secondResponse.status.description + "\\n" + secondResponse.status.details);\n                }\n\n                console.log("Second response (first input is the one following input ID " + lastId + ")");\n                for (const input of secondResponse.inputs) {\n                    console.log("\\t" + input.id);\n                }\n\n            }\n        );\n    }\n);',k='//index.js file\n\n/////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and input ID\n// Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n// Change this ID to whatever input you want its details\nconst INPUT_ID = \'ff79664eefe94db1878f51931f9d6fd9\';\n\n////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.GetInput(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        input_id: INPUT_ID\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Get input failed, status: " + response.status.description);\n        }\n\n        const input = response.input;\n        console.log(JSON.stringify(input, null, 2));\n    }\n);\n',q='//index.js file\n\n//////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication and app ID.\n// Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.GetInputCount(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        }\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Get input count failed, status: " + response.status.description);\n        }\n\n        const counts = response.counts;\n        console.log(JSON.stringify(counts, null, 2));\n    }\n);\n',B='//index.js file\n\n//////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and input ID and concept IDs\n// we want to update. Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n// Change these based on the update you want to make\nconst INPUT_ID = \'7c5f489bcafe43fe8a71c68091cb64ce\';\nconst CONCEPT_ID_1 = \'tree\';\nconst CONCEPT_ID_2 = \'water\';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PatchInputs(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        action: "merge",  // Supported actions: overwrite, merge, remove\n        inputs: [\n            {\n                id: INPUT_ID,\n                // 1 means true, this concept is present\n                // 0 means false, this concept is not present\n                data: { concepts: [{ id: CONCEPT_ID_1, value: 1 }, { id: CONCEPT_ID_2, value: 0 }] }\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Patch inputs failed, status: " + response.status.description);\n        }\n    }\n);',M="//index.js file\n\n////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the inputs and \n// concepts IDs we want to update. Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = 'YOUR_USER_ID_HERE';\n// Your PAT (Personal Access Token) can be found in the Account's Security section\nconst PAT = 'YOUR_PAT_HERE';\nconst APP_ID = 'YOUR_APP_ID_HERE';\n// Change these based on the updates you want to make\nconst INPUT_ID_1 = 'c99f1b557d1d43d1916b46f8ce4a0487';\nconst INPUT_ID_2 = '1be923b967f148dbb4e588cf4a723da1';\nconst CONCEPT_ID_1 = 'tree';\nconst CONCEPT_ID_2 = 'water';\nconst CONCEPT_ID_3 = 'animal';\nconst CONCEPT_ID_4 = 'fruit';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require(\"clarifai-nodejs-grpc\");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set(\"authorization\", \"Key \" + PAT);\n\nstub.PatchInputs(\n    {\n        user_app_id: {\n            \"user_id\": USER_ID,\n            \"app_id\": APP_ID\n        },\n        action: \"merge\",  // Supported actions: overwrite, merge, remove.\n        inputs: [\n            {\n                id: INPUT_ID_1,\n                data: { concepts: [{ id: CONCEPT_ID_1, value: 1 }, { id: CONCEPT_ID_2, value: 0 }] }\n            },\n            {\n                id: INPUT_ID_2,\n                data: { concepts: [{ id: CONCEPT_ID_3, value: 1 }, { id: CONCEPT_ID_4, value: 0 }] }\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error(\"Patch inputs failed, status: \" + response.status.description);\n        }\n    }\n);",z='//index.js file\n\n//////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the input and \n// concept ID. Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n// Change these based on the concept you want to remove\nconst INPUT_ID = \'c99f1b557d1d43d1916b46f8ce4a0487\';\nconst CONCEPT_ID = \'tree\';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PatchInputs(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        action: "remove",  // Supported actions: overwrite, merge, remove\n        inputs: [\n            {\n                id: INPUT_ID,\n                // We\'re removing the concept, so there\'s no need to specify\n                // the concept value\n                data: { concepts: [{ id: CONCEPT_ID }] }\n            },\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Patch inputs failed, status: " + response.status.description);\n        }\n    }\n);',V="//index.js file\n\n////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the inputs and \n// concepts IDs. Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = 'YOUR_USER_ID_HERE';\n// Your PAT (Personal Access Token) can be found in the Account's Security section\nconst PAT = 'YOUR_PAT_HERE';\nconst APP_ID = 'YOUR_APP_ID_HERE';\n// Change these based on the concepts you want to remove\nconst INPUT_ID_1 = 'ff79664eefe94db1878f51931f9d6fd9';\nconst INPUT_ID_2 = 'f54b89ef64874888a64f7016cf6f33ad';\nconst CONCEPT_ID_1 = 'tree';\nconst CONCEPT_ID_2 = 'water';\nconst CONCEPT_ID_3 = 'animal';\nconst CONCEPT_ID_4 = 'fruit';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require(\"clarifai-nodejs-grpc\");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set(\"authorization\", \"Key \" + PAT);\n\nstub.PatchInputs(\n    {\n        user_app_id: {\n            \"user_id\": USER_ID,\n            \"app_id\": APP_ID\n        },\n        action: \"remove\",  // Supported actions: overwrite, merge, remove\n        inputs: [\n            {\n                id: INPUT_ID_1,\n                // We're removing the concepts, so there's no need to specify\n                // the concept value\n                data: { concepts: [{ id: CONCEPT_ID_1 }, { id: CONCEPT_ID_2 }] }\n            },\n            {\n                id: INPUT_ID_2,\n                data: { concepts: [{ id: CONCEPT_ID_3 }, { id: CONCEPT_ID_4 }] }\n            },\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error(\"Patch inputs failed, status: \" + response.status.description);\n        }\n    }\n);",W='//index.js file\n\n////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the ID of the \n// input we want to delete. Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n// Change this based on the input you want to delete\nconst INPUT_ID = \'ff79664eefe94db1878f51931f9d6fd9\';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call+\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.DeleteInput(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        input_id: INPUT_ID\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Delete input failed, status: " + response.status.description);\n        }\n    }\n);',K='//index.js file\n\n////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the IDs of the \n// inputs we want to delete. Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n// Change these based on the inputs you want to delete\nconst INPUT_ID_1 = \'d4319bb362d9487e812970a3ed9ba028\';\nconst INPUT_ID_2 = \'fc449e98ce3847c788954e3fec871d02\';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.DeleteInputs(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        ids: [INPUT_ID_1, INPUT_ID_2]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Delete inputs failed, status: " + response.status.description);\n        }\n    }\n);',X='package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\npublic class ClarifaiExample {\n\n    ////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication and app ID.\n    // Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n       \n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));      \n       \n        MultiInputResponse listInputsResponse = stub.listInputs(\n            ListInputsRequest.newBuilder()\n                .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n                .setPage(1)\n                .setPerPage(10)\n                .build()\n        );\n\n        if (listInputsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("List inputs failed, status: " + listInputsResponse.getStatus());\n        }\n\n        for (Input input : listInputsResponse.getInputsList()) {\n            System.out.println(input);\n        }      \n       \n    }  \n}',J='package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\nimport java.util.List;\n\npublic class ClarifaiExample {\n\n    ////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication and app ID. \n    // Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\t\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        // To start from beginning, do not provide the last ID parameter.\n        MultiInputResponse firstStreamInputsResponse = stub.streamInputs(\n            StreamInputsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .setPerPage(10)\n            .build()\n        );\n\n        if (firstStreamInputsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Stream inputs failed, status: " + firstStreamInputsResponse.getStatus());\n        }\n\n        System.out.println("First response (starting from the first input):");\n        List < Input > inputs = firstStreamInputsResponse.getInputsList();\n        for (Input input: inputs) {\n            System.out.println("\\t" + input.getId());\n        }\n\n        String lastId = inputs.get(inputs.size() - 1).getId();\n\n        // Set last ID to get the next set of inputs. The returned inputs will not include the last ID input.\n        MultiInputResponse secondStreamInputsResponse = stub.streamInputs(\n            StreamInputsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .setLastId(lastId)\n            .setPerPage(10)\n            .build()\n        );\n\n        if (secondStreamInputsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Stream inputs failed, status: " + secondStreamInputsResponse.getStatus());\n        }\n\n        System.out.println(String.format("Second response (first input is the one following input ID %s)", lastId));\n        for (Input input: secondStreamInputsResponse.getInputsList()) {\n            System.out.println("\\t" + input.getId());\n        }\n\n    }\n}',F='package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\npublic class ClarifaiExample {\n\n    /////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and input ID.\n    // Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change this ID to whatever input you want its details\n    static final String INPUT_ID = "ff79664eefe94db1878f51931f9d6fd9";\n       \n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));    \n       \n        SingleInputResponse getInputResponse = stub.getInput(\n            GetInputRequest.newBuilder()\n                .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n                .setInputId(INPUT_ID)\n                .build()\n        );\n\n        if (getInputResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Get input failed, status: " + getInputResponse.getStatus());\n        }\n\n        Input input = getInputResponse.getInput();\n        System.out.println(input);            \n   \n    }  \n}',Q='package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\npublic class ClarifaiExample {\n\n    ////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication and app ID.\n    // Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n       \n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));    \n       \n        SingleInputCountResponse getInputCountResponse = stub.getInputCount(\n           GetInputCountRequest.newBuilder()\n           .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n           .build()\n        );\n\n        if (getInputCountResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n           throw new RuntimeException("Get input count failed, status: " + getInputCountResponse.getStatus());\n        }\n\n        InputCount inputCount = getInputCountResponse.getCounts();\n        System.out.println(inputCount);      \n               \n    }  \n}',Z='package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\npublic class ClarifaiExample {\n\n    /////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and input ID and concept IDs\n    // we want to update. Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these based on the update you want to make\n    static final String INPUT_ID = "7c5f489bcafe43fe8a71c68091cb64ce";\n    static final String CONCEPT_ID_1 = "tree";\n    static final String CONCEPT_ID_2 = "water";\n       \n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));    \n               \n        MultiInputResponse patchInputsResponse = stub.patchInputs(\n            PatchInputsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n                .setAction("merge")  // Supported actions: overwrite, merge, remove\n                .addInputs(\n                    Input.newBuilder()\n                        .setId(INPUT_ID)\n                        .setData(\n                            Data.newBuilder()\n                                .addConcepts(\n                                    Concept.newBuilder()\n                                        .setId(CONCEPT_ID_1)\n                                        .setValue(1f)  // 1 means true, this concept is present\n                                )\n                                .addConcepts(\n                                    Concept.newBuilder()\n                                        .setId(CONCEPT_ID_2)\n                                        .setValue(0f)  // 0 means false, this concept is not present\n                                )\n                        )\n                        .build()\n                )\n                .build()\n        );\n\n        if (patchInputsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Patch inputs failed, status: " + patchInputsResponse.getStatus());\n        }\n     \n    }  \n}',nn='package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\npublic class ClarifaiExample {\n\n    /////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and input ID and concept IDs\n    // we want to update. Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";;\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these based on the updates you want to make\n    static final String INPUT_ID_1 = "c99f1b557d1d43d1916b46f8ce4a0487";\n    static final String INPUT_ID_2 = "1be923b967f148dbb4e588cf4a723da1";\n    static final String CONCEPT_ID_1 = "tree";\n    static final String CONCEPT_ID_2 = "water";\n    static final String CONCEPT_ID_3 = "animal";\n    static final String CONCEPT_ID_4 = "fruit";\n       \n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n       \n        MultiInputResponse patchInputsResponse = stub.patchInputs(\n            PatchInputsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n                .setAction("merge")  // Supported actions: overwrite, merge, remove\n                .addInputs(\n                    Input.newBuilder()\n                        .setId(INPUT_ID_1)\n                        .setData(\n                            Data.newBuilder()\n                                .addConcepts(\n                                    Concept.newBuilder()\n                                        .setId(CONCEPT_ID_1)\n                                        .setValue(1f)  // 1 means true, this concept is present\n                                )\n                                .addConcepts(\n                                    Concept.newBuilder()\n                                        .setId(CONCEPT_ID_2)\n                                        .setValue(0f)  // 0 means false, this concept is not present\n                                )\n                        )\n                        .build()\n                )\n                .addInputs(\n                    Input.newBuilder()\n                        .setId(INPUT_ID_2)\n                        .setData(\n                            Data.newBuilder()\n                                .addConcepts(\n                                    Concept.newBuilder()\n                                        .setId(CONCEPT_ID_3)\n                                        .setValue(1f)\n                                )\n                                .addConcepts(\n                                    Concept.newBuilder()\n                                        .setId(CONCEPT_ID_4)\n                                        .setValue(0f)\n                                )\n                        )\n                        .build()\n                )\n                .build()\n        );\n\n        if (patchInputsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Patch inputs failed, status: " + patchInputsResponse.getStatus());\n        }            \n         \n    }  \n}',en='package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\npublic class ClarifaiExample {\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the input and\n    // concept ID. Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these based on the concept you want to remove\n    static final String INPUT_ID = "c99f1b557d1d43d1916b46f8ce4a0487";\n    static final String CONCEPT_ID = "tree";\n       \n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));        \n       \n        MultiInputResponse patchInputsResponse = stub.patchInputs(\n            PatchInputsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n                .setAction("remove")  // Supported actions: overwrite, merge, remove\n                .addInputs(\n                    Input.newBuilder()\n                        .setId(INPUT_ID)\n                        .setData(\n                            Data.newBuilder()\n                                .addConcepts(\n                                    // We\'re removing the concept, so there\'s no need to specify\n                                    // the concept value\n                                    Concept.newBuilder().setId(CONCEPT_ID)\n                                )\n                        )\n                        .build()\n                )\n                .build()\n        );\n\n        if (patchInputsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Patch inputs failed, status: " + patchInputsResponse.getStatus());\n        }    \n         \n    }  \n}',tn='package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\npublic class ClarifaiExample {\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the inputs and\n    // concepts IDs. Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these based on the concepts you want to remove\n    static final String INPUT_ID_1 = "ff79664eefe94db1878f51931f9d6fd9";\n    static final String INPUT_ID_2 = "f54b89ef64874888a64f7016cf6f33ad";\n    static final String CONCEPT_ID_1 = "tree";\n    static final String CONCEPT_ID_2 = "water";\n    static final String CONCEPT_ID_3 = "animal";\n    static final String CONCEPT_ID_4 = "fruit";\n       \n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));            \n\n        MultiInputResponse patchInputsResponse = stub.patchInputs(\n            PatchInputsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n                .setAction("remove")  // Supported actions: overwrite, merge, remove\n                .addInputs(\n                    Input.newBuilder()\n                        .setId(INPUT_ID_1)\n                        .setData(\n                            Data.newBuilder()\n                                // We\'re removing the concepts, so there\'s no need to specify\n                                // the concept value\n                                .addConcepts(\n                                    Concept.newBuilder().setId(CONCEPT_ID_1)\n                                )\n                                .addConcepts(\n                                    Concept.newBuilder().setId(CONCEPT_ID_2)\n                                )\n                        )\n                        .build()\n                )\n                .addInputs(\n                    Input.newBuilder()\n                        .setId(INPUT_ID_2)\n                        .setData(\n                            Data.newBuilder()\n                                .addConcepts(\n                                    Concept.newBuilder().setId(CONCEPT_ID_3)\n                                )\n                                .addConcepts(\n                                    Concept.newBuilder().setId(CONCEPT_ID_4)\n                                )\n                        )\n                        .build()\n                )\n                .build()\n        );\n\n        if (patchInputsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Patch inputs failed, status: " + patchInputsResponse.getStatus());\n        }  \n               \n    }  \n}',an='package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\npublic class ClarifaiExample {\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the ID of the\n    // input we want to delete. Change these strings to run your own example\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID =  "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change this based on the input you want to delete\n    static final String INPUT_ID = "ff79664eefe94db1878f51931f9d6fd9";\n       \n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));            \n\n        BaseResponse deleteInputResponse = stub.deleteInput(\n            DeleteInputRequest.newBuilder()\n               .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n                .setInputId(INPUT_ID)\n                .build()\n        );\n\n        if (deleteInputResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Delete input failed, status: " + deleteInputResponse.getStatus());\n        }  \n                       \n    }  \n}',sn='package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\npublic class ClarifaiExample {\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the IDs of the\n    // inputs we want to delete. Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID =  "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these based on the inputs you want to delete\n    static final String INPUT_ID_1 = "d4319bb362d9487e812970a3ed9ba028";\n    static final String INPUT_ID_2 = "fc449e98ce3847c788954e3fec871d02";\n       \n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));      \n       \n        BaseResponse listInputsResponse = stub.deleteInputs(\n            DeleteInputsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n                .addIds(INPUT_ID_1)\n                .addIds(INPUT_ID_2)\n                .build()\n        );\n\n        if (listInputsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Delete inputs failed, status: " + listInputsResponse.getStatus());\n        }\n                       \n    }  \n}',rn='curl -X GET "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/inputs?page=1&per_page=10" \\\n  -H "Authorization: Key YOUR_PAT_HERE" ',on='curl -X GET "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/inputs/YOUR_INPUT_ID_HERE" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \n',cn='curl -X GET "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/inputs/status" \\\n  -H "Authorization: Key YOUR_PAT_HERE" ',pn='# Value of 1 means true, this concept is present\n# Value of 0 means false, this concept is not present\n# Supported actions are overwrite, merge, and remove\n\ncurl -X PATCH "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/inputs" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "inputs": [\n      {\n        "id": "YOUR_INPUT_ID_HERE",\n        "data": {\n          "concepts": [\n            {\n              "id": "tree",\n              "value": 1\n            },\n            {\n              "id": "water",\n              "value": 0\n            }\n          ]\n        }\n      }\n    ],\n    "action":"merge"\n}\'\n ',un='# Value of 1 means true, this concept is present\n# Value of 0 means false, this concept is not present\n# Supported actions are overwrite, merge, and remove\n\ncurl -X PATCH "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/inputs" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "inputs": [\n      {\n        "id": "YOUR_INPUT_ID_1_HERE",\n        "data": {\n          "concepts": [\n            {\n              "id": "tree",\n              "value": 1\n            },\n            {\n              "id": "water",\n              "value": 0\n            }\n          ]\n        }\n      },\n      {\n        "id": "YOUR_INPUT_ID_2_HERE",\n        "data": {\n          "concepts": [\n            {\n              "id": "animal",\n              "value": 1\n            },\n            {\n              "id": "fruit",\n              "value": 0\n            }\n          ]\n        }\n      }\n    ],\n    "action":"merge"\n}\'',ln='# We\'re removing the concept, so no need to specify the concept value\n \ncurl -X PATCH "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/inputs" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "inputs": [\n      {\n        "id":"YOUR_INPUT_ID_HERE",\n        "data": {\n            "concepts":[\n                {"id":"water"}\n            ]\n        }\n      }\n    ],\n    "action":"remove"\n  }\'\n  ',dn='# We\'re removing the concepts, so no need to specify the concept value\n\ncurl -X PATCH "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/inputs" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "inputs": [\n      {\n        "id": "YOUR_INPUT_ID_1_HERE",\n        "data": {\n          "concepts":[\n            {\n              "id": "tree"\n            },\n            {\n              "id": "water"\n            }\n          ]\n        }\n      },\n      {\n        "id": "YOUR_INPUT_ID_2_HERE",\n        "data": {\n          "concepts":[\n            {\n              "id": "animal"\n            },\n            {\n              "id": "fruit"\n            }\n          ]\n        }\n      }\n    ],\n    "action":"remove"\n  }\'',_n='curl -X DELETE "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/inputs/YOUR_INPUT_ID_HERE" \\\n  -H "Authorization: Key YOUR_PAT_HERE" ',hn='curl -X DELETE "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/inputs" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "ids":["YOUR_INPUT_ID_1_HERE","YOUR_INPUT_ID_2_HERE"]\n  }\'',In='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n//////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication and app ID. \n// Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\ListInputsRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->ListInputs(\n        // The request object carries the request along with the request status and other metadata related to the request itself\n        new ListInputsRequest([\n            "user_app_id" => $userDataObject,\n            "page" => 1,\n            "per_page" => 10\n        ]),\n        $metadata\n    )->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\nforeach ($response->getInputs() as $input_object){\n    print $input_object->getId() . "<br>";\n}\n\n?>\n',En='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n//////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication and app ID. \n// Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\StreamInputsRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->StreamInputs(\n        // The request object carries the request along with the request status and other metadata related to the request itself\n        new StreamInputsRequest([\n            "user_app_id" => $userDataObject,            \n            "per_page" => 5\n        ]),\n        $metadata\n    )->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\nprint "First response (starting from the first input): <br>";\nforeach ($response->getInputs() as $input_object){\n    print $input_object->getId() . "<br>";\n}\n\n$last_id = $response->getInputs()[count($response->getInputs())-1]->getId();\n\n// Set last_id to get the next set of inputs. The returned inputs will not include the last_id input\n[$response, $status] = $client->StreamInputs(   \n    new StreamInputsRequest([\n        "user_app_id" => $userDataObject,            \n        "per_page" => 5,\n        "last_id" => $last_id\n    ]),\n    $metadata\n)->wait();\n\nprint "<br>";\nprint "Second response (first input is the one following input ID $last_id): <br>";\nforeach ($response->getInputs() as $input_object){\n    print $input_object->getId() . "<br>";\n}\n\n?>\n',fn='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n/////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and input ID.\n// Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change this ID to whatever input you want its details\n$INPUT_ID = \'ff79664eefe94db1878f51931f9d6fd9\';\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\GetInputRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->GetInput(\n        // The request object carries the request along with the request status and other metadata related to the request itself\n        new GetInputRequest([\n            "user_app_id" => $userDataObject,\n            "input_id"=> $INPUT_ID\n        ]),\n        $metadata\n    )->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\n$input_object = $response->getInput()->serializeToJsonString();\n\nprint $input_object;\n\n?>\n',Pn='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n/////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and input ID.\n// Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\GetInputCountRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->GetInputCount(\n        // The request object carries the request along with the request status and other metadata related to the request itself\n        new GetInputCountRequest([\n            "user_app_id" => $userDataObject\n        ]),\n        $metadata\n    )->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\n$input_object = $response->getCounts()->serializeToJsonString();\n\necho $input_object;\n\n?>\n',gn='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n///////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and input ID and concept IDs\n// we want to update. Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change these based on the update you want to make\n$INPUT_ID = \'7c5f489bcafe43fe8a71c68091cb64ce\';\n$CONCEPT_ID_1 = \'tree\';\n$CONCEPT_ID_2 = \'water\';\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\Data;\nuse Clarifai\\Api\\Input;\nuse Clarifai\\Api\\Concept;\nuse Clarifai\\Api\\PatchInputsRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PatchInputs(\n        // The request object carries the request along with the request status and other metadata related to the request itself\n        new PatchInputsRequest([\n            "user_app_id" => $userDataObject,\n            "action" => "merge",  // Supported actions: overwrite, merge, remove\n            \'inputs\' => [\n                new Input([ // The Input object wraps the id and Data object in order to meet the API specification \n                    "id" => $INPUT_ID,             \n                    \'data\' => new Data([ // The Data object is constructed around the Concept object. It offers a container that has additional concept independent\n                                        // metadata                    \n                        "concepts" => [\n                            new Concept([\n                            "id" => $CONCEPT_ID_1,\n                            "value" => 1 // 1 means true, this concept is present\n                            ]),\n                            new Concept([\n                                "id" => $CONCEPT_ID_2,\n                                "value" => 0 // 0 means false, this concept is not present\n                            ])\n                        ]\n                    ])\n                ])\n            ]\n        ]),\n        $metadata\n    )->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\n?>\n',An='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the inputs and \n// concepts IDs we want to update. Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change these based on the updates you want to make\n$INPUT_ID_1 = \'c99f1b557d1d43d1916b46f8ce4a0487\';\n$INPUT_ID_2 = \'1be923b967f148dbb4e588cf4a723da1\';\n$CONCEPT_ID_1 = \'tree\';\n$CONCEPT_ID_2 = \'water\';\n$CONCEPT_ID_3 = \'animal\';\n$CONCEPT_ID_4 = \'fruit\';\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\Data;\nuse Clarifai\\Api\\Input;\nuse Clarifai\\Api\\Concept;\nuse Clarifai\\Api\\PatchInputsRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PatchInputs(\n        // The request object carries the request along with the request status and other metadata related to the request itself\n        new PatchInputsRequest([\n            "user_app_id" => $userDataObject,\n            "action" => "merge",  // Supported actions: overwrite, merge, remove\n            \'inputs\' => [\n                new Input([ // The Input object wraps the id and Data object in order to meet the API specification \n                    "id" => $INPUT_ID_1,             \n                    \'data\' => new Data([ // The Data object is constructed around the Concept object. It offers a container that has additional concept independent\n                                        // metadata                    \n                        "concepts" => [\n                            new Concept([\n                            "id" => $CONCEPT_ID_1,\n                            "value" => 1 // 1 means true, this concept is present\n                            ]),\n                            new Concept([\n                                "id" => $CONCEPT_ID_2,\n                                "value" => 0 // 0 means false, this concept is not present\n                            ])\n                        ]\n                    ])\n                            ]),\n                new Input([ \n                    "id" => $INPUT_ID_2,             \n                    \'data\' => new Data([                          \n                        "concepts" => [\n                            new Concept([\n                            "id" => $CONCEPT_ID_3,\n                            "value" => 1 \n                            ]),\n                            new Concept([\n                                "id" => $CONCEPT_ID_4,\n                                "value" => 0 \n                            ])\n                        ]\n                    ])\n                ])\n            ]\n        ]),\n        $metadata\n    )->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\n?>\n',Dn='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n//////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the input and \n// concept ID. Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change these based on the concept you want to remove\n$INPUT_ID = \'c99f1b557d1d43d1916b46f8ce4a0487\';\n$CONCEPT_ID = \'tree\';\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\Data;\nuse Clarifai\\Api\\Input;\nuse Clarifai\\Api\\Concept;\nuse Clarifai\\Api\\PatchInputsRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PatchInputs(\n        // The request object carries the request along with the request status and other metadata related to the request itself\n        new PatchInputsRequest([\n            "user_app_id" => $userDataObject,\n            "action" => "remove",  // Supported actions: overwrite, merge, remove\n            \'inputs\' => [\n                new Input([ // The Input object wraps the id and Data object in order to meet the API specification \n                    "id" => $INPUT_ID,             \n                    \'data\' => new Data([ // The Data object is constructed around the Concept object. It offers a container that has additional concept independent\n                                        // metadata                    \n                        "concepts" => [\n                            new Concept([\n                            "id" => $CONCEPT_ID // We\'re removing the concept, so there\'s no need to specify\n                                                // the concept value\n                            ])                            \n                        ]\n                    ])\n                ])\n            ]\n        ]),\n        $metadata\n    )->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\n?>\n',Cn='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the inputs and \n// concepts IDs. Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change these based on the concepts you want to remove\n$INPUT_ID_1 = \'ff79664eefe94db1878f51931f9d6fd9\';\n$INPUT_ID_2 = \'f54b89ef64874888a64f7016cf6f33ad\';\n$CONCEPT_ID_1 = \'tree\';\n$CONCEPT_ID_2 = \'water\';\n$CONCEPT_ID_3 = \'animal\';\n$CONCEPT_ID_4 = \'fruit\';\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\Data;\nuse Clarifai\\Api\\Input;\nuse Clarifai\\Api\\Concept;\nuse Clarifai\\Api\\PatchInputsRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PatchInputs(\n        // The request object carries the request along with the request status and other metadata related to the request itself\n        new PatchInputsRequest([\n            "user_app_id" => $userDataObject,\n            "action" => "remove",  // Supported actions: overwrite, merge, remove\n            \'inputs\' => [\n                new Input([ // The Input object wraps the id and Data object in order to meet the API specification \n                    "id" => $INPUT_ID_1,             \n                    \'data\' => new Data([ // The Data object is constructed around the Concept object. It offers a container that has additional concept independent\n                                        // metadata                    \n                        "concepts" => [\n                            new Concept([\n                            "id" => $CONCEPT_ID_1 // We\'re removing the concepts, so there\'s no need to specify\n                                                  // the concept value\n                            ]),\n                            new Concept([\n                                "id" => $CONCEPT_ID_2\n                            ])\n                        ]\n                    ])\n                            ]),\n                new Input([ \n                    "id" => $INPUT_ID_2,             \n                    \'data\' => new Data([                          \n                        "concepts" => [\n                            new Concept([\n                            "id" => $CONCEPT_ID_3\n                            ]),\n                            new Concept([\n                                "id" => $CONCEPT_ID_4    \n                            ])\n                        ]\n                    ])\n                ])\n            ]\n        ]),\n        $metadata\n    )->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\n?>\n',mn='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the ID of the \n// input we want to delete. Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change this based on the input you want to delete\n$INPUT_ID = \'ff79664eefe94db1878f51931f9d6fd9\';\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\DeleteInputRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->DeleteInput(\n        // The request object carries the request along with the request status and other metadata related to the request itself\n        new DeleteInputRequest([\n            "user_app_id" => $userDataObject,\n            \'input_id\' => $INPUT_ID \n        ]),\n        $metadata\n    )->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\n?>\n',Tn='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the IDs of the\n// inputs we want to delete. Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change these based on the inputs you want to delete\n$INPUT_ID_1 = \'d4319bb362d9487e812970a3ed9ba028\';\n$INPUT_ID_2 = \'fc449e98ce3847c788954e3fec871d02\';\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\DeleteInputsRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->DeleteInputs(\n        // The request object carries the request along with the request status and other metadata related to the request itself\n        new DeleteInputsRequest([\n            "user_app_id" => $userDataObject,\n            \'ids\' => [$INPUT_ID_1, $INPUT_ID_2]\n        ]),\n        $metadata\n    )->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\n?>\n',Rn={description:"Learn how to use our API to manage, organize, and process your inputs",sidebar_position:3},bn="Manage Inputs via the API",Sn={},Un=[{value:"List Inputs",id:"list-inputs",level:2},{value:"List All Inputs",id:"list-all-inputs",level:3},{value:"List Inputs (Streaming)",id:"list-inputs-streaming",level:3},{value:"Get Inputs",id:"get-inputs",level:2},{value:"Get Input by ID",id:"get-input-by-id",level:3},{value:"Get Inputs&#39; Status",id:"get-inputs-status",level:3},{value:"Download Inputs",id:"download-inputs",level:2},{value:"Patch Inputs",id:"patch-inputs",level:2},{value:"Patch Metadata",id:"patch-metadata",level:3},{value:"Patch Bounding Box Annotation",id:"patch-bounding-box-annotation",level:3},{value:"Patch Polygon Annotation",id:"patch-polygon-annotation",level:3},{value:"Update Input With Concepts",id:"update-input-with-concepts",level:3},{value:"Bulk Update Inputs With Concepts",id:"bulk-update-inputs-with-concepts",level:3},{value:"Bulk Delete Input Annotations",id:"bulk-delete-input-annotations",level:2},{value:"Delete Inputs",id:"delete-inputs",level:2},{value:"Delete Concepts From an Input",id:"delete-concepts-from-an-input",level:3},{value:"Bulk Delete Concepts From a List of Inputs",id:"bulk-delete-concepts-from-a-list-of-inputs",level:3},{value:"Delete Input by ID",id:"delete-input-by-id",level:3},{value:"Delete a List of Inputs",id:"delete-a-list-of-inputs",level:3},{value:"Delete All Inputs",id:"delete-all-inputs",level:3}];function On(n){const e={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,i.R)(),...n.components},{Details:t}=e;return t||function(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"manage-inputs-via-the-api",children:"Manage Inputs via the API"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Learn how to use our API to manage, organize, and process your inputs"})}),"\n",(0,s.jsx)("hr",{}),"\n",(0,s.jsx)(e.p,{children:"You can manage inputs on the Clarifai platform by organizing, updating, deleting, and performing various data processing tasks."}),"\n",(0,s.jsx)(e.p,{children:"Whether you're working with images, text, or videos, the platform provides powerful capabilities to help you maintain full control over your inputs throughout their lifecycle."}),"\n",(0,s.jsx)(e.admonition,{type:"info",children:(0,s.jsxs)(e.p,{children:["Before using the ",(0,s.jsx)(e.a,{href:"https://docs.clarifai.com/additional-resources/api-overview/python-sdk",children:"Python SDK"}),", ",(0,s.jsx)(e.a,{href:"https://docs.clarifai.com/additional-resources/api-overview/nodejs-sdk",children:"Node.js SDK"}),", or any of our ",(0,s.jsx)(e.a,{href:"https://docs.clarifai.com/additional-resources/api-overview/grpc-clients",children:"gRPC clients"}),", ensure they are properly installed on your machine. Refer to their respective installation guides for instructions on how to install and initialize them."]})}),"\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n",(0,s.jsx)(e.h2,{id:"list-inputs",children:"List Inputs"}),"\n",(0,s.jsx)(e.h3,{id:"list-all-inputs",children:"List All Inputs"}),"\n",(0,s.jsx)(e.p,{children:"You can retrieve all inputs available in your app. If you added inputs with concepts, they will be returned in the response as well."}),"\n",(0,s.jsxs)(e.p,{children:["Note that this request supports ",(0,s.jsx)(e.a,{href:"https://docs.clarifai.com/additional-resources/api-overview/pagination",children:"pagination"}),", allowing you to navigate through large sets of inputs efficiently."]}),"\n",(0,s.jsxs)(r.A,{children:[(0,s.jsx)(o.A,{value:"python",label:"Python SDK",children:(0,s.jsx)(c.A,{className:"language-python",children:l})}),(0,s.jsx)(o.A,{value:"python2",label:"Python (gRPC)",children:(0,s.jsx)(c.A,{className:"language-python",children:g})}),(0,s.jsx)(o.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:O})}),(0,s.jsx)(o.A,{value:"nodejs",label:"Node.js (gRPC)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:L})}),(0,s.jsx)(o.A,{value:"java",label:"Java (gRPC)",children:(0,s.jsx)(c.A,{className:"language-java",children:X})}),(0,s.jsx)(o.A,{value:"php",label:"PHP (gRPC)",children:(0,s.jsx)(c.A,{className:"language-php",children:In})}),(0,s.jsx)(o.A,{value:"curl",label:"cURL",children:(0,s.jsx)(c.A,{className:"language-bash",children:rn})})]}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{children:"Output"}),(0,s.jsx)(c.A,{className:"language-text",children:f})]}),"\n",(0,s.jsx)(e.h3,{id:"list-inputs-streaming",children:"List Inputs (Streaming)"}),"\n",(0,s.jsxs)(e.p,{children:["This is another method for listing inputs, which was built to scalably list an app's inputs in an iterative / streaming fashion. ",(0,s.jsx)(e.code,{children:"StreamInputs"})," will return ",(0,s.jsx)(e.code,{children:"per_page"})," number of inputs from a certain input onward, controlled by the optional ",(0,s.jsx)(e.code,{children:"last_id"})," parameter (defaults to the first input)."]}),"\n",(0,s.jsxs)(e.p,{children:["By default, the stream will return inputs from oldest to newest. Set the ",(0,s.jsx)(e.code,{children:"descending"})," field to true to reverse that order."]}),"\n",(0,s.jsxs)(r.A,{children:[(0,s.jsx)(o.A,{value:"python",label:"Python (gRPC)",children:(0,s.jsx)(c.A,{className:"language-python",children:A})}),(0,s.jsx)(o.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:w})}),(0,s.jsx)(o.A,{value:"nodejs",label:"Node.js (gRPC)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:G})}),(0,s.jsx)(o.A,{value:"java",label:"Java (gRPC)",children:(0,s.jsx)(c.A,{className:"language-java",children:J})}),(0,s.jsx)(o.A,{value:"php",label:"PHP (gRPC)",children:(0,s.jsx)(c.A,{className:"language-php",children:En})})]}),"\n",(0,s.jsx)(e.h2,{id:"get-inputs",children:"Get Inputs"}),"\n",(0,s.jsx)(e.h3,{id:"get-input-by-id",children:"Get Input by ID"}),"\n",(0,s.jsxs)(e.p,{children:["If you'd like to get the details of a specific input by its ",(0,s.jsx)(e.code,{children:"id"}),", you can do that as well."]}),"\n",(0,s.jsxs)(r.A,{children:[(0,s.jsx)(o.A,{value:"python",label:"Python (gRPC)",children:(0,s.jsx)(c.A,{className:"language-python",children:D})}),(0,s.jsx)(o.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:N})}),(0,s.jsx)(o.A,{value:"nodejs",label:"Node.js (gRPC)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:k})}),(0,s.jsx)(o.A,{value:"java",label:"Java (gRPC)",children:(0,s.jsx)(c.A,{className:"language-java",children:F})}),(0,s.jsx)(o.A,{value:"php",label:"PHP (gRPC)",children:(0,s.jsx)(c.A,{className:"language-php",children:fn})}),(0,s.jsx)(o.A,{value:"curl",label:"cURL",children:(0,s.jsx)(c.A,{className:"language-bash",children:on})})]}),"\n",(0,s.jsx)(e.h3,{id:"get-inputs-status",children:"Get Inputs' Status"}),"\n",(0,s.jsx)(e.p,{children:"If you add inputs in bulk, they will be procesed in the background. You can get the status of all your inputs (processed, to_process, and errors) like this:"}),"\n",(0,s.jsxs)(r.A,{children:[(0,s.jsx)(o.A,{value:"python",label:"Python (gRPC)",children:(0,s.jsx)(c.A,{className:"language-python",children:C})}),(0,s.jsx)(o.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:j})}),(0,s.jsx)(o.A,{value:"nodejs",label:"Node.js (gRPC)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:q})}),(0,s.jsx)(o.A,{value:"java",label:"Java (gRPC)",children:(0,s.jsx)(c.A,{className:"language-java",children:Q})}),(0,s.jsx)(o.A,{value:"php",label:"PHP (gRPC)",children:(0,s.jsx)(c.A,{className:"language-php",children:Pn})}),(0,s.jsx)(o.A,{value:"curl",label:"cURL",children:(0,s.jsx)(c.A,{className:"language-bash",children:cn})})]}),"\n",(0,s.jsx)(e.h2,{id:"download-inputs",children:"Download Inputs"}),"\n",(0,s.jsx)(e.p,{children:"Below is an example of how to download inputs from your app."}),"\n",(0,s.jsx)(r.A,{children:(0,s.jsx)(o.A,{value:"python",label:"Python SDK",children:(0,s.jsx)(c.A,{className:"language-python",children:u})})}),"\n",(0,s.jsx)(e.h2,{id:"patch-inputs",children:"Patch Inputs"}),"\n",(0,s.jsx)(e.p,{children:"You can apply patch operations to an input, allowing for the merging or removal of items. By default, these actions overwrite existing data, but they behave differently when handling lists of objects."}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["The ",(0,s.jsx)(e.code,{children:"merge"})," action replaces a ",(0,s.jsx)(e.code,{children:"key:value"})," pair with a ",(0,s.jsx)(e.code,{children:"key:new_value"}),", or appends new values to an existing list. When dealing with dictionaries, it merges entries that share the same ",(0,s.jsx)(e.code,{children:"id"})," field."]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["The ",(0,s.jsx)(e.code,{children:"remove"})," action replaces a ",(0,s.jsx)(e.code,{children:"key:value"})," pair with a ",(0,s.jsx)(e.code,{children:"key:new_value"}),", or removes any items from a list that match the IDs of the provided values."]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["The ",(0,s.jsx)(e.code,{children:"overwrite"})," action fully replaces an existing object with a new one."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.h3,{id:"patch-metadata",children:"Patch Metadata"}),"\n",(0,s.jsx)(e.p,{children:"Here is an example of how to patch the metadata of an input."}),"\n",(0,s.jsx)(r.A,{children:(0,s.jsx)(o.A,{value:"python",label:"Python SDK",children:(0,s.jsx)(c.A,{className:"language-python",children:I})})}),"\n",(0,s.jsx)(e.h3,{id:"patch-bounding-box-annotation",children:"Patch Bounding Box Annotation"}),"\n",(0,s.jsx)(e.p,{children:"Here is an example of how to patch a bounding box annotation on an input."}),"\n",(0,s.jsx)(r.A,{children:(0,s.jsx)(o.A,{value:"python",label:"Python SDK",children:(0,s.jsx)(c.A,{className:"language-python",children:_})})}),"\n",(0,s.jsx)(e.h3,{id:"patch-polygon-annotation",children:"Patch Polygon Annotation"}),"\n",(0,s.jsx)(e.p,{children:"Here is an example of how to patch a polygon annotation on an input."}),"\n",(0,s.jsx)(r.A,{children:(0,s.jsx)(o.A,{value:"python",label:"Python SDK",children:(0,s.jsx)(c.A,{className:"language-python",children:h})})}),"\n",(0,s.jsx)(e.h3,{id:"update-input-with-concepts",children:"Update Input With Concepts"}),"\n",(0,s.jsx)(e.p,{children:"To update an input with a new concept, or to change a concept value from true/false, you can do the following:"}),"\n",(0,s.jsxs)(r.A,{children:[(0,s.jsx)(o.A,{value:"python",label:"Python SDK",children:(0,s.jsx)(c.A,{className:"language-python",children:E})}),(0,s.jsx)(o.A,{value:"python2",label:"Python (gRPC)",children:(0,s.jsx)(c.A,{className:"language-python",children:m})}),(0,s.jsx)(o.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:v})}),(0,s.jsx)(o.A,{value:"nodejs",label:"Node.js (gRPC)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:B})}),(0,s.jsx)(o.A,{value:"java",label:"Java (gRPC)",children:(0,s.jsx)(c.A,{className:"language-java",children:Z})}),(0,s.jsx)(o.A,{value:"php",label:"PHP (gRPC)",children:(0,s.jsx)(c.A,{className:"language-php",children:gn})}),(0,s.jsx)(o.A,{value:"curl",label:"cURL",children:(0,s.jsx)(c.A,{className:"language-bash",children:pn})})]}),"\n",(0,s.jsx)(e.h3,{id:"bulk-update-inputs-with-concepts",children:"Bulk Update Inputs With Concepts"}),"\n",(0,s.jsxs)(e.p,{children:["You can update existing inputs using their ",(0,s.jsx)(e.code,{children:"ids"}),". This is useful if you'd like to add concepts to inputs after they have already been added."]}),"\n",(0,s.jsx)(e.p,{children:"Below is an example of how to update multiple inputs with concepts at once."}),"\n",(0,s.jsxs)(r.A,{children:[(0,s.jsx)(o.A,{value:"python",label:"Python (gRPC)",children:(0,s.jsx)(c.A,{className:"language-python",children:T})}),(0,s.jsx)(o.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:x})}),(0,s.jsx)(o.A,{value:"nodejs",label:"Node.js (gRPC)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:M})}),(0,s.jsx)(o.A,{value:"java",label:"Java (gRPC)",children:(0,s.jsx)(c.A,{className:"language-java",children:nn})}),(0,s.jsx)(o.A,{value:"php",label:"PHP (gRPC)",children:(0,s.jsx)(c.A,{className:"language-php",children:An})}),(0,s.jsx)(o.A,{value:"curl",label:"cURL",children:(0,s.jsx)(c.A,{className:"language-bash",children:un})})]}),"\n",(0,s.jsx)(e.h2,{id:"bulk-delete-input-annotations",children:"Bulk Delete Input Annotations"}),"\n",(0,s.jsx)(e.p,{children:"Below is an example of how to delete all the annotations associated with a given input by setting the input ID(s)."}),"\n",(0,s.jsxs)(e.p,{children:["The ",(0,s.jsx)(e.code,{children:"annotation_ids"})," parameter is optional. However, if provided, the number and order of ",(0,s.jsx)(e.code,{children:"annotation_ids"})," must match the corresponding ",(0,s.jsx)(e.code,{children:"input_ids"}),"."]}),"\n",(0,s.jsx)(r.A,{children:(0,s.jsx)(o.A,{value:"python",label:"Python SDK",children:(0,s.jsx)(c.A,{className:"language-python",children:p})})}),"\n",(0,s.jsx)(e.h2,{id:"delete-inputs",children:"Delete Inputs"}),"\n",(0,s.jsx)(e.admonition,{type:"caution",children:(0,s.jsx)(e.p,{children:"Be certain that you want to delete a particular input as the operation cannot be undone."})}),"\n",(0,s.jsx)(e.h3,{id:"delete-concepts-from-an-input",children:"Delete Concepts From an Input"}),"\n",(0,s.jsx)(e.p,{children:"To remove concepts that were already added to an input, you can do this:"}),"\n",(0,s.jsxs)(r.A,{children:[(0,s.jsx)(o.A,{value:"python",label:"Python (gRPC)",children:(0,s.jsx)(c.A,{className:"language-python",children:R})}),(0,s.jsx)(o.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:H})}),(0,s.jsx)(o.A,{value:"nodejs",label:"Node.js (gRPC)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:z})}),(0,s.jsx)(o.A,{value:"java",label:"Java (gRPC)",children:(0,s.jsx)(c.A,{className:"language-java",children:en})}),(0,s.jsx)(o.A,{value:"php",label:"PHP (gRPC)",children:(0,s.jsx)(c.A,{className:"language-php",children:Dn})}),(0,s.jsx)(o.A,{value:"curl",label:"cURL",children:(0,s.jsx)(c.A,{className:"language-bash",children:ln})})]}),"\n",(0,s.jsx)(e.h3,{id:"bulk-delete-concepts-from-a-list-of-inputs",children:"Bulk Delete Concepts From a List of Inputs"}),"\n",(0,s.jsx)(e.p,{children:"Below is an example of how to bulk delete multiple concepts from a list of inputs."}),"\n",(0,s.jsxs)(r.A,{children:[(0,s.jsx)(o.A,{value:"python",label:"Python (gRPC)",children:(0,s.jsx)(c.A,{className:"language-python",children:b})}),(0,s.jsx)(o.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:y})}),(0,s.jsx)(o.A,{value:"nodejs",label:"Node.js (gRPC)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:V})}),(0,s.jsx)(o.A,{value:"java",label:"Java (gRPC)",children:(0,s.jsx)(c.A,{className:"language-java",children:tn})}),(0,s.jsx)(o.A,{value:"php",label:"PHP (gRPC)",children:(0,s.jsx)(c.A,{className:"language-php",children:Cn})}),(0,s.jsx)(o.A,{value:"curl",label:"cURL",children:(0,s.jsx)(c.A,{className:"language-bash",children:dn})})]}),"\n",(0,s.jsx)(e.h3,{id:"delete-input-by-id",children:"Delete Input by ID"}),"\n",(0,s.jsxs)(e.p,{children:["Below is an example of how to delete a single input by its ",(0,s.jsx)(e.code,{children:"id"}),"."]}),"\n",(0,s.jsxs)(r.A,{children:[(0,s.jsx)(o.A,{value:"python",label:"Python (gRPC)",children:(0,s.jsx)(c.A,{className:"language-python",children:S})}),(0,s.jsx)(o.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:Y})}),(0,s.jsx)(o.A,{value:"nodejs",label:"Node.js (gRPC)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:W})}),(0,s.jsx)(o.A,{value:"java",label:"Java (gRPC)",children:(0,s.jsx)(c.A,{className:"language-java",children:an})}),(0,s.jsx)(o.A,{value:"php",label:"PHP (gRPC)",children:(0,s.jsx)(c.A,{className:"language-php",children:mn})}),(0,s.jsx)(o.A,{value:"curl",label:"cURL",children:(0,s.jsx)(c.A,{className:"language-bash",children:_n})})]}),"\n",(0,s.jsx)(e.h3,{id:"delete-a-list-of-inputs",children:"Delete a List of Inputs"}),"\n",(0,s.jsx)(e.p,{children:"You can also delete multiple inputs in one API call. This will happen asynchronously."}),"\n",(0,s.jsx)(e.admonition,{type:"info",children:(0,s.jsx)(e.p,{children:"We currently support a batch size of 128 inputs per request. So, you can provide a list of 128 input IDs and delete them in one API call."})}),"\n",(0,s.jsxs)(r.A,{children:[(0,s.jsx)(o.A,{value:"python",label:"Python (gRPC)",children:(0,s.jsx)(c.A,{className:"language-python",children:U})}),(0,s.jsx)(o.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:$})}),(0,s.jsx)(o.A,{value:"nodejs",label:"Node.js (gRPC)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:K})}),(0,s.jsx)(o.A,{value:"java",label:"Java (gRPC)",children:(0,s.jsx)(c.A,{className:"language-java",children:sn})}),(0,s.jsx)(o.A,{value:"php",label:"PHP (gRPC)",children:(0,s.jsx)(c.A,{className:"language-php",children:Tn})}),(0,s.jsx)(o.A,{value:"curl",label:"cURL",children:(0,s.jsx)(c.A,{className:"language-bash",children:hn})})]}),"\n",(0,s.jsx)(e.h3,{id:"delete-all-inputs",children:"Delete All Inputs"}),"\n",(0,s.jsx)(e.p,{children:"Below is an example of how to delete all inputs from your app."}),"\n",(0,s.jsx)(r.A,{children:(0,s.jsx)(o.A,{value:"python",label:"Python SDK",children:(0,s.jsx)(c.A,{className:"language-python",children:d})})}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{children:"Output"}),(0,s.jsx)(c.A,{className:"language-text",children:P})]})]})}function wn(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(On,{...n})}):On(n)}},65537:(n,e,t)=>{t.d(e,{A:()=>C});var a=t(96540),s=t(18215),i=t(65627),r=t(56347),o=t(50372),c=t(30604),p=t(11861),u=t(78749);function l(n){return a.Children.toArray(n).filter((n=>"\n"!==n)).map((n=>{if(!n||(0,a.isValidElement)(n)&&function(n){const{props:e}=n;return!!e&&"object"==typeof e&&"value"in e}(n))return n;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof n.type?n.type:n.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function d(n){const{values:e,children:t}=n;return(0,a.useMemo)((()=>{const n=e??function(n){return l(n).map((n=>{let{props:{value:e,label:t,attributes:a,default:s}}=n;return{value:e,label:t,attributes:a,default:s}}))}(t);return function(n){const e=(0,p.XI)(n,((n,e)=>n.value===e.value));if(e.length>0)throw new Error(`Docusaurus error: Duplicate values "${e.map((n=>n.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(n),n}),[e,t])}function _(n){let{value:e,tabValues:t}=n;return t.some((n=>n.value===e))}function h(n){let{queryString:e=!1,groupId:t}=n;const s=(0,r.W6)(),i=function(n){let{queryString:e=!1,groupId:t}=n;if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:e,groupId:t});return[(0,c.aZ)(i),(0,a.useCallback)((n=>{if(!i)return;const e=new URLSearchParams(s.location.search);e.set(i,n),s.replace({...s.location,search:e.toString()})}),[i,s])]}function I(n){const{defaultValue:e,queryString:t=!1,groupId:s}=n,i=d(n),[r,c]=(0,a.useState)((()=>function(n){let{defaultValue:e,tabValues:t}=n;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!_({value:e,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${t.map((n=>n.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const a=t.find((n=>n.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:e,tabValues:i}))),[p,l]=h({queryString:t,groupId:s}),[I,E]=function(n){let{groupId:e}=n;const t=function(n){return n?`docusaurus.tab.${n}`:null}(e),[s,i]=(0,u.Dv)(t);return[s,(0,a.useCallback)((n=>{t&&i.set(n)}),[t,i])]}({groupId:s}),f=(()=>{const n=p??I;return _({value:n,tabValues:i})?n:null})();(0,o.A)((()=>{f&&c(f)}),[f]);return{selectedValue:r,selectValue:(0,a.useCallback)((n=>{if(!_({value:n,tabValues:i}))throw new Error(`Can't select invalid tab value=${n}`);c(n),l(n),E(n)}),[l,E,i]),tabValues:i}}var E=t(9136);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var P=t(74848);function g(n){let{className:e,block:t,selectedValue:a,selectValue:r,tabValues:o}=n;const c=[],{blockElementScrollPositionUntilNextRender:p}=(0,i.a_)(),u=n=>{const e=n.currentTarget,t=c.indexOf(e),s=o[t].value;s!==a&&(p(e),r(s))},l=n=>{let e=null;switch(n.key){case"Enter":u(n);break;case"ArrowRight":{const t=c.indexOf(n.currentTarget)+1;e=c[t]??c[0];break}case"ArrowLeft":{const t=c.indexOf(n.currentTarget)-1;e=c[t]??c[c.length-1];break}}e?.focus()};return(0,P.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":t},e),children:o.map((n=>{let{value:e,label:t,attributes:i}=n;return(0,P.jsx)("li",{role:"tab",tabIndex:a===e?0:-1,"aria-selected":a===e,ref:n=>{c.push(n)},onKeyDown:l,onClick:u,...i,className:(0,s.A)("tabs__item",f.tabItem,i?.className,{"tabs__item--active":a===e}),children:t??e},e)}))})}function A(n){let{lazy:e,children:t,selectedValue:i}=n;const r=(Array.isArray(t)?t:[t]).filter(Boolean);if(e){const n=r.find((n=>n.props.value===i));return n?(0,a.cloneElement)(n,{className:(0,s.A)("margin-top--md",n.props.className)}):null}return(0,P.jsx)("div",{className:"margin-top--md",children:r.map(((n,e)=>(0,a.cloneElement)(n,{key:e,hidden:n.props.value!==i})))})}function D(n){const e=I(n);return(0,P.jsxs)("div",{className:(0,s.A)("tabs-container",f.tabList),children:[(0,P.jsx)(g,{...e,...n}),(0,P.jsx)(A,{...e,...n})]})}function C(n){const e=(0,E.A)();return(0,P.jsx)(D,{...n,children:l(n.children)},String(e))}},79329:(n,e,t)=>{t.d(e,{A:()=>r});t(96540);var a=t(18215);const s={tabItem:"tabItem_Ymn6"};var i=t(74848);function r(n){let{children:e,hidden:t,className:r}=n;return(0,i.jsx)("div",{role:"tabpanel",className:(0,a.A)(s.tabItem,r),hidden:t,children:e})}}}]);
"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[4345],{8071:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>b,contentTitle:()=>_,default:()=>x,frontMatter:()=>f,metadata:()=>g,toc:()=>v});var i=t(74848),r=t(28453),a=t(11470),o=t(19365),s=t(21432);const l='from clarifai.client.input import Inputs\nfrom clarifai.client.model import Model\n\nmodel_url = "https://clarifai.com/openai/chat-completion/models/gpt-4o-mini"\nprompt = "What\'s the future of AI?"\n\n# here is an example of creating an input proto list of size 16\nproto_list=[]\nfor i in range(16):\n    proto_list.append(Inputs.get_input_from_bytes(input_id = f\'demo_{i}\', text_bytes=prompt.encode()))\n\n# passthe input proto as paramater to the predict function\nmodel_prediction = Model(url=model_url).predict(\n    proto_list\n)\n\n# Check the length of predictions to see if all inputs were passed successfully\n\nprint(len(model_prediction.outputs))\n',c="import { Inputs } from 'clarifai-client';\nimport { Model } from 'clarifai-client';\n\nconst modelUrl: string = \"https://clarifai.com/openai/chat-completion/models/gpt-4o-mini\";\nconst prompt: string = \"What's the future of AI?\";\n\n// here is an example of creating an input proto list of size 16\nconst protoList: any[] = [];\nfor (let i = 0; i < 16; i++) {\n    protoList.push(Inputs.getInputFromBytes({ inputId: `demo_${i}`, textBytes: Buffer.from(prompt) }));\n}\n\n// passthe input proto as parameter to the predict function\nconst modelPrediction = new Model({ url: modelUrl }).predict(protoList);\n\n// Check the length of predictions to see if all inputs were passed successfully\nconsole.log(modelPrediction.outputs.length);",d='from clarifai.client.model import Model\n\n# Your PAT (Personal Access Token) can be found in the Account\'s Security section\n# Specify the correct user_id/app_id pairings\n# Since you\'re making inferences outside your app\'s scope\n#USER_ID = "cohere"\n#APP_ID = "embed"\n\n# You can set the model using model URL or model ID.\n# Change these to whatever model you want to use\n# eg : MODEL_ID = \'cohere-embed-english-v3_0\'\n# You can also set a particular model version by specifying the  version ID\n# eg: MODEL_VERSION_ID = \'model_version\'\n#  Model class objects can be inititalised by providing its URL or also by defining respective user_id, app_id and model_id\n\n# eg : model = Model(user_id="clarifai", app_id="main", model_id=MODEL_ID)\n\ninput_text = """In India Green Revolution commenced in the early 1960s that led to an increase in food grain production, especially in Punjab, Haryana, and Uttar Pradesh. Major milestones in this undertaking were the development of high-yielding varieties of wheat. The Green revolution is revolutionary in character due to the introduction of new technology, new ideas, the new application of inputs like HYV seeds, fertilizers, irrigation water, pesticides, etc. As all these were brought suddenly and spread quickly to attain dramatic results thus it is termed as a revolution in green agriculture.\n"""\n# The predict API gives the flexibility to generate predictions for data provided through URL, Filepath and bytes format.\n\n# Example for prediction through URL:\n# model_prediction = model.predict_by_url(URL ,input_type="text")\n\n\n# Example for prediction through Filepath:\n# model_prediction = Model(model_url).predict_by_filepath(image_filepath, input_type="text")\n\n\nmodel_url = "https://clarifai.com/cohere/embed/models/cohere-embed-english-v3_0"\n\n# You can pass the new base url as paramater while initializing the Model object\nmodel_prediction = Model(url=model_url, pat="YOUR_PAT",base_url="New Base URL").predict_by_bytes(\n    input_text, "text"\n)\n\nembeddings = model_prediction.outputs[0].data.embeddings[0].vector\n\nnum_dimensions = model_prediction.outputs[0].data.embeddings[0].num_dimensions\n\nprint(embeddings[:10])\n',u='from clarifai.client.model import Model\n\n# Your PAT (Personal Access Token) can be found in the Account\'s Security section\n# Specify the correct user_id/app_id pairings\n# Since you\'re making inferences outside your app\'s scope\n#USER_ID = "clarifai"\n#APP_ID = "main"\n\n# You can set the model using model URL or model ID.\n# Change these to whatever model you want to use\n# eg : MODEL_ID = "general-image-recognition"\n# You can also set a particular model version by specifying the  version ID\n# eg: MODEL_VERSION_ID = "aa7f35c01e0642fda5cf400f543e7c40"\n#  Model class objects can be inititalised by providing its URL or also by defining respective user_id, app_id and model_id\n\n# eg : model = Model(user_id="clarifai", app_id="main", model_id=MODEL_ID)\n\nmodel_url = "https://clarifai.com/clarifai/main/models/general-image-recognition"\nimage_url = "https://samples.clarifai.com/metro-north.jpg"\n\n# The predict API gives flexibility to generate predictions for data provided through URL,Filepath and bytes format.\n\n\n# Example for prediction through Bytes:\n# model_prediction = model.predict_by_bytes(input_bytes, input_type="image")\n\n\n# Example for prediction through Filepath:\n# model_prediction = Model(model_url).predict_by_filepath(filepath, input_type="image")\n\nmodel_prediction = Model(url=model_url, pat="YOUR_PAT",root_certificates_path="PATH_TO_ROOT_CERTIFICATE").predict_by_url(\n    image_url, input_type="image"\n)\n\n# Get the output\nprint(model_prediction.outputs[0].data)';var p=t(9588);const m="16",h='concepts {\n\n  id: "ai_HLmqFqBf"\n\n  name: "train"\n\n  value: 0.999604881\n\n  app_id: "main"\n\n}\n\nconcepts {\n\n  id: "ai_fvlBqXZR"\n\n  name: "railway"\n\n  value: 0.999297619\n\n  app_id: "main"\n\n}\n\nconcepts {\n\n  id: "ai_SHNDcmJ3"\n\n  name: "subway system"\n\n  value: 0.99825567\n\n  app_id: "main"\n\n}\n\nconcepts {\n\n  id: "ai_6kTjGfF6"\n\n  name: "station"\n\n  value: 0.998010933\n\n  app_id: "main"\n\n}\n\nconcepts {\n\n  id: "ai_RRXLczch"\n\n  name: "locomotive"\n\n  value: 0.997254908\n\n  app_id: "main"\n\n}\n\nconcepts {\n\n  id: "ai_Xxjc3MhT"\n\n  name: "transportation system"\n\n  value: 0.996976852\n\n  app_id: "main"\n\n}\n\nconcepts {\n\n  id: "ai_VRmbGVWh"\n\n  name: "travel"\n\n  value: 0.988967717\n\n  app_id: "main"\n\n}\n\nconcepts {\n\n  id: "ai_jlb9q33b"\n\n  name: "commuter"\n\n  value: 0.98089534\n\n  app_id: "main"\n\n}\n\nconcepts {\n\n  id: "ai_2gkfMDsM"\n\n  name: "platform"\n\n  value: 0.980635285\n\n  app_id: "main"\n\n}\n\nconcepts {\n\n  id: "ai_n9vjC1jB"\n\n  name: "light"\n\n  value: 0.974186838\n\n  app_id: "main"\n\n}\n\nconcepts {\n\n  id: "ai_sQQj52KZ"\n\n  name: "train station"\n\n  value: 0.96878773\n\n  app_id: "main"\n\n}\n\nconcepts {\n\n  id: "ai_l4WckcJN"\n\n  name: "blur"\n\n  value: 0.967302203\n\n  app_id: "main"\n\n}\n\nconcepts {\n\n  id: "ai_WBQfVV0p"\n\n  name: "city"\n\n  value: 0.96151042\n\n  app_id: "main"\n\n}\n\nconcepts {\n\n  id: "ai_TZ3C79C6"\n\n  name: "road"\n\n  value: 0.961382031\n\n  app_id: "main"\n\n}\n\nconcepts {\n\n  id: "ai_CpFBRWzD"\n\n  name: "urban"\n\n  value: 0.960375667\n\n  app_id: "main"\n\n}\n\nconcepts {\n\n  id: "ai_tr0MBp64"\n\n  name: "traffic"\n\n  value: 0.959969819\n\n  app_id: "main"\n\n}\n\nconcepts {\n\n  id: "ai_GjVpxXrs"\n\n  name: "street"\n\n  value: 0.947492182\n\n  app_id: "main"\n\n}\n\nconcepts {\n\n  id: "ai_mcSHVRfS"\n\n  name: "public"\n\n  value: 0.934322\n\n  app_id: "main"\n\n}\n\nconcepts {\n\n  id: "ai_J6d1kV8t"\n\n  name: "tramway"\n\n  value: 0.931958199\n\n  app_id: "main"\n\n}\n\nconcepts {\n\n  id: "ai_6lhccv44"\n\n  name: "business"\n\n  value: 0.929547548\n\n  app_id: "main"\n\n}',f={sidebar_position:5},_="Advanced Inference Options",g={id:"sdk/Inference-from-AI-Models/Advance-Inference-Options",title:"Advanced Inference Options",description:"Learn how to perform advance inference operations using  Clarifai SDKs",source:"@site/docs/sdk/Inference-from-AI-Models/Advance-Inference-Options.md",sourceDirName:"sdk/Inference-from-AI-Models",slug:"/sdk/Inference-from-AI-Models/Advance-Inference-Options",permalink:"/sdk/Inference-from-AI-Models/Advance-Inference-Options",draft:!1,unlisted:!1,editUrl:"https://github.com/Clarifai/docs/blob/main/docs/sdk/Inference-from-AI-Models/Advance-Inference-Options.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"MultiModal as Input",permalink:"/sdk/Inference-from-AI-Models/Multimodal-as-Input"},next:{title:"Building Workflow Graphs",permalink:"/sdk/Building-Workflow-Graphs/"}},b={},v=[{value:"Batch Predict",id:"batch-predict",level:2},{value:"Different Base_URL",id:"different-base_url",level:2},{value:"Adding Root Certificate",id:"adding-root-certificate",level:2},{value:"Prediction Paramaters",id:"prediction-paramaters",level:2}];function y(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"advanced-inference-options",children:"Advanced Inference Options"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Learn how to perform advance inference operations using  Clarifai SDKs"})}),"\n",(0,i.jsx)("hr",{}),"\n",(0,i.jsx)(n.p,{children:"The inference API contains certain features that provides more flexibility while running predictions on inputs. This can help the end users to manipulate the outputs required for their tasks."}),"\n",(0,i.jsx)(n.h2,{id:"batch-predict",children:"Batch Predict"}),"\n",(0,i.jsx)(n.p,{children:"Efficiently process multiple inputs in a single request by leveraging the Predict API's batch prediction feature. This allows you to streamline the prediction process, saving time and resources. Simply submit a batch of inputs to the model, and receive comprehensive predictions in return."}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsx)(n.p,{children:"The batch size should not exceed 128."})}),"\n",(0,i.jsxs)(a.A,{children:[(0,i.jsxs)(o.A,{value:"python",label:"Python",children:[(0,i.jsx)(s.A,{className:"language-python",children:l}),(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{children:"Output"}),(0,i.jsx)(s.A,{className:"language-text",children:m})]})]}),(0,i.jsx)(o.A,{value:"typescript",label:"Typescript",children:(0,i.jsx)(s.A,{className:"language-typescript",children:c})})]}),"\n",(0,i.jsx)(n.h2,{id:"different-base_url",children:"Different Base_URL"}),"\n",(0,i.jsx)(n.p,{children:"Use the flexibility of the Predict API to obtain model predictions by tailoring the base_url. Customize your endpoint to seamlessly integrate with different environments, ensuring a versatile and adaptable approach to accessing model predictions."}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsx)(n.p,{children:"This feature is for Enteprise that use on-prem deployments. So the base_url can be used to point to the respective servers."})}),"\n",(0,i.jsx)(a.A,{children:(0,i.jsx)(o.A,{value:"python",label:"Python",children:(0,i.jsx)(s.A,{className:"language-python",children:d})})}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{children:"Output"}),(0,i.jsx)(s.A,{className:"language-text",children:p.A})]}),"\n",(0,i.jsx)(n.h2,{id:"adding-root-certificate",children:"Adding Root Certificate"}),"\n",(0,i.jsx)(n.p,{children:"A root certificate is considered as an extra level of security when communicating through API's. It's a self-signed certificate that verifies the legitimacy of other certificates. This establishes a chain of trust, ensuring you connect to real API's and your data is encrypted. The Clarifai SDKs allows users to add their own root certificates to enhance data security and privacy."}),"\n",(0,i.jsxs)(n.p,{children:["Visit ",(0,i.jsx)(n.a,{href:"https://www.pandasecurity.com/en/mediacenter/what-is-a-root-certificate/",children:"this"})," page to learn more about root certificates."]}),"\n",(0,i.jsx)(a.A,{children:(0,i.jsx)(o.A,{value:"python",label:"Python",children:(0,i.jsx)(s.A,{className:"language-python",children:u})})}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{children:"Output"}),(0,i.jsx)(s.A,{className:"language-text",children:h})]}),"\n",(0,i.jsx)(n.h2,{id:"prediction-paramaters",children:"Prediction Paramaters"}),"\n",(0,i.jsx)(n.p,{children:"These parameters play a crucial role in configuring and customizing your prediction requests, ensuring accurate and tailored results based on your specific use case. Understanding and appropriately setting these prediction parameters will enhance your experience and enable you to extract meaningful insights from the Clarifai platform. The below parameters allows users to modify the predictions received from the model according to their needs."}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Param Name"}),(0,i.jsx)(n.th,{children:"Param Description"}),(0,i.jsx)(n.th,{children:"Usage example"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"temperature"}),(0,i.jsx)(n.td,{children:"Temperature is a parameter of OpenAI ChatGPT, GPT-3 and GPT-4 models that governs the randomness and thus the creativity of the responses. It is always a number between 0 and 1."}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"inference_params = dict(temperature=0.2) Model(model_url).predict(inputs,inference_params=inference_params)"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"max_tokens"}),(0,i.jsx)(n.td,{children:"Max_tokens is a parameter for GPT models. This parameter shows the maximum number of tokens that can be processed inorder to get the response to your needs."}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"inference_params = dict(max_tokens=100) Model(model_url).predict(inputs,inference_params=inference_params)"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"min_value"}),(0,i.jsx)(n.td,{children:"The minimum value of the prediction confidence to filter."}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"output_config = dict(min_value=0.6) Model(model_url).predict(inputs,output_config=output_config)"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"max_concepts"}),(0,i.jsx)(n.td,{children:"The maximum number of concepts to return."}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"output_config = dict(max_concepts=3) Model(model_url).predict(inputs,output_config=output_config)"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"select_concepts"}),(0,i.jsx)(n.td,{children:"The concepts to select."}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:'output_config = dict(select_concepts=["concept_name"]) Model(model_url).predict(inputs,output_config=output_config)'})})]})]})]})]})}function x(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(y,{...e})}):y(e)}},19365:(e,n,t)=>{t.d(n,{A:()=>o});t(96540);var i=t(18215);const r={tabItem:"tabItem_Ymn6"};var a=t(74848);function o(e){let{children:n,hidden:t,className:o}=e;return(0,a.jsx)("div",{role:"tabpanel",className:(0,i.A)(r.tabItem,o),hidden:t,children:n})}},11470:(e,n,t)=>{t.d(n,{A:()=>j});var i=t(96540),r=t(18215),a=t(23104),o=t(56347),s=t(205),l=t(57485),c=t(31682),d=t(70679);function u(e){return i.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,i.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function p(e){const{values:n,children:t}=e;return(0,i.useMemo)((()=>{const e=n??function(e){return u(e).map((e=>{let{props:{value:n,label:t,attributes:i,default:r}}=e;return{value:n,label:t,attributes:i,default:r}}))}(t);return function(e){const n=(0,c.X)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function m(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function h(e){let{queryString:n=!1,groupId:t}=e;const r=(0,o.W6)(),a=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,l.aZ)(a),(0,i.useCallback)((e=>{if(!a)return;const n=new URLSearchParams(r.location.search);n.set(a,e),r.replace({...r.location,search:n.toString()})}),[a,r])]}function f(e){const{defaultValue:n,queryString:t=!1,groupId:r}=e,a=p(e),[o,l]=(0,i.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!m({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const i=t.find((e=>e.default))??t[0];if(!i)throw new Error("Unexpected error: 0 tabValues");return i.value}({defaultValue:n,tabValues:a}))),[c,u]=h({queryString:t,groupId:r}),[f,_]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[r,a]=(0,d.Dv)(t);return[r,(0,i.useCallback)((e=>{t&&a.set(e)}),[t,a])]}({groupId:r}),g=(()=>{const e=c??f;return m({value:e,tabValues:a})?e:null})();(0,s.A)((()=>{g&&l(g)}),[g]);return{selectedValue:o,selectValue:(0,i.useCallback)((e=>{if(!m({value:e,tabValues:a}))throw new Error(`Can't select invalid tab value=${e}`);l(e),u(e),_(e)}),[u,_,a]),tabValues:a}}var _=t(92303);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var b=t(74848);function v(e){let{className:n,block:t,selectedValue:i,selectValue:o,tabValues:s}=e;const l=[],{blockElementScrollPositionUntilNextRender:c}=(0,a.a_)(),d=e=>{const n=e.currentTarget,t=l.indexOf(n),r=s[t].value;r!==i&&(c(n),o(r))},u=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const t=l.indexOf(e.currentTarget)+1;n=l[t]??l[0];break}case"ArrowLeft":{const t=l.indexOf(e.currentTarget)-1;n=l[t]??l[l.length-1];break}}n?.focus()};return(0,b.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":t},n),children:s.map((e=>{let{value:n,label:t,attributes:a}=e;return(0,b.jsx)("li",{role:"tab",tabIndex:i===n?0:-1,"aria-selected":i===n,ref:e=>l.push(e),onKeyDown:u,onClick:d,...a,className:(0,r.A)("tabs__item",g.tabItem,a?.className,{"tabs__item--active":i===n}),children:t??n},n)}))})}function y(e){let{lazy:n,children:t,selectedValue:r}=e;const a=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=a.find((e=>e.props.value===r));return e?(0,i.cloneElement)(e,{className:"margin-top--md"}):null}return(0,b.jsx)("div",{className:"margin-top--md",children:a.map(((e,n)=>(0,i.cloneElement)(e,{key:n,hidden:e.props.value!==r})))})}function x(e){const n=f(e);return(0,b.jsxs)("div",{className:(0,r.A)("tabs-container",g.tabList),children:[(0,b.jsx)(v,{...n,...e}),(0,b.jsx)(y,{...n,...e})]})}function j(e){const n=(0,_.A)();return(0,b.jsx)(x,{...e,children:u(e.children)},String(n))}},9588:(e,n,t)=>{t.d(n,{A:()=>i});const i="[-0.02596100978553295,\n\n 0.023946398869156837,\n\n -0.07173235714435577,\n\n 0.032294824719429016,\n\n 0.020313993096351624,\n\n -0.026998838409781456,\n\n 0.008684193715453148,\n\n -0.016651064157485962,\n\n -0.012316598556935787,\n\n 0.00042328768176957965]"}}]);
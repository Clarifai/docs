"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[6888],{28453:(e,n,s)=>{s.d(n,{R:()=>d,x:()=>t});var i=s(96540);const l={},r=i.createContext(l);function d(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:d(e.components),i.createElement(r.Provider,{value:n},e.children)}},93461:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>t,default:()=>p,frontMatter:()=>d,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"resources/api-references/python","title":"Python API Reference","description":"Clarifai Python SDK API Reference","source":"@site/docs/resources/api-references/python.md","sourceDirName":"resources/api-references","slug":"/resources/api-references/python","permalink":"/resources/api-references/python","draft":false,"unlisted":false,"editUrl":"https://github.com/Clarifai/docs/blob/main/docs/resources/api-references/python.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"description":"Clarifai Python SDK API Reference","sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"API References","permalink":"/resources/api-references/"},"next":{"title":"Node.js API Reference","permalink":"/resources/api-references/node/"}}');var l=s(74848),r=s(28453);const d={description:"Clarifai Python SDK API Reference",sidebar_position:2},t="Python API Reference",c={},o=[{value:"User",id:"user",level:2},{value:"User.app",id:"userapp",level:3},{value:"User.create_app",id:"usercreate_app",level:3},{value:"User.create_runner",id:"usercreate_runner",level:3},{value:"User.delete_app",id:"userdelete_app",level:3},{value:"User.delete_runner",id:"userdelete_runner",level:3},{value:"User.list_apps",id:"userlist_apps",level:3},{value:"User.list_runners",id:"userlist_runners",level:3},{value:"User.runner",id:"userrunner",level:3},{value:"User.create_compute_cluster",id:"usercreate_compute_cluster",level:3},{value:"User.compute_cluster",id:"usercompute_cluster",level:3},{value:"User.list_compute_clusters",id:"userlist_compute_clusters",level:3},{value:"User.delete_compute_clusters",id:"userdelete_compute_clusters",level:3},{value:"User.patch_app",id:"userpatch_app",level:3},{value:"App",id:"app",level:2},{value:"App.create_concepts",id:"appcreate_concepts",level:3},{value:"App.create_concept_relations",id:"appcreate_concept_relations",level:3},{value:"App.create_dataset",id:"appcreate_dataset",level:3},{value:"App.create_model",id:"appcreate_model",level:3},{value:"App.create_module",id:"appcreate_module",level:3},{value:"App.create_workflow",id:"appcreate_workflow",level:3},{value:"App.dataset",id:"appdataset",level:3},{value:"App.delete_concept_relations",id:"appdelete_concept_relations",level:3},{value:"App.delete_dataset",id:"appdelete_dataset",level:3},{value:"App.delete_model",id:"appdelete_model",level:3},{value:"App.delete_module",id:"appdelete_module",level:3},{value:"App.delete_workflow",id:"appdelete_workflow",level:3},{value:"App.get_input_count",id:"appget_input_count",level:3},{value:"App.inputs",id:"appinputs",level:3},{value:"App.list_concepts()",id:"applist_concepts",level:3},{value:"App.list_datasets",id:"applist_datasets",level:3},{value:"App.list_installed_module_versions",id:"applist_installed_module_versions",level:3},{value:"App.list_models",id:"applist_models",level:3},{value:"App.list_modules",id:"applist_modules",level:3},{value:"App.list_trainable_model_types",id:"applist_trainable_model_types",level:3},{value:"App.list_workflows",id:"applist_workflows",level:3},{value:"App.model",id:"appmodel",level:3},{value:"App.module",id:"appmodule",level:3},{value:"App.patch_dataset",id:"apppatch_dataset",level:3},{value:"App.patch_model",id:"apppatch_model",level:3},{value:"App.search_concept_relations",id:"appsearch_concept_relations",level:3},{value:"App.workflow",id:"appworkflow",level:3},{value:"App.patch_workflow",id:"apppatch_workflow",level:3},{value:"Dataset",id:"dataset",level:2},{value:"Dataset.create_version",id:"datasetcreate_version",level:3},{value:"Dataset.delete_version",id:"datasetdelete_version",level:3},{value:"Dataset.list_versions",id:"datasetlist_versions",level:3},{value:"Dataset.list_inputs",id:"datasetlist_inputs",level:3},{value:"Dataset.upload_dataset",id:"datasetupload_dataset",level:3},{value:"Dataset.retry_upload_from_logs",id:"datasetretry_upload_from_logs",level:3},{value:"Dataset.upload_from_csv",id:"datasetupload_from_csv",level:3},{value:"Dataset.upload_from_folder",id:"datasetupload_from_folder",level:3},{value:"Dataset.get_upload_status",id:"datasetget_upload_status",level:3},{value:"Dataset.merge_dataset",id:"datasetmerge_dataset",level:3},{value:"Dataset.archive_zip",id:"datasetarchive_zip",level:3},{value:"Dataset.export",id:"datasetexport",level:3},{value:"Input",id:"input",level:2},{value:"Inputs.get_input_from_url",id:"inputsget_input_from_url",level:3},{value:"Inputs.get_input_from_file",id:"inputsget_input_from_file",level:3},{value:"Inputs.get_input_from_bytes",id:"inputsget_input_from_bytes",level:3},{value:"Inputs.get_image_inputs_from_folder",id:"inputsget_image_inputs_from_folder",level:3},{value:"Inputs.get_text_input",id:"inputsget_text_input",level:3},{value:"Inputs.get_multimodal_input",id:"inputsget_multimodal_input",level:3},{value:"Inputs.get_inputs_from_csv",id:"inputsget_inputs_from_csv",level:3},{value:"Inputs.get_text_inputs_from_folder",id:"inputsget_text_inputs_from_folder",level:3},{value:"Inputs.get_bbox_proto",id:"inputsget_bbox_proto",level:3},{value:"Inputs.get_mask_proto",id:"inputsget_mask_proto",level:3},{value:"Inputs.upload_from_url",id:"inputsupload_from_url",level:3},{value:"Inputs.upload_from_file",id:"inputsupload_from_file",level:3},{value:"Inputs.upload_from_bytes",id:"inputsupload_from_bytes",level:3},{value:"Inputs.upload_text",id:"inputsupload_text",level:3},{value:"Inputs.upload_inputs",id:"inputsupload_inputs",level:3},{value:"Inputs.patch_inputs",id:"inputspatch_inputs",level:3},{value:"Inputs.upload_annotations",id:"inputsupload_annotations",level:3},{value:"Inputs.patch_annotations",id:"inputspatch_annotations",level:3},{value:"Inputs.patch_concepts",id:"inputspatch_concepts",level:3},{value:"Inputs.delete_inputs",id:"inputsdelete_inputs",level:3},{value:"Inputs.delete_annotations",id:"inputsdelete_annotations",level:3},{value:"Inputs.download_inputs",id:"inputsdownload_inputs",level:3},{value:"Inputs.list_inputs",id:"inputslist_inputs",level:3},{value:"Inputs.list_annotations",id:"inputslist_annotations",level:3},{value:"Model",id:"model",level:2},{value:"Model.list_training_templates",id:"modellist_training_templates",level:3},{value:"Model.get_params",id:"modelget_params",level:3},{value:"Model.update_params",id:"modelupdate_params",level:3},{value:"Model.get_param_info",id:"modelget_param_info",level:3},{value:"Model.train",id:"modeltrain",level:3},{value:"Model.training_status",id:"modeltraining_status",level:3},{value:"Model.delete_version",id:"modeldelete_version",level:3},{value:"Model.create_version",id:"modelcreate_version",level:3},{value:"Model.list_versions",id:"modellist_versions",level:3},{value:"Model.predict",id:"modelpredict",level:3},{value:"Model.load_input_types",id:"modelload_input_types",level:3},{value:"Model.predict_by_filepath",id:"modelpredict_by_filepath",level:3},{value:"Model.predict_by_bytes",id:"modelpredict_by_bytes",level:3},{value:"Model.predict_by_url",id:"modelpredict_by_url",level:3},{value:"Model.generate",id:"modelgenerate",level:3},{value:"Model.generate_by_filepath",id:"modelgenerate_by_filepath",level:3},{value:"Model.generate_by_bytes",id:"modelgenerate_by_bytes",level:3},{value:"Model.generate_by_url",id:"modelgenerate_by_url",level:3},{value:"Model.stream",id:"modelstream",level:3},{value:"Model.stream_by_filepath",id:"modelstream_by_filepath",level:3},{value:"Model.evaluate",id:"modelevaluate",level:3},{value:"Model.get_eval_by_id",id:"modelget_eval_by_id",level:3},{value:"Model.get_latest_eval",id:"modelget_latest_eval",level:3},{value:"Model.list_evaluations",id:"modellist_evaluations",level:3},{value:"Model.get_eval_by_dataset",id:"modelget_eval_by_dataset",level:3},{value:"Model.get_raw_eval",id:"modelget_raw_eval",level:3},{value:"Model.create_version_by_file",id:"modelcreate_version_by_file",level:3},{value:"Model.create_version_by_url",id:"modelcreate_version_by_url",level:3},{value:"Model.export",id:"modelexport",level:3},{value:"Model.load_info",id:"modelload_info",level:3},{value:"Workflow",id:"workflow",level:2},{value:"Workflow.predict",id:"workflowpredict",level:3},{value:"Workflow.predict_by_filepath",id:"workflowpredict_by_filepath",level:3},{value:"Workflow.predict_by_bytes",id:"workflowpredict_by_bytes",level:3},{value:"Workflow.predict_by_url",id:"workflowpredict_by_url",level:3},{value:"Workflow.list_versions",id:"workflowlist_versions",level:3},{value:"Workflow.export",id:"workflowexport",level:3},{value:"Workflow.load_info",id:"workflowload_info",level:3},{value:"Module",id:"module",level:2},{value:"Module.list_versions",id:"modulelist_versions",level:3},{value:"Search",id:"search",level:2},{value:"Search.query",id:"searchquery",level:3},{value:"ComputeCluster",id:"computecluster",level:2},{value:"ComputeCluster.list_nodepools",id:"computeclusterlist_nodepools",level:3},{value:"ComputeCluster.create_nodepool",id:"computeclustercreate_nodepool",level:3},{value:"ComputeCluster.nodepool",id:"computeclusternodepool",level:3},{value:"ComputeCluster.delete_nodepools",id:"computeclusterdelete_nodepools",level:3},{value:"Nodepool",id:"nodepool",level:2},{value:"Nodepool.list_deployments",id:"nodepoollist_deployments",level:3},{value:"Nodepool.create_deployment",id:"nodepoolcreate_deployment",level:3},{value:"Nodepool.deployment",id:"nodepooldeployment",level:3},{value:"Nodepool.delete_deployments",id:"nodepooldelete_deployments",level:3},{value:"Nodepool.get_runner_selector",id:"nodepoolget_runner_selector",level:3},{value:"Deployment",id:"deployment",level:2},{value:"Deployment.get_runner_selector",id:"deploymentget_runner_selector",level:3}];function a(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"python-api-reference",children:"Python API Reference"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Clarifai Python SDK API Reference"})}),"\n",(0,l.jsx)("hr",{}),"\n",(0,l.jsx)(n.p,{children:"This is the API Reference documentation extracted from the source code."}),"\n",(0,l.jsx)(n.h2,{id:"user",children:"User"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'class User(user_id=None, base_url="https://api.clarifai.com", pat=None, token=None, root_certificates_path=None, **kwargs)\n'})}),"\n",(0,l.jsx)(n.p,{children:"User is a class that provides access to Clarifai API endpoints related to user information."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"user_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - The user ID for the user to interact with"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"base_url"})," (",(0,l.jsx)(n.em,{children:"str"}),') - Base API url. Default "',(0,l.jsx)(n.a,{href:"https://api.clarifai.com",children:"https://api.clarifai.com"}),'"']}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"pat"})," (",(0,l.jsx)(n.em,{children:"str"}),") - A personal access token for authentication. Can be set as env var CLARIFAI_PAT"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"token"})," (",(0,l.jsx)(n.em,{children:"str"}),") - A session token for authentication. Can be set as env var CLARIFAI_SESSION_TOKEN"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"root_certificates_path"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Path to the SSL root certificates file"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"**kwargs"})," - Additional keyword arguments"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"userapp",children:"User.app"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"User.app(app_id, **kwargs)\n"})}),"\n",(0,l.jsx)(n.p,{children:"Returns an App object for the specified app ID."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"app_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - The app ID for the app to interact with"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"**kwargs"})," - Additional keyword arguments"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"App: An App object for the specified app ID"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'from clarifai.client.user import User\napp = User("user_id").app("app_id")\n'})}),"\n",(0,l.jsx)(n.h3,{id:"usercreate_app",children:"User.create_app"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"User.create_app(app_id, base_workflow='Empty', **kwargs)\n"})}),"\n",(0,l.jsx)(n.p,{children:"Creates an app for the user."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"app_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - The app ID for the app to create"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"base_workflow"})," (",(0,l.jsx)(n.em,{children:"str"}),") - The base workflow to use (e.g. 'Universal', 'Empty', 'General')"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"**kwargs"})," - Additional keyword arguments"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"App: An App object for the specified app ID"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'from clarifai.client.user import User\nclient = User(user_id="user_id")\napp = client.create_app(app_id="app_id", base_workflow="Universal")\n'})}),"\n",(0,l.jsx)(n.h3,{id:"usercreate_runner",children:"User.create_runner"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"User.create_runner(runner_id, labels, description)\n"})}),"\n",(0,l.jsx)(n.p,{children:"Creates a runner."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"runner_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - The ID of runner to create"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"labels"})," (",(0,l.jsx)(n.em,{children:"List[str]"}),") - Labels to match runner"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"description"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Description of runner"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Dict containing the runner information"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'from clarifai.client.user import User\nclient = User(user_id="user_id")\nrunner = client.create_runner(\n    runner_id="runner_id",\n    labels=["label to link runner"],\n    description="laptop runner"\n)\n'})}),"\n",(0,l.jsx)(n.h3,{id:"userdelete_app",children:"User.delete_app"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"User.delete_app(app_id)\n"})}),"\n",(0,l.jsx)(n.p,{children:"Deletes an app by app id."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"app_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - The ID of the app to delete"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'from clarifai.client.user import User\nUser("user_id").delete_app("app_id")\n'})}),"\n",(0,l.jsx)(n.h3,{id:"userdelete_runner",children:"User.delete_runner"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"User.delete_runner(runner_id)\n"})}),"\n",(0,l.jsx)(n.p,{children:"Deletes a runner by runner id."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"runner_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - The ID of the runner to delete"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'from clarifai.client.user import User\nclient = User(user_id="user_id")\nclient.delete_runner(runner_id="runner_id")\n'})}),"\n",(0,l.jsx)(n.h3,{id:"userlist_apps",children:"User.list_apps"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"User.list_apps(filter_by={}, page_no=None, per_page=None)\n"})}),"\n",(0,l.jsx)(n.p,{children:"Lists all apps for the user."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"filter_by"})," (",(0,l.jsx)(n.em,{children:"Dict[str, Any]"}),") - Dictionary of filters"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"page_no"})," (",(0,l.jsx)(n.em,{children:"int"}),") - Page number to list"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"per_page"})," (",(0,l.jsx)(n.em,{children:"int"}),") - Items per page"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Yields:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"App objects"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'from clarifai.client.user import User\napps = list(User("user_id").list_apps())\n'})}),"\n",(0,l.jsx)(n.h3,{id:"userlist_runners",children:"User.list_runners"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"User.list_runners(filter_by={}, page_no=None, per_page=None) \n"})}),"\n",(0,l.jsx)(n.p,{children:"Lists all runners for the user."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"filter_by"})," (",(0,l.jsx)(n.em,{children:"Dict[str, Any]"}),") - Dictionary of filters"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"page_no"})," (",(0,l.jsx)(n.em,{children:"int"}),") - Page number to list"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"per_page"})," (",(0,l.jsx)(n.em,{children:"int"}),") - Items per page"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Yields:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Dict objects containing runner information"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'from clarifai.client.user import User\nclient = User(user_id="user_id")\nall_runners = list(client.list_runners())\n'})}),"\n",(0,l.jsx)(n.h3,{id:"userrunner",children:"User.runner"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"User.runner(runner_id) \n"})}),"\n",(0,l.jsx)(n.p,{children:"Returns a Runner object if it exists."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"runner_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - The runner ID to interact with"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Dict containing information about the existing runner"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'from clarifai.client.user import User\nclient = User(user_id="user_id")\nrunner_info = client.runner(runner_id="runner_id")\n'})}),"\n",(0,l.jsx)(n.h3,{id:"usercreate_compute_cluster",children:"User.create_compute_cluster"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"User.create_compute_cluster(config_filepath, compute_cluster_id=None) \n"})}),"\n",(0,l.jsx)(n.p,{children:"Creates a compute cluster."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"config_filepath"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Path to the compute cluster config file"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"compute_cluster_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Optional ID for the new compute cluster"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"ComputeCluster object for the created cluster"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'from clarifai.client.user import User\nclient = User(user_id="user_id")\ncluster = client.create_compute_cluster(config_filepath="config.yml")\n'})}),"\n",(0,l.jsx)(n.h3,{id:"usercompute_cluster",children:"User.compute_cluster"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"User.compute_cluster(compute_cluster_id) \n"})}),"\n",(0,l.jsx)(n.p,{children:"Returns a Compute Cluster object for the specified compute cluster ID."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"compute_cluster_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - The compute cluster ID to interact with"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"ComputeCluster: A Compute Cluster object for the specified ID"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'from clarifai.client.user import User\ncompute_cluster = User("user_id").compute_cluster("compute_cluster_id")\n'})}),"\n",(0,l.jsx)(n.h3,{id:"userlist_compute_clusters",children:"User.list_compute_clusters"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"User.list_compute_clusters(page_no=None, per_page=None) \n"})}),"\n",(0,l.jsx)(n.p,{children:"Lists compute clusters for the user."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"page_no"})," (",(0,l.jsx)(n.em,{children:"int"}),") - Page number to list"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"per_page"})," (",(0,l.jsx)(n.em,{children:"int"}),") - Items per page"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Yields:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Dict objects containing compute cluster information"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'from clarifai.client.user import User\nclient = User(user_id="user_id")\nclusters = list(client.list_compute_clusters())\n'})}),"\n",(0,l.jsx)(n.h3,{id:"userdelete_compute_clusters",children:"User.delete_compute_clusters"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"User.delete_compute_clusters(compute_cluster_ids) \n"})}),"\n",(0,l.jsx)(n.p,{children:"Deletes multiple compute clusters by their IDs."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"compute_cluster_ids"})," (",(0,l.jsx)(n.em,{children:"List[str]"}),") - List of compute cluster IDs to delete"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'from clarifai.client.user import User\nUser("user_id").delete_compute_clusters(["cluster_id1", "cluster_id2"])\n'})}),"\n",(0,l.jsx)(n.h3,{id:"userpatch_app",children:"User.patch_app"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"User.patch_app(app_id, action='overwrite', **kwargs) \n"})}),"\n",(0,l.jsx)(n.p,{children:"Updates an app by app id."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"app_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - The app ID to patch"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"action"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Action to perform ('overwrite'/'remove')"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"**kwargs"})," - Properties to update"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Updated App object"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'from clarifai.client.user import User\nclient = User(user_id="user_id")\napp = client.patch_app("app_id", description="New description")\n'})}),"\n",(0,l.jsx)(n.h2,{id:"app",children:"App"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'class App(url=None, app_id=None, user_id=None, base_url="https://api.clarifai.com", pat=None, token=None, root_certificates_path=None, **kwargs)\n'})}),"\n",(0,l.jsx)(n.p,{children:"App is a class that provides access to Clarifai API endpoints related to App information."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"url"})," (",(0,l.jsx)(n.em,{children:"str"}),") - The URL to initialize the app object"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"app_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - The App ID for the App to interact with"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"user_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - The user ID of the owner"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"base_url"})," (",(0,l.jsx)(n.em,{children:"str"}),') - Base API url. Default "',(0,l.jsx)(n.a,{href:"https://api.clarifai.com",children:"https://api.clarifai.com"}),'"']}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"pat"})," (",(0,l.jsx)(n.em,{children:"str"}),") - A personal access token for authentication. Can be set as env var CLARIFAI_PAT"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"token"})," (",(0,l.jsx)(n.em,{children:"str"}),") - A session token for authentication. Can be set as env var CLARIFAI_SESSION_TOKEN"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"root_certificates_path"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Path to the SSL root certificates file"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"**kwargs"})," - Additional keyword arguments:","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"name"})," (",(0,l.jsx)(n.em,{children:"str"}),") - The name of the app"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"description"})," (",(0,l.jsx)(n.em,{children:"str"}),") - The description of the app"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"appcreate_concepts",children:"App.create_concepts"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"App.create_concepts(concept_ids, concepts=[]) \n"})}),"\n",(0,l.jsx)(n.p,{children:"Add concepts to the app."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"concept_ids"})," (",(0,l.jsx)(n.em,{children:"List[str]"}),") - List of concept IDs to add"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"concepts"})," (",(0,l.jsx)(n.em,{children:"List[str]"}),") - Optional list of concept names"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'from clarifai.client.app import App\napp = App(app_id="app_id", user_id="user_id")\napp.add_concepts(concept_ids=["concept_id_1", "concept_id_2"])\n'})}),"\n",(0,l.jsx)(n.h3,{id:"appcreate_concept_relations",children:"App.create_concept_relations"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"App.create_concept_relations(subject_concept_id, object_concept_ids, predicates) \n"})}),"\n",(0,l.jsx)(n.p,{children:"Creates concept relations between concepts."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"subject_concept_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Subject concept ID"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"object_concept_ids"})," (",(0,l.jsx)(n.em,{children:"List[str]"}),") - Object concept IDs"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"predicates"})," (",(0,l.jsx)(n.em,{children:"List[str]"}),") - Relation predicates"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'from clarifai.client.app import App\napp = App(app_id="app_id", user_id="user_id")\napp.create_concept_relation(\n    subject_concept_id="subject_id",\n    object_concept_ids=["object_id_1", "object_id_2"],\n    predicates=["predicate_1", "predicate_2"]\n)\n'})}),"\n",(0,l.jsx)(n.h3,{id:"appcreate_dataset",children:"App.create_dataset"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"App.create_dataset(dataset_id, **kwargs) \n"})}),"\n",(0,l.jsx)(n.p,{children:"Creates a dataset in the app."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"dataset_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - The dataset ID to create"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"**kwargs"})," - Additional dataset arguments"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Dataset object for the created dataset"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'from clarifai.client.app import App\napp = App(app_id="app_id", user_id="user_id")\ndataset = app.create_dataset(dataset_id="dataset_id")\n'})}),"\n",(0,l.jsx)(n.h3,{id:"appcreate_model",children:"App.create_model"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"App.create_model(model_id, **kwargs) \n"})}),"\n",(0,l.jsx)(n.p,{children:"Creates a model in the app."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"model_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - The model ID to create"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"**kwargs"})," - Additional model arguments"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Model object for the created model"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'from clarifai.client.app import App\napp = App(app_id="app_id", user_id="user_id")\nmodel = app.create_model(model_id="model_id")\n'})}),"\n",(0,l.jsx)(n.h3,{id:"appcreate_module",children:"App.create_module"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"App.create_module(module_id, description, **kwargs) \n"})}),"\n",(0,l.jsx)(n.p,{children:"Creates a module in the app."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"module_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - The module ID to create"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"description"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Module description"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"**kwargs"})," - Additional module arguments"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Module object for the created module"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'from clarifai.client.app import App\napp = App(app_id="app_id", user_id="user_id")\nmodule = app.create_module(module_id="module_id")\n'})}),"\n",(0,l.jsx)(n.h3,{id:"appcreate_workflow",children:"App.create_workflow"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"App.create_workflow(config_filepath, generate_new_id=False, display=True) \n"})}),"\n",(0,l.jsx)(n.p,{children:"Creates a workflow in the app."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"config_filepath"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Path to workflow config YAML file"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"generate_new_id"})," (",(0,l.jsx)(n.em,{children:"bool"}),") - Generate new workflow ID if True"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"display"})," (",(0,l.jsx)(n.em,{children:"bool"}),") - Display workflow tree if True"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Workflow object for the created workflow"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'from clarifai.client.app import App\napp = App(app_id="app_id", user_id="user_id")\nworkflow = app.create_workflow(config_filepath="config.yml")\n'})}),"\n",(0,l.jsx)(n.h3,{id:"appdataset",children:"App.dataset"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"App.dataset(dataset_id, dataset_version_id=None, **kwargs) \n"})}),"\n",(0,l.jsx)(n.p,{children:"Returns a Dataset object."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"dataset_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Dataset ID to get"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"dataset_version_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Optional dataset version ID"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"**kwargs"})," - Additional arguments"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Dataset object for the specified ID"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'from clarifai.client.app import App\napp = App(app_id="app_id", user_id="user_id")\ndataset = app.dataset(dataset_id="dataset_id")\n'})}),"\n",(0,l.jsx)(n.h3,{id:"appdelete_concept_relations",children:"App.delete_concept_relations"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"App.delete_concept_relations(concept_id, concept_relation_ids=[]) \n"})}),"\n",(0,l.jsx)(n.p,{children:"Deletes concept relations for a concept."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"concept_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Concept ID to delete relations for"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"concept_relation_ids"})," (",(0,l.jsx)(n.em,{children:"List[str]"}),") - Optional specific relation IDs to delete"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'from clarifai.client.app import App\napp = App(app_id="app_id", user_id="user_id")\napp.delete_concept_relations(concept_id="concept_id")\n'})}),"\n",(0,l.jsx)(n.h3,{id:"appdelete_dataset",children:"App.delete_dataset"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"App.delete_dataset(dataset_id) \n"})}),"\n",(0,l.jsx)(n.p,{children:"Deletes a dataset by ID."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"dataset_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Dataset ID to delete"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'from clarifai.client.app import App\napp = App(app_id="app_id", user_id="user_id")\napp.delete_dataset(dataset_id="dataset_id")\n'})}),"\n",(0,l.jsx)(n.h3,{id:"appdelete_model",children:"App.delete_model"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"App.delete_model(model_id) \n"})}),"\n",(0,l.jsx)(n.p,{children:"Deletes a model by ID."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"model_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Model ID to delete"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'from clarifai.client.app import App\napp = App(app_id="app_id", user_id="user_id")\napp.delete_model(model_id="model_id")\n'})}),"\n",(0,l.jsx)(n.h3,{id:"appdelete_module",children:"App.delete_module"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"App.delete_module(module_id) \n"})}),"\n",(0,l.jsx)(n.p,{children:"Deletes a module by ID."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"module_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Module ID to delete"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'from clarifai.client.app import App\napp = App(app_id="app_id", user_id="user_id")\napp.delete_module(module_id="module_id")\n'})}),"\n",(0,l.jsx)(n.h3,{id:"appdelete_workflow",children:"App.delete_workflow"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"App.delete_workflow(workflow_id) \n"})}),"\n",(0,l.jsx)(n.p,{children:"Deletes a workflow by ID."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"workflow_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Workflow ID to delete"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'from clarifai.client.app import App\napp = App(app_id="app_id", user_id="user_id")\napp.delete_workflow(workflow_id="workflow_id")\n'})}),"\n",(0,l.jsx)(n.h3,{id:"appget_input_count",children:"App.get_input_count"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"App.get_input_count() \n"})}),"\n",(0,l.jsx)(n.p,{children:"Gets count of all inputs in the app."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Total number of processed inputs"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'from clarifai.client.app import App\napp = App(app_id="app_id", user_id="user_id")\ncount = app.get_input_count()\n'})}),"\n",(0,l.jsx)(n.h3,{id:"appinputs",children:"App.inputs"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"App.inputs()\n"})}),"\n",(0,l.jsx)(n.p,{children:"Returns an Input object."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Inputs object for managing app inputs"}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"applist_concepts",children:"App.list_concepts()"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"App.list_concepts(page_no=None, per_page=None)\n"})}),"\n",(0,l.jsx)(n.p,{children:"Lists all concepts in the app."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"page_no"})," (",(0,l.jsx)(n.em,{children:"int"}),") - Page number to list"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"per_page"})," (",(0,l.jsx)(n.em,{children:"int"}),") - Items per page"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Yields:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Concept objects"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'from clarifai.client.app import App\napp = App(app_id="app_id", user_id="user_id")\nconcepts = list(app.list_concepts())\n'})}),"\n",(0,l.jsx)(n.h3,{id:"applist_datasets",children:"App.list_datasets"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"App.list_datasets(page_no=None, per_page=None)\n"})}),"\n",(0,l.jsx)(n.p,{children:"Lists all datasets in the app."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"page_no"})," (",(0,l.jsx)(n.em,{children:"int"}),") - Page number to list"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"per_page"})," (",(0,l.jsx)(n.em,{children:"int"}),") - Items per page"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Yields:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Dataset objects"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'from clarifai.client.app import App\napp = App(app_id="app_id", user_id="user_id")\ndatasets = list(app.list_datasets())\n'})}),"\n",(0,l.jsx)(n.h3,{id:"applist_installed_module_versions",children:"App.list_installed_module_versions"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"App.list_installed_module_versions(filter_by={}, page_no=None, per_page=None)\n"})}),"\n",(0,l.jsx)(n.p,{children:"Lists installed module versions."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"filter_by"})," (",(0,l.jsx)(n.em,{children:"dict"}),") - Filters to apply"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"page_no"})," (",(0,l.jsx)(n.em,{children:"int"}),") - Page number to list"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"per_page"})," (",(0,l.jsx)(n.em,{children:"int"}),") - Items per page"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Yields:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Module objects"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'from clarifai.client.app import App\napp = App(app_id="app_id", user_id="user_id")\nversions = list(app.list_installed_module_versions())\n'})}),"\n",(0,l.jsx)(n.h3,{id:"applist_models",children:"App.list_models"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"App.list_models(filter_by={}, only_in_app=True, page_no=None, per_page=None)\n"})}),"\n",(0,l.jsx)(n.p,{children:"Lists models in the app."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"filter_by"})," (",(0,l.jsx)(n.em,{children:"dict"}),") - Filters to apply"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"only_in_app"})," (",(0,l.jsx)(n.em,{children:"bool"}),") - Only list app models if True"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"page_no"})," (",(0,l.jsx)(n.em,{children:"int"}),") - Page number to list"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"per_page"})," (",(0,l.jsx)(n.em,{children:"int"}),") - Items per page"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Yields:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Model objects"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'from clarifai.client.user import User\napp = User(user_id="user_id").app(app_id="app_id")\nmodels = list(app.list_models())\n'})}),"\n",(0,l.jsx)(n.h3,{id:"applist_modules",children:"App.list_modules"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"App.list_modules(filter_by={}, only_in_app=True, page_no=None, per_page=None)\n"})}),"\n",(0,l.jsx)(n.p,{children:"Lists modules in the app."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"filter_by"})," (",(0,l.jsx)(n.em,{children:"dict"}),") - Filters to apply"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"only_in_app"})," (",(0,l.jsx)(n.em,{children:"bool"}),") - Only list app modules if True"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"page_no"})," (",(0,l.jsx)(n.em,{children:"int"}),") - Page number to list"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"per_page"})," (",(0,l.jsx)(n.em,{children:"int"}),") - Items per page"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Yields:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Module objects"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'from clarifai.client.app import App\napp = App(app_id="app_id", user_id="user_id")\nmodules = list(app.list_modules())\n'})}),"\n",(0,l.jsx)(n.h3,{id:"applist_trainable_model_types",children:"App.list_trainable_model_types"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"App.list_trainable_model_types()\n"})}),"\n",(0,l.jsx)(n.p,{children:"Lists trainable model types."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"List of trainable model type names"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"from clarifai.client.app import App\ntypes = app.list_trainable_model_types()\n"})}),"\n",(0,l.jsx)(n.h3,{id:"applist_workflows",children:"App.list_workflows"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"App.list_workflows(filter_by={}, only_in_app=True, page_no=None, per_page=None)\n"})}),"\n",(0,l.jsx)(n.p,{children:"Lists workflows in the app."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"filter_by"})," (",(0,l.jsx)(n.em,{children:"dict"}),") - Filters to apply"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"only_in_app"})," (",(0,l.jsx)(n.em,{children:"bool"}),") - Only list app workflows if True"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"page_no"})," (",(0,l.jsx)(n.em,{children:"int"}),") - Page number to list"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"per_page"})," (",(0,l.jsx)(n.em,{children:"int"}),") - Items per page"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Yields:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Workflow objects"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'from clarifai.client.app import App\napp = App(app_id="app_id", user_id="user_id")\nworkflows = list(app.list_workflows())\n'})}),"\n",(0,l.jsx)(n.h3,{id:"appmodel",children:"App.model"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"App.model(model_id, model_version={'id': \"\"}, **kwargs)\n"})}),"\n",(0,l.jsx)(n.p,{children:"Returns a Model object."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"model_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Model ID to get"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"model_version"})," (",(0,l.jsx)(n.em,{children:"Dict"}),") - Optional model version info"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"**kwargs"})," - Additional arguments"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Model object for specified ID"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'from clarifai.client.app import App\napp = App(app_id="app_id", user_id="user_id")\nmodel = app.model(model_id="model_id")\n'})}),"\n",(0,l.jsx)(n.h3,{id:"appmodule",children:"App.module"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"App.module(module_id, **kwargs)\n"})}),"\n",(0,l.jsx)(n.p,{children:"Returns a Module object."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"module_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Module ID to get"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"**kwargs"})," - Additional arguments"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Module object for specified ID"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'from clarifai.client.app import App\napp = App(app_id="app_id", user_id="user_id")\nmodule = app.module(module_id="module_id")\n'})}),"\n",(0,l.jsx)(n.h3,{id:"apppatch_dataset",children:"App.patch_dataset"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"App.patch_dataset(dataset_id, action='merge', **kwargs)\n"})}),"\n",(0,l.jsx)(n.p,{children:"Updates a dataset."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"dataset_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Dataset ID to update"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"action"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Update action ('merge'/'overwrite'/'remove')"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"**kwargs"})," - Properties to update"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Updated Dataset object"}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"apppatch_model",children:"App.patch_model"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"App.patch_model(model_id, action='merge', **kwargs)\n"})}),"\n",(0,l.jsx)(n.p,{children:"Updates a model."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"model_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Model ID to update"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"action"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Update action ('merge'/'overwrite'/'remove')"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"**kwargs"})," - Properties to update"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"appsearch_concept_relations",children:"App.search_concept_relations"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"App.search_concept_relations(concept_id=None, predicate=None, page_no=None, per_page=None, show_tree=False)\n"})}),"\n",(0,l.jsx)(n.p,{children:"Lists all concept relations of the app."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"concept_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - The concept ID to filter the concept relations"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"predicate"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Type of relation to filter ('hypernym', 'hyponym', 'synonym')"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"page_no"})," (",(0,l.jsx)(n.em,{children:"int"}),") - The page number to list"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"per_page"})," (",(0,l.jsx)(n.em,{children:"int"}),") - The number of items per page"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"show_tree"})," (",(0,l.jsx)(n.em,{children:"bool"}),") - If True, prints rich tree representation of concept relations"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Yields:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"ConceptRelation objects"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'from clarifai.client.app import App\napp = App(app_id="app_id", user_id="user_id")\nrelations = list(app.search_concept_relations())\n'})}),"\n",(0,l.jsx)(n.h3,{id:"appworkflow",children:"App.workflow"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"App.workflow(workflow_id, **kwargs)\n"})}),"\n",(0,l.jsx)(n.p,{children:"Returns a workflow object for the existing workflow ID."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"workflow_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - The workflow ID to interact with"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"**kwargs"})," - Additional keyword arguments"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Workflow object for the specified ID"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'from clarifai.client.app import App\napp = App(app_id="app_id", user_id="user_id")\nworkflow = app.workflow(workflow_id="workflow_id")\n'})}),"\n",(0,l.jsx)(n.h3,{id:"apppatch_workflow",children:"App.patch_workflow"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"App.patch_workflow(workflow_id, action='merge', config_filepath=None, **kwargs)\n"})}),"\n",(0,l.jsx)(n.p,{children:"Updates a workflow by workflow id."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"workflow_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - The Workflow ID to patch"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"action"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Action to perform ('merge'/'overwrite'/'remove')"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"config_filepath"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Optional path to workflow config YAML file"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"**kwargs"})," - Additional properties to update"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Updated Workflow object"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'from clarifai.client.app import App\napp = App(app_id="app_id", user_id="user_id")\nworkflow = app.patch_workflow(workflow_id="workflow_id", description="New description")\n'})}),"\n",(0,l.jsx)(n.h2,{id:"dataset",children:"Dataset"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'class Dataset(url=None, dataset_id=None, dataset_version_id=None, base_url="https://api.clarifai.com", pat=None, token=None, root_certificates_path=None, **kwargs)\n'})}),"\n",(0,l.jsx)(n.p,{children:"Dataset is a class that provides access to Clarifai API endpoints related to Dataset information."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"url"})," (",(0,l.jsx)(n.em,{children:"str"}),") - The URL to initialize the dataset object"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"dataset_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - The Dataset ID within the App to interact with"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"dataset_version_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Dataset Version ID to interact with"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"base_url"})," (",(0,l.jsx)(n.em,{children:"str"}),') - Base API url. Default "',(0,l.jsx)(n.a,{href:"https://api.clarifai.com",children:"https://api.clarifai.com"}),'"']}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"pat"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Personal access token for authentication. Can be set as env var CLARIFAI_PAT"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"token"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Session token for authentication. Can be set as env var CLARIFAI_SESSION_TOKEN"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"root_certificates_path"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Path to SSL root certificates file"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"**kwargs"})," - Additional keyword arguments"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"datasetcreate_version",children:"Dataset.create_version"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"Dataset.create_version(**kwargs)\n"})}),"\n",(0,l.jsx)(n.p,{children:"Creates a dataset version."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"**kwargs"})," - Additional arguments:","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"description"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Description of the version"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"metadata"})," (",(0,l.jsx)(n.em,{children:"dict"}),") - Version metadata"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Dataset object with new version"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"from clarifai.client.dataset import Dataset\ndataset = Dataset(dataset_id='dataset_id', user_id='user_id', app_id='app_id')\ndataset_version = dataset.create_version(description='dataset_version_description')\n"})}),"\n",(0,l.jsx)(n.h3,{id:"datasetdelete_version",children:"Dataset.delete_version"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"Dataset.delete_version(version_id)\n"})}),"\n",(0,l.jsx)(n.p,{children:"Deletes a dataset version."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"version_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Version ID to delete"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"from clarifai.client.dataset import Dataset\ndataset = Dataset(dataset_id='dataset_id', user_id='user_id', app_id='app_id')\ndataset.delete_version(version_id='version_id')\n"})}),"\n",(0,l.jsx)(n.h3,{id:"datasetlist_versions",children:"Dataset.list_versions"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"Dataset.list_versions(page_no=None, per_page=None)\n"})}),"\n",(0,l.jsx)(n.p,{children:"Lists all versions for the dataset."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"page_no"})," (",(0,l.jsx)(n.em,{children:"int"}),") - Page number to list"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"per_page"})," (",(0,l.jsx)(n.em,{children:"int"}),") - Items per page"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Yields:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Dataset objects for each version"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"from clarifai.client.dataset import Dataset\ndataset = Dataset(dataset_id='dataset_id', user_id='user_id', app_id='app_id')\nall_dataset_versions = list(dataset.list_versions())\n"})}),"\n",(0,l.jsx)(n.h3,{id:"datasetlist_inputs",children:"Dataset.list_inputs"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"Dataset.list_inputs(page_no=None, per_page=None, input_type=None)\n"})}),"\n",(0,l.jsx)(n.p,{children:"Lists all inputs in the dataset."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"page_no"})," (",(0,l.jsx)(n.em,{children:"int"}),") - Page number to list"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"per_page"})," (",(0,l.jsx)(n.em,{children:"int"}),") - Items per page"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"input_type"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Input type filter ('image', 'video', 'audio', 'text')"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Yields:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Input objects"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"from clarifai.client.dataset import Dataset\ndataset = Dataset(dataset_id='dataset_id', user_id='user_id', app_id='app_id')\nall_dataset_inputs = list(dataset.list_inputs())\n"})}),"\n",(0,l.jsx)(n.h3,{id:"datasetupload_dataset",children:"Dataset.upload_dataset"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"Dataset.upload_dataset(dataloader, batch_size=32, get_upload_status=False, log_warnings=False, **kwargs)\n"})}),"\n",(0,l.jsx)(n.p,{children:"Uploads a dataset to the app."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"dataloader"})," (",(0,l.jsx)(n.em,{children:"ClarifaiDataLoader"}),") - Data loader object"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"batch_size"})," (",(0,l.jsx)(n.em,{children:"int"}),") - Batch size for concurrent uploads (max: 128)"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"get_upload_status"})," (",(0,l.jsx)(n.em,{children:"bool"}),") - Get upload status if True"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"log_warnings"})," (",(0,l.jsx)(n.em,{children:"bool"}),") - Save warnings to log file if True"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"**kwargs"})," - Additional arguments"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"from clarifai.client.dataset import Dataset\ndataset = Dataset(dataset_id='dataset_id')\ndataset.upload_dataset(dataloader=my_dataloader)\n"})}),"\n",(0,l.jsx)(n.h3,{id:"datasetretry_upload_from_logs",children:"Dataset.retry_upload_from_logs"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"Dataset.retry_upload_from_logs(log_file_path, dataloader, retry_duplicates=False, log_warnings=False, **kwargs)\n"})}),"\n",(0,l.jsx)(n.p,{children:"Retries failed uploads from logs."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"log_file_path"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Path to log file"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"dataloader"})," (",(0,l.jsx)(n.em,{children:"Type[ClarifaiDataLoader]"}),") - Data loader object"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"retry_duplicates"})," (",(0,l.jsx)(n.em,{children:"bool"}),") - Retry duplicate inputs if True"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"log_warnings"})," (",(0,l.jsx)(n.em,{children:"bool"}),") - Save warnings to log file if True"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"**kwargs"})," - Additional arguments"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"datasetupload_from_csv",children:"Dataset.upload_from_csv"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"Dataset.upload_from_csv(csv_path, input_type='text', csv_type=None, labels=True, batch_size=128)\n"})}),"\n",(0,l.jsx)(n.p,{children:"Uploads dataset from CSV file."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"csv_path"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Path to CSV file"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"input_type"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Input type ('text', 'image', 'video', 'audio')"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"csv_type"})," (",(0,l.jsx)(n.em,{children:"str"}),") - CSV type ('raw', 'url', 'file_path')"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"labels"})," (",(0,l.jsx)(n.em,{children:"bool"}),") - CSV has labels column if True"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"batch_size"})," (",(0,l.jsx)(n.em,{children:"int"}),") - Upload batch size"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"from clarifai.client.dataset import Dataset\ndataset = Dataset(user_id='user_id', app_id='app_id', dataset_id='dataset_id')\ndataset.upload_from_csv(csv_path='data.csv', input_type='text', csv_type='raw')\n"})}),"\n",(0,l.jsx)(n.h3,{id:"datasetupload_from_folder",children:"Dataset.upload_from_folder"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"Dataset.upload_from_folder(folder_path, input_type, labels=False, batch_size=128)\n"})}),"\n",(0,l.jsx)(n.p,{children:"Uploads dataset from a folder."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"folder_path"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Path to folder"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"input_type"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Input type ('text', 'image')"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"labels"})," (",(0,l.jsx)(n.em,{children:"bool"}),") - Use folder names as labels if True"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"batch_size"})," (",(0,l.jsx)(n.em,{children:"int"}),") - Upload batch size"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"from clarifai.client.dataset import Dataset\ndataset = Dataset(user_id='user_id', app_id='app_id', dataset_id='dataset_id')\ndataset.upload_from_folder(folder_path='data', input_type='image', labels=True)\n"})}),"\n",(0,l.jsx)(n.h3,{id:"datasetget_upload_status",children:"Dataset.get_upload_status"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"Dataset.get_upload_status(dataloader=None, delete_version=False, timeout=600, pre_upload_stats=None, pre_upload=False)\n"})}),"\n",(0,l.jsx)(n.p,{children:"Gets dataset upload status."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"dataloader"})," (",(0,l.jsx)(n.em,{children:"Type[ClarifaiDataLoader]"}),") - Data loader object"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"delete_version"})," (",(0,l.jsx)(n.em,{children:"bool"}),") - Delete version after checking status"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"timeout"})," (",(0,l.jsx)(n.em,{children:"int"}),") - Status check timeout in seconds"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"pre_upload_stats"})," (",(0,l.jsx)(n.em,{children:"Tuple[Dict[str, int], Dict[str, int]]"}),") - Pre-upload statistics"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"pre_upload"})," (",(0,l.jsx)(n.em,{children:"bool"}),") - Get pre-upload stats if True"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"from clarifai.client.dataset import Dataset\ndataset = Dataset(dataset_id='dataset_id', user_id='user_id', app_id='app_id')\ndataset.get_upload_status(dataloader=my_dataloader)\n"})}),"\n",(0,l.jsx)(n.h3,{id:"datasetmerge_dataset",children:"Dataset.merge_dataset"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"Dataset.merge_dataset(merge_dataset_id)\n"})}),"\n",(0,l.jsx)(n.p,{children:"Merges another dataset into this dataset."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"merge_dataset_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - ID of dataset to merge in"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"from clarifai.client.dataset import Dataset\ndataset = Dataset(dataset_id='dataset_id', user_id='user_id', app_id='app_id')\ndataset.merge_dataset(merge_dataset_id='other_dataset_id')\n"})}),"\n",(0,l.jsx)(n.h3,{id:"datasetarchive_zip",children:"Dataset.archive_zip"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"Dataset.archive_zip(wait=True)\n"})}),"\n",(0,l.jsx)(n.p,{children:"Gets dataset archive as ZIP."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"wait"})," (",(0,l.jsx)(n.em,{children:"bool"}),") - Wait for export completion if True"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"URL to download archive"}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"datasetexport",children:"Dataset.export"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"Dataset.export(save_path, archive_url=None, local_archive_path=None, split='all', num_workers=4)\n"})}),"\n",(0,l.jsx)(n.p,{children:"Exports dataset to local archive."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"save_path"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Path to save archive"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"archive_url"})," (",(0,l.jsx)(n.em,{children:"str"}),") - URL to protobuf archive"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"local_archive_path"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Path to local archive"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"split"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Export split format"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"num_workers"})," (",(0,l.jsx)(n.em,{children:"int"}),") - Number of download workers"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"from clarifai.client.dataset import Dataset\nDataset().export(save_path='output.zip')\n"})}),"\n",(0,l.jsx)(n.h2,{id:"input",children:"Input"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'class Inputs(user_id=None, app_id=None, logger_level="INFO", base_url="https://api.clarifai.com", pat=None, token=None, root_certificates_path=None, **kwargs)\n'})}),"\n",(0,l.jsx)(n.p,{children:"Inputs is a class that provides access to Clarifai API endpoints related to Input information."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"user_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - User ID for authentication"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"app_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - App ID for the application to interact with"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"logger_level"})," (",(0,l.jsx)(n.em,{children:"str"}),') - Logging level. Default "INFO"']}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"base_url"})," (",(0,l.jsx)(n.em,{children:"str"}),') - Base API url. Default "',(0,l.jsx)(n.a,{href:"https://api.clarifai.com",children:"https://api.clarifai.com"}),'"']}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"pat"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Personal access token for authentication. Can be set as env var CLARIFAI_PAT"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"token"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Session token for authentication. Can be set as env var CLARIFAI_SESSION_TOKEN"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"root_certificates_path"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Path to SSL root certificates file"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"**kwargs"})," - Additional keyword arguments"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"inputsget_input_from_url",children:"Inputs.get_input_from_url"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"Inputs.get_input_from_url(input_id, image_url=None, video_url=None, audio_url=None, text_url=None, dataset_id=None, **kwargs)\n"})}),"\n",(0,l.jsx)(n.p,{children:"Creates input proto from URL."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"input_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Input ID"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"image_url"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Image URL"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"video_url"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Video URL"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"audio_url"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Audio URL"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"text_url"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Text URL"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"dataset_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Dataset ID"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"**kwargs"})," - Additional arguments"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Input proto object"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"from clarifai.client.input import Inputs\ninput_proto = Inputs.get_input_from_url(\n    input_id='demo',\n    image_url='https://samples.clarifai.com/metro-north.jpg'\n)\n"})}),"\n",(0,l.jsx)(n.h3,{id:"inputsget_input_from_file",children:"Inputs.get_input_from_file"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"Inputs.get_input_from_file(input_id, image_file=None, video_file=None, audio_file=None, text_file=None, dataset_id=None, **kwargs) \n"})}),"\n",(0,l.jsx)(n.p,{children:"Creates input proto from files."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"input_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Input ID"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"image_file"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Path to image file"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"video_file"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Path to video file"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"audio_file"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Path to audio file"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"text_file"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Path to text file"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"dataset_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Dataset ID"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"**kwargs"})," - Additional arguments"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Input proto object"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"from clarifai.client.input import Inputs\ninput_proto = Inputs.get_input_from_file(\n    input_id='demo',\n    video_file='path/to/video.mp4'\n)\n"})}),"\n",(0,l.jsx)(n.h3,{id:"inputsget_input_from_bytes",children:"Inputs.get_input_from_bytes"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"Inputs.get_input_from_bytes(input_id, image_bytes=None, video_bytes=None, audio_bytes=None, text_bytes=None, dataset_id=None, **kwargs) \n"})}),"\n",(0,l.jsx)(n.p,{children:"Creates input proto from bytes."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"input_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Input ID"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"image_bytes"})," (",(0,l.jsx)(n.em,{children:"bytes"}),") - Image bytes"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"video_bytes"})," (",(0,l.jsx)(n.em,{children:"bytes"}),") - Video bytes"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"audio_bytes"})," (",(0,l.jsx)(n.em,{children:"bytes"}),") - Audio bytes"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"text_bytes"})," (",(0,l.jsx)(n.em,{children:"bytes"}),") - Text bytes"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"dataset_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Dataset ID"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"**kwargs"})," - Additional arguments"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Input proto object"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"from clarifai.client.input import Inputs\nimage = open('demo.jpg', 'rb').read()\nvideo = open('demo.mp4', 'rb').read()\ninput_proto = Inputs.get_input_from_bytes(\n    input_id='demo',\n    image_bytes=image,\n    video_bytes=video\n)\n"})}),"\n",(0,l.jsx)(n.h3,{id:"inputsget_image_inputs_from_folder",children:"Inputs.get_image_inputs_from_folder"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"Inputs.get_image_inputs_from_folder(folder_path, dataset_id=None, labels=False)\n"})}),"\n",(0,l.jsx)(n.p,{children:"Creates input protos from a folder of images."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"folder_path"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Path to folder containing images"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"dataset_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Dataset ID"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"labels"})," (",(0,l.jsx)(n.em,{children:"bool"}),") - Use folder name as label if True"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"List of input proto objects"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"from clarifai.client.input import Inputs\ninput_protos = Inputs.get_image_inputs_from_folder(folder_path='images_folder')\n"})}),"\n",(0,l.jsx)(n.h3,{id:"inputsget_text_input",children:"Inputs.get_text_input"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"Inputs.get_text_input(input_id, raw_text, dataset_id=None, **kwargs)\n"})}),"\n",(0,l.jsx)(n.p,{children:"Creates text input proto."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"input_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Input ID"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"raw_text"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Raw text content"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"dataset_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Dataset ID"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"**kwargs"})," - Additional arguments"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Text input proto object"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"from clarifai.client.input import Inputs\ninput_proto = Inputs.get_text_input(\n    input_id='demo',\n    raw_text='This is a test'\n)\n"})}),"\n",(0,l.jsx)(n.h3,{id:"inputsget_multimodal_input",children:"Inputs.get_multimodal_input"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"Inputs.get_multimodal_input(input_id, raw_text=None, text_bytes=None, image_url=None, image_bytes=None, dataset_id=None, **kwargs)\n"})}),"\n",(0,l.jsx)(n.p,{children:"Creates multimodal input proto with text and image."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"input_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Input ID"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"raw_text"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Raw text content"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"text_bytes"})," (",(0,l.jsx)(n.em,{children:"bytes"}),") - Text bytes"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"image_url"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Image URL"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"image_bytes"})," (",(0,l.jsx)(n.em,{children:"bytes"}),") - Image bytes"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"dataset_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Dataset ID"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"**kwargs"})," - Additional arguments"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Multimodal input proto object"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"from clarifai.client.input import Inputs\ninput_proto = Inputs.get_multimodal_input(\n    input_id='demo',\n    raw_text='What time of day is it?',\n    image_url='https://samples.clarifai.com/metro-north.jpg'\n)\n"})}),"\n",(0,l.jsx)(n.h3,{id:"inputsget_inputs_from_csv",children:"Inputs.get_inputs_from_csv"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"Inputs.get_inputs_from_csv(csv_path, input_type='text', csv_type='raw', dataset_id=None, labels=True)\n"})}),"\n",(0,l.jsx)(n.p,{children:"Creates input protos from CSV file."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"csv_path"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Path to CSV file"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"input_type"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Input type ('text', 'image', 'video', 'audio')"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"csv_type"})," (",(0,l.jsx)(n.em,{children:"str"}),") - CSV type ('raw', 'url', 'file_path')"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"dataset_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Dataset ID"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"labels"})," (",(0,l.jsx)(n.em,{children:"bool"}),") - CSV has labels column if True"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"List of input proto objects"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"from clarifai.client.input import Inputs\ninput_protos = Inputs.get_inputs_from_csv(\n    csv_path='data.csv',\n    input_type='text',\n    csv_type='raw'\n)\n"})}),"\n",(0,l.jsx)(n.h3,{id:"inputsget_text_inputs_from_folder",children:"Inputs.get_text_inputs_from_folder"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"Inputs.get_text_inputs_from_folder(folder_path, dataset_id=None, labels=False)\n"})}),"\n",(0,l.jsx)(n.p,{children:"Creates input protos from folder of text files."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"folder_path"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Path to folder containing text files"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"dataset_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Dataset ID"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"labels"})," (",(0,l.jsx)(n.em,{children:"bool"}),") - Use folder name as label if True"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"List of text input proto objects"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"from clarifai.client.input import Inputs\ninput_protos = Inputs.get_text_inputs_from_folder(folder_path='text_folder')\n"})}),"\n",(0,l.jsx)(n.h3,{id:"inputsget_bbox_proto",children:"Inputs.get_bbox_proto"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"Inputs.get_bbox_proto(input_id, label, bbox, label_id=None, annot_id=None)\n"})}),"\n",(0,l.jsx)(n.p,{children:"Creates annotation proto for bounding box."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"input_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Input ID"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"label"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Annotation label name"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"bbox"})," (",(0,l.jsx)(n.em,{children:"List"}),") - Bounding box coordinates [xmin, ymin, xmax, ymax]"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"label_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Label ID"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"annot_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Annotation ID"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Annotation proto object"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"from clarifai.client.input import Inputs\nInputs.get_bbox_proto(\n    input_id='demo',\n    label='dog',\n    bbox=[10, 20, 100, 200]\n)\n"})}),"\n",(0,l.jsx)(n.h3,{id:"inputsget_mask_proto",children:"Inputs.get_mask_proto"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"Inputs.get_mask_proto(input_id, label, polygons, label_id=None, annot_id=None)\n"})}),"\n",(0,l.jsx)(n.p,{children:"Creates annotation proto for polygon mask."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"input_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Input ID"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"label"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Annotation label name"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"polygons"})," (",(0,l.jsx)(n.em,{children:"List[List[float]]"}),") - List of polygon point coordinates"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"label_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Label ID"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"annot_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Annotation ID"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Annotation proto object"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"from clarifai.client.input import Inputs\nInputs.get_mask_proto(\n    input_id='demo',\n    label='dog',\n    polygons=[[[x1,y1], [x2,y2], [x3,y3]]]\n)\n"})}),"\n",(0,l.jsx)(n.h3,{id:"inputsupload_from_url",children:"Inputs.upload_from_url"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"Inputs.upload_from_url(input_id, image_url=None, video_url=None, audio_url=None, text_url=None, dataset_id=None, **kwargs)\n"})}),"\n",(0,l.jsx)(n.p,{children:"Uploads input from URL."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"input_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Input ID"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"image_url"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Image URL"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"video_url"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Video URL"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"audio_url"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Audio URL"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"text_url"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Text URL"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"dataset_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Dataset ID"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"**kwargs"})," - Additional arguments"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Upload job ID"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"from clarifai.client.input import Inputs\ninput_obj = Inputs(user_id='user_id', app_id='demo_app')\ninput_obj.upload_from_url(\n    input_id='demo',\n    image_url='https://samples.clarifai.com/metro-north.jpg'\n)\n"})}),"\n",(0,l.jsx)(n.h3,{id:"inputsupload_from_file",children:"Inputs.upload_from_file"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"Inputs.upload_from_file(input_id, image_file=None, video_file=None, audio_file=None, text_file=None, dataset_id=None, **kwargs)\n"})}),"\n",(0,l.jsx)(n.p,{children:"Uploads input from file."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"input_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Input ID"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"image_file"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Path to image file"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"video_file"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Path to video file"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"audio_file"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Path to audio file"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"text_file"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Path to text file"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"dataset_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Dataset ID"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"**kwargs"})," - Additional arguments"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Upload job ID"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"from clarifai.client.input import Inputs\ninput_obj = Inputs(user_id='user_id', app_id='demo_app')\ninput_obj.upload_from_file(input_id='demo', audio_file='demo.mp3')\n"})}),"\n",(0,l.jsx)(n.h3,{id:"inputsupload_from_bytes",children:"Inputs.upload_from_bytes"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"Inputs.upload_from_bytes(input_id, image_bytes=None, video_bytes=None, audio_bytes=None, text_bytes=None, dataset_id=None, **kwargs)\n"})}),"\n",(0,l.jsx)(n.p,{children:"Uploads input from bytes."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"input_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Input ID"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"image_bytes"})," (",(0,l.jsx)(n.em,{children:"bytes"}),") - Image bytes"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"video_bytes"})," (",(0,l.jsx)(n.em,{children:"bytes"}),") - Video bytes"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"audio_bytes"})," (",(0,l.jsx)(n.em,{children:"bytes"}),") - Audio bytes"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"text_bytes"})," (",(0,l.jsx)(n.em,{children:"bytes"}),") - Text bytes"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"dataset_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Dataset ID"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"**kwargs"})," - Additional arguments"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Upload job ID"}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"inputsupload_text",children:"Inputs.upload_text"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"Inputs.upload_text(input_id, raw_text, dataset_id=None, **kwargs)\n"})}),"\n",(0,l.jsx)(n.p,{children:"Uploads text input from raw text."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"input_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Input ID"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"raw_text"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Raw text content"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"dataset_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Dataset ID"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"**kwargs"})," - Additional arguments"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Input job ID"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"from clarifai.client.input import Inputs\ninput_obj = Inputs(user_id='user_id', app_id='demo_app')\ninput_obj.upload_text(input_id='demo', raw_text='This is a test')\n"})}),"\n",(0,l.jsx)(n.h3,{id:"inputsupload_inputs",children:"Inputs.upload_inputs"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"Inputs.upload_inputs(inputs, show_log=True)\n"})}),"\n",(0,l.jsx)(n.p,{children:"Uploads multiple input objects to the app."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"inputs"})," (",(0,l.jsx)(n.em,{children:"List[Input]"}),") - List of input objects to upload"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"show_log"})," (",(0,l.jsx)(n.em,{children:"bool"}),") - Show upload status log if True"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Tuple of (input_job_id, response)"}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"inputspatch_inputs",children:"Inputs.patch_inputs"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"Inputs.patch_inputs(inputs, action='merge')\n"})}),"\n",(0,l.jsx)(n.p,{children:"Patches existing input objects."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"inputs"})," (",(0,l.jsx)(n.em,{children:"List[Input]"}),") - List of input objects to patch"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"action"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Action to perform: 'merge', 'overwrite', or 'remove'"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"inputsupload_annotations",children:"Inputs.upload_annotations"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"Inputs.upload_annotations(batch_annot, show_log=True)\n"})}),"\n",(0,l.jsx)(n.p,{children:"Uploads image annotations."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"batch_annot"})," (",(0,l.jsx)(n.em,{children:"List[resources_pb2.Annotation]"}),") - List of annotation protos"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"show_log"})," (",(0,l.jsx)(n.em,{children:"bool"}),") - Show upload log if True"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"List of failed annotations for retry"}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"inputspatch_annotations",children:"Inputs.patch_annotations"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"Inputs.patch_annotations(batch_annot, action='merge')\n"})}),"\n",(0,l.jsx)(n.p,{children:"Patches existing annotations."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"batch_annot"})," (",(0,l.jsx)(n.em,{children:"List[resources_pb2.Annotation]"}),") - List of annotation protos"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"action"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Action to perform: 'merge', 'overwrite', or 'remove'"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"inputspatch_concepts",children:"Inputs.patch_concepts"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"Inputs.patch_concepts(concept_ids, labels=[], values=[], action='overwrite')\n"})}),"\n",(0,l.jsx)(n.p,{children:"Patches concepts in the app."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"concept_ids"})," (",(0,l.jsx)(n.em,{children:"List[str]"}),") - List of concept IDs"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"labels"})," (",(0,l.jsx)(n.em,{children:"List[str]"}),") - List of concept labels"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"values"})," (",(0,l.jsx)(n.em,{children:"List[float]"}),") - List of concept values"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"action"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Action to perform (only 'overwrite' supported)"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"inputsdelete_inputs",children:"Inputs.delete_inputs"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"Inputs.delete_inputs(inputs)\n"})}),"\n",(0,l.jsx)(n.p,{children:"Deletes input objects from the app."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"inputs"})," (",(0,l.jsx)(n.em,{children:"List[Input]"}),") - List of input objects to delete"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'from clarifai.client.user import User\ninput_obj = User(user_id="user_id").app(app_id="app_id").inputs()\ninput_obj.delete_inputs(list(input_obj.list_inputs()))\n'})}),"\n",(0,l.jsx)(n.h3,{id:"inputsdelete_annotations",children:"Inputs.delete_annotations"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"Inputs.delete_annotations(input_ids, annotation_ids=[])\n"})}),"\n",(0,l.jsx)(n.p,{children:"Deletes annotations from inputs."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"input_ids"})," (",(0,l.jsx)(n.em,{children:"List[str]"}),") - List of input IDs"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"annotation_ids"})," (",(0,l.jsx)(n.em,{children:"List[str]"}),") - Optional list of annotation IDs"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"from clarifai.client.user import User\ninput_obj = User(user_id=\"user_id\").app(app_id=\"app_id\").inputs()\ninput_obj.delete_annotations(input_ids=['input_id_1', 'input_id_2'])\n"})}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Note:"})," If annotation_ids are provided, they must match the number and order of input_ids."]}),"\n",(0,l.jsx)(n.h3,{id:"inputsdownload_inputs",children:"Inputs.download_inputs"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"Inputs.download_inputs(inputs)\n"})}),"\n",(0,l.jsx)(n.p,{children:"Downloads input objects from the app."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"inputs"})," (",(0,l.jsx)(n.em,{children:"List[Input]"}),") - List of input objects to download"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"List of downloaded input bytes"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'from clarifai.client.user import User\ninput_obj = User(user_id="user_id").app(app_id="app_id").inputs()\ninput_obj.download_inputs(list(input_obj.list_inputs()))\n'})}),"\n",(0,l.jsx)(n.h3,{id:"inputslist_inputs",children:"Inputs.list_inputs"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"Inputs.list_inputs(dataset_id=None, page_no=None, per_page=None, input_type=None)\n"})}),"\n",(0,l.jsx)(n.p,{children:"Lists inputs in the app."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"dataset_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Filter by dataset ID"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"page_no"})," (",(0,l.jsx)(n.em,{children:"int"}),") - Page number"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"per_page"})," (",(0,l.jsx)(n.em,{children:"int"}),") - Items per page"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"input_type"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Filter by type: 'image', 'video', 'audio', 'text'"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Yields:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Input objects"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'from clarifai.client.user import User\ninput_obj = User(user_id="user_id").app(app_id="app_id").inputs()\nall_inputs = list(input_obj.list_inputs(input_type=\'image\'))\n'})}),"\n",(0,l.jsx)(n.h3,{id:"inputslist_annotations",children:"Inputs.list_annotations"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"Inputs.list_annotations(batch_input=None, page_no=None, per_page=None)\n"})}),"\n",(0,l.jsx)(n.p,{children:"Lists annotations in the app."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"batch_input"})," (",(0,l.jsx)(n.em,{children:"List[Input]"}),") - Filter by input objects"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"page_no"})," (",(0,l.jsx)(n.em,{children:"int"}),") - Page number"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"per_page"})," (",(0,l.jsx)(n.em,{children:"int"}),") - Items per page"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Yields:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Annotation objects"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'from clarifai.client.user import User\ninput_obj = User(user_id="user_id").app(app_id="app_id").inputs()\nall_inputs = list(input_obj.list_inputs(input_type=\'image\'))\nall_annotations = list(input_obj.list_annotations(batch_input=all_inputs))\n'})}),"\n",(0,l.jsx)(n.h2,{id:"model",children:"Model"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'class Model(url=None, model_id=None, model_version={\'id\': ""}, base_url="https://api.clarifai.com", pat=None, token=None, root_certificates_path=None, **kwargs)\n'})}),"\n",(0,l.jsx)(n.p,{children:"Model is a class that provides access to Clarifai API endpoints related to Model information."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"url"})," (",(0,l.jsx)(n.em,{children:"str"}),") - URL to initialize model object"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"model_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Model ID to interact with"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"model_version"})," (",(0,l.jsx)(n.em,{children:"Dict"}),") - Model version details with id"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"base_url"})," (",(0,l.jsx)(n.em,{children:"str"}),') - Base API url. Default "',(0,l.jsx)(n.a,{href:"https://api.clarifai.com",children:"https://api.clarifai.com"}),'"']}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"pat"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Personal access token for authentication"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"token"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Session token for authentication"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"root_certificates_path"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Path to SSL root certificates file"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"**kwargs"})," - Additional keyword arguments"]}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Note:"})," Either url or model_id must be specified, but not both."]}),"\n",(0,l.jsx)(n.h3,{id:"modellist_training_templates",children:"Model.list_training_templates"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"Model.list_training_templates()\n"})}),"\n",(0,l.jsx)(n.p,{children:"Lists all training templates for the model type."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"List of available training templates"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"from clarifai.client.model import Model\nmodel = Model(model_id='model_id', user_id='user_id', app_id='app_id')\ntemplates = model.list_training_templates()\n"})}),"\n",(0,l.jsx)(n.h3,{id:"modelget_params",children:"Model.get_params"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"Model.get_params(template=None, save_to='params.yaml')\n"})}),"\n",(0,l.jsx)(n.p,{children:"Gets model parameters for training."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"template"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Template to use for model type"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"save_to"})," (",(0,l.jsx)(n.em,{children:"str"}),") - YAML file path to save parameters"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Dictionary of model parameters"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"from clarifai.client.model import Model\nmodel = Model(model_id='model_id', user_id='user_id', app_id='app_id')\nparams = model.get_params(template='template', save_to='model_params.yaml')\n"})}),"\n",(0,l.jsx)(n.h3,{id:"modelupdate_params",children:"Model.update_params"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"Model.update_params(**kwargs)\n"})}),"\n",(0,l.jsx)(n.p,{children:"Updates model training parameters."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"**kwargs"})," - Parameter key-value pairs to update"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"from clarifai.client.model import Model\nmodel = Model(model_id='model_id', user_id='user_id', app_id='app_id')\nmodel.update_params(batch_size=8, dataset_version='dataset_version_id')\n"})}),"\n",(0,l.jsx)(n.h3,{id:"modelget_param_info",children:"Model.get_param_info"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"Model.get_param_info(param)\n"})}),"\n",(0,l.jsx)(n.p,{children:"Gets information about a specific parameter."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"param"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Parameter name to get info for"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Dictionary with parameter information"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"from clarifai.client.model import Model\nmodel = Model(model_id='model_id', user_id='user_id', app_id='app_id')\nparam_info = model.get_param_info('batch_size')\n"})}),"\n",(0,l.jsx)(n.h3,{id:"modeltrain",children:"Model.train"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"Model.train(yaml_file=None)\n"})}),"\n",(0,l.jsx)(n.p,{children:"Trains the model using specified parameters."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"yaml_file"})," (",(0,l.jsx)(n.em,{children:"str"}),") - YAML file containing training parameters"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Model version ID of trained model"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"from clarifai.client.model import Model\nmodel = Model(model_id='model_id', user_id='user_id', app_id='app_id')\nversion_id = model.train('model_params.yaml')\n"})}),"\n",(0,l.jsx)(n.h3,{id:"modeltraining_status",children:"Model.training_status"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"Model.training_status(version_id=None, training_logs=False)\n"})}),"\n",(0,l.jsx)(n.p,{children:"Gets training status for a model version."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"version_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Version ID to check status for"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"training_logs"})," (",(0,l.jsx)(n.em,{children:"bool"}),") - Save training logs to file if True"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Dictionary with training status information"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"from clarifai.client.model import Model\nmodel = Model(model_id='model_id', user_id='user_id', app_id='app_id')\nstatus = model.training_status(version_id='version_id', training_logs=True)\n"})}),"\n",(0,l.jsx)(n.h3,{id:"modeldelete_version",children:"Model.delete_version"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"Model.delete_version(version_id)\n"})}),"\n",(0,l.jsx)(n.p,{children:"Deletes a model version."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"version_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Version ID to delete"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"from clarifai.client.model import Model\nmodel = Model(model_id='model_id', user_id='user_id', app_id='app_id')\nmodel.delete_version('version_id')\n"})}),"\n",(0,l.jsx)(n.h3,{id:"modelcreate_version",children:"Model.create_version"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"Model.create_version(**kwargs)\n"})}),"\n",(0,l.jsx)(n.p,{children:"Creates a new model version."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"**kwargs"})," - Version parameters including:","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"description"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Version description"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"concepts"})," (",(0,l.jsx)(n.em,{children:"list"}),") - Associated concepts"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"output_info"})," (",(0,l.jsx)(n.em,{children:"OutputInfo"}),") - Output configuration"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"New Model object for created version"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"from clarifai.client.model import Model\nmodel = Model(model_id='model_id', user_id='user_id', app_id='app_id')\nnew_version = model.create_version(description='New version')\n"})}),"\n",(0,l.jsx)(n.h3,{id:"modellist_versions",children:"Model.list_versions"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"Model.list_versions(page_no=None, per_page=None)\n"})}),"\n",(0,l.jsx)(n.p,{children:"Lists all versions of the model."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"page_no"})," (",(0,l.jsx)(n.em,{children:"int"}),") - Page number for pagination"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"per_page"})," (",(0,l.jsx)(n.em,{children:"int"}),") - Items per page"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Yields:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Model objects for each version"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"from clarifai.client.model import Model\nmodel = Model(model_id='model_id', user_id='user_id', app_id='app_id')\nversions = list(model.list_versions())\n"})}),"\n",(0,l.jsx)(n.h3,{id:"modelpredict",children:"Model.predict"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"Model.predict(inputs, runner_selector=None, inference_params={}, output_config={})\n"})}),"\n",(0,l.jsx)(n.p,{children:"Makes predictions using the model."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"inputs"})," (",(0,l.jsx)(n.em,{children:"List[Input]"}),") - List of inputs to predict on"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"runner_selector"})," (",(0,l.jsx)(n.em,{children:"RunnerSelector"}),") - Runner selection config"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"inference_params"})," (",(0,l.jsx)(n.em,{children:"Dict"}),") - Inference parameters"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"output_config"})," (",(0,l.jsx)(n.em,{children:"Dict"}),") - Output configuration"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Prediction response"}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"modelload_input_types",children:"Model.load_input_types"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"Model.load_input_types()\n"})}),"\n",(0,l.jsx)(n.p,{children:"Loads available input types for the model."}),"\n",(0,l.jsx)(n.h3,{id:"modelpredict_by_filepath",children:"Model.predict_by_filepath"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"Model.predict_by_filepath(filepath, input_type=None, compute_cluster_id=None, nodepool_id=None, deployment_id=None, inference_params={}, output_config={})\n"})}),"\n",(0,l.jsx)(n.p,{children:"Makes predictions from file input."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"filepath"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Path to input file"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"input_type"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Input type ('image', 'text', 'video', 'audio')"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"compute_cluster_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Compute cluster ID"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"nodepool_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Nodepool ID"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"deployment_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Deployment ID"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"inference_params"})," (",(0,l.jsx)(n.em,{children:"Dict"}),") - Inference parameters"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"output_config"})," (",(0,l.jsx)(n.em,{children:"Dict"}),") - Output configuration"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"from clarifai.client.model import Model \nmodel = Model(model_id='model_id')\nresponse = model.predict_by_filepath('image.jpg', input_type='image')\n"})}),"\n",(0,l.jsx)(n.h3,{id:"modelpredict_by_bytes",children:"Model.predict_by_bytes"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"Model.predict_by_bytes(input_bytes, input_type=None, compute_cluster_id=None, nodepool_id=None, deployment_id=None, inference_params={}, output_config={})\n"})}),"\n",(0,l.jsx)(n.p,{children:"Makes predictions from bytes input."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"input_bytes"})," (",(0,l.jsx)(n.em,{children:"bytes"}),") - Input bytes"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"input_type"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Input type ('image', 'text', 'video', 'audio')"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"compute_cluster_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Compute cluster ID"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"nodepool_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Nodepool ID"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"deployment_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Deployment ID"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"inference_params"})," (",(0,l.jsx)(n.em,{children:"Dict"}),") - Inference parameters"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"output_config"})," (",(0,l.jsx)(n.em,{children:"Dict"}),") - Output configuration"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"text = b'Write a tweet about AI'\nmodel = Model(\"https://clarifai.com/openai/chat-completion/models/GPT-4\")\nresponse = model.predict_by_bytes(text, inference_params={'temperature': 0.7})\n"})}),"\n",(0,l.jsx)(n.h3,{id:"modelpredict_by_url",children:"Model.predict_by_url"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"Model.predict_by_url(url, input_type=None, compute_cluster_id=None, nodepool_id=None, deployment_id=None, inference_params={}, output_config={})\n"})}),"\n",(0,l.jsx)(n.p,{children:"Makes predictions from URL input."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"url"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Input URL"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"input_type"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Input type ('image', 'text', 'video', 'audio')"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"compute_cluster_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Compute cluster ID"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"nodepool_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Nodepool ID"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"deployment_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Deployment ID"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"inference_params"})," (",(0,l.jsx)(n.em,{children:"Dict"}),") - Inference parameters"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"output_config"})," (",(0,l.jsx)(n.em,{children:"Dict"}),") - Output configuration"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"from clarifai.client.model import Model\nmodel = Model(model_id='model_id')\nresponse = model.predict_by_url('https://example.com/image.jpg', input_type='image')\n"})}),"\n",(0,l.jsx)(n.h3,{id:"modelgenerate",children:"Model.generate"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"Model.generate(inputs, runner_selector=None, inference_params={}, output_config={})\n"})}),"\n",(0,l.jsx)(n.p,{children:"Generates outputs with streaming response."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"inputs"})," (",(0,l.jsx)(n.em,{children:"List[Input]"}),") - List of inputs"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"runner_selector"})," (",(0,l.jsx)(n.em,{children:"RunnerSelector"}),") - Runner selection config"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"inference_params"})," (",(0,l.jsx)(n.em,{children:"Dict"}),") - Inference parameters"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"output_config"})," (",(0,l.jsx)(n.em,{children:"Dict"}),") - Output configuration"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Generator yielding output responses"}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"modelgenerate_by_filepath",children:"Model.generate_by_filepath"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"Model.generate_by_filepath(filepath, input_type=None, compute_cluster_id=None, nodepool_id=None, deployment_id=None, inference_params={}, output_config={})\n"})}),"\n",(0,l.jsx)(n.p,{children:"Generates outputs from file input with streaming response."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"filepath"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Path to input file"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"input_type"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Input type ('image', 'text', 'video', 'audio')"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"compute_cluster_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Compute cluster ID"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"nodepool_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Nodepool ID"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"deployment_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Deployment ID"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"inference_params"})," (",(0,l.jsx)(n.em,{children:"Dict"}),") - Inference parameters"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"output_config"})," (",(0,l.jsx)(n.em,{children:"Dict"}),") - Output configuration"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Generator yielding output responses"}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"modelgenerate_by_bytes",children:"Model.generate_by_bytes"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"Model.generate_by_bytes(input_bytes, input_type=None, compute_cluster_id=None, nodepool_id=None, deployment_id=None, inference_params={}, output_config={})\n"})}),"\n",(0,l.jsx)(n.p,{children:"Generates outputs from bytes input with streaming response."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"input_bytes"})," (",(0,l.jsx)(n.em,{children:"bytes"}),") - Input bytes"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"input_type"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Input type ('image', 'text', 'video', 'audio')"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"compute_cluster_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Compute cluster ID"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"nodepool_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Nodepool ID"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"deployment_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Deployment ID"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"inference_params"})," (",(0,l.jsx)(n.em,{children:"Dict"}),") - Inference parameters"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"output_config"})," (",(0,l.jsx)(n.em,{children:"Dict"}),") - Output configuration"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Generator yielding output responses"}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"modelgenerate_by_url",children:"Model.generate_by_url"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"Model.generate_by_url(url, input_type=None, compute_cluster_id=None, nodepool_id=None, deployment_id=None, inference_params={}, output_config={})\n"})}),"\n",(0,l.jsx)(n.p,{children:"Generates outputs from URL input with streaming response."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"url"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Input URL"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"input_type"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Input type ('image', 'text', 'video', 'audio')"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"compute_cluster_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Compute cluster ID"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"nodepool_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Nodepool ID"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"deployment_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Deployment ID"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"inference_params"})," (",(0,l.jsx)(n.em,{children:"Dict"}),") - Inference parameters"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"output_config"})," (",(0,l.jsx)(n.em,{children:"Dict"}),") - Output configuration"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Generator yielding output responses"}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"modelstream",children:"Model.stream"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"Model.stream(inputs, runner_selector=None, inference_params={}, output_config={})\n"})}),"\n",(0,l.jsx)(n.p,{children:"Streams predictions for input iterator."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"inputs"})," (",(0,l.jsx)(n.em,{children:"Iterator[List[Input]]"}),") - Iterator of input lists"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"runner_selector"})," (",(0,l.jsx)(n.em,{children:"RunnerSelector"}),") - Runner selection config"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"inference_params"})," (",(0,l.jsx)(n.em,{children:"Dict"}),") - Inference parameters"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"output_config"})," (",(0,l.jsx)(n.em,{children:"Dict"}),") - Output configuration"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Generator yielding output responses"}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"modelstream_by_filepath",children:"Model.stream_by_filepath"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"Model.stream_by_filepath(filepath, input_type=None, compute_cluster_id=None, nodepool_id=None, deployment_id=None, inference_params={}, output_config={})\n"})}),"\n",(0,l.jsx)(n.p,{children:"Streams predictions from file input."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"filepath"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Path to input file"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"input_type"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Input type ('image', 'text', 'video', 'audio')"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"compute_cluster_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Compute cluster ID"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"nodepool_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Nodepool ID"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"deployment_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Deployment ID"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"inference_params"})," (",(0,l.jsx)(n.em,{children:"Dict"}),") - Inference parameters"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"output_config"})," (",(0,l.jsx)(n.em,{children:"Dict"}),") - Output configuration"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"modelevaluate",children:"Model.evaluate"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"Model.evaluate(dataset=None, dataset_id=None, dataset_app_id=None, dataset_user_id=None, dataset_version_id=None, eval_id=None, extended_metrics=None, eval_info=None)\n"})}),"\n",(0,l.jsx)(n.p,{children:"Evaluates model performance on a dataset."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"dataset"})," (",(0,l.jsx)(n.em,{children:"Dataset"}),") - Dataset to evaluate on"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"dataset_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Dataset ID if not using Dataset object"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"dataset_app_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Dataset app ID for cross-app evaluation"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"dataset_user_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Dataset user ID for cross-app evaluation"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"dataset_version_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Dataset version ID"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"eval_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Custom evaluation ID"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"extended_metrics"})," (",(0,l.jsx)(n.em,{children:"dict"}),") - Custom metrics configuration"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"eval_info"})," (",(0,l.jsx)(n.em,{children:"dict"}),") - Additional evaluation information"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Evaluation metrics"}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"modelget_eval_by_id",children:"Model.get_eval_by_id"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"Model.get_eval_by_id(eval_id, label_counts=False, test_set=False, binary_metrics=False, confusion_matrix=False, metrics_by_class=False, metrics_by_area=False)\n"})}),"\n",(0,l.jsx)(n.p,{children:"Gets detailed evaluation metrics by ID."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"eval_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Evaluation ID"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"label_counts"})," (",(0,l.jsx)(n.em,{children:"bool"}),") - Include label counts"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"test_set"})," (",(0,l.jsx)(n.em,{children:"bool"}),") - Include test set"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"binary_metrics"})," (",(0,l.jsx)(n.em,{children:"bool"}),") - Include binary metrics"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"confusion_matrix"})," (",(0,l.jsx)(n.em,{children:"bool"}),") - Include confusion matrix"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"metrics_by_class"})," (",(0,l.jsx)(n.em,{children:"bool"}),") - Include per-class metrics"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"metrics_by_area"})," (",(0,l.jsx)(n.em,{children:"bool"}),") - Include metrics by area"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Detailed evaluation metrics"}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"modelget_latest_eval",children:"Model.get_latest_eval"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"Model.get_latest_eval(label_counts=False, test_set=False, binary_metrics=False, confusion_matrix=False, metrics_by_class=False, metrics_by_area=False)\n"})}),"\n",(0,l.jsx)(n.p,{children:"Gets metrics from latest evaluation."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"label_counts"})," (",(0,l.jsx)(n.em,{children:"bool"}),") - Include label counts"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"test_set"})," (",(0,l.jsx)(n.em,{children:"bool"}),") - Include test set"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"binary_metrics"})," (",(0,l.jsx)(n.em,{children:"bool"}),") - Include binary metrics"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"confusion_matrix"})," (",(0,l.jsx)(n.em,{children:"bool"}),") - Include confusion matrix"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"metrics_by_class"})," (",(0,l.jsx)(n.em,{children:"bool"}),") - Include per-class metrics"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"metrics_by_area"})," (",(0,l.jsx)(n.em,{children:"bool"}),") - Include metrics by area"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Latest evaluation metrics or None if not evaluated"}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"modellist_evaluations",children:"Model.list_evaluations"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"Model.list_evaluations()\n"})}),"\n",(0,l.jsx)(n.p,{children:"Lists all evaluation metrics for current model version."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"List of evaluation metrics"}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"modelget_eval_by_dataset",children:"Model.get_eval_by_dataset"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"Model.get_eval_by_dataset(dataset)\n"})}),"\n",(0,l.jsx)(n.p,{children:"Gets all evaluation data for a dataset."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"dataset"})," (",(0,l.jsx)(n.em,{children:"Dataset"}),") - Dataset to get evaluations for"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"List of evaluation metrics for dataset"}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"modelget_raw_eval",children:"Model.get_raw_eval"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"Model.get_raw_eval(dataset=None, eval_id=None, return_format='array')\n"})}),"\n",(0,l.jsx)(n.p,{children:"Gets raw evaluation data in specified format."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"dataset"})," (",(0,l.jsx)(n.em,{children:"Dataset"}),") - Dataset to get evaluation for"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"eval_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Specific evaluation ID"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"return_format"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Output format ('proto', 'array', 'coco')"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Evaluation data in requested format"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'from clarifai.client.model import Model\nfrom clarifai.client.dataset import Dataset\n\nmodel = Model(url="model_url")\ndataset = Dataset(dataset_id="dataset_id")\ny_true, y_pred, classes, inputs = model.get_raw_eval(\n    dataset,\n    return_format="array"\n)\n'})}),"\n",(0,l.jsx)(n.h3,{id:"modelcreate_version_by_file",children:"Model.create_version_by_file"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'Model.create_version_by_file(file_path, input_field_maps, output_field_maps, inference_parameter_configs=None, model_version=None, description="")\n'})}),"\n",(0,l.jsx)(n.p,{children:"Creates new model version from local file."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"file_path"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Path to model file"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"input_field_maps"})," (",(0,l.jsx)(n.em,{children:"dict"}),") - Input field mappings"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"output_field_maps"})," (",(0,l.jsx)(n.em,{children:"dict"}),") - Output field mappings"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"inference_parameter_configs"})," (",(0,l.jsx)(n.em,{children:"dict"}),") - Inference parameter configurations"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"model_version"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Custom version ID"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"description"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Version description"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"New Model instance"}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"modelcreate_version_by_url",children:"Model.create_version_by_url"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'Model.create_version_by_url(url, input_field_maps, output_field_maps, inference_parameter_configs=None, description="")\n'})}),"\n",(0,l.jsx)(n.p,{children:"Creates new model version from URL."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"url"})," (",(0,l.jsx)(n.em,{children:"str"}),") - URL to model file"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"input_field_maps"})," (",(0,l.jsx)(n.em,{children:"dict"}),") - Input field mappings"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"output_field_maps"})," (",(0,l.jsx)(n.em,{children:"dict"}),") - Output field mappings"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"inference_parameter_configs"})," (",(0,l.jsx)(n.em,{children:"List[dict]"}),") - Inference parameter configurations"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"description"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Version description"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"New Model instance"}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"modelexport",children:"Model.export"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"Model.export(export_dir=None)\n"})}),"\n",(0,l.jsx)(n.p,{children:"Exports model to local file."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"export_dir"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Directory to save exported model"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'from clarifai.client.model import Model\nmodel = Model("model_url")\nmodel.export("exported_models/")\n'})}),"\n",(0,l.jsx)(n.h3,{id:"modelload_info",children:"Model.load_info"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"Model.load_info()\n"})}),"\n",(0,l.jsx)(n.p,{children:"Loads or refreshes model information."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'from clarifai.client.model import Model\nmodel = Model("model_url")\nmodel.load_info()\n'})}),"\n",(0,l.jsx)(n.h2,{id:"workflow",children:"Workflow"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"class Workflow(url=None, workflow_id=None, workflow_version={'id': \"\"}, output_config={'min_value': 0}, base_url=\"https://api.clarifai.com\", pat=None, token=None, root_certificates_path=None, **kwargs)\n"})}),"\n",(0,l.jsx)(n.p,{children:"Workflow is a class that provides access to Clarifai API endpoints related to Workflow information."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"url"})," (",(0,l.jsx)(n.em,{children:"str"}),") - URL to initialize workflow object"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"workflow_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Workflow ID to interact with"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"workflow_version"})," (",(0,l.jsx)(n.em,{children:"Dict"}),") - Workflow version details with ID"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"output_config"})," (",(0,l.jsx)(n.em,{children:"Dict"}),") - Output configuration including:","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"min_value"})," (",(0,l.jsx)(n.em,{children:"float"}),") - Minimum prediction confidence threshold"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"max_concepts"})," (",(0,l.jsx)(n.em,{children:"int"}),") - Maximum concepts to return"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"select_concepts"})," (",(0,l.jsx)(n.em,{children:"List[Concept]"}),") - Specific concepts to select"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"sample_ms"})," (",(0,l.jsx)(n.em,{children:"int"}),") - Sampling duration in milliseconds"]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"base_url"})," (",(0,l.jsx)(n.em,{children:"str"}),') - Base API URL. Default "',(0,l.jsx)(n.a,{href:"https://api.clarifai.com",children:"https://api.clarifai.com"}),'"']}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"pat"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Personal access token for authentication"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"token"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Session token for authentication"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"root_certificates_path"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Path to SSL root certificates file"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"**kwargs"})," - Additional keyword arguments"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"workflowpredict",children:"Workflow.predict"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"Workflow.predict(inputs, workflow_state_id=None)\n"})}),"\n",(0,l.jsx)(n.p,{children:"Makes predictions using the workflow."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"inputs"})," (",(0,l.jsx)(n.em,{children:"List[Input]"}),") - List of inputs to predict (max 32)"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"workflow_state_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Cache key for workflow node predictions"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Workflow prediction response"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"from clarifai.client.workflow import Workflow\nworkflow = Workflow(workflow_id='workflow_id')\nresponse = workflow.predict(inputs=[input_proto])\n"})}),"\n",(0,l.jsx)(n.h3,{id:"workflowpredict_by_filepath",children:"Workflow.predict_by_filepath"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"Workflow.predict_by_filepath(filepath, input_type=None)\n"})}),"\n",(0,l.jsx)(n.p,{children:"Makes predictions from file input."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"filepath"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Path to input file"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"input_type"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Input type ('image', 'text', 'video', 'audio')"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"from clarifai.client.workflow import Workflow\nworkflow = Workflow(\"https://clarifai.com/clarifai/main/workflows/Face-Sentiment\")\nprediction = workflow.predict_by_filepath('image.jpg', input_type='image') \n"})}),"\n",(0,l.jsx)(n.h3,{id:"workflowpredict_by_bytes",children:"Workflow.predict_by_bytes"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"Workflow.predict_by_bytes(input_bytes, input_type=None)\n"})}),"\n",(0,l.jsx)(n.p,{children:"Makes predictions from bytes input."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"input_bytes"})," (",(0,l.jsx)(n.em,{children:"bytes"}),") - Input bytes"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"input_type"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Input type ('image', 'text', 'video', 'audio')"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Workflow prediction response"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"with open('image.jpg', 'rb') as f:\n    bytes_data = f.read()\nworkflow = Workflow(workflow_id='workflow_id')\nprediction = workflow.predict_by_bytes(bytes_data, input_type='image')\n"})}),"\n",(0,l.jsx)(n.h3,{id:"workflowpredict_by_url",children:"Workflow.predict_by_url"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"Workflow.predict_by_url(url, input_type=None)\n"})}),"\n",(0,l.jsx)(n.p,{children:"Makes predictions from URL input."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"url"})," (",(0,l.jsx)(n.em,{children:"str"}),") - URL to input"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"input_type"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Input type ('image', 'text', 'video', 'audio')"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"workflow = Workflow(\"https://clarifai.com/clarifai/main/workflows/Face-Sentiment\")\nprediction = workflow.predict_by_url('https://example.com/image.jpg', input_type='image')\n"})}),"\n",(0,l.jsx)(n.h3,{id:"workflowlist_versions",children:"Workflow.list_versions"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"Workflow.list_versions(page_no=None, per_page=None)\n"})}),"\n",(0,l.jsx)(n.p,{children:"Lists all versions of the workflow."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"page_no"})," (",(0,l.jsx)(n.em,{children:"int"}),") - Page number for pagination"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"per_page"})," (",(0,l.jsx)(n.em,{children:"int"}),") - Items per page"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Yields:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Workflow objects for each version"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"workflow = Workflow(workflow_id='workflow_id')\nversions = list(workflow.list_versions())\n"})}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Note:"})," Defaults to 16 items per page if only page_no specified. Lists all if neither specified."]}),"\n",(0,l.jsx)(n.h3,{id:"workflowexport",children:"Workflow.export"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"Workflow.export(out_path)\n"})}),"\n",(0,l.jsx)(n.p,{children:"Exports workflow to YAML file."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"out_path"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Path to save YAML file"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"workflow = Workflow(\"https://clarifai.com/clarifai/main/workflows/Demographics\")\nworkflow.export('workflow_config.yml')\n"})}),"\n",(0,l.jsx)(n.h3,{id:"workflowload_info",children:"Workflow.load_info"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"Workflow.load_info()\n"})}),"\n",(0,l.jsx)(n.p,{children:"Loads or refreshes workflow information and input types."}),"\n",(0,l.jsx)(n.p,{children:"This method:"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsx)(n.li,{children:"Fetches latest workflow configuration"}),"\n",(0,l.jsx)(n.li,{children:"Updates workflow info and kwargs"}),"\n",(0,l.jsx)(n.li,{children:"Loads input types from first workflow node"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"workflow = Workflow(workflow_id='workflow_id')\nworkflow.load_info()\n"})}),"\n",(0,l.jsx)(n.h2,{id:"module",children:"Module"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'class Module(url=None, module_id=None, module_version={\'id\': ""}, base_url="https://api.clarifai.com", pat=None, token=None, root_certificates_path=None, **kwargs)\n'})}),"\n",(0,l.jsx)(n.p,{children:"Module is a class that provides access to Clarifai API endpoints related to Module information."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"url"})," (",(0,l.jsx)(n.em,{children:"str"}),") - URL to initialize module object"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"module_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Module ID to interact with"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"module_version"})," (",(0,l.jsx)(n.em,{children:"Dict"}),") - Module version details with ID"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"base_url"})," (",(0,l.jsx)(n.em,{children:"str"}),') - Base API URL. Default "',(0,l.jsx)(n.a,{href:"https://api.clarifai.com",children:"https://api.clarifai.com"}),'"']}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"pat"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Personal access token for authentication"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"token"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Session token for authentication"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"root_certificates_path"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Path to SSL root certificates file"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"**kwargs"})," - Additional keyword arguments"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"modulelist_versions",children:"Module.list_versions"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"Module.list_versions(page_no=None, per_page=None)\n"})}),"\n",(0,l.jsx)(n.p,{children:"Lists all versions of the module."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"page_no"})," (",(0,l.jsx)(n.em,{children:"int"}),") - Page number for pagination"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"per_page"})," (",(0,l.jsx)(n.em,{children:"int"}),") - Items per page"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Yields:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Module objects for each version"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"from clarifai.client.module import Module\nmodule = Module(module_id='module_id', user_id='user_id', app_id='app_id')\nall_module_versions = list(module.list_versions())\n"})}),"\n",(0,l.jsx)(n.h2,{id:"search",children:"Search"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'class Search(user_id, app_id, top_k=None, metric=DEFAULT_SEARCH_METRIC, algorithm=DEFAULT_SEARCH_ALGORITHM, pagination=False, base_url="https://api.clarifai.com", pat=None, token=None, root_certificates_path=None)\n'})}),"\n",(0,l.jsx)(n.p,{children:"Search is a class that provides access to Clarifai API endpoints related to searching over inputs."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"user_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - User ID"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"app_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - App ID"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"top_k"})," (",(0,l.jsx)(n.em,{children:"int"}),") - Number of top results to return (default 10)"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"metric"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Similarity metric ('cosine' or 'euclidean')"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"algorithm"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Search algorithm ('nearest_neighbor' or 'brute_force')"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"pagination"})," (",(0,l.jsx)(n.em,{children:"bool"}),") - Enable pagination functionality"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"base_url"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Base API URL"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"pat"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Personal access token"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"token"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Session token"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"root_certificates_path"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Path to SSL certificates"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"searchquery",children:"Search.query"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"Search.query(ranks=[{}], filters=[{}], page_no=None, per_page=None)\n"})}),"\n",(0,l.jsx)(n.p,{children:"Performs search query with ranking and filtering."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"ranks"})," (",(0,l.jsx)(n.em,{children:"List[Dict]"}),") - Ranking criteria. Each dict can contain:","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"image_url"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Image URL"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"text_raw"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Raw text"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"metadata"})," (",(0,l.jsx)(n.em,{children:"dict"}),") - Metadata"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"geo_point"})," (",(0,l.jsx)(n.em,{children:"dict"}),") - Geographic coordinates"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"concepts"})," (",(0,l.jsx)(n.em,{children:"List"}),") - Concept list"]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"filters"})," (",(0,l.jsx)(n.em,{children:"List[Dict]"}),") - Filtering criteria. Each dict can contain:","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"input_types"})," (",(0,l.jsx)(n.em,{children:"List[str]"}),") - Input types to filter"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"input_dataset_ids"})," (",(0,l.jsx)(n.em,{children:"List[str]"}),") - Dataset IDs to filter"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"input_status_code"})," (",(0,l.jsx)(n.em,{children:"int"}),") - Status code to filter"]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"page_no"})," (",(0,l.jsx)(n.em,{children:"int"}),") - Page number for pagination"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"per_page"})," (",(0,l.jsx)(n.em,{children:"int"}),") - Items per page"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Generator yielding search results"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"from clarifai.client.search import Search\nsearch = Search(user_id='user_id', app_id='app_id', top_k=10, metric='cosine')\nresults = search.query(\n    filters=[{\n        'input_types': ['image', 'text'],\n        'input_status_code': 30000\n    }]\n)\n\nsearch = Search(\n    user_id='user_id',\n    app_id='app_id',\n    metric='cosine',\n    pagination=True\n)\nresults = search.query(\n    ranks=[{'image_url': 'https://samples.clarifai.com/dog.tiff'}],\n    page_no=2,\n    per_page=5\n)\n"})}),"\n",(0,l.jsx)(n.h2,{id:"computecluster",children:"ComputeCluster"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'class ComputeCluster(compute_cluster_id=None, user_id=None, base_url="https://api.clarifai.com", pat=None, token=None, root_certificates_path=None, **kwargs)\n'})}),"\n",(0,l.jsx)(n.p,{children:"ComputeCluster is a class that provides access to Clarifai API endpoints related to Compute Cluster information."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"compute_cluster_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - ComputeCluster ID to interact with"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"user_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - User ID"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"base_url"})," (",(0,l.jsx)(n.em,{children:"str"}),') - Base API URL. Default "',(0,l.jsx)(n.a,{href:"https://api.clarifai.com",children:"https://api.clarifai.com"}),'"']}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"pat"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Personal access token"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"token"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Session token"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"root_certificates_path"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Path to SSL certificates"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"**kwargs"})," - Additional configurations"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"computeclusterlist_nodepools",children:"ComputeCluster.list_nodepools"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"ComputeCluster.list_nodepools(page_no=None, per_page=None)\n"})}),"\n",(0,l.jsx)(n.p,{children:"Lists all nodepools in the compute cluster."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"page_no"})," (",(0,l.jsx)(n.em,{children:"int"}),") - Page number for pagination"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"per_page"})," (",(0,l.jsx)(n.em,{children:"int"}),") - Items per page"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Yields:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Nodepool objects"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'from clarifai.client.compute_cluster import ComputeCluster\ncompute_cluster = ComputeCluster(\n    compute_cluster_id="compute_cluster_id",\n    user_id="user_id"\n)\nall_nodepools = list(compute_cluster.list_nodepools())\n'})}),"\n",(0,l.jsx)(n.h3,{id:"computeclustercreate_nodepool",children:"ComputeCluster.create_nodepool"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"ComputeCluster.create_nodepool(config_filepath, nodepool_id=None)\n"})}),"\n",(0,l.jsx)(n.p,{children:"Creates a new nodepool in the compute cluster."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"config_filepath"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Path to nodepool configuration YAML file"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"nodepool_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Optional custom nodepool ID"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Nodepool object"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'compute_cluster = ComputeCluster(\n    compute_cluster_id="compute_cluster_id",\n    user_id="user_id"\n)\nnodepool = compute_cluster.create_nodepool(config_filepath="config.yml")\n'})}),"\n",(0,l.jsx)(n.h3,{id:"computeclusternodepool",children:"ComputeCluster.nodepool"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"ComputeCluster.nodepool(nodepool_id)\n"})}),"\n",(0,l.jsx)(n.p,{children:"Gets a specific nodepool by ID."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"nodepool_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - ID of nodepool to retrieve"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Nodepool object"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'compute_cluster = ComputeCluster(\n    compute_cluster_id="compute_cluster_id",\n    user_id="user_id"\n)\nnodepool = compute_cluster.nodepool(nodepool_id="nodepool_id")\n'})}),"\n",(0,l.jsx)(n.h3,{id:"computeclusterdelete_nodepools",children:"ComputeCluster.delete_nodepools"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"ComputeCluster.delete_nodepools(nodepool_ids)\n"})}),"\n",(0,l.jsx)(n.p,{children:"Deletes multiple nodepools."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"nodepool_ids"})," (",(0,l.jsx)(n.em,{children:"List[str]"}),") - List of nodepool IDs to delete"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'compute_cluster = ComputeCluster(\n    compute_cluster_id="compute_cluster_id",\n    user_id="user_id"\n)\ncompute_cluster.delete_nodepools(\n    nodepool_ids=["nodepool_id1", "nodepool_id2"]\n)\n'})}),"\n",(0,l.jsx)(n.h2,{id:"nodepool",children:"Nodepool"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'class Nodepool(nodepool_id=None, user_id=None, base_url="https://api.clarifai.com", pat=None, token=None, root_certificates_path=None, **kwargs)\n'})}),"\n",(0,l.jsx)(n.p,{children:"Nodepool is a class that provides access to Clarifai API endpoints related to Nodepool information."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"nodepool_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Nodepool ID to interact with"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"user_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - User ID"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"base_url"})," (",(0,l.jsx)(n.em,{children:"str"}),') - Base API URL. Default "',(0,l.jsx)(n.a,{href:"https://api.clarifai.com",children:"https://api.clarifai.com"}),'"']}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"pat"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Personal access token"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"token"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Session token"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"root_certificates_path"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Path to SSL certificates"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"**kwargs"})," - Additional configurations"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"nodepoollist_deployments",children:"Nodepool.list_deployments"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"Nodepool.list_deployments(filter_by={}, page_no=None, per_page=None)\n"})}),"\n",(0,l.jsx)(n.p,{children:"Lists all deployments in the nodepool."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"filter_by"})," (",(0,l.jsx)(n.em,{children:"Dict[str, Any]"}),") - Filtering criteria"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"page_no"})," (",(0,l.jsx)(n.em,{children:"int"}),") - Page number"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"per_page"})," (",(0,l.jsx)(n.em,{children:"int"}),") - Items per page"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Yields:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Deployment objects"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'nodepool = Nodepool(nodepool_id="nodepool_id", user_id="user_id")\ndeployments = list(nodepool.list_deployments())\n'})}),"\n",(0,l.jsx)(n.h3,{id:"nodepoolcreate_deployment",children:"Nodepool.create_deployment"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"Nodepool.create_deployment(config_filepath, deployment_id=None)\n"})}),"\n",(0,l.jsx)(n.p,{children:"Creates new deployment in the nodepool."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"config_filepath"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Path to deployment configuration YAML"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"deployment_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Optional custom deployment ID"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Deployment object"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'nodepool = Nodepool(nodepool_id="nodepool_id", user_id="user_id")\ndeployment = nodepool.create_deployment(config_filepath="config.yml")\n'})}),"\n",(0,l.jsx)(n.h3,{id:"nodepooldeployment",children:"Nodepool.deployment"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"Nodepool.deployment(deployment_id)\n"})}),"\n",(0,l.jsx)(n.p,{children:"Gets specific deployment by ID."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"deployment_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Deployment ID to retrieve"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Deployment object"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'nodepool = Nodepool(nodepool_id="nodepool_id", user_id="user_id")\ndeployment = nodepool.deployment(deployment_id="deployment_id")\n'})}),"\n",(0,l.jsx)(n.h3,{id:"nodepooldelete_deployments",children:"Nodepool.delete_deployments"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"Nodepool.delete_deployments(deployment_ids)\n"})}),"\n",(0,l.jsx)(n.p,{children:"Deletes multiple deployments."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"deployment_ids"})," (",(0,l.jsx)(n.em,{children:"List[str]"}),") - List of deployment IDs to delete"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'nodepool = Nodepool(nodepool_id="nodepool_id", user_id="user_id")\nnodepool.delete_deployments(\n    deployment_ids=["deployment_id1", "deployment_id2"]\n)\n'})}),"\n",(0,l.jsx)(n.h3,{id:"nodepoolget_runner_selector",children:"Nodepool.get_runner_selector"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"Nodepool.get_runner_selector(user_id, compute_cluster_id, nodepool_id)\n"})}),"\n",(0,l.jsx)(n.p,{children:"Returns RunnerSelector for specified compute cluster and nodepool."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"user_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - User ID"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"compute_cluster_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Compute cluster ID"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"nodepool_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Nodepool ID"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"RunnerSelector protobuf object"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'runner_selector = Nodepool.get_runner_selector(\n    user_id="user_id",\n    compute_cluster_id="cluster_id",\n    nodepool_id="nodepool_id"\n)\n'})}),"\n",(0,l.jsx)(n.h2,{id:"deployment",children:"Deployment"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'class Deployment(deployment_id=None, user_id=None, base_url="https://api.clarifai.com", pat=None, token=None, root_certificates_path=None, **kwargs)\n'})}),"\n",(0,l.jsx)(n.p,{children:"Deployment class for accessing Clarifai API endpoints related to Deployment information."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"deployment_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Deployment ID to interact with"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"user_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - User ID"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"base_url"})," (",(0,l.jsx)(n.em,{children:"str"}),') - Base API URL. Default "',(0,l.jsx)(n.a,{href:"https://api.clarifai.com",children:"https://api.clarifai.com"}),'"']}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"pat"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Personal access token"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"token"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Session token"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"root_certificates_path"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Path to SSL certificates"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"**kwargs"})," - Additional configurations"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"deploymentget_runner_selector",children:"Deployment.get_runner_selector"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"Deployment.get_runner_selector(user_id, deployment_id)\n"})}),"\n",(0,l.jsx)(n.p,{children:"Gets RunnerSelector object for a deployment."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"user_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - User ID"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"deployment_id"})," (",(0,l.jsx)(n.em,{children:"str"}),") - Deployment ID"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"RunnerSelector object"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'deployment = Deployment(deployment_id="deployment_id", user_id="user_id")\nrunner = Deployment.get_runner_selector(user_id="user_id", deployment_id="deployment_id")\n'})})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(a,{...e})}):a(e)}}}]);
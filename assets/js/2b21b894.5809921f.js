"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[6257],{46598:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>h,contentTitle:()=>m,default:()=>_,frontMatter:()=>p,metadata:()=>a,toc:()=>f});const a=JSON.parse('{"id":"getting-started/upload-model","title":"Upload Your First Model","description":"Upload a model from Hugging Face to the Clarifai platform","source":"@site/docs/getting-started/upload-model.md","sourceDirName":"getting-started","slug":"/getting-started/upload-model","permalink":"/getting-started/upload-model","draft":false,"unlisted":false,"editUrl":"https://github.com/Clarifai/docs/blob/main/docs/getting-started/upload-model.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"description":"Upload a model from Hugging Face to the Clarifai platform","sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Deploy Your First Model","permalink":"/getting-started/first-deployment"},"next":{"title":"Compute Orchestration","permalink":"/compute/overview"}}');var r=t(74848),o=t(28453),s=t(65537),i=t(79329),l=t(58069);const d='from clarifai.runners.models.model_class import ModelClass\nfrom clarifai.runners.utils.data_types import Stream\nfrom clarifai.utils.logging import logger\nfrom clarifai.runners.models.model_builder import ModelBuilder\nfrom typing import List, Optional\nimport os\nimport torch\nfrom transformers import (AutoModelForCausalLM, AutoTokenizer, TextIteratorStreamer, pipeline)\n\n\nDEFAULT_INFERENCE_PARAMS = {\n    "temperature": 0.7,\n    "max_new_tokens": 256,\n    "top_k": 50,\n    "top_p": 1.0,\n    "do_sample": True,\n}\n\n\nclass MyRunner(ModelClass):\n  """A custom runner for llama-3.2-1b-instruct llm that integrates with the Clarifai platform"""\n\n  def load_model(self):\n    """Load the model here."""\n    self.device = \'cuda\' if torch.cuda.is_available() else \'cpu\'\n    logger.info(f"Running on device: {self.device}")\n\n    # Load checkpoints\n    model_path = os.path.dirname(os.path.dirname(__file__))\n    builder = ModelBuilder(model_path, download_validation_only=True)\n    self.checkpoints = builder.download_checkpoints(stage="runtime")\n    \n    # Load model and tokenizer\n    self.tokenizer = AutoTokenizer.from_pretrained(self.checkpoints,)\n    self.tokenizer.pad_token = self.tokenizer.eos_token  # Set pad token to eos token\n    self.model = AutoModelForCausalLM.from_pretrained(\n        self.checkpoints,\n        low_cpu_mem_usage=True,\n        device_map=self.device,\n        torch_dtype=torch.bfloat16,\n    )\n\n    self.default_inference_params = DEFAULT_INFERENCE_PARAMS\n    logger.info("Done loading!")\n\n  @ModelClass.method\n  def predict(self, prompt: str = "") -> str:\n    """This method generates outputs text for the given inputs using the model."""\n\n    # prompts = [prompt]\n    inputs = self.tokenizer([prompt], return_tensors="pt", padding=True).to(self.device)\n\n    output_tokens = self.model.generate(\n        **inputs,\n        max_new_tokens=self.default_inference_params["max_new_tokens"],\n        do_sample=self.default_inference_params["do_sample"],\n        temperature=self.default_inference_params["temperature"],\n        top_k=self.default_inference_params["top_k"],\n        top_p=self.default_inference_params["top_p"],\n        eos_token_id=self.tokenizer.eos_token_id,\n    )\n\n    outputs_text = self.tokenizer.batch_decode(\n        output_tokens[:, inputs[\'input_ids\'].shape[1]:], skip_special_tokens=True)\n\n    return outputs_text[0]\n\n  @ModelClass.method\n  def generate(self, prompt: str = \'\') -> Stream[str]:\n    """Example yielding a whole batch of streamed stuff back."""\n    \n    inputs = self.tokenizer([prompt], return_tensors="pt", padding=True).to(self.device)\n\n    output_tokens = self.model.generate(\n        **inputs,\n        max_new_tokens=self.default_inference_params["max_new_tokens"],\n        do_sample=self.default_inference_params["do_sample"],\n        temperature=self.default_inference_params["temperature"],\n        top_k=self.default_inference_params["top_k"],\n        top_p=self.default_inference_params["top_p"],\n        eos_token_id=self.tokenizer.eos_token_id,\n    )\n\n    outputs_text = self.tokenizer.batch_decode(\n        output_tokens[:, inputs[\'input_ids\'].shape[1]:], skip_special_tokens=True)\n\n    for token in outputs_text[0]:  \n      yield token\n\n  @ModelClass.method\n  def chat(self,\n           messages: List[dict],\n           max_tokens: int = DEFAULT_INFERENCE_PARAMS["max_new_tokens"],\n           temperature: float = DEFAULT_INFERENCE_PARAMS["temperature"],\n           top_p: int = DEFAULT_INFERENCE_PARAMS["top_p"]) -> Stream[dict]:\n    """Chat with the model."""\n    pipe = pipeline(\n        "text-generation",\n        model=self.checkpoints,\n        torch_dtype=torch.bfloat16,\n        device_map="auto",\n    )\n    for msg in messages:\n      if "role" not in msg and "content" not in msg:\n        raise ValueError("Message must contain \'role\' and \'content\' keys.")\n      if msg["role"] not in ["user", "assistant", "system"]:\n        raise ValueError("Role must be \'user\', \'assistant\', or \'system\'.")\n      if not isinstance(msg["content"], str):\n        raise ValueError("Content must be a string.")\n        \n    outputs = pipe(\n        messages,\n        max_new_tokens=max_tokens,\n        do_sample=self.default_inference_params["do_sample"],\n        temperature=temperature,\n        top_k=self.default_inference_params["top_k"],\n        top_p=top_p,\n        eos_token_id=self.tokenizer.eos_token_id,\n    )\n    output_tokens = outputs[0]["generated_text"][-1]\n\n    for token in output_tokens[\'content\']:  \n      yield token\n\n\n  def test(self):\n    """Test the model here."""\n    try:\n      print("Testing predict...")\n      # Test predict\n      print(self.predict(prompt="What is the capital of India?",))\n    except Exception as e:\n      print("Error in predict", e)\n\n    try:\n      print("Testing generate...")\n      # Test generate\n      for each in self.generate(prompt="What is the capital of India?",):\n        print(each, end="")\n      print()\n    except Exception as e:\n      print("Error in generate", e)\n\n    try:\n      print("Testing chat...")\n      messages = [\n        {"role": "system", "content": "You are an helpful assistant."},\n        {"role": "user", "content": "What is the capital of India?"},\n      ]\n      for each in self.chat(messages=messages,):\n        print(each, end="")\n      print()\n    except Exception as e:\n      print("Error in generate", e)',c='model:\n  id: "llama_3_2_1b_instruct"\n  user_id: "user_id"\n  app_id: "app_id"\n  model_type_id: "text-to-text"\n\nbuild_info:\n  python_version: "3.11"\n\ninference_compute_info:\n  cpu_limit: "1"\n  cpu_memory: "13Gi"\n  num_accelerators: 1\n  accelerator_type: ["NVIDIA-*"]\n  accelerator_memory: "18Gi"\n\ncheckpoints:\n  type: "huggingface"\n  repo_id: "unsloth/Llama-3.2-1B-Instruct"\n  hf_token: "hf_token"\n  when: "runtime"',u="torch==2.5.1\ntokenizers>=0.21.0\ntransformers>=4.47.0\naccelerate>=1.2.0\nscipy==1.10.1\noptimum>=1.23.3\nprotobuf==5.27.3\neinops>=0.8.0\nrequests==2.32.3\nclarifai",p={description:"Upload a model from Hugging Face to the Clarifai platform",sidebar_position:3},m="Upload Your First Model",h={},f=[{value:"Step 1: Perform Prerequisites",id:"step-1-perform-prerequisites",level:2},{value:"Install Clarifai Package",id:"install-clarifai-package",level:3},{value:"Set a PAT Key",id:"set-a-pat-key",level:3},{value:"Get a Hugging Face Access Token",id:"get-a-hugging-face-access-token",level:3},{value:"Step 2: Create Files",id:"step-2-create-files",level:2},{value:"<code>model.py</code>",id:"modelpy",level:3},{value:"<code>requirements.txt</code>",id:"requirementstxt",level:3},{value:"<code>config.yaml</code>",id:"configyaml",level:3},{value:"Step 3: Upload the Model",id:"step-3-upload-the-model",level:2}];function g(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"upload-your-first-model",children:"Upload Your First Model"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Upload a model from Hugging Face to the Clarifai platform"})}),"\n",(0,r.jsx)("hr",{}),"\n",(0,r.jsx)(n.p,{children:"The Clarifai platform allows you to upload custom models for a wide range of use cases. With just a few simple steps, you can get your models up and running and leverage the platform\u2019s powerful capabilities."}),"\n",(0,r.jsxs)(n.p,{children:["Let's demonstrate how you can upload the ",(0,r.jsx)(n.a,{href:"https://github.com/Clarifai/runners-examples/tree/main/llm/llama-3_2-1b-instruct",children:"Llama-3.2-1B-Instruct"})," model from Hugging Face to the Clarifai platform."]}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsxs)(n.p,{children:["To learn more about how to upload different types of models, check out ",(0,r.jsx)(n.a,{href:"https://docs.clarifai.com/compute/models/model-upload/",children:"this comprehensive guide"}),"."]})}),"\n","\n","\n",(0,r.jsx)(n.h2,{id:"step-1-perform-prerequisites",children:"Step 1: Perform Prerequisites"}),"\n",(0,r.jsx)(n.h3,{id:"install-clarifai-package",children:"Install Clarifai Package"}),"\n",(0,r.jsxs)(n.p,{children:["Install the latest version of the ",(0,r.jsx)(n.code,{children:"clarifai"})," Python SDK. This also installs the Clarifai ",(0,r.jsx)(n.a,{href:"https://docs.clarifai.com/additional-resources/api-overview/cli",children:"Command Line Interface (CLI)"}),", which we'll use for uploading the model."]}),"\n",(0,r.jsx)(s.A,{children:(0,r.jsx)(i.A,{value:"bash",label:"Bash",children:(0,r.jsx)(l.A,{className:"language-bash",children:" pip install --upgrade clarifai "})})}),"\n",(0,r.jsx)(n.h3,{id:"set-a-pat-key",children:"Set a PAT Key"}),"\n",(0,r.jsxs)(n.p,{children:["You need to set the ",(0,r.jsx)(n.code,{children:"CLARIFAI_PAT"})," (Personal Access Token) as an environment variable. You can generate the PAT key in your personal settings page by navigating to the ",(0,r.jsx)(n.a,{href:"https://clarifai.com/settings/security",children:"Security section"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"This token is essential for authenticating your connection to the Clarifai platform."}),"\n",(0,r.jsxs)(s.A,{children:[(0,r.jsx)(i.A,{value:"bash",label:"Unix-Like Systems",children:(0,r.jsx)(l.A,{className:"language-bash",children:" export CLARIFAI_PAT=YOUR_PERSONAL_ACCESS_TOKEN_HERE "})}),(0,r.jsx)(i.A,{value:"bash2",label:"Windows",children:(0,r.jsx)(l.A,{className:"language-bash",children:" set CLARIFAI_PAT=YOUR_PERSONAL_ACCESS_TOKEN_HERE "})})]}),"\n",(0,r.jsx)(n.h3,{id:"get-a-hugging-face-access-token",children:"Get a Hugging Face Access Token"}),"\n",(0,r.jsx)(n.p,{children:"To download models from the Hugging Face platform, you'll need to authenticate your connection. You can create a Hugging Face account, then generate an access token to authorize your downloads."}),"\n",(0,r.jsxs)(n.p,{children:["You can follow the guide ",(0,r.jsx)(n.a,{href:"https://huggingface.co/docs/hub/en/security-tokens",children:"here"})," to get it."]}),"\n",(0,r.jsx)(n.h2,{id:"step-2-create-files",children:"Step 2: Create Files"}),"\n",(0,r.jsx)(n.p,{children:"Create a project directory and organize your files as indicated below to fit the requirements of uploading models to the Clarifai platform."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"your_model_directory/\n\u251c\u2500\u2500 1/\n\u2502   \u2514\u2500\u2500 model.py\n\u251c\u2500\u2500 requirements.txt\n\u2514\u2500\u2500 config.yaml\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"your_model_directory/"})," \u2013 The main directory containing your model files.","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"1/"})," \u2013 A subdirectory that holds the model file (",(0,r.jsxs)(n.em,{children:["Note that the folder is named as ",(0,r.jsx)(n.strong,{children:"1"})]}),").","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"model.py"})," \u2013 Contains the code that defines your model, including loading the model and running inference."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"requirements.txt"})," \u2013 Lists the Python libraries and dependencies required to run your model."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"config.yaml"})," \u2013 Contains model metadata and configuration details necessary for building the Docker image, defining compute resources, and uploading the model to Clarifai."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Add the following snippets to each of the respective files."}),"\n",(0,r.jsx)(n.h3,{id:"modelpy",children:(0,r.jsx)(n.code,{children:"model.py"})}),"\n",(0,r.jsx)(s.A,{children:(0,r.jsx)(i.A,{value:"python",label:"Python",children:(0,r.jsx)(l.A,{className:"language-python",children:d})})}),"\n",(0,r.jsx)(n.h3,{id:"requirementstxt",children:(0,r.jsx)(n.code,{children:"requirements.txt"})}),"\n",(0,r.jsx)(s.A,{children:(0,r.jsx)(i.A,{value:"text",label:"Text",children:(0,r.jsx)(l.A,{className:"language-text",children:u})})}),"\n",(0,r.jsx)(n.h3,{id:"configyaml",children:(0,r.jsx)(n.code,{children:"config.yaml"})}),"\n",(0,r.jsx)(n.admonition,{title:"important",type:"info",children:(0,r.jsxs)(n.p,{children:["In the ",(0,r.jsx)(n.code,{children:"model"})," section of the ",(0,r.jsx)(n.code,{children:"config.yaml"})," file, specify your model ID, Clarifai user ID, and Clarifai app ID. These will define where your model will be uploaded on the Clarifai platform. You also need to specify the ",(0,r.jsx)(n.code,{children:"hf_token"})," to authenticate your connection to Hugging Face, as ",(0,r.jsx)(n.a,{href:"#get-a-hugging-face-access-token",children:"described"})," earlier."]})}),"\n",(0,r.jsx)(s.A,{children:(0,r.jsx)(i.A,{value:"yaml",label:"YAML",children:(0,r.jsx)(l.A,{className:"language-yaml",children:c})})}),"\n",(0,r.jsx)(n.h2,{id:"step-3-upload-the-model",children:"Step 3: Upload the Model"}),"\n",(0,r.jsx)(n.p,{children:"Once your custom model is ready, upload it to the Clarifai platform by navigating to the directory containing the model and running the following command:"}),"\n",(0,r.jsx)(s.A,{children:(0,r.jsx)(i.A,{value:"bash",label:"CLI",children:(0,r.jsx)(l.A,{className:"language-bash",children:" clarifai model upload "})})}),"\n",(0,r.jsx)(n.p,{children:"Congratulations \u2014 you've just uploaded your first model to the Clarifai platform!"}),"\n",(0,r.jsxs)(n.p,{children:["Now, you can ",(0,r.jsx)(n.a,{href:"https://docs.clarifai.com/compute/deployments/deploy-model",children:"deploy"})," the model to a cluster and nodepool. This allows you to cost-efficiently and scalably make ",(0,r.jsx)(n.a,{href:"https://docs.clarifai.com/compute/models/inference/api",children:"inferences"})," with it."]})]})}function _(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(g,{...e})}):g(e)}},65537:(e,n,t)=>{t.d(n,{A:()=>j});var a=t(96540),r=t(18215),o=t(65627),s=t(56347),i=t(50372),l=t(30604),d=t(11861),c=t(78749);function u(e){return a.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function p(e){const{values:n,children:t}=e;return(0,a.useMemo)((()=>{const e=n??function(e){return u(e).map((e=>{let{props:{value:n,label:t,attributes:a,default:r}}=e;return{value:n,label:t,attributes:a,default:r}}))}(t);return function(e){const n=(0,d.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function m(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function h(e){let{queryString:n=!1,groupId:t}=e;const r=(0,s.W6)(),o=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,l.aZ)(o),(0,a.useCallback)((e=>{if(!o)return;const n=new URLSearchParams(r.location.search);n.set(o,e),r.replace({...r.location,search:n.toString()})}),[o,r])]}function f(e){const{defaultValue:n,queryString:t=!1,groupId:r}=e,o=p(e),[s,l]=(0,a.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!m({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const a=t.find((e=>e.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:o}))),[d,u]=h({queryString:t,groupId:r}),[f,g]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[r,o]=(0,c.Dv)(t);return[r,(0,a.useCallback)((e=>{t&&o.set(e)}),[t,o])]}({groupId:r}),_=(()=>{const e=d??f;return m({value:e,tabValues:o})?e:null})();(0,i.A)((()=>{_&&l(_)}),[_]);return{selectedValue:s,selectValue:(0,a.useCallback)((e=>{if(!m({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);l(e),u(e),g(e)}),[u,g,o]),tabValues:o}}var g=t(9136);const _={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var x=t(74848);function y(e){let{className:n,block:t,selectedValue:a,selectValue:s,tabValues:i}=e;const l=[],{blockElementScrollPositionUntilNextRender:d}=(0,o.a_)(),c=e=>{const n=e.currentTarget,t=l.indexOf(n),r=i[t].value;r!==a&&(d(n),s(r))},u=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const t=l.indexOf(e.currentTarget)+1;n=l[t]??l[0];break}case"ArrowLeft":{const t=l.indexOf(e.currentTarget)-1;n=l[t]??l[l.length-1];break}}n?.focus()};return(0,x.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":t},n),children:i.map((e=>{let{value:n,label:t,attributes:o}=e;return(0,x.jsx)("li",{role:"tab",tabIndex:a===n?0:-1,"aria-selected":a===n,ref:e=>{l.push(e)},onKeyDown:u,onClick:c,...o,className:(0,r.A)("tabs__item",_.tabItem,o?.className,{"tabs__item--active":a===n}),children:t??n},n)}))})}function b(e){let{lazy:n,children:t,selectedValue:o}=e;const s=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=s.find((e=>e.props.value===o));return e?(0,a.cloneElement)(e,{className:(0,r.A)("margin-top--md",e.props.className)}):null}return(0,x.jsx)("div",{className:"margin-top--md",children:s.map(((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==o})))})}function k(e){const n=f(e);return(0,x.jsxs)("div",{className:(0,r.A)("tabs-container",_.tabList),children:[(0,x.jsx)(y,{...n,...e}),(0,x.jsx)(b,{...n,...e})]})}function j(e){const n=(0,g.A)();return(0,x.jsx)(k,{...e,children:u(e.children)},String(n))}},79329:(e,n,t)=>{t.d(n,{A:()=>s});t(96540);var a=t(18215);const r={tabItem:"tabItem_Ymn6"};var o=t(74848);function s(e){let{children:n,hidden:t,className:s}=e;return(0,o.jsx)("div",{role:"tabpanel",className:(0,a.A)(r.tabItem,s),hidden:t,children:n})}}}]);
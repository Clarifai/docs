"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[1458],{21458:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>v,contentTitle:()=>U,default:()=>L,frontMatter:()=>x,metadata:()=>a,toc:()=>H});const a=JSON.parse('{"id":"create/concepts/concepts-relations","title":"Concepts Relations","description":"Connect the knowledge gained by different models","source":"@site/docs/create/concepts/concepts-relations.md","sourceDirName":"create/concepts","slug":"/create/concepts/concepts-relations","permalink":"/create/concepts/concepts-relations","draft":false,"unlisted":false,"editUrl":"https://github.com/Clarifai/docs/blob/main/docs/create/concepts/concepts-relations.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"description":"Connect the knowledge gained by different models","sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Manage Concepts","permalink":"/create/concepts/manage"},"next":{"title":"Labeling","permalink":"/create/labeling/"}}');var s=t(74848),i=t(28453),o=t(65537),r=t(79329),c=t(58069);const l='import os\nfrom clarifai.client.app import App\n\n# Set your Personal Access Token (PAT)\nos.environ["CLARIFAI_PAT"] = "YOUR_PAT_HERE"\n\napp = App(user_id="YOUR_USER_ID_HERE", app_id="YOUR_APP_ID_HERE")\n\n# A hyponym relation between "cat" and "animal", indicating that "cat" is a kind of "animal"\n# A synonym relation between "cat" and "kitten", suggests that these two concepts are essentially the same\napp.create_concept_relations("cat", ["animal", "kitten"], ["hyponym", "synonym"])\n',p="###################################################################################\n# In this section, we set the user authentication, app ID, subject concept ID, \n# object concept ID, and predicate. Change these strings to run your own example.\n###################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to whatever relations you want to create\nSUBJECT_CONCEPT_ID = 'honey'\nOBJECT_CONCEPT_ID = 'food'\nPREDICATE = \"hypernym\" # This can be hypernym, hyponym, or synonym\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\npost_concept_relation_response = stub.PostConceptRelations(\n    service_pb2.PostConceptRelationsRequest(\n        user_app_id=resources_pb2.UserAppIDSet(\n            user_id=USER_ID,\n            app_id=APP_ID\n        ),\n        concept_id=SUBJECT_CONCEPT_ID,\n        concept_relations=[\n            resources_pb2.ConceptRelation(\n                object_concept=resources_pb2.Concept(id=OBJECT_CONCEPT_ID),\n                predicate=PREDICATE\n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif post_concept_relation_response.status.code != status_code_pb2.SUCCESS:\n    print(post_concept_relation_response.status)\n    raise Exception(\"Post concept relation failed, status: \" + post_concept_relation_response.status.description)\n    \nprint(post_concept_relation_response)",u="######################################################################################\n# In this section, we set the user authentication, app ID, concept ID, and predicate. \n# Change these strings to run your own example.\n######################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to whatever concept you want to list its relations\nCONCEPT_ID = 'honey'\nPREDICATE = \"hypernym\" # This is optional. If skipped, all concept's relations will be returned\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nlist_concept_relation_response = stub.ListConceptRelations(\n    service_pb2.ListConceptRelationsRequest(\n        user_app_id=resources_pb2.UserAppIDSet(\n            user_id=USER_ID,\n            app_id=APP_ID\n        ),\n        concept_id=CONCEPT_ID,\n        predicate=PREDICATE  \n    ),\n    metadata=metadata\n)\n\nif list_concept_relation_response.status.code != status_code_pb2.SUCCESS:\n    print(list_concept_relation_response.status)\n    raise Exception(\"List concept relation failed, status: \" + list_concept_relation_response.status.description)\n\nfor relation in list_concept_relation_response.concept_relations:\n    print(relation) \n",d="###################################################################################\n# In this section, we set the user authentication, app ID, object concept ID, and\n# concept relation IDs. Change these strings to run your own example.\n####################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to whatever relations you want to delete\nOBJECT_CONCEPT_ID = 'YOUR_OBJECT_CONCEPT_ID_HERE'\nCONCEPT_RELATION_IDS = ['0d9b0acb10fb4dac9a9d60a149d8fc5c','f5acf9c2a76143d78daf5f984693c52c']\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\ndelete_concept_relation_response = stub.DeleteConceptRelations(\n    service_pb2.DeleteConceptRelationsRequest(\n        user_app_id=resources_pb2.UserAppIDSet(\n            user_id=USER_ID,\n            app_id=APP_ID\n        ),\n        concept_id=OBJECT_CONCEPT_ID,\n        ids=CONCEPT_RELATION_IDS\n    ),\n    metadata=metadata\n)\n\nif delete_concept_relation_response.status.code != status_code_pb2.SUCCESS:\n    print(delete_concept_relation_response.status)\n    raise Exception(\"Delete concept relation failed, status: \" + delete_concept_relation_response.status.description)\n\n",h='import os\nfrom clarifai.client.app import App\n\n# Set your Personal Access Token (PAT)\nos.environ["CLARIFAI_PAT"] = "YOUR_PAT_HERE"\n\napp = App(user_id="YOUR_USER_ID_HERE", app_id="YOUR_APP_ID_HERE")\n\nconcept_relations = list(app.search_concept_relations())\n\nfor relation in concept_relations:\n    print("Subject_concept:", relation.subject_concept.id)\n    print(\'\\t\' "Object_concept:", relation.object_concept.id)\n    print(\'\\t\' "Predicate:", relation.predicate, \'\\n\')\n',_='import os\nfrom clarifai.client.app import App\n\n# Set your Personal Access Token (PAT)\nos.environ["CLARIFAI_PAT"] = "YOUR_PAT_HERE"\n\napp = App(user_id="YOUR_USER_ID_HERE", app_id="YOUR_APP_ID_HERE")\n\nconcept_relations = list(app.search_concept_relations(concept_id="cat", predicate="synonym"))\n\nfor relation in concept_relations:\n    print("Subject_concept:", relation.subject_concept.id)\n    print(\'\\t\' "Object_concept:", relation.object_concept.id)\n    print(\'\\t\' "Predicate:", relation.predicate, \'\\n\')',E='import os\nfrom clarifai.client.app import App\n\n# Set your Personal Access Token (PAT)\nos.environ["CLARIFAI_PAT"] = "YOUR_PAT_HERE"\n\napp = App(user_id="YOUR_USER_ID_HERE", app_id="YOUR_APP_ID_HERE")\n\nconcept_relations = list(app.search_concept_relations(show_tree=True))\n\nfor relation in concept_relations:\n    print("Subject_concept:",relation.subject_concept.id)\n    print(\'\\t\'"Oject_concept:",relation.object_concept.id)\n    print(\'\\t\'"Predicate:",relation.predicate,\'\\n\')',C="\x3c!--index.html file--\x3e\n\n<script>\n    ////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, subject concept ID, \n    // object concept ID, and predicate. Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = 'YOUR_USER_ID_HERE';\n    // Your PAT (Personal Access Token) can be found in the Account's Security section\n    const PAT = 'YOUR_PAT_HERE';\n    const APP_ID = 'YOUR_APP_ID_HERE';\n    // Change these to whatever relations you want to create\n    const SUBJECT_CONCEPT_ID = 'honey';\n    const OBJECT_CONCEPT_ID = 'food';\n    const PREDICATE = \"hypernym\"; // This can be hypernym, hyponym, or synonym\n\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        \"user_app_id\": {\n            \"user_id\": USER_ID,\n            \"app_id\": APP_ID\n        },\n        \"concept_relations\": [\n            {\n                \"object_concept\": {\n                    \"id\": OBJECT_CONCEPT_ID\n                },\n                \"predicate\": PREDICATE\n            }\n        ]\n    });\n\n    const requestOptions = {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        },\n        body: raw\n    };\n\n    fetch(\"https://api.clarifai.com/v2/users/me/apps/\" + APP_ID + \"/concepts/\" + SUBJECT_CONCEPT_ID + \"/relations\", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n<\/script>",f="\x3c!--index.html file--\x3e\n\n<script>\n    ////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, concept ID, and predicate.\n    // Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = 'YOUR_USER_ID_HERE';\n    // Your PAT (Personal Access Token) can be found in the Account's Security section\n    const PAT = 'YOUR_PAT_HERE';\n    const APP_ID = 'YOUR_APP_ID_HERE';\n    // Change these to whatever concept you want to list its relations\n    CONCEPT_ID = 'honey';\n    PREDICATE = \"hypernym\"; //  This is optional. If skipped, all concept's relations will be returned\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const requestOptions = {\n        method: 'GET',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        },\n    };\n\n    fetch(\"https://api.clarifai.com/v2/users/\" + USER_ID + \"/apps/\" + APP_ID + \"/concepts/\" + CONCEPT_ID + \"/relations?predicate=\" + PREDICATE, requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n<\/script>",I="\x3c!--index.html file--\x3e\n\n<script>\n    ////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, object concept ID, and\n    // concept relation IDs. Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = 'YOUR_USER_ID_HERE';\n     // Your PAT (Personal Access Token) can be found in the Account's Security section\n    const PAT = 'YOUR_PAT_HERE';\n    const APP_ID = 'YOUR_APP_ID_HERE';\n    // Change these to whatever relations you want to delete\n    const OBJECT_CONCEPT_ID = 'YOUR_OBJECT_CONCEPT_ID_HERE';\n    const CONCEPT_RELATION_IDS = ['0d9b0acb10fb4dac9a9d60a149d8fc5c','f5acf9c2a76143d78daf5f984693c52c'];\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        \"ids\": CONCEPT_RELATION_IDS\n    });\n\n    const requestOptions = {\n        method: 'DELETE',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        },\n        body: raw\n    };\n\n    fetch(\"https://api.clarifai.com/v2/users/\" + USER_ID + \"/apps/\" + APP_ID + \"/concepts/\" + OBJECT_CONCEPT_ID + \"/relations\", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n<\/script>",m='//index.js file\n\n////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, subject concept ID,\n// object concept ID, and predicate. Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n// Change these to whatever relations you want to create\nconst SUBJECT_CONCEPT_ID = \'honey\';\nconst OBJECT_CONCEPT_ID = \'food\';\nconst PREDICATE = "hypernym"; // This can be hypernym, hyponym, or synonym.\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PostConceptRelations(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        concept_id: SUBJECT_CONCEPT_ID,\n        concept_relations: [\n            {\n                object_concept: {\n                    id: OBJECT_CONCEPT_ID,\n                },\n                predicate: PREDICATE\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Create concept relations failed, status: " + response.status.description);\n        }\n    }\n);',R='//index.js file\n\n///////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, concept ID, and predicate.\n// Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n// Change these to whatever concept you want to list its relations\nconst CONCEPT_ID = \'honey\';\nconst PREDICATE = "hypernym"; // This is optional. If skipped, all concept\'s relations will be returned\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.ListConceptRelations(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        concept_id: CONCEPT_ID,\n        predicate: PREDICATE\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("List concept relations failed, status: " + response.status.description);\n        }\n\n        for (const relation of response.concept_relations) {\n            console.log(relation);\n        }\n    }\n);',T="//index.js file\n\n//////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, object concept ID, and\n// concept relation IDs. Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = 'YOUR_USER_ID_HERE';\n// Your PAT (Personal Access Token) can be found in the Account's Security section\nconst PAT = 'YOUR_PAT_HERE';\nconst APP_ID = 'YOUR_APP_ID_HERE';\n// Change these to whatever relations you want to delete\nconst OBJECT_CONCEPT_ID = 'YOUR_OBJECT_CONCEPT_ID_HERE';\nconst CONCEPT_RELATION_IDS = ['0d9b0acb10fb4dac9a9d60a149d8fc5c','f5acf9c2a76143d78daf5f984693c52c'];\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require(\"clarifai-nodejs-grpc\");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set(\"authorization\", \"Key \" + PAT);\n\nstub.DeleteConceptRelations(\n    {\n        user_app_id: {\n            \"user_id\": USER_ID,\n            \"app_id\": APP_ID\n        },\n        concept_id: OBJECT_CONCEPT_ID,\n        ids: CONCEPT_RELATION_IDS        \n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error(\"Delete concept relations failed, status: \" + response.status.description);\n        }\n    }\n);",A='package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    ///////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, subject concept ID, \n    // object concept ID, and predicate. Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\t\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to whatever relations you want to create\n    static final String SUBJECT_CONCEPT_ID = "honey";\n    static final String OBJECT_CONCEPT_ID = "food";\n    static final String PREDICATE = "hypernym"; // This can be hypernym, hyponym, or synonym\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\t\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiConceptRelationResponse postConceptRelationsResponse = stub.postConceptRelations(\n            PostConceptRelationsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID).build())\n            .setConceptId(SUBJECT_CONCEPT_ID)\n            .addConceptRelations(\n                ConceptRelation.newBuilder()\n                .setObjectConcept(Concept.newBuilder().setId(OBJECT_CONCEPT_ID).build())\n                .setPredicate(PREDICATE).build())\n            .build()\n        );\n\n        if (postConceptRelationsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post concept relations failed, status: " + postConceptRelationsResponse.getStatus());\n        }\n\n        System.out.println(postConceptRelationsResponse);\n\n    }\n\n}',g='package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    ////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, concept ID, and predicate. \n    // Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\t\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to whatever concept you want to list its relations\n    static final String CONCEPT_ID = "honey";\n    static final String PREDICATE = "hypernym"; // This is optional. If skipped, all concept\'s relations will be returned\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\t\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiConceptRelationResponse listConceptRelationsResponse = stub.listConceptRelations(\n            ListConceptRelationsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID).build())\n            .setConceptId(CONCEPT_ID)\n            .setPredicate(PREDICATE)\n            .build()\n        );\n\n        if (listConceptRelationsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("List concept relations failed, status: " + listConceptRelationsResponse.getStatus());\n        }\n\n        for (ConceptRelation relation: listConceptRelationsResponse.getConceptRelationsList()) {\n            System.out.println(relation);\n        }\n\n    }\n\n}',P='package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.status.BaseResponse;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    /////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, object concept ID, and\n    // concept relation IDs. Change these strings to run your own example.\n    /////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\t\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to whatever relations you want to delete\n    static final String OBJECT_CONCEPT_ID = "YOUR_OBJECT_CONCEPT_ID_HERE";\n    static final String CONCEPT_RELATION_ID_1 = "0d9b0acb10fb4dac9a9d60a149d8fc5c";\n    static final String CONCEPT_RELATION_ID_2 = "f5acf9c2a76143d78daf5f984693c52c";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\t\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        BaseResponse deleteConceptRelationsResponse = stub.deleteConceptRelations(\n            DeleteConceptRelationsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID).build())\n            .addIds(CONCEPT_RELATION_ID_1)\n            .addIds(CONCEPT_RELATION_ID_2)\n            .setConceptId(OBJECT_CONCEPT_ID)\n            .build()\n        );\n\n        if (deleteConceptRelationsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Delete concept relations failed, status: " + deleteConceptRelationsResponse.getStatus());\n        }\n\n    }\n\n}',b='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, subject concept ID, \n// object concept ID, and predicate. Change these strings to run your own example.\n///////////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change these to whatever relations you want to create\n$SUBJECT_CONCEPT_ID = "honey";\n$OBJECT_CONCEPT_ID = "food";\n$PREDICATE = "hypernym"; // This can be hypernym, hyponym, or synonym\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\PostConceptRelationsRequest;\nuse Clarifai\\Api\\ConceptRelation;\nuse Clarifai\\Api\\Concept;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PostConceptRelations(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new PostConceptRelationsRequest([\n        "user_app_id" => $userDataObject, \n        "concept_id" => $SUBJECT_CONCEPT_ID,\n        "concept_relations" => [\n            new ConceptRelation([\n                "object_concept" => new Concept(["id" => $OBJECT_CONCEPT_ID ]),\n                "predicate" => $PREDICATE\n            ])\n        ]\n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\nprint $response->serializeToJsonString();\n\n?>',D='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, concept ID, and predicate.\n// Change these strings to run your own example.\n///////////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change these to whatever concept you want to list its relations\n$CONCEPT_ID = \'honey\';\n$PREDICATE = "hypernym"; // This is optional. If skipped, all concept\'s relations will be returned\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\ListConceptRelationsRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->ListConceptRelations(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new ListConceptRelationsRequest([\n        "user_app_id" => $userDataObject, \n        "concept_id" => $CONCEPT_ID,\n        "predicate" => $PREDICATE      \n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\nforeach ($response->getConceptRelations() as $concept) {\n    echo $concept->SerializeToJsonString() . "</br>";\n}\n\n?>',y='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, object concept ID, and\n// concept relation IDs. Change these strings to run your own example.\n///////////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change these to whatever relations you want to delete\n$OBJECT_CONCEPT_ID = "YOUR_OBJECT_CONCEPT_ID_HERE";\n$CONCEPT_RELATION_IDS = ["0d9b0acb10fb4dac9a9d60a149d8fc5c","f5acf9c2a76143d78daf5f984693c52c"];\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\DeleteConceptRelationsRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->DeleteConceptRelations(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new DeleteConceptRelationsRequest([\n        "user_app_id" => $userDataObject, \n        "concept_id" => $OBJECT_CONCEPT_ID,\n        "ids" => $CONCEPT_RELATION_IDS      \n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\n?>',O='curl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/concepts/YOUR_SUBJECT_CONCEPT_ID_HERE/relations" \\\n    -H "Authorization: Key YOUR_PAT_HERE" \\\n    -H "Content-Type: application/json" \\\n    --data-raw \'{\n        "concept_relations": [\n            {\n                "object_concept": {\n                    "id": "YOUR_OBJECT_CONCEPT_ID_HERE"\n                },\n                "predicate": "hypernym"\n            }\n        ]\n    }\'',S='# Setting the predicate parameter is optional. If skipped, all concept\'s relations will be returned.\n\ncurl -X GET "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/concepts/YOUR_CONCEPT_ID_HERE/relations?predicate=hypernym" \\\n    -H "Authorization: Key YOUR_PAT_HERE" \\\n    -H "Content-Type: application/json"',j='curl -X DELETE "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/concepts/YOUR_OBJECT_CONCEPT_ID_HERE/relations" \\\n    -H "Authorization: Key YOUR_PAT_HERE" \\\n    -H "Content-Type: application/json" \\\n    --data-raw \'{\n        "ids": [\n            "CONCEPT_RELATION_ID_1", "CONCEPT_RELATION_ID_2"\n        ]\n    }\'',w='status {\n    code: SUCCESS\n    description: "Ok"\n    req_id: "0d0a5ec5df14d62a7d660f392ce26727"\n  }\n  concept_relations {\n    id: "2d794e5ede534500b4ac7da44ef570ee"\n    subject_concept {\n      id: "honey"\n      name: "honey"\n      value: 1.0\n      created_at {\n        seconds: 1643976334\n        nanos: 237961000\n      }\n      language: "en"\n      app_id: "a39423543bb941bf9ba2ee95fad11f0a"\n      visibility {\n        gettable: PRIVATE\n      }\n      user_id: "e5y2lteoz3s3iy"\n    }\n    object_concept {\n      id: "food"\n      name: "food"\n      value: 1.0\n      created_at {\n        seconds: 1643976326\n        nanos: 123719000\n      }\n      language: "en"\n      app_id: "a39423543bb941bf9ba2ee95fad11f0a"\n      visibility {\n        gettable: PRIVATE\n      }\n      user_id: "ei2leoz3s3iy"\n    }\n    predicate: "hypernym"\n    visibility {\n      gettable: PRIVATE\n    }\n  }',N='id: "2d794e5ede534500b4ac7da44ef570ee"\nsubject_concept {\n  id: "honey"\n  name: "honey"\n  value: 1.0\n  created_at {\n    seconds: 1643976334\n    nanos: 237961000\n  }\n  language: "en"\n  app_id: "a39423543bb941bf9ba2ee95fad11f0a"\n  visibility {\n    gettable: PRIVATE\n  }\n  user_id: "ei2leoz3s3iy"\n}\nobject_concept {\n  id: "food"\n  name: "food"\n  value: 1.0\n  created_at {\n    seconds: 1643976326\n    nanos: 123719000\n  }\n  language: "en"\n  app_id: "a39423543bb941bf9ba2ee95fad11f0a"\n  visibility {\n    gettable: PRIVATE\n  }\n  user_id: "ei2leoz3s3iy"\n}\npredicate: "hypernym"\nvisibility {\n  gettable: PRIVATE\n}',x={description:"Connect the knowledge gained by different models",sidebar_position:3},U="Concepts Relations",v={},H=[{value:"Types of Concepts Relations",id:"types-of-concepts-relations",level:2},{value:"Use Case Examples",id:"use-case-examples",level:2},{value:"How to Create Relations",id:"how-to-create-relations",level:2},{value:"List Existing Relations",id:"list-existing-relations",level:2},{value:"List All Relations",id:"list-all-relations",level:3},{value:"List Specific Concept Relations",id:"list-specific-concept-relations",level:3},{value:"List Relations in Tree Structure",id:"list-relations-in-tree-structure",level:3},{value:"Delete Relations",id:"delete-relations",level:2}];function Y(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,i.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"concepts-relations",children:"Concepts Relations"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Connect and organize concepts for smarter AI"})}),"\n",(0,s.jsx)("hr",{}),"\n",(0,s.jsx)(n.p,{children:"The Knowledge Graph establishes semantic and hierarchical relationships between your concepts \u2014 such as synonyms, hyponyms, and hypernyms \u2014 laying the foundation for more intelligent, context-aware systems."}),"\n",(0,s.jsx)(n.p,{children:"These relationships are crucial for building robust knowledge representations that enhance both computer vision and natural language processing capabilities."}),"\n",(0,s.jsx)(n.p,{children:"Whether you're managing a product catalog, powering a search engine, or organizing complex datasets, using concept relationships allow you to structure, search, and retrieve information more effectively \u2014 making your AI applications significantly smarter and more precise."}),"\n",(0,s.jsx)(n.h2,{id:"types-of-concepts-relations",children:"Types of Concepts Relations"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Hyponym"})," \u2014 This represents an ",(0,s.jsx)(n.em,{children:"\u201cis a kind of\u201d"})," relationship. For instance, if you define the relationship as ",(0,s.jsx)(n.em,{children:"'honey' (subject), 'hyponym' (predicate), 'food' (object),"})," it can be interpreted as ",(0,s.jsx)(n.em,{children:'"honey is a kind of food."'}),' This helps systems understand that "honey" belongs to a broader category.']}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Hypernym"})," \u2014 This is the inverse of a hyponym, signifying a ",(0,s.jsx)(n.em,{children:"\u201cparent of\u201d"})," relationship. Using the same example, if you define ",(0,s.jsx)(n.em,{children:"'food' (subject), 'hypernym' (predicate), 'honey' (object),"})," it is read as ",(0,s.jsx)(n.em,{children:'"food is a parent of honey."'}),"  When a hyponym is defined, the corresponding hypernym is automatically inferred in queries, and vice versa, ensuring consistency in how concept hierarchies are interpreted."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Synonym"})," \u2014 This relationship connects two concepts that essentially mean the same thing, similar to an ",(0,s.jsx)(n.em,{children:"\u201cis\u201d"})," statement. For example, defining ",(0,s.jsx)(n.em,{children:"'puppy' as a synonym of 'pup'"})," allows the model to treat them interchangeably. This relationship is bidirectional, so adding one synonym automatically implies the reverse, making searches and classifications more flexible and inclusive."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"use-case-examples",children:"Use Case Examples"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Enhanced search and retrieval"})," \u2014 Concept relationships enable more intelligent searches. For example, a search for \u201cAnimal\u201d can automatically include related hyponyms like \u201cDog\u201d and \u201cCat,\u201d returning broader and more relevant results."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Improved data organization"})," \u2014 Hierarchical relationships help structure complex datasets more effectively. For example, hypernyms allow models to group specific entities under broader categories, improving organizational structures."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Contextual understanding"})," \u2014 When models grasp the semantic links between concepts, they can better interpret context. For instance, recognizing that \u201cPuppy\u201d is a synonym of \u201cDog\u201d ensures all relevant information is considered during classification or prediction."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Dynamic content delivery"})," \u2014 In use cases like personalized content, search recommendations, or targeted advertising, concept relationships allow systems to infer user intent and deliver more relevant, meaningful results."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://docs.clarifai.com/create-manage/search/api/rank#search-by-concepts",children:"Click here"})," to learn how to leverage concept relations for more powerful and precise search queries."]})}),"\n",(0,s.jsx)(n.h2,{id:"how-to-create-relations",children:"How to Create Relations"}),"\n",(0,s.jsxs)(n.p,{children:["To create a relation between two concepts, you first have to create them in your app. You can see the  ",(0,s.jsx)(n.a,{href:"/create/concepts/create",children:"previous section"})," on how to create concepts."]}),"\n",(0,s.jsxs)(n.p,{children:["Each relation should have a specified predicate, which can be ",(0,s.jsx)(n.em,{children:"hyponym"}),", ",(0,s.jsx)(n.em,{children:"hypernym"}),", or ",(0,s.jsx)(n.em,{children:"synonym"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"Below is an example of how to create a relation between two concepts."}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:["Learn how to create concept relations via the UI ",(0,s.jsx)(n.a,{href:"https://docs.clarifai.com/create-manage/labeling/ui/create#update-annotations",children:"here"}),"."]})}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["Before using the ",(0,s.jsx)(n.a,{href:"https://docs.clarifai.com/additional-resources/api-overview/python-sdk",children:"Python SDK"}),", ",(0,s.jsx)(n.a,{href:"https://docs.clarifai.com/additional-resources/api-overview/nodejs-sdk",children:"Node.js SDK"}),", or any of our ",(0,s.jsx)(n.a,{href:"https://docs.clarifai.com/additional-resources/api-overview/grpc-clients",children:"gRPC clients"}),", ensure they are properly installed on your machine. Refer to their respective installation guides for instructions on how to install and initialize them."]})}),"\n","\n","\n","\n","\n","\n","\n","\n","\n",(0,s.jsxs)(o.A,{groupId:"code",children:[(0,s.jsx)(r.A,{value:"python",label:"Python SDK",children:(0,s.jsx)(c.A,{className:"language-python",children:l})}),(0,s.jsx)(r.A,{value:"python2",label:"Python (gRPC)",children:(0,s.jsx)(c.A,{className:"language-python",children:p})}),(0,s.jsx)(r.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:C})}),(0,s.jsx)(r.A,{value:"nodejs",label:"Node.js (gRPC)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:m})}),(0,s.jsx)(r.A,{value:"java",label:"Java (gRPC)",children:(0,s.jsx)(c.A,{className:"language-java",children:A})}),(0,s.jsx)(r.A,{value:"php",label:"PHP (gRPC)",children:(0,s.jsx)(c.A,{className:"language-php",children:b})}),(0,s.jsx)(r.A,{value:"curl",label:"cURL",children:(0,s.jsx)(c.A,{className:"language-bash",children:O})})]}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{children:"Raw Output Example"}),(0,s.jsx)(c.A,{className:"language-js",children:w})]}),"\n",(0,s.jsx)(n.h2,{id:"list-existing-relations",children:"List Existing Relations"}),"\n",(0,s.jsx)(n.h3,{id:"list-all-relations",children:"List All Relations"}),"\n",(0,s.jsx)(n.p,{children:"Below is an example of how to list all the existing relations between concepts."}),"\n",(0,s.jsxs)(o.A,{groupId:"code",children:[(0,s.jsx)(r.A,{value:"python",label:"Python SDK",children:(0,s.jsx)(c.A,{className:"language-python",children:h})}),(0,s.jsx)(r.A,{value:"python2",label:"Python (gRPC)",children:(0,s.jsx)(c.A,{className:"language-python",children:u})}),(0,s.jsx)(r.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:f})}),(0,s.jsx)(r.A,{value:"nodejs",label:"Node.js (gRPC)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:R})}),(0,s.jsx)(r.A,{value:"java",label:"Java (gRPC)",children:(0,s.jsx)(c.A,{className:"language-java",children:g})}),(0,s.jsx)(r.A,{value:"php",label:"PHP (gRPC)",children:(0,s.jsx)(c.A,{className:"language-php",children:D})}),(0,s.jsx)(r.A,{value:"curl",label:"cURL",children:(0,s.jsx)(c.A,{className:"language-bash",children:S})})]}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{children:"Raw Output Example"}),(0,s.jsx)(c.A,{className:"language-js",children:N})]}),"\n",(0,s.jsx)(n.h3,{id:"list-specific-concept-relations",children:"List Specific Concept Relations"}),"\n",(0,s.jsx)(n.p,{children:"Below is an example of how to list the specific relations between concepts."}),"\n",(0,s.jsx)(o.A,{groupId:"code",children:(0,s.jsx)(r.A,{value:"python",label:"Python SDK",children:(0,s.jsx)(c.A,{className:"language-python",children:_})})}),"\n",(0,s.jsx)(n.h3,{id:"list-relations-in-tree-structure",children:"List Relations in Tree Structure"}),"\n",(0,s.jsxs)(n.p,{children:["You can set the ",(0,s.jsx)(n.code,{children:"show_tree"})," argument to ",(0,s.jsx)(n.code,{children:"True"})," in ",(0,s.jsx)(n.code,{children:"search_concept_relations()"})," to display concept relationships in a rich, hierarchical tree structure."]}),"\n",(0,s.jsx)(o.A,{groupId:"code",children:(0,s.jsx)(r.A,{value:"python",label:"Python SDK",children:(0,s.jsx)(c.A,{className:"language-python",children:E})})}),"\n",(0,s.jsx)(n.h2,{id:"delete-relations",children:"Delete Relations"}),"\n",(0,s.jsx)(n.p,{children:"Below is an example of how to delete relations between concepts."}),"\n",(0,s.jsxs)(n.admonition,{type:"tip",children:[(0,s.jsxs)(n.p,{children:["You can use either of the following ways to retrieve the ",(0,s.jsx)(n.code,{children:"CONCEPT_RELATION_IDS"}),":"]}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Use the above ",(0,s.jsx)(n.a,{href:"https://docs.clarifai.com/api-guide/concepts/knowledge_graph#list-existing-relations",children:"List Existing Relations"})," method to list ALL existing relations between concepts. Remember to omit the ",(0,s.jsx)(n.code,{children:"predicate"})," parameter."]}),"\n",(0,s.jsxs)(n.li,{children:["Log in to the Portal and access the relations details of your concept. Then, inspect the network activity under your browser's Network Tab. The IDs are under the ",(0,s.jsx)(n.code,{children:"relations"})," category."]}),"\n"]})]}),"\n",(0,s.jsxs)(o.A,{groupId:"code",children:[(0,s.jsx)(r.A,{value:"python",label:"Python (gRPC)",children:(0,s.jsx)(c.A,{className:"language-python",children:d})}),(0,s.jsx)(r.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:I})}),(0,s.jsx)(r.A,{value:"nodejs",label:"Node.js (gRPC)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:T})}),(0,s.jsx)(r.A,{value:"java",label:"Java (gRPC)",children:(0,s.jsx)(c.A,{className:"language-java",children:P})}),(0,s.jsx)(r.A,{value:"php",label:"PHP (gRPC)",children:(0,s.jsx)(c.A,{className:"language-php",children:y})}),(0,s.jsx)(r.A,{value:"curl",label:"cURL",children:(0,s.jsx)(c.A,{className:"language-bash",children:j})})]})]})}function L(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(Y,{...e})}):Y(e)}},65537:(e,n,t)=>{t.d(n,{A:()=>A});var a=t(96540),s=t(18215),i=t(65627),o=t(56347),r=t(50372),c=t(30604),l=t(11861),p=t(78749);function u(e){return a.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function d(e){const{values:n,children:t}=e;return(0,a.useMemo)((()=>{const e=n??function(e){return u(e).map((e=>{let{props:{value:n,label:t,attributes:a,default:s}}=e;return{value:n,label:t,attributes:a,default:s}}))}(t);return function(e){const n=(0,l.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function h(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function _(e){let{queryString:n=!1,groupId:t}=e;const s=(0,o.W6)(),i=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,c.aZ)(i),(0,a.useCallback)((e=>{if(!i)return;const n=new URLSearchParams(s.location.search);n.set(i,e),s.replace({...s.location,search:n.toString()})}),[i,s])]}function E(e){const{defaultValue:n,queryString:t=!1,groupId:s}=e,i=d(e),[o,c]=(0,a.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!h({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const a=t.find((e=>e.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:i}))),[l,u]=_({queryString:t,groupId:s}),[E,C]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[s,i]=(0,p.Dv)(t);return[s,(0,a.useCallback)((e=>{t&&i.set(e)}),[t,i])]}({groupId:s}),f=(()=>{const e=l??E;return h({value:e,tabValues:i})?e:null})();(0,r.A)((()=>{f&&c(f)}),[f]);return{selectedValue:o,selectValue:(0,a.useCallback)((e=>{if(!h({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);c(e),u(e),C(e)}),[u,C,i]),tabValues:i}}var C=t(9136);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var I=t(74848);function m(e){let{className:n,block:t,selectedValue:a,selectValue:o,tabValues:r}=e;const c=[],{blockElementScrollPositionUntilNextRender:l}=(0,i.a_)(),p=e=>{const n=e.currentTarget,t=c.indexOf(n),s=r[t].value;s!==a&&(l(n),o(s))},u=e=>{let n=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const t=c.indexOf(e.currentTarget)+1;n=c[t]??c[0];break}case"ArrowLeft":{const t=c.indexOf(e.currentTarget)-1;n=c[t]??c[c.length-1];break}}n?.focus()};return(0,I.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":t},n),children:r.map((e=>{let{value:n,label:t,attributes:i}=e;return(0,I.jsx)("li",{role:"tab",tabIndex:a===n?0:-1,"aria-selected":a===n,ref:e=>{c.push(e)},onKeyDown:u,onClick:p,...i,className:(0,s.A)("tabs__item",f.tabItem,i?.className,{"tabs__item--active":a===n}),children:t??n},n)}))})}function R(e){let{lazy:n,children:t,selectedValue:i}=e;const o=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=o.find((e=>e.props.value===i));return e?(0,a.cloneElement)(e,{className:(0,s.A)("margin-top--md",e.props.className)}):null}return(0,I.jsx)("div",{className:"margin-top--md",children:o.map(((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==i})))})}function T(e){const n=E(e);return(0,I.jsxs)("div",{className:(0,s.A)("tabs-container",f.tabList),children:[(0,I.jsx)(m,{...n,...e}),(0,I.jsx)(R,{...n,...e})]})}function A(e){const n=(0,C.A)();return(0,I.jsx)(T,{...e,children:u(e.children)},String(n))}},79329:(e,n,t)=>{t.d(n,{A:()=>o});t(96540);var a=t(18215);const s={tabItem:"tabItem_Ymn6"};var i=t(74848);function o(e){let{children:n,hidden:t,className:o}=e;return(0,i.jsx)("div",{role:"tabpanel",className:(0,a.A)(s.tabItem,o),hidden:t,children:n})}}}]);
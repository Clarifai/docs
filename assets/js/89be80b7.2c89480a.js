"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[5579],{85162:(e,n,t)=>{t.d(n,{Z:()=>i});var a=t(67294),s=t(86010);const o={tabItem:"tabItem_Ymn6"};function i(e){let{children:n,hidden:t,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,s.Z)(o.tabItem,i),hidden:t},n)}},74866:(e,n,t)=>{t.d(n,{Z:()=>R});var a=t(87462),s=t(67294),o=t(86010),i=t(12466),r=t(16550),c=t(91980),l=t(67392),p=t(50012);function u(e){return function(e){return s.Children.map(e,(e=>{if(!e||(0,s.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:n,label:t,attributes:a,default:s}}=e;return{value:n,label:t,attributes:a,default:s}}))}function d(e){const{values:n,children:t}=e;return(0,s.useMemo)((()=>{const e=n??u(t);return function(e){const n=(0,l.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function _(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function h(e){let{queryString:n=!1,groupId:t}=e;const a=(0,r.k6)(),o=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,c._X)(o),(0,s.useCallback)((e=>{if(!o)return;const n=new URLSearchParams(a.location.search);n.set(o,e),a.replace({...a.location,search:n.toString()})}),[o,a])]}function E(e){const{defaultValue:n,queryString:t=!1,groupId:a}=e,o=d(e),[i,r]=(0,s.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!_({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const a=t.find((e=>e.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:o}))),[c,l]=h({queryString:t,groupId:a}),[u,E]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[a,o]=(0,p.Nk)(t);return[a,(0,s.useCallback)((e=>{t&&o.set(e)}),[t,o])]}({groupId:a}),C=(()=>{const e=c??u;return _({value:e,tabValues:o})?e:null})();(0,s.useLayoutEffect)((()=>{C&&r(C)}),[C]);return{selectedValue:i,selectValue:(0,s.useCallback)((e=>{if(!_({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);r(e),l(e),E(e)}),[l,E,o]),tabValues:o}}var C=t(72389);const T={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function I(e){let{className:n,block:t,selectedValue:r,selectValue:c,tabValues:l}=e;const p=[],{blockElementScrollPositionUntilNextRender:u}=(0,i.o5)(),d=e=>{const n=e.currentTarget,t=p.indexOf(n),a=l[t].value;a!==r&&(u(n),c(a))},_=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const t=p.indexOf(e.currentTarget)+1;n=p[t]??p[0];break}case"ArrowLeft":{const t=p.indexOf(e.currentTarget)-1;n=p[t]??p[p.length-1];break}}n?.focus()};return s.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":t},n)},l.map((e=>{let{value:n,label:t,attributes:i}=e;return s.createElement("li",(0,a.Z)({role:"tab",tabIndex:r===n?0:-1,"aria-selected":r===n,key:n,ref:e=>p.push(e),onKeyDown:_,onClick:d},i,{className:(0,o.Z)("tabs__item",T.tabItem,i?.className,{"tabs__item--active":r===n})}),t??n)})))}function m(e){let{lazy:n,children:t,selectedValue:a}=e;const o=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=o.find((e=>e.props.value===a));return e?(0,s.cloneElement)(e,{className:"margin-top--md"}):null}return s.createElement("div",{className:"margin-top--md"},o.map(((e,n)=>(0,s.cloneElement)(e,{key:n,hidden:e.props.value!==a}))))}function f(e){const n=E(e);return s.createElement("div",{className:(0,o.Z)("tabs-container",T.tabList)},s.createElement(I,(0,a.Z)({},e,n)),s.createElement(m,(0,a.Z)({},e,n)))}function R(e){const n=(0,C.Z)();return s.createElement(f,(0,a.Z)({key:String(n)},e))}},73052:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>w,contentTitle:()=>N,default:()=>H,frontMatter:()=>y,metadata:()=>S,toc:()=>U});var a=t(87462),s=(t(67294),t(3905)),o=t(74866),i=t(85162),r=t(90814);const c="###################################################################################\n# In this section, we set the user authentication, app ID, subject concept ID, \n# object concept ID, and predicate. Change these strings to run your own example.\n###################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to whatever relations you want to create\nSUBJECT_CONCEPT_ID = 'honey'\nOBJECT_CONCEPT_ID = 'food'\nPREDICATE = \"hypernym\" # This can be hypernym, hyponym, or synonym\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\npost_concept_relation_response = stub.PostConceptRelations(\n    service_pb2.PostConceptRelationsRequest(\n        user_app_id=resources_pb2.UserAppIDSet(\n            user_id=USER_ID,\n            app_id=APP_ID\n        ),\n        concept_id=SUBJECT_CONCEPT_ID,\n        concept_relations=[\n            resources_pb2.ConceptRelation(\n                object_concept=resources_pb2.Concept(id=OBJECT_CONCEPT_ID),\n                predicate=PREDICATE\n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif post_concept_relation_response.status.code != status_code_pb2.SUCCESS:\n    print(post_concept_relation_response.status)\n    raise Exception(\"Post concept relation failed, status: \" + post_concept_relation_response.status.description)\n    \nprint(post_concept_relation_response)",l="######################################################################################\n# In this section, we set the user authentication, app ID, concept ID, and predicate. \n# Change these strings to run your own example.\n######################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to whatever concept you want to list its relations\nCONCEPT_ID = 'honey'\nPREDICATE = \"hypernym\" # This is optional. If skipped, all concept's relations will be returned\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nlist_concept_relation_response = stub.ListConceptRelations(\n    service_pb2.ListConceptRelationsRequest(\n        user_app_id=resources_pb2.UserAppIDSet(\n            user_id=USER_ID,\n            app_id=APP_ID\n        ),\n        concept_id=CONCEPT_ID,\n        predicate=PREDICATE  \n    ),\n    metadata=metadata\n)\n\nif list_concept_relation_response.status.code != status_code_pb2.SUCCESS:\n    print(list_concept_relation_response.status)\n    raise Exception(\"List concept relation failed, status: \" + list_concept_relation_response.status.description)\n\nfor relation in list_concept_relation_response.concept_relations:\n    print(relation) \n",p="###################################################################################\n# In this section, we set the user authentication, app ID, object concept ID, and\n# concept relation IDs. Change these strings to run your own example.\n####################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to whatever relations you want to delete\nOBJECT_CONCEPT_ID = 'YOUR_OBJECT_CONCEPT_ID_HERE'\nCONCEPT_RELATION_IDS = ['0d9b0acb10fb4dac9a9d60a149d8fc5c','f5acf9c2a76143d78daf5f984693c52c']\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\ndelete_concept_relation_response = stub.DeleteConceptRelations(\n    service_pb2.DeleteConceptRelationsRequest(\n        user_app_id=resources_pb2.UserAppIDSet(\n            user_id=USER_ID,\n            app_id=APP_ID\n        ),\n        concept_id=OBJECT_CONCEPT_ID,\n        ids=CONCEPT_RELATION_IDS\n    ),\n    metadata=metadata\n)\n\nif delete_concept_relation_response.status.code != status_code_pb2.SUCCESS:\n    print(delete_concept_relation_response.status)\n    raise Exception(\"Delete concept relation failed, status: \" + delete_concept_relation_response.status.description)\n\n",u="\x3c!--index.html file--\x3e\n\n<script>\n    ////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, subject concept ID, \n    // object concept ID, and predicate. Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = 'YOUR_USER_ID_HERE';\n    // Your PAT (Personal Access Token) can be found in the portal under Authentification\n    const PAT = 'YOUR_PAT_HERE';\n    const APP_ID = 'YOUR_APP_ID_HERE';\n    // Change these to whatever relations you want to create\n    const SUBJECT_CONCEPT_ID = 'honey';\n    const OBJECT_CONCEPT_ID = 'food';\n    const PREDICATE = \"hypernym\"; // This can be hypernym, hyponym, or synonym\n\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        \"user_app_id\": {\n            \"user_id\": USER_ID,\n            \"app_id\": APP_ID\n        },\n        \"concept_relations\": [\n            {\n                \"object_concept\": {\n                    \"id\": OBJECT_CONCEPT_ID\n                },\n                \"predicate\": PREDICATE\n            }\n        ]\n    });\n\n    const requestOptions = {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        },\n        body: raw\n    };\n\n    fetch(\"https://api.clarifai.com/v2/users/me/apps/\" + APP_ID + \"/concepts/\" + SUBJECT_CONCEPT_ID + \"/relations\", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n<\/script>",d="\x3c!--index.html file--\x3e\n\n<script>\n    ////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, concept ID, and predicate.\n    // Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = 'YOUR_USER_ID_HERE';\n    // Your PAT (Personal Access Token) can be found in the portal under Authentification\n    const PAT = 'YOUR_PAT_HERE';\n    const APP_ID = 'YOUR_APP_ID_HERE';\n    // Change these to whatever concept you want to list its relations\n    CONCEPT_ID = 'honey';\n    PREDICATE = \"hypernym\"; //  This is optional. If skipped, all concept's relations will be returned\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const requestOptions = {\n        method: 'GET',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        },\n    };\n\n    fetch(\"https://api.clarifai.com/v2/users/\" + USER_ID + \"/apps/\" + APP_ID + \"/concepts/\" + CONCEPT_ID + \"/relations?predicate=\" + PREDICATE, requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n<\/script>",_="\x3c!--index.html file--\x3e\n\n<script>\n    ////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, object concept ID, and\n    // concept relation IDs. Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = 'YOUR_USER_ID_HERE';\n     // Your PAT (Personal Access Token) can be found in the portal under Authentification\n    const PAT = 'YOUR_PAT_HERE';\n    const APP_ID = 'YOUR_APP_ID_HERE';\n    // Change these to whatever relations you want to delete\n    const OBJECT_CONCEPT_ID = 'YOUR_OBJECT_CONCEPT_ID_HERE';\n    const CONCEPT_RELATION_IDS = ['0d9b0acb10fb4dac9a9d60a149d8fc5c','f5acf9c2a76143d78daf5f984693c52c'];\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        \"ids\": CONCEPT_RELATION_IDS\n    });\n\n    const requestOptions = {\n        method: 'DELETE',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        },\n        body: raw\n    };\n\n    fetch(\"https://api.clarifai.com/v2/users/\" + USER_ID + \"/apps/\" + APP_ID + \"/concepts/\" + OBJECT_CONCEPT_ID + \"/relations\", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n<\/script>",h='//index.js file\n\n////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, subject concept ID,\n// object concept ID, and predicate. Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n// Change these to whatever relations you want to create\nconst SUBJECT_CONCEPT_ID = \'honey\';\nconst OBJECT_CONCEPT_ID = \'food\';\nconst PREDICATE = "hypernym"; // This can be hypernym, hyponym, or synonym.\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PostConceptRelations(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        concept_id: SUBJECT_CONCEPT_ID,\n        concept_relations: [\n            {\n                object_concept: {\n                    id: OBJECT_CONCEPT_ID,\n                },\n                predicate: PREDICATE\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Create concept relations failed, status: " + response.status.description);\n        }\n    }\n);',E='//index.js file\n\n///////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, concept ID, and predicate.\n// Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n// Change these to whatever concept you want to list its relations\nconst CONCEPT_ID = \'honey\';\nconst PREDICATE = "hypernym"; // This is optional. If skipped, all concept\'s relations will be returned\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.ListConceptRelations(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        concept_id: CONCEPT_ID,\n        predicate: PREDICATE\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("List concept relations failed, status: " + response.status.description);\n        }\n\n        for (const relation of response.concept_relations) {\n            console.log(relation);\n        }\n    }\n);',C="//index.js file\n\n//////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, object concept ID, and\n// concept relation IDs. Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = 'YOUR_USER_ID_HERE';\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\nconst PAT = 'YOUR_PAT_HERE';\nconst APP_ID = 'YOUR_APP_ID_HERE';\n// Change these to whatever relations you want to delete\nconst OBJECT_CONCEPT_ID = 'YOUR_OBJECT_CONCEPT_ID_HERE';\nconst CONCEPT_RELATION_IDS = ['0d9b0acb10fb4dac9a9d60a149d8fc5c','f5acf9c2a76143d78daf5f984693c52c'];\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require(\"clarifai-nodejs-grpc\");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set(\"authorization\", \"Key \" + PAT);\n\nstub.DeleteConceptRelations(\n    {\n        user_app_id: {\n            \"user_id\": USER_ID,\n            \"app_id\": APP_ID\n        },\n        concept_id: OBJECT_CONCEPT_ID,\n        ids: CONCEPT_RELATION_IDS        \n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error(\"Delete concept relations failed, status: \" + response.status.description);\n        }\n    }\n);",T='package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    ///////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, subject concept ID, \n    // object concept ID, and predicate. Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\t\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to whatever relations you want to create\n    static final String SUBJECT_CONCEPT_ID = "honey";\n    static final String OBJECT_CONCEPT_ID = "food";\n    static final String PREDICATE = "hypernym"; // This can be hypernym, hyponym, or synonym\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\t\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiConceptRelationResponse postConceptRelationsResponse = stub.postConceptRelations(\n            PostConceptRelationsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID).build())\n            .setConceptId(SUBJECT_CONCEPT_ID)\n            .addConceptRelations(\n                ConceptRelation.newBuilder()\n                .setObjectConcept(Concept.newBuilder().setId(OBJECT_CONCEPT_ID).build())\n                .setPredicate(PREDICATE).build())\n            .build()\n        );\n\n        if (postConceptRelationsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post concept relations failed, status: " + postConceptRelationsResponse.getStatus());\n        }\n\n        System.out.println(postConceptRelationsResponse);\n\n    }\n\n}',I='package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    ////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, concept ID, and predicate. \n    // Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\t\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to whatever concept you want to list its relations\n    static final String CONCEPT_ID = "honey";\n    static final String PREDICATE = "hypernym"; // This is optional. If skipped, all concept\'s relations will be returned\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\t\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiConceptRelationResponse listConceptRelationsResponse = stub.listConceptRelations(\n            ListConceptRelationsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID).build())\n            .setConceptId(CONCEPT_ID)\n            .setPredicate(PREDICATE)\n            .build()\n        );\n\n        if (listConceptRelationsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("List concept relations failed, status: " + listConceptRelationsResponse.getStatus());\n        }\n\n        for (ConceptRelation relation: listConceptRelationsResponse.getConceptRelationsList()) {\n            System.out.println(relation);\n        }\n\n    }\n\n}',m='package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.status.BaseResponse;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    /////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, object concept ID, and\n    // concept relation IDs. Change these strings to run your own example.\n    /////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\t\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to whatever relations you want to delete\n    static final String OBJECT_CONCEPT_ID = "YOUR_OBJECT_CONCEPT_ID_HERE";\n    static final String CONCEPT_RELATION_ID_1 = "0d9b0acb10fb4dac9a9d60a149d8fc5c";\n    static final String CONCEPT_RELATION_ID_2 = "f5acf9c2a76143d78daf5f984693c52c";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\t\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        BaseResponse deleteConceptRelationsResponse = stub.deleteConceptRelations(\n            DeleteConceptRelationsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID).build())\n            .addIds(CONCEPT_RELATION_ID_1)\n            .addIds(CONCEPT_RELATION_ID_2)\n            .setConceptId(OBJECT_CONCEPT_ID)\n            .build()\n        );\n\n        if (deleteConceptRelationsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Delete concept relations failed, status: " + deleteConceptRelationsResponse.getStatus());\n        }\n\n    }\n\n}',f='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, subject concept ID, \n// object concept ID, and predicate. Change these strings to run your own example.\n///////////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change these to whatever relations you want to create\n$SUBJECT_CONCEPT_ID = "honey";\n$OBJECT_CONCEPT_ID = "food";\n$PREDICATE = "hypernym"; // This can be hypernym, hyponym, or synonym\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\PostConceptRelationsRequest;\nuse Clarifai\\Api\\ConceptRelation;\nuse Clarifai\\Api\\Concept;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PostConceptRelations(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new PostConceptRelationsRequest([\n        "user_app_id" => $userDataObject, \n        "concept_id" => $SUBJECT_CONCEPT_ID,\n        "concept_relations" => [\n            new ConceptRelation([\n                "object_concept" => new Concept(["id" => $OBJECT_CONCEPT_ID ]),\n                "predicate" => $PREDICATE\n            ])\n        ]\n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\nprint $response->serializeToJsonString();\n\n?>',R='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, concept ID, and predicate.\n// Change these strings to run your own example.\n///////////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change these to whatever concept you want to list its relations\n$CONCEPT_ID = \'honey\';\n$PREDICATE = "hypernym"; // This is optional. If skipped, all concept\'s relations will be returned\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\ListConceptRelationsRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->ListConceptRelations(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new ListConceptRelationsRequest([\n        "user_app_id" => $userDataObject, \n        "concept_id" => $CONCEPT_ID,\n        "predicate" => $PREDICATE      \n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\nforeach ($response->getConceptRelations() as $concept) {\n    echo $concept->SerializeToJsonString() . "</br>";\n}\n\n?>',g='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, object concept ID, and\n// concept relation IDs. Change these strings to run your own example.\n///////////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change these to whatever relations you want to delete\n$OBJECT_CONCEPT_ID = "YOUR_OBJECT_CONCEPT_ID_HERE";\n$CONCEPT_RELATION_IDS = ["0d9b0acb10fb4dac9a9d60a149d8fc5c","f5acf9c2a76143d78daf5f984693c52c"];\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\DeleteConceptRelationsRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->DeleteConceptRelations(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new DeleteConceptRelationsRequest([\n        "user_app_id" => $userDataObject, \n        "concept_id" => $OBJECT_CONCEPT_ID,\n        "ids" => $CONCEPT_RELATION_IDS      \n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\n?>',b='curl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/concepts/YOUR_SUBJECT_CONCEPT_ID_HERE/relations" \\\n    -H "Authorization: Key YOUR_PAT_HERE" \\\n    -H "Content-Type: application/json" \\\n    --data-raw \'{\n        "concept_relations": [\n            {\n                "object_concept": {\n                    "id": "YOUR_OBJECT_CONCEPT_ID_HERE"\n                },\n                "predicate": "hypernym"\n            }\n        ]\n    }\'',P='# Setting the predicate parameter is optional. If skipped, all concept\'s relations will be returned.\n\ncurl -X GET "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/concepts/YOUR_CONCEPT_ID_HERE/relations?predicate=hypernym" \\\n    -H "Authorization: Key YOUR_PAT_HERE" \\\n    -H "Content-Type: application/json"',D='curl -X DELETE "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/concepts/YOUR_OBJECT_CONCEPT_ID_HERE/relations" \\\n    -H "Authorization: Key YOUR_PAT_HERE" \\\n    -H "Content-Type: application/json" \\\n    --data-raw \'{\n        "ids": [\n            "CONCEPT_RELATION_ID_1", "CONCEPT_RELATION_ID_2"\n        ]\n    }\'',A='status {\n    code: SUCCESS\n    description: "Ok"\n    req_id: "0d0a5ec5df14d62a7d660f392ce26727"\n  }\n  concept_relations {\n    id: "2d794e5ede534500b4ac7da44ef570ee"\n    subject_concept {\n      id: "honey"\n      name: "honey"\n      value: 1.0\n      created_at {\n        seconds: 1643976334\n        nanos: 237961000\n      }\n      language: "en"\n      app_id: "a39423543bb941bf9ba2ee95fad11f0a"\n      visibility {\n        gettable: PRIVATE\n      }\n      user_id: "e5y2lteoz3s3iy"\n    }\n    object_concept {\n      id: "food"\n      name: "food"\n      value: 1.0\n      created_at {\n        seconds: 1643976326\n        nanos: 123719000\n      }\n      language: "en"\n      app_id: "a39423543bb941bf9ba2ee95fad11f0a"\n      visibility {\n        gettable: PRIVATE\n      }\n      user_id: "ei2leoz3s3iy"\n    }\n    predicate: "hypernym"\n    visibility {\n      gettable: PRIVATE\n    }\n  }',O='id: "2d794e5ede534500b4ac7da44ef570ee"\nsubject_concept {\n  id: "honey"\n  name: "honey"\n  value: 1.0\n  created_at {\n    seconds: 1643976334\n    nanos: 237961000\n  }\n  language: "en"\n  app_id: "a39423543bb941bf9ba2ee95fad11f0a"\n  visibility {\n    gettable: PRIVATE\n  }\n  user_id: "ei2leoz3s3iy"\n}\nobject_concept {\n  id: "food"\n  name: "food"\n  value: 1.0\n  created_at {\n    seconds: 1643976326\n    nanos: 123719000\n  }\n  language: "en"\n  app_id: "a39423543bb941bf9ba2ee95fad11f0a"\n  visibility {\n    gettable: PRIVATE\n  }\n  user_id: "ei2leoz3s3iy"\n}\npredicate: "hypernym"\nvisibility {\n  gettable: PRIVATE\n}',y={description:"Connect the knowledge gained by different models.",sidebar_position:4},N="Knowledge Graph",S={unversionedId:"api-guide/concepts/knowledge_graph",id:"api-guide/concepts/knowledge_graph",title:"Knowledge Graph",description:"Connect the knowledge gained by different models.",source:"@site/docs/api-guide/concepts/knowledge_graph.md",sourceDirName:"api-guide/concepts",slug:"/api-guide/concepts/knowledge_graph",permalink:"/api-guide/concepts/knowledge_graph",draft:!1,editUrl:"https://github.com/Clarifai/docs/blob/main/docs/api-guide/concepts/knowledge_graph.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{description:"Connect the knowledge gained by different models.",sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Search by Concept",permalink:"/api-guide/concepts/search-by-concept"},next:{title:"Labeling Your Data",permalink:"/api-guide/annotate/"}},w={},U=[{value:"Create Relations",id:"create-relations",level:2},{value:"List Existing Relations",id:"list-existing-relations",level:2},{value:"Delete Relations",id:"delete-relations",level:2}],k={toc:U},v="wrapper";function H(e){let{components:n,...y}=e;return(0,s.kt)(v,(0,a.Z)({},k,y,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"knowledge-graph"},"Knowledge Graph"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Connect the knowledge gained by different models")),(0,s.kt)("hr",null),(0,s.kt)("p",null,(0,s.kt)("img",{src:t(78373).Z,width:"936",height:"448"})),(0,s.kt)("p",null,"The Knowledge Graph uses Clarifai's concept mapping model to establish a hierarchical relationship between your concepts."),(0,s.kt)("p",null,"It uses three different ",(0,s.kt)("em",{parentName:"p"},"predicates")," to organize your concepts: hypernyms, hyponyms, and synonyms."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Hyponym")," \u2014 represents an 'is a kind of' relation. For example, the relationship described as 'honey' ","(","subject",")",", 'hyponym' ","(","predicate",")",", 'food' ","(","object",")"," is more easily read as 'honey' 'is a kind of' 'food'."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Hypernym")," \u2014 is the opposite of 'hyponym'. When you add the relationship, the opposite will automatically appear in your queries. An 'hypernym' can be read as 'is a parent of'. For example, 'food' ","(","subject",")",", 'hypernym' ","(","predicate",")",", 'honey' ","(","object",")"," is more easily read as 'food' is a parent of 'honey'."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Synonym"),' \u2014 defines two concepts that essentially mean the same thing. This is more like an "is" relationship. For example, a \'synonym\' relationship could be "puppy" is "pup". The reverse is also true if the former is added; so, "pup" is "puppy" will appear in queries as well.'),(0,s.kt)("h2",{id:"create-relations"},"Create Relations"),(0,s.kt)("p",null,"To create a relation between two concepts, you first have to create them in your custom model. See the  ",(0,s.kt)("a",{parentName:"p",href:"https://docs.clarifai.com/api-guide/concepts/create-get-update/"},"Concepts section")," on how to do that programatically."),(0,s.kt)("p",null,"Each relation should have a specified predicate, which can be ",(0,s.kt)("em",{parentName:"p"},"hyponym"),", ",(0,s.kt)("em",{parentName:"p"},"hypernym"),", or ",(0,s.kt)("em",{parentName:"p"},"synonym"),"."),(0,s.kt)("p",null,"Below is an example of how to create a relation between two concepts. "),(0,s.kt)("admonition",{type:"info"},(0,s.kt)("p",{parentName:"admonition"},"The initialization code used in the following examples is outlined in detail on the ",(0,s.kt)("a",{parentName:"p",href:"https://docs.clarifai.com/api-guide/api-overview/api-clients/#client-installation-instructions"},"client installation page."))),(0,s.kt)(o.Z,{mdxType:"Tabs"},(0,s.kt)(i.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,s.kt)(r.Z,{className:"language-python",mdxType:"CodeBlock"},c)),(0,s.kt)(i.Z,{value:"js_rest",label:"JavaScript (REST)",mdxType:"TabItem"},(0,s.kt)(r.Z,{className:"language-javascript",mdxType:"CodeBlock"},u)),(0,s.kt)(i.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,s.kt)(r.Z,{className:"language-javascript",mdxType:"CodeBlock"},h)),(0,s.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,s.kt)(r.Z,{className:"language-java",mdxType:"CodeBlock"},T)),(0,s.kt)(i.Z,{value:"php",label:"PHP",mdxType:"TabItem"},(0,s.kt)(r.Z,{className:"language-php",mdxType:"CodeBlock"},f)),(0,s.kt)(i.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,s.kt)(r.Z,{className:"language-bash",mdxType:"CodeBlock"},b))),(0,s.kt)("details",null,(0,s.kt)("summary",null,"JSON Output Example"),(0,s.kt)(r.Z,{className:"language-js",mdxType:"CodeBlock"},A)),(0,s.kt)("h2",{id:"list-existing-relations"},"List Existing Relations"),(0,s.kt)("p",null,"Below is an example of how to list existing relations between concepts. "),(0,s.kt)(o.Z,{mdxType:"Tabs"},(0,s.kt)(i.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,s.kt)(r.Z,{className:"language-python",mdxType:"CodeBlock"},l)),(0,s.kt)(i.Z,{value:"js_rest",label:"JavaScript (REST)",mdxType:"TabItem"},(0,s.kt)(r.Z,{className:"language-javascript",mdxType:"CodeBlock"},d)),(0,s.kt)(i.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,s.kt)(r.Z,{className:"language-javascript",mdxType:"CodeBlock"},E)),(0,s.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,s.kt)(r.Z,{className:"language-java",mdxType:"CodeBlock"},I)),(0,s.kt)(i.Z,{value:"php",label:"PHP",mdxType:"TabItem"},(0,s.kt)(r.Z,{className:"language-php",mdxType:"CodeBlock"},R)),(0,s.kt)(i.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,s.kt)(r.Z,{className:"language-bash",mdxType:"CodeBlock"},P))),(0,s.kt)("details",null,(0,s.kt)("summary",null,"JSON Output Example"),(0,s.kt)(r.Z,{className:"language-js",mdxType:"CodeBlock"},O)),(0,s.kt)("h2",{id:"delete-relations"},"Delete Relations"),(0,s.kt)("p",null,"Below is an example of how to delete relations between concepts. "),(0,s.kt)("admonition",{type:"tip"},(0,s.kt)("p",{parentName:"admonition"},"You can use either of the following ways to retrieve the ",(0,s.kt)("inlineCode",{parentName:"p"},"CONCEPT_RELATION_IDS"),":"),(0,s.kt)("ul",{parentName:"admonition"},(0,s.kt)("li",{parentName:"ul"},"Use the above ",(0,s.kt)("a",{parentName:"li",href:"https://docs.clarifai.com/api-guide/concepts/knowledge_graph#list-existing-relations"},"List Existing Relations")," method to list ALL existing relations between concepts. Remember to omit the ",(0,s.kt)("inlineCode",{parentName:"li"},"predicate")," parameter. "),(0,s.kt)("li",{parentName:"ul"},"Log in to the Portal and access the relations details of your concept. Then, inspect the network activity under your browser's Network Tab. The IDs are under the ",(0,s.kt)("inlineCode",{parentName:"li"},"relations")," category. "))),(0,s.kt)(o.Z,{mdxType:"Tabs"},(0,s.kt)(i.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,s.kt)(r.Z,{className:"language-python",mdxType:"CodeBlock"},p)),(0,s.kt)(i.Z,{value:"js_rest",label:"JavaScript (REST)",mdxType:"TabItem"},(0,s.kt)(r.Z,{className:"language-javascript",mdxType:"CodeBlock"},_)),(0,s.kt)(i.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,s.kt)(r.Z,{className:"language-javascript",mdxType:"CodeBlock"},C)),(0,s.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,s.kt)(r.Z,{className:"language-java",mdxType:"CodeBlock"},m)),(0,s.kt)(i.Z,{value:"php",label:"PHP",mdxType:"TabItem"},(0,s.kt)(r.Z,{className:"language-php",mdxType:"CodeBlock"},g)),(0,s.kt)(i.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,s.kt)(r.Z,{className:"language-bash",mdxType:"CodeBlock"},D))))}H.isMDXComponent=!0},78373:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/kg6-845a036f5276eb9b39c7349452d1f495.png"}}]);
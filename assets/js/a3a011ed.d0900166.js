"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[8122],{8215:function(e,n,a){var t=a(7294);n.Z=function(e){var n=e.children,a=e.hidden,s=e.className;return t.createElement("div",{role:"tabpanel",hidden:a,className:s},n)}},6396:function(e,n,a){a.d(n,{Z:function(){return h}});var t=a(7462),s=a(7294),r=a(2389),c=a(9443);var i=function(){var e=(0,s.useContext)(c.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},o=a(3616),p=a(6010),l="tabItem_vU9c";function u(e){var n,a,r,c=e.lazy,u=e.block,h=e.defaultValue,d=e.values,m=e.groupId,g=e.className,f=s.Children.map(e.children,(function(e){if((0,s.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),y=null!=d?d:f.map((function(e){var n=e.props;return{value:n.value,label:n.label,attributes:n.attributes}})),_=(0,o.lx)(y,(function(e,n){return e.value===n.value}));if(_.length>0)throw new Error('Docusaurus error: Duplicate values "'+_.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var b=null===h?h:null!=(n=null!=h?h:null==(a=f.find((function(e){return e.props.default})))?void 0:a.props.value)?n:null==(r=f[0])?void 0:r.props.value;if(null!==b&&!y.some((function(e){return e.value===b})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+b+'" but none of its children has the corresponding value. Available values are: '+y.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var S=i(),C=S.tabGroupChoices,I=S.setTabGroupChoices,v=(0,s.useState)(b),T=v[0],w=v[1],k=[],R=(0,o.o5)().blockElementScrollPositionUntilNextRender;if(null!=m){var N=C[m];null!=N&&N!==T&&y.some((function(e){return e.value===N}))&&w(N)}var P=function(e){var n=e.currentTarget,a=k.indexOf(n),t=y[a].value;t!==T&&(R(n),w(t),null!=m&&I(m,t))},E=function(e){var n,a=null;switch(e.key){case"ArrowRight":var t=k.indexOf(e.currentTarget)+1;a=k[t]||k[0];break;case"ArrowLeft":var s=k.indexOf(e.currentTarget)-1;a=k[s]||k[k.length-1]}null==(n=a)||n.focus()};return s.createElement("div",{className:"tabs-container"},s.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,p.Z)("tabs",{"tabs--block":u},g)},y.map((function(e){var n=e.value,a=e.label,r=e.attributes;return s.createElement("li",(0,t.Z)({role:"tab",tabIndex:T===n?0:-1,"aria-selected":T===n,key:n,ref:function(e){return k.push(e)},onKeyDown:E,onFocus:P,onClick:P},r,{className:(0,p.Z)("tabs__item",l,null==r?void 0:r.className,{"tabs__item--active":T===n})}),null!=a?a:n)}))),c?(0,s.cloneElement)(f.filter((function(e){return e.props.value===T}))[0],{className:"margin-vert--md"}):s.createElement("div",{className:"margin-vert--md"},f.map((function(e,n){return(0,s.cloneElement)(e,{key:n,hidden:e.props.value!==T})}))))}function h(e){var n=(0,r.Z)();return s.createElement(u,(0,t.Z)({key:String(n)},e))}},520:function(e,n,a){a.r(n),a.d(n,{contentTitle:function(){return u},default:function(){return g},frontMatter:function(){return l},metadata:function(){return h},toc:function(){return d}});var t=a(7462),s=a(3366),r=(a(7294),a(3905)),c=a(6396),i=a(8215),o=a(9055),p=["components"],l={description:"Search your data based on concepts or visual similarity",sidebar_position:3},u="Rank",h={unversionedId:"api-guide/search/legacy-search/rank",id:"api-guide/search/legacy-search/rank",title:"Rank",description:"Search your data based on concepts or visual similarity",source:"@site/docs/api-guide/search/legacy-search/rank.md",sourceDirName:"api-guide/search/legacy-search",slug:"/api-guide/search/legacy-search/rank",permalink:"/api-guide/search/legacy-search/rank",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/api-guide/search/legacy-search/rank.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{description:"Search your data based on concepts or visual similarity",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Filter",permalink:"/api-guide/search/legacy-search/filter"},next:{title:"Saved Searches",permalink:"/api-guide/search/legacy-search/saved_searches"}},d=[{value:"Search by Concepts",id:"search-by-concepts",children:[{value:"By Clarifai/main App Concepts",id:"by-clarifaimain-app-concepts",children:[],level:3},{value:"By Custom Concepts",id:"by-custom-concepts",children:[],level:3},{value:"By Clarifai/main and Custom Concepts",id:"by-clarifaimain-and-custom-concepts",children:[],level:3},{value:"By Concept in Another Language",id:"by-concept-in-another-language",children:[],level:3}],level:2},{value:"Search by Visual Similarity",id:"search-by-visual-similarity",children:[{value:"By Image",id:"by-image",children:[],level:3},{value:"By URL",id:"by-url",children:[],level:3}],level:2}],m={toc:d};function g(e){var n=e.components,a=(0,s.Z)(e,p);return(0,r.kt)("wrapper",(0,t.Z)({},m,a,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"rank"},"Rank"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Search your data based on concepts or visual similarity")),(0,r.kt)("hr",null),(0,r.kt)("p",null,"Rank Order your search results with the intuitive insights of AI. Your model can identify concepts in your data and rank your search results by how confident it is that a given concept is present. You can even rank search results by how similar one input is to another input."),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"The initialization code used in the following example is outlined in detail on the ",(0,r.kt)("a",{parentName:"p",href:"../../api-overview/api-clients#client-installation-instructions"},"client installation page.")))),(0,r.kt)("h2",{id:"search-by-concepts"},"Search by Concepts"),(0,r.kt)("p",null,"Once your images are indexed, you can search for them by concepts."),(0,r.kt)("h3",{id:"by-clarifaimain-app-concepts"},"By Clarifai/main App Concepts"),(0,r.kt)("p",null,"When you add an input, it automatically gets predictions from the models in your default, which are typically models from the Clarifai/main app, such as the General model. You can search by those predictions."),(0,r.kt)(c.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"grpc_python",label:"gRPC Python",mdxType:"TabItem"},(0,r.kt)(o.Z,{className:"language-python",mdxType:"CodeBlock"},"##################################################################################\n# In this section, we set the user authentication, app ID, and the concept ID we  \n# we want to rank by. Change these strings to run your own example.\n##################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change this to rank by a Clarifai/main concept\nCONCEPT_ID = 'ai_fvlBqXZR'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID) # The userDataObject is required when using a PAT\n\npost_searches_response = stub.PostSearches(\n    service_pb2.PostSearchesRequest(\n        user_app_id=userDataObject,\n        query=resources_pb2.Query(\n            ands=[\n                resources_pb2.And(\n                    output=resources_pb2.Output( # Setting Output indicates we search for images that have the concept(s)\n                                                 # which were predicted by the General model\n                        data=resources_pb2.Data(\n                            concepts=[  # You can search by multiple concepts\n                                resources_pb2.Concept(\n                                    name=CONCEPT_ID,  # You could search by concept ID as well\n                                    value=1  # Value of 0 will search for images that don't have the concept\n                                )\n                            ]\n                        )\n                    )\n                )\n            ]\n        )\n    ),\n    metadata=metadata\n)\n\nif post_searches_response.status.code != status_code_pb2.SUCCESS:\n    print(post_searches_response.status)\n    raise Exception(\"Post searches failed, status: \" + post_searches_response.status.description)\n\nprint(\"Found inputs:\")\nfor hit in post_searches_response.hits:\n    print(\"\\tScore %.2f for %s\" % (hit.score, hit.input.id))")),(0,r.kt)(i.Z,{value:"grpc_java",label:"gRPC Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nMultiSearchResponse postSearchesResponse = stub.postSearches(\n    PostSearchesRequest.newBuilder().setQuery(\n        Query.newBuilder().addAnds(\n            And.newBuilder().setOutput( // Setting Output indicates we search for images that have the concept(s)\n                                        // which were predicted by the General model.\n                Output.newBuilder().setData(\n                    Data.newBuilder().addConcepts(  // You can search by multiple concepts.\n                        Concept.newBuilder()\n                            .setName("people")  // You could search by concept ID as well.\n                            .setValue(1f)  // Value of 0 will search for images that don\'t have the concept.\n                    )\n                )\n            )\n        )\n    )\n    .build()\n);\n\nif (postSearchesResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n  throw new RuntimeException("Post searches failed, status: " + postSearchesResponse.getStatus());\n}\n\nSystem.out.println("Found inputs " + postSearchesResponse.getHitsCount() + ":");\nfor (Hit hit : postSearchesResponse.getHitsList()) {\n    System.out.printf("\\tScore %.2f for %s\\n", hit.getScore(), hit.getInput().getId());\n}\n'))),(0,r.kt)(i.Z,{value:"grpc_nodejs",label:"gRPC NodeJS",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nstub.PostSearches(\n    {\n        query: {\n            ands: [\n                {\n                    output: {  // Setting Output indicates we search for images that have the concept(s)\n                               // which were predicted by the General model.\n                        data: {\n                            concepts: [  // You can search by multiple concepts.\n                                {\n                                    name: "people",  // You could search by concept ID as well.\n                                    value: 1  // Value of 0 will search for images that don\'t have the concept\n                                }\n                            ]\n                        }\n                    }\n                }\n            ]\n        }\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post searches failed, status: " + response.status.description);\n        }\n\n        console.log("Found inputs:");\n        for (const hit of response.hits) {\n            console.log("\\tScore " + hit.score + " for " + hit.input.id);\n        }\n    }\n);\n'))),(0,r.kt)(i.Z,{value:"javascript",label:"Javascript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"app.inputs.search([\n  {\n    concept: {\n      name: 'cat'\n    }\n  },\n  {\n    concept: {\n      name: 'dog'\n    }\n  }\n]).then(\n  function(response) {\n    // do something with response\n  },\n  function(err) {\n    // there was an error\n  }\n);\n"))),(0,r.kt)(i.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from clarifai.rest import ClarifaiApp\napp = ClarifaiApp(api_key='YOUR_CLARIFAI_KEY')\n\n# search by single concept name\napp.inputs.search_by_predicted_concepts(concept='cat')\n\n# search by single concept id\napp.inputs.search_by_predicted_concepts(concept_id='ai_mFqxrph2')\n\n# search by multiple concepts with name\napp.inputs.search_by_predicted_concepts(concepts=['cat', 'cute'])\n\n# search by multiple concepts with ids\napp.inputs.search_by_predicted_concepts(concept_ids=['ai_mFqxrph2', 'ai_4CRlSvbV'])\n\n# search by multiple concepts with not logic\napp.inputs.search_by_predicted_concepts(concepts=['cat', 'dog'], values=[True, False])\n"))),(0,r.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'// Search concept by name\nclient.searchInputs(SearchClause.matchConcept(Concept.forName("cat")))\n    .getPage(1)\n    .executeSync();\n\n// Search concept by ID\nclient.searchInputs(SearchClause.matchConcept(Concept.forID("ai_mFqxrph2")))\n    .getPage(1)\n    .executeSync();\n\n// Search multiple concepts\nclient.searchInputs(SearchClause.matchConcept(Concept.forID("cat")))\n    .and(SearchClause.matchConcept(Concept.forID("cute")))\n    .getPage(1)\n    .executeSync();\n\n// Search NOT by concept\nclient.searchInputs(SearchClause.matchConcept(Concept.forID("cat").withValue(false)))\n    .getPage(1)\n    .executeSync();\n'))),(0,r.kt)(i.Z,{value:"csharp",label:"C#",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'using System.Threading.Tasks;\nusing Clarifai.API;\nusing Clarifai.DTOs.Searches;\n\nnamespace YourNamespace\n{\n    public class YourClassName\n    {\n        public static async Task Main()\n        {\n            var client = new ClarifaiClient("YOUR_API_KEY");\n\n            // Search concept by name\n            await client.SearchInputs(SearchBy.ConceptName("cat"))\n                .Page(1)\n                .ExecuteAsync();\n\n            // Search concept by ID\n            await client.SearchInputs(SearchBy.ConceptID("cat"))\n                .Page(1)\n                .ExecuteAsync();\n\n            // Search multiple concepts\n            await client.SearchInputs(\n                    SearchBy.ConceptID("cat"),\n                    SearchBy.ConceptID("cute"))\n                .Page(1)\n                .ExecuteAsync();\n        }\n    }\n}\n'))),(0,r.kt)(i.Z,{value:"objective-c",label:"Objective-C",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},'// First create a search term with a concept you want to search.\nClarifaiConcept *conceptFromGeneralModel = [[ClarifaiConcept alloc] initWithConceptName:@"fast"];\nClarifaiSearchTerm *searchTerm = [ClarifaiSearchTerm searchByPredictedConcept:conceptFromGeneralModel];\n\n[app search:@[searchTerm] page:@1 perPage:@20 completion:^(NSArray<ClarifaiSearchResult *> *results, NSError *error) {\n  // Print output of first search result.\n  NSLog(@"inputID: %@", results[0].inputID);\n  NSLog(@"URL: %@", results[0].mediaURL);\n  NSLog(@"probability of input matching search query: %@", results[0].score);\n}];\n'))),(0,r.kt)(i.Z,{value:"php",label:"PHP",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"use Clarifai\\API\\ClarifaiClient;\nuse Clarifai\\DTOs\\Searches\\SearchBy;\nuse Clarifai\\DTOs\\Searches\\SearchInputsResult;\n\n$client = new ClarifaiClient('YOUR_API_KEY');\n\n// Search concept by name\n$response = $client->searchInputs(SearchBy::conceptName('cat'))\n    ->executeSync();\n\n/*\n// Search concept by ID\n$response = $client->searchInputs(SearchBy::conceptID('cat'))\n    ->executeSync();\n*/\n\n/*\n// Search multiple concepts\n$response = $client->searchInputs([SearchBy::conceptID('cat'), SearchBy::conceptID('cute')])\n    ->executeSync();\n*/\n\nif ($response->isSuccessful()) {\n    echo \"Response is successful.\\n\";\n\n    /** @var SearchInputsResult $result */\n    $result = $response->get();\n\n    foreach ($result->searchHits() as $searchHit) {\n        echo $searchHit->input()->id() . ' ' . $searchHit->score() . \"\\n\";\n    }\n} else {\n    echo \"Response is not successful. Reason: \\n\";\n    echo $response->status()->description() . \"\\n\";\n    echo $response->status()->errorDetails() . \"\\n\";\n    echo \"Status code: \" . $response->status()->statusCode();\n}\n"))),(0,r.kt)(i.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},'# Setting "output" indicates we search for images that have the concept(s) which were predicted by\n# the General model.\n#\n# Value of 0 will search for images that don\'t have the concept.\n#\n# Instead of "name" you can search by "id" as well.\n\ncurl -X POST \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'\n  {\n    "query": {\n      "ands": [\n        {\n          "output": {\n            "data": {\n              "concepts": [\n                {\n                  "name":"people",\n                  "value": 1\n                }\n              ]\n            }\n          }\n        }\n      ]\n    }\n  }\'\\\n  https://api.clarifai.com/v2/searches\n')))),(0,r.kt)("h3",{id:"by-custom-concepts"},"By Custom Concepts"),(0,r.kt)("p",null,"After you have added inputs with concepts, you can search by those concepts."),(0,r.kt)(c.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"grpc_python",label:"gRPC Python",mdxType:"TabItem"},(0,r.kt)(o.Z,{className:"language-python",mdxType:"CodeBlock"},"########################################################################################\n# In this section, we set the user authentication, app ID, and the custom concept we  \n# we want to rank by. Change these strings to run your own example.\n########################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change this to rank by your own custom concept\nCONCEPT_ID = 'people'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID) # The userDataObject is required when using a PAT\n\npost_searches_response = stub.PostSearches(\n    service_pb2.PostSearchesRequest(\n        user_app_id=userDataObject,\n        query=resources_pb2.Query(\n            ands=[\n                resources_pb2.And(\n                    input=resources_pb2.Input(  # Setting Input indicates we search for images that have the concept(s)\n                                                # which we added to the input manually\n                        data=resources_pb2.Data(\n                            concepts=[  # You can search by multiple concepts\n                                resources_pb2.Concept(\n                                    name=CONCEPT_ID,  # You could search by concept ID as well\n                                    value=1  # Value of 0 will search for images that we marked not to have the concept\n                                )\n                            ]\n                        )\n                    )\n                )\n            ]\n        )\n    ),\n    metadata=metadata\n)\n\nif post_searches_response.status.code != status_code_pb2.SUCCESS:\n    print(post_searches_response.status)\n    raise Exception(\"Post searches failed, status: \" + post_searches_response.status.description)\n\nprint(\"Found inputs:\")\nfor hit in post_searches_response.hits:\n    print(\"\\tScore %.2f for %s\" % (hit.score, hit.input.id))")),(0,r.kt)(i.Z,{value:"grpc_java",label:"gRPC Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nMultiSearchResponse postSearchesResponse = stub.postSearches(\n    PostSearchesRequest.newBuilder().setQuery(\n        Query.newBuilder().addAnds(\n            And.newBuilder().setInput( // Setting Input indicates we search for images that have the concept(s)\n                                       // which we added to the input manually.\n                Input.newBuilder().setData(\n                    Data.newBuilder().addConcepts(  // You can search by multiple concepts.\n                        Concept.newBuilder()\n                            .setName("people")  // You could search by concept ID as well.\n                            .setValue(1f)  // Value of 0 will search for images that we marked not to have the concept.\n                    )\n                )\n            )\n        )\n    )\n    .build()\n);\n\nif (postSearchesResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n  throw new RuntimeException("Post searches failed, status: " + postSearchesResponse.getStatus());\n}\n\nSystem.out.println("Found inputs " + postSearchesResponse.getHitsCount() + ":");\nfor (Hit hit : postSearchesResponse.getHitsList()) {\n    System.out.printf("\\tScore %.2f for %s\\n", hit.getScore(), hit.getInput().getId());\n}\n'))),(0,r.kt)(i.Z,{value:"grpc_nodejs",label:"gRPC NodeJS",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nstub.PostSearches(\n    {\n        query: {\n            ands: [\n                {\n                    input: {  // Setting Input indicates we search for images that have the concept(s)\n                              // which we added to the input manually.\n                        data: {\n                            concepts: [  // You can search by multiple concepts.\n                                {\n                                    name: "people",  // You could search by concept ID as well.\n                                    value: 1  // Value of 0 will search for images that we marked not to have the concept.\n                                }\n                            ]\n                        }\n                    }\n                }\n            ]\n        }\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post searches failed, status: " + response.status.description);\n        }\n\n        console.log("Found inputs:");\n        for (const hit of response.hits) {\n            console.log("\\tScore " + hit.score + " for " + hit.input.id);\n        }\n    }\n);\n'))),(0,r.kt)(i.Z,{value:"javascript",label:"Javascript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"app.inputs.search([\n  {\n    concept: {\n      type: 'input',\n      name: 'cat'\n    }\n  },\n  {\n    concept: {\n      type: 'input',\n      name: 'dog'\n    }\n  }\n]).then(\n  function(response) {\n    // do something with response\n  },\n  function(err) {\n    // there was an error\n  }\n);\n"))),(0,r.kt)(i.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from clarifai.rest import ClarifaiApp\napp = ClarifaiApp(api_key='YOUR_CLARIFAI_KEY')\n\n# search by single concept name\napp.inputs.search_by_annotated_concepts(concept='cat')\n\n# search by single concept id\napp.inputs.search_by_annotated_concepts(concept_id='ai_mFqxrph2')\n\n# search by multiple concepts with name\napp.inputs.search_by_annotated_concepts(concepts=['cat', 'cute'])\n\n# search by multiple concepts with ids\napp.inputs.search_by_annotated_concepts(concept_ids=['ai_mFqxrph2', 'ai_4CRlSvbV'])\n\n# search by multiple concepts with not logic\napp.inputs.search_by_annotated_concepts(concepts=['cat', 'dog'], values=[True, False])\n"))),(0,r.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'// Search concept by name\nclient.searchInputs(SearchClause.matchUserTaggedConcept(Concept.forName("cat")))\n    .getPage(1)\n    .executeSync();\n\n// Search concept by ID\nclient.searchInputs(SearchClause.matchUserTaggedConcept(Concept.forID("ai_mFqxrph2")))\n    .getPage(1)\n    .executeSync();\n\n// Search multiple concepts\nclient.searchInputs(SearchClause.matchUserTaggedConcept(Concept.forID("cat")))\n    .and(SearchClause.matchUserTaggedConcept(Concept.forID("cute")))\n    .getPage(1)\n    .executeSync();\n\n// Search NOT by concept\nclient.searchInputs(SearchClause.matchUserTaggedConcept(Concept.forID("cat").withValue(false)))\n    .getPage(1)\n    .executeSync();\n'))),(0,r.kt)(i.Z,{value:"csharp",label:"C#",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'using System.Threading.Tasks;\nusing Clarifai.API;\nusing Clarifai.DTOs.Searches;\n\nnamespace YourNamespace\n{\n    public class YourClassName\n    {\n        public static async Task Main()\n        {\n            var client = new ClarifaiClient("YOUR_API_KEY");\n\n            // Search concept by name\n            await client.SearchInputs(SearchBy.UserTaggedConceptName("cat")\n                )\n                .Page(1)\n                .ExecuteAsync();\n\n            // Search concept by ID\n            await client.SearchInputs(SearchBy.UserTaggedConceptID("ai_mFqxrph2")\n                )\n                .Page(1)\n                .ExecuteAsync();\n\n            // Search multiple concepts\n            await client.SearchInputs(\n                    SearchBy.UserTaggedConceptID("cat"),\n                    SearchBy.UserTaggedConceptID("cute"))\n                .Page(1)\n                .ExecuteAsync();\n        }\n    }\n}\n'))),(0,r.kt)(i.Z,{value:"objective-c",label:"Objective-C",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},'// If you have previously added inputs tagged with "dog", you can search for them by the same tag.\nClarifaiConcept *concept = [[ClarifaiConcept alloc] initWithConceptName:@"dog"];\nClarifaiSearchTerm *term = [ClarifaiSearchTerm searchInputsByConcept:concept];\n\n[app search:@[term] page:@1 perPage:@20 completion:^(NSArray<ClarifaiSearchResult *> *results, NSError *error) {\n  // Print output of first search result.\n  NSLog(@"inputID: %@", results[0].inputID);\n  NSLog(@"URL: %@", results[0].mediaURL);\n  NSLog(@"probability of input matching search query: %@", results[0].score);\n}];\n'))),(0,r.kt)(i.Z,{value:"php",label:"PHP",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"use Clarifai\\API\\ClarifaiClient;\nuse Clarifai\\DTOs\\Searches\\SearchBy;\nuse Clarifai\\DTOs\\Searches\\SearchInputsResult;\n\n$client = new ClarifaiClient('YOUR_API_KEY');\n\n// Search concept by name\n$response = $client->searchInputs(SearchBy::userTaggedConceptName('cat'))\n    ->executeSync();\n\n/*\n// Search concept by ID\n$response = $client->searchInputs(SearchBy::userTaggedConceptID('cat'))\n    ->executeSync();\n*/\n\n/*\n// Search multiple concepts\n$response = $client->searchInputs([SearchBy::userTaggedConceptName('cat'),\n        SearchBy::userTaggedConceptID('dog')])\n    ->executeSync();\n*/\n\nif ($response->isSuccessful()) {\n    echo \"Response is successful.\\n\";\n\n    /** @var SearchInputsResult $result */\n    $result = $response->get();\n\n    foreach ($result->searchHits() as $searchHit) {\n        echo $searchHit->input()->id() . ' ' . $searchHit->score() . \"\\n\";\n    }\n} else {\n    echo \"Response is not successful. Reason: \\n\";\n    echo $response->status()->description() . \"\\n\";\n    echo $response->status()->errorDetails() . \"\\n\";\n    echo \"Status code: \" . $response->status()->statusCode();\n}\n"))),(0,r.kt)(i.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},'# Setting "input" indicates we search for images that have the concept(s) which we added to the\n# input manually.\n#\n# Value of 0 will search for images that don\'t have the concept.\n#\n# Instead of "name" you can search by "id" as well.\n\ncurl -X POST \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'\n  {\n    "query": {\n      "ands": [\n        {\n          "input": {\n            "data": {\n              "concepts": [\n                {\n                  "name":"people",\n                  "value": 1\n                }\n              ]\n            }\n          }\n        }\n      ]\n    }\n  }\'\\\n  https://api.clarifai.com/v2/searches\n')))),(0,r.kt)("h3",{id:"by-clarifaimain-and-custom-concepts"},"By Clarifai/main and Custom Concepts"),(0,r.kt)("p",null,"You can combine a search to find inputs that have concepts you have supplied as well as predictions from your model."),(0,r.kt)(c.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"grpc_python",label:"gRPC Python",mdxType:"TabItem"},(0,r.kt)(o.Z,{className:"language-python",mdxType:"CodeBlock"},"################################################################################\n# In this section, we set the user authentication, app ID, and the concepts we  \n# we want to rank by. Change these strings to run your own example.\n################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change this to a Clarifai/main concept\nCONCEPT_ID_1 = 'ai_fvlBqXZR'\n# Change this to your own custom concept\nCONCEPT_ID_2 = 'people'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID) # The userDataObject is required when using a PAT\n\n# Here we search for images labeled with 'ai_fvlBqXZR' and for which the General prediction model does not find\n# a 'people' concept\npost_searches_response = stub.PostSearches(\n    service_pb2.PostSearchesRequest(\n        user_app_id=userDataObject,\n        query=resources_pb2.Query(\n            ands=[\n                resources_pb2.And(\n                    input=resources_pb2.Input(  # Setting Input indicates we search for images that have the concept(s)\n                                                # which we added to the input manually\n                        data=resources_pb2.Data(\n                            concepts=[\n                                resources_pb2.Concept(\n                                    name=CONCEPT_ID_1,\n                                    value=1\n                                )\n                            ]\n                        )\n                    )\n                ),\n                resources_pb2.And(\n                    output=resources_pb2.Output(  # Setting Output indicates we search for images that have the concept(s)\n                                                  # which were predicted by the General model\n                        data=resources_pb2.Data(\n                            concepts=[\n                                resources_pb2.Concept(\n                                    name=CONCEPT_ID_2,\n                                    value=0\n                                )\n                            ]\n                        )\n                    )\n                )\n            ]\n        )\n    ),\n    metadata=metadata\n)\n\nif post_searches_response.status.code != status_code_pb2.SUCCESS:\n    print(post_searches_response.status)\n    raise Exception(\"Post searches failed, status: \" + post_searches_response.status.description)\n\nprint(\"Found inputs:\")\nfor hit in post_searches_response.hits:\n    print(\"\\tScore %.2f for %s\" % (hit.score, hit.input.id))")),(0,r.kt)(i.Z,{value:"grpc_java",label:"gRPC Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\n// Here we search for images which we labeled with "cat" and for which the General prediction model does not find\n// a "dog" concept.\nMultiSearchResponse postSearchesResponse = stub.postSearches(\n    PostSearchesRequest.newBuilder().setQuery(\n        Query.newBuilder()\n            .addAnds(\n                And.newBuilder().setInput( // Setting Input indicates we search for images that have the concept(s)\n                                           // which we added to the input manually.\n                    Input.newBuilder().setData(\n                        Data.newBuilder().addConcepts(\n                            Concept.newBuilder()\n                                .setName("cat")\n                                .setValue(1f)\n                        )\n                    )\n                )\n            )\n            .addAnds(\n                And.newBuilder().setOutput(  // Setting Output indicates we search for images that have the concept(s)\n                                             // which were predicted by the General model.\n                    Output.newBuilder().setData(\n                        Data.newBuilder().addConcepts(\n                            Concept.newBuilder()\n                                .setName("dog")\n                                .setValue(0f)  // Because of 0, the dog must not be present in the image.\n                        )\n                    )\n                )\n            )\n    )\n    .build()\n);\n\nif (postSearchesResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n  throw new RuntimeException("Post searches failed, status: " + postSearchesResponse.getStatus());\n}\n\nSystem.out.println("Found inputs " + postSearchesResponse.getHitsCount() + ":");\nfor (Hit hit : postSearchesResponse.getHitsList()) {\n    System.out.printf("\\tScore %.2f for %s\\n", hit.getScore(), hit.getInput().getId());\n}\n'))),(0,r.kt)(i.Z,{value:"grpc_nodejs",label:"gRPC NodeJS",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\n// Here we search for images which we labeled with "cat" and for which the General prediction model does not find\n// a "dog" concept.\nstub.PostSearches(\n    {\n        query: {\n            ands: [\n                {\n                    input: {  // Setting Input indicates we search for images that have the concept(s)\n                              // which we added to the input manually.\n                        data: {\n                            concepts: [\n                                {\n                                    name: "cat",\n                                    value: 1\n                                }\n                            ]\n                        }\n                    }\n                },\n                {\n                    output: {  // Setting Output indicates we search for images that have the concept(s)\n                               // which were predicted by the General model.\n                        data: {\n                            concepts: [\n                                {\n                                    name: "dog",\n                                    value: 0\n                                }\n                            ]\n                        }\n                    }\n                }\n            ]\n        }\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post searches failed, status: " + response.status.description);\n        }\n\n        console.log("Found inputs:");\n        for (const hit of response.hits) {\n            console.log("\\tScore " + hit.score + " for " + hit.input.id);\n        }\n    }\n);\n'))),(0,r.kt)(i.Z,{value:"javascript",label:"Javascript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"app.inputs.search([\n  // this is the public concept\n  {\n    concept: {\n      name: 'cat'\n    }\n  },\n  // this is the user-supplied concept\n  {\n    concept: {\n      type: 'input',\n      name: 'dog'\n    }\n  }\n]).then(\n  function(response) {\n    // do something with response\n  },\n  function(err) {\n    // there was an error\n  }\n);\n"))),(0,r.kt)(i.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from clarifai.rest import ClarifaiApp, InputSearchTerm, OutputSearchTerm, SearchQueryBuilder\napp = ClarifaiApp(api_key='YOUR_API_KEY')\n\nterm1 = InputSearchTerm(concept='cat')\nterm2 = OutputSearchTerm(concept='dog', value=False)\nquery = SearchQueryBuilder()\nquery.add_term(term1)\nquery.add_term(term2)\n\napp.inputs.search(query)\n"))),(0,r.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'client.searchInputs()\n    // Matches images we tagged as "cat", and that the API tagged as not having "dog"\n    .ands(\n        SearchClause.matchUserTaggedConcept(Concept.forName("cat")),\n        SearchClause.matchConcept(Concept.forName("dog").withValue(false))\n    )\n    .getPage(1)\n    .executeSync();\n'))),(0,r.kt)(i.Z,{value:"csharp",label:"C#",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'using System.Threading.Tasks;\nusing Clarifai.API;\nusing Clarifai.DTOs.Searches;\n\nnamespace YourNamespace\n{\n    public class YourClassName\n    {\n        public static async Task Main()\n        {\n            var client = new ClarifaiClient("YOUR_API_KEY");\n\n            await client.SearchInputs(\n                    SearchBy.UserTaggedConceptName("cat"),\n                    SearchBy.ConceptID("dog"))\n                .Page(1)\n                .ExecuteAsync();\n        }\n    }\n}\n'))),(0,r.kt)(i.Z,{value:"objective-c",label:"Objective-C",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},'ClarifaiConcept *conceptFromGeneralModel = [[ClarifaiConcept alloc] initWithConceptName:@"fast"];\nClarifaiConcept *conceptFromTrainedCustomModel = [[ClarifaiConcept alloc] initWithConceptName:@"dog"];\n\nClarifaiSearchTerm *term1 = [ClarifaiSearchTerm searchByPredictedConcept:conceptFromGeneralModel];\nClarifaiSearchTerm *term2 = [ClarifaiSearchTerm searchByPredictedConcept:conceptFromTrainedCustomModel];\n\n[_app search:@[term1, term2] page:@1 perPage:@20 completion:^(NSArray<ClarifaiSearchResult *> *results, NSError *error) {\n  // Print output of first search result.\n  NSLog(@"inputID: %@", results[0].inputID);\n  NSLog(@"URL: %@", results[0].mediaURL);\n  NSLog(@"probability of input matching search query: %@", results[0].score);\n}];\n'))),(0,r.kt)(i.Z,{value:"php",label:"PHP",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'use Clarifai\\API\\ClarifaiClient;\nuse Clarifai\\DTOs\\Searches\\SearchBy;\nuse Clarifai\\DTOs\\Searches\\SearchInputsResult;\n\n$client = new ClarifaiClient(\'YOUR_API_KEY\');\n\n$response = $client->searchInputs([SearchBy::userTaggedConceptName(\'cat\'),\n        SearchBy::conceptID(\'dog\')])\n    ->executeSync();\n\nif ($response->isSuccessful()) {\n    echo "Response is successful.\\n";\n\n    /** @var SearchInputsResult $result */\n    $result = $response->get();\n\n    foreach ($result->searchHits() as $searchHit) {\n        echo $searchHit->input()->id() . \' \' . $searchHit->score() . "\\n";\n    }\n} else {\n    echo "Response is not successful. Reason: \\n";\n    echo $response->status()->description() . "\\n";\n    echo $response->status()->errorDetails() . "\\n";\n    echo "Status code: " . $response->status()->statusCode();\n}\n'))),(0,r.kt)(i.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},'# Here we search for images which we labeled with "cat" and for which the General prediction model\n# does not find a "dog" concept.\n\ncurl -X POST \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n-d \'\n{\n  "query": {\n    "ands": [\n      {\n        "input": {\n          "data": {\n            "concepts": [\n              {\n                "name": "cat",\n                "value": 1\n              }\n            ]\n          }\n        }\n      },\n      {\n        "output": {\n          "data": {\n            "concepts": [\n              {\n                "name": "dog",\n                "value": 0\n              }\n            ]\n          }\n        }\n      }\n    ]\n  }\n}\'\\\nhttps://api.clarifai.com/v2/searches\n')))),(0,r.kt)("h3",{id:"by-concept-in-another-language"},"By Concept in Another Language"),(0,r.kt)("p",null,"Concepts that have a translation into another language can be searched for in that language, even without having the default language for your app being in that language. This uses Clarifai's knowledge graph to lookup the translation and then perform the search. "),(0,r.kt)("p",null,'For example, if you app is in English and you want to search for "dog" in Japanese, then you could search with ',(0,r.kt)("inlineCode",{parentName:"p"},'language="ja"')," and ",(0,r.kt)("inlineCode",{parentName:"p"},'name="\u72ac"'),"."),(0,r.kt)(c.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"grpc_python",label:"gRPC Python",mdxType:"TabItem"},(0,r.kt)(o.Z,{className:"language-python",mdxType:"CodeBlock"},"################################################################################\n# In this section, we set the user authentication, app ID, concept name, and \n# language ID. Change these strings to run your own example.\n################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to what you want to search by\nCONCEPT_NAME = '\u72ac'\nLANGUAGE_ID = 'ja' # Japanese\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID) # The userDataObject is required when using a PAT\n\npost_searches_response = stub.PostSearches(\n    service_pb2.PostSearchesRequest(\n        user_app_id=userDataObject,\n        query=resources_pb2.Query(\n            ands=[\n                resources_pb2.And(\n                    output=resources_pb2.Output( # Setting Output indicates we search for images that have the concept(s)\n                                                 # which were predicted by the General model\n                        data=resources_pb2.Data(\n                            concepts=[  # You can search by multiple concepts\n                                resources_pb2.Concept(\n                                    name=CONCEPT_NAME,  # You could search by concept ID as well\n                                    language=LANGUAGE_ID, \n                                    value=1  # Value of 0 will search for images that don't have the concept\n                                )\n                            ]\n                        )\n                    )\n                )\n            ]\n        )\n    ),\n    metadata=metadata\n)\n\nif post_searches_response.status.code != status_code_pb2.SUCCESS:\n    print(post_searches_response.status)\n    raise Exception(\"Post searches failed, status: \" + post_searches_response.status.description)\n\nprint(\"Found inputs:\")\nfor hit in post_searches_response.hits:\n    print(\"\\tScore %.2f for %s\" % (hit.score, hit.input.id))\n")),(0,r.kt)(i.Z,{value:"grpc_java",label:"gRPC Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nMultiSearchResponse postSearchesResponse = stub.postSearches(\n    PostSearchesRequest.newBuilder().setQuery(\n        Query.newBuilder().addAnds(\n            And.newBuilder().setOutput( // Setting Output indicates we search for images that have the concept(s)\n                                        // which were predicted by the General model.\n                Output.newBuilder().setData(\n                    Data.newBuilder().addConcepts(  // You can search by multiple concepts.\n                        Concept.newBuilder()\n                            .setName("\u72ac")  // You could search by concept ID as well.\n                            .setLanguage("ja") // japanese\n                            .setValue(1f)  // Value of 0 will search for images that don\'t have the concept.\n                    )\n                )\n            )\n        )\n    )\n    .build()\n);\n\nif (postSearchesResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n  throw new RuntimeException("Post searches failed, status: " + postSearchesResponse.getStatus());\n}\n\nSystem.out.println("Found inputs " + postSearchesResponse.getHitsCount() + ":");\nfor (Hit hit : postSearchesResponse.getHitsList()) {\n    System.out.printf("\\tScore %.2f for %s\\n", hit.getScore(), hit.getInput().getId());\n}\n'))),(0,r.kt)(i.Z,{value:"grpc_nodejs",label:"gRPC NodeJS",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nstub.PostSearches(\n    {\n        query: {\n            ands: [\n                {\n                    output: {  // Setting Output indicates we search for images that have the concept(s)\n                               // which were predicted by the General model.\n                        data: {\n                            concepts: [  // You can search by multiple concepts.\n                                {\n                                    name: "\u72ac",  // You could search by concept ID as well.\n                                    language: "ja", // japanese\n                                    value: 1  // Value of 0 will search for images that don\'t have the concept\n                                }\n                            ]\n                        }\n                    }\n                }\n            ]\n        }\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post searches failed, status: " + response.status.description);\n        }\n\n        console.log("Found inputs:");\n        for (const hit of response.hits) {\n            console.log("\\tScore " + hit.score + " for " + hit.input.id);\n        }\n    }\n);\n'))),(0,r.kt)(i.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},'curl -X POST \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'\n  {\n    "query": {\n      "ands": [\n        {\n          "output": {\n            "data": {\n              "concepts": [\n                {\n                  "name":"\u72ac",\n                  "language": "ja",\n                  "value": 1\n                }\n              ]\n            }\n          }\n        }\n      ]\n    }\n  }\'\\\n  https://api.clarifai.com/v2/searches\n')))),(0,r.kt)("h2",{id:"search-by-visual-similarity"},"Search by Visual Similarity"),(0,r.kt)("p",null,"You can use images to search through your collection. The API will return ranked results based on how similar the results are to the image you provided in your query."),(0,r.kt)("h3",{id:"by-image"},"By Image"),(0,r.kt)(c.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"grpc_python",label:"gRPC Python",mdxType:"TabItem"},(0,r.kt)(o.Z,{className:"language-python",mdxType:"CodeBlock"},"##################################################################\n# In this section, we set the user authentication, app ID, and \n# image URL. Change these strings to run your own example.\n##################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change this to the image URL you want to search by\nIMAGE_URL = 'https://samples.clarifai.com/metro-north.jpg'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID) # The userDataObject is required when using a PAT\n\npost_searches_response = stub.PostSearches(\n    service_pb2.PostSearchesRequest(\n        user_app_id=userDataObject,\n        query=resources_pb2.Query(\n            ands=[\n                resources_pb2.And(\n                    output=resources_pb2.Output(\n                        input=resources_pb2.Input(\n                            data=resources_pb2.Data(\n                                image=resources_pb2.Image(\n                                    url=IMAGE_URL\n                                )\n                            )\n                        )\n                    )\n                )\n            ]\n        )\n    ),\n    metadata=metadata\n)\n\nif post_searches_response.status.code != status_code_pb2.SUCCESS:\n    print(post_searches_response.status)\n    raise Exception(\"Post searches failed, status: \" + post_searches_response.status.description)\n\nprint(\"Found inputs:\")\nfor hit in post_searches_response.hits:\n    print(\"\\tScore %.2f for %s\" % (hit.score, hit.input.id))\n\n")),(0,r.kt)(i.Z,{value:"grpc_java",label:"gRPC Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nMultiSearchResponse postSearchesResponse = stub.postSearches(\n    PostSearchesRequest.newBuilder().setQuery(\n        Query.newBuilder().addAnds(\n            And.newBuilder().setOutput(\n                Output.newBuilder().setInput(\n                    Input.newBuilder().setData(\n                        Data.newBuilder().setImage(\n                            Image.newBuilder()\n                                .setUrl("{YOUR_IMAGE_URL}")\n                        )\n                    )\n                )\n            )\n        )\n    )\n    .build()\n);\n\nif (postSearchesResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n  throw new RuntimeException("Post searches failed, status: " + postSearchesResponse.getStatus());\n}\n\nSystem.out.println("Found inputs " + postSearchesResponse.getHitsCount() + ":");\nfor (Hit hit : postSearchesResponse.getHitsList()) {\n    System.out.printf("\\tScore %.2f for %s\\n", hit.getScore(), hit.getInput().getId());\n}\n'))),(0,r.kt)(i.Z,{value:"grpc_nodejs",label:"gRPC NodeJS",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nstub.PostSearches(\n    {\n        query: {\n            ands: [\n                {\n                    output: {\n                        input: {\n                            data: {\n                                image: {\n                                    url: "{YOUR_IMAGE_URL}"\n                                }\n                            }\n                        }\n                    }\n                }\n            ]\n        }\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post searches failed, status: " + response.status.description);\n        }\n\n        console.log("Found inputs:");\n        for (const hit of response.hits) {\n            console.log("\\tScore " + hit.score + " for " + hit.input.id);\n        }\n    }\n);\n'))),(0,r.kt)(i.Z,{value:"javascript",label:"Javascript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"app.inputs.search(\n  {\n    input: {\n      url: 'https://samples.clarifai.com/puppy.jpeg'\n    }\n  }\n).then(\n  function(response) {\n    // do something with response\n  },\n  function(err) {\n    // there was an error\n  }\n);\n"))),(0,r.kt)(i.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from clarifai.rest import ClarifaiApp\napp = ClarifaiApp(api_key=\'YOUR_CLARIFAI_KEY\')\n\n# search by image url\napp.inputs.search_by_image(url="https://samples.clarifai.com/metro-north.jpg")\n\n# search by existing input id\ninput_id = "some_existing_input_id"\napp.inputs.search_by_image(image_id=input_id)\n\n# search by raw bytes\ndata = "image_raw_bytes"\napp.inputs.search_by_image(imgbytes=data)\n\n# search by base64 bytes\nbase64_data = "image_bytes_encoded_in_base64"\napp.inputs.search_by_image(base64bytes=base64_data)\n\n# search by local filename\nfilename="filename_on_local_disk.jpg"\napp.inputs.search_by_image(filename=filename)\n\n# search from fileio\nfio = open("filename_on_local_disk.jpg", \'rb\')\napp.inputs.search_by_image(fileobj=fio)\n'))),(0,r.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'// Search by image URL (String or java.net.URL)\nclient.searchInputs(SearchClause.matchImageVisually(ClarifaiImage.of("https://samples.clarifai.com/metro-north.jpg")))\n    .getPage(1)\n    .executeSync();\n\n// Search by local image (java.io.File or byte[])\nclient.searchInputs(SearchClause.matchImageVisually(ClarifaiImage.of(new File("image.png"))))\n    .getPage(1)\n    .executeSync();\n'))),(0,r.kt)(i.Z,{value:"csharp",label:"C#",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'using System.IO;\nusing System.Threading.Tasks;\nusing Clarifai.API;\nusing Clarifai.DTOs.Searches;\n\nnamespace YourNamespace\n{\n    public class YourClassName\n    {\n        public static async Task Main()\n        {\n            var client = new ClarifaiClient("YOUR_API_KEY");\n\n            // Search by image URL\n            await client.SearchInputs(\n                    SearchBy.ImageVisually("https://samples.clarifai.com/metro-north.jpg"))\n                .Page(1)\n                .ExecuteAsync();\n\n            // Search by local image\n            await client.SearchInputs(\n                    SearchBy.ImageVisually(File.ReadAllBytes("image.png")))\n                .Page(1)\n                .ExecuteAsync();\n        }\n    }\n}\n'))),(0,r.kt)(i.Z,{value:"objective-c",label:"Objective-C",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},'ClarifaiSearchTerm *searchTerm = [ClarifaiSearchTerm searchVisuallyWithImageURL:@"https://samples.clarifai.com/metro-north.jpg"];\n\n[app search:@[searchTerm] page:@1 perPage:@20 completion:^(NSArray<ClarifaiSearchResult *> *results, NSError *error) {\n  // Print output of first search result.\n  NSLog(@"inputID: %@", results[0].inputID);\n  NSLog(@"URL: %@", results[0].mediaURL);\n  NSLog(@"probability of input matching search query: %@", results[0].score);\n}];\n'))),(0,r.kt)(i.Z,{value:"php",label:"PHP",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'use Clarifai\\API\\ClarifaiClient;\nuse Clarifai\\DTOs\\Searches\\SearchBy;\nuse Clarifai\\DTOs\\Searches\\SearchInputsResult;\n\n$client = new ClarifaiClient(\'YOUR_API_KEY\');\n\n$response = $client->searchInputs(\n        SearchBy::urlImageVisually(\'https://samples.clarifai.com/metro-north.jpg\'))\n    ->executeSync();\n\nif ($response->isSuccessful()) {\n    echo "Response is successful.\\n";\n\n    /** @var SearchInputsResult $result */\n    $result = $response->get();\n\n    foreach ($result->searchHits() as $searchHit) {\n        echo $searchHit->input()->id() . \' \' . $searchHit->score() . "\\n";\n    }\n} else {\n    echo "Response is not successful. Reason: \\n";\n    echo $response->status()->description() . "\\n";\n    echo $response->status()->errorDetails() . "\\n";\n    echo "Status code: " . $response->status()->statusCode();\n}\n'))),(0,r.kt)(i.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},'curl -X POST \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'\n  {\n    "query": {\n      "ands": [\n        {\n          "output":{\n            "input":{\n              "data": {\n                "image": {\n                  "url": "{YOUR_IMAGE_URL}"\n                }\n              }\n            }\n          }\n        }\n      ]\n    }\n  }\'\\\n  https://api.clarifai.com/v2/searches\n')))),(0,r.kt)("h3",{id:"by-url"},"By URL"),(0,r.kt)("p",null,"You can also search for an input by URL."),(0,r.kt)(c.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"grpc_python",label:"gRPC Python",mdxType:"TabItem"},(0,r.kt)(o.Z,{className:"language-python",mdxType:"CodeBlock"},"##################################################################\n# In this section, we set the user authentication, app ID, and \n# image URL. Change these strings to run your own example.\n##################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change this to the image URL you want to search by\nIMAGE_URL = 'https://samples.clarifai.com/metro-north.jpg'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID) # The userDataObject is required when using a PAT\n\npost_searches_response = stub.PostSearches(\n    service_pb2.PostSearchesRequest(\n        user_app_id=userDataObject,\n        query=resources_pb2.Query(\n            ands=[\n                resources_pb2.And(\n                    input=resources_pb2.Input(\n                        data=resources_pb2.Data(\n                            image=resources_pb2.Image(\n                                url=IMAGE_URL\n                            )\n                        )\n                    )\n                )\n            ]\n        )\n    ),\n    metadata=metadata\n)\n\nif post_searches_response.status.code != status_code_pb2.SUCCESS:\n    print(post_searches_response.status)\n    raise Exception(\"Post searches failed, status: \" + post_searches_response.status.description)\n\nprint(\"Found inputs:\")\nfor hit in post_searches_response.hits:\n    print(\"\\tScore %.2f for %s\" % (hit.score, hit.input.id))")),(0,r.kt)(i.Z,{value:"grpc_java",label:"gRPC Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nMultiSearchResponse postSearchesResponse = stub.postSearches(\n    PostSearchesRequest.newBuilder().setQuery(\n        Query.newBuilder().addAnds(\n            And.newBuilder().setInput(\n                Input.newBuilder().setData(\n                    Data.newBuilder().setImage(\n                        Image.newBuilder()\n                            .setUrl("{YOUR_IMAGE_URL}")\n                    )\n                )\n            )\n        )\n    )\n    .build()\n);\n\nif (postSearchesResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n  throw new RuntimeException("Post searches failed, status: " + postSearchesResponse.getStatus());\n}\n\nSystem.out.println("Found inputs " + postSearchesResponse.getHitsCount() + ":");\nfor (Hit hit : postSearchesResponse.getHitsList()) {\n    System.out.printf("\\tScore %.2f for %s\\n", hit.getScore(), hit.getInput().getId());\n}\n'))),(0,r.kt)(i.Z,{value:"grpc_nodejs",label:"gRPC NodeJS",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nstub.PostSearches(\n    {\n        query: {\n            ands: [\n                {\n                    input: {\n                        data: {\n                            image: {\n                                url: "{YOUR_IMAGE_URL}"\n                            }\n                        }\n                    }\n                }\n            ]\n        }\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post searches failed, status: " + response.status.description);\n        }\n\n        console.log("Found inputs:");\n        for (const hit of response.hits) {\n            console.log("\\tScore " + hit.score + " for " + hit.input.id);\n        }\n    }\n);\n'))),(0,r.kt)(i.Z,{value:"javascript",label:"Javascript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"app.inputs.search(\n  {\n    input: {\n      type: 'input',\n      url: 'https://samples.clarifai.com/puppy.jpeg'\n    }\n  }\n).then(\n  function(response) {\n    // do something with response\n  },\n  function(err) {\n    // there was an error\n  }\n);\n"))),(0,r.kt)(i.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from clarifai.rest import ClarifaiApp\napp = ClarifaiApp(api_key=\'YOUR_API_KEY\')\n\nmeta = {"url":"https://samples.clarifai.com/metro-north.jpg"}\napp.inputs.search_by_metadata(meta)\n'))),(0,r.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'// Lookup images with this URL\nclient.searchInputs(SearchClause.matchImageURL(ClarifaiImage.of("https://samples.clarifai.com/puppy.jpeg")))\n    .getPage(1)\n    .executeSync();\n'))),(0,r.kt)(i.Z,{value:"csharp",label:"C#",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'using System.Threading.Tasks;\nusing Clarifai.API;\nusing Clarifai.DTOs.Searches;\n\nnamespace YourNamespace\n{\n    public class YourClassName\n    {\n        public static async Task Main()\n        {\n            var client = new ClarifaiClient("YOUR_API_KEY");\n\n            await client.SearchInputs(\n                    SearchBy.ImageURL("https://samples.clarifai.com/metro-north.jpg"))\n                .Page(1)\n                .ExecuteAsync();\n        }\n    }\n}\n'))),(0,r.kt)(i.Z,{value:"objective-c",label:"Objective-C",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},'// Lookup images with this URL\nClarifaiSearchTerm *term = [ClarifaiSearchTerm searchInputsWithImageURL:@"https://samples.clarifai.com/metro-north.jpg"];\n\n[app search:@[term] page:@1 perPage:@20 completion:^(NSArray<ClarifaiSearchResult *> *results, NSError *error) {\n  // Print output of first search result.\n  NSLog(@"inputID: %@", results[0].inputID);\n  NSLog(@"URL: %@", results[0].mediaURL);\n  NSLog(@"probability of input matching search query: %@", results[0].score);\n}];\n'))),(0,r.kt)(i.Z,{value:"php",label:"PHP",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'use Clarifai\\API\\ClarifaiClient;\nuse Clarifai\\DTOs\\Searches\\SearchBy;\nuse Clarifai\\DTOs\\Searches\\SearchInputsResult;\n\n$client = new ClarifaiClient(\'YOUR_API_KEY\');\n\n$response = $client->searchInputs(\n        SearchBy::imageURL(\'https://samples.clarifai.com/metro-north.jpg\'))\n    ->executeSync();\n\nif ($response->isSuccessful()) {\n    echo "Response is successful.\\n";\n\n    /** @var SearchInputsResult $result */\n    $result = $response->get();\n\n    foreach ($result->searchHits() as $searchHit) {\n        echo $searchHit->input()->id() . \' \' . $searchHit->score() . "\\n";\n    }\n} else {\n    echo "Response is not successful. Reason: \\n";\n    echo $response->status()->description() . "\\n";\n    echo $response->status()->errorDetails() . "\\n";\n    echo "Status code: " . $response->status()->statusCode();\n}\n'))),(0,r.kt)(i.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},'curl -X POST \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'\n  {\n    "query": {\n      "ands": [\n        {\n          "input":{\n            "data": {\n              "image": {\n                "url": "{YOUR_IMAGE_URL}"\n              }\n            }\n          }\n        }\n      ]\n    }\n  }\'\\\n  https://api.clarifai.com/v2/searches\n')))))}g.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[7481],{14248:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/inputs_viewer_page-3f45ab319af3b049e106bb7afbc3e980.png"},36860:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/new_concept_added-e36dd6eede47a38b2656f490ce5b2956.png"},49636:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/add_concept-32d50466d981c36e9ba18c4f0fb537b3.png"},65537:(e,n,t)=>{t.d(n,{A:()=>w});var a=t(96540),s=t(18215),r=t(65627),o=t(56347),i=t(50372),c=t(30604),l=t(11861),p=t(78749);function u(e){return a.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function d(e){const{values:n,children:t}=e;return(0,a.useMemo)((()=>{const e=n??function(e){return u(e).map((e=>{let{props:{value:n,label:t,attributes:a,default:s}}=e;return{value:n,label:t,attributes:a,default:s}}))}(t);return function(e){const n=(0,l.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function h(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function _(e){let{queryString:n=!1,groupId:t}=e;const s=(0,o.W6)(),r=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,c.aZ)(r),(0,a.useCallback)((e=>{if(!r)return;const n=new URLSearchParams(s.location.search);n.set(r,e),s.replace({...s.location,search:n.toString()})}),[r,s])]}function g(e){const{defaultValue:n,queryString:t=!1,groupId:s}=e,r=d(e),[o,c]=(0,a.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!h({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const a=t.find((e=>e.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:r}))),[l,u]=_({queryString:t,groupId:s}),[g,f]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[s,r]=(0,p.Dv)(t);return[s,(0,a.useCallback)((e=>{t&&r.set(e)}),[t,r])]}({groupId:s}),m=(()=>{const e=l??g;return h({value:e,tabValues:r})?e:null})();(0,i.A)((()=>{m&&c(m)}),[m]);return{selectedValue:o,selectValue:(0,a.useCallback)((e=>{if(!h({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);c(e),u(e),f(e)}),[u,f,r]),tabValues:r}}var f=t(9136);const m={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var b=t(74848);function C(e){let{className:n,block:t,selectedValue:a,selectValue:o,tabValues:i}=e;const c=[],{blockElementScrollPositionUntilNextRender:l}=(0,r.a_)(),p=e=>{const n=e.currentTarget,t=c.indexOf(n),s=i[t].value;s!==a&&(l(n),o(s))},u=e=>{let n=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const t=c.indexOf(e.currentTarget)+1;n=c[t]??c[0];break}case"ArrowLeft":{const t=c.indexOf(e.currentTarget)-1;n=c[t]??c[c.length-1];break}}n?.focus()};return(0,b.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":t},n),children:i.map((e=>{let{value:n,label:t,attributes:r}=e;return(0,b.jsx)("li",{role:"tab",tabIndex:a===n?0:-1,"aria-selected":a===n,ref:e=>{c.push(e)},onKeyDown:u,onClick:p,...r,className:(0,s.A)("tabs__item",m.tabItem,r?.className,{"tabs__item--active":a===n}),children:t??n},n)}))})}function E(e){let{lazy:n,children:t,selectedValue:r}=e;const o=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=o.find((e=>e.props.value===r));return e?(0,a.cloneElement)(e,{className:(0,s.A)("margin-top--md",e.props.className)}):null}return(0,b.jsx)("div",{className:"margin-top--md",children:o.map(((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==r})))})}function A(e){const n=g(e);return(0,b.jsxs)("div",{className:(0,s.A)("tabs-container",m.tabList),children:[(0,b.jsx)(C,{...n,...e}),(0,b.jsx)(E,{...n,...e})]})}function w(e){const n=(0,f.A)();return(0,b.jsx)(A,{...e,children:u(e.children)},String(n))}},66060:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/concepts_upload_inputs_new_concepts-5c373ab9510375a0ad8a1f985ece5856.png"},70353:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/concepts_newly_added_concept-a6a7e215b09fe6e8bd7e015994b241e7.png"},79329:(e,n,t)=>{t.d(n,{A:()=>o});t(96540);var a=t(18215);const s={tabItem:"tabItem_Ymn6"};var r=t(74848);function o(e){let{children:n,hidden:t,className:o}=e;return(0,r.jsx)("div",{role:"tabpanel",className:(0,a.A)(s.tabItem,o),hidden:t,children:n})}},99402:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>C,contentTitle:()=>b,default:()=>w,frontMatter:()=>m,metadata:()=>a,toc:()=>E});const a=JSON.parse('{"id":"create/concepts/create","title":"Create Concepts","description":"Learn how to create concepts within your app","source":"@site/docs/create/concepts/create.md","sourceDirName":"create/concepts","slug":"/create/concepts/create","permalink":"/create/concepts/create","draft":false,"unlisted":false,"editUrl":"https://github.com/Clarifai/docs/blob/main/docs/create/concepts/create.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"description":"Learn how to create concepts within your app","sidebar_position":1,"toc_max_heading_level":4},"sidebar":"tutorialSidebar","previous":{"title":"Create and Manage Concepts","permalink":"/create/concepts/"},"next":{"title":"Manage Concepts","permalink":"/create/concepts/manage"}}');var s=t(74848),r=t(28453),o=t(65537),i=t(79329),c=t(58069);const l='import os\nfrom clarifai.client.app import App\n\n# Set your Personal Access Token (PAT)\nos.environ["CLARIFAI_PAT"] = "YOUR_PAT_HERE"\n\napp = App(user_id="YOUR_USER_ID_HERE", app_id="YOUR_APP_ID_HERE")\n\napp.create_concepts(concept_ids=["cat", "kitten", "animal"])\n',p="################################################################################\n# In this section, we set the user authentication, app ID, concept ID and name.\n# Change these strings to run your own example.\n################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to whatever concepts you want to process\nCONCEPT_ID = 'cat'\nCONCEPT_NAME = 'Cat Name'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\npost_concepts_response = stub.PostConcepts(\n    service_pb2.PostConceptsRequest(\n        user_app_id=userDataObject,\n        concepts=[resources_pb2.Concept(id=CONCEPT_ID, name=CONCEPT_NAME)]\n    ),\n    metadata=metadata\n)\n\nif post_concepts_response.status.code != status_code_pb2.SUCCESS:\n    print(post_concepts_response.status)\n    raise Exception(\"Post concept failed, status: \" + post_concepts_response.status.description)\n    \nprint(post_concepts_response)",u="\x3c!--index.html file--\x3e\n\n<script>\n    ////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, concept ID and name.\n    // Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = 'YOUR_USER_ID_HERE';\n    // Your PAT (Personal Access Token) can be found in the Account's Security section\n    const PAT = 'YOUR_PAT_HERE';\n    const APP_ID = 'YOUR_APP_ID_HERE';\n    // Change these to whatever concepts you want to process\n    const CONCEPT_ID = 'cat';\n    const CONCEPT_NAME = 'Cat Name';\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        \"user_app_id\": {\n            \"user_id\": USER_ID,\n            \"app_id\": APP_ID\n        },\n        \"concepts\": [\n            {\n                \"id\": CONCEPT_ID,\n                \"name\": CONCEPT_NAME\n            }\n        ]\n    });\n\n    const requestOptions = {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        },\n        body: raw\n    };\n\n    fetch(\"https://api.clarifai.com/v2/concepts\", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n<\/script>",d='//index.js file\n\n////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, concept ID and name.\n// Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n// Change these to whatever concepts you want to process\nconst CONCEPT_ID = \'cat\';\nconst CONCEPT_NAME = \'Cat Name\';\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PostConcepts(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        concepts: [{ id: CONCEPT_ID, name: CONCEPT_NAME }]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post concepts failed, status: " + response.status.description);\n        }\n    }\n);',h='package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, concept ID and name.\n    // Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to whatever concepts you want to process\n    static final String CONCEPT_ID = "charlie";\n    static final String CONCEPT_NAME = "Charlie Name";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\t\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiConceptResponse postConceptsResponse = stub.postConcepts(\n            PostConceptsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .addConcepts(Concept.newBuilder().setId(CONCEPT_ID).setName(CONCEPT_NAME))\n            .build()\n        );\n\n        if (postConceptsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post concepts failed, status: " + postConceptsResponse.getStatus());\n        }\n\n    }\n\n}',_='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, concept ID and name.\n// Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change these to whatever concepts you want to process\n$CONCEPT_ID = "cat";\n$CONCEPT_NAME = "Cat Name";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\Api\\Concept;\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\PostConceptsRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PostConcepts(\n        // The request object carries the request along with the request status and other metadata related to the request itself\n        new PostConceptsRequest([\n            "user_app_id" => $userDataObject,\n            "concepts" => [\n                new Concept([\n                    "id" => $CONCEPT_ID,\n                    "name" => $CONCEPT_NAME\n                ])\n            ]         \n        ]),\n        $metadata\n    )->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\nprint $response->serializeToJsonString();\n\n?>\n',g='curl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/concepts" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "concepts": [\n      {\n        "id": "CONCEPT_ID_HERE",\n        "name": "CONCEPT_NAME_HERE"\n      }\n      ]\n  }\'',f='status {\n    code: SUCCESS\n    description: "Ok"\n    req_id: "9852fce206578f4bc5b6bed38f03eed8"\n  }\n  concepts {\n    id: "cat"\n    name: "Cat Name"\n    value: 1.0\n    created_at {\n      seconds: 1643890626\n      nanos: 775078265\n    }\n    language: "en"\n    app_id: "a39423543bb941bf9ba2ee95fad11f0a"\n    visibility {\n      gettable: PRIVATE\n    }\n    user_id: "ei2l2oz3s3iz"\n  }',m={description:"Learn how to create concepts within your app",sidebar_position:1,toc_max_heading_level:4},b="Create Concepts",C={},E=[{value:"<strong>Create via the UI</strong>",id:"create-via-the-ui",level:2},{value:"Via the <strong>Labels</strong> Section",id:"via-the-labels-section",level:3},{value:"Via the Inputs Uploader",id:"via-the-inputs-uploader",level:3},{value:"<strong>Create via the API</strong>",id:"create-via-the-api",level:2},{value:"Create Concepts",id:"create-concepts-1",level:3}];function A(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components},{Details:a}=n;return a||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"create-concepts",children:"Create Concepts"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Learn how to create concepts within your app"})}),"\n",(0,s.jsx)("hr",{}),"\n",(0,s.jsx)(n.h2,{id:"create-via-the-ui",children:(0,s.jsx)(n.strong,{children:"Create via the UI"})}),"\n",(0,s.jsxs)(n.p,{children:["To create a new concept, head to your application's individual page and select the ",(0,s.jsx)(n.strong,{children:"Inputs"})," option in the collapsible left sidebar."]}),"\n",(0,s.jsx)(n.p,{children:"You'll be redirected to the Inputs-Manager page, where you can create new concepts and use them to complete various operations."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:t(14248).A+"",width:"1885",height:"879"})}),"\n",(0,s.jsx)(n.p,{children:"There are several ways to create concepts on the platform. Let's illustrate two of them:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Via the ",(0,s.jsx)(n.strong,{children:"Labels"})," section"]}),"\n",(0,s.jsx)(n.li,{children:"Via the inputs uploader"}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"via-the-labels-section",children:["Via the ",(0,s.jsx)(n.strong,{children:"Labels"})," Section"]}),"\n",(0,s.jsxs)(n.p,{children:["To create a new concept, go to the ",(0,s.jsx)(n.strong,{children:"Labels"})," section on the Inputs-Manager page and click the plus sign (",(0,s.jsx)(n.strong,{children:"+"}),") next to the ",(0,s.jsx)(n.strong,{children:"Select or add concepts"})," search box. Then, type the new concept name in the search box."]}),"\n",(0,s.jsxs)(n.p,{children:["The new name you've typed will appear underneath the search box. Click the ",(0,s.jsx)(n.strong,{children:"Add new label"})," button to create the concept."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:t(49636).A+"",width:"1878",height:"826"})}),"\n",(0,s.jsx)(n.p,{children:"The new concept will be successfully added to your app. You can follow the same process to create other concepts for your app."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:t(36860).A+"",width:"1892",height:"802"})}),"\n",(0,s.jsx)(n.h3,{id:"via-the-inputs-uploader",children:"Via the Inputs Uploader"}),"\n",(0,s.jsxs)(n.p,{children:["You can also create new concepts when uploading inputs to your app. To do so, click the ",(0,s.jsx)(n.strong,{children:"Upload Inputs"})," button at the upper-right corner of the Inputs-Manager page."]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"The window that pops up allows you to upload your inputs \u2014 either by uploading them directly from your local device or by providing a publicly accessible URL."}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["In the ",(0,s.jsx)(n.strong,{children:"Concepts"})," section of the pop-up window, click the plus sign (",(0,s.jsx)(n.strong,{children:"+"}),") next to the ",(0,s.jsx)(n.strong,{children:"Select or add concepts"})," search box. Then, type the new concept name in the search box."]}),"\n",(0,s.jsxs)(n.p,{children:["The new name you've typed will appear underneath the search box. Click the ",(0,s.jsx)(n.strong,{children:"Add new concept"})," button to create the concept."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:t(66060).A+"",width:"1893",height:"825"})}),"\n",(0,s.jsx)(n.p,{children:"The new concept will be successfully added to your app."}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["You can also click the ",(0,s.jsx)(n.strong,{children:"Upload inputs"})," button at the bottom of the pop-up window to finalize uploading your input."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:t(70353).A+"",width:"1897",height:"832"})}),"\n",(0,s.jsx)(n.h2,{id:"create-via-the-api",children:(0,s.jsx)(n.strong,{children:"Create via the API"})}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["Before using the ",(0,s.jsx)(n.a,{href:"https://docs.clarifai.com/additional-resources/api-overview/python-sdk",children:"Python SDK"}),", ",(0,s.jsx)(n.a,{href:"https://docs.clarifai.com/additional-resources/api-overview/nodejs-sdk",children:"Node.js SDK"}),", or any of our ",(0,s.jsx)(n.a,{href:"https://docs.clarifai.com/additional-resources/api-overview/grpc-clients",children:"gRPC clients"}),", ensure they are properly installed on your machine. Refer to their respective installation guides for instructions on how to install and initialize them."]})}),"\n","\n","\n","\n",(0,s.jsx)(n.h3,{id:"create-concepts-1",children:"Create Concepts"}),"\n",(0,s.jsx)(n.p,{children:"To create a new concept in your app, you POST the concept with an id and name. You can also post more than one concept in the same request by sending a list of concepts."}),"\n",(0,s.jsx)(n.p,{children:"Below is an example of how to add concepts."}),"\n",(0,s.jsxs)(o.A,{children:[(0,s.jsx)(i.A,{value:"python",label:"Python SDK",children:(0,s.jsx)(c.A,{className:"language-python",children:l})}),(0,s.jsx)(i.A,{value:"python2",label:"Python (gRPC)",children:(0,s.jsx)(c.A,{className:"language-python",children:p})}),(0,s.jsx)(i.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:u})}),(0,s.jsx)(i.A,{value:"nodejs",label:"Node.js (gRPC)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:d})}),(0,s.jsx)(i.A,{value:"java",label:"Java (gRPC)",children:(0,s.jsx)(c.A,{className:"language-java",children:h})}),(0,s.jsx)(i.A,{value:"php",label:"PHP (gRPC)",children:(0,s.jsx)(c.A,{className:"language-php",children:_})}),(0,s.jsx)(i.A,{value:"curl",label:"cURL",children:(0,s.jsx)(c.A,{className:"language-bash",children:g})})]}),"\n",(0,s.jsxs)(a,{children:[(0,s.jsx)("summary",{children:"Raw Output Example"}),(0,s.jsx)(c.A,{className:"language-js",children:f})]})]})}function w(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(A,{...e})}):A(e)}}}]);
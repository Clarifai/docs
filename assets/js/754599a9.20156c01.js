"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[8798],{27955:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>f,contentTitle:()=>m,default:()=>b,frontMatter:()=>h,metadata:()=>r,toc:()=>g});const r=JSON.parse('{"id":"compute/models/model-inference","title":"Model Inference","description":"Perform predictions using your deployed models","source":"@site/docs/compute/models/model-inference.md","sourceDirName":"compute/models","slug":"/compute/models/model-inference","permalink":"/compute/models/model-inference","draft":false,"unlisted":false,"editUrl":"https://github.com/Clarifai/docs/blob/main/docs/compute/models/model-inference.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"description":"Perform predictions using your deployed models","sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Models","permalink":"/compute/models/"},"next":{"title":"Model Uploading","permalink":"/compute/models/model-upload/"}}');var i=n(74848),s=n(28453),l=n(65537),a=n(79329),o=n(58069);const d='from clarifai.client.model import Model\n\nmodel_url = "https://clarifai.com/stepfun-ai/ocr/models/got-ocr-2_0"\n\n# URL of the image to analyze\nimage_url = "https://samples.clarifai.com/featured-models/model-ocr-scene-text-las-vegas-sign.png"\n\n# Initialize the model \nmodel = Model(\n    url=model_url, \n    pat="YOUR_PAT_HERE" \n)\n\n# Make a prediction using the model with the specified compute cluster and nodepool\nmodel_prediction = model.predict_by_url(\n    image_url,\n    input_type="image",\n    deployment_id="test-deployment"     \n)\n\n# Print the output\nprint(model_prediction.outputs[0].data.text.raw)\n',c='clarifai model predict --model_id got-ocr-2_0 --user_id stepfun-ai --app_id ocr --url "https://samples.clarifai.com/featured-models/ocr-woman-holding-sold-sign.jpg" --input_type image --deployment_id "test-deployment"\n',u='from clarifai.client.model import Model\n\nmodel_url = "https://clarifai.com/meta/Llama-3/models/llama-3_2-3b-instruct"\n\n# URL of the prompt text\ntext_url = "https://samples.clarifai.com/featured-models/falcon-instruction-guidance.txt"\n\n# Initialize the model \nmodel = Model(\n    url=model_url, \n    pat="YOUR_PAT_HERE" \n)\n\n# Perform unary-stream prediction with the specified compute cluster and nodepool\nstream_response = model.generate_by_url(\n    text_url, \n    input_type="text",\n    deployment_id="test-deployment"\n)\n\n# Handle the stream of responses\nlist_stream_response = [response for response in stream_response]\n',p='from clarifai.client.model import Model\n\nmodel_url = "https://clarifai.com/meta/Llama-3/models/llama-3_2-3b-instruct"\n\n# URL of the prompt text\ntext_url = "https://samples.clarifai.com/featured-models/falcon-instruction-guidance.txt"\n\n# Initialize the model \nmodel = Model(\n    url=model_url, \n    pat="YOUR_PAT_HERE" \n)\n\n# Perform stream-stream prediction with the specified compute cluster and nodepool\nstream_response = model.stream_by_url(\n    iter([text_url]), \n    input_type="text",\n    deployment_id="test-deployment"\n)\n\n# Handle the stream of responses\nlist_stream_response = [response for response in stream_response]\n',h={description:"Perform predictions using your deployed models",sidebar_position:1},m="Model Inference",f={},g=[{value:"<strong>Via the API</strong>",id:"via-the-api",level:2},{value:"Unary-Unary Predict Call",id:"unary-unary-predict-call",level:3},{value:"Unary-Stream Predict Call",id:"unary-stream-predict-call",level:3},{value:"Stream-Stream Predict Call",id:"stream-stream-predict-call",level:3},{value:"<strong>Via the UI</strong>",id:"via-the-ui",level:2},{value:"Model Playground",id:"model-playground",level:3},{value:"Predictions Within Input-Viewer",id:"predictions-within-input-viewer",level:3}];function y(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",p:"p",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"model-inference",children:"Model Inference"})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"Perform predictions using your deployed models"})}),"\n",(0,i.jsx)("hr",{}),"\n",(0,i.jsxs)(t.p,{children:["Clarifai's Compute Orchestration capabilities provide efficient ways to make prediction calls to suit various use cases. Once your ",(0,i.jsx)(t.a,{href:"https://docs.clarifai.com/compute/deployments/deploy-model",children:"model is deployed"}),", you can use it to perform inferences seamlessly."]}),"\n",(0,i.jsx)(t.admonition,{title:"Why Deployment Selection Matters",type:"warning",children:(0,i.jsxs)(t.p,{children:["To ensure proper routing and execution, you must specify the ",(0,i.jsx)(t.code,{children:"deployment_id"})," parameter. This parameter is essential in directing prediction requests to the appropriate cluster and nodepool. For example, you can route requests to a GCP cluster by selecting a corresponding deployment ID, use a different deployment ID for an AWS cluster, and yet another for an on-premises deployment. This gives you full control over performance, costs, and security, allowing you to focus on building cutting-edge AI solutions while we handle the infrastructure complexity."]})}),"\n","\n","\n",(0,i.jsx)(t.h2,{id:"via-the-api",children:(0,i.jsx)(t.strong,{children:"Via the API"})}),"\n",(0,i.jsx)(t.h3,{id:"unary-unary-predict-call",children:"Unary-Unary Predict Call"}),"\n",(0,i.jsx)(t.p,{children:"This is the simplest type of prediction. In this method, a single input is sent to the model, and it returns a single response. This is ideal for tasks where a quick, non-streaming prediction is required, such as classifying an image."}),"\n",(0,i.jsx)(t.p,{children:"It supports the following prediction methods:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"predict_by_url"}),"  \u2014 Use a publicly accessible URL for the input."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"predict_by_bytes"})," \u2014 Pass raw input data directly."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"predict_by_filepath"})," \u2014 Provide the local file path for the input."]}),"\n"]}),"\n",(0,i.jsxs)(l.A,{children:[(0,i.jsx)(a.A,{value:"python",label:"Python",children:(0,i.jsx)(o.A,{className:"language-python",children:d})}),(0,i.jsx)(a.A,{value:"bash",label:"CLI",children:(0,i.jsx)(o.A,{className:"language-yaml",children:c})})]}),"\n",(0,i.jsx)(t.h3,{id:"unary-stream-predict-call",children:"Unary-Stream Predict Call"}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.strong,{children:"Unary-Stream"})," predict call processes a single input, but returns a stream of responses. It is particularly useful for tasks where multiple outputs are generated from a single input, such as generating text completions from a prompt."]}),"\n",(0,i.jsx)(t.p,{children:"It supports the following prediction methods:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"generate_by_url"}),"  \u2014 Provide a publicly accessible URL and handle the streamed responses iteratively."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"generate_by_bytes"})," \u2014 Use raw input data."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"generate_by_filepath"})," \u2014 Use a local file path for the input."]}),"\n"]}),"\n",(0,i.jsx)(l.A,{children:(0,i.jsx)(a.A,{value:"python",label:"Python",children:(0,i.jsx)(o.A,{className:"language-python",children:u})})}),"\n",(0,i.jsx)(t.h3,{id:"stream-stream-predict-call",children:"Stream-Stream Predict Call"}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.strong,{children:"stream-stream"})," predict call enables bidirectional streaming of both inputs and outputs, making it highly effective for processing large datasets or real-time applications."]}),"\n",(0,i.jsx)(t.p,{children:"In this setup, multiple inputs can be continuously sent to the model, and the corresponding multiple predictions are streamed back in real-time. This is ideal for tasks like real-time video processing/predictions or live sensor data analysis."}),"\n",(0,i.jsx)(t.p,{children:"It supports the following prediction methods:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"stream_by_url"})," \u2014 Stream a list of publicly accessible URLs and receive a stream of predictions. It takes an iterator of inputs and returns a stream of predictions."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"stream_by_bytes"})," \u2014 Stream raw input data."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"stream_by_filepath"})," \u2014 Stream inputs from local file paths."]}),"\n"]}),"\n",(0,i.jsx)(l.A,{children:(0,i.jsx)(a.A,{value:"python",label:"Python",children:(0,i.jsx)(o.A,{className:"language-python",children:p})})}),"\n",(0,i.jsx)(t.h2,{id:"via-the-ui",children:(0,i.jsx)(t.strong,{children:"Via the UI"})}),"\n",(0,i.jsx)(t.h3,{id:"model-playground",children:"Model Playground"}),"\n",(0,i.jsxs)(t.p,{children:["To access your deployments, navigate to the model\u2019s playground page and select the ",(0,i.jsx)(t.strong,{children:"Deployments"})," tab."]}),"\n",(0,i.jsxs)(t.p,{children:["Here, you\u2019ll find a ",(0,i.jsx)(t.strong,{children:"Deployments & Usage"})," table listing all deployments associated with the model, including details such as the cluster and nodepool. You can also sort the table alphabetically (A\u2013Z or Z\u2013A) based on your preferences."]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:" ",src:n(86946).A+"",width:"1795",height:"777"})}),"\n",(0,i.jsxs)(t.p,{children:["To select a deployment, click the ",(0,i.jsx)(t.strong,{children:"Deployment"})," button. A dropdown list will appear, showing your available deployments. Choose the one you want to use to direct traffic to a specific cluster and nodepool."]}),"\n",(0,i.jsx)(t.admonition,{type:"note",children:(0,i.jsxs)(t.p,{children:["If no selection is made, the default ",(0,i.jsx)(t.strong,{children:"Clarifai Shared"})," deployment will be used."]})}),"\n",(0,i.jsxs)(t.p,{children:["Once you\u2019ve selected a deployment ID, go to the ",(0,i.jsx)(t.strong,{children:"Overview"})," pane to use it for making prediction requests."]}),"\n",(0,i.jsx)(t.p,{children:"When inferencing using a deployed model, the request is routed to the nodepool within the cloud region specified in the cluster, and the model\u2019s predictions are returned as output in real time."}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:" ",src:n(49952).A+"",width:"1809",height:"655"})}),"\n",(0,i.jsx)(t.h3,{id:"predictions-within-input-viewer",children:"Predictions Within Input-Viewer"}),"\n",(0,i.jsxs)(t.p,{children:["The single Input-Viewer is the main page that showcases the details of a single input available in your app. If you click an input listed on the ",(0,i.jsx)(t.a,{href:"https://docs.clarifai.com/portal-guide/inputs-manager/",children:"Inputs-Manager"})," page, you'll be redirected to the viewer page for that input, where you can view and interact with it."]}),"\n",(0,i.jsxs)(t.p,{children:["To make predictions on an input, switch to predict mode by toggling the ",(0,i.jsx)(t.strong,{children:"Predict"})," button located in the top-right corner of the page. Next, click the ",(0,i.jsx)(t.strong,{children:"Choose a model or workflow"})," button in the right-hand sidebar to select the model you want to use."]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:" ",src:n(87990).A+"",width:"1917",height:"902"})}),"\n",(0,i.jsxs)(t.p,{children:["In the window that appears, choose your desired model and then select a deployment from the ",(0,i.jsx)(t.strong,{children:"Deployment"})," dropdown. If needed, you can also create a new deployment from this window."]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:" ",src:n(65297).A+"",width:"1906",height:"900"})}),"\n",(0,i.jsxs)(t.p,{children:["Lastly, click the ",(0,i.jsx)(t.strong,{children:"Predict"})," button at the bottom of the sidebar. The model will process the input and return predictions in real time, allowing you to immediately view the results within the Input-Viewer screen."]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:" ",src:n(71432).A+"",width:"1915",height:"821"})})]})}function b(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(y,{...e})}):y(e)}},49952:(e,t,n)=>{n.d(t,{A:()=>r});const r=n.p+"assets/images/compute-21-ed55030b37b9db591cb877577243849e.png"},65297:(e,t,n)=>{n.d(t,{A:()=>r});const r=n.p+"assets/images/compute-28-95e4aa0fe0993a129a036629fe742ed5.png"},65537:(e,t,n)=>{n.d(t,{A:()=>w});var r=n(96540),i=n(18215),s=n(65627),l=n(56347),a=n(50372),o=n(30604),d=n(11861),c=n(78749);function u(e){return r.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function p(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??function(e){return u(e).map((e=>{let{props:{value:t,label:n,attributes:r,default:i}}=e;return{value:t,label:n,attributes:r,default:i}}))}(n);return function(e){const t=(0,d.XI)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function h(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function m(e){let{queryString:t=!1,groupId:n}=e;const i=(0,l.W6)(),s=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,o.aZ)(s),(0,r.useCallback)((e=>{if(!s)return;const t=new URLSearchParams(i.location.search);t.set(s,e),i.replace({...i.location,search:t.toString()})}),[s,i])]}function f(e){const{defaultValue:t,queryString:n=!1,groupId:i}=e,s=p(e),[l,o]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!h({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const r=n.find((e=>e.default))??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:s}))),[d,u]=m({queryString:n,groupId:i}),[f,g]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[i,s]=(0,c.Dv)(n);return[i,(0,r.useCallback)((e=>{n&&s.set(e)}),[n,s])]}({groupId:i}),y=(()=>{const e=d??f;return h({value:e,tabValues:s})?e:null})();(0,a.A)((()=>{y&&o(y)}),[y]);return{selectedValue:l,selectValue:(0,r.useCallback)((e=>{if(!h({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);o(e),u(e),g(e)}),[u,g,s]),tabValues:s}}var g=n(9136);const y={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var b=n(74848);function x(e){let{className:t,block:n,selectedValue:r,selectValue:l,tabValues:a}=e;const o=[],{blockElementScrollPositionUntilNextRender:d}=(0,s.a_)(),c=e=>{const t=e.currentTarget,n=o.indexOf(t),i=a[n].value;i!==r&&(d(t),l(i))},u=e=>{let t=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const n=o.indexOf(e.currentTarget)+1;t=o[n]??o[0];break}case"ArrowLeft":{const n=o.indexOf(e.currentTarget)-1;t=o[n]??o[o.length-1];break}}t?.focus()};return(0,b.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.A)("tabs",{"tabs--block":n},t),children:a.map((e=>{let{value:t,label:n,attributes:s}=e;return(0,b.jsx)("li",{role:"tab",tabIndex:r===t?0:-1,"aria-selected":r===t,ref:e=>{o.push(e)},onKeyDown:u,onClick:c,...s,className:(0,i.A)("tabs__item",y.tabItem,s?.className,{"tabs__item--active":r===t}),children:n??t},t)}))})}function j(e){let{lazy:t,children:n,selectedValue:s}=e;const l=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=l.find((e=>e.props.value===s));return e?(0,r.cloneElement)(e,{className:(0,i.A)("margin-top--md",e.props.className)}):null}return(0,b.jsx)("div",{className:"margin-top--md",children:l.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==s})))})}function v(e){const t=f(e);return(0,b.jsxs)("div",{className:(0,i.A)("tabs-container",y.tabList),children:[(0,b.jsx)(x,{...t,...e}),(0,b.jsx)(j,{...t,...e})]})}function w(e){const t=(0,g.A)();return(0,b.jsx)(v,{...e,children:u(e.children)},String(t))}},71432:(e,t,n)=>{n.d(t,{A:()=>r});const r=n.p+"assets/images/compute-29-70c14a07bb41b28552b10fa61af576a8.png"},79329:(e,t,n)=>{n.d(t,{A:()=>l});n(96540);var r=n(18215);const i={tabItem:"tabItem_Ymn6"};var s=n(74848);function l(e){let{children:t,hidden:n,className:l}=e;return(0,s.jsx)("div",{role:"tabpanel",className:(0,r.A)(i.tabItem,l),hidden:n,children:t})}},86946:(e,t,n)=>{n.d(t,{A:()=>r});const r=n.p+"assets/images/compute-16-b44b5ff30506ca7b0fafa9905800b190.png"},87990:(e,t,n)=>{n.d(t,{A:()=>r});const r=n.p+"assets/images/compute-27-b79759e88b88f3ae8ca7393873f14e64.png"}}]);
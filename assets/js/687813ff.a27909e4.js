"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[8856],{32593:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>f,contentTitle:()=>m,default:()=>y,frontMatter:()=>p,metadata:()=>t,toc:()=>x});const t=JSON.parse('{"id":"compute/agents/mcp","title":"Clarifai MCP Servers","description":"Build performant MCP Servers with Clarifai","source":"@site/docs/compute/agents/mcp.md","sourceDirName":"compute/agents","slug":"/compute/agents/mcp","permalink":"/compute/agents/mcp","draft":false,"unlisted":false,"editUrl":"https://github.com/Clarifai/docs/blob/main/docs/compute/agents/mcp.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"description":"Build performant MCP Servers with Clarifai","sidebar_position":1,"toc_max_heading_level":4},"sidebar":"tutorialSidebar","previous":{"title":"Agents","permalink":"/compute/agents/"},"next":{"title":"Authentication","permalink":"/control/authentication/"}}');var s=r(74848),a=r(28453),i=r(65537),l=r(79329),o=r(58069);const c='import json\nimport os\nimport asyncio\nimport queue\nimport threading\nimport traceback\nfrom typing import Any, Iterator\n\nimport anyio\nfrom pydantic import Field\nfrom pydantic_core import ValidationError\n\nfrom clarifai.runners.models.model_class import ModelClass\nfrom clarifai.runners.models.mcp_class import MCPModelClass\nfrom clarifai.utils.logging import logger\n\nfrom mcp import types\nfrom mcp.shared.exceptions import McpError\nfrom fastmcp import FastMCP, Client  # Use fastmcp v2, not the built-in mcp\n\n# Initialize the server\nserver = FastMCP("my-first-mcp-server", instructions="", stateless_http=True)\n\n\n@server.tool("calculate_sum", description="Add two numbers together")\ndef sum(a: Any = Field(description="first number"), b: Any = Field(description="second number")):\n    return float(a) + float(b)\n\n\n@server.tool("weather", description="Get the current weather information for the given city")\ndef weather(city: str = Field(description="The city to get weather for")):\n    if city.lower() == "philly":\n        return "It\'s always sunny in Philadelphia!"\n    elif city.lower() == "seattle":\n        return "It\'s always rainy in Seattle!"\n    else:\n        return f"In {city} it\'s 74 F and cloudy."\n\n\n@server.tool("list_files", description="List files in a directory")\ndef list_files(directory: str = Field(description="The directory to list files in")) -> list[str]:\n    try:\n        return os.listdir(directory)\n    except FileNotFoundError:\n        return f"Directory {directory} not found."\n\n\n@server.tool("send_slack_message", description="Send a message to a Slack channel")\ndef send_slack_message(\n    channel: str = Field(description="The Slack channel to send the message to"),\n    message: str = Field(description="The message to send"),\n) -> str:\n    import requests\n\n    # Replace with your Slack API token\n    slack_token = os.environ.get("SLACK_API_TOKEN")\n    headers = {\n        "Content-Type": "application/json",\n        "Authorization": f"Bearer {slack_token}",\n    }\n    payload = {\n        "channel": channel,\n        "text": message,\n    }\n    url = "https://slack.com/api/chat.postMessage"\n    response = requests.post(url, headers=headers, data=json.dumps(payload))\n    response.raise_for_status()  # Raise an exception for HTTP errors (4xx or 5xx)\n    response_json = response.json()\n\n    if response.status_code == 200 and response_json.get("ok"):\n        return "Message sent successfully!"\n    else:\n        return f"Failed to send message: {response.text}"\n\n\n@server.tool("sandbox", description="Run code")\ndef sandbox(code: str = Field(description="Code to run")) -> str:\n    return eval(code)\n\n\n# Static resource\n@server.resource("config://version")\ndef get_version():\n    return "2.0.1"\n\n\n# Dynamic resource template\n@server.resource("users://{user_id}/profile")\ndef get_profile(user_id: int):\n    # Fetch profile for user_id...\n    return {"name": f"User {user_id}", "status": "active"}\n\n\n@server.prompt()\ndef summarize_request(text: str) -> str:\n    """Generate a prompt asking for a summary."""\n    return f"Please summarize the following text:\\n\\n{text}"\n\n\nclass MyModelClass(MCPModelClass):\n    def get_server(self) -> FastMCP:\n        return server\n',d="build_info:\n  python_version: '3.11'\ninference_compute_info:\n  cpu_limit: 500m\n  cpu_memory: 500Mi\n  num_accelerators: 0\nmodel:\n  app_id: app-id\n  id: model-id\n  model_type_id: mcp\n  user_id: user-id",u="clarifai==11.4.7\nanyio==4.9.0\nmcp==1.9.0\nfastmcp==2.3.4",h='import os\n\nfrom clarifai.client import Model\nmodel = Model.from_current_context()\n\n# Example model prediction from different model methods:\nimport json\n\ns = json.dumps({\n  "jsonrpc": "2.0",\n  "id": 1,\n  "method": "tools/list",\n})\n\nresponse = model.mcp_transport(msg=s)\nprint(response)\n\n\ns = json.dumps({\n  "jsonrpc": "2.0",\n  "id": 1,\n  "method": "tools/call",\n  "params": {\n    "name": "weather",\n    "arguments": {\n      "city": "philly"\n    },\n    "model_config": {}\n  }\n})\n\nresponse = model.mcp_transport(msg=s)\nprint(response)',p={description:"Build performant MCP Servers with Clarifai",sidebar_position:1,toc_max_heading_level:4},m="Clarifai MCP Servers",f={},x=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Install Clarifai Package",id:"install-clarifai-package",level:3},{value:"Set a PAT Key",id:"set-a-pat-key",level:3},{value:"Create Files",id:"create-files",level:3},{value:"<code>model.py</code>",id:"modelpy",level:4},{value:"<code>requirements.txt</code>",id:"requirementstxt",level:4},{value:"<code>config.yaml</code>",id:"configyaml",level:4},{value:"<code>client.py</code>",id:"clientpy",level:4},{value:"Run an Example",id:"run-an-example",level:2},{value:"Upload to Clarifai",id:"upload-to-clarifai",level:2}];function g(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"clarifai-mcp-servers",children:"Clarifai MCP Servers"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Build performant MCP Servers with Clarifai"})}),"\n",(0,s.jsx)("hr",{}),"\n",(0,s.jsx)(n.p,{children:"The Model Context Protocol (MCP) is a standardized, secure framework for building servers that expose data and functionality to LLM-based applications.\nThink of it as a specialized web API built specifically for LLM interactions."}),"\n",(0,s.jsxs)(n.p,{children:["Clarifai allows you to build ",(0,s.jsx)(n.a,{href:"https://www.clarifai.com/blog/mcp-vs-a2a-clearly-explained",children:"MCP servers"})," by providing the necessary infrastructure and tools to define and deploy custom MCP servers. This allows you to seamlessly integrate your proprietary data sources, custom APIs, and application-specific functionalities with various LLM applications."]}),"\n",(0,s.jsx)(n.p,{children:"Let's illustrate how you can build a simple MCP server."}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://github.com/Clarifai/examples/tree/main/agents/mcp",children:"Click here"})," to see some examples of MCP servers."]}),"\n"]})}),"\n","\n","\n",(0,s.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,s.jsx)(n.h3,{id:"install-clarifai-package",children:"Install Clarifai Package"}),"\n",(0,s.jsxs)(n.p,{children:["Install the latest version of the ",(0,s.jsx)(n.code,{children:"clarifai"})," Python SDK. This also installs the Clarifai ",(0,s.jsx)(n.a,{href:"https://docs.clarifai.com/additional-resources/api-overview/cli",children:"Command Line Interface (CLI)"}),", which we'll use for uploading the model."]}),"\n",(0,s.jsx)(i.A,{children:(0,s.jsx)(l.A,{value:"bash",label:"Bash",children:(0,s.jsx)(o.A,{className:"language-bash",children:" pip install --upgrade clarifai "})})}),"\n",(0,s.jsx)(n.h3,{id:"set-a-pat-key",children:"Set a PAT Key"}),"\n",(0,s.jsxs)(n.p,{children:["You need to set the ",(0,s.jsx)(n.code,{children:"CLARIFAI_PAT"})," (Personal Access Token) as an environment variable. You can generate the PAT key in your personal settings page by navigating to the ",(0,s.jsx)(n.a,{href:"https://clarifai.com/settings/security",children:"Security section"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"This token is essential for authenticating your connection to the Clarifai platform."}),"\n",(0,s.jsxs)(i.A,{children:[(0,s.jsx)(l.A,{value:"bash",label:"Unix-Like Systems",children:(0,s.jsx)(o.A,{className:"language-bash",children:" export CLARIFAI_PAT=YOUR_PERSONAL_ACCESS_TOKEN_HERE "})}),(0,s.jsx)(l.A,{value:"bash2",label:"Windows",children:(0,s.jsx)(o.A,{className:"language-bash",children:" set CLARIFAI_PAT=YOUR_PERSONAL_ACCESS_TOKEN_HERE "})})]}),"\n",(0,s.jsx)(n.h3,{id:"create-files",children:"Create Files"}),"\n",(0,s.jsx)(n.p,{children:"Create a project directory and organize your files as indicated below to fit the requirements of building servers for the Clarifai platform."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"your_model_directory/\n\u251c\u2500\u2500 1/\n\u2502   \u2514\u2500\u2500 model.py\n\u251c\u2500\u2500 requirements.txt\n\u2514\u2500\u2500 config.yaml\n\u2514\u2500\u2500 client.py\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"your_model_directory/"})," \u2013 The root directory containing all files related to your server.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"1/"})," \u2013 A subdirectory that holds the model file (",(0,s.jsxs)(n.em,{children:["Note that the folder is named as ",(0,s.jsx)(n.strong,{children:"1"})]}),").","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"model.py"})," \u2013 Contains the main MCP server implementation."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"requirements.txt"})," \u2013 Lists the Python dependencies required to run your server."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"config.yaml"})," \u2013 Contains metadata and configuration settings, such as compute requirements, needed for uploading the model to Clarifai."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"client.py"})," \u2013 Contains the example client demonstrating usage."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Add the following snippets to each of the respective files."}),"\n",(0,s.jsx)(n.h4,{id:"modelpy",children:(0,s.jsx)(n.code,{children:"model.py"})}),"\n",(0,s.jsx)(i.A,{children:(0,s.jsx)(l.A,{value:"python",label:"Python",children:(0,s.jsx)(o.A,{className:"language-python",children:c})})}),"\n",(0,s.jsx)(n.h4,{id:"requirementstxt",children:(0,s.jsx)(n.code,{children:"requirements.txt"})}),"\n",(0,s.jsx)(i.A,{children:(0,s.jsx)(l.A,{value:"text",label:"Text",children:(0,s.jsx)(o.A,{className:"language-text",children:u})})}),"\n",(0,s.jsx)(n.h4,{id:"configyaml",children:(0,s.jsx)(n.code,{children:"config.yaml"})}),"\n",(0,s.jsx)(n.admonition,{title:"important",type:"info",children:(0,s.jsxs)(n.p,{children:["In the ",(0,s.jsx)(n.code,{children:"model"})," section of the ",(0,s.jsx)(n.code,{children:"config.yaml"})," file, specify your model ID, Clarifai user ID, and Clarifai app ID. These will define where your model will be uploaded on the Clarifai platform."]})}),"\n",(0,s.jsx)(i.A,{children:(0,s.jsx)(l.A,{value:"yaml",label:"YAML",children:(0,s.jsx)(o.A,{className:"language-yaml",children:d})})}),"\n",(0,s.jsx)(n.h4,{id:"clientpy",children:(0,s.jsx)(n.code,{children:"client.py"})}),"\n",(0,s.jsx)(i.A,{children:(0,s.jsx)(l.A,{value:"python",label:"Python",children:(0,s.jsx)(o.A,{className:"language-python",children:h})})}),"\n",(0,s.jsx)(n.admonition,{title:"Mock Data",type:"note",children:(0,s.jsx)(n.p,{children:"This example includes mock data and fallback implementations when external services are not available, allowing you to test the MCP interface without requiring all external dependencies."})}),"\n",(0,s.jsx)(n.h2,{id:"run-an-example",children:"Run an Example"}),"\n",(0,s.jsx)(n.p,{children:"After setting up the required files, navigate to your directory and run the following command to install the dependencies:"}),"\n",(0,s.jsx)(i.A,{children:(0,s.jsx)(l.A,{value:"bash",label:"Bash",children:(0,s.jsx)(o.A,{className:"language-bash",children:" pip install -r requirements.txt "})})}),"\n",(0,s.jsx)(n.p,{children:"Then, run the client example:"}),"\n",(0,s.jsx)(i.A,{children:(0,s.jsx)(l.A,{value:"bash",label:"Bash",children:(0,s.jsx)(o.A,{className:"language-bash",children:" python client.py "})})}),"\n",(0,s.jsx)(n.h2,{id:"upload-to-clarifai",children:"Upload to Clarifai"}),"\n",(0,s.jsx)(n.p,{children:"You can upload the MCP server to the Clarifai platform by navigating to its directory and running the following command:"}),"\n",(0,s.jsx)(i.A,{children:(0,s.jsx)(l.A,{value:"bash",label:"CLI",children:(0,s.jsx)(o.A,{className:"language-bash",children:" clarifai model upload "})})})]})}function y(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(g,{...e})}):g(e)}},65537:(e,n,r)=>{r.d(n,{A:()=>_});var t=r(96540),s=r(18215),a=r(65627),i=r(56347),l=r(50372),o=r(30604),c=r(11861),d=r(78749);function u(e){return t.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,t.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:n,children:r}=e;return(0,t.useMemo)((()=>{const e=n??function(e){return u(e).map((e=>{let{props:{value:n,label:r,attributes:t,default:s}}=e;return{value:n,label:r,attributes:t,default:s}}))}(r);return function(e){const n=(0,c.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,r])}function p(e){let{value:n,tabValues:r}=e;return r.some((e=>e.value===n))}function m(e){let{queryString:n=!1,groupId:r}=e;const s=(0,i.W6)(),a=function(e){let{queryString:n=!1,groupId:r}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!r)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return r??null}({queryString:n,groupId:r});return[(0,o.aZ)(a),(0,t.useCallback)((e=>{if(!a)return;const n=new URLSearchParams(s.location.search);n.set(a,e),s.replace({...s.location,search:n.toString()})}),[a,s])]}function f(e){const{defaultValue:n,queryString:r=!1,groupId:s}=e,a=h(e),[i,o]=(0,t.useState)((()=>function(e){let{defaultValue:n,tabValues:r}=e;if(0===r.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:r}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${r.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const t=r.find((e=>e.default))??r[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:a}))),[c,u]=m({queryString:r,groupId:s}),[f,x]=function(e){let{groupId:n}=e;const r=function(e){return e?`docusaurus.tab.${e}`:null}(n),[s,a]=(0,d.Dv)(r);return[s,(0,t.useCallback)((e=>{r&&a.set(e)}),[r,a])]}({groupId:s}),g=(()=>{const e=c??f;return p({value:e,tabValues:a})?e:null})();(0,l.A)((()=>{g&&o(g)}),[g]);return{selectedValue:i,selectValue:(0,t.useCallback)((e=>{if(!p({value:e,tabValues:a}))throw new Error(`Can't select invalid tab value=${e}`);o(e),u(e),x(e)}),[u,x,a]),tabValues:a}}var x=r(9136);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var y=r(74848);function v(e){let{className:n,block:r,selectedValue:t,selectValue:i,tabValues:l}=e;const o=[],{blockElementScrollPositionUntilNextRender:c}=(0,a.a_)(),d=e=>{const n=e.currentTarget,r=o.indexOf(n),s=l[r].value;s!==t&&(c(n),i(s))},u=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const r=o.indexOf(e.currentTarget)+1;n=o[r]??o[0];break}case"ArrowLeft":{const r=o.indexOf(e.currentTarget)-1;n=o[r]??o[o.length-1];break}}n?.focus()};return(0,y.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":r},n),children:l.map((e=>{let{value:n,label:r,attributes:a}=e;return(0,y.jsx)("li",{role:"tab",tabIndex:t===n?0:-1,"aria-selected":t===n,ref:e=>{o.push(e)},onKeyDown:u,onClick:d,...a,className:(0,s.A)("tabs__item",g.tabItem,a?.className,{"tabs__item--active":t===n}),children:r??n},n)}))})}function b(e){let{lazy:n,children:r,selectedValue:a}=e;const i=(Array.isArray(r)?r:[r]).filter(Boolean);if(n){const e=i.find((e=>e.props.value===a));return e?(0,t.cloneElement)(e,{className:(0,s.A)("margin-top--md",e.props.className)}):null}return(0,y.jsx)("div",{className:"margin-top--md",children:i.map(((e,n)=>(0,t.cloneElement)(e,{key:n,hidden:e.props.value!==a})))})}function j(e){const n=f(e);return(0,y.jsxs)("div",{className:(0,s.A)("tabs-container",g.tabList),children:[(0,y.jsx)(v,{...n,...e}),(0,y.jsx)(b,{...n,...e})]})}function _(e){const n=(0,x.A)();return(0,y.jsx)(j,{...e,children:u(e.children)},String(n))}},79329:(e,n,r)=>{r.d(n,{A:()=>i});r(96540);var t=r(18215);const s={tabItem:"tabItem_Ymn6"};var a=r(74848);function i(e){let{children:n,hidden:r,className:i}=e;return(0,a.jsx)("div",{role:"tabpanel",className:(0,t.A)(s.tabItem,i),hidden:r,children:n})}}}]);
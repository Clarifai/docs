"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[9684],{9228:(e,l,t)=>{t.r(l),t.d(l,{assets:()=>h,contentTitle:()=>u,default:()=>f,frontMatter:()=>d,metadata:()=>n,toc:()=>m});const n=JSON.parse('{"id":"compute/models/model-upload/test-models-locally","title":"Test Models Locally","description":"Learn how to test your locally built models","source":"@site/docs/compute/models/model-upload/test-models-locally.md","sourceDirName":"compute/models/model-upload","slug":"/compute/models/model-upload/test-models-locally","permalink":"/compute/models/model-upload/test-models-locally","draft":false,"unlisted":false,"editUrl":"https://github.com/Clarifai/docs/blob/main/docs/compute/models/model-upload/test-models-locally.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"description":"Learn how to test your locally built models","sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Model Uploading","permalink":"/compute/models/model-upload/"},"next":{"title":"Input and Output Data Types","permalink":"/compute/models/model-upload/data-types"}}');var a=t(74848),r=t(28453),o=t(65537),s=t(79329),i=t(58069);const c="from clarifai.client.model import Model\nmodel = Model(model_id='model_id', user_id='user_id', app_id='app_id') # no need to provide any actual values of `model_id`, `user_id` and `app_id`\n\nimage_url = \"https://samples.clarifai.com/metro-north.jpg\"\n\n# Model Predict\nmodel_prediction = model.predict_by_url(image_url,)",d={description:"Learn how to test your locally built models",sidebar_position:1},u="Test Models Locally",h={},m=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Build a Model",id:"build-a-model",level:3},{value:"Install Clarifai CLI",id:"install-clarifai-cli",level:3},{value:"Set up Docker or a Virtual Environment",id:"set-up-docker-or-a-virtual-environment",level:3},{value:"Test by Running Locally",id:"test-by-running-locally",level:2},{value:"Test by Starting a gRPC Server",id:"test-by-starting-a-grpc-server",level:2},{value:"Make Inference Requests",id:"make-inference-requests",level:2}];function p(e){const l={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(l.header,{children:(0,a.jsx)(l.h1,{id:"test-models-locally",children:"Test Models Locally"})}),"\n",(0,a.jsx)(l.p,{children:(0,a.jsx)(l.strong,{children:"Learn how to test your custom models locally"})}),"\n",(0,a.jsx)("hr",{}),"\n",(0,a.jsx)(l.p,{children:"Before uploading a custom model to the Clarifai platform, always test it locally. It ensures smooth performance, verifies dependency compatibility, and streamlines the deployment process."}),"\n",(0,a.jsx)(l.p,{children:"This step helps you detect problems like setup file errors, typos, code misconfigurations, or incorrect model implementations \u2014 saving you time and avoiding upload failures."}),"\n",(0,a.jsx)(l.admonition,{type:"note",children:(0,a.jsx)(l.p,{children:"You should ensure your local environment has sufficient memory and compute resources to handle model loading and execution during the testing process."})}),"\n",(0,a.jsx)(l.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,a.jsx)(l.h3,{id:"build-a-model",children:"Build a Model"}),"\n",(0,a.jsx)(l.p,{children:"You can either build a custom model from scratch or leverage pre-trained models from external repositories like Hugging Face."}),"\n",(0,a.jsxs)(l.p,{children:["If you're developing your own model, our ",(0,a.jsx)(l.a,{href:"https://docs.clarifai.com/compute/models/model-upload/",children:"step-by-step guide"})," provides detailed instructions to get started. You can also explore our ",(0,a.jsx)(l.a,{href:"https://github.com/Clarifai/examples/tree/main/models/model_upload",children:"examples repository"})," to learn how to build models compatible with the Clarifai platform."]}),"\n",(0,a.jsx)(l.h3,{id:"install-clarifai-cli",children:"Install Clarifai CLI"}),"\n",(0,a.jsxs)(l.p,{children:["Install the latest version of the ",(0,a.jsx)(l.a,{href:"https://docs.clarifai.com/sdk/cli",children:"Clarifai CLI"})," (Command Line Interface) tool. We'll use this tool to test models in the local development environment."]}),"\n",(0,a.jsx)(o.A,{children:(0,a.jsx)(s.A,{value:"bash",label:"Bash",children:(0,a.jsx)(i.A,{className:"language-bash",children:" pip install --upgrade clarifai "})})}),"\n",(0,a.jsx)(l.h3,{id:"set-up-docker-or-a-virtual-environment",children:"Set up Docker or a Virtual Environment"}),"\n",(0,a.jsxs)(l.p,{children:["Set up either a Docker container (recommended) or a Python virtual ",(0,a.jsx)(l.a,{href:"https://docs.clarifai.com/compute/models/model-upload/#set-up-docker-or-a-virtual-environment",children:"local development environment"})," for testing the model locally. This ensures proper dependency management and prevents conflicts in your project."]}),"\n","\n","\n",(0,a.jsxs)(l.admonition,{title:"CLI Flags",type:"note",children:[(0,a.jsx)(l.p,{children:"These are the key CLI flags available for local testing and running your models:"}),(0,a.jsxs)(l.ul,{children:["\n",(0,a.jsxs)(l.li,{children:[(0,a.jsx)(l.code,{children:"--mode"})," \u2014  Specify how to run the model: ",(0,a.jsx)(l.code,{children:"env"})," for virtual environment or ",(0,a.jsx)(l.code,{children:"container"})," for Docker container. Defaults to ",(0,a.jsx)(l.code,{children:"env"}),"."]}),"\n",(0,a.jsxs)(l.li,{children:[(0,a.jsx)(l.code,{children:"-p"})," or ",(0,a.jsx)(l.code,{children:"--port"})," \u2014  The port to host the gRPC server for running the model locally. Defaults to ",(0,a.jsx)(l.code,{children:"8000"}),"."]}),"\n",(0,a.jsxs)(l.li,{children:[(0,a.jsx)(l.code,{children:"--keep_env"})," \u2014  Retain the virtual environment after testing the model locally (applicable for ",(0,a.jsx)(l.code,{children:"env"})," mode). Defaults to ",(0,a.jsx)(l.code,{children:"False"}),"."]}),"\n",(0,a.jsxs)(l.li,{children:[(0,a.jsx)(l.code,{children:"--keep_image"})," \u2014  Retain the Docker image built after testing the model locally (applicable for ",(0,a.jsx)(l.code,{children:"container"})," mode). Defaults to ",(0,a.jsx)(l.code,{children:"False"}),"."]}),"\n",(0,a.jsxs)(l.li,{children:[(0,a.jsx)(l.code,{children:"--skip_dockerfile"})," \u2014 Flag to skip generating a dockerfile so that you can manually edit an already created dockerfile."]}),"\n"]})]}),"\n",(0,a.jsxs)(l.admonition,{title:"Local Model Path",type:"tip",children:[(0,a.jsxs)(l.p,{children:["You can specify the path to the directory containing the custom model you want to test. For example, if your model's files are stored in ",(0,a.jsx)(l.code,{children:"./examples/models/clarifai_llama"}),", use the following command:"]}),(0,a.jsx)(l.pre,{children:(0,a.jsx)(l.code,{className:"language-sh",children:"clarifai model test-locally ./examples/models/clarifai_llama --mode container\n"})}),(0,a.jsx)(l.p,{children:"If you don\u2019t specify a path, the current directory is used by default. In that case, simply navigate to the directory and run:"}),(0,a.jsx)(l.pre,{children:(0,a.jsx)(l.code,{className:"language-sh",children:"clarifai model test-locally --mode container\n"})})]}),"\n",(0,a.jsx)(l.h2,{id:"test-by-running-locally",children:"Test by Running Locally"}),"\n",(0,a.jsxs)(l.p,{children:["The ",(0,a.jsx)(l.code,{children:"test-locally"})," method allows you to test your model with a single CLI command. It runs the model locally and sends a sample request to verify that the model responds successfully. The results of the request are displayed directly in the console."]}),"\n",(0,a.jsx)(l.p,{children:"Here is how to test a model in a Docker Container:"}),"\n",(0,a.jsx)(o.A,{children:(0,a.jsx)(s.A,{value:"bash",label:"Bash",children:(0,a.jsx)(i.A,{className:"language-bash",children:" clarifai model test-locally --mode container "})})}),"\n",(0,a.jsx)(l.p,{children:"Here is how to test a model in a virtual environment:"}),"\n",(0,a.jsx)(o.A,{children:(0,a.jsx)(s.A,{value:"bash",label:"Bash",children:(0,a.jsx)(i.A,{className:"language-bash",children:" clarifai model test-locally --mode env "})})}),"\n",(0,a.jsx)(l.h2,{id:"test-by-starting-a-grpc-server",children:"Test by Starting a gRPC Server"}),"\n",(0,a.jsxs)(l.p,{children:["The  ",(0,a.jsx)(l.code,{children:"run-locally"})," method starts a local gRPC server at ",(0,a.jsx)(l.code,{children:"https://localhost:{port}/"})," for running the model. Once the server is running, you can perform inference on the model via the Clarifai Python SDK."]}),"\n",(0,a.jsx)(l.p,{children:"Here is how to test a model in a Docker Container:"}),"\n",(0,a.jsx)(o.A,{children:(0,a.jsx)(s.A,{value:"bash",label:"Bash",children:(0,a.jsx)(i.A,{className:"language-bash",children:" clarifai model run-locally --mode container --port 8000 "})})}),"\n",(0,a.jsx)(l.p,{children:"Here is how to test a model in a virtual environment:"}),"\n",(0,a.jsx)(o.A,{children:(0,a.jsx)(s.A,{value:"bash",label:"Bash",children:(0,a.jsx)(i.A,{className:"language-bash",children:" clarifai model run-locally --mode env --port 8000  "})})}),"\n",(0,a.jsx)(l.h2,{id:"make-inference-requests",children:"Make Inference Requests"}),"\n",(0,a.jsxs)(l.p,{children:["Once the model is running locally, you need to configure the ",(0,a.jsx)(l.code,{children:"CLARIFAI_API_BASE"})," environment variable to point to the localhost and port where the gRPC server is running."]}),"\n",(0,a.jsx)(o.A,{children:(0,a.jsx)(s.A,{value:"bash",label:"Bash",children:(0,a.jsxs)(i.A,{className:"language-bash",children:[' export CLARIFAI_API_BASE="localhost',":add-port-here",'" ']})})}),"\n",(0,a.jsxs)(l.p,{children:["You can then make ",(0,a.jsx)(l.a,{href:"https://docs.clarifai.com/compute/models/model-inference",children:"inference requests"})," using the model. Here is an example:"]}),"\n",(0,a.jsx)(o.A,{children:(0,a.jsx)(s.A,{value:"python",label:"Python",children:(0,a.jsx)(i.A,{className:"language-python",children:c})})})]})}function f(e={}){const{wrapper:l}={...(0,r.R)(),...e.components};return l?(0,a.jsx)(l,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}},65537:(e,l,t)=>{t.d(l,{A:()=>k});var n=t(96540),a=t(18215),r=t(65627),o=t(56347),s=t(50372),i=t(30604),c=t(11861),d=t(78749);function u(e){return n.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,n.isValidElement)(e)&&function(e){const{props:l}=e;return!!l&&"object"==typeof l&&"value"in l}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:l,children:t}=e;return(0,n.useMemo)((()=>{const e=l??function(e){return u(e).map((e=>{let{props:{value:l,label:t,attributes:n,default:a}}=e;return{value:l,label:t,attributes:n,default:a}}))}(t);return function(e){const l=(0,c.XI)(e,((e,l)=>e.value===l.value));if(l.length>0)throw new Error(`Docusaurus error: Duplicate values "${l.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[l,t])}function m(e){let{value:l,tabValues:t}=e;return t.some((e=>e.value===l))}function p(e){let{queryString:l=!1,groupId:t}=e;const a=(0,o.W6)(),r=function(e){let{queryString:l=!1,groupId:t}=e;if("string"==typeof l)return l;if(!1===l)return null;if(!0===l&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:l,groupId:t});return[(0,i.aZ)(r),(0,n.useCallback)((e=>{if(!r)return;const l=new URLSearchParams(a.location.search);l.set(r,e),a.replace({...a.location,search:l.toString()})}),[r,a])]}function f(e){const{defaultValue:l,queryString:t=!1,groupId:a}=e,r=h(e),[o,i]=(0,n.useState)((()=>function(e){let{defaultValue:l,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(l){if(!m({value:l,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${l}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return l}const n=t.find((e=>e.default))??t[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:l,tabValues:r}))),[c,u]=p({queryString:t,groupId:a}),[f,y]=function(e){let{groupId:l}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(l),[a,r]=(0,d.Dv)(t);return[a,(0,n.useCallback)((e=>{t&&r.set(e)}),[t,r])]}({groupId:a}),v=(()=>{const e=c??f;return m({value:e,tabValues:r})?e:null})();(0,s.A)((()=>{v&&i(v)}),[v]);return{selectedValue:o,selectValue:(0,n.useCallback)((e=>{if(!m({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);i(e),u(e),y(e)}),[u,y,r]),tabValues:r}}var y=t(9136);const v={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var x=t(74848);function b(e){let{className:l,block:t,selectedValue:n,selectValue:o,tabValues:s}=e;const i=[],{blockElementScrollPositionUntilNextRender:c}=(0,r.a_)(),d=e=>{const l=e.currentTarget,t=i.indexOf(l),a=s[t].value;a!==n&&(c(l),o(a))},u=e=>{let l=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const t=i.indexOf(e.currentTarget)+1;l=i[t]??i[0];break}case"ArrowLeft":{const t=i.indexOf(e.currentTarget)-1;l=i[t]??i[i.length-1];break}}l?.focus()};return(0,x.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.A)("tabs",{"tabs--block":t},l),children:s.map((e=>{let{value:l,label:t,attributes:r}=e;return(0,x.jsx)("li",{role:"tab",tabIndex:n===l?0:-1,"aria-selected":n===l,ref:e=>{i.push(e)},onKeyDown:u,onClick:d,...r,className:(0,a.A)("tabs__item",v.tabItem,r?.className,{"tabs__item--active":n===l}),children:t??l},l)}))})}function g(e){let{lazy:l,children:t,selectedValue:r}=e;const o=(Array.isArray(t)?t:[t]).filter(Boolean);if(l){const e=o.find((e=>e.props.value===r));return e?(0,n.cloneElement)(e,{className:(0,a.A)("margin-top--md",e.props.className)}):null}return(0,x.jsx)("div",{className:"margin-top--md",children:o.map(((e,l)=>(0,n.cloneElement)(e,{key:l,hidden:e.props.value!==r})))})}function j(e){const l=f(e);return(0,x.jsxs)("div",{className:(0,a.A)("tabs-container",v.tabList),children:[(0,x.jsx)(b,{...l,...e}),(0,x.jsx)(g,{...l,...e})]})}function k(e){const l=(0,y.A)();return(0,x.jsx)(j,{...e,children:u(e.children)},String(l))}},79329:(e,l,t)=>{t.d(l,{A:()=>o});t(96540);var n=t(18215);const a={tabItem:"tabItem_Ymn6"};var r=t(74848);function o(e){let{children:l,hidden:t,className:o}=e;return(0,r.jsx)("div",{role:"tabpanel",className:(0,n.A)(a.tabItem,o),hidden:t,children:l})}}}]);
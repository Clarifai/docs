"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[9955],{47207:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>Tn,contentTitle:()=>In,default:()=>Sn,frontMatter:()=>hn,metadata:()=>s,toc:()=>An});const s=JSON.parse('{"id":"create/labeling/api/tasks","title":"Tasks : Create, Get, Update, Delete","description":"Group your labeling work into tasks that can be delegated.","source":"@site/docs/create/labeling/api/tasks.md","sourceDirName":"create/labeling/api","slug":"/create/labeling/api/tasks","permalink":"/create/labeling/api/tasks","draft":false,"unlisted":false,"editUrl":"https://github.com/Clarifai/docs/blob/main/docs/create/labeling/api/tasks.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"description":"Group your labeling work into tasks that can be delegated.","sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Delete Annotations","permalink":"/create/labeling/api/annotations-delete"},"next":{"title":"Labeling via the UI","permalink":"/create/labeling/ui/"}}');var a=t(74848),r=t(28453),i=t(65537),o=t(79329),c=t(58069);const l="#################################################################################\n# In this section, we set the user authentication, app ID, and details for\n# assigning a task. Change these strings to run your own example.\n#################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to assign your own task\nCONCEPT_ID = 'water'\nWORKER_USER_ID = 'WORKER_USER_ID_HERE'\nREVIEWER_USER_ID = 'REVIEWER_USER_ID_HERE' # User who will review this task\nDATASET_ID = 'DATASET_ID_HERE'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\npost_tasks_response = stub.PostTasks(\n    service_pb2.PostTasksRequest(\n        user_app_id=userDataObject,  # The userDataObject is created in the overview and is required when using a PAT\n        tasks=[\n            resources_pb2.Task(\n                type='CONCEPTS_CLASSIFICATION',\n                name='Annotate ' + CONCEPT_ID,\n                worker=resources_pb2.TaskWorker(\n                    strategy='DYNAMIC',\n                    workers=[\n                        resources_pb2.Worker(\n                            user=resources_pb2.User(\n                                id=WORKER_USER_ID\n                            )\n                        )\n                    ]\n                ),\n                concepts=[\n                    resources_pb2.TaskConcept(\n                        concept=resources_pb2.Concept(\n                            id=CONCEPT_ID\n                        )\n                    )\n                ],\n                input_source=resources_pb2.TaskInputSource(\n                    type='DATASET',\n                    id=DATASET_ID\n                ),\n                sample_ms=1000,\n                review=resources_pb2.TaskReview(\n                    strategy='MANUAL',\n                    manual_strategy_info=resources_pb2.TaskReviewManualStrategyInfo(\n                        sample_percentage=0.5\n                    ),\n                    users=[\n                        resources_pb2.User(\n                            id=REVIEWER_USER_ID\n                        )\n                    ]\n                )\n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif post_tasks_response.status.code != status_code_pb2.SUCCESS:\n    print(post_tasks_response.status)\n    raise Exception('Post tasks failed, status: ' + post_tasks_response.status.description)\n",u="#################################################################################\n# In this section, we set the user authentication, app ID, and details for\n# creating a task. Change these strings to run your own example.\n#################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to create your own task with consensus review\nCONCEPT_ID = 'water'\nUSER_ID_1 = 'USER_ID_1_HERE'\nUSER_ID_2 = 'USER_ID_2_HERE'\nUSER_ID_3 = 'USER_ID_3_HERE'\nUSER_ID_4 = 'USER_ID_4_HERE'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\nfrom google.protobuf.struct_pb2 import Struct\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nparams = Struct()\nparams.update({\n    USER_ID_1: 1,\n    USER_ID_2: 1,\n    USER_ID_3: 1\n})\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\npost_tasks_response = stub.PostTasks(\n    service_pb2.PostTasksRequest(\n        user_app_id=userDataObject,  # The userDataObject is created in the overview and is required when using a PAT\n        tasks=[\n            resources_pb2.Task(\n                type='CONCEPTS_CLASSIFICATION',\n                name='Annotate ' + CONCEPT_ID,\n                worker=resources_pb2.TaskWorker(\n                    strategy='PARTITIONED',\n                    workers=[\n                        resources_pb2.Worker(user=resources_pb2.User(id=USER_ID_1)),\n                        resources_pb2.Worker(user=resources_pb2.User(id=USER_ID_2)),\n                        resources_pb2.Worker(user=resources_pb2.User(id=USER_ID_3))\n                    ],\n                    partitioned_strategy_info=resources_pb2.TaskWorkerPartitionedStrategyInfo(\n                        type='WEIGHTED',\n                        workers_per_input=3,\n                        weights=params\n                    )\n                ),\n                concepts=[\n                    resources_pb2.TaskConcept(\n                        concept=resources_pb2.Concept(id=CONCEPT_ID)\n                    )\n                ],\n                input_source=resources_pb2.TaskInputSource(type='ALL_INPUTS'),\n                sample_ms=1000,\n                review=resources_pb2.TaskReview(\n                    strategy='CONSENSUS',\n                    consensus_strategy_info=resources_pb2.TaskReviewConsensusStrategyInfo(\n                        approval_threshold=2\n                    ),\n                    users=[resources_pb2.User(id=USER_ID_4)]\n                )\n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif post_tasks_response.status.code != status_code_pb2.SUCCESS:\n    print(post_tasks_response.status)\n    raise Exception('Post tasks failed, status: ' + post_tasks_response.status.description)\n",p="#################################################################################\n# In this section, we set the user authentication, app ID, and task ID.\n# Change these strings to run your own example.\n#################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change this to get a task by its ID\nTASK_ID = 'c454edb9446c4de58d4fe3a66c286e55'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\nget_tasks_response = stub.GetTask(\n    service_pb2.GetTaskRequest(\n        user_app_id=userDataObject,  # The userDataObject is created in the overview and is required when using a PAT\n        task_id=TASK_ID\n    ),\n    metadata=metadata\n)\n\nif get_tasks_response.status.code != status_code_pb2.SUCCESS:\n    print(get_tasks_response.status)\n    raise Exception(f'Get task failed, status: {get_tasks_response.status.description}')\n\nprint(get_tasks_response)\n",_="#######################################################################\n# In this section, we set the user authentication and app ID.\n# Change these strings to run your own example.\n#######################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\nlist_tasks_response = stub.ListTasks(\n    service_pb2.ListTasksRequest(\n        user_app_id=userDataObject,  # The userDataObject is created in the overview and is required when using a PAT       \n    ),\n    metadata=metadata\n)\n\nif list_tasks_response.status.code != status_code_pb2.SUCCESS:\n    print(list_tasks_response.status)\n    raise Exception(f'Get task failed, status: {list_tasks_response.status.description}')\n\nprint(list_tasks_response)\n",d="#######################################################################\n# In this section, we set the user authentication, app ID, and\n# worker user ID. Change these strings to run your own example.\n#######################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\nWORKER_USER_ID = 'WORKER_USER_ID_HERE'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\nlist_tasks_response = stub.ListTasks(\n    service_pb2.ListTasksRequest(\n        user_app_id=userDataObject,  # The userDataObject is created in the overview and is required when using a PAT  \n        worker_user_ids=[WORKER_USER_ID]     \n    ),\n    metadata=metadata\n)\n\nif list_tasks_response.status.code != status_code_pb2.SUCCESS:\n    print(list_tasks_response.status)\n    raise Exception(f'Get task failed, status: {list_tasks_response.status.description}')\n\nprint(list_tasks_response)\n",E="#######################################################################\n# In this section, we set the user authentication, app ID, and\n# review user ID. Change these strings to run your own example.\n#######################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\nREVIEW_USER_ID = 'REVIEW_USER_ID_HERE'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\nlist_tasks_response = stub.ListTasks(\n    service_pb2.ListTasksRequest(\n        user_app_id=userDataObject,  # The userDataObject is created in the overview and is required when using a PAT  \n        review_user_ids=[REVIEW_USER_ID]     \n    ),\n    metadata=metadata\n)\n\nif list_tasks_response.status.code != status_code_pb2.SUCCESS:\n    print(list_tasks_response.status)\n    raise Exception(f'Get task failed, status: {list_tasks_response.status.description}')\n\nprint(list_tasks_response)\n",h="#################################################################################\n# In this section, we set the user authentication, app ID, and details for\n# updating a task. Change these strings to run your own example.\n#################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to update your own task\nCONCEPT_ID = 'water'\nTASK_ID = 'd0f2fa2b61234d1cb6b66983ea021b5b'\nUSER_ID_1 = 'USER_ID_1_HERE'\nUSER_ID_2 = 'USER_ID_2_HERE'\nUSER_ID_3 = 'USER_ID_3_HERE'\nUSER_ID_4 = 'USER_ID_4_HERE'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2, status_pb2\nfrom google.protobuf.struct_pb2 import Struct\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nparams = Struct()\nparams.update({\n    USER_ID_1: 1,\n    USER_ID_2: 1,\n    USER_ID_3: 1\n})\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\npatch_tasks_response = stub.PatchTasks(\n    service_pb2.PatchTasksRequest(\n        user_app_id=userDataObject,  # The userDataObject is created in the overview and is required when using a PAT\n        action=\"overwrite\",\n        tasks=[\n            resources_pb2.Task(\n                id=TASK_ID,\n                type='CONCEPTS_CLASSIFICATION',\n                name='Annotate ' + CONCEPT_ID,\n                worker=resources_pb2.TaskWorker(\n                    strategy='PARTITIONED',\n                    users=[\n                        resources_pb2.User(id=USER_ID_1),\n                        resources_pb2.User(id=USER_ID_2),\n                        resources_pb2.User(id=USER_ID_3)\n                    ],\n                    partitioned_strategy_info=resources_pb2.TaskWorkerPartitionedStrategyInfo(\n                        type='WEIGHTED',\n                        workers_per_input=3,\n                        weights=params\n                    )\n                ),\n                concepts=[\n                    resources_pb2.TaskConcept(\n                        concept=resources_pb2.Concept(id=CONCEPT_ID)\n                    )\n                ],\n                input_source=resources_pb2.TaskInputSource(type='ALL_INPUTS'),\n                sample_ms=1000,\n                review=resources_pb2.TaskReview(\n                    strategy='CONSENSUS',\n                    consensus_strategy_info=resources_pb2.TaskReviewConsensusStrategyInfo(\n                        approval_threshold=2\n                    ),\n                    users=[resources_pb2.User(id=USER_ID_4)]\n                ),\n                status=status_pb2.Status(\n                    code='TASK_DONE'\n                )\n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif patch_tasks_response.status.code != status_code_pb2.SUCCESS:\n    print(patch_tasks_response.status)\n    raise Exception('Patch tasks failed, status: ' + patch_tasks_response.status.description)\n",I="#################################################################################\n# In this section, we set the user authentication, app ID, and task IDs. \n# Change these strings to run your own example.\n#################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to delete your own tasks\nTASK_ID_1 = 'd1f2f891da9844ccafed93a18574b027'\nTASK_ID_2 = 'd1f2f891da9844ccafed93a18574b027'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\ndelete_tasks_response = stub.DeleteTasks(\n    service_pb2.DeleteTasksRequest(\n        user_app_id=userDataObject,  # The userDataObject is created in the overview and is required when using a PAT       \n        ids=[TASK_ID_1, TASK_ID_2] \n\n    ),\n    metadata=metadata\n)\n\nif delete_tasks_response.status.code != status_code_pb2.SUCCESS:\n    print(delete_tasks_response.status)\n    raise Exception('Delete tasks failed, status: ' + delete_tasks_response.status.description)\n",T="##########################################################################################\n# In this section, we set the user authentication, app ID, and auto-annotation details.\n# Change these strings to run your own example.\n##########################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to create your own auto-annotation task \nMODEL_ID = 'MODEL_ID_HERE'\nMODEL_VERSION_ID = 'MODEL_VERSION_ID_HERE'\nCONCEPT_ID = 'CONCEPT_ID_HERE'\nDATASET_ID = 'DATASET_ID_HERE'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\npost_tasks_response = stub.PostTasks(\n    service_pb2.PostTasksRequest(\n        user_app_id=userDataObject,  # The userDataObject is created in the overview and is required when using a PAT\n        tasks=[\n            resources_pb2.Task(\n                type='TYPE_NOT_SET',\n                name='Auto-Annotate ' + CONCEPT_ID,\n                worker=resources_pb2.TaskWorker(\n                    strategy='FULL',\n                    workers=[\n                        resources_pb2.Worker(\n                            model=resources_pb2.Model(\n                                id=MODEL_ID,\n                                model_version=resources_pb2.ModelVersion(\n                                    id=MODEL_VERSION_ID\n                                )\n                            )\n                        )\n                    ]\n                ),\n                concepts=[\n                    resources_pb2.TaskConcept(\n                        concept=resources_pb2.Concept(\n                            id=CONCEPT_ID\n                        ),\n                        auto_annotation_config=resources_pb2.TaskConceptAutoAnnotationConfig(\n                            annotation_data_types=1,\n                            threshold_range=resources_pb2.ThresholdRange(\n                                is_lower_inclusive=True,\n                                is_upper_inclusive=True,\n                                lower=0.7,\n                                upper=0.999\n                            ),\n                            status_code=24150\n                        )\n                    )\n                ],\n                input_source=resources_pb2.TaskInputSource(\n                    type='DATASET',\n                    id=DATASET_ID\n                ),\n                sample_ms=1000,\n                review=resources_pb2.TaskReview(\n                    strategy='NONE'\n                )\n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif post_tasks_response.status.code != status_code_pb2.SUCCESS:\n    print(post_tasks_response.status)\n    raise Exception(\"Post tasks failed, status: \" + post_tasks_response.status.description)\n",A='\x3c!-- index.html file --\x3e\n\n<script>\n  ///////////////////////////////////////////////////////////////////////////////\n  // In this section, we set the user authentication, app ID, and details for\n  // assigning a task. Change these strings to run your own example.\n  //////////////////////////////////////////////////////////////////////////////\n\n  const USER_ID = "YOUR_USER_ID_HERE";\n  // Your PAT (Personal Access Token) can be found in the Account\'s Security section\n  const PAT = "YOUR_PAT_HERE";\n  const APP_ID = "YOUR_APP_ID_HERE";\n  // Change these to assign your own task\n  const CONCEPT_ID = "water";\n  const WORKER_USER_ID = "WORKER_USER_ID_HERE";\n  const REVIEWER_USER_ID = "REVIEWER_USER_ID_HERE";\n  const DATASET_ID = "DATASET_ID_HERE";\n\n  ///////////////////////////////////////////////////////////////////////////////////\n  // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n  ///////////////////////////////////////////////////////////////////////////////////\n\n  const raw = JSON.stringify({\n    user_app_id: {\n      user_id: USER_ID,\n      app_id: APP_ID,\n    },\n    tasks: [\n      {\n        type: "CONCEPTS_CLASSIFICATION",\n        name: "Annotate " + CONCEPT_ID,\n        worker: {\n          strategy: "DYNAMIC",\n          workers: [\n            {\n              user: {\n                id: WORKER_USER_ID,\n              },\n            },\n          ],\n        },\n        concepts: [\n          {\n            concept: {\n              id: CONCEPT_ID,\n            },\n          },\n        ],\n        input_source: {\n          type: "DATASET",\n          id: DATASET_ID\n        },\n        sample_ms: 1000,\n        review: {\n          strategy: "MANUAL",\n          manual_strategy_info: {\n            sample_percentage: 0.5,\n          },\n          users: [{ id: REVIEWER_USER_ID }],\n        },\n      },\n    ],\n  });\n\n  const requestOptions = {\n    method: "POST",\n    headers: {\n      Accept: "application/json",\n      Authorization: "Key " + PAT,\n    },\n    body: raw,\n  };\n\n  fetch("https://api.clarifai.com/v2/tasks", requestOptions)\n    .then((response) => response.text())\n    .then((result) => console.log(result))\n    .catch((error) => console.log("error", error));\n<\/script>\n',R='\x3c!--index.html file--\x3e\n\n<script>\n  ///////////////////////////////////////////////////////////////////////////////\n  // In this section, we set the user authentication, app ID, and details for\n  // creating a task. Change these strings to run your own example.\n  //////////////////////////////////////////////////////////////////////////////\n\n  const USER_ID = "YOUR_USER_ID_HERE";\n  // Your PAT (Personal Access Token) can be found in the Account\'s Security section\n  const PAT = "YOUR_PAT_HERE";\n  const APP_ID = "YOUR_APP_ID_HERE";\n  // Change these to create your own task with consensus review\n  const CONCEPT_ID = "water";\n  const USER_ID_1 = "USER_ID_1_HERE";\n  const USER_ID_2 = "USER_ID_2_HERE";\n  const USER_ID_3 = "USER_ID_3_HERE";\n  const USER_ID_4 = "USER_ID_4_HERE";\n\n  ///////////////////////////////////////////////////////////////////////////////////\n  // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n  ///////////////////////////////////////////////////////////////////////////////////\n\n  const raw = JSON.stringify({\n    user_app_id: {\n      user_id: USER_ID,\n      app_id: APP_ID,\n    },\n    tasks: [\n      {\n        type: "CONCEPTS_CLASSIFICATION",\n        name: "Annotate " + CONCEPT_ID,\n        worker: {\n          strategy: "PARTITIONED",\n          workers: [\n            { \n              user: {\n                id: USER_ID_1\n              },\n            }, \n            { \n              user: {\n                id: USER_ID_2 \n              },\n            }, \n            { \n              user: {\n                id: USER_ID_3\n              },\n            }\n          ],\n          partitioned_strategy_info: {\n            type: "WEIGHTED",\n            workers_per_input: 3,\n            weights: {\n              [USER_ID_1]: 1,\n              [USER_ID_2]: 1,\n              [USER_ID_3]: 1,\n            },\n          },\n        },\n        concepts: [\n          {\n            concept: {\n              id: CONCEPT_ID,\n            },\n          },\n        ],\n        input_source: {\n          type: "ALL_INPUTS",\n        },\n        sample_ms: 1000,\n        review: {\n          strategy: "CONSENSUS",\n          consensus_strategy_info: {\n            approval_threshold: 2,\n          },\n          users: [{ id: USER_ID_4 }],\n        },\n      },\n    ],\n  });\n\n  const requestOptions = {\n    method: "POST",\n    headers: {\n      Accept: "application/json",\n      Authorization: "Key " + PAT,\n    },\n    body: raw,\n  };\n\n  fetch("https://api.clarifai.com/v2/tasks", requestOptions)\n    .then((response) => response.text())\n    .then((result) => console.log(result))\n    .catch((error) => console.log("error", error));\n<\/script>\n',S="\x3c!--index.html file--\x3e\n\n<script>\n    ///////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and task ID.\n    // Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = 'YOUR_USER_ID_HERE';\n    // Your PAT (Personal Access Token) can be found in the Account's Security section\n    const PAT = 'YOUR_PAT_HERE';\n    const APP_ID = 'YOUR_APP_ID_HERE';\n    // Change this to get a task by its ID\n    const TASK_ID = '77f156b3616f40c887c765f4ccb45c87';\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const requestOptions = {\n        method: 'GET',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        }\n    };\n\n    fetch(`https://api.clarifai.com/v2/users/${USER_ID}/apps/${APP_ID}/tasks/${TASK_ID}`, requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n\n<\/script>",D="\x3c!--index.html file--\x3e\n\n<script>\n    ///////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication and app ID.\n    // Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////\n\n    const USER_ID = 'YOUR_USER_ID_HERE';  \n    // Your PAT (Personal Access Token) can be found in the Account's Security section\n    const PAT = 'YOUR_PAT_HERE';\n    const APP_ID = 'YOUR_APP_ID_HERE';\n  \n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n  \n    const requestOptions = {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + PAT\n      }\n    };\n  \n    fetch(`https://api.clarifai.com/v2/users/${USER_ID}/apps/${APP_ID}/tasks`, requestOptions)\n      .then(response => response.text())\n      .then(result => console.log(result))\n      .catch(error => console.log('error', error));\n  \n  <\/script>",g="\x3c!--index.html file--\x3e\n\n<script>\n    ///////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and\n    // worker user ID. Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////\n\n    const USER_ID = 'YOUR_USER_ID_HERE';\n    // Your PAT (Personal Access Token) can be found in the Account's Security section\n    const PAT = 'YOUR_PAT_HERE';\n    const APP_ID = 'YOUR_APP_ID_HERE';\n    const WORKER_USER_ID = 'WORKER_USER_ID_HERE';\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const requestOptions = {\n        method: 'GET',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        }\n    };\n\n    fetch(`https://api.clarifai.com/v2/users/${USER_ID}/apps/${APP_ID}/tasks?worker_user_ids=${WORKER_USER_ID}`, requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n\n<\/script>",f="\x3c!--index.html file--\x3e\n\n<script>\n    ///////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and\n    // review user ID. Change these strings to run your own example\n    ///////////////////////////////////////////////////////////////////\n\n    const USER_ID = 'YOUR_USER_ID_HERE';  \n    // Your PAT (Personal Access Token) can be found in the Account's Security section\n    const PAT = 'YOUR_PAT_HERE';\n    const APP_ID = 'YOUR_APP_ID_HERE';\n    const REVIEW_USER_ID = 'REVIEW_USER_ID_HERE';\n  \n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n  \n    const requestOptions = {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + PAT\n      }\n    };\n  \n    fetch(`https://api.clarifai.com/v2/users/${USER_ID}/apps/${APP_ID}/tasks?review_user_ids=${REVIEW_USER_ID}`, requestOptions)\n      .then(response => response.text())\n      .then(result => console.log(result))\n      .catch(error => console.log('error', error));\n  \n  <\/script>",C='\x3c!--index.html file--\x3e\n\n<script>\n    ///////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and details for\n    // updating a task. Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////////////\n  \n    const USER_ID = "YOUR_USER_ID_HERE";\n    // Your PAT (Personal Access Token) can be found in the Account\'s Security section\n    const PAT = "YOUR_PAT_HERE";\n    const APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to update your own task\n    const TASK_ID = "c454edb9446c4de58d4fe3a66c286e55";\n    const CONCEPT_ID = "water";\n    const USER_ID_1 = "USER_ID_1_HERE";\n    const USER_ID_2 = "USER_ID_2_HERE";\n    const USER_ID_3 = "USER_ID_3_HERE";\n    const USER_ID_4 = "USER_ID_4_HERE";\n  \n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n  \n    const raw = JSON.stringify({\n      user_app_id: {\n        user_id: USER_ID,\n        app_id: APP_ID,\n      },\n      action: "overwrite",\n      tasks: [\n        {\n          id: TASK_ID,\n          type: "CONCEPTS_CLASSIFICATION",\n          name: "Annotate " + CONCEPT_ID,\n          worker: {\n            strategy: "PARTITIONED",\n            users: [{ id: USER_ID_1 }, { id: USER_ID_2 }, { id: USER_ID_3 }],\n            partitioned_strategy_info: {\n              type: "WEIGHTED",\n              workers_per_input: 3,\n              weights: {\n                [USER_ID_1]: 1,\n                [USER_ID_2]: 1,\n                [USER_ID_3]: 1,\n              },\n            },\n          },\n          concept_ids: [CONCEPT_ID],\n          input_source: {\n            type: "ALL_INPUTS",\n          },\n          sample_ms: 1000,\n          review: {\n            strategy: "CONSENSUS",\n            consensus_strategy_info: {\n              approval_threshold: 2,\n            },\n            users: [{ id: USER_ID_4 }],\n          },\n          status: {\n            code: "TASK_DONE",\n          },\n        },\n      ],\n    });\n  \n    const requestOptions = {\n      method: "PATCH",\n      headers: {\n        Accept: "application/json",\n        Authorization: "Key " + PAT,\n      },\n      body: raw,\n    };\n  \n    fetch("https://api.clarifai.com/v2/tasks", requestOptions)\n      .then((response) => response.text())\n      .then((result) => console.log(result))\n      .catch((error) => console.log("error", error));\n  <\/script>\n  ',P="\x3c!--index.html file--\x3e\n\n<script>\n    ///////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and task IDs. \n    // Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = 'YOUR_USER_ID_HERE';\n    // Your PAT (Personal Access Token) can be found in the Account's Security section\n    const PAT = 'YOUR_PAT_HERE';\n    const APP_ID = 'YOUR_APP_ID_HERE';\n    // Change these to delete your own tasks\n    const TASK_ID_1 = '66262884195c427595d4bca033b2114e';\n    const TASK_ID_2 = '1106ba0327ed44c2b556659a58e77a48';\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        \"user_app_id\": {\n            \"user_id\": USER_ID,\n            \"app_id\": APP_ID\n        },\n        \"ids\": [TASK_ID_1, TASK_ID_2]\n    });\n\n    const requestOptions = {\n        method: 'DELETE',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        },\n        body: raw\n    };\n\n    fetch(\"https://api.clarifai.com/v2/tasks\", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n\n\n<\/script>",U='<script>\n    /////////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and auto-annotation details.\n    // Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = "YOUR_USER_ID_HERE";\n    // Your PAT (Personal Access Token) can be found in the Account\'s Security section\n    const PAT = "YOUR_PAT_HERE";\n    const APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to create your own auto-annotation task \n    const MODEL_ID = "MODEL_ID_HERE";\n    const MODEL_VERSION_ID = "MODEL_VERSION_ID_HERE";\n    const CONCEPT_ID = "CONCEPT_ID_HERE";\n    const DATASET_ID = "DATASET_ID_HERE";\n\n    /////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    /////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        "user_app_id": {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        "tasks": [\n            {\n                "type": "TYPE_NOT_SET",\n                "name": "Auto-Annotate " + CONCEPT_ID,\n                "worker": {\n                    "strategy": "FULL",\n                    "workers": [\n                        {\n                            "model": {\n                                "id": MODEL_ID,\n                                "model_version": {\n                                    "id": MODEL_VERSION_ID\n                                }\n                            }\n                        }\n                    ]\n                },\n                "concepts": [\n                    {\n                        "concept": {\n                            "id": CONCEPT_ID\n                        },\n                        "auto_annotation_config": {\n                            "annotation_data_types": 1,\n                            "threshold_range": {\n                                "is_lower_inclusive": true,\n                                "is_upper_inclusive": true,\n                                "lower": 0.7,\n                                "upper": 0.999\n                            },\n                            "status_code": 24150\n                        }\n                    }\n                ],\n                "input_source": {\n                    "type": "DATASET",\n                    "id": DATASET_ID\n                },\n                "sample_ms": 1000,\n                "review": {\n                    "strategy": "NONE"\n                }\n            }\n        ]\n    });\n\n    const requestOptions = {\n        method: "POST",\n        headers: {\n            "Accept": "application/json",\n            "Authorization": "Key " + PAT\n        },\n        body: raw\n    };\n\n    fetch("https://api.clarifai.com/v2/tasks", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log("error", error));\n<\/script>\n',w='//index.js file\n\n///////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and details for\n// assigning a task. Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\nconst PAT = "YOUR_PAT_HERE";\nconst APP_ID = "YOUR_APP_ID_HERE";\n// Change these to assign your own task \nconst CONCEPT_ID = "water";\nconst WORKER_USER_ID = "WORKER_USER_ID_HERE";\nconst REVIEWER_USER_ID = "REVIEWER_USER_ID_HERE"; // User who will review this task\nconst DATASET_ID = "DATASET_ID_HERE";\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PostTasks({\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        tasks: [{\n            type: "CONCEPTS_CLASSIFICATION",\n            name: "Annotate " + CONCEPT_ID,\n            worker: {\n                strategy: "DYNAMIC",\n                workers: [{\n                    user: {\n                        id: WORKER_USER_ID\n                    }\n                }]\n            },\n            concepts: [{\n                concept: {\n                    id: CONCEPT_ID\n                }\n            }],\n            input_source: {\n                type: "DATASET",\n                id: DATASET_ID\n\n            },\n            sample_ms: 1000,\n            review: {\n                strategy: "MANUAL",\n                manual_strategy_info: {\n                    sample_percentage: 0.5\n                },\n                users: [{\n                    id: REVIEWER_USER_ID\n                }]\n            }\n        }]\n\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            console.error(\'Post tasks failed, status:\', response.status);\n            throw new Error("Post tasks failed, status: " + response.status.description);\n        }\n    }\n);\n',O='//index.js file\n\n///////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and details for\n// creating a task. Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = "YOUR_PAT_HERE";\nconst APP_ID = "YOUR_APP_ID_HERE";\n// Change these to create your own task with consensus review\nconst CONCEPT_ID = "water";\nconst USER_ID_1 = "USER_ID_1_HERE";\nconst USER_ID_2 = "USER_ID_2_HERE";\nconst USER_ID_3 = "USER_ID_3_HERE";\nconst USER_ID_4 = "USER_ID_4_HERE";\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PostTasks(\n  {\n    user_app_id: {\n      user_id: USER_ID,\n      app_id: APP_ID,\n    },\n\n    tasks: [\n      {\n        type: "CONCEPTS_CLASSIFICATION",\n        name: "Annotate " + CONCEPT_ID,\n        worker: {\n          strategy: "PARTITIONED",\n          workers: [\n            {\n              user: {\n                id: USER_ID_1\n              },\n            },\n            {\n              user: {\n                id: USER_ID_2\n              },\n            },\n            {\n              user: {\n                id: USER_ID_3\n              },\n            },\n          ],\n          partitioned_strategy_info: {\n            type: "WEIGHTED",\n            workers_per_input: 3,\n            weights: {\n              [USER_ID_1]: 1,\n              [USER_ID_2]: 1,\n              [USER_ID_3]: 1,\n            },\n          },\n        },\n        concepts: [\n          {\n            concept: {\n              id: CONCEPT_ID,\n            },\n          },\n        ],\n        input_source: {\n          type: "ALL_INPUTS",\n        },\n        sample_ms: 1000,\n        review: {\n          strategy: "CONSENSUS",\n          consensus_strategy_info: {\n            approval_threshold: 2,\n          },\n          users: [{ id: USER_ID_4 }],\n        },\n      },\n    ],\n  },\n  metadata,\n  (err, response) => {\n    if (err) {\n      throw new Error(err);\n    }\n\n    if (response.status.code !== 10000) {\n      console.error("Post tasks failed, status:", response.status);\n      throw new Error(\n        "Post tasks failed, status: " + response.status.description\n      );\n    }\n  }\n);\n',m='//index.js file\n\n///////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and task IDs.\n// Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = "YOUR_PAT_HERE";\nconst APP_ID = "YOUR_APP_ID_HERE";\n// Change these to delete your own tasks\nconst TASK_ID_1 = "ccb05c3b73344a87bfa2ad18f04d793e";\nconst TASK_ID_2 = "584d8ef6fe184b0a91197c0590d50953";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.DeleteTasks(\n  {\n    user_app_id: {\n      user_id: USER_ID,\n      app_id: APP_ID,\n    },\n    ids: [TASK_ID_1, TASK_ID_2],\n  },\n  metadata,\n  (err, response) => {\n    if (err) {\n      throw new Error(err);\n    }\n\n    if (response.status.code !== 10000) {\n      throw new Error(\n        "Delete tasks failed, status: " + response.status.description\n      );\n    }\n  }\n);\n',k='//index.js file\n\n///////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and task ID.\n// Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = "YOUR_PAT_HERE";\nconst APP_ID = "YOUR_APP_ID_HERE";\n// Change this to get a task by its ID\nconst TASK_ID = "21980d42ddc4483fa9e59e6678d6af71";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.GetTask(\n  {\n    user_app_id: {\n      user_id: USER_ID,\n      app_id: APP_ID,\n    },\n    task_id: TASK_ID,\n  },\n  metadata,\n  (err, response) => {\n    if (err) {\n      throw new Error(err);\n    }\n\n    if (response.status.code !== 10000) {\n      throw new Error(\n        "Get tasks failed, status: " + response.status.description\n      );\n    }\n    console.log(response);\n  }\n);\n',b='//index.js file\n\n////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication and app ID.\n// Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = "YOUR_PAT_HERE";\nconst APP_ID = "YOUR_APP_ID_HERE";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.ListTasks(\n  {\n    user_app_id: {\n      user_id: USER_ID,\n      app_id: APP_ID,\n    }\n  },\n  metadata,\n  (err, response) => {\n    if (err) {\n      throw new Error(err);\n    }\n\n    if (response.status.code !== 10000) {\n      throw new Error(\n        "List tasks failed, status: " + response.status.description\n      );\n    }\n    console.log(response);\n  }\n);\n',N='//index.js file\n\n////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and \n// worker user ID. Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = "YOUR_PAT_HERE";\nconst APP_ID = "YOUR_APP_ID_HERE";\nconst WORKER_USER_ID = "WORKER_USER_ID_HERE";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.ListTasks(\n  {\n    user_app_id: {\n      user_id: USER_ID,\n      app_id: APP_ID,\n    },\n    worker_user_ids:[WORKER_USER_ID] \n  },\n  metadata,\n  (err, response) => {\n    if (err) {\n      throw new Error(err);\n    }\n\n    if (response.status.code !== 10000) {\n      throw new Error(\n        "List tasks failed, status: " + response.status.description\n      );\n    }\n    console.log(response);\n  }\n);\n',y='//index.js file\n\n////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and \n// review user ID. Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = "YOUR_PAT_HERE";\nconst APP_ID = "YOUR_APP_ID_HERE";\nconst REVIEW_USER_ID = "REVIEW_USER_ID_HERE";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.ListTasks(\n  {\n    user_app_id: {\n      user_id: USER_ID,\n      app_id: APP_ID,\n    },\n    review_user_ids: [REVIEW_USER_ID] \n  },\n  metadata,\n  (err, response) => {\n    if (err) {\n      throw new Error(err);\n    }\n\n    if (response.status.code !== 10000) {\n      throw new Error(\n        "List tasks failed, status: " + response.status.description\n      );\n    }\n    console.log(response);\n  }\n);\n',H='//index.js file\n\n/////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and auto-annotation details.\n// Change these strings to run your own example.\n///////////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = "YOUR_PAT_HERE";\nconst APP_ID = "YOUR_APP_ID_HERE";\n// Change these to create your own auto-annotation task\nconst MODEL_ID = "MODEL_ID_HERE";\nconst MODEL_VERSION_ID = "MODEL_VERSION_ID_HERE";\nconst CONCEPT_ID = "CONCEPT_ID_HERE";\nconst DATASET_ID = "DATASET_ID_HERE";\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PostTasks(\n  {\n    user_app_id: {\n      user_id: USER_ID,\n      app_id: APP_ID\n    },\n    tasks: [\n      {\n        type: "TYPE_NOT_SET",\n        name: "Auto-Annotate " + CONCEPT_ID,\n        worker: {\n          strategy: "FULL",\n          workers: [\n            {\n              model: {\n                id: MODEL_ID,\n                model_version: {\n                  id: MODEL_VERSION_ID\n                },\n              },\n            },\n          ],\n        },\n        concepts: [\n          {\n            concept: {\n              id: CONCEPT_ID\n            },\n            auto_annotation_config: {\n              annotation_data_types: 1,\n              threshold_range: {\n                is_lower_inclusive: true,\n                is_upper_inclusive: true,\n                lower: 0.7,\n                upper: 0.999\n              },\n              status_code: 24150\n            },\n          },\n        ],\n        input_source: {\n          type: "DATASET",\n          id: DATASET_ID\n        },\n        sample_ms: 1000,\n        review: {\n          strategy: "NONE"\n        },\n      },\n    ],\n  },\n  metadata,\n  (err, response) => {\n    if (err) {\n      throw new Error(err);\n    }\n\n    if (response.status.code !== 10000) {\n      console.error("Post tasks failed, status:", response.status);\n      throw new Error("Post tasks failed, status: " + response.status.description);\n    }\n  }\n);\n',v='package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.StatusCode;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\n\npublic class ClarifaiExample {\n\n    ///////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and details for\n    // assigning a task. Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    // Your PAT (Personal Access Token) can be found in the Account\'s Security section\t\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to assign your own task\n    static final String CONCEPT_ID = "water";\n    static final String WORKER_USER_ID = "WORKER_USER_ID_HERE";\n    static final String REVIEWER_USER_ID = "REVIEWER_USER_ID_HERE"; // User who will review this task\n    static final String DATASET_ID = "DATASET_ID_HERE"; \n\n    //////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    //////////////////////////////////////////////////////////////////////////////////\t\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiTaskResponse postTasksResponse = stub.postTasks(\n            PostTasksRequest.newBuilder()\n                .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID).build())\n                .addTasks(Task.newBuilder()\n                    .setType(Task.TaskType.CONCEPTS_CLASSIFICATION)\n                    .setName("Annotate " + CONCEPT_ID)\n                    .setWorker(TaskWorker.newBuilder()\n                        .setStrategy(TaskWorker.TaskWorkerStrategy.DYNAMIC)\n                        .addWorkers(Worker.newBuilder()\n                            .setUser(User.newBuilder()\n                                .setId(WORKER_USER_ID)\n                                .build()\n                            )\n                        )\n                        .build()\n                    )\n                    .addConcepts(TaskConcept.newBuilder()\n                        .setConcept(Concept.newBuilder()\n                            .setId(CONCEPT_ID)\n                            .build()\n                        )\n                        .build()\n                    )\n                    .setInputSource(TaskInputSource.newBuilder()\n                        .setType(TaskInputSource.TaskInputSourceType.DATASET)\n                        .setId(DATASET_ID)\n                        .build()\n                    )\n                    .setSampleMs(1000)\n                    .setReview(TaskReview.newBuilder()\n                        .setStrategy(TaskReview.TaskReviewStrategy.MANUAL)\n                        .setManualStrategyInfo(TaskReviewManualStrategyInfo.newBuilder()\n                            .setSamplePercentage((float) 0.5)\n                            .build()\n                        )\n                        .addUsers(User.newBuilder()\n                            .setId(REVIEWER_USER_ID)\n                            .build()\n                        )\n                        .build()\n                    )\n                    .build()\n                )\n                .build()\n        );\n\n        if (postTasksResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post model outputs failed, status: " + postTasksResponse.getStatus());\n        }\n    }\n}\n',j='package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.StatusCode;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.google.protobuf.Struct;\nimport com.google.protobuf.Value;\n\npublic class ClarifaiExample {\n\n    ///////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and details for\n    // creating a task. Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to create your own task with consensus review\n    static final String CONCEPT_ID = "water";\n    static final String USER_ID_1 = "USER_ID_1_HERE";\n    static final String USER_ID_2 = "USER_ID_2_HERE";\n    static final String USER_ID_3 = "USER_ID_3_HERE";\n    static final String USER_ID_4 = "USER_ID_4_HERE";\n\n    ///////////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        Struct.Builder params = Struct.newBuilder()\n            .putFields(USER_ID_1, Value.newBuilder().setNumberValue(1).build())\n            .putFields(USER_ID_2, Value.newBuilder().setNumberValue(1).build())\n            .putFields(USER_ID_3, Value.newBuilder().setNumberValue(1).build());\n\n        MultiTaskResponse postTasksResponse = stub.postTasks(\n            PostTasksRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID).build())\n            .addTasks(Task.newBuilder()\n                .setType(Task.TaskType.CONCEPTS_CLASSIFICATION)\n                .setName("Annotate " + CONCEPT_ID)\n                .setWorker(TaskWorker.newBuilder()\n                    .setStrategy(TaskWorker.TaskWorkerStrategy.PARTITIONED)\n                    .addWorkers(Worker.newBuilder()\n                        .setUser(User.newBuilder()\n                            .setId(USER_ID_1)\n                            .build()\n                        )\n                        .setUser(User.newBuilder()\n                            .setId(USER_ID_2)\n                            .build()\n                        )\n                        .setUser(User.newBuilder()\n                            .setId(USER_ID_3)\n                            .build()\n                        )\n                    )\n\n                    .setPartitionedStrategyInfo(TaskWorkerPartitionedStrategyInfo.newBuilder()\n                        .setType(TaskWorkerPartitionedStrategyInfo.TaskWorkerPartitionedStrategy.WEIGHTED)\n                        .setWorkersPerInput(3)\n                        .setWeights(params)\n                        .build()\n                    )\n                    .build()\n                )\n                .addConcepts(TaskConcept.newBuilder()\n                    .setConcept(Concept.newBuilder()\n                        .setId(CONCEPT_ID)\n                        .build()\n                    )\n                    .build()\n                )\n                .setInputSource(TaskInputSource.newBuilder()\n                    .setType(TaskInputSource.TaskInputSourceType.ALL_INPUTS)\n                    .build()\n                )\n                .setSampleMs(1000)\n                .setReview(TaskReview.newBuilder()\n                    .setStrategy(TaskReview.TaskReviewStrategy.CONSENSUS)\n                    .setConsensusStrategyInfo(TaskReviewConsensusStrategyInfo.newBuilder().setApprovalThreshold(2))\n                    .addUsers(User.newBuilder().setId(USER_ID_4))\n                    .build()\n                )\n                .build()\n            )\n            .build()\n        );\n\n        if (postTasksResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post tasks outputs failed, status: " + postTasksResponse.getStatus());\n        }\n    }\n}\n',x='package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.Status;\nimport com.clarifai.grpc.api.status.StatusCode;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.google.protobuf.Struct;\nimport com.google.protobuf.Value;\n\npublic class ClarifaiExample {\n\n    ///////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and details for\n    // updating a task. Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to update your own task\n    static final String CONCEPT_ID = "water";\n    static final String TASK_ID = "8331bac5db8e445591ce69e351ea67fe";\n    static final String USER_ID_1 = "USER_ID_1_HERE";\n    static final String USER_ID_2 = "USER_ID_2_HERE";\n    static final String USER_ID_3 = "USER_ID_3_HERE";\n    static final String USER_ID_4 = "USER_ID_4_HERE";\n\n    ///////////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        Struct.Builder params = Struct.newBuilder()\n            .putFields(USER_ID_1, Value.newBuilder().setNumberValue(1).build())\n            .putFields(USER_ID_2, Value.newBuilder().setNumberValue(1).build())\n            .putFields(USER_ID_3, Value.newBuilder().setNumberValue(1).build());\n\n        MultiTaskResponse patchTasksResponse = stub.patchTasks(\n            PatchTasksRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID).build())\n            .setAction("overwrite")\n            .addTasks(Task.newBuilder()\n                .setId(TASK_ID)\n                .setType(Task.TaskType.CONCEPTS_CLASSIFICATION)\n                .setName("Annotate " + CONCEPT_ID)\n                .setWorker(TaskWorker.newBuilder()\n                    .setStrategy(TaskWorker.TaskWorkerStrategy.PARTITIONED)\n                    .addUsers(User.newBuilder().setId(USER_ID_1))\n                    .addUsers(User.newBuilder().setId(USER_ID_2))\n                    .addUsers(User.newBuilder().setId(USER_ID_3))\n                    .setPartitionedStrategyInfo(TaskWorkerPartitionedStrategyInfo.newBuilder()\n                        .setType(TaskWorkerPartitionedStrategyInfo.TaskWorkerPartitionedStrategy.WEIGHTED)\n                        .setWorkersPerInput(3)\n                        .setWeights(params)\n                        .build()\n                    )\n                    .build()\n                )\n                .addConcepts(TaskConcept.newBuilder()\n                    .setConcept(Concept.newBuilder()\n                        .setId(CONCEPT_ID)\n                        .build()\n                    )\n                    .build()\n                )\n                .setInputSource(TaskInputSource.newBuilder()\n                    .setType(TaskInputSource.TaskInputSourceType.ALL_INPUTS)\n                    .build()\n                )\n                .setSampleMs(1000)\n                .setReview(TaskReview.newBuilder()\n                    .setStrategy(TaskReview.TaskReviewStrategy.CONSENSUS)\n                    .setConsensusStrategyInfo(TaskReviewConsensusStrategyInfo.newBuilder().setApprovalThreshold(2))\n                    .addUsers(User.newBuilder().setId(USER_ID_4))\n                    .build()\n                )\n                .setStatus(Status.newBuilder().setCode(StatusCode.TASK_DONE))\n                .build()\n            )\n            .build()\n        );\n\n        if (patchTasksResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Patch tasks request failed, status: " + patchTasksResponse.getStatus());\n        }\n    }\n}\n',Y='package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.BaseResponse;\nimport com.clarifai.grpc.api.status.StatusCode;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\n\npublic class ClarifaiExample {\n    \n    ////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and task IDs. \n    // Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    // Your PAT (Personal Access Token) can be found in the Account\'s Security section\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to delete your own tasks\n    static final String TASK_ID_1 = "d9dc9104afd84332a6dd95dd71a38d19";\n    static final String TASK_ID_2 = "e2aff7156fac416e86fee02a1c1cb2f3";\n    \n    //////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    //////////////////////////////////////////////////////////////////////////////////\t\n\n    public static void main(String[] args) {        \n        \n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));        \n\n        BaseResponse deleteTasksResponse = stub.deleteTasks(\n            DeleteTasksRequest.newBuilder()\n                .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n                .addIds(TASK_ID_1)\n                .addIds(TASK_ID_2)\n                .build()\n        );\n       \n        if (deleteTasksResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Delete tasks failed, status: " + deleteTasksResponse.getStatus());\n        }\n    }\n}\n',L='package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.StatusCode;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\n\npublic class ClarifaiExample {\n\n    /////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and task ID.\n    // Change these strings to run your own example.\n    /////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    // Your PAT (Personal Access Token) can be found in the Account\'s Security section\t\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change this to get a task by its ID\n    static final String TASK_ID = "6e71ff53fd7d4e32a1a7026737c25cb4";\n\n    //////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    //////////////////////////////////////////////////////////////////////////////////\t\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        SingleTaskResponse getTaskResponse = stub.getTask(\n            GetTaskRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .setTaskId(TASK_ID)\n            .build()\n        );\n\n        if (getTaskResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Get tasks failed, status: " + getTaskResponse.getStatus());\n        }\n\n        System.out.println(getTaskResponse);\n    }\n}',$='package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.StatusCode;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\n\npublic class ClarifaiExample {\n\n    /////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication and app ID.\n    // Change these strings to run your own example.\n    /////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    // Your PAT (Personal Access Token) can be found in the Account\'s Security section\t\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change this to get a task by its ID\n    static final String TASK_ID = "6e71ff53fd7d4e32a1a7026737c25cb4";\n\n    //////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    //////////////////////////////////////////////////////////////////////////////////\t\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiTaskResponse listTasksResponse = stub.listTasks(\n            ListTasksRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .build()\n        );\n\n        if (listTasksResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("List tasks failed, status: " + listTasksResponse.getStatus());\n        }\n\n        System.out.println(listTasksResponse);\n    }\n}\n',W='package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.StatusCode;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\n\npublic class ClarifaiExample {\n\n    ///////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and\n    // worker user ID. Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    // Your PAT (Personal Access Token) can be found in the Account\'s Security section\t\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    static final String WORKER_USER_ID = "WORKER_USER_ID_HERE";\n\n    //////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    //////////////////////////////////////////////////////////////////////////////////\t\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiTaskResponse listTasksResponse = stub.listTasks(\n            ListTasksRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .addWorkerUserIds(WORKER_USER_ID)\n            .build()\n        );\n\n        if (listTasksResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("List tasks failed, status: " + listTasksResponse.getStatus());\n        }\n\n        System.out.println(listTasksResponse);\n    }\n}\n',G='package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.StatusCode;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\n\npublic class ClarifaiExample {\n\n    ///////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and \n    // review user ID. Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    // Your PAT (Personal Access Token) can be found in the Account\'s Security section\t\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    static final String REVIEW_USER_ID = "REVIEW_USER_ID_HERE";\n\n    //////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    //////////////////////////////////////////////////////////////////////////////////\t\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiTaskResponse listTasksResponse = stub.listTasks(\n            ListTasksRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .addReviewUserIds(REVIEW_USER_ID)\n            .build()\n        );\n\n        if (listTasksResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("List tasks failed, status: " + listTasksResponse.getStatus());\n        }\n\n        System.out.println(listTasksResponse);\n    }\n}',B='package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.StatusCode;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\n\npublic class ClarifaiExample {\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////\n  // In this section, we set the user authentication, app ID, and auto-annotation details.\n  // Change these strings to run your own example.\n  //////////////////////////////////////////////////////////////////////////////////////////////////\n\n  static final String USER_ID = "YOUR_USER_ID_HERE";\n  // Your PAT (Personal Access Token) can be found in the Account\'s Security section\n  static final String PAT = "YOUR_PAT_HERE";\n  static final String APP_ID = "YOUR_APP_ID_HERE";\n  // Change these to create your own auto-annotation task\n  static final String MODEL_ID = "MODEL_ID_HERE";\n  static final String MODEL_VERSION_ID = "MODEL_VERSION_ID_HERE";\n  static final String CONCEPT_ID = "CONCEPT_ID_HERE";\n  static final String DATASET_ID = "DATASET_ID_HERE";\n\n  //////////////////////////////////////////////////////////////////////////////////\n  // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n  //////////////////////////////////////////////////////////////////////////////////\t\n\n  public static void main(String[] args) {\n\n    V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n      .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n    MultiTaskResponse postTasksResponse = stub.postTasks(\n      PostTasksRequest.newBuilder()\n        .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n        .addTasks(Task.newBuilder()\n          .setType(Task.TaskType.TYPE_NOT_SET)\n          .setName("Auto-Annotate " + CONCEPT_ID)\n          .setWorker(TaskWorker.newBuilder()\n            .setStrategy(TaskWorker.TaskWorkerStrategy.FULL)\n            .addWorkers(Worker.newBuilder()\n              .setModel(Model.newBuilder()\n                .setId(MODEL_ID)\n                .setModelVersion(ModelVersion.newBuilder()\n                  .setId(MODEL_VERSION_ID)\n                  .build()\n                )\n              )\n              .build()\n            )\n            .build()\n          )\n          .addConcepts(TaskConcept.newBuilder()\n            .setConcept(Concept.newBuilder()\n              .setId(CONCEPT_ID)\n              .build())\n            .setAutoAnnotationConfig(TaskConceptAutoAnnotationConfig.newBuilder()\n              .setAnnotationDataTypes(1)\n              .setThresholdRange(ThresholdRange.newBuilder()\n                .setIsLowerInclusive(true)\n                .setIsUpperInclusive(true)\n                .setLower((float) 0.7)\n                .setUpper((float) 0.999)\n                .build())\n              .setStatusCodeValue(24150)\n              .build()\n            )\n            .build())\n          .setInputSource(TaskInputSource.newBuilder()\n            .setType(TaskInputSource.TaskInputSourceType.DATASET)\n            .setId(DATASET_ID)\n            .build())\n          .setSampleMs(1000)\n          .setReview(TaskReview.newBuilder()\n            .setStrategy(TaskReview.TaskReviewStrategy.NONE)\n            .build())\n          .build())\n        .build()\n    );\n\n    if (postTasksResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n      throw new RuntimeException("Post tasks failed, status: " + postTasksResponse.getStatus());\n    }\n  }\n}\n',q='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n/////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and details for\n// creating a task. Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change these to create your own task with consensus review\n$CONCEPT_ID = "water";\n$USER_ID_1 = "USER_ID_1_HERE";\n$USER_ID_2 = "USER_ID_2_HERE";\n$USER_ID_3 = "USER_ID_3_HERE";\n$USER_ID_4 = "USER_ID_4_HERE";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\PostTasksRequest;\nuse Clarifai\\Api\\TASK;\nuse Clarifai\\Api\\User;\nuse Clarifai\\Api\\TaskWorker;\nuse Clarifai\\Api\\Worker;\nuse Clarifai\\Api\\TaskConcept;\nuse Clarifai\\Api\\Concept;\nuse Clarifai\\Api\\TaskInputSource;\nuse Clarifai\\Api\\TaskWorkerPartitionedStrategyInfo;\nuse Clarifai\\Api\\TaskReviewConsensusStrategyInfo;\nuse Clarifai\\Api\\TaskReview;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\nuse Google\\Protobuf\\Struct;\nuse Google\\Protobuf\\Value;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID,\n]);\n\n// create Struct instance\n$params = new Struct();\n$params->getFields()[$USER_ID_1] = (new Value())->setNumberValue(1);\n$params->getFields()[$USER_ID_2] = (new Value())->setNumberValue(1);\n$params->getFields()[$USER_ID_3] = (new Value())->setNumberValue(1);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PostTasks(\n        // The request object carries the request along with the request status and other metadata related to the request itself\n        new PostTasksRequest([\n            "user_app_id" => $userDataObject,\n            "tasks" => [\n                new Task([\n                    "type" => 1, // integer value 1 for "CONCEPTS_CLASSIFICATION" type. Refer here https://github.com/Clarifai/clarifai-go-grpc/blob/master/proto/clarifai/api/resources.pb.go\n                    "name" => "Annotate " . $CONCEPT_ID,\n                    "worker" => new TaskWorker([\n                        "strategy" => 2, // integer value 2 for "PARTITIONED" strategy\n                        "workers" => [\n                            new Worker([\n                                "user" => new User([\n                                    "id" => $USER_ID_1\n                                ])\n                            ]),\n                            new Worker([\n                                "user" => new User([\n                                    "id" => $USER_ID_2\n                                ])\n                            ]),\n                            new Worker([\n                                "user" => new User([\n                                    "id" => $USER_ID_3\n                                ])\n                            ]),\n                        ],\n                        "partitioned_strategy_info" => new TaskWorkerPartitionedStrategyInfo(\n                            [\n                                "type" => 2, // integer value 2 for "WEIGHTED" strategy\n                                "workers_per_input" => 3,\n                                "weights" => $params\n                            ]\n                        ),\n                    ]),\n                    "concepts" => [\n                        new TaskConcept([\n                            "concept" => new Concept([\n                                "id" => $CONCEPT_ID\n                            ]),\n                        ]),\n                    ],\n                    "input_source" => new TaskInputSource([\n                        "type" => 1, // integer value 1 for "ALL_INPUTS" strategy\n                    ]),\n                    "sample_ms" => 1000,\n                    "review" => new TaskReview([\n                        "strategy" => 3, // integer value 1 for "CONSENSUS" strategy\n                        "consensus_strategy_info" => new TaskReviewConsensusStrategyInfo(\n                            [\n                                "approval_threshold" => 2\n                            ]\n                        ),\n                        "users" => [\n                            new User([\n                                "id" => $USER_ID_4\n                            ]),\n                        ],\n                    ]),\n                ]),\n            ],\n        ]),\n        $metadata\n    )\n    ->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure\n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    throw new Exception(\n        "Failure response: " .\n            $response->getStatus()->getDescription() .\n            " " .\n            $response->getStatus()->getDetails()\n    );\n}\n\n?>\n',V='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n//////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and task ID.\n// Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change this to get a task by its ID\n$TASK_ID = "21980d42ddc4483fa9e59e6678d6af71";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\GetTaskRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID,\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->GetTask(\n        // The request object carries the request along with the request status and other metadata related to the request itself\n        new GetTaskRequest([\n            "user_app_id" => $userDataObject,\n            "task_id" => $TASK_ID,\n        ]),\n        $metadata\n    )\n    ->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure\n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    throw new Exception(\n        "Failure response: " .\n            $response->getStatus()->getDescription() .\n            " " .\n            $response->getStatus()->getDetails()\n    );\n}\n\nprint $response->serializeToJsonString();\n\n?>\n',K='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n//////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication and app ID. \n// Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\ListTasksRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID,\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->ListTasks(\n        // The request object carries the request along with the request status and other metadata related to the request itself\n        new ListTasksRequest([\n            "user_app_id" => $userDataObject            \n        ]),\n        $metadata\n    )\n    ->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure\n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    throw new Exception(\n        "Failure response: " .\n            $response->getStatus()->getDescription() .\n            " " .\n            $response->getStatus()->getDetails()\n    );\n}\n\nprint $response->serializeToJsonString();\n\n?>\n',M='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n//////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and\n// worker user ID. Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n$WORKER_USER_ID = "WORKER_USER_ID_HERE";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\ListTasksRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID,\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->ListTasks(\n        // The request object carries the request along with the request status and other metadata related to the request itself\n        new ListTasksRequest([\n            "user_app_id" => $userDataObject,\n            "worker_user_ids" => [$WORKER_USER_ID],\n        ]),\n        $metadata\n    )\n    ->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure\n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    throw new Exception(\n        "Failure response: " .\n            $response->getStatus()->getDescription() .\n            " " .\n            $response->getStatus()->getDetails()\n    );\n}\n\nprint $response->serializeToJsonString();\n\n?>\n',X='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n//////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and \n// review user ID. Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n$REVIEW_USER_ID = "REVIEW_USER_ID_HERE";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\ListTasksRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID,\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->ListTasks(\n        // The request object carries the request along with the request status and other metadata related to the request itself\n        new ListTasksRequest([\n            "user_app_id" => $userDataObject,\n            "review_user_ids" => [$REVIEW_USER_ID],\n        ]),\n        $metadata\n    )\n    ->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure\n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    throw new Exception(\n        "Failure response: " .\n            $response->getStatus()->getDescription() .\n            " " .\n            $response->getStatus()->getDetails()\n    );\n}\n\nprint $response->serializeToJsonString();\n\n?>\n',z='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n/////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and details for\n// assigning a task. Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change these to assign your own task\n$CONCEPT_ID = "water";\n$WORKER_USER_ID = "WORKER_USER_ID_HERE";\n$REVIEWER_USER_ID = "REVIEWER_USER_ID_HERE"; // User who will review this task\n$DATASET_ID = "DATASET_ID_HERE";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\PostTasksRequest;\nuse Clarifai\\Api\\TASK;\nuse Clarifai\\Api\\User;\nuse Clarifai\\Api\\TaskWorker;\nuse Clarifai\\Api\\TaskConcept;\nuse Clarifai\\Api\\Concept;\nuse Clarifai\\Api\\Worker;\nuse Clarifai\\Api\\TaskInputSource;\nuse Clarifai\\Api\\TaskReviewManualStrategyInfo;\nuse Clarifai\\Api\\TaskReview;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID,\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PostTasks(\n        // The request object carries the request along with the request status and other metadata related to the request itself\n        new PostTasksRequest([\n            "user_app_id" => $userDataObject,\n            "tasks" => [\n                new Task([\n                    "type" => 1, // integer value 1 for "CONCEPTS_CLASSIFICATION" type. Refer here https://github.com/Clarifai/clarifai-go-grpc/blob/master/proto/clarifai/api/resources.pb.go\n                    "name" => "Annotate " . $CONCEPT_ID,\n                    "worker" => new TaskWorker([\n                        "strategy" => 4, // integer value 4 for "DYNAMIC" strategy\n                        "workers" => [\n                            new Worker([\n                                "user" => new User([\n                                    "id" => $WORKER_USER_ID                                    \n                                ])                                \n                            ]),\n                        ],\n                    ]),\n                    "concepts" => [\n                        new TaskConcept([\n                            "concept" => new Concept([\n                                "id" => $CONCEPT_ID,\n                            ]),\n                        ]),\n                    ],\n                    "input_source" => new TaskInputSource([\n                        "type" => 3, // integer value 1 for "DATASET" strategy\n                        "id" => $DATASET_ID\n                    ]),\n                    "sample_ms" => 1000,\n                    "review" => new TaskReview([\n                        "strategy" => 2, // integer value 2 for "MANUAL" strategy\n                        "manual_strategy_info" => new TaskReviewManualStrategyInfo(\n                            [\n                                "sample_percentage" => 0.5,\n                            ]\n                        ),\n                        "users" => [\n                            new User([\n                                "id" => $REVIEWER_USER_ID,\n                            ]),\n                        ],\n                    ]),\n                ]),\n            ],\n        ]),\n        $metadata\n    )\n    ->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure\n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    throw new Exception(\n        "Failure response: " .\n            $response->getStatus()->getDescription() .\n            " " .\n            $response->getStatus()->getDetails()\n    );\n}\n\n?>\n',F='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n/////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and details for\n// updating a task. Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change these to update your own task\n$CONCEPT_ID = "water";\n$TASK_ID = "8264c89ced3b4e7ebafdaa9f31f2fb59";\n$USER_ID_1 = "USER_ID_1_HERE";\n$USER_ID_2 = "USER_ID_2_HERE";\n$USER_ID_3 = "USER_ID_3_HERE";\n$USER_ID_4 = "USER_ID_4_HERE";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\PatchTasksRequest;\nuse Clarifai\\Api\\TASK;\nuse Clarifai\\Api\\User;\nuse Clarifai\\Api\\TaskWorker;\nuse Clarifai\\Api\\TaskConcept;\nuse Clarifai\\Api\\Concept;\nuse Clarifai\\Api\\TaskInputSource;\nuse Clarifai\\Api\\TaskWorkerPartitionedStrategyInfo;\nuse Clarifai\\Api\\TaskReviewConsensusStrategyInfo;\nuse Clarifai\\Api\\TaskReview;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\Status\\Status;\nuse Clarifai\\Api\\UserAppIDSet;\nuse Google\\Protobuf\\Struct;\nuse Google\\Protobuf\\Value;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID,\n]);\n\n// create Struct instance\n$params = new Struct();\n$params->getFields()[$USER_ID_1] = (new Value())->setNumberValue(1);\n$params->getFields()[$USER_ID_2] = (new Value())->setNumberValue(1);\n$params->getFields()[$USER_ID_3] = (new Value())->setNumberValue(1);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PatchTasks(\n        // The request object carries the request along with the request status and other metadata related to the request itself\n        new PatchTasksRequest([\n            "user_app_id" => $userDataObject,\n            "action" => "overwrite",\n            "tasks" => [\n                new Task([\n                    "id" => $TASK_ID,\n                    "type" => 1, // integer value 1 for "CONCEPTS_CLASSIFICATION" type\n                    "name" => "Annotate " . $CONCEPT_ID,\n                    "worker" => new TaskWorker([\n                        "strategy" => 2, // integer value 2 for "PARTITIONED" strategy\n                        "users" => [\n                            new User([\n                                "id" => $USER_ID_1\n                            ]),\n                            new User([\n                                "id" => $USER_ID_2\n                            ]),\n                            new User([\n                                "id" => $USER_ID_3\n                            ]),\n                        ],\n                        "partitioned_strategy_info" => new TaskWorkerPartitionedStrategyInfo(\n                            [\n                                "type" => 2, // integer value 2 for "WEIGHTED" strategy\n                                "workers_per_input" => 3,\n                                "weights" => $params\n                            ]\n                        ),\n                    ]),\n                    "concepts" => [\n                        new TaskConcept([\n                            "concept" => new Concept([\n                                "id" => $CONCEPT_ID\n                            ]),\n                        ]),\n                    ],\n                    "input_source" => new TaskInputSource([\n                        "type" => 1, // integer value 1 for "ALL_INPUTS" strategy\n                    ]),\n                    "sample_ms" => 1000,\n                    "review" => new TaskReview([\n                        "strategy" => 3, // integer value 1 for "CONSENSUS" strategy\n                        "consensus_strategy_info" => new TaskReviewConsensusStrategyInfo(\n                            [\n                                "approval_threshold" => 2\n                            ]\n                        ),\n                        "users" => [\n                            new User([\n                                "id" => $USER_ID_4\n                            ]),\n                        ],\n                    ]),\n                    "status" => new Status([\n                        "code" => 54002 // for "TASK_DONE"\n                    ])\n                ]),\n            ],\n        ]),\n        $metadata\n    )\n    ->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure\n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    throw new Exception(\n        "Failure response: " .\n            $response->getStatus()->getDescription() .\n            " " .\n            $response->getStatus()->getDetails()\n    );\n}\n\n?>\n',J='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n/////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and task IDs. \n// Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change these to delete your own tasks\n$TASK_ID_1 = "7aceabee601c4e73b7c1f3ca1e09c1f6";\n$TASK_ID_2 = "fa0c0ddcc43944da8cc66504a2b85d76";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\DeleteTasksRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID,\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->DeleteTasks(\n        // The request object carries the request along with the request status and other metadata related to the request itself\n        new DeleteTasksRequest([\n            "user_app_id" => $userDataObject,\n            "ids" => [$TASK_ID_1, $TASK_ID_2]         \n        ]),\n        $metadata\n    )\n    ->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure\n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    throw new Exception(\n        "Failure response: " .\n            $response->getStatus()->getDescription() .\n            " " .\n            $response->getStatus()->getDetails()\n    );\n}\n\n?>\n',Z='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and auto-annotation details.\n// Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change these to create your own auto-annotation task \n$MODEL_ID = "MODEL_ID_HERE";\n$MODEL_VERSION_ID = "MODEL_VERSION_ID_HERE";\n$CONCEPT_ID = "CONCEPT_ID_HERE";\n$DATASET_ID = "DATASET_ID_HERE";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\PostTasksRequest;\nuse Clarifai\\Api\\TASK;\nuse Clarifai\\Api\\TaskWorker;\nuse Clarifai\\Api\\Worker;\nuse Clarifai\\Api\\TaskConcept;\nuse Clarifai\\Api\\TaskConceptAutoAnnotationConfig;\nuse Clarifai\\Api\\Concept;\nuse Clarifai\\Api\\ThresholdRange;\nuse Clarifai\\Api\\Model;\nuse Clarifai\\Api\\ModelVersion;\nuse Clarifai\\Api\\TaskInputSource;\nuse Clarifai\\Api\\TaskReview;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PostTasks(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new PostTasksRequest([\n        "user_app_id" => $userDataObject,\n        "tasks" => [\n            new Task([\n                "type" => 0, // integer value 0 for "TYPE_NOT_SET" type. Refer here https://github.com/Clarifai/clarifai-go-grpc/blob/master/proto/clarifai/api/resources.pb.go\n                "name" => "Auto-Annotate " . $CONCEPT_ID,\n                "worker" => new TaskWorker([\n                    "strategy" => 3, // integer value 3 for "FULL" strategy\n                    "workers" => [\n                        new Worker([\n                            "model" => new Model([\n                                "id" => $MODEL_ID,\n                                "model_version" => new ModelVersion([\n                                    "id" => $MODEL_VERSION_ID\n                                ])\n                            ])\n                        ])\n                    ]\n                ]),\n                "concepts" => [\n                    new TaskConcept([\n                        "concept" => new Concept([\n                            "id" => $CONCEPT_ID\n                        ]),\n\n                        "auto_annotation_config" => new TaskConceptAutoAnnotationConfig([\n                            "annotation_data_types" => 1,\n                            "threshold_range" => new ThresholdRange([\n                                "is_lower_inclusive" => true,\n                                "is_upper_inclusive" => true,\n                                "lower" => 0.7,\n                                "upper" => 0.999\n                            ]),\n\n                            "status_code" => 24150\n\n                        ])\n                    ])\n                ],\n                "input_source" => new TaskInputSource([\n                    "type" => 3, // integer value 1 for "DATASET" strategy\n                    "id" => $DATASET_ID\n                ]),\n                "sample_ms" => 1000,\n                "review" => new TaskReview([\n                    "strategy" => 1 // integer value 1 for "NONE" strategy                       \n                ]),\n            ]),\n        ],\n    ]),\n    $metadata\n)\n->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure\n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    throw new Exception(\n        "Failure response: " .\n        $response->getStatus()->getDescription() .\n        " " .\n        $response->getStatus()->getDetails()\n    );\n}\n\n?>\n',Q='curl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/tasks" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n      "tasks": [\n          {\n              "type": "CONCEPTS_CLASSIFICATION",\n              "name": "Annotate CONCEPT_ID_HERE",\n              "worker": {\n                  "strategy": "DYNAMIC",\n                  "workers": [\n                      {\n                          "user": {\n                              "id": "WORKER_USER_ID_HERE"\n                          }\n                      }\n                  ]\n              },\n              "concepts": [\n                  {\n                      "concept": {\n                          "id": "CONCEPT_ID_HERE"\n                      }\n                  }\n              ],\n              "input_source": {\n                  "type": "DATASET",\n                  "id": "DATASET_ID_HERE"\n              },\n              "sample_ms": 1000,\n              "review": {\n                  "strategy": "MANUAL",\n                  "manual_strategy_info": {\n                      "sample_percentage": 0.5\n                  },\n                  "users": [\n                      {\n                          "id": "REVIEWER_USER_ID_HERE"\n                      }\n                  ]\n              }\n          }\n      ]\n  }\'\n',nn='curl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/tasks" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "tasks": [\n      {\n        "type": "CONCEPTS_CLASSIFICATION",\n        "name": "Annotate CONCEPT_ID_HERE",\n        "worker": {\n          "strategy": "PARTITIONED",\n          "workers": [\n            {\n              "user": {\n                "id": "USER_ID_1_HERE"\n              }\n            },\n            {\n              "user": {\n                "id": "USER_ID_2_HERE"\n              }\n            },\n            {\n              "user": {\n                "id": "USER_ID_3_HERE"\n              }\n            }\n          ],\n          "partitioned_strategy_info": {\n            "type": "WEIGHTED",\n            "workers_per_input": 3,\n            "weights": {\n              "USER_ID_1_HERE": 1,\n              "USER_ID_2_HERE": 1,\n              "USER_ID_3_HERE": 1\n            }\n          }\n        },\n        "concepts": [\n          {\n            "concept": {\n              "id": "CONCEPT_ID_HERE"\n            }\n          }\n        ],\n        "input_source": {\n          "type": "ALL_INPUTS"\n        },\n        "sample_ms": 1000,\n        "review": {\n          "strategy": "CONSENSUS",\n          "consensus_strategy_info": {\n            "approval_threshold": 2\n          },\n          "users": [\n            {\n              "id": "USER_ID_4_HERE"\n            }\n          ]\n        }\n      }\n    ]\n  }\'\n',en='curl -X GET "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/tasks/TASK_ID_HERE" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n',tn='curl -X GET "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/tasks" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  ',sn='curl -X GET "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/tasks?worker_user_ids=WORKER_USER_ID_HERE" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n',an='curl -X GET "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/tasks?review_user_ids=REVIEW_USER_ID_HERE" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n',rn='curl -X PATCH "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/tasks" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n        "action": "overwrite",\n        "tasks": [\n            {\n                "id": "TASK_ID_HERE",\n                "type": "CONCEPTS_CLASSIFICATION",\n                "name": "Annotate CONCEPT_ID_HERE",\n                "worker": {\n                    "strategy": "PARTITIONED",\n                    "users": [\n                        {"id": "USER_ID_1_HERE"},\n                        {"id": "USER_ID_2_HERE"},\n                        {"id": "USER_ID_3_HERE"}\n                    ],\n                    "partitioned_strategy_info": {\n                        "type": "WEIGHTED",\n                        "workers_per_input": 3,\n                        "weights": {\n                            "USER_ID_1_HERE": 1,\n                            "USER_ID_2_HERE": 1,\n                            "USER_ID_3_HERE": 1\n                        }\n                    }\n                },\n                "concept_ids": [\n                    "CONCEPT_ID_HERE"\n                ],\n                "input_source": {\n                    "type": "ALL_INPUTS"\n                },\n                "sample_ms": 1000,\n                "review": {\n                    "strategy": "CONSENSUS",\n                    "consensus_strategy_info": {\n                        "approval_threshold": 2\n                    },\n                    "users": [\n                        {"id": "USER_ID_4_HERE"}\n                    ]\n                },\n                "status": {\n                    "code": "TASK_DONE"\n                }\n            }\n        ]\n    }\'',on='curl -X DELETE "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/tasks" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n        "ids":["TASK_ID_HERE"]\n    }\'',cn='curl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/tasks" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n        "tasks": [\n            {\n                "type": "TYPE_NOT_SET",\n                "name": "Auto-Annotate CONCEPT_ID_HERE",\n                "worker": {\n                    "strategy": "FULL",\n                    "workers": [\n                        {\n                            "model": {\n                                "id": "MODEL_ID_HERE",\n                                "model_version": {\n                                    "id": "MODEL_VERSION_ID_HERE"\n                                }\n                            }\n                        }\n                    ]\n                },\n                "concepts": [\n                    {\n                        "concept": {\n                            "id": "CONCEPT_ID_HERE"\n                        },\n                        "auto_annotation_config": {\n                            "annotation_data_types": 1,\n                            "threshold_range": {\n                                "is_lower_inclusive": true,\n                                "is_upper_inclusive": true,\n                                "lower": 0.7,\n                                "upper": 0.999\n                            },\n                            "status_code": 24150\n                        }\n                    }\n                ],\n                "input_source": {\n                    "type": "DATASET",\n                    "id": "DATASET_ID_HERE"\n                },\n                "sample_ms": 1000,\n                "review": {\n                    "strategy": "NONE"\n                }\n            }\n        ]\n  }\'\n',ln='\x3c!--index.html file--\x3e\n\n<script>\n  //////////////////////////////////////////////////////////////////////////////////\n  // In this section, we set the user authentication, app ID, and the details for\n  // performing task annotations. Change these strings to run your own example.\n  /////////////////////////////////////////////////////////////////////////////////\n\n  const USER_ID = "YOUR_USER_ID_HERE";\n  // Your PAT (Personal Access Token) can be found in the Account\'s Security section\n  const PAT = "YOUR_PAT_HERE";\n  const APP_ID = "YOUR_APP_ID_HERE";\n  // Change these to perform your own task annotations\n  const INPUT_ID = "c99f1b557d1d43d1916b46f8ce4a0487";\n  const CONCEPT_ID_1 = "tree";\n  const CONCEPT_ID_2 = "water";\n  const TASK_ID = "c37aed156e474e03bb5246576d9f48fd";\n\n  ///////////////////////////////////////////////////////////////////////////////////\n  // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n  ///////////////////////////////////////////////////////////////////////////////////\n\n  const raw = JSON.stringify({\n    user_app_id: {\n      user_id: USER_ID,\n      app_id: APP_ID,\n    },\n    annotations: [\n      {\n        input_id: INPUT_ID,\n        data: {\n          concepts: [\n            {\n              id: CONCEPT_ID_1,\n              value: 1,\n            },\n            {\n              id: CONCEPT_ID_2,\n              value: 0,\n            },\n          ],\n        },\n        annotation_info: {\n          task_id: TASK_ID,\n        },\n      },\n    ],\n  });\n\n  const requestOptions = {\n    method: "POST",\n    headers: {\n      Accept: "application/json",\n      Authorization: "Key " + PAT,\n    },\n    body: raw,\n  };\n\n  fetch("https://api.clarifai.com/v2/annotations", requestOptions)\n    .then((response) => response.text())\n    .then((result) => console.log(result))\n    .catch((error) => console.log("error", error));\n<\/script>\n',un='curl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/annotations" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n      "annotations": [\n        {\n          "input_id": "INPUT_ID_HERE",\n          "data": {\n            "concepts": [\n              {\n                "id": "tree",\n                "value": 1\n              },\n              {\n                "id": "water",\n                "value": 0\n              }\n            ]\n          },\n          "annotation_info": {\n            "task_id": "TASK_ID_HERE"\n          }\n        }\n      ]\n    }\'',pn="####################################################################################\n# In this section, we set the user authentication, app ID, and the details for\n# performing task annotations. Change these strings to run your own example.\n###################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to perform your own task annotations\nINPUT_ID = 'c99f1b557d1d43d1916b46f8ce4a0487'\nCONCEPT_ID_1 = 'tree'\nCONCEPT_ID_2 = 'water'\nTASK_ID = 'c37aed156e474e03bb5246576d9f48fd'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\nfrom google.protobuf.struct_pb2 import Struct\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nparams = Struct()\nparams['task_id'] = TASK_ID\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\npost_task_annotations_response = stub.PostAnnotations(\n    service_pb2.PostAnnotationsRequest(\n        user_app_id=userDataObject,  # The userDataObject is created in the overview and is required when using a PAT\n        annotations=[\n            resources_pb2.Annotation(\n                input_id=INPUT_ID,\n                data=resources_pb2.Data(\n                    concepts=[\n                        resources_pb2.Concept(id=CONCEPT_ID_1, value=1.),  # 1 means true, this concept is present\n                        resources_pb2.Concept(id=CONCEPT_ID_2, value=0.)  # 0 means false, this concept is not present\n                    ]\n                ),\n                annotation_info=params\n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif post_task_annotations_response.status.code != status_code_pb2.SUCCESS:\n    print(post_task_annotations_response.status)\n    raise Exception('Post task annotations failed, status: ' + post_task_annotations_response.status.description)\n",_n='package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.status.StatusCode;\nimport com.google.protobuf.Struct;\nimport com.google.protobuf.Value;\n\npublic class ClarifaiExample {\n\n    //////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the details for\n    // performing task annotations. Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\t\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to perform your own task annotations  \n    static final String INPUT_ID = "c99f1b557d1d43d1916b46f8ce4a0487";\n    static final String CONCEPT_ID_1 = "tree";\n    static final String CONCEPT_ID_2 = "water";\n    static final String TASK_ID = "c37aed156e474e03bb5246576d9f48fd";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\t\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n        \n        Struct.Builder params = Struct.newBuilder()\n                .putFields("task_id", Value.newBuilder().setStringValue(TASK_ID).build());\n\n        MultiAnnotationResponse postAnnotationsResponse = stub.postAnnotations(\n            PostAnnotationsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .addAnnotations(\n                Annotation.newBuilder()\n                .setInputId(INPUT_ID)\n                .setData(\n                    Data.newBuilder().addConcepts(\n                        Concept.newBuilder()\n                        .setId(CONCEPT_ID_1)\n                        .setValue(1f) // 1 means true, this concept is present\n                        .build()\n                    ).addConcepts(\n                        Concept.newBuilder()\n                        .setId(CONCEPT_ID_2)\n                        .setValue(0f) // 0 means false, this concept is not present\n                        .build()\n                    )\n                )\n                .setAnnotationInfo(params)               \n                .build()\n            ).build()\n        );\n\n        if (postAnnotationsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post annotations failed, status: " + postAnnotationsResponse.getStatus());\n        }\n\n    }\n\n}',dn='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and details for \n// performing task annotations. Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change these to perform your own task annotations\n$INPUT_ID = "62bb672ccbdd4e5da55b41209d1a0e9f";\n$CONCEPT_ID_1 = "tree";\n$CONCEPT_ID_2 = "water";\n$TASK_ID = "d0f2fa2b61234d1cb6b66983ea021b5b";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\PostAnnotationsRequest;\nuse Clarifai\\Api\\Annotation;\nuse Clarifai\\Api\\Concept;\nuse Clarifai\\Api\\Data;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\nuse Google\\Protobuf\\Struct;\nuse Google\\Protobuf\\Value;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// create Struct instance\n$params = new Struct();\n$params->getFields()->offsetSet("task_id", (new Value())->setStringValue($TASK_ID));\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PostAnnotations(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new PostAnnotationsRequest([\n        "user_app_id" => $userDataObject, \n        "annotations" => [\n             new Annotation([\n                "input_id" => $INPUT_ID,\n                "data" => new Data([\n                    "concepts" => [\n                        new Concept(["id" => $CONCEPT_ID_1, "value" => 1.]),\n                        new Concept(["id" => $CONCEPT_ID_2, "value" => 0.])\n                    ]\n                    ]),\n                "annotation_info" => $params\n             ])\n        ]\n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\n?>\n',En='//index.js file\n\n////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the details for\n// performing task annotations. Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = "YOUR_PAT_HERE";\nconst APP_ID = "YOUR_APP_ID_HERE";\n// Change these to perform your own task annotations\nconst INPUT_ID = "62bb672ccbdd4e5da55b41209d1a0e9f";\nconst CONCEPT_ID_1 = "tree";\nconst CONCEPT_ID_2 = "water";\nconst TASK_ID = "d0f2fa2b61234d1cb6b66983ea021b5b";\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PostAnnotations(\n  {\n    user_app_id: {\n      user_id: USER_ID,\n      app_id: APP_ID,\n    },\n    annotations: [\n      {\n        input_id: INPUT_ID,\n        data: {\n          concepts: [\n            {\n              id: CONCEPT_ID_1,\n              value: 1,\n            },\n            {\n              id: CONCEPT_ID_2,\n              value: 0,\n            },\n          ],\n        },\n        annotation_info: {\n          task_id: TASK_ID,\n        },\n      },\n    ],\n  },\n  metadata,\n  (err, response) => {\n    if (err) {\n      throw new Error(err);\n    }\n\n    if (response.status.code !== 10000) {\n      throw new Error(\n        "Post annotations failed, status: " + response.status.description\n      );\n    }\n  }\n);\n',hn={description:"Group your labeling work into tasks that can be delegated.",sidebar_position:4},In="Tasks : Create, Get, Update, Delete",Tn={},An=[{value:"Create",id:"create",level:2},{value:"Assigned Task",id:"assigned-task",level:3},{value:"Task With Consensus Review",id:"task-with-consensus-review",level:3},{value:"Auto-Annotation Task",id:"auto-annotation-task",level:3},{value:"Get",id:"get",level:2},{value:"Get Task by ID",id:"get-task-by-id",level:3},{value:"List All Tasks",id:"list-all-tasks",level:3},{value:"List Tasks Assigned to User",id:"list-tasks-assigned-to-user",level:3},{value:"List Tasks Assigned to User for Review",id:"list-tasks-assigned-to-user-for-review",level:3},{value:"Update",id:"update",level:2},{value:"Update Task",id:"update-task",level:3},{value:"Task Annotations",id:"task-annotations",level:2},{value:"Delete",id:"delete",level:2}];function Rn(n){const e={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.header,{children:(0,a.jsx)(e.h1,{id:"tasks--create-get-update-delete",children:"Tasks : Create, Get, Update, Delete"})}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"Group your labeling work into tasks that can be delegated"})}),"\n",(0,a.jsx)("hr",{}),"\n",(0,a.jsx)(e.p,{children:"Task is the work that needs to be done for labeling the inputs in an app. It's a powerful way to help your team annotate inputs fast and efficiently."}),"\n",(0,a.jsx)(e.p,{children:"These are some parameters you can specify when working with tasks:"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Task type"})," \u2014 It can be:","\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"CONCEPTS_CLASSIFICATION"})," \u2014 Concepts classification tasks annotate ",(0,a.jsx)(e.a,{href:"https://docs.clarifai.com/api-guide/concepts/",children:"concepts"})," for the overall image, frame of video, or section of text."]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"BOUNDING_BOX_DETECTION"})," \u2014 Bounding box detection tasks annotate rectangular bounding box regions around each concept in an image, frame of video, or section of text."]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"POLYGON_DETECTION"})," \u2014 Polygon detection tasks annotate free-form regions around concepts in an image, frame of video, or section of text."]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"TYPE_NOT_SET"})," \u2014 This is the default task type. It should be used when creating an auto-annotation task."]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Worker"})," \u2014 Task worker includes information about the workers who will work on the task. For manual labeling tasks, the workers can only be users; no limitation on number of workers. For auto-annotation tasks, the worker can be either a model or a workflow; currently only supports 1 worker."]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Concepts"})," \u2014 List of concept IDs used in the work on the task. The concepts should already be existing in your app."]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Task worker strategy"})," \u2014 It can be:","\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"DYNAMIC"})," \u2014  Each worker will dynamically get 10 inputs assigned at a time. No inputs are assigned at task creation. It's the recommended way to set a task worker strategy."]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"PARTITIONED"})," \u2014 The inputs will be partitioned in several partitions. Each worker will label one or more input partitions.  All inputs are assigned at task creation."]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"FULL"})," \u2014 Each worker will label all inputs from the input source. All inputs are assigned at task creation."]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Input source"})," \u2014 It can be:","\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"ALL_INPUTS"})," \u2014 Use all inputs in the app."]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"DATASET"})," \u2014 Use inputs from a ",(0,a.jsx)(e.a,{href:"https://docs.clarifai.com/api-guide/data/datasets/",children:"dataset"}),"."]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:(0,a.jsx)(e.a,{href:"https://docs.clarifai.com/api-guide/predict/video#configuring-fps",children:(0,a.jsx)(e.code,{children:"sample_ms"})})})," \u2014 Used in video model predictions. It specifies the sample delay for video predictions (1 frame per N milliseconds)."]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Review strategy"})," \u2014 It can be:","\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"NONE"})," \u2014 No review is needed."]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"MANUAL"})," \u2014 Manual review strategy."]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"CONSENSUS"})," \u2014 Consensus review strategy."]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Partitioned strategy info"})," \u2014 It can be:","\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"EVENLY"})," \u2014 Each worker will label (approximately) the same number of inputs."]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"WEIGHTED"})," \u2014 Each worker will have an assigned weight."]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Workers per input"})," \u2014 The number of workers who will label each input."]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Auto-annotation config"})," - The concepts configurations for setting up an auto-annotation labeling task using a model or a workflow. You can set:","\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"annotation_data_types"})," \u2014 An integer for filtering annotations by their annotation data type. It's a bit-mask field that holds multiple annotation data type values that are combined in an OR fashion. For example, if ",(0,a.jsx)(e.code,{children:"annotation_data_types = 34"}),", then we filter annotations that appear as a mask or a bounding box, because ",(0,a.jsx)(e.code,{children:"MASK = 32"})," and ",(0,a.jsx)(e.code,{children:"BOUNDING_BOX = 2"}),". You can look for the various annotation data types values ",(0,a.jsx)(e.a,{href:"https://github.com/Clarifai/clarifai-go-grpc/blob/master/proto/clarifai/api/resources.pb.go",children:"here"}),". For example, ",(0,a.jsx)(e.code,{children:"annotation_data_types=1"})," corresponds to ",(0,a.jsx)(e.code,{children:"AnnotationDataType_TAG"}),"."]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"threshold_range"})," \u2014 It specifies a range of predictions values based on the lower and upper bounds, and it defines whether these bounds are inclusive or exclusive. For example, if you set ",(0,a.jsx)(e.code,{children:"is_lower_inclusive = true"}),", ",(0,a.jsx)(e.code,{children:"is_upper_inclusive = true"}),", ",(0,a.jsx)(e.code,{children:"lower = 0.7"})," and ",(0,a.jsx)(e.code,{children:"upper = 1.0"}),", it is interpreted as the prediction range includes all values from 0.7 to 1.0, including both 0.7 and 1.0."]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"status_code"})," \u2014 It specifies the ",(0,a.jsx)(e.a,{href:"https://docs.clarifai.com/api-guide/advanced-topics/status-codes#annotation-related-codes-24xxx",children:"code"})," related to the status of the annotation."]}),"\n"]}),"\n"]}),"\n"]}),"\n","\n","\n","\n","\n","\n","\n","\n","\n",(0,a.jsx)(e.admonition,{type:"info",children:(0,a.jsxs)(e.p,{children:["Before using the ",(0,a.jsx)(e.a,{href:"https://docs.clarifai.com/additional-resources/api-overview/python-sdk",children:"Python SDK"}),", ",(0,a.jsx)(e.a,{href:"https://docs.clarifai.com/additional-resources/api-overview/nodejs-sdk",children:"Node.js SDK"}),", or any of our ",(0,a.jsx)(e.a,{href:"https://docs.clarifai.com/additional-resources/api-overview/grpc-clients",children:"gRPC clients"}),", ensure they are properly installed on your machine. Refer to their respective installation guides for instructions on how to install and initialize them."]})}),"\n",(0,a.jsx)(e.h2,{id:"create",children:"Create"}),"\n",(0,a.jsxs)(e.p,{children:["To create a new task in your app, you ",(0,a.jsx)(e.code,{children:"POST"})," the task information to the ",(0,a.jsx)(e.code,{children:"v2/task"})," endpoint."]}),"\n",(0,a.jsx)(e.h3,{id:"assigned-task",children:"Assigned Task"}),"\n",(0,a.jsx)(e.p,{children:"A task should be assigned to a list of users. These users will do the labeling work, so they're also called workers. A task may also be assigned to a list of users for review purposes."}),"\n",(0,a.jsxs)(i.A,{groupId:"code",children:[(0,a.jsx)(o.A,{value:"python",label:"Python (gRPC)",children:(0,a.jsx)(c.A,{className:"language-python",children:l})}),(0,a.jsx)(o.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,a.jsx)(c.A,{className:"language-javascript",children:A})}),(0,a.jsx)(o.A,{value:"nodejs",label:"Node.js (gRPC)",children:(0,a.jsx)(c.A,{className:"language-javascript",children:w})}),(0,a.jsx)(o.A,{value:"java",label:"Java (gRPC)",children:(0,a.jsx)(c.A,{className:"language-java",children:v})}),(0,a.jsx)(o.A,{value:"php",label:"PHP (gRPC)",children:(0,a.jsx)(c.A,{className:"language-php",children:z})}),(0,a.jsx)(o.A,{value:"curl",label:"cURL",children:(0,a.jsx)(c.A,{className:"language-bash",children:Q})})]}),"\n",(0,a.jsx)(e.h3,{id:"task-with-consensus-review",children:"Task With Consensus Review"}),"\n",(0,a.jsxs)(e.p,{children:["You can also create tasks with ",(0,a.jsx)(e.code,{children:"CONSENSUS"})," review strategy. When enough workers label an input in the same way, it will automatically be approved, with no need for the reviewer to spend time to check. In this way, the reviewer will be able to focus on the inputs where the workers don't agree."]}),"\n",(0,a.jsx)(e.p,{children:"Note that an approval threshold must be set. It is the number of labelers that need to agree in order to automatically approve an annotation."}),"\n",(0,a.jsxs)(e.p,{children:["For example, in case of 3 workers and ",(0,a.jsx)(e.code,{children:"approval_threshold"})," set to 2, if an input is labeled in the same way by 2 workers, they form a majority and the group reaches a consensus."]}),"\n",(0,a.jsxs)(i.A,{groupId:"code",children:[(0,a.jsx)(o.A,{value:"python",label:"Python (gRPC)",children:(0,a.jsx)(c.A,{className:"language-python",children:u})}),(0,a.jsx)(o.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,a.jsx)(c.A,{className:"language-javascript",children:R})}),(0,a.jsx)(o.A,{value:"nodejs",label:"Node.js (gRPC)",children:(0,a.jsx)(c.A,{className:"language-javascript",children:O})}),(0,a.jsx)(o.A,{value:"java",label:"Java (gRPC)",children:(0,a.jsx)(c.A,{className:"language-java",children:j})}),(0,a.jsx)(o.A,{value:"php",label:"PHP (gRPC)",children:(0,a.jsx)(c.A,{className:"language-php",children:q})}),(0,a.jsx)(o.A,{value:"curl",label:"cURL",children:(0,a.jsx)(c.A,{className:"language-bash",children:nn})})]}),"\n",(0,a.jsx)(e.h3,{id:"auto-annotation-task",children:"Auto-Annotation Task"}),"\n",(0,a.jsx)(e.p,{children:"You can create an auto-annotation task and automatically label the inputs in your dataset. You need to specify a model or a workflow you want to use its predictions to automatically generate annotations or labels for your data."}),"\n",(0,a.jsx)(e.admonition,{type:"tip",children:(0,a.jsxs)(e.p,{children:["You can learn how to perform auto-annotation via the UI ",(0,a.jsx)(e.a,{href:"https://docs.clarifai.com/portal-guide/annotate/auto-annotation",children:"here"}),"."]})}),"\n",(0,a.jsxs)(i.A,{groupId:"code",children:[(0,a.jsx)(o.A,{value:"python",label:"Python (gRPC)",children:(0,a.jsx)(c.A,{className:"language-python",children:T})}),(0,a.jsx)(o.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,a.jsx)(c.A,{className:"language-javascript",children:U})}),(0,a.jsx)(o.A,{value:"nodejs",label:"Node.js (gRPC)",children:(0,a.jsx)(c.A,{className:"language-javascript",children:H})}),(0,a.jsx)(o.A,{value:"java",label:"Java (gRPC)",children:(0,a.jsx)(c.A,{className:"language-java",children:B})}),(0,a.jsx)(o.A,{value:"php",label:"PHP (gRPC)",children:(0,a.jsx)(c.A,{className:"language-php",children:Z})}),(0,a.jsx)(o.A,{value:"curl",label:"cURL",children:(0,a.jsx)(c.A,{className:"language-bash",children:cn})})]}),"\n",(0,a.jsx)(e.h2,{id:"get",children:"Get"}),"\n",(0,a.jsx)(e.h3,{id:"get-task-by-id",children:"Get Task by ID"}),"\n",(0,a.jsx)(e.p,{children:"You can get the details of a single task by its ID, which is automatically generated upon task creation. You can output the API response to obtain this task ID."}),"\n",(0,a.jsxs)(e.p,{children:["Alternatively, you can also locate the task ID within the ",(0,a.jsx)(e.a,{href:"https://docs.clarifai.com/portal-guide/annotate/create-a-task#tasks-listing",children:"Clarifai platform's user interface"}),"."]}),"\n",(0,a.jsxs)(i.A,{groupId:"code",children:[(0,a.jsx)(o.A,{value:"python",label:"Python (gRPC)",children:(0,a.jsx)(c.A,{className:"language-python",children:p})}),(0,a.jsx)(o.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,a.jsx)(c.A,{className:"language-javascript",children:S})}),(0,a.jsx)(o.A,{value:"nodejs",label:"Node.js (gRPC)",children:(0,a.jsx)(c.A,{className:"language-javascript",children:k})}),(0,a.jsx)(o.A,{value:"java",label:"Java (gRPC)",children:(0,a.jsx)(c.A,{className:"language-java",children:L})}),(0,a.jsx)(o.A,{value:"php",label:"PHP (gRPC)",children:(0,a.jsx)(c.A,{className:"language-php",children:V})}),(0,a.jsx)(o.A,{value:"curl",label:"cURL",children:(0,a.jsx)(c.A,{className:"language-bash",children:en})})]}),"\n",(0,a.jsx)(e.h3,{id:"list-all-tasks",children:"List All Tasks"}),"\n",(0,a.jsxs)(e.p,{children:["You can get a list of tasks within your app with a ",(0,a.jsx)(e.code,{children:"GET"})," call. This call supports ",(0,a.jsx)(e.a,{href:"https://docs.clarifai.com/api-guide/advanced-topics/pagination/",children:"pagination"}),"."]}),"\n",(0,a.jsxs)(i.A,{groupId:"code",children:[(0,a.jsx)(o.A,{value:"python",label:"Python (gRPC)",children:(0,a.jsx)(c.A,{className:"language-python",children:_})}),(0,a.jsx)(o.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,a.jsx)(c.A,{className:"language-javascript",children:D})}),(0,a.jsx)(o.A,{value:"nodejs",label:"Node.js (gRPC)",children:(0,a.jsx)(c.A,{className:"language-javascript",children:b})}),(0,a.jsx)(o.A,{value:"java",label:"Java (gRPC)",children:(0,a.jsx)(c.A,{className:"language-java",children:$})}),(0,a.jsx)(o.A,{value:"php",label:"PHP (gRPC)",children:(0,a.jsx)(c.A,{className:"language-php",children:K})}),(0,a.jsx)(o.A,{value:"curl",label:"cURL",children:(0,a.jsx)(c.A,{className:"language-bash",children:tn})})]}),"\n",(0,a.jsx)(e.h3,{id:"list-tasks-assigned-to-user",children:"List Tasks Assigned to User"}),"\n",(0,a.jsx)(e.p,{children:"Get only the tasks assigned to a specific user for work."}),"\n",(0,a.jsxs)(i.A,{groupId:"code",children:[(0,a.jsx)(o.A,{value:"python",label:"Python (gRPC)",children:(0,a.jsx)(c.A,{className:"language-python",children:d})}),(0,a.jsx)(o.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,a.jsx)(c.A,{className:"language-javascript",children:g})}),(0,a.jsx)(o.A,{value:"nodejs",label:"Node.js (gRPC)",children:(0,a.jsx)(c.A,{className:"language-javascript",children:N})}),(0,a.jsx)(o.A,{value:"java",label:"Java (gRPC)",children:(0,a.jsx)(c.A,{className:"language-java",children:W})}),(0,a.jsx)(o.A,{value:"php",label:"PHP (gRPC)",children:(0,a.jsx)(c.A,{className:"language-php",children:M})}),(0,a.jsx)(o.A,{value:"curl",label:"cURL",children:(0,a.jsx)(c.A,{className:"language-bash",children:sn})})]}),"\n",(0,a.jsx)(e.h3,{id:"list-tasks-assigned-to-user-for-review",children:"List Tasks Assigned to User for Review"}),"\n",(0,a.jsx)(e.p,{children:"Get only the tasks assigned to a specific user for review."}),"\n",(0,a.jsxs)(i.A,{groupId:"code",children:[(0,a.jsx)(o.A,{value:"python",label:"Python (gRPC)",children:(0,a.jsx)(c.A,{className:"language-python",children:E})}),(0,a.jsx)(o.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,a.jsx)(c.A,{className:"language-javascript",children:f})}),(0,a.jsx)(o.A,{value:"nodejs",label:"Node.js (gRPC)",children:(0,a.jsx)(c.A,{className:"language-javascript",children:y})}),(0,a.jsx)(o.A,{value:"java",label:"Java (gRPC)",children:(0,a.jsx)(c.A,{className:"language-java",children:G})}),(0,a.jsx)(o.A,{value:"php",label:"PHP (gRPC)",children:(0,a.jsx)(c.A,{className:"language-php",children:X})}),(0,a.jsx)(o.A,{value:"curl",label:"cURL",children:(0,a.jsx)(c.A,{className:"language-bash",children:an})})]}),"\n",(0,a.jsx)(e.h2,{id:"update",children:"Update"}),"\n",(0,a.jsx)(e.p,{children:"Currently, we only support updating a task by providing all information at once."}),"\n",(0,a.jsx)(e.h3,{id:"update-task",children:"Update Task"}),"\n",(0,a.jsxs)(i.A,{groupId:"code",children:[(0,a.jsx)(o.A,{value:"python",label:"Python (gRPC)",children:(0,a.jsx)(c.A,{className:"language-python",children:h})}),(0,a.jsx)(o.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,a.jsx)(c.A,{className:"language-javascript",children:C})}),(0,a.jsx)(o.A,{value:"java",label:"Java (gRPC)",children:(0,a.jsx)(c.A,{className:"language-java",children:x})}),(0,a.jsx)(o.A,{value:"php",label:"PHP (gRPC)",children:(0,a.jsx)(c.A,{className:"language-php",children:F})}),(0,a.jsx)(o.A,{value:"curl",label:"cURL",children:(0,a.jsx)(c.A,{className:"language-bash",children:rn})})]}),"\n",(0,a.jsx)(e.h2,{id:"task-annotations",children:"Task Annotations"}),"\n",(0,a.jsx)(e.p,{children:"In order to keep track of each user's work assigned to a task, all the annotations of this user related to this task should be linked to the task ID."}),"\n",(0,a.jsx)(e.p,{children:"Therefore, when a user creates an annotation, the task ID should be provided as below:"}),"\n",(0,a.jsxs)(i.A,{groupId:"code",children:[(0,a.jsx)(o.A,{value:"python",label:"Python (gRPC)",children:(0,a.jsx)(c.A,{className:"language-python",children:pn})}),(0,a.jsx)(o.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,a.jsx)(c.A,{className:"language-javascript",children:ln})}),(0,a.jsx)(o.A,{value:"nodejs",label:"Node.js (gRPC)",children:(0,a.jsx)(c.A,{className:"language-javascript",children:En})}),(0,a.jsx)(o.A,{value:"java",label:"Java (gRPC)",children:(0,a.jsx)(c.A,{className:"language-java",children:_n})}),(0,a.jsx)(o.A,{value:"php",label:"PHP (gRPC)",children:(0,a.jsx)(c.A,{className:"language-php",children:dn})}),(0,a.jsx)(o.A,{value:"curl",label:"cURL",children:(0,a.jsx)(c.A,{className:"language-bash",children:un})})]}),"\n",(0,a.jsx)(e.h2,{id:"delete",children:"Delete"}),"\n",(0,a.jsx)(e.p,{children:"You can delete a task by specifying its ID. You can also delete multiple tasks by specifying a list of their IDs."}),"\n",(0,a.jsxs)(i.A,{groupId:"code",children:[(0,a.jsx)(o.A,{value:"python",label:"Python (gRPC)",children:(0,a.jsx)(c.A,{className:"language-python",children:I})}),(0,a.jsx)(o.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,a.jsx)(c.A,{className:"language-javascript",children:P})}),(0,a.jsx)(o.A,{value:"nodejs",label:"Node.js (gRPC)",children:(0,a.jsx)(c.A,{className:"language-javascript",children:m})}),(0,a.jsx)(o.A,{value:"java",label:"Java (gRPC)",children:(0,a.jsx)(c.A,{className:"language-java",children:Y})}),(0,a.jsx)(o.A,{value:"php",label:"PHP (gRPC)",children:(0,a.jsx)(c.A,{className:"language-php",children:J})}),(0,a.jsx)(o.A,{value:"curl",label:"cURL",children:(0,a.jsx)(c.A,{className:"language-bash",children:on})})]})]})}function Sn(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(Rn,{...n})}):Rn(n)}},65537:(n,e,t)=>{t.d(e,{A:()=>g});var s=t(96540),a=t(18215),r=t(65627),i=t(56347),o=t(50372),c=t(30604),l=t(11861),u=t(78749);function p(n){return s.Children.toArray(n).filter((n=>"\n"!==n)).map((n=>{if(!n||(0,s.isValidElement)(n)&&function(n){const{props:e}=n;return!!e&&"object"==typeof e&&"value"in e}(n))return n;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof n.type?n.type:n.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function _(n){const{values:e,children:t}=n;return(0,s.useMemo)((()=>{const n=e??function(n){return p(n).map((n=>{let{props:{value:e,label:t,attributes:s,default:a}}=n;return{value:e,label:t,attributes:s,default:a}}))}(t);return function(n){const e=(0,l.XI)(n,((n,e)=>n.value===e.value));if(e.length>0)throw new Error(`Docusaurus error: Duplicate values "${e.map((n=>n.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(n),n}),[e,t])}function d(n){let{value:e,tabValues:t}=n;return t.some((n=>n.value===e))}function E(n){let{queryString:e=!1,groupId:t}=n;const a=(0,i.W6)(),r=function(n){let{queryString:e=!1,groupId:t}=n;if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:e,groupId:t});return[(0,c.aZ)(r),(0,s.useCallback)((n=>{if(!r)return;const e=new URLSearchParams(a.location.search);e.set(r,n),a.replace({...a.location,search:e.toString()})}),[r,a])]}function h(n){const{defaultValue:e,queryString:t=!1,groupId:a}=n,r=_(n),[i,c]=(0,s.useState)((()=>function(n){let{defaultValue:e,tabValues:t}=n;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!d({value:e,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${t.map((n=>n.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const s=t.find((n=>n.default))??t[0];if(!s)throw new Error("Unexpected error: 0 tabValues");return s.value}({defaultValue:e,tabValues:r}))),[l,p]=E({queryString:t,groupId:a}),[h,I]=function(n){let{groupId:e}=n;const t=function(n){return n?`docusaurus.tab.${n}`:null}(e),[a,r]=(0,u.Dv)(t);return[a,(0,s.useCallback)((n=>{t&&r.set(n)}),[t,r])]}({groupId:a}),T=(()=>{const n=l??h;return d({value:n,tabValues:r})?n:null})();(0,o.A)((()=>{T&&c(T)}),[T]);return{selectedValue:i,selectValue:(0,s.useCallback)((n=>{if(!d({value:n,tabValues:r}))throw new Error(`Can't select invalid tab value=${n}`);c(n),p(n),I(n)}),[p,I,r]),tabValues:r}}var I=t(9136);const T={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var A=t(74848);function R(n){let{className:e,block:t,selectedValue:s,selectValue:i,tabValues:o}=n;const c=[],{blockElementScrollPositionUntilNextRender:l}=(0,r.a_)(),u=n=>{const e=n.currentTarget,t=c.indexOf(e),a=o[t].value;a!==s&&(l(e),i(a))},p=n=>{let e=null;switch(n.key){case"Enter":u(n);break;case"ArrowRight":{const t=c.indexOf(n.currentTarget)+1;e=c[t]??c[0];break}case"ArrowLeft":{const t=c.indexOf(n.currentTarget)-1;e=c[t]??c[c.length-1];break}}e?.focus()};return(0,A.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.A)("tabs",{"tabs--block":t},e),children:o.map((n=>{let{value:e,label:t,attributes:r}=n;return(0,A.jsx)("li",{role:"tab",tabIndex:s===e?0:-1,"aria-selected":s===e,ref:n=>{c.push(n)},onKeyDown:p,onClick:u,...r,className:(0,a.A)("tabs__item",T.tabItem,r?.className,{"tabs__item--active":s===e}),children:t??e},e)}))})}function S(n){let{lazy:e,children:t,selectedValue:r}=n;const i=(Array.isArray(t)?t:[t]).filter(Boolean);if(e){const n=i.find((n=>n.props.value===r));return n?(0,s.cloneElement)(n,{className:(0,a.A)("margin-top--md",n.props.className)}):null}return(0,A.jsx)("div",{className:"margin-top--md",children:i.map(((n,e)=>(0,s.cloneElement)(n,{key:e,hidden:n.props.value!==r})))})}function D(n){const e=h(n);return(0,A.jsxs)("div",{className:(0,a.A)("tabs-container",T.tabList),children:[(0,A.jsx)(R,{...e,...n}),(0,A.jsx)(S,{...e,...n})]})}function g(n){const e=(0,I.A)();return(0,A.jsx)(D,{...n,children:p(n.children)},String(e))}},79329:(n,e,t)=>{t.d(e,{A:()=>i});t(96540);var s=t(18215);const a={tabItem:"tabItem_Ymn6"};var r=t(74848);function i(n){let{children:e,hidden:t,className:i}=n;return(0,r.jsx)("div",{role:"tabpanel",className:(0,s.A)(a.tabItem,i),hidden:t,children:e})}}}]);
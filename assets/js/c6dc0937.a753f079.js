"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[7056],{47432:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>w,contentTitle:()=>C,default:()=>D,frontMatter:()=>S,metadata:()=>a,toc:()=>R});const a=JSON.parse('{"id":"resources/api-overview/pagination","title":"Pagination","description":"Learn how to paginate your GET or POST requests","source":"@site/docs/resources/api-overview/pagination.md","sourceDirName":"resources/api-overview","slug":"/resources/api-overview/pagination","permalink":"/resources/api-overview/pagination","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":9,"frontMatter":{"description":"Learn how to paginate your GET or POST requests","sidebar_position":9},"sidebar":"tutorialSidebar","previous":{"title":"Status Codes","permalink":"/resources/api-overview/status-codes"},"next":{"title":"Platform Overview","permalink":"/resources/platform/"}}');var s=t(74848),r=t(28453),i=t(65537),o=t(79329),c=t(58069);const l="################################################################\n# In this section, we set the user authentication and app ID.\n# Change these strings to run your own example.\n#################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID) # The userDataObject is required when using a PAT\n\nlist_inputs_response = stub.ListInputs(\n    service_pb2.ListInputsRequest(\n        user_app_id=userDataObject,\n        page=2, \n        per_page=20\n    ),\n    metadata=metadata\n)\n\nif list_inputs_response.status.code != status_code_pb2.SUCCESS:\n    print(list_inputs_response.status)\n    raise Exception(\"List inputs failed, status: \" + list_inputs_response.status.description)\n\nprint(list_inputs_response)",p='//index.js file\n\n////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication and app ID.\n// Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.ListInputs(\n    {\n        user_app_id: {\n            user_id: USER_ID,\n            app_id: APP_ID\n        },\n        page: 2,\n        per_page: 20\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("List inputs failed, status: " + response.status.description);\n        }\n\n        console.log(response);\n        \n    }\n);\n',u='package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    ////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication and app ID.\n    // Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\t\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiInputResponse listInputsResponse = stub.listInputs(\n            ListInputsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .setPage(2)\n            .setPerPage(20)\n            .build()\n        );\n\n        if (listInputsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("List inputs failed, status: " + listInputsResponse.getStatus());\n        }\n       \n        System.out.println(listInputsResponse.getInputsList());\n        \n    }\n\n}',h='curl -X GET "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/inputs?page=2&per_page=20" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  ',d="\x3c!--index.html file--\x3e\n\n<script>\n    //////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication and app ID. \n    // Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////\n  \n    const USER_ID = 'YOUR_USER_ID_HERE';\n    // Your PAT (Personal Access Token) can be found in the Account's Security section\n    const PAT = 'YOUR_PAT_HERE';\n    const APP_ID = 'YOUR_APP_ID_HERE';\n  \n    ///////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ////////////////////////////////////////////////////////////////////////////\n  \n    const requestOptions = {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + PAT\n      }\n    };\n  \n    fetch(`https://api.clarifai.com/v2/users/${USER_ID}/apps/${APP_ID}/inputs?page=2&per_page=20`, requestOptions)\n      .then(response => response.text())\n      .then(result => console.log(result))\n      .catch(error => console.log('error', error));\n  \n  <\/script>",_='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n//////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication and app ID. \n// Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\ListInputsRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->ListInputs(\n        // The request object carries the request along with the request status and other metadata related to the request itself\n        new ListInputsRequest([\n            "user_app_id" => $userDataObject,\n            "page" => 2,\n            "per_page" => 20\n        ]),\n        $metadata\n    )->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\nprint $response->serializeToJsonString();\n\n?>',g="################################################################################\n# In this section, we set the user authentication, app ID, and the concept we  \n# we want to filter by. Change these strings to run your own example.\n################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change this to filter by your own concept\nCONCEPT_ID = 'people'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID) # The userDataObject is required when using a PAT\n\npost_annotations_searches_response = stub.PostAnnotationsSearches(\n    service_pb2.PostAnnotationsSearchesRequest(\n        user_app_id=userDataObject,  \n        searches = [\n            resources_pb2.Search(\n                query=resources_pb2.Query(\n                    filters=[\n                        resources_pb2.Filter(\n                            annotation=resources_pb2.Annotation(\n                                data=resources_pb2.Data(\n                                    concepts=[  # You can search by multiple concepts\n                                        resources_pb2.Concept(\n                                            id=CONCEPT_ID,  # You could search by concept Name as well\n                                            value=1  # Value of 0 will search for images that don't have the concept\n                                        )\n                                    ]\n                                )\n                            )\n                        )\n                    ]\n                )\n            )\n        ],\n        pagination=service_pb2.Pagination(page=2, per_page=20)\n    ),\n    metadata=metadata\n)\n\nif post_annotations_searches_response.status.code != status_code_pb2.SUCCESS:\n    raise Exception(\"Post searches failed, status: \" + post_annotations_searches_response.status.description)\n\nprint(post_annotations_searches_response)\n",f="//index.js file\n\n///////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the concept we  \n// we want to filter by. Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = 'YOUR_USER_ID_HERE';\n// Your PAT (Personal Access Token) can be found in the Account's Security section\nconst PAT = 'YOUR_PAT_HERE';\nconst APP_ID = 'YOUR_APP_ID_HERE';\n// Change this to filter by your own concept\nconst CONCEPT_ID = 'people';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require(\"clarifai-nodejs-grpc\");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set(\"authorization\", \"Key \" + PAT);\n\nstub.PostAnnotationsSearches(\n    {\n\n        user_app_id: {  \n            user_id: USER_ID,          \n            app_id: APP_ID\n        },\n        searches: [\n            {\n                query: {\n                    filters: [\n                        {\n                            annotation: {\n                                data: {\n                                    concepts: [  // You can search by multiple concepts\n                                        {\n                                            id: CONCEPT_ID,  // You could search by concept Name as well\n                                            value: 1  // Value of 0 will search for images that don't have the concept\n                                        }\n                                    ]\n                                }\n                            }\n                        }\n                    ]\n                }\n            }\n        ],\n        pagination: {\n            page: 2,\n            per_page: 20,\n          },\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error(\"Post annotations searches failed, status: \" + response.status.description);\n        }\n\n        console.log(response);\n\n    }\n);",A='package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the concept we  \n    // we want to filter by. Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change this to filter by your own concept\n    static final String CONCEPT_ID = "people";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiSearchResponse postAnnotationsSearchesResponse = stub.postAnnotationsSearches(\n            PostAnnotationsSearchesRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .addSearches(\n                Search.newBuilder().setQuery(\n                    Query.newBuilder().addFilters(\n                        Filter.newBuilder().setAnnotation(\n                            Annotation.newBuilder().setData(\n                                Data.newBuilder().addConcepts( // You can search by multiple concepts\n                                    Concept.newBuilder()\n                                    .setId(CONCEPT_ID) // You could search by concept Name as well\n                                    .setValue(1f) // Value of 0 will search for images that don\'t have the concept\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n            .setPagination(Pagination.newBuilder().setPage(2).setPerPage(20))\n            .build()\n        );\n\n        if (postAnnotationsSearchesResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post annotations searches failed, status: " + postAnnotationsSearchesResponse.getStatus());\n        }\n\n        System.out.println(postAnnotationsSearchesResponse);\n\n    }\n\n}',E='curl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/annotations/searches" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "searches": [{\n      "query": {\n        "filters": [\n          {\n            "annotation": {\n              "data": {\n                "concepts": [\n                  {\n                    "id":"people",\n                    "value": 1\n                  }\n                ]\n              }\n            }\n          }\n        ]\n      }\n    }],\n    "pagination": {\n        "page": 2,\n        "per_page": 20\n      }\n  }\'',I='\x3c!--index.html file--\x3e\n\n<script>\n    ///////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the concept we  \n    // we want to filter by. Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = \'YOUR_USER_ID_HERE\';\n    // Your PAT (Personal Access Token) can be found in the Account\'s Security section\n    const PAT = \'YOUR_PAT_HERE\';\n    const APP_ID = \'YOUR_APP_ID_HERE\';\n    // Change this to filter by your own concept\n    const CONCEPT_ID = \'people\';\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        "user_app_id": {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        "searches": [{\n            "query": {\n                "filters": [\n                    {\n                        "annotation": {\n                            "data": {\n                                "concepts": [\n                                    {\n                                        "id": CONCEPT_ID,\n                                        "value": 1\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            }\n        }],\n        "pagination": {\n            "page": 2,\n            "per_page": 20\n      }\n    });\n\n    const requestOptions = {\n        method: \'POST\',\n        headers: {\n            \'Accept\': \'application/json\',\n            \'Authorization\': \'Key \' + PAT\n        },\n        body: raw\n    };\n\n    fetch(`https://api.clarifai.com/v2/annotations/searches`, requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log(\'error\', error));\n\n<\/script>',P='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the concept we  \n// we want to filter by. Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change this to filter by your own concept\n$CONCEPT_ID = "people";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\PostAnnotationsSearchesRequest;\nuse Clarifai\\Api\\Annotation;\nuse Clarifai\\Api\\Concept;\nuse Clarifai\\Api\\Data;\nuse Clarifai\\Api\\Filter;\nuse Clarifai\\Api\\Query;\nuse Clarifai\\Api\\Search;\nuse Clarifai\\Api\\Pagination;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PostAnnotationsSearches(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new PostAnnotationsSearchesRequest([\n        "user_app_id" => $userDataObject,\n        "searches" => [\n            new Search([\n                "query" => new Query([\n                    "filters" => [\n                        new Filter([\n                            "annotation" => new Annotation([\n                                "data" => new Data([\n                                    "concepts" => [  # You can search by multiple concepts\n                                        new Concept([\n                                            "id" => $CONCEPT_ID, # You could search by concept id as well\n                                            "value" => 1 # Value of 0 will search for images that don\'t have the concept\n                                        ])\n                                    ]\n                                ])\n                            ])                            \n                        ])\n                    ]\n                ])\n            ])\n        ],\n        "pagination" => new Pagination([\n            "page" => 2,\n            "per_page" => 20\n        ])\n\n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\nprint $response->serializeToJsonString();\n\n?>',m='from clarifai.client.user import User\n\n# Create the input object\ninput_obj = User(user_id="user_id").app(app_id="test_app", pat="YOUR_PAT").inputs()\n# list the inputs with pagination\nall_inputs = list(input_obj.list_inputs(page_no=1,per_page=3))\nprint(all_inputs)',b='import { Input, Search, User } from "clarifai-nodejs";\n\n\nconst appId = "test_app"; // Placeholder for application ID\n\n// Initialize a User object with your credentials\nconst client = new User({\n  userId: process.env.CLARIFAI_USER_ID,\n  pat: process.env.CLARIFAI_PAT,\n  appId,\n});\n\n// Create an application with the specified app ID and base workflow\nawait client.createApp({ appId, baseWorkflow: "Universal" });\n\n// URLs of images to be uploaded\nconst urls = [\n  "https://images.pexels.com/photos/139257/pexels-photo-139257.jpeg",\n  "https://images.pexels.com/photos/1879386/pexels-photo-1879386.jpeg",\n  "https://images.pexels.com/photos/1071882/pexels-photo-1071882.jpeg",\n];\n\n// Initialize an Input object to manage input data\nconst input = new Input({\n  authConfig: {\n    userId: process.env.CLARIFAI_USER_ID,\n    pat: process.env.CLARIFAI_PAT,\n    appId,\n  },\n});\n\n// Upload each image from the provided URLs\nfor (let i = 0; i < urls.length; i++) {\n  await input.uploadFromUrl({ inputId: `input${i}`, imageUrl: urls[i] });\n}\n\n// Initialize a search object for the created application, top-K not set for pagination\nconst search = new Search({\n  authConfig: {\n    userId: process.env.CLARIFAI_USER_ID,\n    pat: process.env.CLARIFAI_PAT,\n    appId,\n  },\n  metric: "euclidean",\n});\n\nconst response = search.query({\n  ranks: [{ textRaw: "Red pineapples on the beach." }],\n  perPage: 2,\n  page: 1,\n});\n\nconst hits = (await response.next()).value?.hitsList ?? [];\nconsole.log(hits);\n',S={description:"Learn how to paginate your GET or POST requests",sidebar_position:9},C="Pagination",w={},R=[{value:"GET Endpoints",id:"get-endpoints",level:2},{value:"POST Endpoints",id:"post-endpoints",level:2}];function T(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"pagination",children:"Pagination"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Learn how to paginate your GET or POST requests"})}),"\n",(0,s.jsx)("hr",{}),"\n",(0,s.jsx)(n.p,{children:"Many of our API endpoints support pagination, a crucial feature when handling large outputs. It helps manage and display results efficiently by breaking them into smaller, manageable batches."}),"\n",(0,s.jsxs)(n.p,{children:["You can provide ",(0,s.jsx)(n.code,{children:"page"})," and ",(0,s.jsx)(n.code,{children:"per_page"})," params to the API request, and your results will be split into pages."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"page"})," \u2014 Indicates the page number\u2060; defaults to 1."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"per_page"})," \u2014 Indicates the number of results that will be contained in each page; defaults to 128. You can get up to 1,000 results per page."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Creating a pagination request may vary depending on whether you're working with a GET or a POST endpoint."}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["Before using the ",(0,s.jsx)(n.a,{href:"https://docs.clarifai.com/additional-resources/api-overview/python-sdk",children:"Python SDK"}),", ",(0,s.jsx)(n.a,{href:"https://docs.clarifai.com/additional-resources/api-overview/nodejs-sdk",children:"Node.js SDK"}),", or any of our ",(0,s.jsx)(n.a,{href:"https://docs.clarifai.com/additional-resources/api-overview/grpc-clients",children:"gRPC clients"}),", ensure they are properly installed on your machine. Refer to their respective installation guides for instructions on how to install and initialize them."]})}),"\n","\n","\n","\n","\n",(0,s.jsx)(n.h2,{id:"get-endpoints",children:"GET Endpoints"}),"\n",(0,s.jsx)(n.p,{children:"For GET requests, the pagination parameters are included in the query string of the URL."}),"\n",(0,s.jsxs)(i.A,{groupId:"code",children:[(0,s.jsx)(o.A,{value:"python",label:"Python SDK",children:(0,s.jsx)(c.A,{className:"language-python",children:m})}),(0,s.jsx)(o.A,{value:"typescript",label:"Node.js SDK",children:(0,s.jsx)(c.A,{className:"language-typescript",children:b})}),(0,s.jsx)(o.A,{value:"python2",label:"Python (gRPC)",children:(0,s.jsx)(c.A,{className:"language-python",children:l})}),(0,s.jsx)(o.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:d})}),(0,s.jsx)(o.A,{value:"nodejs",label:"NodeJS (gRPC)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:p})}),(0,s.jsx)(o.A,{value:"java",label:"Java (gRPC)",children:(0,s.jsx)(c.A,{className:"language-java",children:u})}),(0,s.jsx)(o.A,{value:"php",label:"PHP (gRPC)",children:(0,s.jsx)(c.A,{className:"language-php",children:_})}),(0,s.jsx)(o.A,{value:"curl",label:"cURL",children:(0,s.jsx)(c.A,{className:"language-bash",children:h})})]}),"\n",(0,s.jsx)(n.h2,{id:"post-endpoints",children:"POST Endpoints"}),"\n",(0,s.jsx)(n.p,{children:"For POST requests, the pagination parameters are included in the request body."}),"\n",(0,s.jsxs)(i.A,{groupId:"code",children:[(0,s.jsx)(o.A,{value:"python",label:"Python (gRPC)",children:(0,s.jsx)(c.A,{className:"language-python",children:g})}),(0,s.jsx)(o.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:I})}),(0,s.jsx)(o.A,{value:"nodejs",label:"NodeJS (gRPC)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:f})}),(0,s.jsx)(o.A,{value:"java",label:"Java (gRPC)",children:(0,s.jsx)(c.A,{className:"language-java",children:A})}),(0,s.jsx)(o.A,{value:"php",label:"PHP (gRPC)",children:(0,s.jsx)(c.A,{className:"language-php",children:P})}),(0,s.jsx)(o.A,{value:"curl",label:"cURL",children:(0,s.jsx)(c.A,{className:"language-bash",children:E})})]})]})}function D(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(T,{...e})}):T(e)}},65537:(e,n,t)=>{t.d(n,{A:()=>b});var a=t(96540),s=t(18215),r=t(65627),i=t(56347),o=t(50372),c=t(30604),l=t(11861),p=t(78749);function u(e){return a.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:n,children:t}=e;return(0,a.useMemo)((()=>{const e=n??function(e){return u(e).map((e=>{let{props:{value:n,label:t,attributes:a,default:s}}=e;return{value:n,label:t,attributes:a,default:s}}))}(t);return function(e){const n=(0,l.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function d(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function _(e){let{queryString:n=!1,groupId:t}=e;const s=(0,i.W6)(),r=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,c.aZ)(r),(0,a.useCallback)((e=>{if(!r)return;const n=new URLSearchParams(s.location.search);n.set(r,e),s.replace({...s.location,search:n.toString()})}),[r,s])]}function g(e){const{defaultValue:n,queryString:t=!1,groupId:s}=e,r=h(e),[i,c]=(0,a.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!d({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const a=t.find((e=>e.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:r}))),[l,u]=_({queryString:t,groupId:s}),[g,f]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[s,r]=(0,p.Dv)(t);return[s,(0,a.useCallback)((e=>{t&&r.set(e)}),[t,r])]}({groupId:s}),A=(()=>{const e=l??g;return d({value:e,tabValues:r})?e:null})();(0,o.A)((()=>{A&&c(A)}),[A]);return{selectedValue:i,selectValue:(0,a.useCallback)((e=>{if(!d({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);c(e),u(e),f(e)}),[u,f,r]),tabValues:r}}var f=t(9136);const A={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var E=t(74848);function I(e){let{className:n,block:t,selectedValue:a,selectValue:i,tabValues:o}=e;const c=[],{blockElementScrollPositionUntilNextRender:l}=(0,r.a_)(),p=e=>{const n=e.currentTarget,t=c.indexOf(n),s=o[t].value;s!==a&&(l(n),i(s))},u=e=>{let n=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const t=c.indexOf(e.currentTarget)+1;n=c[t]??c[0];break}case"ArrowLeft":{const t=c.indexOf(e.currentTarget)-1;n=c[t]??c[c.length-1];break}}n?.focus()};return(0,E.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":t},n),children:o.map((e=>{let{value:n,label:t,attributes:r}=e;return(0,E.jsx)("li",{role:"tab",tabIndex:a===n?0:-1,"aria-selected":a===n,ref:e=>{c.push(e)},onKeyDown:u,onClick:p,...r,className:(0,s.A)("tabs__item",A.tabItem,r?.className,{"tabs__item--active":a===n}),children:t??n},n)}))})}function P(e){let{lazy:n,children:t,selectedValue:r}=e;const i=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=i.find((e=>e.props.value===r));return e?(0,a.cloneElement)(e,{className:(0,s.A)("margin-top--md",e.props.className)}):null}return(0,E.jsx)("div",{className:"margin-top--md",children:i.map(((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==r})))})}function m(e){const n=g(e);return(0,E.jsxs)("div",{className:(0,s.A)("tabs-container",A.tabList),children:[(0,E.jsx)(I,{...n,...e}),(0,E.jsx)(P,{...n,...e})]})}function b(e){const n=(0,f.A)();return(0,E.jsx)(m,{...e,children:u(e.children)},String(n))}},79329:(e,n,t)=>{t.d(n,{A:()=>i});t(96540);var a=t(18215);const s={tabItem:"tabItem_Ymn6"};var r=t(74848);function i(e){let{children:n,hidden:t,className:i}=e;return(0,r.jsx)("div",{role:"tabpanel",className:(0,a.A)(s.tabItem,i),hidden:t,children:n})}}}]);
"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[7092],{3905:function(n,e,t){t.d(e,{Zo:function(){return u},kt:function(){return h}});var a=t(7294);function o(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function s(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,a)}return t}function r(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?s(Object(t),!0).forEach((function(e){o(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function i(n,e){if(null==n)return{};var t,a,o=function(n,e){if(null==n)return{};var t,a,o={},s=Object.keys(n);for(a=0;a<s.length;a++)t=s[a],e.indexOf(t)>=0||(o[t]=n[t]);return o}(n,e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(n);for(a=0;a<s.length;a++)t=s[a],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(o[t]=n[t])}return o}var p=a.createContext({}),c=function(n){var e=a.useContext(p),t=e;return n&&(t="function"==typeof n?n(e):r(r({},e),n)),t},u=function(n){var e=c(n.components);return a.createElement(p.Provider,{value:e},n.children)},l={inlineCode:"code",wrapper:function(n){var e=n.children;return a.createElement(a.Fragment,{},e)}},d=a.forwardRef((function(n,e){var t=n.components,o=n.mdxType,s=n.originalType,p=n.parentName,u=i(n,["components","mdxType","originalType","parentName"]),d=c(t),h=o,m=d["".concat(p,".").concat(h)]||d[h]||l[h]||s;return t?a.createElement(m,r(r({ref:e},u),{},{components:t})):a.createElement(m,r({ref:e},u))}));function h(n,e){var t=arguments,o=e&&e.mdxType;if("string"==typeof n||o){var s=t.length,r=new Array(s);r[0]=d;var i={};for(var p in e)hasOwnProperty.call(e,p)&&(i[p]=e[p]);i.originalType=n,i.mdxType="string"==typeof n?n:o,r[1]=i;for(var c=2;c<s;c++)r[c]=t[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},8215:function(n,e,t){var a=t(7294);e.Z=function(n){var e=n.children,t=n.hidden,o=n.className;return a.createElement("div",{role:"tabpanel",hidden:t,className:o},e)}},6396:function(n,e,t){t.d(e,{Z:function(){return d}});var a=t(7462),o=t(7294),s=t(2389),r=t(9443);var i=function(){var n=(0,o.useContext)(r.Z);if(null==n)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return n},p=t(3616),c=t(6010),u="tabItem_vU9c";function l(n){var e,t,s,r=n.lazy,l=n.block,d=n.defaultValue,h=n.values,m=n.groupId,f=n.className,g=o.Children.map(n.children,(function(n){if((0,o.isValidElement)(n)&&void 0!==n.props.value)return n;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof n.type?n.type:n.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),_=null!=h?h:g.map((function(n){var e=n.props;return{value:e.value,label:e.label,attributes:e.attributes}})),b=(0,p.lx)(_,(function(n,e){return n.value===e.value}));if(b.length>0)throw new Error('Docusaurus error: Duplicate values "'+b.map((function(n){return n.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var y=null===d?d:null!=(e=null!=d?d:null==(t=g.find((function(n){return n.props.default})))?void 0:t.props.value)?e:null==(s=g[0])?void 0:s.props.value;if(null!==y&&!_.some((function(n){return n.value===y})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+y+'" but none of its children has the corresponding value. Available values are: '+_.map((function(n){return n.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var S=i(),v=S.tabGroupChoices,w=S.setTabGroupChoices,k=(0,o.useState)(y),T=k[0],A=k[1],N=[],I=(0,p.o5)().blockElementScrollPositionUntilNextRender;if(null!=m){var P=v[m];null!=P&&P!==T&&_.some((function(n){return n.value===P}))&&A(P)}var R=function(n){var e=n.currentTarget,t=N.indexOf(e),a=_[t].value;a!==T&&(I(e),A(a),null!=m&&w(m,a))},O=function(n){var e,t=null;switch(n.key){case"ArrowRight":var a=N.indexOf(n.currentTarget)+1;t=N[a]||N[0];break;case"ArrowLeft":var o=N.indexOf(n.currentTarget)-1;t=N[o]||N[N.length-1]}null==(e=t)||e.focus()};return o.createElement("div",{className:"tabs-container"},o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,c.Z)("tabs",{"tabs--block":l},f)},_.map((function(n){var e=n.value,t=n.label,s=n.attributes;return o.createElement("li",(0,a.Z)({role:"tab",tabIndex:T===e?0:-1,"aria-selected":T===e,key:e,ref:function(n){return N.push(n)},onKeyDown:O,onFocus:R,onClick:R},s,{className:(0,c.Z)("tabs__item",u,null==s?void 0:s.className,{"tabs__item--active":T===e})}),null!=t?t:e)}))),r?(0,o.cloneElement)(g.filter((function(n){return n.props.value===T}))[0],{className:"margin-vert--md"}):o.createElement("div",{className:"margin-vert--md"},g.map((function(n,e){return(0,o.cloneElement)(n,{key:e,hidden:n.props.value!==T})}))))}function d(n){var e=(0,s.Z)();return o.createElement(l,(0,a.Z)({key:String(e)},n))}},7733:function(n,e,t){t.r(e),t.d(e,{frontMatter:function(){return c},contentTitle:function(){return u},metadata:function(){return l},toc:function(){return d},default:function(){return m}});var a=t(7462),o=t(3366),s=(t(7294),t(3905)),r=t(6396),i=t(8215),p=["components"],c={description:"Select a subset of your data based on useful filters.",sidebar_position:3},u="Filter",l={unversionedId:"api-guide/search/filter",id:"api-guide/search/filter",title:"Filter",description:"Select a subset of your data based on useful filters.",source:"@site/docs/api-guide/search/filter.md",sourceDirName:"api-guide/search",slug:"/api-guide/search/filter",permalink:"/api-guide/search/filter",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/api-guide/search/filter.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{description:"Select a subset of your data based on useful filters.",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Combine or Negate",permalink:"/api-guide/search/combine-or-negate"},next:{title:"Rank",permalink:"/api-guide/search/rank"}},d=[{value:"By Custom Concepts",id:"by-custom-concepts",children:[],level:2},{value:"By User ID",id:"by-user-id",children:[],level:2},{value:"By Annotation Status",id:"by-annotation-status",children:[],level:2},{value:"By Geo Location",id:"by-geo-location",children:[{value:"Add inputs with longitude and latitude points",id:"add-inputs-with-longitude-and-latitude-points",children:[],level:3},{value:"Perform a search with one geo point and radius in kilometers",id:"perform-a-search-with-one-geo-point-and-radius-in-kilometers",children:[],level:3},{value:"Perform a search with two geo points",id:"perform-a-search-with-two-geo-points",children:[],level:3}],level:2},{value:"By Custom Annotation Info",id:"by-custom-annotation-info",children:[],level:2},{value:"By Annotation Info",id:"by-annotation-info",children:[],level:2}],h={toc:d};function m(n){var e=n.components,t=(0,o.Z)(n,p);return(0,s.kt)("wrapper",(0,a.Z)({},h,t,{components:e,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"filter"},"Filter"),(0,s.kt)("p",null,"You can filter and customize your search results to find exactly what you want. Filtering helps you reduce the amount of data returned in search results by removing irrelevant content, or by allowing you to select a specific subset of your data."),(0,s.kt)("h2",{id:"by-custom-concepts"},"By Custom Concepts"),(0,s.kt)("p",null,"After you ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/Clarifai/docs/tree/1c1d25cdd43190c38a2edb313297c0d566b3a0e3/api-guide/search/data-management/annotations.md#annotate-images-with-concepts"},"annotate inputs with custom concepts"),", you can filter by concepts."),(0,s.kt)(r.Z,{mdxType:"Tabs"},(0,s.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview\n\nMultiSearchResponse postAnnotationsSearchesResponse = stub.postAnnotationsSearches(\n    PostAnnotationsSearchesRequest.newBuilder().addSearches(\n        Search.newBuilder().setQuery(\n            Query.newBuilder().addFilters(\n                Filter.newBuilder().setAnnotation(\n                    Annotation.newBuilder().setData(\n                            Data.newBuilder().addConcepts(  // You can search by multiple concepts.\n                            Concept.newBuilder()\n                                .setId("people")  // You could search by concept Name as well.\n                                .setValue(1f)  // Value of 0 will search for images that don\'t have the concept.\n                        )\n                    )\n                )\n            )\n        )    \n    )\n    .build()\n);\n\nif (postAnnotationsSearchesResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n  throw new RuntimeException("Post annotations searches failed, status: " + postAnnotationsSearchesResponse.getStatus());\n}\n\nSystem.out.println("Found inputs " + postAnnotationsSearchesResponse.getHitsCount() + ":");\nfor (Hit hit : postAnnotationsSearchesResponse.getHitsList()) {\n    System.out.printf("\\tScore %.2f for annotation % of input %s\\n", hit.getScore(), hit.getAnnotation().getId(), hit.getInput().getId())\n}\n'))),(0,s.kt)(i.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview\n\nstub.PostAnnotationsSearches(\n    {\n        searches: [\n            {\n                query: {\n                    filters: [\n                        {\n                            annotation: {\n                                data: {\n                                    concepts: [  // You can search by multiple concepts.\n                                        {\n                                            id: "people",  // You could search by concept Name as well.\n                                            value: 1  // Value of 0 will search for images that don\'t have the concept\n                                        }\n                                    ]\n                                }\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post annotations searches failed, status: " + response.status.description);\n        }\n\n        console.log("Search result:");\n        for (const hit of response.hits) {\n            console.log("\\tScore " + hit.score + " for annotation: " + hit.annotation.id + " of input: ", hit.input.id);\n        }\n    }\n);\n'))),(0,s.kt)(i.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'from clarifai_grpc.grpc.api import service_pb2, resources_pb2\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\n# Insert here the initialization code as outlined on this page:\n# https://docs.clarifai.com/api-guide/api-overview\n\npost_annotations_searches_response = stub.PostAnnotationsSearches(\n    service_pb2.PostAnnotationsSearchesRequest(\n        searches = [\n            resources_pb2.Search(\n                query=resources_pb2.Query(\n                    filters=[\n                        resources_pb2.Filter(\n                            annotation=resources_pb2.Annotation(\n                                data=resources_pb2.Data(\n                                    concepts=[  # You can search by multiple concepts.\n                                        resources_pb2.Concept(\n                                            id="people",  # You could search by concept Name as well.\n                                            value=1  # Value of 0 will search for images that don\'t have the concept.\n                                        )\n                                    ]\n                                )\n                            )\n                        )\n                    ]\n                )\n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif post_annotations_searches_response.status.code != status_code_pb2.SUCCESS:\n    raise Exception("Post searches failed, status: " + post_annotations_searches_response.status.description)\n\nprint("Search result:")\nfor hit in post_annotations_searches_response.hits:\n    print("\\tScore %.2f for annotation: %s off input: %s" % (hit.score, hit.annotation.id, hit.input.id))\n'))),(0,s.kt)(i.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'#\n# Value of 0 will search for images that don\'t have the concept.\n#\n# Instead of "id" you can search by "name" as well.\n\ncurl -X POST \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'\n  {\n    "searches": [{\n      "query": {\n        "filters": [\n          {\n            "annotation": {\n              "data": {\n                "concepts": [\n                  {\n                    "id":"people",\n                    "value": 1\n                  }\n                ]\n              }\n            }\n          }\n        ]\n      }\n    }]\n\n  }\'\\\n  https://api.clarifai.com/v2/annnotations/searches\n'))),(0,s.kt)(i.Z,{value:"js_rest",label:"Javascript (REST)",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},'const raw = JSON.stringify({\n  "user_app_id": {\n        "user_id": "{YOUR_USER_ID}",\n        "app_id": "{YOUR_APP_ID}"\n    },\n  "searches": [{\n    "query": {\n      "filters": [\n        {\n          "annotation": {\n            "data": {\n              "concepts": [\n                {\n                  "id":"people",\n                  "value": 1\n                }\n              ]\n            }\n          }\n        }\n      ]\n    }\n  }]\n});\n\nconst requestOptions = {\n  method: \'POST\',\n  headers: {\n    \'Accept\': \'application/json\',\n    \'Authorization\': \'Key {YOUR_PERSONAL_TOKEN}\'\n  },\n    body: raw\n};\n\nfetch(`https://api.clarifai.com/v2/annotations/searches`, requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log(\'error\', error));\n')))),(0,s.kt)("h2",{id:"by-user-id"},"By User ID"),(0,s.kt)("p",null,"If you have collaborators in your app and they helped you annotate your inputs, you can also filter annotations by user id."),(0,s.kt)(r.Z,{mdxType:"Tabs"},(0,s.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview\n\nMultiSearchResponse postAnnotationsSearchesResponse = stub.postAnnotationsSearches(\n    PostAnnotationsSearchesRequest.newBuilder().addSearches(\n        Search.newBuilder().setQuery(\n            Query.newBuilder().addFilters(\n                Filter.newBuilder().setAnnotation(\n                    Annotation.newBuilder().setUserId("{user_id}")\n                )\n            )\n        )    \n    )\n    .build()\n);\n\nif (postAnnotationsSearchesResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n  throw new RuntimeException("Post annotations searches failed, status: " + postAnnotationsSearchesResponse.getStatus());\n}\n\nSystem.out.println("Found inputs " + postAnnotationsSearchesResponse.getHitsCount() + ":");\nfor (Hit hit : postAnnotationsSearchesResponse.getHitsList()) {\n    System.out.printf("\\tScore %.2f for annotation % of input %s\\n", hit.getScore(), hit.getAnnotation().getId(), hit.getInput().getId())\n}\n'))),(0,s.kt)(i.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview\n\nstub.PostAnnotationsSearches(\n    {\n        searches: [\n            {\n                query: {\n                    filters: [\n                        {\n                            annotation: {\n                                user_id: "{user_id}"\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post annotations searches failed, status: " + response.status.description);\n        }\n\n        console.log("Search result:");\n        for (const hit of response.hits) {\n            console.log("\\tScore " + hit.score + " for annotation: " + hit.annotation.id + " of input: ", hit.input.id);\n        }\n    }\n);\n'))),(0,s.kt)(i.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'from clarifai_grpc.grpc.api import service_pb2, resources_pb2\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\n# Insert here the initialization code as outlined on this page:\n# https://docs.clarifai.com/api-guide/api-overview\n\npost_annotations_searches_response = stub.PostAnnotationsSearches(\n    service_pb2.PostAnnotationsSearchesRequest(\n        searches = [\n            resources_pb2.Search(\n                query=resources_pb2.Query(\n                    filters=[\n                        resources_pb2.Filter(\n                            annotation=resources_pb2.Annotation(\n                                user_id="{user_id}"\n                            )\n                        )\n                    ]\n                )       \n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif post_annotations_searches_response.status.code != status_code_pb2.SUCCESS:\n    print("There was an error with your request!")\n    print("\\tCode: {}".format(post_annotations_searches_response.outputs[0].status.code))\n    print("\\tDescription: {}".format(post_annotations_searches_response.outputs[0].status.description))\n    print("\\tDetails: {}".format(post_annotations_searches_response.outputs[0].status.details))\n    raise Exception("Post searches failed, status: " + post_annotations_searches_response.status.description)\n\nprint("Search result:")\nfor hit in post_annotations_searches_response.hits:\n    print("\\tScore %.2f for annotation: %s off input: %s" % (hit.score, hit.annotation.id, hit.input.id))\n'))),(0,s.kt)(i.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'#\n# Value of 0 will search for images that don\'t have the concept.\n#\n# Instead of "id" you can search by "name" as well.\n\ncurl -X POST \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'\n  {\n    "searches": [{\n      "query": {\n        "filters": [\n          {\n            "annotation": {\n              "user_id": "{user_id}"\n            }\n          }\n        ]\n      }\n    }]\n  }\'\\\n  https://api.clarifai.com/v2/annnotations/searches\n'))),(0,s.kt)(i.Z,{value:"js_rest",label:"Javascript (REST)",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},'const raw = JSON.stringify({\n  "user_app_id": {\n        "user_id": "{YOUR_USER_ID}",\n        "app_id": "{YOUR_APP_ID}"\n    },\n  "searches": [{\n    "query": {\n      "filters": [\n        {\n          "annotation": {\n            "user_id": "{user_id}"\n          }\n        }\n      ]\n    }\n  }]\n});\n\nconst requestOptions = {\n  method: \'POST\',\n  headers: {\n    \'Accept\': \'application/json\',\n    \'Authorization\': \'Key {YOUR_PERSONAL_TOKEN}\'\n  },\n    body: raw\n};\n\nfetch(`https://api.clarifai.com/v2/annotations/searches`, requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log(\'error\', error));\n')))),(0,s.kt)("h2",{id:"by-annotation-status"},"By Annotation Status"),(0,s.kt)(r.Z,{mdxType:"Tabs"},(0,s.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview\n\nMultiSearchResponse postAnnotationsSearchesResponse = stub.postAnnotationsSearches(\n    PostAnnotationsSearchesRequest.newBuilder().addSearches(\n        Search.newBuilder().setQuery(\n            Query.newBuilder().addFilters(\n                Filter.newBuilder().setAnnotation(\n                    Annotation.newBuilder()\n                    .setStatus(\n                        Status.newBuilder()\n                            .setCodeValue(StatusCode.ANNOTATION_SUCCESS_VALUE)\n                            .build()\n                    )\n                )\n            )\n        )    \n    )\n    .build()\n);\n\nif (postAnnotationsSearchesResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n  throw new RuntimeException("Post annotations searches failed, status: " + postAnnotationsSearchesResponse.getStatus());\n}\n\nSystem.out.println("Found inputs " + postAnnotationsSearchesResponse.getHitsCount() + ":");\nfor (Hit hit : postAnnotationsSearchesResponse.getHitsList()) {\n    System.out.printf("\\tScore %.2f for annotation % of input %s\\n", hit.getScore(), hit.getAnnotation().getId(), hit.getInput().getId())\n}\n'))),(0,s.kt)(i.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview\n\nstub.PostAnnotationsSearches(\n    {\n        searches: [\n            {\n                query: {\n                    filters: [\n                        {\n                            annotation: {\n                                status: {\n                                    code: 24150\n                                }\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post annotations searches failed, status: " + response.status.description);\n        }\n\n        console.log("Search result:");\n        for (const hit of response.hits) {\n            console.log("\\tScore " + hit.score + " for annotation: " + hit.annotation.id + " of input: ", hit.input.id);\n        }\n    }\n);\n'))),(0,s.kt)(i.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'from clarifai_grpc.grpc.api import service_pb2, resources_pb2\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\n# Insert here the initialization code as outlined on this page:\n# https://docs.clarifai.com/api-guide/api-overview\n\npost_annotations_searches_response = stub.PostAnnotationsSearches(\n    service_pb2.PostAnnotationsSearchesRequest(\n        searches = [\n            resources_pb2.Search(\n                query=resources_pb2.Query(\n                    filters=[\n                        resources_pb2.Filter(\n                            annotation=resources_pb2.Annotation(\n                                status=status_pb2.Status(\n                                    code=status_code_pb2.ANNOTATION_SUCCESS\n                                )\n                            )\n                        )\n                    ]\n                )\n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif post_annotations_searches_response.status.code != status_code_pb2.SUCCESS:\n    print("There was an error with your request!")\n    print("\\tCode: {}".format(post_annotations_searches_response.outputs[0].status.code))\n    print("\\tDescription: {}".format(post_annotations_searches_response.outputs[0].status.description))\n    print("\\tDetails: {}".format(post_annotations_searches_response.outputs[0].status.details))\n    raise Exception("Post searches failed, status: " + post_annotations_searches_response.status.description)\n\nprint("Search result:")\nfor hit in post_annotations_searches_response.hits:\n    print("\\tScore %.2f for annotation: %s off input: %s" % (hit.score, hit.annotation.id, hit.input.id))\n'))),(0,s.kt)(i.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'#\n# Value of 0 will search for images that don\'t have the concept.\n#\n# Instead of "id" you can search by "name" as well.\n\ncurl -X POST \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'\n  {\n    "searches": [{\n      "query": {\n        "filters": [\n          {\n            "annotation": {\n              "status": {\n                "code": "ANNOTATION_SUCCESS"\n              }          \n            }\n          }\n        ]\n      }\n    }]\n  }\'\\\n  https://api.clarifai.com/v2/annnotations/searches\n'))),(0,s.kt)(i.Z,{value:"js_rest",label:"Javascript (REST)",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},'const raw = JSON.stringify({\n  "user_app_id": {\n        "user_id": "{YOUR_USER_ID}",\n        "app_id": "{YOUR_APP_ID}"\n    },\n  "searches": [{\n    "query": {\n      "filters": [\n        {\n          "annotation": {\n            "status": {\n              "code": "ANNOTATION_SUCCESS"\n            }          \n          }\n        }\n      ]\n    }\n  }]\n});\n\nconst requestOptions = {\n  method: \'POST\',\n  headers: {\n    \'Accept\': \'application/json\',\n    \'Authorization\': \'Key {YOUR_PERSONAL_TOKEN}\'\n  },\n    body: raw\n};\n\nfetch(`https://api.clarifai.com/v2/annotations/searches`, requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log(\'error\', error));\n')))),(0,s.kt)("h2",{id:"by-geo-location"},"By Geo Location"),(0,s.kt)("p",null,"Search by geo location allows you to restrict your search results to a bounding box based on longitude and latitude points. There are two ways you can provide longitude/latitude points. You can provide one point and a radius or you can provide two points."),(0,s.kt)("p",null,"It is important to note that a search by geo location acts as a filter and returns results ranked by any other provided search criteria, whether that is a visual search, concept search or something else. If no other criteria is provided, results will return in the order the inputs were created, NOT by their distance to center of the search area."),(0,s.kt)("p",null,'If you are providing one point and a radius, the radius can be in "mile", "kilometer", "degree", or "radian", marked by keywords ',(0,s.kt)("inlineCode",{parentName:"p"},"withinMiles"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"withinKilometers"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"withinDegrees"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"withinRadians"),"."),(0,s.kt)("p",null,"If you are providing two points, a box will be drawn from the uppermost point to the lowermost point and the leftmost point to the rightmost point."),(0,s.kt)("p",null,"Before you perform a search by geo location, make sure you have added inputs with longitude and latitude points."),(0,s.kt)("h3",{id:"add-inputs-with-longitude-and-latitude-points"},"Add inputs with longitude and latitude points"),(0,s.kt)("p",null,"Provide a geo point to an input. The geo point is a JSON object consisting of a longitude and a latitude in GPS coordinate system ","(","SRID 4326",")",". There can be at most one single geo point associated with each input."),(0,s.kt)(r.Z,{mdxType:"Tabs"},(0,s.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview\n\nMultiInputResponse postInputsResponse = stub.postInputs(\n    PostInputsRequest.newBuilder().addInputs(\n        Input.newBuilder().setData(\n            Data.newBuilder()\n                .setImage(\n                    Image.newBuilder()\n                        .setUrl("https://samples.clarifai.com/dog.tiff")\n                        .setAllowDuplicateUrl(true)\n                )\n                .setGeo(\n                    Geo.newBuilder().setGeoPoint(\n                        GeoPoint.newBuilder()\n                            .setLongitude(-30)\n                            .setLatitude(40)\n                    )\n                )\n        )\n    ).build()\n);\n\nif (postInputsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n    throw new RuntimeException("Post inputs failed, status: " + postInputsResponse.getStatus());\n}\n'))),(0,s.kt)(i.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview\n\nstub.PostInputs(\n    {\n        inputs: [\n            {\n                data: {\n                    image: {url: "https://samples.clarifai.com/dog.tiff", allow_duplicate_url: true},\n                    geo: {\n                        geo_point: {\n                            longitude: -30,\n                            latitude: 40\n                        }\n                    }\n                }\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post inputs failed, status: " + response.status.description);\n        }\n    }\n);\n'))),(0,s.kt)(i.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'from clarifai_grpc.grpc.api import service_pb2, resources_pb2\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\n# Insert here the initialization code as outlined on this page:\n# https://docs.clarifai.com/api-guide/api-overview\n\npost_inputs_response = stub.PostInputs(\n    service_pb2.PostInputsRequest(\n        inputs=[\n            resources_pb2.Input(\n                data=resources_pb2.Data(\n                    image=resources_pb2.Image(\n                        url="https://samples.clarifai.com/dog.tiff",\n                        allow_duplicate_url=True\n                    ),\n                    geo=resources_pb2.Geo(\n                        geo_point=resources_pb2.GeoPoint(\n                            longitude=-30.0,\n                            latitude=40.0,\n                        )\n                    )\n                )\n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif post_inputs_response.status.code != status_code_pb2.SUCCESS:\n    print("There was an error with your request!")\n    print("\\tCode: {}".format(post_inputs_response.outputs[0].status.code))\n    print("\\tDescription: {}".format(post_inputs_response.outputs[0].status.description))\n    print("\\tDetails: {}".format(post_inputs_response.outputs[0].status.details))\n    raise Exception("Post inputs failed, status: " + post_inputs_response.status.description)\n'))),(0,s.kt)(i.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'\n  {\n    "inputs": [\n      {\n        "data": {\n          "image": {\n            "url": "https://samples.clarifai.com/dog.tiff",\n            "allow_duplicate_url": true\n          },\n          "geo": {\n            "geo_point": {\n              "longitude": -30,\n              "latitude": 40\n            }\n          }\n        }\n      }\n    ]\n  }\'\\\n  https://api.clarifai.com/v2/inputs\n'))),(0,s.kt)(i.Z,{value:"js_rest",label:"Javascript (REST)",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},'const raw = JSON.stringify({\n  "user_app_id": {\n        "user_id": "{YOUR_USER_ID}",\n        "app_id": "{YOUR_APP_ID}"\n    },\n  "inputs": [\n    {\n      "data": {\n        "image": {\n          "url": "https://samples.clarifai.com/dog.tiff",\n          "allow_duplicate_url": true\n        },\n        "geo": {\n          "geo_point": {\n            "longitude": -30,\n            "latitude": 40\n          }\n        }\n      }\n    }\n  ]\n});\n\nconst requestOptions = {\n  method: \'POST\',\n  headers: {\n    \'Accept\': \'application/json\',\n    \'Authorization\': \'Key {YOUR_PERSONAL_TOKEN}\'\n  },\n    body: raw\n};\n\nfetch(`https://api.clarifai.com/v2/inputs`, requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log(\'error\', error));\n')))),(0,s.kt)("h3",{id:"perform-a-search-with-one-geo-point-and-radius-in-kilometers"},"Perform a search with one geo point and radius in kilometers"),(0,s.kt)(r.Z,{mdxType:"Tabs"},(0,s.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview\n\nMultiSearchResponse postAnnotationsSearchesResponse = stub.postAnnotationsSearches(\n    PostAnnotationsSearchesRequest.newBuilder().addSearches(\n        Search.newBuilder().setQuery(\n            Query.newBuilder().addFilters(\n                Filter.newBuilder().setAnnotation(\n                    Annotation.newBuilder().setData(\n                            Data.newBuilder().setGeo(\n                                Geo.newBuilder()\n                                    .setGeoPoint(\n                                        GeoPoint.newBuilder()\n                                            .setLongitude(-29)\n                                            .setLatitude(40)\n                                    )\n                                    .setGeoLimit(\n                                        GeoLimit.newBuilder()\n                                            .setType("withinKilometers")\n                                            .setValue(150.0f)\n                                    )\n                            )\n                    )\n                )\n            )\n        )    \n    )\n    .build()\n);\n\nif (postAnnotationsSearchesResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n  throw new RuntimeException("Post annotations searches failed, status: " + postAnnotationsSearchesResponse.getStatus());\n}\n\nSystem.out.println("Found inputs " + postAnnotationsSearchesResponse.getHitsCount() + ":");\nfor (Hit hit : postAnnotationsSearchesResponse.getHitsList()) {\n    System.out.printf("\\tScore %.2f for annotation % of input %s\\n", hit.getScore(), hit.getAnnotation().getId(), hit.getInput().getId())\n}\n'))),(0,s.kt)(i.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview\n\nstub.PostAnnotationsSearches(\n    {\n        searches: [\n            {\n                query: {\n                    filters: [\n                        {\n                            annotation: {\n                                data: {\n                                    geo: {\n                                        geo_point: {\n                                            longitude: -29,\n                                            latitude: 40\n                                        },\n                                        geo_limit: {\n                                            type: "withinKilometers",\n                                            value: 150.0\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post annotations searches failed, status: " + response.status.description);\n        }\n\n        console.log("Search result:");\n        for (const hit of response.hits) {\n            console.log("\\tScore " + hit.score + " for annotation: " + hit.annotation.id + " of input: ", hit.input.id);\n        }\n    }\n);\n'))),(0,s.kt)(i.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'from clarifai_grpc.grpc.api import service_pb2, resources_pb2\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\n# Insert here the initialization code as outlined on this page:\n# https://docs.clarifai.com/api-guide/api-overview\n\npost_annotations_searches_response = stub.PostAnnotationsSearches(\n    service_pb2.PostAnnotationsSearchesRequest(\n        searches = [\n            resources_pb2.Search(\n                query=resources_pb2.Query(\n                    filters=[\n                        resources_pb2.Filter(\n                            annotation=resources_pb2.Annotation(\n                                data=resources_pb2.Data(\n                                    geo=resources_pb2.Geo(\n                                        geo_point=resources_pb2.GeoPoint(\n                                            longitude=-29.0,\n                                            latitude=40.0,\n                                        ),\n                                        geo_limit=resources_pb2.GeoLimit(\n                                            type="withinKilometers",\n                                            value=150.0\n                                        )\n                                    )\n                                )\n                            )\n                        )\n                    ]\n                )\n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif post_annotations_searches_response.status.code != status_code_pb2.SUCCESS:\n    print("There was an error with your request!")\n    print("\\tCode: {}".format(post_annotations_searches_response.outputs[0].status.code))\n    print("\\tDescription: {}".format(post_annotations_searches_response.outputs[0].status.description))\n    print("\\tDetails: {}".format(post_annotations_searches_response.outputs[0].status.details))\n    raise Exception("Post searches failed, status: " + post_annotations_searches_response.status.description)\n\nprint("Search result:")\nfor hit in post_annotations_searches_response.hits:\n    print("\\tScore %.2f for annotation: %s off input: %s" % (hit.score, hit.annotation.id, hit.input.id))\n'))),(0,s.kt)(i.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'#\n# Value of 0 will search for images that don\'t have the concept.\n#\n# Instead of "id" you can search by "name" as well.\n\ncurl -X POST \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'\n  {\n    "searches": [\n      {\n        "query": {\n          "filters": [\n            {\n            "annotation": {\n                "data": {\n                "geo": {\n                    "geo_point": {\n                    "longitude": -29.0,\n                    "latitude": 40.0\n                    },\n                    "geo_limit": {\n                    "type": "withinKilometers",\n                    "value": 150\n                    }\n                }\n              }\n            }\n          }\n        ]\n        }\n      }\n    ]\n  }\'\\\n  https://api.clarifai.com/v2/annnotations/searches\n'))),(0,s.kt)(i.Z,{value:"js_rest",label:"Javascript (REST)",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},'const raw = JSON.stringify({\n  "user_app_id": {\n        "user_id": "{YOUR_USER_ID}",\n        "app_id": "{YOUR_APP_ID}"\n    },\n  "searches": [\n    {\n      "query": {\n        "filters": [\n          {\n          "annotation": {\n              "data": {\n              "geo": {\n                  "geo_point": {\n                  "longitude": -29.0,\n                  "latitude": 40.0\n                  },\n                  "geo_limit": {\n                  "type": "withinKilometers",\n                  "value": 150\n                  }\n              }\n            }\n          }\n        }\n      ]\n      }\n    }\n  ]\n});\n\nconst requestOptions = {\n  method: \'POST\',\n  headers: {\n    \'Accept\': \'application/json\',\n    \'Authorization\': \'Key {YOUR_PERSONAL_TOKEN}\'\n  },\n    body: raw\n};\n\nfetch(`https://api.clarifai.com/v2/annnotations/searches`, requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log(\'error\', error));\n')))),(0,s.kt)("h3",{id:"perform-a-search-with-two-geo-points"},"Perform a search with two geo points"),(0,s.kt)(r.Z,{mdxType:"Tabs"},(0,s.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview\n\nMultiSearchResponse postAnnotationsSearchesResponse = stub.postAnnotationsSearches(\n    PostAnnotationsSearchesRequest.newBuilder().addSearches(\n        Search.newBuilder().setQuery(\n            Query.newBuilder().addFilters(\n                Filter.newBuilder().setAnnotation(\n                    Annotation.newBuilder().setData(\n                            Data.newBuilder().setGeo(\n                                Geo.newBuilder()\n                                    .addGeoBox(\n                                        GeoBoxedPoint.newBuilder().setGeoPoint(\n                                            GeoPoint.newBuilder()\n                                                .setLongitude(-31)\n                                                .setLatitude(42)\n                                        )\n                                    )\n                                    .addGeoBox(\n                                        GeoBoxedPoint.newBuilder().setGeoPoint(\n                                            GeoPoint.newBuilder()\n                                                .setLongitude(-29)\n                                                .setLatitude(39)\n                                        ).build()\n                                    )\n                            )\n                    )\n                )\n            )\n        )    \n    )\n    .build()\n);\n\nif (postAnnotationsSearchesResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n  throw new RuntimeException("Post annotations searches failed, status: " + postAnnotationsSearchesResponse.getStatus());\n}\n\nSystem.out.println("Found inputs " + postAnnotationsSearchesResponse.getHitsCount() + ":");\nfor (Hit hit : postAnnotationsSearchesResponse.getHitsList()) {\n    System.out.printf("\\tScore %.2f for annotation % of input %s\\n", hit.getScore(), hit.getAnnotation().getId(), hit.getInput().getId())\n}\n'))),(0,s.kt)(i.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview\n\nstub.PostAnnotationsSearches(\n    {\n        searches: [\n            {\n                query: {\n                    filters: [\n                        {\n                            annotation: {\n                                data: {\n                                    geo: {\n                                        geo_box: [\n                                            {\n                                                geo_point: {\n                                                    longitude: -31,\n                                                    latitude: 42\n                                                }\n                                            },\n                                            {\n                                                geo_point: {\n                                                    longitude: -29,\n                                                    latitude: 39\n                                                }\n                                            }\n                                        ]\n                                    }\n                                }\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post annotations searches failed, status: " + response.status.description);\n        }\n\n        console.log("Search result:");\n        for (const hit of response.hits) {\n            console.log("\\tScore " + hit.score + " for annotation: " + hit.annotation.id + " of input: ", hit.input.id);\n        }\n    }\n);\n'))),(0,s.kt)(i.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'from clarifai_grpc.grpc.api import service_pb2, resources_pb2\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\n# Insert here the initialization code as outlined on this page:\n# https://docs.clarifai.com/api-guide/api-overview\n\npost_annotations_searches_response = stub.PostAnnotationsSearches(\n    service_pb2.PostAnnotationsSearchesRequest(\n        searches = [\n            resources_pb2.Search(\n                query=resources_pb2.Query(\n                    filters=[\n                        resources_pb2.Filter(\n                            annotation=resources_pb2.Annotation(\n                                data=resources_pb2.Data(\n                                    geo=resources_pb2.Geo(\n                                        geo_box=[\n                                            resources_pb2.GeoBoxedPoint(\n                                                geo_point=resources_pb2.GeoPoint(\n                                                    longitude=-31.0,\n                                                    latitude=42.0,\n                                                ),\n                                            ),\n                                            resources_pb2.GeoBoxedPoint(\n                                                geo_point=resources_pb2.GeoPoint(\n                                                    longitude=-29.0,\n                                                    latitude=39.0,\n                                                ),\n                                            ),\n                                        ]\n                                    )\n                                )\n                            )\n                        )\n                    ]\n                )\n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif post_annotations_searches_response.status.code != status_code_pb2.SUCCESS:\n    print("There was an error with your request!")\n    print("\\tCode: {}".format(post_annotations_searches_response.outputs[0].status.code))\n    print("\\tDescription: {}".format(post_annotations_searches_response.outputs[0].status.description))\n    print("\\tDetails: {}".format(post_annotations_searches_response.outputs[0].status.details))\n    raise Exception("Post searches failed, status: " + post_annotations_searches_response.status.description)\n\nprint("Search result:")\nfor hit in post_annotations_searches_response.hits:\n    print("\\tScore %.2f for annotation: %s off input: %s" % (hit.score, hit.annotation.id, hit.input.id))\n'))),(0,s.kt)(i.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'#\n# Value of 0 will search for images that don\'t have the concept.\n#\n# Instead of "id" you can search by "name" as well.\n\ncurl -X POST \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'\n  {\n    "searches": [\n      {\n        "query": {\n        "filters": [\n            {\n            "annotation": {\n                "data": {\n                "geo": {\n                    "geo_box": [\n                    {\n                        "geo_point": {\n                        "latitude": 42,\n                        "longitude": -31\n                        }\n                    },\n                    {\n                        "geo_point": {\n                        "latitude": 39,\n                        "longitude": -29\n                        }\n                    }\n                    ]\n                }\n                }\n            }\n            }\n        ]\n        }       \n      }\n    ]\n  }\'\\\n  https://api.clarifai.com/v2/annnotations/searches\n'))),(0,s.kt)(i.Z,{value:"js_rest",label:"Javascript (REST)",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},'const raw = JSON.stringify({\n  "user_app_id": {\n        "user_id": "{YOUR_USER_ID}",\n        "app_id": "{YOUR_APP_ID}"\n    },\n  "searches": [\n    {\n      "query": {\n      "filters": [\n          {\n          "annotation": {\n              "data": {\n              "geo": {\n                  "geo_box": [\n                  {\n                      "geo_point": {\n                      "latitude": 42,\n                      "longitude": -31\n                      }\n                  },\n                  {\n                      "geo_point": {\n                      "latitude": 39,\n                      "longitude": -29\n                      }\n                  }\n                  ]\n              }\n              }\n          }\n          }\n      ]\n      }       \n    }\n  ]\n});\n\nconst requestOptions = {\n  method: \'POST\',\n  headers: {\n    \'Accept\': \'application/json\',\n    \'Authorization\': \'Key {YOUR_PERSONAL_TOKEN}\'\n  },\n    body: raw\n};\n\nfetch(`https://api.clarifai.com/v2/annnotations/searches`, requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log(\'error\', error));\n')))),(0,s.kt)("h2",{id:"by-custom-annotation-info"},"By Custom Annotation Info"),(0,s.kt)("p",null,"After you have ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/Clarifai/docs/tree/1c1d25cdd43190c38a2edb313297c0d566b3a0e3/api-guide/search/data-management/inputs.md#add-inputs-with-custom-metadata"},"added inputs with custom metadata"),", you can search by that metadata."),(0,s.kt)("p",null,"Below is an example of searching over custom metadata. You can exact match any ",(0,s.kt)("inlineCode",{parentName:"p"},"key"),": ",(0,s.kt)("inlineCode",{parentName:"p"},"value")," pair no matter how nested it is. For example, if the metadata on an input is:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},'{\n  "keyname": "value1",\n  "somelist": [1,2,3],\n  "somenesting": {\n     "keyname2":"value2",\n     "list2":[4,5]\n   }\n}\n')),(0,s.kt)("p",null,"Then the following searches will find this:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},'{\n  "keyname": "value1"\n}\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},'{\n  "somelist": [1,2,3]\n}\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},'{\n  "somelist": [1,2]\n}\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},'{\n  "somenesting": {"keyname2":"value2"}\n}\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},'{\n  "somenesting": {"list2":[5]}\n}\n')),(0,s.kt)("p",null,"How to perform searches:"),(0,s.kt)(r.Z,{mdxType:"Tabs"},(0,s.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview\n\nMultiSearchResponse postAnnotationsSearchesResponse = stub.postAnnotationsSearches(\n    PostAnnotationsSearchesRequest.newBuilder().addSearches(\n        Search.newBuilder().setQuery(\n            Query.newBuilder().addFilters(\n                Filter.newBuilder().setAnnotation(\n                    Annotation.newBuilder().setData(\n                        Data.newBuilder().setMetadata(\n                            Struct.newBuilder()\n                                .putFields("type", Value.newBuilder().setStringValue("animal").build())\n                        )\n                    )\n                )\n            )\n        )    \n    )\n    .build()\n);\n\nif (postAnnotationsSearchesResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n  throw new RuntimeException("Post annotations searches failed, status: " + postAnnotationsSearchesResponse.getStatus());\n}\n\nSystem.out.println("Found inputs " + postAnnotationsSearchesResponse.getHitsCount() + ":");\nfor (Hit hit : postAnnotationsSearchesResponse.getHitsList()) {\n    System.out.printf("\\tScore %.2f for annotation % of input %s\\n", hit.getScore(), hit.getAnnotation().getId(), hit.getInput().getId())\n}\n'))),(0,s.kt)(i.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview\n\nstub.PostAnnotationsSearches(\n    {\n        searches: [\n            {\n                query: {\n                    filters: [\n                        {\n                            annotation: {\n                                data: {\n                                    metadata: {\n                                        "type": "animal"\n                                    }\n                                }\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post annotations searches failed, status: " + response.status.description);\n        }\n\n        console.log("Search result:");\n        for (const hit of response.hits) {\n            console.log("\\tScore " + hit.score + " for annotation: " + hit.annotation.id + " of input: ", hit.input.id);\n        }\n    }\n);\n'))),(0,s.kt)(i.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'from clarifai_grpc.grpc.api import service_pb2, resources_pb2\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\nfrom google.protobuf.struct_pb2 import Struct\n\n# Insert here the initialization code as outlined on this page:\n# https://docs.clarifai.com/api-guide/api-overview\n\nsearch_metadata = Struct()\nsearch_metadata.update({"type": "animal"})\n\npost_annotations_searches_response = stub.PostAnnotationsSearches(\n    service_pb2.PostAnnotationsSearchesRequest(\n        searches = [\n            resources_pb2.Search(\n                query=resources_pb2.Query(\n                    filters=[\n                        resources_pb2.Filter(\n                            annotation=resources_pb2.Annotation(\n                                data=resources_pb2.Data(\n                                    metadata=search_metadata\n                                )\n                            )\n                        )\n                    ]\n                )\n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif post_annotations_searches_response.status.code != status_code_pb2.SUCCESS:\n    print("There was an error with your request!")\n    print("\\tCode: {}".format(post_annotations_searches_response.outputs[0].status.code))\n    print("\\tDescription: {}".format(post_annotations_searches_response.outputs[0].status.description))\n    print("\\tDetails: {}".format(post_annotations_searches_response.outputs[0].status.details))\n    raise Exception("Post searches failed, status: " + post_annotations_searches_response.status.description)\n\nprint("Search result:")\nfor hit in post_annotations_searches_response.hits:\n    print("\\tScore %.2f for annotation: %s off input: %s" % (hit.score, hit.annotation.id, hit.input.id))\n'))),(0,s.kt)(i.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'#\n# Value of 0 will search for images that don\'t have the concept.\n#\n# Instead of "id" you can search by "name" as well.\n\ncurl -X POST \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'\n  {\n    "searches": [\n      {\n        "query": {\n        "filters": [\n            {\n            "annotation": {\n                "data": {\n                "metadata": {\n                    "type": "animal"\n                }\n                }\n            }\n            }\n        ]\n        }\n      }\n    ]\n  }\'\\\n  https://api.clarifai.com/v2/annnotations/searches\n'))),(0,s.kt)(i.Z,{value:"js_rest",label:"Javascript (REST)",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},'const raw = JSON.stringify({\n  "user_app_id": {\n        "user_id": "{YOUR_USER_ID}",\n        "app_id": "{YOUR_APP_ID}"\n    },\n  "searches": [\n    {\n      "query": {\n      "filters": [\n          {\n          "annotation": {\n              "data": {\n              "metadata": {\n                  "type": "animal"\n              }\n              }\n          }\n          }\n      ]\n      }\n    }\n  ]\n});\n\nconst requestOptions = {\n  method: \'POST\',\n  headers: {\n    \'Accept\': \'application/json\',\n    \'Authorization\': \'Key {YOUR_PERSONAL_TOKEN}\'\n  },\n    body: raw\n};\n\nfetch(`https://api.clarifai.com/v2/annnotations/searches`, requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log(\'error\', error));\n')))),(0,s.kt)("h2",{id:"by-annotation-info"},"By Annotation Info"),(0,s.kt)("p",null,"Each annotation has annotation info. Similar to metadata, you have full control of this field and can be any arbitrary JSON."),(0,s.kt)(r.Z,{mdxType:"Tabs"},(0,s.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview\n\nMultiSearchResponse postAnnotationsSearchesResponse = stub.postAnnotationsSearches(\n    PostAnnotationsSearchesRequest.newBuilder().addSearches(\n        Search.newBuilder().setQuery(\n            Query.newBuilder().addFilters(\n                Filter.newBuilder().setAnnotation(\n                    Annotation.newBuilder().setAnnotationInfo(\n                        Struct.newBuilder()\n                            .putFields("type", Value.newBuilder().setStringValue("animal").build())\n                    )\n                )\n            )\n        )    \n    )\n    .build()\n);\n\nif (postAnnotationsSearchesResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n  throw new RuntimeException("Post annotations searches failed, status: " + postAnnotationsSearchesResponse.getStatus());\n}\n\nSystem.out.println("Found inputs " + postAnnotationsSearchesResponse.getHitsCount() + ":");\nfor (Hit hit : postAnnotationsSearchesResponse.getHitsList()) {\n    System.out.printf("\\tScore %.2f for annotation % of input %s\\n", hit.getScore(), hit.getAnnotation().getId(), hit.getInput().getId())\n}\n'))),(0,s.kt)(i.Z,{value:"grpc_nodejs",label:"gRPC NodeJS",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview\n\nstub.PostAnnotationsSearches(\n    {\n        searches: [\n            {\n                query: {\n                    filters: [\n                        {\n                            annotation: {\n                                annotation_info: {\n                                    "type": "animal"\n                                }\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post annotations searches failed, status: " + response.status.description);\n        }\n\n        console.log("Search result:");\n        for (const hit of response.hits) {\n            console.log("\\tScore " + hit.score + " for annotation: " + hit.annotation.id + " of input: ", hit.input.id);\n        }\n    }\n);\n'))),(0,s.kt)(i.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'from clarifai_grpc.grpc.api import service_pb2, resources_pb2\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\nfrom google.protobuf.struct_pb2 import Struct\n\n# Insert here the initialization code as outlined on this page:\n# https://docs.clarifai.com/api-guide/api-overview\n\nsearch_annotation_info = Struct()\nsearch_annotation_info.update({"type": "animal"})\n\npost_annotations_searches_response = stub.PostAnnotationsSearches(\n    service_pb2.PostAnnotationsSearchesRequest(\n        searches = [\n            resources_pb2.Search(\n                query=resources_pb2.Query(\n                    filters=[\n                        resources_pb2.Filter(\n                            annotation=resources_pb2.Annotation(\n                                annotation_info=search_annotation_info\n                            )\n                        )\n                    ]\n                )\n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif post_annotations_searches_response.status.code != status_code_pb2.SUCCESS:\n    print("There was an error with your request!")\n    print("\\tCode: {}".format(post_annotations_searches_response.outputs[0].status.code))\n    print("\\tDescription: {}".format(post_annotations_searches_response.outputs[0].status.description))\n    print("\\tDetails: {}".format(post_annotations_searches_response.outputs[0].status.details))\n    raise Exception("Post searches failed, status: " + post_annotations_searches_response.status.description)\n\nprint("Search result:")\nfor hit in post_annotations_searches_response.hits:\n    print("\\tScore %.2f for annotation: %s off input: %s" % (hit.score, hit.annotation.id, hit.input.id))\n'))),(0,s.kt)(i.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'#\n# Value of 0 will search for images that don\'t have the concept.\n#\n# Instead of "id" you can search by "name" as well.\n\ncurl -X POST \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'\n  {\n    "searches": [\n      {\n        "query": {\n        "filters": [\n            {\n            "annotation": {\n                "annotation_info": {\n                "type": "animal"\n                }\n            }\n            }\n        ]\n        }\n      }\n    ]\n  }\'\\\n  https://api.clarifai.com/v2/annnotations/searches\n'))),(0,s.kt)(i.Z,{value:"js_rest",label:"Javascript (REST)",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},'const raw = JSON.stringify({\n  "user_app_id": {\n        "user_id": "{YOUR_USER_ID}",\n        "app_id": "{YOUR_APP_ID}"\n    },\n  "searches": [\n    {\n      "query": {\n      "filters": [\n          {\n          "annotation": {\n              "annotation_info": {\n              "type": "animal"\n              }\n          }\n          }\n      ]\n      }\n    }\n  ]\n});\n\nconst requestOptions = {\n  method: \'POST\',\n  headers: {\n    \'Accept\': \'application/json\',\n    \'Authorization\': \'Key {YOUR_PERSONAL_TOKEN}\'\n  },\n    body: raw\n};\n\nfetch(`https://api.clarifai.com/v2/annnotations/searches`, requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log(\'error\', error));\n')))))}m.isMDXComponent=!0}}]);
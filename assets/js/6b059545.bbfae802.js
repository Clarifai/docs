"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[2789],{19365:(e,a,t)=>{t.d(a,{A:()=>o});var n=t(96540),i=t(20053);const r={tabItem:"tabItem_Ymn6"};function o(e){let{children:a,hidden:t,className:o}=e;return n.createElement("div",{role:"tabpanel",className:(0,i.A)(r.tabItem,o),hidden:t},a)}},11470:(e,a,t)=>{t.d(a,{A:()=>v});var n=t(58168),i=t(96540),r=t(20053),o=t(23104),s=t(56347),l=t(57485),u=t(31682),c=t(89466);function p(e){return function(e){return i.Children.map(e,(e=>{if(!e||(0,i.isValidElement)(e)&&function(e){const{props:a}=e;return!!a&&"object"==typeof a&&"value"in a}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:a,label:t,attributes:n,default:i}}=e;return{value:a,label:t,attributes:n,default:i}}))}function d(e){const{values:a,children:t}=e;return(0,i.useMemo)((()=>{const e=a??p(t);return function(e){const a=(0,u.X)(e,((e,a)=>e.value===a.value));if(a.length>0)throw new Error(`Docusaurus error: Duplicate values "${a.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[a,t])}function f(e){let{value:a,tabValues:t}=e;return t.some((e=>e.value===a))}function m(e){let{queryString:a=!1,groupId:t}=e;const n=(0,s.W6)(),r=function(e){let{queryString:a=!1,groupId:t}=e;if("string"==typeof a)return a;if(!1===a)return null;if(!0===a&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:a,groupId:t});return[(0,l.aZ)(r),(0,i.useCallback)((e=>{if(!r)return;const a=new URLSearchParams(n.location.search);a.set(r,e),n.replace({...n.location,search:a.toString()})}),[r,n])]}function h(e){const{defaultValue:a,queryString:t=!1,groupId:n}=e,r=d(e),[o,s]=(0,i.useState)((()=>function(e){let{defaultValue:a,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(a){if(!f({value:a,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${a}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return a}const n=t.find((e=>e.default))??t[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:a,tabValues:r}))),[l,u]=m({queryString:t,groupId:n}),[p,h]=function(e){let{groupId:a}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(a),[n,r]=(0,c.Dv)(t);return[n,(0,i.useCallback)((e=>{t&&r.set(e)}),[t,r])]}({groupId:n}),y=(()=>{const e=l??p;return f({value:e,tabValues:r})?e:null})();(0,i.useLayoutEffect)((()=>{y&&s(y)}),[y]);return{selectedValue:o,selectValue:(0,i.useCallback)((e=>{if(!f({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);s(e),u(e),h(e)}),[u,h,r]),tabValues:r}}var y=t(92303);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function g(e){let{className:a,block:t,selectedValue:s,selectValue:l,tabValues:u}=e;const c=[],{blockElementScrollPositionUntilNextRender:p}=(0,o.a_)(),d=e=>{const a=e.currentTarget,t=c.indexOf(a),n=u[t].value;n!==s&&(p(a),l(n))},f=e=>{let a=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const t=c.indexOf(e.currentTarget)+1;a=c[t]??c[0];break}case"ArrowLeft":{const t=c.indexOf(e.currentTarget)-1;a=c[t]??c[c.length-1];break}}a?.focus()};return i.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":t},a)},u.map((e=>{let{value:a,label:t,attributes:o}=e;return i.createElement("li",(0,n.A)({role:"tab",tabIndex:s===a?0:-1,"aria-selected":s===a,key:a,ref:e=>c.push(e),onKeyDown:f,onClick:d},o,{className:(0,r.A)("tabs__item",b.tabItem,o?.className,{"tabs__item--active":s===a})}),t??a)})))}function _(e){let{lazy:a,children:t,selectedValue:n}=e;const r=(Array.isArray(t)?t:[t]).filter(Boolean);if(a){const e=r.find((e=>e.props.value===n));return e?(0,i.cloneElement)(e,{className:"margin-top--md"}):null}return i.createElement("div",{className:"margin-top--md"},r.map(((e,a)=>(0,i.cloneElement)(e,{key:a,hidden:e.props.value!==n}))))}function A(e){const a=h(e);return i.createElement("div",{className:(0,r.A)("tabs-container",b.tabList)},i.createElement(g,(0,n.A)({},e,a)),i.createElement(_,(0,n.A)({},e,a)))}function v(e){const a=(0,y.A)();return i.createElement(A,(0,n.A)({key:String(a)},e))}},54055:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>m,contentTitle:()=>d,default:()=>g,frontMatter:()=>p,metadata:()=>f,toc:()=>h});var n=t(58168),i=(t(96540),t(15680)),r=t(11470),o=t(19365),s=t(77964);const l='######################################################################################\n# In this section, we set the user authentication, user and app ID, and dataset ID.\n# Change these strings to run your own example.\n#####################################################################################\n\n# Your PAT (Personal Access Token) can be found in the Account\'s Security section\nPAT = "YOUR_PAT_HERE"\nUSER_ID = "YOUR_USER_ID_HERE"\nAPP_ID = "YOUR_APP_ID_HERE"\nDATASET_ID = "YOUR_DATASET_ID_HERE"\n\n############################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n############################################################################\n\n# Import the required packages\nimport os\nfrom clarifaipyspark.client import ClarifaiPySpark\n\n# Set Clarifai PAT as environment variable\nos.environ["CLARIFAI_PAT"] = PAT\n# Create a Clarifai-PySpark client object to connect to your app on Clarifai\ncspark_obj = ClarifaiPySpark(user_id=USER_ID, app_id=APP_ID)\n# Specify the dataset\ndataset_obj = cspark_obj.dataset(dataset_id=DATASET_ID)\n\n#  Retrieve annotations in JSON format\nannotations_response = list(dataset_obj.list_annotations(input_ids=None))\n\nprint(annotations_response)\n',u='######################################################################################\n# In this section, we set the user authentication, user and app ID, and dataset ID.\n# Change these strings to run your own example.\n######################################################################################\n\n# Your PAT (Personal Access Token) can be found in the Account\'s Security section\nPAT = "YOUR_PAT_HERE"\nUSER_ID = "YOUR_USER_ID_HERE"\nAPP_ID = "YOUR_APP_ID_HERE"\nDATASET_ID = "YOUR_DATASET_ID_HERE"\n\n############################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n############################################################################\n\n# Import the required packages\nimport os\nfrom clarifaipyspark.client import ClarifaiPySpark\n\n# Set Clarifai PAT as environment variable\nos.environ["CLARIFAI_PAT"] = PAT\n# Create a Clarifai-PySpark client object to connect to your app on Clarifai\ncspark_obj = ClarifaiPySpark(user_id=USER_ID, app_id=APP_ID)\n# Specify the dataset\ndataset_obj = cspark_obj.dataset(dataset_id=DATASET_ID)\n\n#  Retrieve annotations as a dataframe\nannotations_df = dataset_obj.export_annotations_to_dataframe(input_ids=None)\n\nprint(annotations_df)\n',c='#####################################################################################\n# In this section, we set the user authentication, user and app ID, and dataset ID.\n# Change these strings to run your own example.\n#####################################################################################\n\n# Your PAT (Personal Access Token) can be found in the Account\'s Security section\nPAT = "YOUR_PAT_HERE"\nUSER_ID = "YOUR_USER_ID_HERE"\nAPP_ID = "YOUR_APP_ID_HERE"\nDATASET_ID = "YOUR_DATASET_ID_HERE"\n\n############################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n############################################################################\n\n# Import the required packages\nimport os\nfrom clarifaipyspark.client import ClarifaiPySpark\n\n# Set Clarifai PAT as environment variable\nos.environ["CLARIFAI_PAT"] = PAT\n# Create a Clarifai-PySpark client object to connect to your app on Clarifai\ncspark_obj = ClarifaiPySpark(user_id=USER_ID, app_id=APP_ID)\n# Specify the dataset\ndataset_obj = cspark_obj.dataset(dataset_id=DATASET_ID)\n\n#  Retrieve inputs with annotations as a dataframe\ndataset_df = dataset_obj.export_dataset_to_dataframe(\n          input_type="image"  # Or, specify as "text"\n)\n\nprint(dataset_df)\n',p={description:"Seamlessly retrieve annotations from Clarifai into Databricks",sidebar_position:3},d="Fetch Annotations",f={unversionedId:"integrations/databricks/fetch-annotations",id:"integrations/databricks/fetch-annotations",title:"Fetch Annotations",description:"Seamlessly retrieve annotations from Clarifai into Databricks",source:"@site/docs/integrations/databricks/fetch-annotations.md",sourceDirName:"integrations/databricks",slug:"/integrations/databricks/fetch-annotations",permalink:"/integrations/databricks/fetch-annotations",draft:!1,editUrl:"https://github.com/Clarifai/docs/blob/main/docs/integrations/databricks/fetch-annotations.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{description:"Seamlessly retrieve annotations from Clarifai into Databricks",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Fetch Data",permalink:"/integrations/databricks/fetch-data"},next:{title:"Databricks-Connect Module",permalink:"/integrations/databricks/databricks-connect"}},m={},h=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Retrieve Annotations in JSON Format",id:"retrieve-annotations-in-json-format",level:2},{value:"Retrieve Annotations as a Dataframe",id:"retrieve-annotations-as-a-dataframe",level:2},{value:"Retrieve Inputs With Annotations as a Dataframe",id:"retrieve-inputs-with-annotations-as-a-dataframe",level:3}],y={toc:h},b="wrapper";function g(e){let{components:a,...t}=e;return(0,i.yg)(b,(0,n.A)({},y,t,{components:a,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"fetch-annotations"},"Fetch Annotations"),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"Seamlessly retrieve annotations from Clarifai into Databricks")),(0,i.yg)("hr",null),(0,i.yg)("p",null,"The Clarifai platform allows you to ",(0,i.yg)("a",{parentName:"p",href:"https://docs.clarifai.com/portal-guide/annotate/create-get-update-delete"},"annotate your inputs"),", enriching them with valuable labels and metadata."),(0,i.yg)("p",null,"You can effortlessly fetch annotations from a Clarifai application to Databricks. This integration is particularly valuable for machine learning workflows in Databricks, as it introduces annotated data from Clarifai into the platform. "),(0,i.yg)("p",null,"Annotated data enhances the quality of training data, a crucial factor in improving the accuracy and performance of machine learning models."),(0,i.yg)("p",null,"Let\u2019s illustrate how you can seamlessly transfer annotations from Clarifai into the Databricks environment. "),(0,i.yg)("h2",{id:"prerequisites"},"Prerequisites"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Databricks notebook development environment"),(0,i.yg)("li",{parentName:"ul"},"Get your PAT (Personal Access Token) from the Clarifai\u2019s portal under the ",(0,i.yg)("a",{parentName:"li",href:"https://clarifai.com/settings/security"},"Settings/Security")," section"),(0,i.yg)("li",{parentName:"ul"},"Get your Clarifai user ID "),(0,i.yg)("li",{parentName:"ul"},"Get the ID of the Clarifai app where you want to fetch the annotations from"),(0,i.yg)("li",{parentName:"ul"},"Get the ID of the dataset having the annotations within your app"),(0,i.yg)("li",{parentName:"ul"},"Install the ",(0,i.yg)("a",{parentName:"li",href:"https://github.com/Clarifai/clarifai-pyspark"},"Clarifai PySpark")," package by running ",(0,i.yg)("inlineCode",{parentName:"li"},"pip install clarifai-pyspark ")),(0,i.yg)("li",{parentName:"ul"},"Install Protocol Buffers by running ",(0,i.yg)("inlineCode",{parentName:"li"},"pip install protobuf==4.24.2 "),". It\u2019s a cross-platform, serialization protocol that describes the structure of the data to be sent ")),(0,i.yg)("admonition",{type:"info"},(0,i.yg)("p",{parentName:"admonition"},"You can learn how to authenticate with the Clarifai platform ",(0,i.yg)("a",{parentName:"p",href:"https://docs.clarifai.com/clarifai-basics/authentication/personal-access-tokens"},"here"),".")),(0,i.yg)("h2",{id:"retrieve-annotations-in-json-format"},"Retrieve Annotations in JSON Format"),(0,i.yg)("p",null,"You can retrieve detailed information about the annotations in your Clarifai app\u2019s dataset. You\u2019ll get a JSON response containing comprehensive details about the annotations."),(0,i.yg)("p",null,"Optionally, you can specify a list of input IDs for which you want to fetch their annotations. "),(0,i.yg)(r.A,{mdxType:"Tabs"},(0,i.yg)(o.A,{value:"python",label:"Python",mdxType:"TabItem"},(0,i.yg)(s.A,{className:"language-python",mdxType:"CodeBlock"},l))),(0,i.yg)("h2",{id:"retrieve-annotations-as-a-dataframe"},"Retrieve Annotations as a Dataframe"),(0,i.yg)("p",null,"You can retrieve detailed information about your annotations in a structured dataframe format. The dataframe includes key columns like ",(0,i.yg)("inlineCode",{parentName:"p"},"annotation_id"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"annotation"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"annotation_user_id"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"input_id"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"annotation_created_at")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"annotation_modified_at"),"."),(0,i.yg)("p",null,"Note that the JSON response may include supplementary attributes, offering comprehensive insights beyond the specified columns in the dataframe."),(0,i.yg)("p",null,"Optionally, you can specify a list of input IDs for which you want to fetch their annotations.  "),(0,i.yg)(r.A,{mdxType:"Tabs"},(0,i.yg)(o.A,{value:"python",label:"Python",mdxType:"TabItem"},(0,i.yg)(s.A,{className:"language-python",mdxType:"CodeBlock"},u))),(0,i.yg)("h3",{id:"retrieve-inputs-with-annotations-as-a-dataframe"},"Retrieve Inputs With Annotations as a Dataframe"),(0,i.yg)("p",null,"You can obtain inputs along with their corresponding annotations in a structured dataframe. This capability allows for the simultaneous retrieval of input details and their associated annotations. "),(0,i.yg)("p",null,"The resulting dataframe consolidates information seamlessly from both the annotations and inputs dataframes, as outlined in the previously mentioned functions."),(0,i.yg)(r.A,{mdxType:"Tabs"},(0,i.yg)(o.A,{value:"python",label:"Python",mdxType:"TabItem"},(0,i.yg)(s.A,{className:"language-python",mdxType:"CodeBlock"},c))),(0,i.yg)("admonition",{type:"info"},(0,i.yg)("p",{parentName:"admonition"},"You can get examples for integrating Clarifai with Databricks ",(0,i.yg)("a",{parentName:"p",href:"https://github.com/Clarifai/clarifai-pyspark/tree/main/examples"},"here"),".")))}g.isMDXComponent=!0}}]);
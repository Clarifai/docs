"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[2376],{15680:(e,a,t)=>{t.d(a,{xA:()=>u,yg:()=>y});var l=t(96540);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function n(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);a&&(l=l.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,l)}return t}function p(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?n(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):n(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function i(e,a){if(null==e)return{};var t,l,r=function(e,a){if(null==e)return{};var t,l,r={},n=Object.keys(e);for(l=0;l<n.length;l++)t=n[l],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(l=0;l<n.length;l++)t=n[l],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=l.createContext({}),o=function(e){var a=l.useContext(s),t=a;return e&&(t="function"==typeof e?e(a):p(p({},a),e)),t},u=function(e){var a=o(e.components);return l.createElement(s.Provider,{value:a},e.children)},m="mdxType",g={inlineCode:"code",wrapper:function(e){var a=e.children;return l.createElement(l.Fragment,{},a)}},d=l.forwardRef((function(e,a){var t=e.components,r=e.mdxType,n=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),m=o(t),d=r,y=m["".concat(s,".").concat(d)]||m[d]||g[d]||n;return t?l.createElement(y,p(p({ref:a},u),{},{components:t})):l.createElement(y,p({ref:a},u))}));function y(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var n=t.length,p=new Array(n);p[0]=d;var i={};for(var s in a)hasOwnProperty.call(a,s)&&(i[s]=a[s]);i.originalType=e,i[m]="string"==typeof e?e:r,p[1]=i;for(var o=2;o<n;o++)p[o]=t[o];return l.createElement.apply(null,p)}return l.createElement.apply(null,t)}d.displayName="MDXCreateElement"},4860:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>s,contentTitle:()=>p,default:()=>g,frontMatter:()=>n,metadata:()=>i,toc:()=>o});var l=t(58168),r=(t(96540),t(15680));const n={description:"Clarifai Python SDK API Reference",sidebar_position:2},p="API Reference",i={unversionedId:"python-sdk/api-reference",id:"python-sdk/api-reference",title:"API Reference",description:"Clarifai Python SDK API Reference",source:"@site/docs/python-sdk/api-reference.md",sourceDirName:"python-sdk",slug:"/python-sdk/api-reference",permalink:"/python-sdk/api-reference",draft:!1,editUrl:"https://github.com/Clarifai/docs/blob/main/docs/python-sdk/api-reference.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{description:"Clarifai Python SDK API Reference",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Installation Guide",permalink:"/python-sdk/sdk-overview"},next:{title:"Creating your AI Apps",permalink:"/python-sdk/create-apps"}},s={},o=[{value:"User",id:"user",level:2},{value:"User.__init__()",id:"user__init__",level:3},{value:"Parameters",id:"parameters",level:4},{value:"User.app()",id:"userapp",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns",level:4},{value:"Return type",id:"return-type",level:4},{value:"Example",id:"example",level:4},{value:"User.create_app()",id:"usercreate_app",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-1",level:4},{value:"Return type",id:"return-type-1",level:4},{value:"Example",id:"example-1",level:4},{value:"User.create_runner()",id:"usercreate_runner",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"Returns",id:"returns-2",level:4},{value:"Return type",id:"return-type-2",level:4},{value:"Example",id:"example-2",level:4},{value:"User.delete_app()",id:"userdelete_app",level:3},{value:"Parameters",id:"parameters-4",level:4},{value:"Return type",id:"return-type-3",level:4},{value:"Example",id:"example-3",level:4},{value:"User.delete_runner()",id:"userdelete_runner",level:3},{value:"Parameters",id:"parameters-5",level:4},{value:"Example",id:"example-4",level:4},{value:"User.list_apps()",id:"userlist_apps",level:3},{value:"Parameters",id:"parameters-6",level:4},{value:"Returns",id:"returns-3",level:4},{value:"Return type",id:"return-type-4",level:4},{value:"Example",id:"example-5",level:4},{value:"User.list_runners()",id:"userlist_runners",level:3},{value:"Parameters",id:"parameters-7",level:4},{value:"Returns",id:"returns-4",level:4},{value:"Return type",id:"return-type-5",level:4},{value:"Example",id:"example-6",level:4},{value:"User.runner()",id:"userrunner",level:3},{value:"Parameters",id:"parameters-8",level:4},{value:"Returns",id:"returns-5",level:4},{value:"Return type",id:"return-type-6",level:4},{value:"Example",id:"example-7",level:4},{value:"App",id:"app",level:2},{value:"App.__init__()",id:"app__init__",level:3},{value:"Parameters",id:"parameters-9",level:4},{value:"App.create_dataset()",id:"appcreate_dataset",level:3},{value:"Parameters",id:"parameters-10",level:4},{value:"Returns",id:"returns-6",level:4},{value:"Return type",id:"return-type-7",level:4},{value:"Example",id:"example-8",level:4},{value:"App.create_model()",id:"appcreate_model",level:3},{value:"Parameters",id:"parameters-11",level:4},{value:"Returns",id:"returns-7",level:4},{value:"Return type",id:"return-type-8",level:4},{value:"Example",id:"example-9",level:4},{value:"App.create_module()",id:"appcreate_module",level:3},{value:"Parameters",id:"parameters-12",level:4},{value:"Returns",id:"returns-8",level:4},{value:"Return type",id:"return-type-9",level:4},{value:"Example",id:"example-10",level:4},{value:"App.create_workflow()",id:"appcreate_workflow",level:3},{value:"Parameters",id:"parameters-13",level:4},{value:"Returns",id:"returns-9",level:4},{value:"Return type",id:"return-type-10",level:4},{value:"Example",id:"example-11",level:4},{value:"App.dataset()",id:"appdataset",level:3},{value:"Parameters",id:"parameters-14",level:4},{value:"Returns",id:"returns-10",level:4},{value:"Return type",id:"return-type-11",level:4},{value:"Example",id:"example-12",level:4},{value:"App.delete_dataset()",id:"appdelete_dataset",level:3},{value:"Parameters",id:"parameters-15",level:4},{value:"Example",id:"example-13",level:4},{value:"App.delete_model()",id:"appdelete_model",level:3},{value:"Parameters",id:"parameters-16",level:4},{value:"Example",id:"example-14",level:4},{value:"App.delete_module()",id:"appdelete_module",level:3},{value:"Parameters",id:"parameters-17",level:4},{value:"Example",id:"example-15",level:4},{value:"App.delete_workflow()",id:"appdelete_workflow",level:3},{value:"Parameters",id:"parameters-18",level:4},{value:"Example",id:"example-16",level:4},{value:"App.inputs()",id:"appinputs",level:3},{value:"Returns",id:"returns-11",level:4},{value:"Return type",id:"return-type-12",level:4},{value:"App.list_concepts()",id:"applist_concepts",level:3},{value:"Parameters",id:"parameters-19",level:4},{value:"App.list_datasets()",id:"applist_datasets",level:3},{value:"Parameters",id:"parameters-20",level:4},{value:"Returns",id:"returns-12",level:4},{value:"Return type",id:"return-type-13",level:4},{value:"Example",id:"example-17",level:4},{value:"App.list_installed_module_versions()",id:"applist_installed_module_versions",level:3},{value:"Parameters",id:"parameters-21",level:4},{value:"Returns",id:"returns-13",level:4},{value:"Return type",id:"return-type-14",level:4},{value:"Example",id:"example-18",level:4},{value:"App.list_models()",id:"applist_models",level:3},{value:"Parameters",id:"parameters-22",level:4},{value:"Returns",id:"returns-14",level:4},{value:"Return type",id:"return-type-15",level:4},{value:"Example",id:"example-19",level:4},{value:"App.list_modules()",id:"applist_modules",level:3},{value:"Parameters",id:"parameters-23",level:4},{value:"Returns",id:"returns-15",level:5},{value:"Return type",id:"return-type-16",level:5},{value:"Example",id:"example-20",level:4},{value:"App.list_workflows()",id:"applist_workflows",level:3},{value:"Parameters",id:"parameters-24",level:4},{value:"Returns",id:"returns-16",level:4},{value:"Return type",id:"return-type-17",level:4},{value:"Example",id:"example-21",level:4},{value:"App.list_trainable_model_types()",id:"applist_trainable_model_types",level:3},{value:"Example",id:"example-22",level:4},{value:"App.search()",id:"appsearch",level:3},{value:"Parameters",id:"parameters-25",level:4},{value:"Returns",id:"returns-17",level:4},{value:"Example",id:"example-23",level:4},{value:"App.model()",id:"appmodel",level:3},{value:"Parameters",id:"parameters-26",level:4},{value:"Returns",id:"returns-18",level:5},{value:"Return type",id:"return-type-18",level:4},{value:"Example",id:"example-24",level:4},{value:"App.module()",id:"appmodule",level:3},{value:"Parameters",id:"parameters-27",level:4},{value:"Returns",id:"returns-19",level:4},{value:"Return type",id:"return-type-19",level:4},{value:"Example",id:"example-25",level:4},{value:"App.workflow()",id:"appworkflow",level:3},{value:"Parameters",id:"parameters-28",level:4},{value:"Returns",id:"returns-20",level:4},{value:"Return type",id:"return-type-20",level:4},{value:"Example",id:"example-26",level:4},{value:"Dataset",id:"dataset",level:2},{value:"Dataset.__init__()",id:"dataset__init__",level:3},{value:"Parameters",id:"parameters-29",level:4},{value:"Dataset.export()",id:"datasetexport",level:3},{value:"Parameters",id:"parameters-30",level:4},{value:"Example",id:"example-27",level:4},{value:"Dataset.upload_dataset()",id:"datasetupload_dataset",level:3},{value:"Parameters",id:"parameters-31",level:4},{value:"Dataset.upload_from_csv()",id:"datasetupload_from_csv",level:3},{value:"Parameters",id:"parameters-32",level:4},{value:"Example",id:"example-28",level:4},{value:"Dataset.upload_from_folder()",id:"datasetupload_from_folder",level:3},{value:"Parameters",id:"parameters-33",level:4},{value:"Example",id:"example-29",level:4},{value:"Dataset.get_upload_status()",id:"datasetget_upload_status",level:3},{value:"Parameters",id:"parameters-34",level:4},{value:"Example",id:"example-30",level:4},{value:"Dataset.list_versions()",id:"datasetlist_versions",level:3},{value:"Parameters",id:"parameters-35",level:4},{value:"Example",id:"example-31",level:4},{value:"Dataset.create_version()",id:"datasetcreate_version",level:3},{value:"Parameters",id:"parameters-36",level:4},{value:"Example",id:"example-32",level:4},{value:"Dataset.delete_version()",id:"datasetdelete_version",level:3},{value:"Parameters",id:"parameters-37",level:4},{value:"Example",id:"example-33",level:4},{value:"Input",id:"input",level:2},{value:"Inputs.__init__()",id:"inputs__init__",level:3},{value:"Parameters",id:"parameters-38",level:4},{value:"Inputs.delete_inputs()",id:"inputsdelete_inputs",level:3},{value:"Parameters",id:"parameters-39",level:4},{value:"Example",id:"example-34",level:4},{value:"Inputs.get_image_inputs_from_folder()",id:"inputsget_image_inputs_from_folder",level:3},{value:"Parameters",id:"parameters-40",level:4},{value:"Returns",id:"returns-21",level:4},{value:"Return type",id:"return-type-21",level:4},{value:"Example",id:"example-35",level:4},{value:"Inputs.get_input_from_bytes()",id:"inputsget_input_from_bytes",level:3},{value:"Parameters",id:"parameters-41",level:4},{value:"Returns",id:"returns-22",level:4},{value:"Return type",id:"return-type-22",level:4},{value:"Example",id:"example-36",level:4},{value:"Inputs.get_input_from_file()",id:"inputsget_input_from_file",level:3},{value:"Parameters",id:"parameters-42",level:4},{value:"Returns",id:"returns-23",level:4},{value:"Return type",id:"return-type-23",level:4},{value:"Example",id:"example-37",level:4},{value:"Inputs.get_input_from_url()",id:"inputsget_input_from_url",level:3},{value:"Parameters",id:"parameters-43",level:4},{value:"Returns",id:"returns-24",level:4},{value:"Return type",id:"return-type-24",level:4},{value:"Example",id:"example-38",level:4},{value:"Inputs.get_inputs_from_csv()",id:"inputsget_inputs_from_csv",level:3},{value:"Parameters",id:"parameters-44",level:4},{value:"Returns",id:"returns-25",level:4},{value:"Return type",id:"return-type-25",level:4},{value:"Example",id:"example-39",level:4},{value:"Inputs.get_mask_proto()",id:"inputsget_mask_proto",level:3},{value:"Parameters",id:"parameters-45",level:4},{value:"Returns",id:"returns-26",level:4},{value:"Example",id:"example-40",level:4},{value:"Inputs.get_text_input()",id:"inputsget_text_input",level:3},{value:"Parameters",id:"parameters-46",level:4},{value:"Returns",id:"returns-27",level:4},{value:"Return type",id:"return-type-26",level:4},{value:"Example",id:"example-41",level:4},{value:"Inputs.get_text_inputs_from_folder()",id:"inputsget_text_inputs_from_folder",level:3},{value:"Parameters",id:"parameters-47",level:4},{value:"Returns",id:"returns-28",level:4},{value:"Return type",id:"return-type-27",level:4},{value:"Example",id:"example-42",level:4},{value:"Inputs.list_inputs()",id:"inputslist_inputs",level:3},{value:"Parameters",id:"parameters-48",level:4},{value:"Returns",id:"returns-29",level:4},{value:"Return type",id:"return-type-28",level:4},{value:"Example",id:"example-43",level:4},{value:"Inputs.upload_annotations()",id:"inputsupload_annotations",level:3},{value:"Parameters",id:"parameters-49",level:4},{value:"Returns",id:"returns-30",level:4},{value:"Inputs.upload_from_bytes()",id:"inputsupload_from_bytes",level:3},{value:"Parameters",id:"parameters-50",level:4},{value:"Returns",id:"returns-31",level:4},{value:"Return type",id:"return-type-29",level:4},{value:"Example",id:"example-44",level:4},{value:"Inputs.upload_from_file()",id:"inputsupload_from_file",level:3},{value:"Parameters",id:"parameters-51",level:4},{value:"Returns",id:"returns-32",level:4},{value:"Return type",id:"return-type-30",level:4},{value:"Example",id:"example-45",level:4},{value:"Inputs.upload_from_url()",id:"inputsupload_from_url",level:3},{value:"Parameters",id:"parameters-52",level:4},{value:"Returns",id:"returns-33",level:4},{value:"Return type",id:"return-type-31",level:4},{value:"Example",id:"example-46",level:4},{value:"Inputs.upload_inputs()",id:"inputsupload_inputs",level:3},{value:"Parameters",id:"parameters-53",level:4},{value:"Returns",id:"returns-34",level:4},{value:"Return type",id:"return-type-32",level:4},{value:"Inputs.upload_text()",id:"inputsupload_text",level:3},{value:"Parameters",id:"parameters-54",level:4},{value:"Returns",id:"returns-35",level:4},{value:"Return type",id:"return-type-33",level:4},{value:"Example",id:"example-47",level:4},{value:"Input.get_multimodal_input()",id:"inputget_multimodal_input",level:3},{value:"Parameters",id:"parameters-55",level:4},{value:"Returns",id:"returns-36",level:4},{value:"Input.get_bbox_proto()",id:"inputget_bbox_proto",level:3},{value:"Parameters",id:"parameters-56",level:4},{value:"Returns",id:"returns-37",level:4},{value:"Input.list_annotations()",id:"inputlist_annotations",level:3},{value:"Parameters",id:"parameters-57",level:4},{value:"Yields",id:"yields",level:4},{value:"Input.download_inputs()",id:"inputdownload_inputs",level:3},{value:"Parameters",id:"parameters-58",level:4},{value:"Lister",id:"lister",level:2},{value:"Lister.__init__()",id:"lister__init__",level:3},{value:"Parameters",id:"parameters-59",level:4},{value:"Lister.list_pages_generator()",id:"listerlist_pages_generator",level:3},{value:"Parameters",id:"parameters-60",level:4},{value:"Yields",id:"yields-1",level:4},{value:"Model",id:"model",level:2},{value:"Model.__init__()",id:"model__init__",level:3},{value:"Parameters",id:"parameters-61",level:4},{value:"Model.create_version()",id:"modelcreate_version",level:3},{value:"Returns",id:"returns-38",level:4},{value:"Return type",id:"return-type-34",level:4},{value:"Parameters",id:"parameters-62",level:4},{value:"Example",id:"example-48",level:4},{value:"Model.list_versions()",id:"modellist_versions",level:3},{value:"Returns",id:"returns-39",level:4},{value:"Return type",id:"return-type-35",level:4},{value:"Example",id:"example-49",level:4},{value:"Model.predict()",id:"modelpredict",level:3},{value:"Parameters",id:"parameters-63",level:4},{value:"Model.predict_by_bytes()",id:"modelpredict_by_bytes",level:3},{value:"Parameters",id:"parameters-64",level:4},{value:"Example",id:"example-50",level:4},{value:"Model.predict_by_filepath()",id:"modelpredict_by_filepath",level:3},{value:"Parameters",id:"parameters-65",level:4},{value:"Example",id:"example-51",level:4},{value:"Model.predict_by_url()",id:"modelpredict_by_url",level:3},{value:"Parameters",id:"parameters-66",level:4},{value:"Example",id:"example-52",level:4},{value:"Model.list_training_templates()",id:"modellist_training_templates",level:3},{value:"Returns",id:"returns-40",level:4},{value:"Example",id:"example-53",level:4},{value:"Model.get_params()",id:"modelget_params",level:3},{value:"Parameters",id:"parameters-67",level:4},{value:"Returns",id:"returns-41",level:4},{value:"Example",id:"example-54",level:4},{value:"Model.update_params()",id:"modelupdate_params",level:3},{value:"Parameters",id:"parameters-68",level:4},{value:"Example",id:"example-55",level:4},{value:"Model.get_param_info()",id:"modelget_param_info",level:3},{value:"Parameters",id:"parameters-69",level:4},{value:"Example",id:"example-56",level:4},{value:"Model.train()",id:"modeltrain",level:3},{value:"Parameters",id:"parameters-70",level:4},{value:"Example",id:"example-57",level:4},{value:"Model.training_status()",id:"modeltraining_status",level:3},{value:"Parameters",id:"parameters-71",level:4},{value:"Returns",id:"returns-42",level:4},{value:"Example",id:"example-58",level:4},{value:"Model.delete_version()",id:"modeldelete_version",level:3},{value:"Parameters",id:"parameters-72",level:4},{value:"Example",id:"example-59",level:4},{value:"Model.evaluate()",id:"modelevaluate",level:3},{value:"Parameters",id:"parameters-73",level:4},{value:"Returns",id:"returns-43",level:4},{value:"Model.get_eval_by_id()",id:"modelget_eval_by_id",level:3},{value:"Parameters",id:"parameters-74",level:4},{value:"Returns",id:"returns-44",level:4},{value:"Model.get_latest_eval()",id:"modelget_latest_eval",level:3},{value:"Parameters",id:"parameters-75",level:4},{value:"Returns",id:"returns-45",level:4},{value:"Workflow",id:"workflow",level:2},{value:"Workflow.__init__()",id:"workflow__init__",level:3},{value:"Parameters",id:"parameters-76",level:4},{value:"Workflow.list_versions()",id:"workflowlist_versions",level:3},{value:"Returns",id:"returns-46",level:4},{value:"Return type",id:"return-type-36",level:4},{value:"Example",id:"example-60",level:4},{value:"Workflow.predict()",id:"workflowpredict",level:3},{value:"Parameters",id:"parameters-77",level:4},{value:"Workflow.predict_by_bytes()",id:"workflowpredict_by_bytes",level:3},{value:"Parameters",id:"parameters-78",level:4},{value:"Workflow.predict_by_filepath()",id:"workflowpredict_by_filepath",level:3},{value:"Parameters",id:"parameters-79",level:4},{value:"Example",id:"example-61",level:4},{value:"Workflow.predict_by_url()",id:"workflowpredict_by_url",level:3},{value:"Parameters",id:"parameters-80",level:4},{value:"Example",id:"example-62",level:4},{value:"Workflow.export()",id:"workflowexport",level:3},{value:"Parameters",id:"parameters-81",level:4},{value:"Example",id:"example-63",level:4},{value:"Module",id:"module",level:2},{value:"Module.__init__()",id:"module__init__",level:3},{value:"Parameters",id:"parameters-82",level:4},{value:"Module.list_versions()",id:"modulelist_versions",level:3},{value:"Parameters",id:"parameters-83",level:4},{value:"Returns",id:"returns-47",level:4},{value:"Return type",id:"return-type-37",level:4},{value:"Example",id:"example-64",level:4},{value:"Utils",id:"utils",level:2},{value:"Chunker.__init__()",id:"chunker__init__",level:3},{value:"Chunker.chunk()",id:"chunkerchunk",level:3},{value:"Exceptions",id:"exceptions",level:2},{value:"ApiError",id:"apierror",level:3},{value:"ApiClientError",id:"apiclienterror",level:3},{value:"UserError",id:"usererror",level:3},{value:"Runners",id:"runners",level:2},{value:"Runner.__init__()",id:"runner__init__",level:3},{value:"Parameters",id:"parameters-84",level:4},{value:"Runner.start()",id:"runnerstart",level:3},{value:"Runner.run_input()",id:"runnerrun_input",level:3},{value:"Parameters",id:"parameters-85",level:4},{value:"Returns",id:"returns-48",level:4},{value:"Return Type",id:"return-type-38",level:4},{value:"Search",id:"search",level:2},{value:"Search.__init__()",id:"search__init__",level:3},{value:"Parameters",id:"parameters-86",level:4},{value:"Search.query()",id:"searchquery",level:3},{value:"Parameters",id:"parameters-87",level:4},{value:"Returns",id:"returns-49",level:4},{value:"Return Type",id:"return-type-39",level:4},{value:"Exmaple",id:"exmaple",level:4}],u={toc:o},m="wrapper";function g(e){let{components:a,...t}=e;return(0,r.yg)(m,(0,l.A)({},u,t,{components:a,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"api-reference"},"API Reference"),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Clarifai Python SDK API Reference")),(0,r.yg)("hr",null),(0,r.yg)("p",null,"This is the API Reference documentation extracted from the source code."),(0,r.yg)("h2",{id:"user"},"User"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"}," class User(user_id= '',base_url= \"https://api.clarifai.com\",pat= '',token= '',**kwargs)\n")),(0,r.yg)("p",null,"User is a class that provides access to Clarifai API endpoints related to user information."),(0,r.yg)("h3",{id:"user__init__"},"User.","_","_init","_","_()"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"__init__(user_id='',base_url: str = \"https://api.clarifai.com\",pat='',token= '',**kwargs)\n")),(0,r.yg)("p",null,"Initializes a ",(0,r.yg)("strong",{parentName:"p"},"User")," object."),(0,r.yg)("h4",{id:"parameters"},"Parameters"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"user_id")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 The user ID for the user to interact with."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"base_url")," (",(0,r.yg)("em",{parentName:"li"},"str"),') - Base API url. Default "',(0,r.yg)("a",{parentName:"li",href:"https://api.clarifai.com%22"},'https://api.clarifai.com"')),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"pat")," (",(0,r.yg)("em",{parentName:"li"},"str"),") - A personal access token for authentication."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"token")," (",(0,r.yg)("em",{parentName:"li"},"str"),") - A session token for authentication. Accepts either a session token or a pat. Can be set as env var CLARIFAI_SESSION_TOKEN"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"*","*","kwargs")," \u2013 Additional keyword arguments to be passed to the ClarifaiAuthHelper.")),(0,r.yg)("h3",{id:"userapp"},"User.app()"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"app(app_id, **kwargs)\n")),(0,r.yg)("p",null,"Returns an App object for the specified app ID."),(0,r.yg)("h4",{id:"parameters-1"},"Parameters"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"app_id")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 The app ID for the app to interact with."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"*","*","kwargs")," \u2013 Additional keyword arguments to be passed to the App.")),(0,r.yg)("h4",{id:"returns"},"Returns"),(0,r.yg)("p",null,"An App object for the specified app ID."),(0,r.yg)("h4",{id:"return-type"},"Return type"),(0,r.yg)("p",null,"App"),(0,r.yg)("h4",{id:"example"},"Example"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},'from clarifai.client.user import User\napp = User("user_id").app("app_id")\n')),(0,r.yg)("h3",{id:"usercreate_app"},"User.create_app()"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"create_app(app_id, base_workflow='Language-Understanding', **kwargs)\n")),(0,r.yg)("p",null,"Creates an app for the user."),(0,r.yg)("h4",{id:"parameters-2"},"Parameters"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"app_id")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 The app ID for the app to create."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"base_workflow")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 The base workflow to use for the app.(Examples: \u2018Universal\u2019, \u2018Empty\u2019, \u2018General\u2019)"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"*","*","kwargs")," \u2013 Additional keyword arguments to be passed to the App.")),(0,r.yg)("h4",{id:"returns-1"},"Returns"),(0,r.yg)("p",null,"An App object for the specified app ID."),(0,r.yg)("h4",{id:"return-type-1"},"Return type"),(0,r.yg)("p",null,"App"),(0,r.yg)("h4",{id:"example-1"},"Example"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},'from clarifai.client.user import User\nclient = User(user_id="user_id")\napp = client.create_app(app_id="app_id",base_workflow="Universal")\n')),(0,r.yg)("h3",{id:"usercreate_runner"},"User.create_runner()"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"create_runner(runner_id, labels, description='')\n")),(0,r.yg)("p",null,"Creates a runner"),(0,r.yg)("h4",{id:"parameters-3"},"Parameters"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"runner_id")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 The Id of runner to create."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"labels")," (",(0,r.yg)("em",{parentName:"li"},"List","[str]"),") \u2013 Labels to match runner."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"description (str)")," \u2013 Description of Runner.")),(0,r.yg)("h4",{id:"returns-2"},"Returns"),(0,r.yg)("p",null,"A runner object for the specified Runner ID."),(0,r.yg)("h4",{id:"return-type-2"},"Return type"),(0,r.yg)("p",null,"Runner"),(0,r.yg)("h4",{id:"example-2"},"Example"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},'from clarifai.client.user import User\nclient = User(user_id="user_id")\nrunner = client.create_runner(runner_id="runner_id", labels=["label to link runner"], description="laptop runner")\n')),(0,r.yg)("h3",{id:"userdelete_app"},"User.delete_app()"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"delete_app(app_id)\n")),(0,r.yg)("p",null,"Deletes an app for the user."),(0,r.yg)("h4",{id:"parameters-4"},"Parameters"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"app_id")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 The app ID for the app to delete.")),(0,r.yg)("h4",{id:"return-type-3"},"Return type"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"None")),(0,r.yg)("h4",{id:"example-3"},"Example"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},'from clarifai.client.user import User\nuser = User("user_id").delete_app("app_id")\n')),(0,r.yg)("h3",{id:"userdelete_runner"},"User.delete_runner()"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"delete_runner(runner_id)\n")),(0,r.yg)("p",null,"Deletes all specified runner ids."),(0,r.yg)("h4",{id:"parameters-5"},"Parameters"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"runner_ids (str)")," \u2013 List of runners to delete.")),(0,r.yg)("h4",{id:"example-4"},"Example"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},'from clarifai.client.user import User\nclient = User(user_id="user_id")\nclient.delete_runner(runner_id="runner_id")\n')),(0,r.yg)("h3",{id:"userlist_apps"},"User.list_apps()"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"list_apps(filter_by= {}, page_no, per_page)\n")),(0,r.yg)("p",null,"Lists all the apps for the user."),(0,r.yg)("h4",{id:"parameters-6"},"Parameters"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"filter_by")," (",(0,r.yg)("em",{parentName:"li"},"dict"),"): A dictionary of filters to be applied to the list of apps."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"page_no")," (",(0,r.yg)("em",{parentName:"li"},"int"),"): The page number to list."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"per_page")," (",(0,r.yg)("em",{parentName:"li"},"int"),"): The number of items per page.")),(0,r.yg)("h4",{id:"returns-3"},"Returns"),(0,r.yg)("p",null,"A list of App objects for the user."),(0,r.yg)("h4",{id:"return-type-4"},"Return type"),(0,r.yg)("p",null,"List of App"),(0,r.yg)("h4",{id:"example-5"},"Example"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},'from clarifai.client.user import User\napps = User("user_id").list_apps()\n')),(0,r.yg)("h3",{id:"userlist_runners"},"User.list_runners()"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"list_runners(filter_by={}, page_no, per_page)\n")),(0,r.yg)("p",null,"List all runners for the user."),(0,r.yg)("h4",{id:"parameters-7"},"Parameters"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"filter_by")," (",(0,r.yg)("em",{parentName:"li"},"dict"),"): A dictionary of filters to be applied to the list of apps."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"page_no")," (",(0,r.yg)("em",{parentName:"li"},"int"),"): The page number to list."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"per_page")," (",(0,r.yg)("em",{parentName:"li"},"int"),"): The number of items per page.")),(0,r.yg)("h4",{id:"returns-4"},"Returns"),(0,r.yg)("p",null,"A list of Runner objects for the runners."),(0,r.yg)("h4",{id:"return-type-5"},"Return type"),(0,r.yg)("p",null," List","[Runner]"),(0,r.yg)("h4",{id:"example-6"},"Example"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},'from clarifai.client.user import User\nclient = User(user_id="user_id")\nall_runners= client.list_runners()\n')),(0,r.yg)("h3",{id:"userrunner"},"User.runner()"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"runner(runner_id)\n")),(0,r.yg)("p",null,"Returns a Runner object if exists."),(0,r.yg)("h4",{id:"parameters-8"},"Parameters"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"runner_id")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 The runner ID to interact with.")),(0,r.yg)("h4",{id:"returns-5"},"Returns"),(0,r.yg)("p",null,"A Runner object for the existing runner ID."),(0,r.yg)("h4",{id:"return-type-6"},"Return type"),(0,r.yg)("p",null,"Runner"),(0,r.yg)("h4",{id:"example-7"},"Example"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},'from clarifai.client.user import User\nclient = User(user_id="user_id")\nrunner = client.runner(runner_id="runner_id")\n')),(0,r.yg)("h2",{id:"app"},"App"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"class App(url='', app_id='',base_url= \"https://api.clarifai.com\",pat='',token='',**kwargs)\n")),(0,r.yg)("p",null,"App is a class that provides access to Clarifai API endpoints related to App information."),(0,r.yg)("h3",{id:"app__init__"},"App.","_","_init","_","_()"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"__init__(url='', app_id='',base_url= \"https://api.clarifai.com\",pat='',token='',**kwargs)\n")),(0,r.yg)("p",null,"Initializes an App object."),(0,r.yg)("h4",{id:"parameters-9"},"Parameters"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"url")," (",(0,r.yg)("em",{parentName:"li"},"str"),") -  The URL to initialize the app object."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"app_id")," (",(0,r.yg)("em",{parentName:"li"},"str"),") -  The App ID for the App to interact with."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"base_url")," (",(0,r.yg)("em",{parentName:"li"},"str"),') -  Base API url. Default "',(0,r.yg)("a",{parentName:"li",href:"https://api.clarifai.com%22"},'https://api.clarifai.com"')),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"pat")," (",(0,r.yg)("em",{parentName:"li"},"str"),") -  A personal access token for authentication."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"token")," (",(0,r.yg)("em",{parentName:"li"},"str"),") - A session token for authentication. Accepts either a session token or a pat. Can be set as env var CLARIFAI_SESSION_TOKEN",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"*","*","kwargs")," \u2013 Additional keyword arguments to be passed to the ClarifaiAuthHelper:",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},"name (str): The name of the app."),(0,r.yg)("li",{parentName:"ul"},"description (str): The description of the app.")))))),(0,r.yg)("h3",{id:"appcreate_dataset"},"App.create_dataset()"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"create_dataset(dataset_id, **kwargs)\n")),(0,r.yg)("p",null,"Creates a dataset for the app."),(0,r.yg)("h4",{id:"parameters-10"},"Parameters"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"dataset_id")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 The dataset ID for the dataset to create."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"*","*","kwargs")," \u2013 Additional keyword arguments to be passed to the Dataset.")),(0,r.yg)("h4",{id:"returns-6"},"Returns"),(0,r.yg)("p",null,"  A Dataset object for the specified dataset ID."),(0,r.yg)("h4",{id:"return-type-7"},"Return type"),(0,r.yg)("p",null,"  Dataset"),(0,r.yg)("h4",{id:"example-8"},"Example"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},'from clarifai.client.app import App\napp = App(app_id="app_id", user_id="user_id")\ndataset = app.create_dataset(dataset_id="dataset_id")\n')),(0,r.yg)("h3",{id:"appcreate_model"},"App.create_model()"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"create_model(model_id, **kwargs)\n")),(0,r.yg)("p",null,"Creates a model for the app."),(0,r.yg)("h4",{id:"parameters-11"},"Parameters"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"model_id")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 The model ID for the model to create."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"*","*","kwargs")," \u2013 Additional keyword arguments to be passed to the Model.")),(0,r.yg)("h4",{id:"returns-7"},"Returns"),(0,r.yg)("p",null,"  A Model object for the specified model ID."),(0,r.yg)("h4",{id:"return-type-8"},"Return type"),(0,r.yg)("p",null,"Model"),(0,r.yg)("h4",{id:"example-9"},"Example"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},'from clarifai.client.app import App\napp = App(app_id="app_id", user_id="user_id")\nmodel = app.create_model(model_id="model_id")\n')),(0,r.yg)("h3",{id:"appcreate_module"},"App.create_module()"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"create_module(module_id, description, **kwargs)\n")),(0,r.yg)("p",null,"Creates a module for the app."),(0,r.yg)("h4",{id:"parameters-12"},"Parameters"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"module_id")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 The module ID for the module to create."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"description")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 The description of the module to create."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"*","*","kwargs")," \u2013 Additional keyword arguments to be passed to the module.")),(0,r.yg)("h4",{id:"returns-8"},"Returns"),(0,r.yg)("p",null,"  A Module object for the specified module ID."),(0,r.yg)("h4",{id:"return-type-9"},"Return type"),(0,r.yg)("p",null,"  Module"),(0,r.yg)("h4",{id:"example-10"},"Example"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},'from clarifai.client.app import App\napp = App(app_id="app_id", user_id="user_id")\nmodule = app.create_module(module_id="module_id")\n')),(0,r.yg)("h3",{id:"appcreate_workflow"},"App.create_workflow()"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"create_workflow(config_filepath, generate_new_id, display)\n")),(0,r.yg)("p",null,"Creates a workflow for the app."),(0,r.yg)("h4",{id:"parameters-13"},"Parameters"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"config_filepath")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 The path to the yaml workflow config file."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"generate_new_id")," (",(0,r.yg)("em",{parentName:"li"},"bool"),") \u2013 If True, generate a new workflow ID."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"display")," (",(0,r.yg)("em",{parentName:"li"},"bool"),") \u2013 If True, display the workflow nodes tree.")),(0,r.yg)("h4",{id:"returns-9"},"Returns"),(0,r.yg)("p",null,"  A Workflow object for the specified workflow config."),(0,r.yg)("h4",{id:"return-type-10"},"Return type"),(0,r.yg)("p",null,"  Workflow"),(0,r.yg)("h4",{id:"example-11"},"Example"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},'from clarifai.client.app import App\napp = App(user_id="user_id", app_id="app_id")\nworkflow = app.create_workflow(config_filepath="config.yml")\n')),(0,r.yg)("h3",{id:"appdataset"},"App.dataset()"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"dataset(dataset_id, **kwargs)\n")),(0,r.yg)("p",null,"Returns a Dataset object for the existing dataset ID."),(0,r.yg)("h4",{id:"parameters-14"},"Parameters"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"dataset_id")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 The dataset ID for the dataset to interact with.")),(0,r.yg)("h4",{id:"returns-10"},"Returns"),(0,r.yg)("p",null,"A Dataset object for the existing dataset ID."),(0,r.yg)("h4",{id:"return-type-11"},"Return type"),(0,r.yg)("p",null,"Dataset"),(0,r.yg)("h4",{id:"example-12"},"Example"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},'from clarifai.client.app import App\napp = App(app_id="app_id", user_id="user_id")\ndataset = app.dataset(dataset_id="dataset_id")\n')),(0,r.yg)("h3",{id:"appdelete_dataset"},"App.delete_dataset()"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"delete_dataset(dataset_id)\n")),(0,r.yg)("p",null,"Deletes a dataset for the user."),(0,r.yg)("h4",{id:"parameters-15"},"Parameters"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"dataset_id")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 The dataset ID for the app to delete.")),(0,r.yg)("h4",{id:"example-13"},"Example"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},'from clarifai.client.app import App\napp = App(app_id="app_id", user_id="user_id")\napp.delete_dataset(dataset_id="dataset_id")\n')),(0,r.yg)("h3",{id:"appdelete_model"},"App.delete_model()"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"delete_model(model_id)\n")),(0,r.yg)("p",null,"Deletes a model for the user."),(0,r.yg)("h4",{id:"parameters-16"},"Parameters"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"model_id")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 The model ID for the app to delete.")),(0,r.yg)("h4",{id:"example-14"},"Example"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},'from clarifai.client.app import App\napp = App(app_id="app_id", user_id="user_id")\napp.delete_model(model_id="model_id")\n')),(0,r.yg)("h3",{id:"appdelete_module"},"App.delete_module()"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"delete_module(module_id)\n")),(0,r.yg)("p",null,"Deletes a module for the user."),(0,r.yg)("h4",{id:"parameters-17"},"Parameters"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"module_id")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 The module ID for the app to delete.")),(0,r.yg)("h4",{id:"example-15"},"Example"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},'from clarifai.client.app import App\napp = App(app_id="app_id", user_id="user_id")\napp.delete_module(module_id="module_id")\n')),(0,r.yg)("h3",{id:"appdelete_workflow"},"App.delete_workflow()"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"delete_workflow(workflow_id)\n")),(0,r.yg)("p",null,"Deletes a workflow for the user."),(0,r.yg)("h4",{id:"parameters-18"},"Parameters"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"workflow_id")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 The workflow ID for the app to delete.")),(0,r.yg)("h4",{id:"example-16"},"Example"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},'from clarifai.client.app import App\napp = App(app_id="app_id", user_id="user_id")\napp.delete_workflow(workflow_id="workflow_id")\n')),(0,r.yg)("h3",{id:"appinputs"},"App.inputs()"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"inputs()\n")),(0,r.yg)("p",null,"Returns an Input object."),(0,r.yg)("h4",{id:"returns-11"},"Returns"),(0,r.yg)("p",null,"  An input object."),(0,r.yg)("h4",{id:"return-type-12"},"Return type"),(0,r.yg)("p",null,"  Inputs"),(0,r.yg)("h3",{id:"applist_concepts"},"App.list_concepts()"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"list_concepts(page_no,per_page)\n")),(0,r.yg)("p",null,"Lists all the concepts for the app."),(0,r.yg)("h4",{id:"parameters-19"},"Parameters"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"page_no")," (",(0,r.yg)("em",{parentName:"li"},"int"),") -  The page number to list."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"per_page")," (",(0,r.yg)("em",{parentName:"li"},"int"),") -  The number of items per page.")),(0,r.yg)("h3",{id:"applist_datasets"},"App.list_datasets()"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"list_datasets(page_no,per_page)\n")),(0,r.yg)("p",null,"Lists all the datasets for the app."),(0,r.yg)("h4",{id:"parameters-20"},"Parameters"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"page_no")," (",(0,r.yg)("em",{parentName:"li"},"int"),") - The page number to list."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"per_page")," (",(0,r.yg)("em",{parentName:"li"},"int"),") - The number of items per page.")),(0,r.yg)("h4",{id:"returns-12"},"Returns"),(0,r.yg)("p",null,"  A list of Dataset objects for the datasets in the app."),(0,r.yg)("h4",{id:"return-type-13"},"Return type"),(0,r.yg)("p",null,"  List","[Dataset]"),(0,r.yg)("h4",{id:"example-17"},"Example"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},'from clarifai.client.app import App\napp = App(app_id="app_id", user_id="user_id")\nall_datasets = app.list_datasets()\n')),(0,r.yg)("h3",{id:"applist_installed_module_versions"},"App.list_installed_module_versions()"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"list_installed_module_versions(filter_by={},page_no,per_page)\n")),(0,r.yg)("p",null,"Lists all installed module versions in the app."),(0,r.yg)("h4",{id:"parameters-21"},"Parameters"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"filter_by")," (",(0,r.yg)("em",{parentName:"li"},"dict"),") \u2013 A dictionary of filters to apply to the list of installed module versions."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"page_no")," (",(0,r.yg)("em",{parentName:"li"},"int"),") - The page number to list."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"per_page")," (",(0,r.yg)("em",{parentName:"li"},"int"),") - The number of items per page.")),(0,r.yg)("h4",{id:"returns-13"},"Returns"),(0,r.yg)("p",null,"  A list of Module objects for the installed module versions in the app."),(0,r.yg)("h4",{id:"return-type-14"},"Return type"),(0,r.yg)("p",null,"List","[Module]"),(0,r.yg)("h4",{id:"example-18"},"Example"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},'from clarifai.client.app import App\napp = App(app_id="app_id", user_id="user_id")\nall_installed_module_versions = app.list_installed_module_versions()\n')),(0,r.yg)("h3",{id:"applist_models"},"App.list_models()"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"list_models(filter_by={}, only_in_app=True,page_no,per_page)\n")),(0,r.yg)("p",null,"Lists all the available models for the user."),(0,r.yg)("h4",{id:"parameters-22"},"Parameters"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"filter_by")," (",(0,r.yg)("em",{parentName:"li"},"dict"),") \u2013 A dictionary of filters to apply to the list of models."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"only_in_app")," (",(0,r.yg)("em",{parentName:"li"},"bool"),") \u2013 If True, only return models that are in the app."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"page_no")," (",(0,r.yg)("em",{parentName:"li"},"int"),") -  The page number to list."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"per_page")," (",(0,r.yg)("em",{parentName:"li"},"int"),") - The number of items per page.")),(0,r.yg)("h4",{id:"returns-14"},"Returns"),(0,r.yg)("p",null,"A list of Model objects for the models in the app."),(0,r.yg)("h4",{id:"return-type-15"},"Return type"),(0,r.yg)("p",null,"List","[Model]"),(0,r.yg)("h4",{id:"example-19"},"Example"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},'from clarifai.client.user import User\napp = User(user_id="user_id").app(app_id="app_id")\nall_models = app.list_models()\n')),(0,r.yg)("h3",{id:"applist_modules"},"App.list_modules()"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"list_modules(filter_by={}, only_in_app=True,page_no,per_page)\n")),(0,r.yg)("p",null,"Lists all the available modules for the user."),(0,r.yg)("h4",{id:"parameters-23"},"Parameters"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"filter_by")," (",(0,r.yg)("em",{parentName:"li"},"dict"),") \u2013 A dictionary of filters to apply to the list of modules."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"only_in_app")," (",(0,r.yg)("em",{parentName:"li"},"bool"),") \u2013 If True, only return modules that are in the app."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"page_no")," (",(0,r.yg)("em",{parentName:"li"},"int"),") - The page number to list."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"per_page")," (",(0,r.yg)("em",{parentName:"li"},"int"),") - The number of items per page.")),(0,r.yg)("h5",{id:"returns-15"},"Returns"),(0,r.yg)("p",null,"A list of Module objects for the modules in the app."),(0,r.yg)("h5",{id:"return-type-16"},"Return type"),(0,r.yg)("p",null,"List","[Module]"),(0,r.yg)("h4",{id:"example-20"},"Example"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},'from clarifai.client.app import App\napp = App(app_id="app_id", user_id="user_id")\nall_modules = app.list_modules()\n')),(0,r.yg)("h3",{id:"applist_workflows"},"App.list_workflows()"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"list_workflows(filter_by={}, only_in_app=True, page_no,per_page)\n")),(0,r.yg)("p",null,"Lists all the available workflows for the user."),(0,r.yg)("h4",{id:"parameters-24"},"Parameters"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"filter_by")," (",(0,r.yg)("em",{parentName:"li"},"dict"),") \u2013 A dictionary of filters to apply to the list of workflows."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"only_in_app")," (",(0,r.yg)("em",{parentName:"li"},"bool"),") \u2013 If True, only return workflows that are in the app."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"page_no")," (",(0,r.yg)("em",{parentName:"li"},"int"),") - The page number to list."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"per_page")," (",(0,r.yg)("em",{parentName:"li"},"int"),") - The number of items per page.")),(0,r.yg)("h4",{id:"returns-16"},"Returns"),(0,r.yg)("p",null,"A list of Workflow objects for the workflows in the app."),(0,r.yg)("h4",{id:"return-type-17"},"Return type"),(0,r.yg)("p",null,"List Workflow"),(0,r.yg)("h4",{id:"example-21"},"Example"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},'from clarifai.client.app import App\napp = App(app_id="app_id", user_id="user_id")\nall_workflows = app.list_workflows()\n')),(0,r.yg)("h3",{id:"applist_trainable_model_types"},"App.list_trainable_model_types()"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"list_trainable_model_types()\n")),(0,r.yg)("p",null,"Lists all the trainable model types."),(0,r.yg)("h4",{id:"example-22"},"Example"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"from clarifai.client.app import App\nprint(app.list_trainable_model_types())\n")),(0,r.yg)("h3",{id:"appsearch"},"App.search()"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"search(**kwargs)\n")),(0,r.yg)("p",null,"Returns a Search object for the user and app ID."),(0,r.yg)("h4",{id:"parameters-25"},"Parameters"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"*","*","kwargs")," - See the Search class.")),(0,r.yg)("h4",{id:"returns-17"},"Returns"),(0,r.yg)("p",null,"A Search object for the user and app ID."),(0,r.yg)("h4",{id:"example-23"},"Example"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},'from clarifai.client.app import App\napp = App(app_id="app_id", user_id="user_id")\nsearch_client = app.search(top_k=12, metric="euclidean")\n')),(0,r.yg)("h3",{id:"appmodel"},"App.model()"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"model(model_id, model_version_id='', **kwargs)\n")),(0,r.yg)("p",null,"Returns a Model object for the existing model ID."),(0,r.yg)("h4",{id:"parameters-26"},"Parameters"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"model_id")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 The model ID for the model to interact with."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"model_version_id")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 The model version ID for the model version to interact with.")),(0,r.yg)("h5",{id:"returns-18"},"Returns"),(0,r.yg)("p",null,"A Model object for the existing model ID."),(0,r.yg)("h4",{id:"return-type-18"},"Return type"),(0,r.yg)("p",null,"Model"),(0,r.yg)("h4",{id:"example-24"},"Example"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},'from clarifai.client.app import App\napp = App(app_id="app_id", user_id="user_id")\nmodel_v1 = app.model(model_id="model_id", model_version_id="model_version_id")\n')),(0,r.yg)("h3",{id:"appmodule"},"App.module()"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"module(module_id, module_version_id='', **kwargs)\n")),(0,r.yg)("p",null,"Returns a Module object for the existing module ID."),(0,r.yg)("h4",{id:"parameters-27"},"Parameters"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"module_id")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 The module ID for the module to interact with."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"module_version_id")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 The module version ID for the module version to interact with.")),(0,r.yg)("h4",{id:"returns-19"},"Returns"),(0,r.yg)("p",null,"A Module object for the existing module ID."),(0,r.yg)("h4",{id:"return-type-19"},"Return type"),(0,r.yg)("p",null,"Module"),(0,r.yg)("h4",{id:"example-25"},"Example"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},'from clarifai.client.app import App\napp = App(app_id="app_id", user_id="user_id")\nmodule = app.module(module_id="module_id", module_version_id="module_version_id")\n')),(0,r.yg)("h3",{id:"appworkflow"},"App.workflow()"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"workflow(workflow_id, **kwargs)\n")),(0,r.yg)("p",null,"Returns a workflow object for the existing workflow ID."),(0,r.yg)("h4",{id:"parameters-28"},"Parameters"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"workflow_id")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 The workflow ID for the workflow to interact with.")),(0,r.yg)("h4",{id:"returns-20"},"Returns"),(0,r.yg)("p",null,"A Workflow object for the existing workflow ID."),(0,r.yg)("h4",{id:"return-type-20"},"Return type"),(0,r.yg)("p",null,"Workflow"),(0,r.yg)("h4",{id:"example-26"},"Example"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},'from clarifai.client.app import App\napp = App(app_id="app_id", user_id="user_id")\nworkflow = app.workflow(workflow_id="workflow_id")\n')),(0,r.yg)("h2",{id:"dataset"},"Dataset"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"class Dataset(url='',dataset_id='',base_url= \"https://api.clarifai.com\",pat= '',token='',**kwargs)\n")),(0,r.yg)("h3",{id:"dataset__init__"},"Dataset.","_","_init","_","_()"),(0,r.yg)("p",null,"Dataset is a class that provides access to Clarifai API endpoints related to Dataset information."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"__init__(url='',dataset_id='',base_url= \"https://api.clarifai.com\",pat= '',token='',**kwargs)\n")),(0,r.yg)("p",null,"Initializes a Dataset object."),(0,r.yg)("h4",{id:"parameters-29"},"Parameters"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"url")," (",(0,r.yg)("em",{parentName:"li"},"str"),") - The URL to initialize the dataset object."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"dataset_id")," (",(0,r.yg)("em",{parentName:"li"},"str"),") - The Dataset ID within the App to interact with."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"base_url")," (",(0,r.yg)("em",{parentName:"li"},"str"),') - Base API url. Default "',(0,r.yg)("a",{parentName:"li",href:"https://api.clarifai.com%22"},'https://api.clarifai.com"')),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"pat")," (",(0,r.yg)("em",{parentName:"li"},"str"),") - A personal access token for authentication. Can be set as env var CLARIFAI_PAT"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"token")," (",(0,r.yg)("em",{parentName:"li"},"str"),") - A session token for authentication. Accepts either a session token or a pat. Can be set as env var CLARIFAI_SESSION_TOKEN"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"*","*","kwargs")," \u2013  Additional keyword arguments to be passed to the Dataset")),(0,r.yg)("h3",{id:"datasetexport"},"Dataset.export()"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"export(save_path='',archive_url=''local_archive_path='',split='',num_workers)\n")),(0,r.yg)("p",null,"Exports the Clarifai protobuf dataset to a local archive."),(0,r.yg)("h4",{id:"parameters-30"},"Parameters"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"save_path")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 The path to save the archive to."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"archive_url")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 The URL to the Clarifai protobuf archive."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"local_archive_path")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 The path to the local Clarifai protobuf archive."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"split")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 Export dataset inputs in the directory format {split}/{input_type}. Default is all."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"num_workers")," (",(0,r.yg)("em",{parentName:"li"},"int"),") - Number of workers to use for downloading the archive. Default is 4.")),(0,r.yg)("h4",{id:"example-27"},"Example"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"from clarifai.client.dataset import Dataset\nDataset().export(save_path='output.zip', local_archive_path='clarifai-data-protobuf.zip')\n")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Note:")," Currently only supports export of dataset inputs."),(0,r.yg)("h3",{id:"datasetupload_dataset"},"Dataset.upload_dataset()"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"upload_dataset(dataloader,batch_size,get_upload_status,log_warnings)\n")),(0,r.yg)("p",null,"Uploads a dataset to the app."),(0,r.yg)("h4",{id:"parameters-31"},"Parameters"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"dataloader")," (",(0,r.yg)("em",{parentName:"li"},"Type","[ClarifaiDataLoader]"),") - ClarifaiDataLoader object"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"batch_size")," (",(0,r.yg)("em",{parentName:"li"},"int"),") - batch size for concurrent upload of inputs and annotations (max: 128)"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"get_upload_status")," (",(0,r.yg)("em",{parentName:"li"},"bool"),") - True if you want to get the upload status of the dataset"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"log_warnings")," (",(0,r.yg)("em",{parentName:"li"},"bool"),") - True if you want to save log warnings in a file")),(0,r.yg)("h3",{id:"datasetupload_from_csv"},"Dataset.upload_from_csv()"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"upload_from_csv(csv_path='',input_type='text',csv_type='',labels='',batch_size)\n")),(0,r.yg)("p",null,"Uploads dataset from a CSV file."),(0,r.yg)("h4",{id:"parameters-32"},"Parameters"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"csv_path")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 path to the csv file"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"input_type")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 type of the dataset(text, image)"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"csv_type")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 type of the csv file(raw, url, file_path)"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"labels")," (",(0,r.yg)("em",{parentName:"li"},"bool"),") \u2013 True if csv file has labels column"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"batch_size")," (",(0,r.yg)("em",{parentName:"li"},"int"),") - batch size for concurrent upload of inputs and annotations")),(0,r.yg)("h4",{id:"example-28"},"Example"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"from clarifai.client.dataset import Dataset\ndataset = Dataset(user_id = 'user_id', app_id = 'demo_app', dataset_id = 'demo_dataset')\ndataset.upload_from_csv(csv_path='csv_path', input_type='text', csv_type='raw', labels=True)\n")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Note"),": csv file should have either one(input) or two columns(input, labels)."),(0,r.yg)("h3",{id:"datasetupload_from_folder"},"Dataset.upload_from_folder()"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"upload_from_folder(folder_path='',input_type='',labels,batch_size)\n")),(0,r.yg)("p",null,"Upload dataset from folder."),(0,r.yg)("h4",{id:"parameters-33"},"Parameters"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"folder_path")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 Path to the folder containing images."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"input_type")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 type of the dataset(text, image)"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"labels")," (",(0,r.yg)("em",{parentName:"li"},"bool"),") \u2013 True if folder name is the label for the inputs"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"batch_size")," (",(0,r.yg)("em",{parentName:"li"},"int"),") - batch size for concurrent upload of inputs and annotations")),(0,r.yg)("h4",{id:"example-29"},"Example"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"from clarifai.client.dataset import Dataset\ndataset = Dataset(user_id = 'user_id', app_id = 'demo_app', dataset_id = 'demo_dataset')\ndataset.upload_from_folder(folder_path='folder_path', input_type='text', labels=True)\n")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Note"),": The filename is used as the input_id."),(0,r.yg)("h3",{id:"datasetget_upload_status"},"Dataset.get_upload_status()"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"get_upload_status(dataloader,delete_version,timeout,pre_upload_stats,pre_upload)\n")),(0,r.yg)("p",null,"Creates a new dataset version and displays the upload status of the dataset."),(0,r.yg)("h4",{id:"parameters-34"},"Parameters"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"dataloader")," (",(0,r.yg)("em",{parentName:"li"},"Type","[ClarifaiDataLoader]"),") - ClarifaiDataLoader object"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"delete_version")," (",(0,r.yg)("em",{parentName:"li"},"bool"),") - True if you want to delete the version after getting the upload status"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"timeout")," (",(0,r.yg)("em",{parentName:"li"},"int"),") - Timeout in seconds for getting the upload status. Default is 600 seconds."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"pre_upload_stats")," (",(0,r.yg)("em",{parentName:"li"},"Tuple[Dict","[str, int]",", Dict","[str, int]","]"),") - The pre upload stats for the dataset."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"pre_upload")," (",(0,r.yg)("em",{parentName:"li"},"bool"),") - True if you want to get the pre upload stats for the dataset.")),(0,r.yg)("h4",{id:"example-30"},"Example"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"from clarifai.client.dataset import Dataset\ndataset = Dataset(dataset_id='dataset_id', user_id='user_id', app_id='app_id')\ndataset.get_upload_status(dataloader)\n")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Note"),": This is a beta feature and is subject to change."),(0,r.yg)("h3",{id:"datasetlist_versions"},"Dataset.list_versions()"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"list_versions(page_no,per_page)\n")),(0,r.yg)("p",null,"Lists all the versions for the dataset."),(0,r.yg)("h4",{id:"parameters-35"},"Parameters"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"page_no")," (",(0,r.yg)("em",{parentName:"li"},"int"),") - The page number to list."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"per_page")," (",(0,r.yg)("em",{parentName:"li"},"int"),") - The number of items per page.")),(0,r.yg)("h4",{id:"example-31"},"Example"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"from clarifai.client.dataset import Dataset\ndataset = Dataset(dataset_id='dataset_id', user_id='user_id', app_id='app_id')\nall_dataset_versions = list(dataset.list_versions())\n")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Note"),":  Defaults to 16 per page if page_no is specified and per_page is not specified.If both page_no and per_page are None, then lists all the resources."),(0,r.yg)("h3",{id:"datasetcreate_version"},"Dataset.create_version()"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"create_version(**kwargs)\n")),(0,r.yg)("p",null,"Creates a dataset version for the Dataset."),(0,r.yg)("h4",{id:"parameters-36"},"Parameters"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"*","*","kwargs")," - Additional keyword arguments to be passed to Dataset Version.",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"description")," (",(0,r.yg)("em",{parentName:"li"},"str"),") - The description of the dataset version."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"metadata")," (",(0,r.yg)("em",{parentName:"li"},"dict"),") - The metadata of the dataset version.*")))),(0,r.yg)("h4",{id:"example-32"},"Example"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"from clarifai.client.dataset import Dataset\ndataset = Dataset(dataset_id='dataset_id', user_id='user_id', app_id='app_id')\ndataset_version = dataset.create_version(description='dataset_version_description')\n")),(0,r.yg)("h3",{id:"datasetdelete_version"},"Dataset.delete_version()"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"delete_version(version_id='')\n")),(0,r.yg)("p",null,"Deletes a dataset version for the Dataset."),(0,r.yg)("h4",{id:"parameters-37"},"Parameters"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"version_id")," (",(0,r.yg)("em",{parentName:"li"},"str"),") - The version ID to delete.")),(0,r.yg)("h4",{id:"example-33"},"Example"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"from clarifai.client.dataset import Dataset\ndataset = Dataset(dataset_id='dataset_id', user_id='user_id', dataset.delete_version(version_id='version_id')\n")),(0,r.yg)("h2",{id:"input"},"Input"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"class Inputs(user_id='',app_id='',logger_level=\"INFO\",base_url=\"https://api.clarifai.com\",pat='',token='',**kwargs)\n")),(0,r.yg)("p",null,"Inputs is a class that provides access to Clarifai API endpoints related to Input information."),(0,r.yg)("h3",{id:"inputs__init__"},"Inputs.","_","_init","_","_()"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"__init__(user_id='',app_id='',logger_level=\"INFO\",base_url=\"https://api.clarifai.com\",pat='',token='',**kwargs)\n")),(0,r.yg)("p",null,"Initializes an Input object."),(0,r.yg)("h4",{id:"parameters-38"},"Parameters"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"user_id")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 A user ID for authentication."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"app_id")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 An app ID for the application to interact with."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"base_url")," (",(0,r.yg)("em",{parentName:"li"},"str"),') - Base API url. Default "',(0,r.yg)("a",{parentName:"li",href:"https://api.clarifai.com%22"},'https://api.clarifai.com"')),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"token")," (",(0,r.yg)("em",{parentName:"li"},"str"),") - A session token for authentication. Accepts either a session token or a pat. Can be set as env var CLARIFAI_SESSION_TOKEN"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"*","*","kwargs")," \u2013 Additional keyword arguments to be passed to the Input")),(0,r.yg)("h3",{id:"inputsdelete_inputs"},"Inputs.delete_inputs()"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"delete_inputs(inputs)\n")),(0,r.yg)("p",null,"Delete list of input objects from the app."),(0,r.yg)("h4",{id:"parameters-39"},"Parameters"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"inputs")," (",(0,r.yg)("em",{parentName:"li"},"Input"),") \u2013 List of input objects to delete.")),(0,r.yg)("h4",{id:"example-34"},"Example"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},'from clarifai.client.user import User\ninput_obj = User(user_id="user_id").app(app_id="app_id").inputs()\ninput_obj.delete_inputs(input_obj.list_inputs())\n')),(0,r.yg)("h3",{id:"inputsget_image_inputs_from_folder"},"Inputs.get_image_inputs_from_folder()"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"get_image_inputs_from_folder(folder_path, dataset_id='', labels)\n")),(0,r.yg)("p",null,"Create input protos for image data type from folder."),(0,r.yg)("h4",{id:"parameters-40"},"Parameters"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"folder_path")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 Path to the folder containing images.")),(0,r.yg)("h4",{id:"returns-21"},"Returns"),(0,r.yg)("p",null,"  A list of Input objects for the specified folder."),(0,r.yg)("h4",{id:"return-type-21"},"Return type"),(0,r.yg)("p",null,"  List of Input"),(0,r.yg)("h4",{id:"example-35"},"Example"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"from clarifai.client.input import Input\ninput_obj = Input()\ninput_protos = input_obj.get_image_inputs_from_folder(folder_path='demo_folder')\n")),(0,r.yg)("h3",{id:"inputsget_input_from_bytes"},"Inputs.get_input_from_bytes()"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"get_input_from_bytes(input_id, image_bytes, video_bytes, audio_bytes,text_bytes, dataset_id='', **kwargs)\n")),(0,r.yg)("p",null,"Create input proto from bytes."),(0,r.yg)("h4",{id:"parameters-41"},"Parameters"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"input_id")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 The input ID for the input to create."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"image_bytes")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 The bytes for the image."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"video_bytes")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 The bytes for the video."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"audio_bytes")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 The bytes for the audio."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"text_bytes")," (",(0,r.yg)("em",{parentName:"li"},"str"),") - The bytes for the text."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"dataset_id")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 The dataset ID for the dataset to add the input to.")),(0,r.yg)("h4",{id:"returns-22"},"Returns"),(0,r.yg)("p",null,"  An Input object for the specified input ID."),(0,r.yg)("h4",{id:"return-type-22"},"Return type"),(0,r.yg)("p",null,"  Input"),(0,r.yg)("h4",{id:"example-36"},"Example"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"from clarifai.client.input import Input\ninput_obj = Input()\nimage = open('demo.jpg', 'rb').read()\nvideo = open('demo.mp4', 'rb').read()\ninput_proto = input_obj.get_input_from_bytes(input_id = 'demo',image_bytes =image, video_bytes=video)\n")),(0,r.yg)("h3",{id:"inputsget_input_from_file"},"Inputs.get_input_from_file()"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"get_input_from_file(input_id, image_file, video_file, audio_file,text_file, dataset_id='', **kwargs)\n")),(0,r.yg)("p",null,"Create input proto from files."),(0,r.yg)("h4",{id:"parameters-42"},"Parameters"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"input_id")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 The input ID for the input to create."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"image_file")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 The file for the image."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"video_file")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 The file for the video."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"audio_file")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 The file for the audio."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"text_file")," (",(0,r.yg)("em",{parentName:"li"},"str"),") - The file for the text."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"dataset_id")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 The dataset ID for the dataset to add the input to.")),(0,r.yg)("h4",{id:"returns-23"},"Returns"),(0,r.yg)("p",null,"  An Input object for the specified input ID."),(0,r.yg)("h4",{id:"return-type-23"},"Return type"),(0,r.yg)("p",null,"  Input"),(0,r.yg)("h4",{id:"example-37"},"Example"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"from clarifai.client.input import Input\ninput_obj = Input()\ninput_proto = input_obj.get_input_from_file(input_id = 'demo', video_file='file_path')\n")),(0,r.yg)("h3",{id:"inputsget_input_from_url"},"Inputs.get_input_from_url()"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"get_input_from_url(input_id, image_url, video_url, audio_url, text_url, dataset_id, **kwargs)\n")),(0,r.yg)("p",null,"Create input proto from URL."),(0,r.yg)("h4",{id:"parameters-43"},"Parameters"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"input_id")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 The input ID for the input to create."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"image_url")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 The url for the image."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"video_url")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 The url for the video."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"audio_url")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 The url for the audio."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"text_url")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 The url for the text."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"dataset_id")," (",(0,r.yg)("em",{parentName:"li"},"str"),") - The dataset ID for the dataset to add the input to.")),(0,r.yg)("h4",{id:"returns-24"},"Returns"),(0,r.yg)("p",null,"  An Input object for the specified input ID."),(0,r.yg)("h4",{id:"return-type-24"},"Return type"),(0,r.yg)("p",null,"  Input"),(0,r.yg)("h4",{id:"example-38"},"Example"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"from clarifai.client.input import Input\ninput_obj = Input()\ninput_proto = input_obj.get_input_from_url(input_id = 'demo', image_url='https://samples.clarifai.com/metro-north.jpg')\n")),(0,r.yg)("h3",{id:"inputsget_inputs_from_csv"},"Inputs.get_inputs_from_csv()"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"get_inputs_from_csv(csv_path='',input_type ='text',csv_type= 'raw',dataset_id='',labels)\n")),(0,r.yg)("p",null,"Create input protos from CSV."),(0,r.yg)("h4",{id:"parameters-44"},"Parameters"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"csv_path")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 Path to the csv file."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"input_type")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 Type of input. Options: \u2018text\u2019, \u2018image\u2019, \u2018video\u2019, \u2018audio\u2019."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"csv_type")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 Type of csv file. Options: \u2018raw\u2019, \u2018url\u2019, \u2018file_path\u2019."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"dataset_id")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 The dataset ID for the dataset to add the input to."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"labels")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 True if csv file has labels column.")),(0,r.yg)("h4",{id:"returns-25"},"Returns"),(0,r.yg)("p",null,"List of inputs"),(0,r.yg)("h4",{id:"return-type-25"},"Return type"),(0,r.yg)("p",null,"inputs"),(0,r.yg)("h4",{id:"example-39"},"Example"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"from clarifai.client.input import Input\ninput_obj = Input()\ninput_protos = input_obj.get_inputs_from_csv(csv_path='filepath', input_type='text', csv_type='raw')\n")),(0,r.yg)("h3",{id:"inputsget_mask_proto"},"Inputs.get_mask_proto()"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"get_mask_proto(input_id, label, polygons)\n")),(0,r.yg)("p",null,"Create an annotation proto for each polygon box, label input pair."),(0,r.yg)("h4",{id:"parameters-45"},"Parameters"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"input_id")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 The input ID for the annotation to create."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"label")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 annotation label"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"polygons")," (",(0,r.yg)("em",{parentName:"li"},"List"),") \u2013 Polygon x,y points iterable")),(0,r.yg)("h4",{id:"returns-26"},"Returns"),(0,r.yg)("p",null,"  An annotation object for the specified input ID."),(0,r.yg)("h4",{id:"example-40"},"Example"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"from clarifai.client.input import Input\ninput_obj = Input()\ninput_obj.get_mask_proto(input_id='demo', label='demo', polygons=[[[x,y],...,[x,y]],...])\n")),(0,r.yg)("h3",{id:"inputsget_text_input"},"Inputs.get_text_input()"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"get_text_input(input_id, raw_text, dataset_id='', **kwargs)\n")),(0,r.yg)("p",null,"Create input proto for text data type from raw text."),(0,r.yg)("h4",{id:"parameters-46"},"Parameters"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"input_id")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 The input ID for the input to create."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"raw_text")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 The raw text input."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"dataset_id")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 The dataset ID for the dataset to add the input to."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"*","*","kwargs")," \u2013 Additional keyword arguments to be passed to the Input")),(0,r.yg)("h4",{id:"returns-27"},"Returns"),(0,r.yg)("p",null,"  An Input object for the specified input ID."),(0,r.yg)("h4",{id:"return-type-26"},"Return type"),(0,r.yg)("p",null,"Text"),(0,r.yg)("h4",{id:"example-41"},"Example"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"from clarifai.client.input import Input\ninput_obj = Input()\ninput_protos = input_obj.get_text_input(input_id = 'demo', raw_text = 'This is a test')\n")),(0,r.yg)("h3",{id:"inputsget_text_inputs_from_folder"},"Inputs.get_text_inputs_from_folder()"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"get_text_inputs_from_folder(folder_path, dataset_id='',labels)\n")),(0,r.yg)("p",null,"Create input protos for text data type from folder."),(0,r.yg)("h4",{id:"parameters-47"},"Parameters"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"folder_path")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 Path to the folder containing text.")),(0,r.yg)("h4",{id:"returns-28"},"Returns"),(0,r.yg)("p",null,"  A list of Input objects for the specified folder."),(0,r.yg)("h4",{id:"return-type-27"},"Return type"),(0,r.yg)("p",null,"  list of Input"),(0,r.yg)("h4",{id:"example-42"},"Example"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"from clarifai.client.input import Input\ninput_obj = Input()\ninput_protos = input_obj.get_text_inputs_from_folder(folder_path='demo_folder')\n")),(0,r.yg)("h3",{id:"inputslist_inputs"},"Inputs.list_inputs()"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"list_inputs(dataset_id='',page_no,per_page,input_type)\n")),(0,r.yg)("p",null,"Lists all the inputs for the app."),(0,r.yg)("h4",{id:"parameters-48"},"Parameters"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"dataset_id")," (",(0,r.yg)("em",{parentName:"li"},"str"),") - The dataset ID for the dataset to list inputs from."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"page_no")," (",(0,r.yg)("em",{parentName:"li"},"int"),") - The page number to list."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"per_page")," (",(0,r.yg)("em",{parentName:"li"},"int"),") - The number of items per page."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"input_type")," (",(0,r.yg)("em",{parentName:"li"},"str"),") - The type of input to list. Options: 'image', 'video', 'audio', 'text'.")),(0,r.yg)("h4",{id:"returns-29"},"Returns"),(0,r.yg)("p",null,"  A list of Input objects for the app."),(0,r.yg)("h4",{id:"return-type-28"},"Return type"),(0,r.yg)("p",null,"  list of Input"),(0,r.yg)("h4",{id:"example-43"},"Example"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},'from clarifai.client.user import User\ninput_obj = User(user_id="user_id").app(app_id="app_id").inputs()\ninput_obj.list_inputs()\n')),(0,r.yg)("h3",{id:"inputsupload_annotations"},"Inputs.upload_annotations()"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"upload_annotations(batch_annot, show_log=True)\n")),(0,r.yg)("p",null,"Upload image annotations to app."),(0,r.yg)("h4",{id:"parameters-49"},"Parameters"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"batch_annot")," \u2013 annot batch protos")),(0,r.yg)("h4",{id:"returns-30"},"Returns"),(0,r.yg)("p",null,"failed annot upload"),(0,r.yg)("h3",{id:"inputsupload_from_bytes"},"Inputs.upload_from_bytes()"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"upload_from_bytes(input_id, image_bytes, video_bytes, audio_bytes,text_bytes, dataset_id='', **kwargs)\n")),(0,r.yg)("p",null,"Upload input from bytes."),(0,r.yg)("h4",{id:"parameters-50"},"Parameters"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"input_id")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 The input ID for the input to create."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"image_bytes")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 The bytes for the image."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"video_bytes")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 The bytes for the video."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"audio_bytes")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 The bytes for the audio."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"text_bytes"),"(",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 The bytes for the text."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"dataset_id")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 The dataset ID for the dataset to add the input to.")),(0,r.yg)("h4",{id:"returns-31"},"Returns"),(0,r.yg)("p",null,"  Job id for the upload request."),(0,r.yg)("h4",{id:"return-type-29"},"Return type"),(0,r.yg)("p",null,"  input_job_id"),(0,r.yg)("h4",{id:"example-44"},"Example"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"from clarifai.client.input import Input\ninput_obj = Input(user_id = 'user_id', app_id = 'demo_app')\nimage = open('demo.jpg', 'rb').read()\ninput_obj.upload_from_bytes(input_id='demo', image_bytes=image)\n")),(0,r.yg)("h3",{id:"inputsupload_from_file"},"Inputs.upload_from_file()"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"upload_from_file(input_id, image_file, video_file, audio_file, dataset_id, **kwargs)\n")),(0,r.yg)("p",null,"Upload input from file."),(0,r.yg)("h4",{id:"parameters-51"},"Parameters"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"input_id")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 The input ID for the input to create."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"image_file")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 The file for the image."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"video_file")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 The file for the video."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"audio_file")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 The file for the audio."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"text_file"),"(",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 The file for the text."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"dataset_id")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 The dataset ID for the dataset to add the input to.")),(0,r.yg)("h4",{id:"returns-32"},"Returns"),(0,r.yg)("p",null,"  Job id for the upload request."),(0,r.yg)("h4",{id:"return-type-30"},"Return type"),(0,r.yg)("p",null,"  input_job_id"),(0,r.yg)("h4",{id:"example-45"},"Example"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"from clarifai.client.input import Input\ninput_obj = Input(user_id = 'user_id', app_id = 'demo_app')\ninput_obj.upload_from_file(input_id='demo', audio_file='demo.mp3')\n")),(0,r.yg)("h3",{id:"inputsupload_from_url"},"Inputs.upload_from_url()"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"upload_from_url(input_id, image_url, video_url, audio_url, text_url, dataset_id='', **kwargs)\n")),(0,r.yg)("p",null,"Upload input from URL."),(0,r.yg)("h4",{id:"parameters-52"},"Parameters"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"input_id")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 The input ID for the input to create."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"image_url")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 The url for the image."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"video_url")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 The url for the video."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"audio_url")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 The url for the audio."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"text_url")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 The url for the text."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"dataset_id")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 The dataset ID for the dataset to add the input to.")),(0,r.yg)("h4",{id:"returns-33"},"Returns"),(0,r.yg)("p",null,"  job id for the upload request."),(0,r.yg)("h4",{id:"return-type-31"},"Return type"),(0,r.yg)("p",null,"  input_job_id"),(0,r.yg)("h4",{id:"example-46"},"Example"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"from clarifai.client.input import Input\ninput_obj = Input(user_id = 'user_id', app_id = 'demo_app')\ninput_obj.upload_from_url(input_id='demo', image_url='https://samples.clarifai.com/metro-north.jpg')\n")),(0,r.yg)("h3",{id:"inputsupload_inputs"},"Inputs.upload_inputs()"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"upload_inputs(inputs, show_log=True)\n")),(0,r.yg)("p",null,"Upload list of input objects to the app."),(0,r.yg)("h4",{id:"parameters-53"},"Parameters"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"inputs")," (",(0,r.yg)("em",{parentName:"li"},"list"),") \u2013 List of input objects to upload."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"show_log")," (",(0,r.yg)("em",{parentName:"li"},"bool"),") \u2013 Show upload status log.")),(0,r.yg)("h4",{id:"returns-34"},"Returns"),(0,r.yg)("p",null,"  Job id for the upload request."),(0,r.yg)("h4",{id:"return-type-32"},"Return type"),(0,r.yg)("p",null,"  input_job_id"),(0,r.yg)("h3",{id:"inputsupload_text"},"Inputs.upload_text()"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"upload_text(input_id, raw_text, dataset_id='', **kwargs)\n")),(0,r.yg)("p",null,"Upload text from raw text."),(0,r.yg)("h4",{id:"parameters-54"},"Parameters"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"input_id")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 The input ID for the input to create."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"raw_text")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 The raw text."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"dataset_id")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 The dataset ID for the dataset to add the input to.")),(0,r.yg)("h4",{id:"returns-35"},"Returns"),(0,r.yg)("p",null,"  Job id for the upload request."),(0,r.yg)("h4",{id:"return-type-33"},"Return type"),(0,r.yg)("p",null,"  input_job_id (str)"),(0,r.yg)("h4",{id:"example-47"},"Example"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"from clarifai.client.input import Input\ninput_obj = Input(user_id = 'user_id', app_id = 'demo_app')\ninput_obj.upload_text(input_id = 'demo', raw_text = 'This is a test')\n")),(0,r.yg)("h3",{id:"inputget_multimodal_input"},"Input.get_multimodal_input()"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"get_multimodal_input(input_id,raw_text,text_bytes,image_url,image_bytes,dataset_id,**kwargs)\n")),(0,r.yg)("p",null,"Create input proto for text and image from bytes or url."),(0,r.yg)("h4",{id:"parameters-55"},"Parameters"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"input_id")," (",(0,r.yg)("em",{parentName:"li"},"str"),")- The input ID for the input to create."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"raw_text")," (",(0,r.yg)("em",{parentName:"li"},"str"),")- The raw text input."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"text_bytes")," (",(0,r.yg)("em",{parentName:"li"},"str"),")- The bytes for the text."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"image_url")," (",(0,r.yg)("em",{parentName:"li"},"str"),")- The url for the image."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"image_bytes")," (",(0,r.yg)("em",{parentName:"li"},"str"),")- The bytes for the image."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"dataset_id")," (",(0,r.yg)("em",{parentName:"li"},"str"),")- The dataset ID for the dataset to add the input to."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"*","*","kwargs")," - Additional keyword arguments to be passed to the Input")),(0,r.yg)("h4",{id:"returns-36"},"Returns"),(0,r.yg)("p",null,"An Input object for the specified input ID."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"from clarifai.client.input import Inputs\ninput_protos = Inputs.get_multimodal_input(input_id = 'demo', raw_text = 'What time of day is it?', image_url='https://samples.clarifai.com/metro-north.jpg')\n")),(0,r.yg)("h3",{id:"inputget_bbox_proto"},"Input.get_bbox_proto()"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"get_bbox_proto(input_id, label, bbox)\n")),(0,r.yg)("p",null,"Create an annotation proto for each bounding box, label input pair."),(0,r.yg)("h4",{id:"parameters-56"},"Parameters"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"input_id")," (",(0,r.yg)("em",{parentName:"li"},"str"),") - The input ID for the annotation to create."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"label")," (",(0,r.yg)("em",{parentName:"li"},"str"),") - annotation label"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"bbox")," (",(0,r.yg)("em",{parentName:"li"},"List"),") - a list of a single bbox's coordinates.Bbox ordering: ","[xmin, ymin, xmax, ymax]")),(0,r.yg)("h4",{id:"returns-37"},"Returns"),(0,r.yg)("p",null,"An annotation object for the specified input ID."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"from clarifai.client.input import Inputs\nInputs.get_bbox_proto(input_id='demo', label='demo', bbox=[x_min, y_min, x_max, y_max])\n")),(0,r.yg)("h3",{id:"inputlist_annotations"},"Input.list_annotations()"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"list_annotations(batch_input, page_no,per_page)\n")),(0,r.yg)("p",null,"Lists all the annotations for the app."),(0,r.yg)("h4",{id:"parameters-57"},"Parameters"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"batch_input")," (",(0,r.yg)("em",{parentName:"li"},"List","[Input]"),") - The input objects to list annotations from."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"page_no")," (",(0,r.yg)("em",{parentName:"li"},"int"),") - The page number to list."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"per_page")," (",(0,r.yg)("em",{parentName:"li"},"int"),") - The number of items per page.")),(0,r.yg)("h4",{id:"yields"},"Yields"),(0,r.yg)("p",null,"Annotation objects for the app."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},'from clarifai.client.user import User\ninput_obj = User(user_id="user_id").app(app_id="app_id").inputs()\nall_inputs = list(input_obj.list_inputs(input_type=\'image\'))\nall_annotations = list(input_obj.list_annotations(batch_input=all_inputs))\n\n')),(0,r.yg)("h3",{id:"inputdownload_inputs"},"Input.download_inputs()"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"download_inputs(inputs)\n")),(0,r.yg)("p",null,"Download list of input objects from the app."),(0,r.yg)("h4",{id:"parameters-58"},"Parameters"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"input_ids")," (",(0,r.yg)("em",{parentName:"li"},"Input"),") - List of input objects to download.")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},'from clarifai.client.user import User\ninput_obj = User(user_id="user_id").app(app_id="app_id").inputs()\ninput_obj.download_inputs(list(input_obj.list_inputs()))\n')),(0,r.yg)("h2",{id:"lister"},"Lister"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"class Lister(page_size=16)\n")),(0,r.yg)("p",null,"Lister class for obtaining paginated results from the Clarifai API."),(0,r.yg)("h3",{id:"lister__init__"},"Lister.","_","_init","_","_()"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"__init__(page_size)\n")),(0,r.yg)("h4",{id:"parameters-59"},"Parameters"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"page_size")," (",(0,r.yg)("em",{parentName:"li"},"int"),") \u2013 Stores the page size.")),(0,r.yg)("h3",{id:"listerlist_pages_generator"},"Lister.list_pages_generator()"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"}," list_pages_generator(endpoint, proto_message,request_data,page_no,per_page)\n")),(0,r.yg)("p",null,"Lists all pages of a resource."),(0,r.yg)("h4",{id:"parameters-60"},"Parameters"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"endpoint")," (",(0,r.yg)("em",{parentName:"li"},"Callable"),") \u2013 The endpoint to call."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"proto_message")," (",(0,r.yg)("em",{parentName:"li"},"Any"),") \u2013 The proto message to use."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"request_data")," (",(0,r.yg)("em",{parentName:"li"},"dict"),") \u2013 The request data to use."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"page_no")," (",(0,r.yg)("em",{parentName:"li"},"int"),") - The page number to list."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"per_page")," (",(0,r.yg)("em",{parentName:"li"},"int"),") - The number of items per page.")),(0,r.yg)("h4",{id:"yields-1"},"Yields"),(0,r.yg)("p",null,"  ",(0,r.yg)("em",{parentName:"p"},"response_dict")," \u2013 The next item in the listing."),(0,r.yg)("h2",{id:"model"},"Model"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"class Model(url='', model_id='',model_version={'id': \"\"},base_url = \"https://api.clarifai.com\",pat='',token='',**kwargs)\n")),(0,r.yg)("p",null,"Model is a class that provides access to Clarifai API endpoints related to Model information."),(0,r.yg)("h3",{id:"model__init__"},"Model.","_","_init","_","_()"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"__init__(url='', model_id='',model_version={'id': \"\"},base_url = \"https://api.clarifai.com\",pat='',token='',**kwargs)\n")),(0,r.yg)("p",null,"Initializes a Model object."),(0,r.yg)("h4",{id:"parameters-61"},"Parameters"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"url_init")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 The URL to initialize the model object."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"model_id")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 The Model ID to interact with."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"model_version")," (",(0,r.yg)("em",{parentName:"li"},"dict"),") \u2013 The Model Version to interact with."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"base_url")," (",(0,r.yg)("em",{parentName:"li"},"str"),') - Base API url. Default "',(0,r.yg)("a",{parentName:"li",href:"https://api.clarifai.com%22"},'https://api.clarifai.com"')),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"pat")," (",(0,r.yg)("em",{parentName:"li"},"str"),") - A personal access token for authentication. Can be set as env var CLARIFAI_PAT"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"token")," (",(0,r.yg)("em",{parentName:"li"},"str"),") - A session token for authentication. Accepts either a session token or a pat. Can be set as env var CLARIFAI_SESSION_TOKEN"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"*","*","kwargs")," \u2013 Additional keyword arguments to be passed to the ClarifaiAuthHelper.")),(0,r.yg)("h3",{id:"modelcreate_version"},"Model.create_version()"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"create_version(**kwargs)\n")),(0,r.yg)("p",null,"Creates a model version for the Model."),(0,r.yg)("h4",{id:"returns-38"},"Returns"),(0,r.yg)("p",null,"  A Model object for the specified model ID."),(0,r.yg)("h4",{id:"return-type-34"},"Return type"),(0,r.yg)("p",null,"  Model"),(0,r.yg)("h4",{id:"parameters-62"},"Parameters"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"*","*","kwargs")," \u2013 Additional keyword arguments to be passed to the Model Version.")),(0,r.yg)("h4",{id:"example-48"},"Example"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"from clarifai.client.model import Model\nmodel = Model(\"model_url\")\n            # or\nmodel = Model(model_id='model_id', user_id='user_id', app_id='app_id')\nmodel_version = model.create_version(description='model_version_description')\n")),(0,r.yg)("h3",{id:"modellist_versions"},"Model.list_versions()"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"list_versions()\n")),(0,r.yg)("p",null,"Lists all the versions for the model."),(0,r.yg)("h4",{id:"returns-39"},"Returns"),(0,r.yg)("p",null,"  A list of Model objects for the versions of the model."),(0,r.yg)("h4",{id:"return-type-35"},"Return type"),(0,r.yg)("p",null,"  List","[Model]"),(0,r.yg)("h4",{id:"example-49"},"Example"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"from clarifai.client.model import Model\nmodel = Model(\"model_url\") # Example URL: https://clarifai.com/clarifai/main/models/general-image-recognition\n            # or\nmodel = Model(model_id='model_id', user_id='user_id', app_id='app_id')\nall_model_versions = model.list_versions()\n")),(0,r.yg)("h3",{id:"modelpredict"},"Model.predict()"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"predict(inputs, inference_params = {}, output_config = {})\n")),(0,r.yg)("p",null,"Predicts the model based on the given inputs."),(0,r.yg)("h4",{id:"parameters-63"},"Parameters"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"inputs")," (list","[Input]",") \u2013 The inputs to predict, must be less than 128."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"inference_params")," (",(0,r.yg)("em",{parentName:"li"},"dict"),") - The inference params to override."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"output_config")," (",(0,r.yg)("em",{parentName:"li"},"dict"),") - The output config to override.",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"min_value")," (",(0,r.yg)("em",{parentName:"li"},"float"),") - The minimum value of the prediction confidence to filter."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"max_concepts")," (",(0,r.yg)("em",{parentName:"li"},"int"),") - The maximum number of concepts to return."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"select_concepts")," (",(0,r.yg)("em",{parentName:"li"},"list","[Concept]"),") - The concepts to select.")))),(0,r.yg)("h3",{id:"modelpredict_by_bytes"},"Model.predict_by_bytes()"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"predict_by_bytes(input_bytes,input_type,inference_params= {},output_config= {})\n")),(0,r.yg)("p",null,"Predicts the model based on the given bytes."),(0,r.yg)("h4",{id:"parameters-64"},"Parameters"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"input_bytes")," (",(0,r.yg)("em",{parentName:"li"},"bytes"),") \u2013 File Bytes to predict on."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"input_type")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 The type of input. Can be \u2018image\u2019, \u2018text\u2019, \u2018video\u2019 or \u2018audio\u2019."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"inference_params")," (",(0,r.yg)("em",{parentName:"li"},"dict"),") - The inference params to override."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"output_config")," (",(0,r.yg)("em",{parentName:"li"},"dict"),") - The output config to override.",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"min_value")," (",(0,r.yg)("em",{parentName:"li"},"float"),") - The minimum value of the prediction confidence to filter."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"max_concepts")," (",(0,r.yg)("em",{parentName:"li"},"int"),") - The maximum number of concepts to return."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"select_concepts")," (",(0,r.yg)("em",{parentName:"li"},"list","[Concept]"),") - The concepts to select.")))),(0,r.yg)("h4",{id:"example-50"},"Example"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"from clarifai.client.model import Model\nmodel = Model(\"https://clarifai.com/anthropic/completion/models/claude-v2\")\nmodel_prediction = model.predict_by_bytes(b'Write a tweet on future of AI', 'text')\n")),(0,r.yg)("h3",{id:"modelpredict_by_filepath"},"Model.predict_by_filepath()"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"predict_by_filepath(filepath,input_type,inference_params = {},output_config = {})\n")),(0,r.yg)("p",null,"Predicts the model based on the given file path."),(0,r.yg)("h4",{id:"parameters-65"},"Parameters"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"filepath")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 The file path to predict."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"input_type")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 The type of input. Can be \u2018image\u2019, \u2018text\u2019, \u2018video\u2019 or \u2018audio."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"inference_params")," (",(0,r.yg)("em",{parentName:"li"},"dict"),") - The inference params to override."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"output_config")," (",(0,r.yg)("em",{parentName:"li"},"dict"),") - The output config to override.",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"min_value")," (",(0,r.yg)("em",{parentName:"li"},"float"),") - The minimum value of the prediction confidence to filter."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"max_concepts")," (",(0,r.yg)("em",{parentName:"li"},"int"),") - The maximum number of concepts to return."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"select_concepts")," (",(0,r.yg)("em",{parentName:"li"},"list","[Concept]"),") - The concepts to select.")))),(0,r.yg)("h4",{id:"example-51"},"Example"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"from clarifai.client.model import Model\nmodel = Model(\"model_url\") # Example URL: https://clarifai.com/clarifai/main/models/general-image-recognition\n          #  or\nmodel = Model(model_id='model_id', user_id='user_id', app_id='app_id')\nmodel_prediction = model.predict_by_filepath('/path/to/image.jpg', 'image')\nmodel_prediction = model.predict_by_filepath('/path/to/text.txt', 'text')\n")),(0,r.yg)("h3",{id:"modelpredict_by_url"},"Model.predict_by_url()"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"predict_by_url(url,input_type,inference_params = {},output_config = {})\n")),(0,r.yg)("p",null,"Predicts the model based on the given URL."),(0,r.yg)("h4",{id:"parameters-66"},"Parameters"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"url")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 The URL to predict."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"input_type")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 The type of input. Can be \u2018image\u2019, \u2018text\u2019, \u2018video\u2019 or \u2018audio."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"inference_params")," (",(0,r.yg)("em",{parentName:"li"},"dict"),") - The inference params to override."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"output_config")," (",(0,r.yg)("em",{parentName:"li"},"dict"),") - The output config to override.",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"min_value")," (",(0,r.yg)("em",{parentName:"li"},"float"),") - The minimum value of the prediction confidence to filter."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"max_concepts")," (",(0,r.yg)("em",{parentName:"li"},"int"),") - The maximum number of concepts to return."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"select_concepts")," (",(0,r.yg)("em",{parentName:"li"},"list","[Concept]"),") - The concepts to select.")))),(0,r.yg)("h4",{id:"example-52"},"Example"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"from clarifai.client.model import Model\nmodel = Model(\"model_url\") # Example URL: https://clarifai.com/clarifai/main/models/general-image-recognition\n          #  or\nmodel = Model(model_id='model_id', user_id='user_id', app_id='app_id')\nmodel_prediction = model.predict_by_url('url', 'image')\n")),(0,r.yg)("h3",{id:"modellist_training_templates"},"Model.list_training_templates()"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"list_training_templates()\n")),(0,r.yg)("p",null,"Lists all the training templates for the model type."),(0,r.yg)("h4",{id:"returns-40"},"Returns"),(0,r.yg)("p",null,"List of training templates for the model type."),(0,r.yg)("h4",{id:"example-53"},"Example"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"from clarifai.client.model import Model\nmodel = Model(model_id='model_id', user_id='user_id', app_id='app_id')\nprint(model.list_training_templates())\n")),(0,r.yg)("h3",{id:"modelget_params"},"Model.get_params()"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"get_params(template='', save_to='params.yaml')\n")),(0,r.yg)("p",null,"Returns the model params for the model type and yaml file."),(0,r.yg)("h4",{id:"parameters-67"},"Parameters"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"template")," (",(0,r.yg)("em",{parentName:"li"},"str"),") - The template to use for the model type."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"yaml_file")," (",(0,r.yg)("em",{parentName:"li"},"str"),") - The yaml file to save the model params.")),(0,r.yg)("h4",{id:"returns-41"},"Returns"),(0,r.yg)("p",null,"Dictionary of model params for the model type."),(0,r.yg)("h4",{id:"example-54"},"Example"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"from clarifai.client.model import Model\nmodel = Model(model_id='model_id', user_id='user_id', app_id='app_id')\nmodel_params = model.get_params(template='template', yaml_file='model_params.yaml')\n")),(0,r.yg)("h3",{id:"modelupdate_params"},"Model.update_params()"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"update_params(**kwargs)\n")),(0,r.yg)("p",null,"Updates the model params for the model."),(0,r.yg)("h4",{id:"parameters-68"},"Parameters"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"*","*","kwargs")," - Model params to update.")),(0,r.yg)("h4",{id:"example-55"},"Example"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"from clarifai.client.model import Model\nmodel = Model(model_id='model_id', user_id='user_id', app_id='app_id')\nmodel_params = model.get_params(template='template', yaml_file='model_params.yaml')\nmodel.update_params(batch_size = 8, dataset_version = 'dataset_version_id')\n")),(0,r.yg)("h3",{id:"modelget_param_info"},"Model.get_param_info()"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"get_param_info(param)\n")),(0,r.yg)("p",null,"Returns the param info for the param."),(0,r.yg)("h4",{id:"parameters-69"},"Parameters"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"param")," (",(0,r.yg)("em",{parentName:"li"},"str"),") - The param to get the info for.")),(0,r.yg)("h4",{id:"example-56"},"Example"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"from clarifai.client.model import Model\nmodel = Model(model_id='model_id', user_id='user_id', app_id='app_id')\nmodel_params = model.get_params(template='template', yaml_file='model_params.yaml')\nmodel.get_param_info('param')\n")),(0,r.yg)("h3",{id:"modeltrain"},"Model.train()"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"train(yaml_file='')\n")),(0,r.yg)("p",null,"Trains the model based on the given yaml file or model params."),(0,r.yg)("h4",{id:"parameters-70"},"Parameters"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"yaml_file")," (",(0,r.yg)("em",{parentName:"li"},"str"),") - The yaml file for the model params.")),(0,r.yg)("h4",{id:"example-57"},"Example"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"from clarifai.client.model import Model\nmodel = Model(model_id='model_id', user_id='user_id', app_id='app_id')\nmodel_params = model.get_params(template='template', yaml_file='model_params.yaml')\nmodel.train('model_params.yaml')\n")),(0,r.yg)("h3",{id:"modeltraining_status"},"Model.training_status()"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"training_status(version_id, training_logs)\n")),(0,r.yg)("p",null,"Get the training status for the model version. Also stores training logs"),(0,r.yg)("h4",{id:"parameters-71"},"Parameters"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"version_id")," (",(0,r.yg)("em",{parentName:"li"},"str"),") - The version ID to get the training status for."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"training_logs")," (",(0,r.yg)("em",{parentName:"li"},"bool"),") - Whether to save the training logs in a file.")),(0,r.yg)("h4",{id:"returns-42"},"Returns"),(0,r.yg)("p",null,"Dictionary of training status for the model version."),(0,r.yg)("h4",{id:"example-58"},"Example"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"from clarifai.client.model import Model\nmodel = Model(model_id='model_id', user_id='user_id', app_id='app_id')\nmodel.training_status(version_id='version_id',training_logs=True)\n")),(0,r.yg)("h3",{id:"modeldelete_version"},"Model.delete_version()"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"delete_version(version_id)\n")),(0,r.yg)("p",null,"Deletes a model version for the Model."),(0,r.yg)("h4",{id:"parameters-72"},"Parameters"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"version_id")," (",(0,r.yg)("em",{parentName:"li"},"str"),") - The version ID to delete.")),(0,r.yg)("h4",{id:"example-59"},"Example"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"from clarifai.client.model import Model\nmodel = Model(model_id='model_id', user_id='user_id', app_id='app_id')\nmodel.delete_version(version_id='version_id')\n")),(0,r.yg)("h3",{id:"modelevaluate"},"Model.evaluate()"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"evaluate(dataset_id,dataset_app_id,dataset_user_id,eval_id,extended_metrics,eval_info)\n")),(0,r.yg)("p",null,"Run evaluation"),(0,r.yg)("h4",{id:"parameters-73"},"Parameters"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"dataset_id")," (",(0,r.yg)("em",{parentName:"li"},"str"),") - Dataset Id."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"dataset_app_id")," (",(0,r.yg)("em",{parentName:"li"},"str"),") - App ID for cross app evaluation, leave it as None to use Model App ID. Default is None."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"dataset_user_id")," (",(0,r.yg)("em",{parentName:"li"},"str"),") - User ID for cross app evaluation, leave it as None to use Model User ID. Default is None."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"eval_id")," (",(0,r.yg)("em",{parentName:"li"},"str"),") - Specific ID for the evaluation. You must specify this parameter to either overwrite the result with the dataset ID or format your evaluation in an informative manner. If you don't, it will use random ID from system. Default is None."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"extended_metrics")," (",(0,r.yg)("em",{parentName:"li"},"dict"),") - user custom metrics result. Default is None."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"eval_info")," (",(0,r.yg)("em",{parentName:"li"},"dict"),") - custom eval info. Default is empty dict.")),(0,r.yg)("h4",{id:"returns-43"},"Returns"),(0,r.yg)("p",null,"eval_metrics"),(0,r.yg)("h3",{id:"modelget_eval_by_id"},"Model.get_eval_by_id()"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"get_eval_by_id(eval_id,label_counts,test_set,binary_metrics,confusion_matrix,metrics_by_class,metrics_by_area) \n")),(0,r.yg)("p",null,"Get detail eval_metrics by eval_id with extra metric fields"),(0,r.yg)("h4",{id:"parameters-74"},"Parameters"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"eval_id")," (",(0,r.yg)("em",{parentName:"li"},"str"),") - eval id"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"label_counts")," (",(0,r.yg)("em",{parentName:"li"},"bool"),", optional) - Set True to get label counts. Defaults to False."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"test_set")," (",(0,r.yg)("em",{parentName:"li"},"bool"),", optional) - Set True to get test set. Defaults to False."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"binary_metrics")," (",(0,r.yg)("em",{parentName:"li"},"bool"),", optional) - Set True to get binary metric. Defaults to False."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"confusion_matrix")," (",(0,r.yg)("em",{parentName:"li"},"bool"),", optional) - Set True to get confusion matrix. Defaults to False."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"metrics_by_class")," (",(0,r.yg)("em",{parentName:"li"},"bool"),", optional) - Set True to get metrics by class. Defaults to False."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"metrics_by_area")," (",(0,r.yg)("em",{parentName:"li"},"bool"),", optional) - Set True to get metrics by area. Defaults to False.")),(0,r.yg)("h4",{id:"returns-44"},"Returns"),(0,r.yg)("p",null,"resources_pb2.EvalMetrics: eval_metrics"),(0,r.yg)("h3",{id:"modelget_latest_eval"},"Model.get_latest_eval()"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"get_latest_eval(label_counts,test_set,binary_metrics,confusion_matrix,metrics_by_class,metrics_by_area)\n")),(0,r.yg)("p",null,"Run ",(0,r.yg)("inlineCode",{parentName:"p"},"get_eval_by_id")," method with latest ",(0,r.yg)("inlineCode",{parentName:"p"},"eval_id")),(0,r.yg)("h4",{id:"parameters-75"},"Parameters"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"label_counts")," (",(0,r.yg)("em",{parentName:"li"},"bool"),", optional) - Set True to get label counts. Defaults to False."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"test_set")," (",(0,r.yg)("em",{parentName:"li"},"bool"),", optional) - Set True to get test set. Defaults to False."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"binary_metrics")," (",(0,r.yg)("em",{parentName:"li"},"bool"),", optional) - Set True to get binary metric. Defaults to False."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"confusion_matrix")," (",(0,r.yg)("em",{parentName:"li"},"bool"),", optional) - Set True to get confusion matrix. Defaults to False."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"metrics_by_class")," (",(0,r.yg)("em",{parentName:"li"},"bool"),", optional) - Set True to get metrics by class. Defaults to False."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"metrics_by_area")," (",(0,r.yg)("em",{parentName:"li"},"bool"),", optional) - Set True to get metrics by area. Defaults to False.")),(0,r.yg)("h4",{id:"returns-45"},"Returns"),(0,r.yg)("p",null,"eval_metric if model is evaluated otherwise None."),(0,r.yg)("h2",{id:"workflow"},"Workflow"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"class Workflow(url='',workflow_id='',workflow_version = {'id': \"\"},output_config = {'min_value': 0},base_url = \"https://api.clarifai.com\",pat = None,token='',**kwargs)\n")),(0,r.yg)("p",null,"Workflow is a class that provides access to Clarifai API endpoints related to Workflow information."),(0,r.yg)("h3",{id:"workflow__init__"},"Workflow.","_","_init","_","_()"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"__init__(url='',workflow_id='',workflow_version = {'id': \"\"},output_config = {'min_value': 0},base_url = \"https://api.clarifai.com\",pat = None,token='',**kwargs)\n")),(0,r.yg)("p",null,"Initializes a Workflow object."),(0,r.yg)("h4",{id:"parameters-76"},"Parameters"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"url_init")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 The URL to initialize the workflow object."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"workflow_id")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 The Workflow ID to interact with."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"workflow_version")," (",(0,r.yg)("em",{parentName:"li"},"dict"),") \u2013 The Workflow Version to interact with."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"output_config")," (",(0,r.yg)("em",{parentName:"li"},"dict"),") \u2013 The output config to interact with.",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},"min_value (float) - The minimum value of the prediction confidence to filter."),(0,r.yg)("li",{parentName:"ul"},"max_concepts (int) - The maximum number of concepts to return."),(0,r.yg)("li",{parentName:"ul"},"select_concepts (list","[Concept]",") - The concepts to select."),(0,r.yg)("li",{parentName:"ul"},"sample_ms (int) - The number of milliseconds to sample."))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"base_url")," (",(0,r.yg)("em",{parentName:"li"},"str"),') - Base API url. Default "',(0,r.yg)("a",{parentName:"li",href:"https://api.clarifai.com%22"},'https://api.clarifai.com"')),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"token")," (",(0,r.yg)("em",{parentName:"li"},"str"),") - A session token for authentication. Accepts either a session token or a pat. Can be set as env var CLARIFAI_SESSION_TOKEN"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"*","*","kwargs")," \u2013 Additional keyword arguments to be passed to the ClarifaiAuthHelper.")),(0,r.yg)("h3",{id:"workflowlist_versions"},"Workflow.list_versions()"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"list_versions()\n")),(0,r.yg)("p",null,"Lists all the versions of the workflow."),(0,r.yg)("h4",{id:"returns-46"},"Returns"),(0,r.yg)("p",null,"A list of Workflow objects."),(0,r.yg)("h4",{id:"return-type-36"},"Return type"),(0,r.yg)("p",null,"  list","[Workflow]"),(0,r.yg)("h4",{id:"example-60"},"Example"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"from clarifai.client.workflow import Workflow\nworkflow = Workflow(user_id='user_id', app_id='app_id', workflow_id='workflow_id')\nworkflow_versions = workflow.list_versions()\n")),(0,r.yg)("h3",{id:"workflowpredict"},"Workflow.predict()"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"predict(inputs,workflow_state_id)\n")),(0,r.yg)("p",null,"Predicts the workflow based on the given inputs."),(0,r.yg)("h4",{id:"parameters-77"},"Parameters"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"inputs")," (list","[Input]",") \u2013 The inputs to predict."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"workflow_state_id")," (",(0,r.yg)("em",{parentName:"li"},"str"),") - key for the workflow state cache that stores the workflow node predictions.")),(0,r.yg)("h3",{id:"workflowpredict_by_bytes"},"Workflow.predict_by_bytes()"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"predict_by_bytes(input_bytes, input_type)\n")),(0,r.yg)("p",null,"Predicts the workflow based on the given bytes."),(0,r.yg)("h4",{id:"parameters-78"},"Parameters"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"input_bytes")," (",(0,r.yg)("em",{parentName:"li"},"bytes"),") \u2013 Bytes to predict on."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"input_type")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 The type of input. Can be \u2018image\u2019, \u2018text\u2019, \u2018video\u2019 or \u2018audio.")),(0,r.yg)("h3",{id:"workflowpredict_by_filepath"},"Workflow.predict_by_filepath()"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"predict_by_filepath(filepath, input_type)\n")),(0,r.yg)("p",null,"Predicts the workflow based on the given filepath."),(0,r.yg)("h4",{id:"parameters-79"},"Parameters"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"filepath")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 The filepath to predict."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"input_type")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 The type of input. Can be \u2018image\u2019, \u2018text\u2019, \u2018video\u2019 or \u2018audio.")),(0,r.yg)("h4",{id:"example-61"},"Example"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"from clarifai.client.workflow import Workflow\nworkflow = Workflow(\"workflow_url\") # Example: https://clarifai.com/clarifai/main/workflows/Face-Sentiment\n           # or\nworkflow = Workflow(user_id='user_id', app_id='app_id', workflow_id='workflow_id')\nworkflow_prediction = workflow.predict_by_filepath('filepath', 'image')\n")),(0,r.yg)("h3",{id:"workflowpredict_by_url"},"Workflow.predict_by_url()"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"predict_by_url(url, input_type)\n")),(0,r.yg)("p",null,"Predicts the workflow based on the given URL."),(0,r.yg)("h4",{id:"parameters-80"},"Parameters"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"url")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 The URL to predict."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"input_type")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 The type of input. Can be \u2018image\u2019, \u2018text\u2019, \u2018video\u2019 or \u2018audio.")),(0,r.yg)("h4",{id:"example-62"},"Example"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"from clarifai.client.workflow import Workflow\nworkflow = Workflow(\"workflow_url\") # Example: https://clarifai.com/clarifai/main/workflows/Face-Sentiment\n             # or\nworkflow = Workflow(user_id='user_id', app_id='app_id', workflow_id='workflow_id')\nworkflow_prediction = workflow.predict_by_url('url', 'image')\n")),(0,r.yg)("h3",{id:"workflowexport"},"Workflow.export()"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"export(out_path)\n")),(0,r.yg)("p",null,"Exports the workflow to a yaml file."),(0,r.yg)("h4",{id:"parameters-81"},"Parameters"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"out_path")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 The path to save the yaml file to.")),(0,r.yg)("h4",{id:"example-63"},"Example"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"from clarifai.client.workflow import Workflow\nworkflow = Workflow(\"https://clarifai.com/clarifai/main/workflows/Demographics\")\nworkflow.export('out_path.yml')\n")),(0,r.yg)("h2",{id:"module"},"Module"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"class Module(url='',module_id='', module_version = {'id': \"\"},base_url = \"https://api.clarifai.com\",pat = '',token='',**kwargs)\n")),(0,r.yg)("p",null,"Module is a class that provides access to Clarifai API endpoints related to Module information."),(0,r.yg)("h3",{id:"module__init__"},"Module.","_","_init","_","_()"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"__init__(url='',module_id='', module_version = {'id': \"\"},base_url = \"https://api.clarifai.com\",pat = '',token='',**kwargs)\n")),(0,r.yg)("p",null,"Initializes a Module object."),(0,r.yg)("h4",{id:"parameters-82"},"Parameters"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"url_init")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 The URL to initialize the module object."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"module_id")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 The Module ID to interact with."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"module_version")," (",(0,r.yg)("em",{parentName:"li"},"dict"),") \u2013 The Module Version to interact with."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"base_url")," (",(0,r.yg)("em",{parentName:"li"},"str"),') - Base API url. Default "',(0,r.yg)("a",{parentName:"li",href:"https://api.clarifai.com%22"},'https://api.clarifai.com"')),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"pat")," (",(0,r.yg)("em",{parentName:"li"},"str"),") - A personal access token for authentication. Can be set as env var CLARIFAI_PAT"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"token")," (",(0,r.yg)("em",{parentName:"li"},"str"),") - A session token for authentication. Accepts either a session token or a pat. Can be set as env var CLARIFAI_SESSION_TOKEN."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"*","*","kwargs")," \u2013 Additional keyword arguments to be passed to the ClarifaiAuthHelper.")),(0,r.yg)("h3",{id:"modulelist_versions"},"Module.list_versions()"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"list_versions(page_no,per_page)\n")),(0,r.yg)("p",null,"Lists all the module versions for the module."),(0,r.yg)("h4",{id:"parameters-83"},"Parameters"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"page_no")," (",(0,r.yg)("em",{parentName:"li"},"int"),"): The page number to list."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"per_page")," (",(0,r.yg)("em",{parentName:"li"},"int"),"): The number of items per page.")),(0,r.yg)("h4",{id:"returns-47"},"Returns"),(0,r.yg)("p",null,"  A list of Module objects for versions of the module."),(0,r.yg)("h4",{id:"return-type-37"},"Return type"),(0,r.yg)("p",null,"  List","[Module]"),(0,r.yg)("h4",{id:"example-64"},"Example"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"from clarifai.client.module import Module\nmodule = Module(module_id='module_id', user_id='user_id', app_id='app_id')\nall_Module_versions = module.list_versions()\n")),(0,r.yg)("h2",{id:"utils"},"Utils"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"class Chunker(seq, size)\n")),(0,r.yg)("p",null,"Split an input sequence into small chunks."),(0,r.yg)("h3",{id:"chunker__init__"},"Chunker.","_","_init","_","_()"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"__init__(seq, size)\n")),(0,r.yg)("h3",{id:"chunkerchunk"},"Chunker.chunk()"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"chunk()\n")),(0,r.yg)("p",null,"Chunk input sequence."),(0,r.yg)("h2",{id:"exceptions"},"Exceptions"),(0,r.yg)("h3",{id:"apierror"},"ApiError"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"class ApiError(resource, params, method, response=None)\n")),(0,r.yg)("p",null,"API Server error"),(0,r.yg)("h3",{id:"apiclienterror"},"ApiClientError"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"class ApiClientError\n")),(0,r.yg)("p",null,"API Client Error"),(0,r.yg)("h3",{id:"usererror"},"UserError"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"class UserError\n")),(0,r.yg)("p",null,"User Error"),(0,r.yg)("h2",{id:"runners"},"Runners"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"class Runner(runner_id,user_id='',check_runner_exists,base_url = \"https://api.clarifai.com\",pat='',token='',num_parallel_polls,**kwargs)\n")),(0,r.yg)("p",null,"Base class for remote inference runners. This should be subclassed with the run_input method\nimplemented to process each input in the request"),(0,r.yg)("h3",{id:"runner__init__"},"Runner.","_","_init","_","_()"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"__init__(runner_id,user_id='',check_runner_exists,base_url = \"https://api.clarifai.com\",pat='',token='',num_parallel_polls,**kwargs)\n\n")),(0,r.yg)("p",null,"Initializes a Runner object"),(0,r.yg)("h4",{id:"parameters-84"},"Parameters"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"runner_id")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 The id of the runner to use."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"user_id")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013  Clarifai User ID"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"base_url")," (",(0,r.yg)("em",{parentName:"li"},"dict"),') \u2013 Base API url. Default "',(0,r.yg)("a",{parentName:"li",href:"https://api.clarifai.com%22"},'https://api.clarifai.com"')),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"pat")," (",(0,r.yg)("em",{parentName:"li"},"str"),") - A personal access token for authentication."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"num_parallel_polls")," (",(0,r.yg)("em",{parentName:"li"},"int"),") - The max number of threads for parallel run loops to be fetching work from."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"token")," (",(0,r.yg)("em",{parentName:"li"},"str"),") - A session token for authentication. Accepts either a session token or a pat. Can be set as env var CLARIFAI_SESSION_TOKEN."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"*","*","kwargs")," \u2013 Additional keyword arguments to be passed to the ClarifaiAuthHelper.")),(0,r.yg)("h3",{id:"runnerstart"},"Runner.start()"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"start()\n")),(0,r.yg)("p",null,"Start the run loop. This will ask the Clarifai API for work, and when it gets work, it will run\nthe model on the inputs and post the results back to the Clarifai API. It will then ask for more\nwork again."),(0,r.yg)("h3",{id:"runnerrun_input"},"Runner.run_input()"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"run_input(input, output_info)\n")),(0,r.yg)("p",null,"Run the model on the given input in the request."),(0,r.yg)("h4",{id:"parameters-85"},"Parameters"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"input")," (",(0,r.yg)("em",{parentName:"li"},"resources_pb2.Input"),") \u2013 The input to run the model on."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"output_info")," (",(0,r.yg)("em",{parentName:"li"},"resources_pb2.OutputInfo"),") \u2013 The output info for the model which includes\noutput_info.params that the model can pass in on very prediction request. These can be provided\nduring PostModelVersions as default for every request or can be overridden on a per request by\npassing in output_info in the PostModelOutputs request as the model.model_version.output_info.params\nfield.")),(0,r.yg)("h4",{id:"returns-48"},"Returns"),(0,r.yg)("p",null,"The response from the model's run_input implementation"),(0,r.yg)("h4",{id:"return-type-38"},"Return Type"),(0,r.yg)("p",null,"resources_pb2.Output"),(0,r.yg)("h2",{id:"search"},"Search"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"class Search(user_id,app_id,top_k,metric,base_url = \"https://api.clarifai.com\",pat='',token='')\n")),(0,r.yg)("p",null,"Base class for Search."),(0,r.yg)("h3",{id:"search__init__"},"Search.","_","_init","_","_()"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"__init__(user_id,app_id,top_k,metric,base_url = \"https://api.clarifai.com\",pat='',token='')\n\n")),(0,r.yg)("p",null,"Initialize the Search object."),(0,r.yg)("h4",{id:"parameters-86"},"Parameters"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"user_id")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 User ID."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"app_id")," (",(0,r.yg)("em",{parentName:"li"},"str"),") \u2013 App ID."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"top_k"),"  (",(0,r.yg)("em",{parentName:"li"},"int"),") - Top K results to retrieve. Defaults to 10."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"metric")," (",(0,r.yg)("em",{parentName:"li"},"str"),") - Similarity metric (either 'cosine' or 'euclidean'). Defaults to 'cosine'."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"base_url")," (",(0,r.yg)("em",{parentName:"li"},"str"),') - Base API url. Defaults to "',(0,r.yg)("a",{parentName:"li",href:"https://api.clarifai.com%22"},'https://api.clarifai.com"'),"."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"pat")," (",(0,r.yg)("em",{parentName:"li"},"str"),") - A personal access token for authentication."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"token")," (",(0,r.yg)("em",{parentName:"li"},"str"),") - A session token for authentication. Accepts either a session token or a pat. Can be set as env var CLARIFAI_SESSION_TOKEN")),(0,r.yg)("h3",{id:"searchquery"},"Search.query()"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"query(ranks=[{}], filters=[{}])\n\n")),(0,r.yg)("p",null,"Perform a query with rank and filters."),(0,r.yg)("h4",{id:"parameters-87"},"Parameters"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"ranks")," (",(0,r.yg)("em",{parentName:"li"},"List","[Dict]"),") - List of rank parameters. Defaults to ","[{}]","."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"filters")," (",(0,r.yg)("em",{parentName:"li"},"List","[Dict]"),") - List of filter parameters. Defaults to ","[{}]",".")),(0,r.yg)("p",null,(0,r.yg)("em",{parentName:"p"},"The schema for rank and filters are given below"),":"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Rank and filter must be a list"),(0,r.yg)("li",{parentName:"ul"},"Each item in the list must be a dict"),(0,r.yg)("li",{parentName:"ul"},"The dict can contain these optional keys:",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},"'image_url': Valid URL string"),(0,r.yg)("li",{parentName:"ul"},"'text_raw': Non-empty string"),(0,r.yg)("li",{parentName:"ul"},"'metadata': Dict"),(0,r.yg)("li",{parentName:"ul"},"'image_bytes': Bytes"),(0,r.yg)("li",{parentName:"ul"},"'geo_point': Dict with 'longitude', 'latitude' and 'geo_limit' as float, float and int respectively"),(0,r.yg)("li",{parentName:"ul"},"'concepts': List where each item is a concept dict"))),(0,r.yg)("li",{parentName:"ul"},"Concept dict requires at least one of:",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},"'name': Non-empty string with dashes/underscores"),(0,r.yg)("li",{parentName:"ul"},"'id': Non-empty string"),(0,r.yg)("li",{parentName:"ul"},"'language': Non-empty string"),(0,r.yg)("li",{parentName:"ul"},"'value': 0 or 1 integer")))),(0,r.yg)("h4",{id:"returns-49"},"Returns"),(0,r.yg)("p",null,"A generator of query results."),(0,r.yg)("h4",{id:"return-type-39"},"Return Type"),(0,r.yg)("p",null,"Generator[Dict","[str, Any]",", None, None]"),(0,r.yg)("h4",{id:"exmaple"},"Exmaple"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"# Get successful inputs of type image or text\nfrom clarifai.client.search import Search\nsearch = Search(user_id='user_id', app_id='app_id', top_k=10, metric='cosine')\nres = search.query(filters=[{'input_types': ['image', 'text']}, {'input_status_code': 30000}])\n\n# Vector search over inputs\nfrom clarifai.client.search import Search\nsearch = Search(user_id='user_id', app_id='app_id', top_k=1, metric='cosine')\nres = search.query(ranks=[{'image_url': 'https://samples.clarifai.com/dog.tiff'}])\n")))}g.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[3380],{9358:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>en,contentTitle:()=>Q,default:()=>sn,frontMatter:()=>Z,metadata:()=>nn,toc:()=>tn});var a=t(74848),s=t(28453),o=t(11470),i=t(19365),r=t(21432);const l="####################################################################################\n# In this section, we set the user authentication, app ID, and the details of the\n# concepts we want to create. Change these strings to run your own example.\n####################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to create your own concepts\nCONCEPT_ID_1 = 'peopleID'\nCONCEPT_NAME_1 = 'people'\n\nCONCEPT_ID_2 = 'manID'\nCONCEPT_NAME_2 = 'man'\n\nCONCEPT_ID_3 = 'adultID'\nCONCEPT_NAME_3 = 'adult'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID) # The userDataObject is required when using a PAT\n\npost_concepts_response = stub.PostConcepts(\n    service_pb2.PostConceptsRequest(\n        user_app_id=userDataObject,  \n        concepts=[\n            resources_pb2.Concept(id=CONCEPT_ID_1, name=CONCEPT_NAME_1),\n            resources_pb2.Concept(id=CONCEPT_ID_2, name=CONCEPT_NAME_2),\n            resources_pb2.Concept(id=CONCEPT_ID_3, name=CONCEPT_NAME_3),\n        ]\n    ),\n    metadata=metadata\n)\n\nif post_concepts_response.status.code != status_code_pb2.SUCCESS:\n    print(post_concepts_response.status)\n    raise Exception(\"Post concepts failed, status: \" + post_concepts_response.status.description)\n",c="####################################################################################\n# In this section, we set the user authentication, app ID, and the details of the\n# concepts we want to link. Change these strings to run your own example.\n####################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to link your own concepts\n# Run this code three times; once for each concept you want to link\nMODEL_CONCEPT_ID = 'YOUR_MODEL_CONCEPT_ID'\nGENERAL_MODEL_CONCEPT_ID = 'GENERAL_MODEL_CONCEPT_ID'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID) # The userDataObject is required when using a PAT\n\npost_concept_relations_response = stub.PostConceptRelations(\n    service_pb2.PostConceptRelationsRequest(\n        user_app_id=userDataObject,  \n        concept_id=MODEL_CONCEPT_ID,\n        concept_relations=[\n            resources_pb2.ConceptRelation(\n                object_concept=resources_pb2.Concept(id=GENERAL_MODEL_CONCEPT_ID, app_id=\"main\"),\n                predicate=\"synonym\"\n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif post_concept_relations_response.status.code != status_code_pb2.SUCCESS:\n    print(post_concept_relations_response.status)\n    raise Exception(\"Post concept relations failed, status: \" + post_concept_relations_response.status.description)\n",d="###########################################################################################\n# In this section, we set the user authentication, app ID, and the details of the concept\n# mapper model we want to create. Change these strings to run your own example.\n###########################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to create your own concept mapper model\nSYNONYM_MODEL_ID = 'synonym-model-id'\nMODEL_TYPE_ID = 'concept-synonym-mapper'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\nfrom google.protobuf.struct_pb2 import Struct\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID) # The userDataObject is required when using a PAT\n\nparams = Struct()\nparams.update({\n    \"knowledge_graph_id\": \"\"\n})\n\npost_models_response = stub.PostModels(\n    service_pb2.PostModelsRequest(\n        user_app_id=userDataObject,  \n        models=[\n            resources_pb2.Model(\n                id=SYNONYM_MODEL_ID,\n                model_type_id=MODEL_TYPE_ID,\n                output_info=resources_pb2.OutputInfo(\n                    params=params,\n                )\n            ),\n        ]\n    ),\n    metadata=metadata\n)\n\nif post_models_response.status.code != status_code_pb2.SUCCESS:\n    print(post_models_response.status)\n    raise Exception(\"Post models failed, status: \" + post_models_response.status.description)\n    \nprint(post_models_response)",_="#########################################################################################\n# In this section, we set the user authentication, app ID, and the details of the model\n# we want to create. Change these strings to run your own example.\n#########################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to create your own concept thresholder model\nMODEL_ID = 'greater-than-model-id'\nMODEL_TYPE_ID = 'concept-thresholder'\nCONCEPT_ID_1 = 'peopleID'\nCONCEPT_ID_2 = 'manID'\nCONCEPT_ID_3 = 'adultID'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\nfrom google.protobuf.struct_pb2 import Struct\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID) # The userDataObject is required when using a PAT\n\nparams = Struct()\nparams.update({\n    \"concept_threshold_type\": \"GREATER_THAN\"\n})\n\npost_models_response = stub.PostModels(\n    service_pb2.PostModelsRequest(\n        user_app_id=userDataObject,  \n        models=[\n            resources_pb2.Model(\n                id=MODEL_ID,\n                model_type_id=MODEL_TYPE_ID,\n                output_info=resources_pb2.OutputInfo(\n                    data=resources_pb2.Data(\n                        concepts=[\n                            resources_pb2.Concept(id=CONCEPT_ID_1, value=0.5),\n                            resources_pb2.Concept(id=CONCEPT_ID_2, value=0.5),\n                            resources_pb2.Concept(id=CONCEPT_ID_3, value=0.95),\n                        ]\n                    ),\n                    params=params\n                )\n            ),\n        ]\n    ),\n    metadata=metadata\n)\n\nif post_models_response.status.code != status_code_pb2.SUCCESS:\n    print(post_models_response.status)\n    raise Exception(\"Post models failed, status: \" + post_models_response.status.description)\n",p="#########################################################################################\n# In this section, we set the user authentication, app ID, and the details of the model\n# we want to create. Change these strings to run your own example.\n#########################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to create your own concept thresholder model\nMODEL_ID = 'less-than-model-id'\nMODEL_TYPE_ID = 'concept-thresholder'\nCONCEPT_ID_1 = 'peopleID'\nCONCEPT_ID_2 = 'manID'\nCONCEPT_ID_3 = 'adultID'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\nfrom google.protobuf.struct_pb2 import Struct\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID) # The userDataObject is required when using a PAT\n\nparams = Struct()\nparams.update({\n    \"concept_threshold_type\": \"LESS_THAN\"\n})\n\npost_models_response = stub.PostModels(\n    service_pb2.PostModelsRequest(\n        user_app_id=userDataObject,  \n        models=[\n            resources_pb2.Model(\n                id=MODEL_ID,\n                model_type_id=MODEL_TYPE_ID,\n                output_info=resources_pb2.OutputInfo(\n                    data=resources_pb2.Data(\n                        concepts=[\n                            resources_pb2.Concept(id=CONCEPT_ID_1, value=0.5),\n                            resources_pb2.Concept(id=CONCEPT_ID_2, value=0.5),\n                            resources_pb2.Concept(id=CONCEPT_ID_3, value=0.95),\n                        ]\n                    ),\n                    params=params\n                )\n            ),\n        ]\n    ),\n    metadata=metadata\n)\n\nif post_models_response.status.code != status_code_pb2.SUCCESS:\n    print(post_models_response.status)\n    raise Exception(\"Post models failed, status: \" + post_models_response.status.description)\n    ",u="#########################################################################################\n# In this section, we set the user authentication, app ID, and the details of the model\n# we want to create. Change these strings to run your own example.\n#########################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to create your own annotation writer model\nANNOTATION_USER_ID = 'ANNOTATION_USER_ID_HERE'\nMODEL_ID = 'write-success-model-id'\nMODEL_TYPE_ID = 'annotation-writer'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\nfrom google.protobuf.struct_pb2 import Struct\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID) # The userDataObject is required when using a PAT\n\nparams = Struct()\nparams.update({\n    \"annotation_status\": status_code_pb2.ANNOTATION_SUCCESS,\n    \"annotation_user_id\": ANNOTATION_USER_ID\n})\n\npost_models_response = stub.PostModels(\n    service_pb2.PostModelsRequest(\n        user_app_id=userDataObject,  \n        models=[\n            resources_pb2.Model(\n                id=MODEL_ID,\n                model_type_id=MODEL_TYPE_ID,\n                output_info=resources_pb2.OutputInfo(\n                    params=params\n                )\n            ),\n        ]\n    ),\n    metadata=metadata\n)\n\nif post_models_response.status.code != status_code_pb2.SUCCESS:\n    print(post_models_response.status)\n    raise Exception(\"Post models failed, status: \" + post_models_response.status.description)\n",E="#########################################################################################\n# In this section, we set the user authentication, app ID, and the details of the model\n# we want to create. Change these strings to run your own example.\n#########################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to create your own annotation writer model\nANNOTATION_USER_ID = 'ANNOTATION_USER_ID_HERE'\nMODEL_ID = 'write-pending-model-id'\nMODEL_TYPE_ID = 'annotation-writer'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\nfrom google.protobuf.struct_pb2 import Struct\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID) # The userDataObject is required when using a PAT\n\nparams = Struct()\nparams.update({\n    \"annotation_status\": status_code_pb2.ANNOTATION_PENDING,\n    \"annotation_user_id\": ANNOTATION_USER_ID\n})\n\npost_models_response = stub.PostModels(\n    service_pb2.PostModelsRequest(\n        user_app_id=userDataObject,  \n        models=[\n            resources_pb2.Model(\n                id=MODEL_ID,\n                model_type_id=MODEL_TYPE_ID,\n                output_info=resources_pb2.OutputInfo(\n                    params=params\n                )\n            ),\n        ]\n    ),\n    metadata=metadata\n)\n\nif post_models_response.status.code != status_code_pb2.SUCCESS:\n    print(post_models_response.status)\n    raise Exception(\"Post models failed, status: \" + post_models_response.status.description)\n    ",h="###################################################################################\n# In this section, we set the user authentication, app ID, and the details of the \n# workflow we want to create. Change these strings to run your own example.\n##################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to create your own workflow \n# Note that we've also added as comments the values of most of these variables against their names in the code below\n\nWORKFLOW_ID = 'auto-annotation-workflow-id'\nNODE_ID_1 = 'general-embed'\nMODEL_ID_1 = 'bbb5f41425b8468d9b7a554ff10f8581'\nMODEL_VERSION_ID_1 = 'bb186755eda04f9cbb6fe32e816be104'\n\nNODE_ID_2 = 'general-concept'\nMODEL_ID_2 = 'aaa03c23b3724a16a56b629203edc62c'\nMODEL_VERSION_ID_2 = 'aa7f35c01e0642fda5cf400f543e7c40'\n\nNODE_ID_3 = 'general-cluster'\nMODEL_ID_3 = 'cccbe437d6e54e2bb911c6aa292fb072'\nMODEL_VERSION_ID_3 = 'cc2074cff6dc4c02b6f4e1b8606dcb54'\n\nNODE_ID_4 = 'mapper'\nSYNONYM_MODEL_ID = 'synonym-model-id'\nSYNONYM_MODEL_VERSION_ID = 'YOUR_SYNONYM_MODEL_VERSION_ID'\n\nNODE_ID_5 = 'greater-than'\nGREATER_THAN_MODEL_ID = 'greater-than-model-id'\nGREATER_THAN_MODEL_VERSION_ID = 'YOUR_GREATER_THAN_MODEL_VERSION_ID'\n\nNODE_ID_6 = 'write-success'\nWRITE_SUCCESS_MODEL_ID = 'write-success-model-id'\nWRITE_SUCCESS_MODEL_VERSION_ID = 'YOUR_WRITE_SUCCESS_MODEL_VERSION_ID'\n\nNODE_ID_7 = 'less-than'\nLESS_THAN_MODEL_ID = 'less-than-model-id'\nLESS_THAN_MODEL_VERSION_ID = 'YOUR_LESS_THAN_MODEL_VERSION_ID'\n\nNODE_ID_8 = 'write-pending'\nWRITE_PENDING_MODEL_ID = 'write-pending-model-id'\nWRITE_PENDING_MODEL_VERSION_ID = 'YOUR_WRITE_PENDING_MODEL_VERSION_ID'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID) # The userDataObject is required when using a PAT\n\npost_workflows_response = stub.PostWorkflows(\n    service_pb2.PostWorkflowsRequest(\n        user_app_id=userDataObject,  \n        workflows=[\n            resources_pb2.Workflow(\n                id=WORKFLOW_ID, # auto-annotation-workflow-id\n                nodes=[\n                    resources_pb2.WorkflowNode(\n                        id=NODE_ID_1, # general-embed\n                        model=resources_pb2.Model(\n                            id=MODEL_ID_1, # bbb5f41425b8468d9b7a554ff10f8581\n                            model_version=resources_pb2.ModelVersion(\n                                id=MODEL_VERSION_ID_1 # bb186755eda04f9cbb6fe32e816be104\n                            )\n                        )\n                    ),\n                    resources_pb2.WorkflowNode(\n                        id=NODE_ID_2, # general-concept\n                        model=resources_pb2.Model(\n                            id=MODEL_ID_2, # aaa03c23b3724a16a56b629203edc62c\n                            model_version=resources_pb2.ModelVersion(\n                                id=MODEL_VERSION_ID_2 # aa7f35c01e0642fda5cf400f543e7c40\n                            )\n                        )\n                    ),\n                    resources_pb2.WorkflowNode(\n                        id=NODE_ID_3, # general-cluster\n                        model=resources_pb2.Model(\n                            id=MODEL_ID_3, # cccbe437d6e54e2bb911c6aa292fb072\n                            model_version=resources_pb2.ModelVersion(\n                                id=MODEL_VERSION_ID_3 # cc2074cff6dc4c02b6f4e1b8606dcb54\n                            )\n                        ),\n                    ),\n                    resources_pb2.WorkflowNode(\n                        id=NODE_ID_4, # mapper\n                        model=resources_pb2.Model(\n                            id=SYNONYM_MODEL_ID,\n                            model_version=resources_pb2.ModelVersion(\n                                id=SYNONYM_MODEL_VERSION_ID\n                            )\n                        ),\n                        node_inputs=[\n                            resources_pb2.NodeInput(node_id=NODE_ID_2) # general-concept\n                        ]\n                    ),\n                    resources_pb2.WorkflowNode(\n                        id=NODE_ID_5, # greater-than\n                        model=resources_pb2.Model(\n                            id=GREATER_THAN_MODEL_ID,\n                            model_version=resources_pb2.ModelVersion(\n                                id=GREATER_THAN_MODEL_VERSION_ID\n                            )\n                        ),\n                        node_inputs=[\n                            resources_pb2.NodeInput(node_id=NODE_ID_4) # mapper\n                        ]\n                    ),\n                    resources_pb2.WorkflowNode(\n                        id=NODE_ID_6, # write-success\n                        model=resources_pb2.Model(\n                            id=WRITE_SUCCESS_MODEL_ID,\n                            model_version=resources_pb2.ModelVersion(\n                                id=WRITE_SUCCESS_MODEL_VERSION_ID\n                            )\n                        ),\n                        node_inputs=[\n                            resources_pb2.NodeInput(node_id=NODE_ID_5) # greater-than\n                        ]\n                    ),\n                    resources_pb2.WorkflowNode(\n                        id=NODE_ID_7, # less-than\n                        model=resources_pb2.Model(\n                            id=LESS_THAN_MODEL_ID,\n                            model_version=resources_pb2.ModelVersion(\n                                id=LESS_THAN_MODEL_VERSION_ID\n                            )\n                        ),\n                        node_inputs=[\n                            resources_pb2.NodeInput(node_id=NODE_ID_4) # mapper\n                        ]\n                    ),\n                    resources_pb2.WorkflowNode(\n                        id=NODE_ID_8, # write-pending\n                        model=resources_pb2.Model(\n                            id=WRITE_PENDING_MODEL_ID, \n                            model_version=resources_pb2.ModelVersion(\n                                id=WRITE_PENDING_MODEL_VERSION_ID\n                            )\n                        ),\n                        node_inputs=[\n                            resources_pb2.NodeInput(node_id=NODE_ID_7) # less-than\n                        ]\n                    ),\n                ]\n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif post_workflows_response.status.code != status_code_pb2.SUCCESS:\n    print(post_workflows_response.status)\n    raise Exception(\"Post workflows failed, status: \" + post_workflows_response.status.description)         \n",I="#######################################################################################\n# In this section, we set the user authentication, app ID, and the ID of the workflow\n# we want to make as default. Change these strings to run your own example.\n#######################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change this to make your own default workflow\nDEFAULT_WORKFLOW_ID = 'auto-annotation-workflow-id'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID) # The userDataObject is required when using a PAT\n\npatch_apps_response = stub.PatchApps(\n    service_pb2.PatchAppsRequest(\n        user_app_id=userDataObject,  \n        action=\"overwrite\",\n        apps=[\n            resources_pb2.App(\n                id=APP_ID,\n                default_workflow_id=DEFAULT_WORKFLOW_ID\n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif patch_apps_response.status.code != status_code_pb2.SUCCESS:\n    print(patch_apps_response.status)\n    raise Exception(\"Patch apps failed, status: \" + patch_apps_response.status.description)\n\n",D="#####################################################################################\n# In this section, we set the user authentication, app ID, and the URL of the image\n# we want to add. Change these strings to run your own example.\n#####################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change this to add your own image\nIMAGE_URL = 'https://samples.clarifai.com/metro-north.jpg'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID) # The userDataObject is required when using a PAT\n\npost_inputs_response = stub.PostInputs(\n    service_pb2.PostInputsRequest(\n        user_app_id=userDataObject,  \n        inputs=[\n            resources_pb2.Input(\n                data=resources_pb2.Data(\n                    image=resources_pb2.Image(\n                        url=IMAGE_URL\n                    )\n                )\n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif post_inputs_response.status.code != status_code_pb2.SUCCESS:\n    print(post_inputs_response.status)\n    raise Exception(\"Post inputs failed, status: \" + post_inputs_response.status.description)\n",m="###############################################################\n# In this section, we set the user authentication and app ID.\n# Change these strings to run your own example.\n###############################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID) # The userDataObject is required when using a PAT\n\nlist_annotations_response = stub.ListAnnotations(\n    service_pb2.ListAnnotationsRequest(\n        user_app_id=userDataObject,  \n        user_ids=[USER_ID],\n        list_all_annotations=True,\n    ),\n    metadata=metadata\n)\n\nif list_annotations_response.status.code != status_code_pb2.SUCCESS:\n    print(list_annotations_response.status)\n    raise Exception(\"List annotations failed, status: \" + list_annotations_response.status.description)\n\nfor annotation in list_annotations_response.annotations:\n    print(annotation)\n",O="//index.js file\n\n//////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the details of the\n// concepts we want to create. Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = 'YOUR_USER_ID_HERE';\n// Your PAT (Personal Access Token) can be found in the Account's Security section\nconst PAT = 'YOUR_PAT_HERE';\nconst APP_ID = 'YOUR_APP_ID_HERE';\n// Change these to create your own concepts\nconst CONCEPT_ID_1 = 'peopleID';\nconst CONCEPT_NAME_1 = 'people';\n\nconst CONCEPT_ID_2 = 'manID';\nconst CONCEPT_NAME_2 = 'man';\n\nconst CONCEPT_ID_3 = 'adultID';\nconst CONCEPT_NAME_3 = 'adult';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require(\"clarifai-nodejs-grpc\");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set(\"authorization\", \"Key \" + PAT);\n\nstub.PostConcepts(\n    {\n        user_app_id: {\n            user_id: USER_ID,\n            app_id: APP_ID\n        },\n        concepts: [\n            {\n                id: CONCEPT_ID_1,\n                name: CONCEPT_NAME_1\n            },\n            {\n                id: CONCEPT_ID_2,\n                name: CONCEPT_NAME_2\n            },\n            {\n                id: CONCEPT_ID_3,\n                name: CONCEPT_NAME_3\n            },\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error(\"Post concepts failed, status: \" + response.status.description);\n        }\n    }\n);\n",f='//index.js file\n\n//////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the details of the\n// concepts we want to link. Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n// Change these to link your own concepts\n// Run this code three times; once for each concept you want to link\nconst MODEL_CONCEPT_ID = \'YOUR_MODEL_CONCEPT_ID\';\nconst GENERAL_MODEL_CONCEPT_ID = \'GENERAL_MODEL_CONCEPT_ID\';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PostConceptRelations(\n  {\n      user_app_id: {\n        user_id: USER_ID,\n        app_id: APP_ID\n      },\n      concept_id: MODEL_CONCEPT_ID,\n      concept_relations: [\n          {\n              object_concept: {\n                  id: GENERAL_MODEL_CONCEPT_ID,\n                  app_id: "main"\n              },\n              predicate: "synonym"\n          }\n      ]\n  },\n  metadata,\n  (err, response) => {\n      if (err) {\n          throw new Error(err);\n      }\n\n      if (response.status.code !== 10000) {\n          throw new Error("Post concept relations failed, status: " + response.status.description);\n      }\n  }\n);\n',g="//index.js file\n\n//////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the details of the concept\n// mapper model we want to create. Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = 'YOUR_USER_ID_HERE';\n// Your PAT (Personal Access Token) can be found in the Account's Security section\nconst PAT = 'YOUR_PAT_HERE';\nconst APP_ID = 'YOUR_APP_ID_HERE';\n// Change these to create your own concept mapper model\nconst SYNONYM_MODEL_ID = 'synonym-model-id';\nconst MODEL_TYPE_ID = 'concept-synonym-mapper';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require(\"clarifai-nodejs-grpc\");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set(\"authorization\", \"Key \" + PAT);\n\nconst params = {\n    knowledge_graph_id: \"\"\n}\n\nstub.PostModels(\n    {\n        user_app_id: {\n            user_id: USER_ID,\n            app_id: APP_ID\n        },\n        models: [\n            {\n                id: SYNONYM_MODEL_ID,\n                model_type_id: MODEL_TYPE_ID,\n                output_info: {\n                    params: params,\n                }\n            },\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error(\"Post models failed, status: \" + response.status.description);\n        }\n    }\n);\n",A="//index.js file\n\n///////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the details of the model\n// we want to create. Change these strings to run your own example.\n///////////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = 'YOUR_USER_ID_HERE';\n// Your PAT (Personal Access Token) can be found in the Account's Security section\nconst PAT = 'YOUR_PAT_HERE';\nconst APP_ID = 'YOUR_APP_ID_HERE';\n// Change these to create your own concept thresholder model\nconst MODEL_ID = 'greater-than-model-id';\nconst MODEL_TYPE_ID = 'concept-thresholder';\nconst CONCEPT_ID_1 = 'peopleID';\nconst CONCEPT_ID_2 = 'manID';\nconst CONCEPT_ID_3 = 'adultID';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require(\"clarifai-nodejs-grpc\");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set(\"authorization\", \"Key \" + PAT);\n\nconst params = {\n    concept_threshold_type: \"GREATER_THAN\"\n}\n\nstub.PostModels(\n    {\n        user_app_id: {\n            user_id: USER_ID,\n            app_id: APP_ID\n        },\n        models: [\n            {\n                id: MODEL_ID,\n                model_type_id: MODEL_TYPE_ID,\n                output_info: {\n                    data: {\n                        concepts: [\n                            { id: CONCEPT_ID_1, value: 0.5 },\n                            { id: CONCEPT_ID_2, value: 0.5 },\n                            { id: CONCEPT_ID_3, value: 0.95 }\n                        ]\n                    },\n                },\n                params: params\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error(\"Post models failed, status: \" + response.status.description);\n        }\n    }\n);",N="//index.js file\n\n///////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the details of the model\n// we want to create. Change these strings to run your own example.\n///////////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = 'YOUR_USER_ID_HERE';\n// Your PAT (Personal Access Token) can be found in the Account's Security section\nconst PAT = 'YOUR_PAT_HERE';\nconst APP_ID = 'YOUR_APP_ID_HERE';\n// Change these to create your own concept thresholder model\nconst MODEL_ID = 'less-than-model-id';\nconst MODEL_TYPE_ID = 'concept-thresholder';\nconst CONCEPT_ID_1 = 'peopleID';\nconst CONCEPT_ID_2 = 'manID';\nconst CONCEPT_ID_3 = 'adultID';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require(\"clarifai-nodejs-grpc\");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set(\"authorization\", \"Key \" + PAT);\n\nconst params = {\n    concept_threshold_type: \"LESS_THAN\"\n}\n\nstub.PostModels(\n    {\n        user_app_id: {\n            user_id: USER_ID,\n            app_id: APP_ID\n        },\n        models: [\n            {\n                id: MODEL_ID,\n                model_type_id: MODEL_TYPE_ID,\n                output_info: {\n                    data: {\n                        concepts: [\n                            { id: CONCEPT_ID_1, value: 0.5 },\n                            { id: CONCEPT_ID_2, value: 0.5 },\n                            { id: CONCEPT_ID_3, value: 0.95 }\n                        ]\n                    },\n                    params: params\n                }\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error(\"Post models failed, status: \" + response.status.description);\n        }\n    }\n);",R="//index.js file\n\n///////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the details of the model\n// we want to create. Change these strings to run your own example.\n///////////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = 'YOUR_USER_ID_HERE';\n// Your PAT (Personal Access Token) can be found in the Account's Security section\nconst PAT = 'YOUR_PAT_HERE';\nconst APP_ID = 'YOUR_APP_ID_HERE';\n// Change these to create your own annotation writer model\nconst ANNOTATION_USER_ID = 'ANNOTATION_USER_ID_HERE';\nconst MODEL_ID = 'write-success-model-id';\nconst MODEL_TYPE_ID = 'annotation-writer';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require(\"clarifai-nodejs-grpc\");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set(\"authorization\", \"Key \" + PAT);\n\nconst params = {\n    annotation_status: \"ANNOTATION_SUCCESS\",\n    annotation_user_id: ANNOTATION_USER_ID\n}\n\nstub.PostModels(\n    {\n        user_app_id: {\n            user_id: USER_ID,\n            app_id: APP_ID\n        },\n        models: [\n            {\n                id: MODEL_ID,\n                model_type_id: MODEL_TYPE_ID,\n                output_info: {\n                    params: params\n                }\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {        \n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error(\"Post models failed, status: \" + response.status.description);\n        }\n    }\n);",S="//index.js file\n\n///////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the details of the model\n// we want to create. Change these strings to run your own example.\n///////////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = 'YOUR_USER_ID_HERE';\n// Your PAT (Personal Access Token) can be found in the Account's Security section\nconst PAT = 'YOUR_PAT_HERE';\nconst APP_ID = 'YOUR_APP_ID_HERE';\n// Change these to create your own annotation writer model\nconst ANNOTATION_USER_ID = 'ANNOTATION_USER_ID_HERE';\nconst MODEL_ID = 'write-pending-model-id';\nconst MODEL_TYPE_ID = 'annotation-writer';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require(\"clarifai-nodejs-grpc\");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set(\"authorization\", \"Key \" + PAT);\n\nconst params = {\n    annotation_status: \"ANNOTATION_SUCCESS\",\n    annotation_user_id: ANNOTATION_USER_ID\n}\n\nstub.PostModels(\n    {\n        user_app_id: {\n            user_id: USER_ID,\n            app_id: APP_ID\n        },\n        models: [\n            {\n                id: MODEL_ID,\n                model_type_id: MODEL_TYPE_ID,\n                output_info: {\n                    params: params\n                }\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error(\"Post models failed, status: \" + response.status.description);\n        }\n    }\n);",C="//index.js file\n\n////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the details of the \n// workflow we want to create. Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = 'YOUR_USER_ID_HERE';\n// Your PAT (Personal Access Token) can be found in the Account's Security section\nconst PAT = 'YOUR_PAT_HERE';\nconst APP_ID = 'YOUR_APP_ID_HERE';\n// Change these to create your own workflow \n// Note that we've also added as comments the values of most of these variables against their names in the code below\n\nconst WORKFLOW_ID = 'auto-annotation-workflow-id';\nconst NODE_ID_1 = 'general-embed';\nconst MODEL_ID_1 = 'bbb5f41425b8468d9b7a554ff10f8581';\nconst MODEL_VERSION_ID_1 = 'bb186755eda04f9cbb6fe32e816be104';\n\nconst NODE_ID_2 = 'general-concept';\nconst MODEL_ID_2 = 'aaa03c23b3724a16a56b629203edc62c';\nconst MODEL_VERSION_ID_2 = 'aa7f35c01e0642fda5cf400f543e7c40';\n\nconst NODE_ID_3 = 'general-cluster';\nconst MODEL_ID_3 = 'cccbe437d6e54e2bb911c6aa292fb072';\nconst MODEL_VERSION_ID_3 = 'cc2074cff6dc4c02b6f4e1b8606dcb54';\n\nconst NODE_ID_4 = 'mapper';\nconst SYNONYM_MODEL_ID = 'synonym-model-id';\nconst SYNONYM_MODEL_VERSION_ID = 'YOUR_SYNONYM_MODEL_VERSION_ID';\n\nconst NODE_ID_5 = 'greater-than';\nconst GREATER_THAN_MODEL_ID = 'greater-than-model-id';\nconst GREATER_THAN_MODEL_VERSION_ID = 'YOUR_GREATER_THAN_MODEL_VERSION_ID';\n\nconst NODE_ID_6 = 'write-success';\nconst WRITE_SUCCESS_MODEL_ID = 'write-success-model-id';\nconst WRITE_SUCCESS_MODEL_VERSION_ID = 'YOUR_WRITE_SUCCESS_MODEL_VERSION_ID';\n\nconst NODE_ID_7 = 'less-than';\nconst LESS_THAN_MODEL_ID = 'less-than-model-id';\nconst LESS_THAN_MODEL_VERSION_ID = 'YOUR_LESS_THAN_MODEL_VERSION_ID';\n\nconst NODE_ID_8 = 'write-pending';\nconst WRITE_PENDING_MODEL_ID = 'write-pending-model-id';\nconst WRITE_PENDING_MODEL_VERSION_ID = 'YOUR_WRITE_PENDING_MODEL_VERSION_ID';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require(\"clarifai-nodejs-grpc\");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set(\"authorization\", \"Key \" + PAT);\n\nstub.PostWorkflows(\n    {\n        user_app_id: {\n            user_id: USER_ID,\n            app_id: APP_ID\n        },\n        workflows: [\n            {\n                id: WORKFLOW_ID, // auto-annotation-workflow-id\n                nodes: [\n                    {\n                        id: NODE_ID_1, // general-embed\n                        model: {\n                            id: MODEL_ID_1, // bbb5f41425b8468d9b7a554ff10f8581\n                            model_version: {\n                                id: MODEL_VERSION_ID_1, // bb186755eda04f9cbb6fe32e816be104\n                            }\n                        }\n                    },\n                    {\n                        id: NODE_ID_2, // general-concept\n                        model: {\n                            id: MODEL_ID_2, // aaa03c23b3724a16a56b629203edc62c\n                            model_version: {\n                                id: MODEL_VERSION_ID_2, // aa7f35c01e0642fda5cf400f543e7c40\n                            }\n                        }\n                    },\n                    {\n                        id: NODE_ID_3, // general-cluster\n                        model: {\n                            id: MODEL_ID_3, // cccbe437d6e54e2bb911c6aa292fb072\n                            model_version: {\n                                id: MODEL_VERSION_ID_3, // cc2074cff6dc4c02b6f4e1b8606dcb54\n                            }\n                        }\n                    },\n                    {\n                        id: NODE_ID_4, // mapper\n                        model: {\n                            id: SYNONYM_MODEL_ID, // synonym-model-id\n                            model_version: {\n                                id: SYNONYM_MODEL_VERSION_ID\n                            }\n                        },\n                        node_inputs: [\n                            {\n                                node_id: NODE_ID_2 // general-concept\n                            }\n                        ]\n                    },\n                    {\n                        id: NODE_ID_5, // greater-than\n                        model: {\n                            id: GREATER_THAN_MODEL_ID, // greater-than-model-id\n                            model_version: {\n                                id: GREATER_THAN_MODEL_VERSION_ID\n                            }\n                        },\n                        node_inputs: [\n                            {\n                                node_id: NODE_ID_4 // mapper\n                            }\n                        ]\n                    },\n                    {\n                        id: NODE_ID_6, // write-success\n                        model: {\n                            id: WRITE_SUCCESS_MODEL_ID,\n                            model_version: {\n                                id: WRITE_SUCCESS_MODEL_VERSION_ID\n                            }\n                        },\n                        node_inputs: [\n                            {\n                                node_id: NODE_ID_5 // greater-than\n                            }\n                        ]\n                    },\n                    {\n                        id: NODE_ID_7, // less-than\n                        model: {\n                            id: LESS_THAN_MODEL_ID,\n                            model_version: {\n                                id: LESS_THAN_MODEL_VERSION_ID\n                            }\n                        },\n                        node_inputs: [\n                            {\n                                node_id: NODE_ID_4 // mapper\n                            }\n                        ]\n                    },\n                    {\n                        id: NODE_ID_8, // write-pending\n                        model: {\n                            id: WRITE_PENDING_MODEL_ID,\n                            model_version: {\n                                id: WRITE_PENDING_MODEL_VERSION_ID\n                            }\n                        },\n                        node_inputs: [\n                            {\n                                node_id: NODE_ID_7 // less-than\n                            }\n                        ]\n                    }\n                ]\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            console.log(response.status);\n            throw new Error(\"Post workflows failed, status: \" + response.status.description);\n        }\n    }\n);\n\n",T='//index.js file\n\n/////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the ID of the workflow\n// we want to make as default. Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n// Change this to make your own default workflow\nconst DEFAULT_WORKFLOW_ID = \'auto-annotation-workflow-id\';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PatchApps(\n    {\n        user_app_id: {\n            user_id: USER_ID,\n            app_id: APP_ID\n        },\n        action: "overwrite",\n        apps: [\n            {\n                id: APP_ID,\n                default_workflow_id: DEFAULT_WORKFLOW_ID\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            console.log(response.status);\n            throw new Error("Patch apps failed, status: " + response.status.description);\n        }\n    }\n);\n',w="//index.js file\n\n/////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the URL of the image\n// we want to add. Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = 'YOUR_USER_ID_HERE';\n// Your PAT (Personal Access Token) can be found in the Account's Security section\nconst PAT = 'YOUR_PAT_HERE';\nconst APP_ID = 'YOUR_APP_ID_HERE';\n// Change this to add your own image\nconst IMAGE_URL = 'https://samples.clarifai.com/metro-north.jpg';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require(\"clarifai-nodejs-grpc\");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set(\"authorization\", \"Key \" + PAT);\n\nstub.PostInputs(\n    {\n        user_app_id: {\n            user_id: USER_ID,\n            app_id: APP_ID\n        },\n        inputs: [\n            {\n                data: {\n                    image: {\n                        url: IMAGE_URL\n                    }\n                }\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            console.log(response.status);\n            throw new Error(\"Post inputs failed, status: \" + response.status.description);\n        }\n    }\n);",b='//index.js file\n\n////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication and app ID.\n// Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.ListAnnotations(\n    {\n        user_app_id: {\n            app_id: APP_ID\n        },\n        user_ids: [USER_ID],\n        list_all_annotations: true\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("List annotations failed, status: " + response.status.description);\n        }\n\n        for (const annotation of response.annotations) {\n            console.log(annotation);\n        }\n    }\n);',P='package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    //////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the details of the\n    // concepts we want to create. Change these strings to run your own example.\n    /////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to create your own concepts\n    static final String CONCEPT_ID_1 = "peopleID";\n    static final String CONCEPT_NAME_1 = "people";\n\n    static final String CONCEPT_ID_2 = "manID";\n    static final String CONCEPT_NAME_2 = "man";\n\n    static final String CONCEPT_ID_3 = "adultID";\n    static final String CONCEPT_NAME_3 = "adult";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiConceptResponse postConceptsResponse = stub.postConcepts(\n            PostConceptsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setAppId(APP_ID))\n            .addConcepts(\n                Concept.newBuilder()\n                .setId(CONCEPT_ID_1)\n                .setName(CONCEPT_NAME_1)\n            )\n            .addConcepts(\n                Concept.newBuilder()\n                .setId(CONCEPT_ID_2)\n                .setName(CONCEPT_NAME_2)\n            )\n            .addConcepts(\n                Concept.newBuilder()\n                .setId(CONCEPT_ID_3)\n                .setName(CONCEPT_NAME_3)\n            )\n            .build()\n        );\n\n        if (postConceptsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post concepts failed, status: " + postConceptsResponse.getStatus());\n        }\n\n    }\n\n}',U='package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    //////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the details of the\n    // concepts we want to link. Change these strings to run your own example.\n    /////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to link your own concepts\n    // Run this code three times; once for each concept you want to link\n    static final String MODEL_CONCEPT_ID = "YOUR_MODEL_CONCEPT_ID";\n    static final String GENERAL_MODEL_CONCEPT_ID = "GENERAL_MODEL_CONCEPT_ID";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiConceptRelationResponse postConceptRelationsResponse = stub.postConceptRelations(\n            PostConceptRelationsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .setConceptId(MODEL_CONCEPT_ID)\n            .addConceptRelations(\n                ConceptRelation.newBuilder()\n                .setObjectConcept(\n                    Concept.newBuilder()\n                    .setId(GENERAL_MODEL_CONCEPT_ID)\n                    .setAppId("main")\n                )\n                .setPredicate("synonym").build())\n            .build()\n        );\n\n        if (postConceptRelationsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post concept relations failed, status: " + postConceptRelationsResponse.getStatus());\n        }\n\n    }\n\n}',M='package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.StatusCode;\nimport com.google.protobuf.Struct;\nimport com.google.protobuf.Value;\n\npublic class ClarifaiExample {\n\n    //////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the details of the concept\n    // mapper model we want to create. Change these strings to run your own example.\n    /////////////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\t\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to create your own concept mapper model\n    static final String SYNONYM_MODEL_ID = "synonym-model-id";\n    static final String MODEL_TYPE_ID = "concept-synonym-mapper";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        Struct.Builder params = Struct.newBuilder()\n            .putFields("knowledge_graph_id", Value.newBuilder().setStringValue("").build());\n\n        SingleModelResponse postModelsResponse = stub.postModels(\n            PostModelsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .addModels(\n                Model.newBuilder()\n                .setId(SYNONYM_MODEL_ID)\n                .setModelTypeId(MODEL_TYPE_ID)\n                .setOutputInfo(\n                    OutputInfo.newBuilder()\n                    .setParams(params)\n                )\n            )\n            .build()\n        );\n\n        if (postModelsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post models failed, status: " + postModelsResponse.getStatus());\n        }\n\n    }\n\n}',L='package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.StatusCode;\nimport com.google.protobuf.Struct;\nimport com.google.protobuf.Value;\n\npublic class ClarifaiExample {\n\n    ///////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the details of the model\n    // we want to create. Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to create your own concept thresholder model\n    static final String MODEL_ID = "greater-than-model-id";\n    static final String MODEL_TYPE_ID = "concept-thresholder";\n    static final String CONCEPT_ID_1 = "peopleID";\n    static final String CONCEPT_ID_2 = "manID";\n    static final String CONCEPT_ID_3 = "adultID";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        Struct.Builder params = Struct.newBuilder()\n            .putFields(\n                "concept_threshold_type",\n                Value.newBuilder().setNumberValue(ValueComparator.GREATER_THAN_VALUE).build()\n            );\n\n        SingleModelResponse postModelsResponse = stub.postModels(\n            PostModelsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .addModels(\n                Model.newBuilder()\n                .setId(MODEL_ID)\n                .setModelTypeId(MODEL_TYPE_ID)\n                .setOutputInfo(\n                    OutputInfo.newBuilder()\n                    .setData(\n                        Data.newBuilder()\n                        .addConcepts(\n                            Concept.newBuilder()\n                            .setId(CONCEPT_ID_1)\n                            .setValue(0.5f)\n                        )\n                        .addConcepts(\n                            Concept.newBuilder()\n                            .setId(CONCEPT_ID_2)\n                            .setValue(0.5f)\n                        )\n                        .addConcepts(\n                            Concept.newBuilder()\n                            .setId(CONCEPT_ID_3)\n                            .setValue(0.95f)\n                        )\n                    )\n                    .setParams(params)\n                )\n            )\n            .build()\n        );\n\n        if (postModelsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post models failed, status: " + postModelsResponse.getStatus());\n        }\n\n    }\n\n}',y='package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.StatusCode;\nimport com.google.protobuf.Struct;\nimport com.google.protobuf.Value;\n\npublic class ClarifaiExample {\n\n    ///////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the details of the model\n    // we want to create. Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to create your own concept thresholder model\n    static final String MODEL_ID = "less-than-model-id";\n    static final String MODEL_TYPE_ID = "concept-thresholder";\n    static final String CONCEPT_ID_1 = "peopleID";\n    static final String CONCEPT_ID_2 = "manID";\n    static final String CONCEPT_ID_3 = "adultID";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        Struct.Builder params = Struct.newBuilder()\n            .putFields(\n                "concept_threshold_type",\n                Value.newBuilder().setNumberValue(ValueComparator.LESS_THAN_VALUE).build()\n            );\n\n        SingleModelResponse postModelsResponse = stub.postModels(\n            PostModelsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .addModels(\n                Model.newBuilder()\n                .setId(MODEL_ID)\n                .setModelTypeId(MODEL_TYPE_ID)\n                .setOutputInfo(\n                    OutputInfo.newBuilder()\n                    .setData(\n                        Data.newBuilder()\n                        .addConcepts(\n                            Concept.newBuilder()\n                            .setId(CONCEPT_ID_1)\n                            .setValue(0.5f)\n                        )\n                        .addConcepts(\n                            Concept.newBuilder()\n                            .setId(CONCEPT_ID_2)\n                            .setValue(0.5f)\n                        )\n                        .addConcepts(\n                            Concept.newBuilder()\n                            .setId(CONCEPT_ID_3)\n                            .setValue(0.95f)\n                        )\n                    )\n                    .setParams(params)\n                )\n            )\n            .build()\n        );\n\n        if (postModelsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post models failed, status: " + postModelsResponse.getStatus());\n        }\n\n    }\n\n}',H='package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.StatusCode;\nimport com.google.protobuf.Struct;\nimport com.google.protobuf.Value;\n\npublic class ClarifaiExample {\n\n    ///////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the details of the model\n    // we want to create. Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to create your own annotation writer model\n    static final String ANNOTATION_USER_ID = "ANNOTATION_USER_ID_HERE";\n    static final String MODEL_ID = "write-success-as-me-id";\n    static final String MODEL_TYPE_ID = "annotation-writer";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        Struct.Builder params = Struct.newBuilder()\n            .putFields(\n                "annotation_status", Value.newBuilder().setNumberValue(StatusCode.ANNOTATION_SUCCESS_VALUE).build()\n            )\n            .putFields(\n                "annotation_user_id",\n                Value.newBuilder().setStringValue(ANNOTATION_USER_ID).build()\n            );\n\n        SingleModelResponse postModelsResponse = stub.postModels(\n            PostModelsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .addModels(\n                Model.newBuilder()\n                .setId(MODEL_ID)\n                .setModelTypeId(MODEL_TYPE_ID)\n                .setOutputInfo(\n                    OutputInfo.newBuilder()\n                    .setParams(params)\n                )\n            )\n            .build()\n        );\n\n        if (postModelsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post models failed, status: " + postModelsResponse.getStatus());\n        }\n\n    }\n\n}',Y='package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.StatusCode;\nimport com.google.protobuf.Struct;\nimport com.google.protobuf.Value;\n\npublic class ClarifaiExample {\n\n    ///////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the details of the model\n    // we want to create. Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to create your own annotation writer model\n    static final String ANNOTATION_USER_ID = "ANNOTATION_USER_ID_HERE";\n    static final String MODEL_ID = "write-pending-as-me-id";\n    static final String MODEL_TYPE_ID = "annotation-writer";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        Struct.Builder params = Struct.newBuilder()\n            .putFields(\n                "annotation_status", Value.newBuilder().setNumberValue(StatusCode.ANNOTATION_PENDING_VALUE).build()\n            )\n            .putFields(\n                "annotation_user_id",\n                Value.newBuilder().setStringValue(ANNOTATION_USER_ID).build()\n            );\n\n        SingleModelResponse postModelsResponse = stub.postModels(\n            PostModelsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .addModels(\n                Model.newBuilder()\n                .setId(MODEL_ID)\n                .setModelTypeId(MODEL_TYPE_ID)\n                .setOutputInfo(\n                    OutputInfo.newBuilder()\n                    .setParams(params)\n                )\n            )\n            .build()\n        );\n\n        if (postModelsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post models failed, status: " + postModelsResponse.getStatus());\n        }\n\n    }\n\n}',v='package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    ////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the details of the \n    // workflow we want to create. Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to create your own workflow \n    // Note that we\'ve also added as comments the values of most of these variables against their names in the code below\n\n    static final String WORKFLOW_ID = "auto-annotation-workflow-id";\n    static final String NODE_ID_1 = "general-embed";\n    static final String MODEL_ID_1 = "bbb5f41425b8468d9b7a554ff10f8581";\n    static final String MODEL_VERSION_ID_1 = "bb186755eda04f9cbb6fe32e816be104";\n\n    static final String NODE_ID_2 = "general-concept";\n    static final String MODEL_ID_2 = "aaa03c23b3724a16a56b629203edc62c";\n    static final String MODEL_VERSION_ID_2 = "aa7f35c01e0642fda5cf400f543e7c40";\n\n    static final String NODE_ID_3 = "general-cluster";\n    static final String MODEL_ID_3 = "cccbe437d6e54e2bb911c6aa292fb072";\n    static final String MODEL_VERSION_ID_3 = "cc2074cff6dc4c02b6f4e1b8606dcb54";\n\n    static final String NODE_ID_4 = "mapper";\n    static final String SYNONYM_MODEL_ID = "synonym-model-id";\n    static final String SYNONYM_MODEL_VERSION_ID = "YOUR_SYNONYM_MODEL_VERSION_ID";\n\n    static final String NODE_ID_5 = "greater-than";\n    static final String GREATER_THAN_MODEL_ID = "greater-than-model-id";\n    static final String GREATER_THAN_MODEL_VERSION_ID = "YOUR_GREATER_THAN_MODEL_VERSION_ID";\n\n    static final String NODE_ID_6 = "write-as-success-as-me";\n    static final String WRITE_SUCCESS_MODEL_ID = "write-success-as-me-id";\n    static final String WRITE_SUCCESS_MODEL_VERSION_ID = "YOUR_WRITE_SUCCESS_MODEL_VERSION_ID";\n\n    static final String NODE_ID_7 = "less-than";\n    static final String LESS_THAN_MODEL_ID = "less-than-model-id";\n    static final String LESS_THAN_MODEL_VERSION_ID = "YOUR_LESS_THAN_MODEL_VERSION_ID";\n\n    static final String NODE_ID_8 = "write-pending";\n    static final String WRITE_PENDING_MODEL_ID = "write-pending-as-me-id";\n    static final String WRITE_PENDING_MODEL_VERSION_ID = "YOUR_WRITE_PENDING_MODEL_VERSION_ID";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiWorkflowResponse postWorkflowsResponse = stub.postWorkflows(\n            PostWorkflowsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .addWorkflows(\n                Workflow.newBuilder()\n                .setId(WORKFLOW_ID) //auto-annotation-workflow-id\n                .addNodes(\n                    WorkflowNode.newBuilder()\n                    .setId(NODE_ID_1) // general-embed\n                    .setModel(\n                        Model.newBuilder()\n                        .setId(MODEL_ID_1) // bbb5f41425b8468d9b7a554ff10f8581\n                        .setModelVersion(\n                            ModelVersion.newBuilder()\n                            .setId(MODEL_VERSION_ID_1) // bb186755eda04f9cbb6fe32e816be104\n                        )\n                    )\n                )\n                .addNodes(\n                    WorkflowNode.newBuilder()\n                    .setId(NODE_ID_2) // general-concept\n                    .setModel(\n                        Model.newBuilder()\n                        .setId(MODEL_ID_2) // aaa03c23b3724a16a56b629203edc62c\n                        .setModelVersion(\n                            ModelVersion.newBuilder()\n                            .setId(MODEL_VERSION_ID_2) // aa7f35c01e0642fda5cf400f543e7c40\n                        )\n                    )\n                )\n                .addNodes(\n                    WorkflowNode.newBuilder()\n                    .setId(NODE_ID_3) // general-cluster\n                    .setModel(\n                        Model.newBuilder()\n                        .setId(MODEL_ID_3) // cccbe437d6e54e2bb911c6aa292fb072\n                        .setModelVersion(\n                            ModelVersion.newBuilder()\n                            .setId(MODEL_VERSION_ID_3) // cc2074cff6dc4c02b6f4e1b8606dcb54\n                        )\n                    )\n                )\n                .addNodes(\n                    WorkflowNode.newBuilder()\n                    .setId(NODE_ID_4) // mapper\n                    .setModel(\n                        Model.newBuilder()\n                        .setId(SYNONYM_MODEL_ID) // synonym-model-id\n                        .setModelVersion(\n                            ModelVersion.newBuilder()\n                            .setId(SYNONYM_MODEL_VERSION_ID)\n                        )\n                    )\n                    .addNodeInputs(NodeInput.newBuilder().setNodeId(NODE_ID_2)) // general-concept\n                )\n                .addNodes(\n                    WorkflowNode.newBuilder()\n                    .setId(NODE_ID_5) // greater-than\n                    .setModel(\n                        Model.newBuilder()\n                        .setId(GREATER_THAN_MODEL_ID) // greater-than-model-id\n                        .setModelVersion(\n                            ModelVersion.newBuilder()\n                            .setId(GREATER_THAN_MODEL_VERSION_ID)\n                        )\n                    )\n                    .addNodeInputs(NodeInput.newBuilder().setNodeId(NODE_ID_4)) // mapper\n                )\n                .addNodes(\n                    WorkflowNode.newBuilder()\n                    .setId(NODE_ID_6) // write-as-success-as-me\n                    .setModel(\n                        Model.newBuilder()\n                        .setId(WRITE_SUCCESS_MODEL_ID) // write-success-as-me-id\n                        .setModelVersion(\n                            ModelVersion.newBuilder()\n                            .setId(WRITE_SUCCESS_MODEL_VERSION_ID)\n                        )\n                    )\n                    .addNodeInputs(NodeInput.newBuilder().setNodeId(NODE_ID_5)) // greater-than\n                )\n                .addNodes(\n                    WorkflowNode.newBuilder()\n                    .setId(NODE_ID_7) // less-than\n                    .setModel(\n                        Model.newBuilder()\n                        .setId(LESS_THAN_MODEL_ID) \n                        .setModelVersion(\n                            ModelVersion.newBuilder()\n                            .setId(LESS_THAN_MODEL_VERSION_ID)\n                        )\n                    )\n                    .addNodeInputs(NodeInput.newBuilder().setNodeId(NODE_ID_4)) // mapper\n                )\n                .addNodes(\n                    WorkflowNode.newBuilder()\n                    .setId(NODE_ID_8) // write-pending\n                    .setModel(\n                        Model.newBuilder()\n                        .setId(WRITE_PENDING_MODEL_ID) // write-pending-as-me-id\n                        .setModelVersion(\n                            ModelVersion.newBuilder()\n                            .setId(WRITE_PENDING_MODEL_VERSION_ID)\n                        )\n                    )\n                    .addNodeInputs(NodeInput.newBuilder().setNodeId(NODE_ID_7)) // less-than\n                )\n            )\n            .build()\n        );\n\n        if (postWorkflowsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post workflows failed, status: " + postWorkflowsResponse.getStatus());\n        }\n\n    }\n\n}',j='package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    /////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the ID of the workflow\n    // we want to make as default. Change these strings to run your own example.\n    /////////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change this to make your own default workflow\n    static final String DEFAULT_WORKFLOW_ID = "auto-annotation-workflow-id";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiAppResponse patchAppsResponse = stub.patchApps(\n            PatchAppsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .setAction("overwrite")\n            .addApps(\n                App.newBuilder()\n                .setId(APP_ID)\n                .setDefaultWorkflowId(DEFAULT_WORKFLOW_ID)\n            ).build()\n        );\n\n        if (patchAppsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Patch apps failed, status: " + patchAppsResponse.getStatus());\n        }\n\n    }\n\n}',x='package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    /////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the URL of the image\n    // we want to add. Change these strings to run your own example.\n    /////////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_PAT_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change this to add your own image\n    static final String IMAGE_URL = "https://samples.clarifai.com/metro-north.jpg";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiInputResponse postInputsResponse = stub.postInputs(\n            PostInputsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .addInputs(\n                Input.newBuilder()\n                .setData(\n                    Data.newBuilder()\n                    .setImage(\n                        Image.newBuilder()\n                        .setUrl(IMAGE_URL)\n                    )\n                )\n            )\n            .build()\n        );\n\n        if (postInputsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post inputs failed, status: " + postInputsResponse.getStatus());\n        }\n\n    }\n\n}',k='package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    ////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication and app ID.\n    // Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiAnnotationResponse listAnnotationsResponse = stub.listAnnotations(\n            ListAnnotationsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .addUserIds(USER_ID)\n            .setListAllAnnotations(true)\n            .build()\n        );\n\n        if (listAnnotationsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("List annotations failed, status: " + listAnnotationsResponse.getStatus());\n        }\n\n        for (Annotation annotation: listAnnotationsResponse.getAnnotationsList()) {\n            System.out.println(annotation);\n        }\n\n    }\n\n}',V='curl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/concepts" \\\n    -H "Authorization: Key YOUR_PAT_HERE" \\\n    -H "Content-Type: application/json" \\\n    --data-raw \'{\n        "concepts": [\n            {\n                "id": "peopleID",\n                "name": "people"\n            },\n            {\n                "id": "manID",\n                "name": "man"\n            },\n            {\n                "id": "adultID",\n                "name": "adult"\n            }\n        ]\n    }\'',G='curl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/concepts/YOUR_MODEL_CONCEPT_ID_HERE/relations" \\\n    -H "Authorization: Key YOUR_PAT_HERE" \\\n    -H "Content-Type: application/json" \\\n    --data-raw \'{\n        "concept_relations": [\n            {\n                "object_concept": {\n                    "id": "GENERAL_MODEL_CONCEPT_ID_HERE",\n                    "app_id": "main"\n                },\n                "predicate": "synonym"\n            }\n        ]\n    }\'',B='curl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/models" \\\n    -H "Authorization: Key YOUR_PAT_HERE" \\\n    -H "Content-Type: application/json" \\\n    --data-raw \'{\n        "model": {\n            "id": "synonym-model-id",\n            "model_type_id": "concept-synonym-mapper",\n            "output_info": {\n                "params": {\n                    "knowledge_graph_id": ""\n                }\n            }\n        }\n    }\'',W='curl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/models" \\\n    -H "Authorization: Key YOUR_PAT_HERE" \\\n    -H "Content-Type: application/json" \\\n    --data-raw \'{\n        "model": {\n            "id": "greater-than-model-id",\n            "model_type_id": "concept-thresholder",\n            "output_info": {\n                "data": {\n                    "concepts": [\n                        {\n                            "id": "peopleID",\n                            "value": 0.5\n                        },\n                        {\n                            "id": "manID",\n                            "value": 0.5\n                        },\n                        {\n                            "id": "adultID",\n                            "value": 0.95\n                        }\n                    ]\n                },\n                "params": {\n                    "concept_threshold_type": "GREATER_THAN"\n                }\n            }\n        }\n    }\'',q='curl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/models" \\\n    -H "Authorization: Key YOUR_PAT_HERE" \\\n    -H "Content-Type: application/json" \\\n    --data-raw \'{\n        "model": {\n            "id": "less-than-model-id",\n            "model_type_id": "concept-thresholder",\n            "output_info": {\n                "data": {\n                    "concepts": [\n                        {\n                            "id": "peopleID",\n                            "value": 0.5\n                        },\n                        {\n                            "id": "manID",\n                            "value": 0.5\n                        },\n                        {\n                            "id": "adultID",\n                            "value": 0.95\n                        }\n                    ]\n                },\n                "params": {\n                    "concept_threshold_type": "LESS_THAN"\n                }\n            }\n        }\n    }\'',K='curl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/models" \\\n    -H "Authorization: Key YOUR_PAT_HERE" \\\n    -H "Content-Type: application/json" \\\n    --data-raw \'{\n        "model": {\n            "id": "write-success-as-me",\n            "model_type_id": "annotation-writer",\n            "output_info": {\n                "params": {\n                    "annotation_status": 24150,\n                    "annotation_user_id": "ANNOTATION_USER_ID_HERE"\n                }\n            }\n        }\n    }\'',X='curl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/models" \\\n    -H "Authorization: Key YOUR_PAT_HERE" \\\n    -H "Content-Type: application/json" \\\n    --data-raw \'{\n        "model": {\n            "id": "write-pending-as-me",\n            "model_type_id": "annotation-writer",\n            "output_info": {\n                "params": {\n                    "annotation_status": 24151,\n                    "annotation_user_id": "ANNOTATION_USER_ID_HERE"\n                }\n            }\n        }\n    }\'',z='curl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/workflows" \\\n    -H "Authorization: Key YOUR_PAT_HERE" \\\n    -H "Content-Type: application/json" \\\n    --data-raw \'{\n        "workflows": [\n            {\n                "id": "auto-annotation-workflow-id",\n                "nodes": [\n                    {\n                        "id": "general-embed",\n                        "model": {\n                            "id": "YOUR_GENERAL_EMBED_MODEL_ID_HERE",\n                            "model_version": {\n                                "id": "YOUR_GENERAL_EMBED_MODEL_VERSION_ID_HERE"\n                            }\n                        }\n                    },\n                    {\n                        "id": "general-concept",\n                        "model": {\n                            "id": "YOUR_GENERAL_CONCEPT_MODEL_ID_HERE",\n                            "model_version": {\n                                "id": "YOUR_GENERAL_CONCEPT_MODEL_VERSION_ID_HERE"\n                            }\n                        }\n                    },\n                    {\n                        "id": "general-cluster",\n                        "model": {\n                            "id": "YOUR_GENERAL_CLUSTER_MODEL_ID_HERE",\n                            "model_version": {\n                                "id": "YOUR_GENERAL_CLUSTER_MODEL_VERSION_ID_HERE"\n                            }\n                        }\n                    },\n                    {\n                        "id": "mapper",\n                        "model": {\n                            "id": "synonym-model-id",\n                            "model_version": {\n                                "id": "YOUR_MAPPER_MODEL_VERSION_ID_HERE"\n                            }\n                        },\n                        "node_inputs": [\n                            {\n                                "node_id": "general-concept"\n                            }\n                        ]\n                    },\n                    {\n                        "id": "greater-than",\n                        "model": {\n                            "id": "greater-than-model-id",\n                            "model_version": {\n                                "id": "YOUR_GREATER_THAN_MODEL_VERSION_ID_HERE"\n                            }\n                        },\n                        "node_inputs": [\n                            {\n                                "node_id": "mapper"\n                            }\n                        ]\n                    },\n                    {\n                        "id": "write-success",\n                        "model": {\n                            "id": "write-success-as-me",\n                            "model_version": {\n                                "id": "YOUR_WRITE_AS_ME_MODEL_VERSION_ID_HERE"\n                            }\n                        },\n                        "node_inputs": [\n                            {\n                                "node_id": "greater-than"\n                            }\n                        ]\n                    },\n                    {\n                        "id": "less-than",\n                        "model": {\n                            "id": "less-than-model-id",\n                            "model_version": {\n                                "id": "YOUR_LESS_THAN_MODEL_VERSION_ID_HERE"\n                            }\n                        },\n                        "node_inputs": [\n                            {\n                                "node_id": "mapper"\n                            }\n                        ]\n                    },\n                    {\n                        "id": "write-pending",\n                        "model": {\n                            "id": "write-pending-as-me",\n                            "model_version": {\n                                "id": "YOUR_WRITE_AS_COLLABORATOR_MODEL_VERSION_ID_HERE"\n                            }\n                        },\n                        "node_inputs": [\n                            {\n                                "node_id": "less-than"\n                            }\n                        ]\n                    }\n                ]\n            }\n        ]\n    }\'',F='curl -X PATCH "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps" \\\n    -H "Authorization: Key YOUR_PAT_HERE" \\\n    -H "Content-Type: application/json" \\\n    --data-raw \'{\n        "action": "overwrite",\n        "apps": [\n            {\n                "id": "YOUR_APP_ID_HERE",\n                "default_workflow_id": "auto-annotation-workflow-ID"\n            }\n        ]\n    }\'',J='curl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/inputs" \\\n    -H "Authorization: Key YOUR_PAT_HERE" \\\n    -H "Content-Type: application/json" \\\n    --data-raw \'{\n        "inputs": [\n            {\n                "data": {\n                    "image": {\n                        "url": "https://samples.clarifai.com/metro-north.jpg"\n                    }\n                }\n            }\n        ]\n    }\'',$='curl -X GET "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/annotations" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  ',Z={description:"Use AI to help you build AI. Auto annotation uses your model predictions to label your training data.",sidebar_position:2},Q="Auto Annotation",nn={id:"api-guide/workflows/common-workflows/auto-annotation-walkthrough",title:"Auto Annotation",description:"Use AI to help you build AI. Auto annotation uses your model predictions to label your training data.",source:"@site/docs/api-guide/workflows/common-workflows/auto-annotation-walkthrough.md",sourceDirName:"api-guide/workflows/common-workflows",slug:"/api-guide/workflows/common-workflows/auto-annotation-walkthrough",permalink:"/api-guide/workflows/common-workflows/auto-annotation-walkthrough",draft:!1,unlisted:!1,editUrl:"https://github.com/Clarifai/docs/blob/main/docs/api-guide/workflows/common-workflows/auto-annotation-walkthrough.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{description:"Use AI to help you build AI. Auto annotation uses your model predictions to label your training data.",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Workflow Predict",permalink:"/api-guide/workflows/common-workflows/workflow-predict"},next:{title:"Custom KNN Face Classifier Workflow",permalink:"/api-guide/workflows/common-workflows/knn-face-classifier-workflow-walkthrough"}},en={},tn=[{value:"Create Concepts",id:"create-concepts",level:2},{value:"Link Concepts",id:"link-concepts",level:2},{value:"Create a Concept Mapper Model",id:"create-a-concept-mapper-model",level:2},{value:"Create a &quot;Greater Than&quot; Concept Thresholder Model",id:"create-a-greater-than-concept-thresholder-model",level:2},{value:"Create a &quot;Less Than&quot; Concept Thresholder Model",id:"create-a-less-than-concept-thresholder-model",level:2},{value:"Create a &quot;Write Success as Me&quot; Annotation Writer Model",id:"create-a-write-success-as-me-annotation-writer-model",level:2},{value:"Create a &quot;Write Pending as Me&quot; Annotation Writer Model",id:"create-a-write-pending-as-me-annotation-writer-model",level:2},{value:"Create the Workflow",id:"create-the-workflow",level:2},{value:"Make the New Workflow Your App&#39;s Default",id:"make-the-new-workflow-your-apps-default",level:2},{value:"Add an Image",id:"add-an-image",level:2},{value:"List Annotations",id:"list-annotations",level:2}];function an(n){const e={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",strong:"strong",ul:"ul",...(0,s.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.h1,{id:"auto-annotation",children:"Auto Annotation"}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"Use AI to help you build AI. Auto annotation uses your model predictions to label your training data"})}),"\n",(0,a.jsx)("hr",{}),"\n",(0,a.jsx)(e.p,{children:"This tutorial demonstrates how auto-annotation workflows can be configured in the Clarifai API. With auto-annotation, you can use model predictions to label your inputs. Auto-annotation can help you prepare training data or assign other useful labels and metadata to your inputs."}),"\n",(0,a.jsx)(e.p,{children:"Since models are doing most of the work of annotating your data, this enables you to speed-up and scale-up your annotation process while ensuring quality standards, typically reducing human effort of labeling data by orders of magnitude. And since this is built into our APIs, it seamlessly integrates with all the search, training, and prediction functionality of the Clarifai platform."}),"\n",(0,a.jsx)(e.p,{children:"When a concept is predicted by a model, it is predicted with a confidence score of between 0 and 1. In this walkthrough, we will leverage that score in our workflow so that when your model predictions are confident (close to 1), you can have your data automatically labeled with that concept. When your predictions are less-than-confident, you can have your input sent to a human reviewer."}),"\n",(0,a.jsx)(e.admonition,{type:"info",children:(0,a.jsxs)(e.p,{children:["The initialization code used in the following examples is outlined in detail on the ",(0,a.jsx)(e.a,{href:"https://docs.clarifai.com/api-guide/api-overview/api-clients/#client-installation-instructions",children:"client installation page."})]})}),"\n","\n","\n","\n","\n","\n",(0,a.jsx)(e.h2,{id:"create-concepts",children:"Create Concepts"}),"\n",(0,a.jsxs)(e.p,{children:["Let's start by creating the concepts we'll use in our model. We'll create the following concepts: ",(0,a.jsx)(e.code,{children:"people"}),", ",(0,a.jsx)(e.code,{children:"man"})," and ",(0,a.jsx)(e.code,{children:"adult"}),"."]}),"\n",(0,a.jsxs)(o.A,{children:[(0,a.jsx)(i.A,{value:"grpc_python",label:"gRPC Python",children:(0,a.jsx)(r.A,{className:"language-python",children:l})}),(0,a.jsx)(i.A,{value:"grpc_nodejs",label:"gRPC NodeJS",children:(0,a.jsx)(r.A,{className:"language-javascript",children:O})}),(0,a.jsx)(i.A,{value:"grpc_java",label:"gRPC Java",children:(0,a.jsx)(r.A,{className:"language-java",children:P})}),(0,a.jsx)(i.A,{value:"curl",label:"cURL",children:(0,a.jsx)(r.A,{className:"language-bash",children:V})})]}),"\n",(0,a.jsx)(e.h2,{id:"link-concepts",children:"Link Concepts"}),"\n",(0,a.jsx)(e.p,{children:"Link the newly created concepts with concepts in the clarifai/main General model."}),"\n",(0,a.jsx)(e.p,{children:"Run the code below three times; once for each concept you created previously. The concept IDs of the clarifai/main General models are as follows:"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"ai_l8TKp2h5"})," - the people concept;"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"ai_dxSG2s86"})," - the man concept;"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"ai_VPmHr5bm"})," - the adult concept."]}),"\n"]}),"\n",(0,a.jsxs)(e.p,{children:["Your model's concept IDs are the ones you created in the previous step: ",(0,a.jsx)(e.code,{children:"peopleID"}),", ",(0,a.jsx)(e.code,{children:"manID"}),", and ",(0,a.jsx)(e.code,{children:"adultID"}),"."]}),"\n",(0,a.jsxs)(o.A,{children:[(0,a.jsx)(i.A,{value:"grpc_python",label:"gRPC Python",children:(0,a.jsx)(r.A,{className:"language-python",children:c})}),(0,a.jsx)(i.A,{value:"grpc_nodejs",label:"gRPC NodeJS",children:(0,a.jsx)(r.A,{className:"language-javascript",children:f})}),(0,a.jsx)(i.A,{value:"grpc_java",label:"gRPC Java",children:(0,a.jsx)(r.A,{className:"language-java",children:U})}),(0,a.jsx)(i.A,{value:"curl",label:"cURL",children:(0,a.jsx)(r.A,{className:"language-bash",children:G})})]}),"\n",(0,a.jsx)(e.h2,{id:"create-a-concept-mapper-model",children:"Create a Concept Mapper Model"}),"\n",(0,a.jsx)(e.p,{children:"We're going to create a concept mapper model that translates the concepts from the General model to our new concepts. The model will map the concepts as synonyms. Hypernyms and hyponyms are supported as well."}),"\n",(0,a.jsxs)(e.p,{children:["We'll be setting the ",(0,a.jsx)(e.code,{children:"knowledge_graph_id"})," value to be empty."]}),"\n",(0,a.jsxs)(e.p,{children:["If you want to define a subset of relationships in your app to be related to each other, you can provide the ",(0,a.jsx)(e.code,{children:"knowledge_graph_id"})," to each concept relation and then provide that ",(0,a.jsx)(e.code,{children:"knowledge_graph_id"})," as input to this model as well, which will only follow relationships in that subset of your app's knowledge graph."]}),"\n",(0,a.jsxs)(o.A,{children:[(0,a.jsx)(i.A,{value:"grpc_python",label:"gRPC Python",children:(0,a.jsx)(r.A,{className:"language-python",children:d})}),(0,a.jsx)(i.A,{value:"grpc_nodejs",label:"gRPC NodeJS",children:(0,a.jsx)(r.A,{className:"language-javascript",children:g})}),(0,a.jsx)(i.A,{value:"grpc_java",label:"gRPC Java",children:(0,a.jsx)(r.A,{className:"language-java",children:M})}),(0,a.jsx)(i.A,{value:"curl",label:"cURL",children:(0,a.jsx)(r.A,{className:"language-bash",children:B})})]}),"\n",(0,a.jsx)(e.h2,{id:"create-a-greater-than-concept-thresholder-model",children:'Create a "Greater Than" Concept Thresholder Model'}),"\n",(0,a.jsx)(e.p,{children:"This model will allow any predictions >= the concept values defined in the model to be outputted from the model."}),"\n",(0,a.jsxs)(o.A,{children:[(0,a.jsx)(i.A,{value:"grpc_python",label:"gRPC Python",children:(0,a.jsx)(r.A,{className:"language-python",children:_})}),(0,a.jsx)(i.A,{value:"grpc_nodejs",label:"gRPC NodeJS",children:(0,a.jsx)(r.A,{className:"language-javascript",children:A})}),(0,a.jsx)(i.A,{value:"grpc_java",label:"gRPC Java",children:(0,a.jsx)(r.A,{className:"language-java",children:L})}),(0,a.jsx)(i.A,{value:"curl",label:"cURL",children:(0,a.jsx)(r.A,{className:"language-bash",children:W})})]}),"\n",(0,a.jsx)(e.h2,{id:"create-a-less-than-concept-thresholder-model",children:'Create a "Less Than" Concept Thresholder Model'}),"\n",(0,a.jsx)(e.p,{children:"This model will allow any predictions < the concept values defined in the model to be outputted from the model."}),"\n",(0,a.jsxs)(o.A,{children:[(0,a.jsx)(i.A,{value:"grpc_python",label:"gRPC Python",children:(0,a.jsx)(r.A,{className:"language-python",children:p})}),(0,a.jsx)(i.A,{value:"grpc_nodejs",label:"gRPC NodeJS",children:(0,a.jsx)(r.A,{className:"language-javascript",children:N})}),(0,a.jsx)(i.A,{value:"grpc_java",label:"gRPC Java",children:(0,a.jsx)(r.A,{className:"language-java",children:y})}),(0,a.jsx)(i.A,{value:"curl",label:"cURL",children:(0,a.jsx)(r.A,{className:"language-bash",children:q})})]}),"\n",(0,a.jsx)(e.h2,{id:"create-a-write-success-as-me-annotation-writer-model",children:'Create a "Write Success as Me" Annotation Writer Model'}),"\n",(0,a.jsx)(e.p,{children:"Any incoming Data object full of concepts, regions, etc. will be written by this model to the database as an annotation with ANNOTATION_SUCCESS status as if the app owner did the work themself."}),"\n",(0,a.jsxs)(o.A,{children:[(0,a.jsx)(i.A,{value:"grpc_python",label:"gRPC Python",children:(0,a.jsx)(r.A,{className:"language-python",children:u})}),(0,a.jsx)(i.A,{value:"grpc_nodejs",label:"gRPC NodeJS",children:(0,a.jsx)(r.A,{className:"language-javascript",children:R})}),(0,a.jsx)(i.A,{value:"grpc_java",label:"gRPC Java",children:(0,a.jsx)(r.A,{className:"language-java",children:H})}),(0,a.jsx)(i.A,{value:"curl",label:"cURL",children:(0,a.jsx)(r.A,{className:"language-bash",children:K})})]}),"\n",(0,a.jsx)(e.h2,{id:"create-a-write-pending-as-me-annotation-writer-model",children:'Create a "Write Pending as Me" Annotation Writer Model'}),"\n",(0,a.jsx)(e.p,{children:"Any incoming Data object full of concepts, regions, etc. will be written by this model to the database as an annotation with ANNOTATION_PENDING status as if the app owner did the work themself, but needs further review. So, it is marked as pending."}),"\n",(0,a.jsxs)(o.A,{children:[(0,a.jsx)(i.A,{value:"grpc_python",label:"gRPC Python",children:(0,a.jsx)(r.A,{className:"language-python",children:E})}),(0,a.jsx)(i.A,{value:"grpc_nodejs",label:"gRPC NodeJS",children:(0,a.jsx)(r.A,{className:"language-javascript",children:S})}),(0,a.jsx)(i.A,{value:"grpc_java",label:"gRPC Java",children:(0,a.jsx)(r.A,{className:"language-java",children:Y})}),(0,a.jsx)(i.A,{value:"curl",label:"cURL",children:(0,a.jsx)(r.A,{className:"language-bash",children:X})})]}),"\n",(0,a.jsx)(e.h2,{id:"create-the-workflow",children:"Create the Workflow"}),"\n",(0,a.jsx)(e.p,{children:"We will now connect all the models together into a single workflow."}),"\n",(0,a.jsxs)(e.p,{children:["Every input will be predicted by the General Embed model to generate embeddings. The output of the embed model (embeddings) will be sent to the general concept to predict concept and cluster model. Then, the concept model's output (a list of concepts with prediction values) will be sent to the concept mapper model, which maps Clarifai's concepts to the concepts within your app\u2014",(0,a.jsx)(e.code,{children:"people"}),", ",(0,a.jsx)(e.code,{children:"man"})," and ",(0,a.jsx)(e.code,{children:"adult"})," in this case."]}),"\n",(0,a.jsxs)(e.p,{children:["Then, the mapped concepts will be sent to both concept threshold models\u2014(",(0,a.jsx)(e.code,{children:"GREATER THAN"})," and ",(0,a.jsx)(e.code,{children:"LESS THAN"}),"). The ",(0,a.jsx)(e.code,{children:"GREATER THAN"})," model will filter out the concepts that are lower than the corresponding value you defined in the model and send the remaining concept list to ",(0,a.jsx)(e.code,{children:"write success as me"})," model, which labels the input with these concepts (your app concepts only) as you with ",(0,a.jsx)(e.code,{children:"success"})," status. You can train or search on these concepts immediately."]}),"\n",(0,a.jsxs)(e.p,{children:["The ",(0,a.jsx)(e.code,{children:"LESS THAN"})," model will filter out concepts that are higher than the corresponding value you defined in the model and send the remaining concept list to ",(0,a.jsx)(e.code,{children:"write pending as me"})," model, which labels the input with these concepts (your app concepts only) as you with ",(0,a.jsx)(e.code,{children:"pending"})," status."]}),"\n",(0,a.jsxs)(e.p,{children:["The model IDs and model version IDs from the public ",(0,a.jsx)(e.code,{children:"clarifai/main"})," application are fixed to the latest version at the time of this writing (use the ",(0,a.jsx)(e.code,{children:"GET /models"})," endpoint to get an up to date list of the available models), so they are already hard-coded in the code examples below."]}),"\n",(0,a.jsx)(e.p,{children:"It's possible to use other public models or model version IDs."}),"\n",(0,a.jsxs)(o.A,{children:[(0,a.jsx)(i.A,{value:"grpc_python",label:"gRPC Python",children:(0,a.jsx)(r.A,{className:"language-python",children:h})}),(0,a.jsx)(i.A,{value:"grpc_nodejs",label:"gRPC NodeJS",children:(0,a.jsx)(r.A,{className:"language-javascript",children:C})}),(0,a.jsx)(i.A,{value:"grpc_java",label:"gRPC Java",children:(0,a.jsx)(r.A,{className:"language-java",children:v})}),(0,a.jsx)(i.A,{value:"curl",label:"cURL",children:(0,a.jsx)(r.A,{className:"language-bash",children:z})})]}),"\n",(0,a.jsx)(e.h2,{id:"make-the-new-workflow-your-apps-default",children:"Make the New Workflow Your App's Default"}),"\n",(0,a.jsx)(e.p,{children:"Make this the default workflow in the app. So, it will run every time we add an input and execute the auto annotation process."}),"\n",(0,a.jsxs)(e.p,{children:["If the workflow is not the default workflow of your app, you can still use ",(0,a.jsx)(e.code,{children:"PostWorkflowResults"})," on new inputs to check that you configured the workflow graph and your models properly, but the data will not be written to the DB. This is recommended before making it your default workflow and adding inputs to your app."]}),"\n",(0,a.jsxs)(o.A,{children:[(0,a.jsx)(i.A,{value:"grpc_python",label:"gRPC Python",children:(0,a.jsx)(r.A,{className:"language-python",children:I})}),(0,a.jsx)(i.A,{value:"grpc_nodejs",label:"gRPC NodeJS",children:(0,a.jsx)(r.A,{className:"language-javascript",children:T})}),(0,a.jsx)(i.A,{value:"grpc_java",label:"gRPC Java",children:(0,a.jsx)(r.A,{className:"language-java",children:j})}),(0,a.jsx)(i.A,{value:"curl",label:"cURL",children:(0,a.jsx)(r.A,{className:"language-bash",children:F})})]}),"\n",(0,a.jsx)(e.h2,{id:"add-an-image",children:"Add an Image"}),"\n",(0,a.jsx)(e.p,{children:"Adding an image will trigger the default workflow."}),"\n",(0,a.jsxs)(o.A,{children:[(0,a.jsx)(i.A,{value:"grpc_python",label:"gRPC Python",children:(0,a.jsx)(r.A,{className:"language-python",children:D})}),(0,a.jsx)(i.A,{value:"grpc_nodejs",label:"gRPC NodeJS",children:(0,a.jsx)(r.A,{className:"language-javascript",children:w})}),(0,a.jsx)(i.A,{value:"grpc_java",label:"gRPC Java",children:(0,a.jsx)(r.A,{className:"language-java",children:x})}),(0,a.jsx)(i.A,{value:"curl",label:"cURL",children:(0,a.jsx)(r.A,{className:"language-bash",children:J})})]}),"\n",(0,a.jsx)(e.h2,{id:"list-annotations",children:"List Annotations"}),"\n",(0,a.jsx)(e.p,{children:"You can now list annotations with your user ID and see the annotations created by your workflow."}),"\n",(0,a.jsxs)(o.A,{children:[(0,a.jsx)(i.A,{value:"grpc_python",label:"gRPC Python",children:(0,a.jsx)(r.A,{className:"language-python",children:m})}),(0,a.jsx)(i.A,{value:"grpc_nodejs",label:"gRPC NodeJS",children:(0,a.jsx)(r.A,{className:"language-javascript",children:b})}),(0,a.jsx)(i.A,{value:"grpc_java",label:"gRPC Java",children:(0,a.jsx)(r.A,{className:"language-java",children:k})}),(0,a.jsx)(i.A,{value:"curl",label:"cURL",children:(0,a.jsx)(r.A,{className:"language-bash",children:$})})]})]})}function sn(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(an,{...n})}):an(n)}},19365:(n,e,t)=>{t.d(e,{A:()=>i});t(96540);var a=t(18215);const s={tabItem:"tabItem_Ymn6"};var o=t(74848);function i(n){let{children:e,hidden:t,className:i}=n;return(0,o.jsx)("div",{role:"tabpanel",className:(0,a.A)(s.tabItem,i),hidden:t,children:e})}},11470:(n,e,t)=>{t.d(e,{A:()=>A});var a=t(96540),s=t(18215),o=t(23104),i=t(56347),r=t(205),l=t(57485),c=t(31682),d=t(70679);function _(n){return a.Children.toArray(n).filter((n=>"\n"!==n)).map((n=>{if(!n||(0,a.isValidElement)(n)&&function(n){const{props:e}=n;return!!e&&"object"==typeof e&&"value"in e}(n))return n;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof n.type?n.type:n.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function p(n){const{values:e,children:t}=n;return(0,a.useMemo)((()=>{const n=e??function(n){return _(n).map((n=>{let{props:{value:e,label:t,attributes:a,default:s}}=n;return{value:e,label:t,attributes:a,default:s}}))}(t);return function(n){const e=(0,c.X)(n,((n,e)=>n.value===e.value));if(e.length>0)throw new Error(`Docusaurus error: Duplicate values "${e.map((n=>n.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(n),n}),[e,t])}function u(n){let{value:e,tabValues:t}=n;return t.some((n=>n.value===e))}function E(n){let{queryString:e=!1,groupId:t}=n;const s=(0,i.W6)(),o=function(n){let{queryString:e=!1,groupId:t}=n;if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:e,groupId:t});return[(0,l.aZ)(o),(0,a.useCallback)((n=>{if(!o)return;const e=new URLSearchParams(s.location.search);e.set(o,n),s.replace({...s.location,search:e.toString()})}),[o,s])]}function h(n){const{defaultValue:e,queryString:t=!1,groupId:s}=n,o=p(n),[i,l]=(0,a.useState)((()=>function(n){let{defaultValue:e,tabValues:t}=n;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!u({value:e,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${t.map((n=>n.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const a=t.find((n=>n.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:e,tabValues:o}))),[c,_]=E({queryString:t,groupId:s}),[h,I]=function(n){let{groupId:e}=n;const t=function(n){return n?`docusaurus.tab.${n}`:null}(e),[s,o]=(0,d.Dv)(t);return[s,(0,a.useCallback)((n=>{t&&o.set(n)}),[t,o])]}({groupId:s}),D=(()=>{const n=c??h;return u({value:n,tabValues:o})?n:null})();(0,r.A)((()=>{D&&l(D)}),[D]);return{selectedValue:i,selectValue:(0,a.useCallback)((n=>{if(!u({value:n,tabValues:o}))throw new Error(`Can't select invalid tab value=${n}`);l(n),_(n),I(n)}),[_,I,o]),tabValues:o}}var I=t(92303);const D={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var m=t(74848);function O(n){let{className:e,block:t,selectedValue:a,selectValue:i,tabValues:r}=n;const l=[],{blockElementScrollPositionUntilNextRender:c}=(0,o.a_)(),d=n=>{const e=n.currentTarget,t=l.indexOf(e),s=r[t].value;s!==a&&(c(e),i(s))},_=n=>{let e=null;switch(n.key){case"Enter":d(n);break;case"ArrowRight":{const t=l.indexOf(n.currentTarget)+1;e=l[t]??l[0];break}case"ArrowLeft":{const t=l.indexOf(n.currentTarget)-1;e=l[t]??l[l.length-1];break}}e?.focus()};return(0,m.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":t},e),children:r.map((n=>{let{value:e,label:t,attributes:o}=n;return(0,m.jsx)("li",{role:"tab",tabIndex:a===e?0:-1,"aria-selected":a===e,ref:n=>l.push(n),onKeyDown:_,onClick:d,...o,className:(0,s.A)("tabs__item",D.tabItem,o?.className,{"tabs__item--active":a===e}),children:t??e},e)}))})}function f(n){let{lazy:e,children:t,selectedValue:s}=n;const o=(Array.isArray(t)?t:[t]).filter(Boolean);if(e){const n=o.find((n=>n.props.value===s));return n?(0,a.cloneElement)(n,{className:"margin-top--md"}):null}return(0,m.jsx)("div",{className:"margin-top--md",children:o.map(((n,e)=>(0,a.cloneElement)(n,{key:e,hidden:n.props.value!==s})))})}function g(n){const e=h(n);return(0,m.jsxs)("div",{className:(0,s.A)("tabs-container",D.tabList),children:[(0,m.jsx)(O,{...e,...n}),(0,m.jsx)(f,{...e,...n})]})}function A(n){const e=(0,I.A)();return(0,m.jsx)(g,{...n,children:_(n.children)},String(e))}}}]);
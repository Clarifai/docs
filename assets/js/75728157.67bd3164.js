"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[3245],{77992:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>w,contentTitle:()=>b,default:()=>L,frontMatter:()=>h,metadata:()=>R,toc:()=>S});var o=t(74848),s=t(28453),r=t(11470),a=t(19365),i=t(21432);const _="###################################################################################\n# In this section, we set the user authentication, app ID, and the details of the \n# workflow we want to build. Change these strings to run your own example.\n##################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to build your own workflow with multiple connected nodes\n# Note that we've also added as comments the values of most of these variables against their names in the code below\n\nWORKFLOW_ID = 'auto-annotation-workflow-id'\nNODE_ID_1 = 'general-embed'\nMODEL_ID_1 = 'bbb5f41425b8468d9b7a554ff10f8581'\nMODEL_VERSION_ID_1 = 'bb186755eda04f9cbb6fe32e816be104'\n\nNODE_ID_2 = 'general-concept'\nMODEL_ID_2 = 'aaa03c23b3724a16a56b629203edc62c'\nMODEL_VERSION_ID_2 = 'aa7f35c01e0642fda5cf400f543e7c40'\n\nNODE_ID_3 = 'general-cluster'\nMODEL_ID_3 = 'cccbe437d6e54e2bb911c6aa292fb072'\nMODEL_VERSION_ID_3 = 'cc2074cff6dc4c02b6f4e1b8606dcb54'\n\nNODE_ID_4 = 'mapper'\nSYNONYM_MODEL_ID = 'YOUR_SYNONYM_MODEL_ID'\nSYNONYM_MODEL_VERSION_ID = 'YOUR_SYNONYM_MODEL_VERSION_ID'\n\nNODE_ID_5 = 'greater-than'\nGREATER_THAN_MODEL_ID = 'YOUR_GREATER_THAN_MODEL_ID'\nGREATER_THAN_MODEL_VERSION_ID = 'YOUR_GREATER_THAN_MODEL_VERSION_ID'\n\nNODE_ID_6 = 'less-than'\nLESS_THAN_MODEL_ID = 'YOUR_LESS_THAN_MODEL_ID'\nLESS_THAN_MODEL_VERSION_ID = 'YOUR_LESS_THAN_MODEL_VERSION_ID'\n\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID) # The userDataObject is required when using a PAT\n\npost_workflows_response = stub.PostWorkflows(\n    service_pb2.PostWorkflowsRequest(\n        user_app_id=userDataObject,  \n        workflows=[\n            resources_pb2.Workflow(\n                id=WORKFLOW_ID, # auto-annotation-workflow-id\n                nodes=[\n                    resources_pb2.WorkflowNode(\n                        id=NODE_ID_1, # general-embed\n                        model=resources_pb2.Model(\n                            id=MODEL_ID_1, # bbb5f41425b8468d9b7a554ff10f8581\n                            model_version=resources_pb2.ModelVersion(\n                                id=MODEL_VERSION_ID_1 # bb186755eda04f9cbb6fe32e816be104\n                            )\n                        )\n                    ),\n                    resources_pb2.WorkflowNode(\n                        id=NODE_ID_2, # general-concept\n                        model=resources_pb2.Model(\n                            id=MODEL_ID_2, # aaa03c23b3724a16a56b629203edc62c\n                            model_version=resources_pb2.ModelVersion(\n                                id=MODEL_VERSION_ID_2 # aa7f35c01e0642fda5cf400f543e7c40\n                            )\n                        )\n                    ),\n                    resources_pb2.WorkflowNode(\n                        id=NODE_ID_3, # general-cluster\n                        model=resources_pb2.Model(\n                            id=MODEL_ID_3, # cccbe437d6e54e2bb911c6aa292fb072\n                            model_version=resources_pb2.ModelVersion(\n                                id=MODEL_VERSION_ID_3 # cc2074cff6dc4c02b6f4e1b8606dcb54\n                            )\n                        ),\n                        node_inputs=[\n                            resources_pb2.NodeInput(node_id=NODE_ID_1) # general-embed\n                        ]\n                    ),\n                    resources_pb2.WorkflowNode(\n                        id=NODE_ID_4, # mapper\n                        model=resources_pb2.Model(\n                            id=SYNONYM_MODEL_ID,\n                            model_version=resources_pb2.ModelVersion(\n                                id=SYNONYM_MODEL_VERSION_ID\n                            )\n                        ),\n                        node_inputs=[\n                            resources_pb2.NodeInput(node_id=NODE_ID_2) # general-concept\n                        ]\n                    ),\n                    resources_pb2.WorkflowNode(\n                        id=NODE_ID_5, # greater-than\n                        model=resources_pb2.Model(\n                            id=GREATER_THAN_MODEL_ID,\n                            model_version=resources_pb2.ModelVersion(\n                                id=GREATER_THAN_MODEL_VERSION_ID\n                            )\n                        ),\n                        node_inputs=[\n                            resources_pb2.NodeInput(node_id=NODE_ID_4) # mapper\n                        ]\n                    ),\n                    resources_pb2.WorkflowNode(\n                        id=NODE_ID_6, # less-than\n                        model=resources_pb2.Model(\n                            id=LESS_THAN_MODEL_ID,\n                            model_version=resources_pb2.ModelVersion(\n                                id=LESS_THAN_MODEL_VERSION_ID\n                            )\n                        ),\n                        node_inputs=[\n                            resources_pb2.NodeInput(node_id=NODE_ID_4) # mapper\n                        ]\n                    ),\n                ]\n            )\n        ]\n    ),\n    metadata=metadata\n)       \n\nif post_workflows_response.status.code != status_code_pb2.SUCCESS:\n    print(post_workflows_response.status)\n    raise Exception(\"Post workflows failed, status: \" + post_workflows_response.status.description) \n",l="###################################################################################\n# In this section, we set the user authentication, app ID, and the details of the \n# nodes to suppress their outputs. Change these strings to run your own example.\n##################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to suppress the outputs of your own nodes\nWORKFLOW_ID = 'predict-cluster-only'\nNODE_ID_1 = 'general-embed'\nMODEL_ID_1 = 'bbb5f41425b8468d9b7a554ff10f8581'\nMODEL_VERSION_ID_1 = 'bb186755eda04f9cbb6fe32e816be104'\n\nNODE_ID_2 = 'general-cluster'\nMODEL_ID_2 = 'cccbe437d6e54e2bb911c6aa292fb072'\nMODEL_VERSION_ID_2 = 'cc2074cff6dc4c02b6f4e1b8606dcb54'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID) # The userDataObject is required when using a PAT\n\npost_workflows_response = stub.PostWorkflows(\n    service_pb2.PostWorkflowsRequest(\n        user_app_id=userDataObject,  \n        workflows=[\n            resources_pb2.Workflow(\n                id=WORKFLOW_ID,\n                nodes=[\n                    resources_pb2.WorkflowNode(\n                        id=NODE_ID_1,\n                        model=resources_pb2.Model(\n                            id=MODEL_ID_1,\n                            model_version=resources_pb2.ModelVersion(\n                                id=MODEL_VERSION_ID_1\n                            )\n                        ),\n                        suppress_output = True                      \n                    ),\n                    resources_pb2.WorkflowNode(\n                        id=NODE_ID_2,\n                        model=resources_pb2.Model(\n                            id=MODEL_ID_2,\n                            model_version=resources_pb2.ModelVersion(\n                                id=MODEL_VERSION_ID_2\n                            )\n                        ),\n                        node_inputs=[\n                            resources_pb2.NodeInput(node_id=NODE_ID_1)\n                        ]\n                    ),\n                ]\n            )\n        ]\n    ),\n    metadata=metadata\n)\n                         \n\nif post_workflows_response.status.code != status_code_pb2.SUCCESS:\n    print(post_workflows_response.status)\n    raise Exception(\"Post workflows failed, status: \" + post_workflows_response.status.description) \n",d='\x3c!--index.html file--\x3e\n\n<script>\n    //////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the details of the \n    // workflow we want to build. Change these strings to run your own example.\n    /////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = \'YOUR_USER_ID_HERE\';\n    // Your PAT (Personal Access Token) can be found in the Account\'s Security section\n    const PAT = \'YOUR_PAT_HERE\';\n    const APP_ID = \'YOUR_APP_ID_HERE\';\n    // Change these to build your own workflow with multiple connected nodes\n\n    const WORKFLOW_ID = \'auto-annotation-workflow-id\';\n    const NODE_ID_1 = \'general-embed\';\n    const GENERAL_EMBED_MODEL_ID = \'YOUR_GENERAL_EMBED_MODEL_ID\';\n    const GENERAL_EMBED_MODEL_VERSION_ID = \'YOUR_GENERAL_EMBED_MODEL_VERSION_ID\';\n\n    const NODE_ID_2 = \'general-concept\';\n    const GENERAL_CONCEPT_MODEL_ID = \'YOUR_GENERAL_CONCEPT_MODEL_ID\';\n    const GENERAL_CONCEPT_MODEL_VERSION_ID = \'YOUR_GENERAL_CONCEPT_MODEL_VERSION_ID\';\n\n    const NODE_ID_3 = \'general-cluster\';\n    const GENERAL_CLUSTER_MODEL_ID = \'YOUR_GENERAL_CLUSTER_MODEL_ID\';\n    const GENERAL_CLUSTER_MODEL_VERSION_ID = \'YOUR_GENERAL_CLUSTER_MODEL_VERSION_ID\';\n\n    const NODE_ID_4 = \'mapper\';\n    const SYNONYM_MODEL_ID = \'synonym-model-id\';\n    const MAPPER_MODEL_VERSION_ID = \'YOUR_MAPPER_MODEL_VERSION_ID\';\n\n    const NODE_ID_5 = \'greater-than\';\n    const GREATER_THAN_MODEL_ID = \'YOUR_GREATER_THAN_MODEL_ID\';\n    const GREATER_THAN_MODEL_VERSION_ID = \'YOUR_GREATER_THAN_MODEL_VERSION_ID\';\n\n    const NODE_ID_6 = \'less-than\';\n    const LESS_THAN_MODEL_ID = \'YOUR_LESS_THAN_MODEL_ID\';\n    const LESS_THAN_MODEL_VERSION_ID = \'YOUR_LESS_THAN_MODEL_VERSION_ID\';\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        "user_app_id": {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        "workflows": [\n            {\n                "id": WORKFLOW_ID,\n                "nodes": [\n                    {\n                        "id": NODE_ID_1,\n                        "model": {\n                            "id": GENERAL_EMBED_MODEL_ID,\n                            "model_version": {\n                                "id": GENERAL_EMBED_MODEL_VERSION_ID\n                            }\n                        }\n                    },\n                    {\n                        "id": NODE_ID_2,\n                        "model": {\n                            "id": GENERAL_CONCEPT_MODEL_ID,\n                            "model_version": {\n                                "id": GENERAL_CONCEPT_MODEL_VERSION_ID\n                            }\n                        }\n                    },\n                    {\n                        "id": NODE_ID_3,\n                        "model": {\n                            "id": GENERAL_CLUSTER_MODEL_ID,\n                            "model_version": {\n                                "id": GENERAL_CLUSTER_MODEL_VERSION_ID\n                            }\n                        }\n                    },\n                    {\n                        "id": NODE_ID_4,\n                        "model": {\n                            "id": SYNONYM_MODEL_ID,\n                            "model_version": {\n                                "id": MAPPER_MODEL_VERSION_ID\n                            }\n                        },\n                        "node_inputs": [\n                            {\n                                "node_id": NODE_ID_2  // general-concept\n                            }\n                        ]\n                    },\n                    {\n                        "id": NODE_ID_5,\n                        "model": {\n                            "id": GREATER_THAN_MODEL_ID,\n                            "model_version": {\n                                "id": GREATER_THAN_MODEL_VERSION_ID\n                            }\n                        },\n                        "node_inputs": [\n                            {\n                                "node_id": NODE_ID_4 // mapper\n                            }\n                        ]\n                    },\n                    {\n                        "id": NODE_ID_6,\n                        "model": {\n                            "id": LESS_THAN_MODEL_ID,\n                            "model_version": {\n                                "id": LESS_THAN_MODEL_VERSION_ID\n                            }\n                        },\n                        "node_inputs": [\n                            {\n                                "node_id": NODE_ID_4 // mapper\n                            }\n                        ]\n                    }\n                ]\n            }\n        ]\n    });\n\n    const requestOptions = {\n        method: \'POST\',\n        headers: {\n            \'Accept\': \'application/json\',\n            \'Authorization\': \'Key \' + PAT\n        },\n        body: raw\n    };\n\n    fetch(`https://api.clarifai.com/v2/workflows`, requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log(\'error\', error));\n\n<\/script>',c='\x3c!--index.html file--\x3e\n\n<script>\n    //////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the details of the \n    // nodes to suppress their outputs. Change these strings to run your own example.\n    /////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = \'YOUR_USER_ID_HERE\';\n    // Your PAT (Personal Access Token) can be found in the Account\'s Security section\n    const PAT = \'YOUR_PAT_HERE\';\n    const APP_ID = \'YOUR_APP_ID_HERE\';\n    // Change these to suppress the outputs of your own nodes\n    const WORKFLOW_ID = \'predict-cluster-only\';\n    const NODE_ID_1 = \'general-embed\';\n    const MODEL_ID_1 = \'bbb5f41425b8468d9b7a554ff10f8581\';\n    const MODEL_VERSION_ID_1 = \'bb186755eda04f9cbb6fe32e816be104\';\n\n    const NODE_ID_2 = \'general-cluster\';\n    const MODEL_ID_2 = \'cccbe437d6e54e2bb911c6aa292fb072\';\n    const MODEL_VERSION_ID_2 = \'cc2074cff6dc4c02b6f4e1b8606dcb54\';\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        "user_app_id": {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        "workflows": [\n            {\n                "id": WORKFLOW_ID,\n                "nodes": [\n                    {\n                        "id": NODE_ID_1,\n                        "model": {\n                            "id": MODEL_ID_1,\n                            "model_version": {\n                                "id": MODEL_VERSION_ID_1\n                            }\n                        },\n                        "suppress_output": true\n                    },\n                    {\n                        "id": NODE_ID_2,\n                        "node_inputs": [\n                            {\n                                "node_id": NODE_ID_1\n                            }\n                        ],\n                        "model": {\n                            "id": MODEL_ID_2,\n                            "model_version": {\n                                "id": MODEL_VERSION_ID_2\n                            }\n                        }\n                    }\n                ]\n            }\n        ]\n    });\n\n    const requestOptions = {\n        method: \'POST\',\n        headers: {\n            \'Accept\': \'application/json\',\n            \'Authorization\': \'Key \' + PAT\n        },\n        body: raw\n    };\n\n    fetch(`https://api.clarifai.com/v2/workflows`, requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log(\'error\', error));\n\n<\/script>',E="//index.js file\n\n//////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the details of the \n// workflow we want to build. Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = 'YOUR_USER_ID_HERE';\n// Your PAT (Personal Access Token) can be found in the Account's Security section\nconst PAT = 'YOUR_PAT_HERE';\nconst APP_ID = 'YOUR_APP_ID_HERE';\n// Change these to build your own workflow with multiple connected nodes\n\nconst WORKFLOW_ID = 'auto-annotation-workflow-id';\nconst NODE_ID_1 = 'general-embed';\nconst GENERAL_EMBED_MODEL_ID = 'bbb5f41425b8468d9b7a554ff10f8581';\nconst GENERAL_EMBED_MODEL_VERSION_ID = 'bb186755eda04f9cbb6fe32e816be104';\n\nconst NODE_ID_2 = 'general-concept';\nconst GENERAL_CONCEPT_MODEL_ID = 'aaa03c23b3724a16a56b629203edc62c';\nconst GENERAL_CONCEPT_MODEL_VERSION_ID = 'aa7f35c01e0642fda5cf400f543e7c40';\n\nconst NODE_ID_3 = 'general-cluster';\nconst GENERAL_CLUSTER_MODEL_ID = 'cccbe437d6e54e2bb911c6aa292fb072';\nconst GENERAL_CLUSTER_MODEL_VERSION_ID = 'cc2074cff6dc4c02b6f4e1b8606dcb54';\n\nconst NODE_ID_4 = 'mapper';\nconst SYNONYM_MODEL_ID = 'synonym-model-id';\nconst SYNONYM_MODEL_VERSION_ID = 'YOUR_SYNONYM_MODEL_VERSION_ID';\n\nconst NODE_ID_5 = 'greater-than';\nconst GREATER_THAN_MODEL_ID = 'greater-than-model-id';\nconst GREATER_THAN_MODEL_VERSION_ID = 'YOUR_GREATER_THAN_MODEL_VERSION_ID';\n\nconst NODE_ID_6 = 'less-than';\nconst LESS_THAN_MODEL_ID = 'less-than-model-id';\nconst LESS_THAN_MODEL_VERSION_ID = 'YOUR_LESS_THAN_MODEL_VERSION_ID';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require(\"clarifai-nodejs-grpc\");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set(\"authorization\", \"Key \" + PAT);\n\nstub.PostWorkflows(\n    {\n        user_app_id: {\n            \"user_id\": USER_ID,\n            \"app_id\": APP_ID\n        },\n        workflows: [\n            {\n                id: WORKFLOW_ID,\n                nodes: [\n                    {\n                        id: NODE_ID_1,\n                        model: {\n                            id: GENERAL_EMBED_MODEL_ID,\n                            model_version: {\n                                id: GENERAL_EMBED_MODEL_VERSION_ID\n                            }\n                        }\n                    },\n                    {\n                        id: NODE_ID_2,\n                        model: {\n                            id: GENERAL_CONCEPT_MODEL_ID,\n                            model_version: {\n                                id: GENERAL_CONCEPT_MODEL_VERSION_ID\n                            }\n                        }\n                    },\n                    {\n                        id: NODE_ID_3,\n                        model: {\n                            id: GENERAL_CLUSTER_MODEL_ID,\n                            model_version: {\n                                id: GENERAL_CLUSTER_MODEL_VERSION_ID\n                            }\n                        }\n                    },\n                    {\n                        id: NODE_ID_4,\n                        model: {\n                            id: SYNONYM_MODEL_ID,\n                            model_version: {\n                                id: SYNONYM_MODEL_VERSION_ID\n                            }\n                        },\n                        node_inputs: [\n                            {\n                                node_id: NODE_ID_2 // general-concept\n                            }\n                        ]\n                    },\n                    {\n                        id: NODE_ID_5,\n                        model: {\n                            id: GREATER_THAN_MODEL_ID,\n                            model_version: {\n                                id: GREATER_THAN_MODEL_VERSION_ID\n                            }\n                        },\n                        node_inputs: [\n                            {\n                                node_id: NODE_ID_4 // mapper\n                            }\n                        ]\n                    },\n                    {\n                        id: NODE_ID_6,\n                        model: {\n                            id: LESS_THAN_MODEL_ID,\n                            model_version: {\n                                id: LESS_THAN_MODEL_VERSION_ID\n                            }\n                        },\n                        node_inputs: [\n                            {\n                                node_id: NODE_ID_4 // mapper\n                            }\n                        ]\n                    }\n                ]\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            console.log(response.status);\n            throw new Error(\"Post workflows failed, status: \" + response.status.description);\n        }\n    }\n);",u="//index.js file\n\n//////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the details of the \n// nodes to suppress their outputs. Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = 'YOUR_USER_ID_HERE';\n// Your PAT (Personal Access Token) can be found in the Account's Security section\nconst PAT = 'YOUR_PAT_HERE';\nconst APP_ID = 'YOUR_APP_ID_HERE';\n// Change these to suppress the outputs of your own nodes\nconst WORKFLOW_ID = 'predict-cluster-only';\nconst NODE_ID_1 = 'general-embed';\nconst MODEL_ID_1 = 'bbb5f41425b8468d9b7a554ff10f8581';\nconst MODEL_VERSION_ID_1 = 'bb186755eda04f9cbb6fe32e816be104';\n\nconst NODE_ID_2 = 'general-cluster';\nconst MODEL_ID_2 = 'cccbe437d6e54e2bb911c6aa292fb072';\nconst MODEL_VERSION_ID_2 = 'cc2074cff6dc4c02b6f4e1b8606dcb54';\n\nconst NODE_ID_3 = 'mapper';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require(\"clarifai-nodejs-grpc\");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set(\"authorization\", \"Key \" + PAT);\n\nstub.PostWorkflows(\n    {\n        user_app_id: {\n            \"user_id\": USER_ID,\n            \"app_id\": APP_ID\n        },\n        workflows: [\n            {\n                id: WORKFLOW_ID,\n                nodes: [\n                    {\n                        id: NODE_ID_1,\n                        model: {\n                            id: MODEL_ID_1,\n                            model_version: {\n                                id: MODEL_VERSION_ID_1\n                            }\n                        },\n                        suppress_output: true\n                    },\n                    {\n                        id: NODE_ID_2,\n                        model: {\n                            id: MODEL_ID_2,\n                            model_version: {\n                                id: MODEL_VERSION_ID_2\n                            }\n                        },\n                        node_inputs: [\n                            {\n                                node_id: NODE_ID_3\n                            }\n                        ]\n                    },\n                ]\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            console.log(response.status);\n            throw new Error(\"Post workflows failed, status: \" + response.status.description);\n        }\n    }\n);",D='package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    //////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the details of the \n    // workflow we want to build. Change these strings to run your own example.\n    /////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to build your own workflow with multiple connected nodes\n\n    static final String WORKFLOW_ID = "auto-annotation-workflow-id";\n    static final String NODE_ID_1 = "general-embed";\n    static final String GENERAL_EMBED_MODEL_ID = "bbb5f41425b8468d9b7a554ff10f8581";\n    static final String GENERAL_EMBED_MODEL_VERSION_ID = "bb186755eda04f9cbb6fe32e816be104";\n\n    static final String NODE_ID_2 = "general-concept";\n    static final String GENERAL_CONCEPT_MODEL_ID = "aaa03c23b3724a16a56b629203edc62c";\n    static final String GENERAL_CONCEPT_MODEL_VERSION_ID = "aa7f35c01e0642fda5cf400f543e7c40";\n\n    static final String NODE_ID_3 = "general-cluster";\n    static final String GENERAL_CLUSTER_MODEL_ID = "cccbe437d6e54e2bb911c6aa292fb072";\n    static final String GENERAL_CLUSTER_MODEL_VERSION_ID = "cc2074cff6dc4c02b6f4e1b8606dcb54";\n\n    static final String NODE_ID_4 = "mapper";\n    static final String SYNONYM_MODEL_ID = "synonym-model-id";\n    static final String SYNONYM_MODEL_VERSION_ID = "YOUR_SYNONYM_MODEL_VERSION_ID";\n\n    static final String NODE_ID_5 = "greater-than";\n    static final String GREATER_THAN_MODEL_ID = "greater-than-model-id";\n    static final String GREATER_THAN_MODEL_VERSION_ID = "YOUR_GREATER_THAN_MODEL_VERSION_ID";\n\n    static final String NODE_ID_6 = "less-than";\n    static final String LESS_THAN_MODEL_ID = "less-than-model-id";\n    static final String LESS_THAN_MODEL_VERSION_ID = "YOUR_LESS_THAN_MODEL_VERSION_ID";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiWorkflowResponse postWorkflowsResponse = stub.postWorkflows(\n            PostWorkflowsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .addWorkflows(\n                Workflow.newBuilder()\n                .setId(WORKFLOW_ID)\n                .addNodes(\n                    WorkflowNode.newBuilder()\n                    .setId(NODE_ID_1)\n                    .setModel(\n                        Model.newBuilder()\n                        .setId(GENERAL_EMBED_MODEL_ID)\n                        .setModelVersion(\n                            ModelVersion.newBuilder()\n                            .setId(GENERAL_EMBED_MODEL_VERSION_ID)\n                        )\n                    )\n                )\n                .addNodes(\n                    WorkflowNode.newBuilder()\n                    .setId(NODE_ID_2)\n                    .setModel(\n                        Model.newBuilder()\n                        .setId(GENERAL_CONCEPT_MODEL_ID)\n                        .setModelVersion(\n                            ModelVersion.newBuilder()\n                            .setId(GENERAL_CONCEPT_MODEL_VERSION_ID)\n                        )\n                    )\n                )\n                .addNodes(\n                    WorkflowNode.newBuilder()\n                    .setId(NODE_ID_3)\n                    .setModel(\n                        Model.newBuilder()\n                        .setId(GENERAL_CLUSTER_MODEL_ID)\n                        .setModelVersion(\n                            ModelVersion.newBuilder()\n                            .setId(GENERAL_CLUSTER_MODEL_VERSION_ID)\n                        )\n                    )\n                )\n                .addNodes(\n                    WorkflowNode.newBuilder()\n                    .setId(NODE_ID_4)\n                    .setModel(\n                        Model.newBuilder()\n                        .setId(SYNONYM_MODEL_ID)\n                        .setModelVersion(\n                            ModelVersion.newBuilder()\n                            .setId(SYNONYM_MODEL_VERSION_ID)\n                        )\n                    )\n                    .addNodeInputs(NodeInput.newBuilder().setNodeId(NODE_ID_2))\n                )\n                .addNodes(\n                    WorkflowNode.newBuilder()\n                    .setId(NODE_ID_5)\n                    .setModel(\n                        Model.newBuilder()\n                        .setId(GREATER_THAN_MODEL_ID)\n                        .setModelVersion(\n                            ModelVersion.newBuilder()\n                            .setId(GREATER_THAN_MODEL_VERSION_ID)\n                        )\n                    )\n                    .addNodeInputs(NodeInput.newBuilder().setNodeId(NODE_ID_4))\n                )\n                .addNodes(\n                    WorkflowNode.newBuilder()\n                    .setId(NODE_ID_6)\n                    .setModel(\n                        Model.newBuilder()\n                        .setId(LESS_THAN_MODEL_ID)\n                        .setModelVersion(\n                            ModelVersion.newBuilder()\n                            .setId(LESS_THAN_MODEL_VERSION_ID)\n                        )\n                    )\n                    .addNodeInputs(NodeInput.newBuilder().setNodeId(NODE_ID_4))\n                )\n            )\n            .build()\n        );\n\n        if (postWorkflowsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post workflows failed, status: " + postWorkflowsResponse.getStatus());\n        }\n\n    }\n\n}',p='package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    //////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the details of the \n    // nodes to suppress their outputs. Change these strings to run your own example.\n    /////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to suppress the outputs of your own nodes\n    static final String WORKFLOW_ID = "auto-annotation-workflow-id";\n    static final String NODE_ID_1 = "general-embed";\n    static final String MODEL_ID_1 = "bbb5f41425b8468d9b7a554ff10f8581";\n    static final String MODEL_VERSION_ID_1 = "bb186755eda04f9cbb6fe32e816be104";\n\n    static final String NODE_ID_2 = "general-cluster";\n    static final String MODEL_ID_2 = "cccbe437d6e54e2bb911c6aa292fb072";\n    static final String MODEL_VERSION_ID_2 = "cc2074cff6dc4c02b6f4e1b8606dcb54";\n\n    static final String NODE_ID_3 = "general-cluster";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiWorkflowResponse postWorkflowsResponse = stub.postWorkflows(\n            PostWorkflowsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .addWorkflows(\n                Workflow.newBuilder()\n                .setId(WORKFLOW_ID)\n                .addNodes(\n                    WorkflowNode.newBuilder()\n                    .setId(NODE_ID_1)\n                    .setModel(\n                        Model.newBuilder()\n                        .setId(MODEL_ID_1)\n                        .setModelVersion(\n                            ModelVersion.newBuilder()\n                            .setId(MODEL_VERSION_ID_1)\n                        )\n                    )\n                )\n                .addNodes(\n                    WorkflowNode.newBuilder()\n                    .setId(NODE_ID_2)\n                    .setModel(\n                        Model.newBuilder()\n                        .setId(MODEL_ID_2)\n                        .setModelVersion(\n                            ModelVersion.newBuilder()\n                            .setId(MODEL_VERSION_ID_2)\n                        )\n                    )\n                    .addNodeInputs(NodeInput.newBuilder().setNodeId(NODE_ID_3))\n                )\n            )\n            .build()\n        );\n\n        if (postWorkflowsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post workflows failed, status: " + postWorkflowsResponse.getStatus());\n        }\n\n    }\n\n}',I='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n//////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the details of the \n// workflow we want to build. Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n# Change these to build your own workflow with multiple connected nodes\n# Note that we\'ve also added as comments the values of most of these variables against their names in the code below\n\n$WORKFLOW_ID = "auto-annotation-workflow-id";\n$NODE_ID_1 = "general-embed";\n$MODEL_ID_1 = "bbb5f41425b8468d9b7a554ff10f8581";\n$MODEL_VERSION_ID_1 = "bb186755eda04f9cbb6fe32e816be104";\n\n$NODE_ID_2 = "general-concept";\n$MODEL_ID_2 = "aaa03c23b3724a16a56b629203edc62c";\n$MODEL_VERSION_ID_2 = "aa7f35c01e0642fda5cf400f543e7c40";\n\n$NODE_ID_3 = "general-cluster";\n$MODEL_ID_3 = "cccbe437d6e54e2bb911c6aa292fb072";\n$MODEL_VERSION_ID_3 = "cc2074cff6dc4c02b6f4e1b8606dcb54";\n\n$NODE_ID_4 = "mapper";\n$SYNONYM_MODEL_ID = "YOUR_SYNONYM_MODEL_ID";\n$SYNONYM_MODEL_VERSION_ID = "YOUR_SYNONYM_MODEL_VERSION_ID";\n\n$NODE_ID_5 = "greater-than";\n$GREATER_THAN_MODEL_ID = "YOUR_GREATER_THAN_MODEL_ID";\n$GREATER_THAN_MODEL_VERSION_ID = "YOUR_GREATER_THAN_MODEL_VERSION_ID";\n\n$NODE_ID_6 = "less-than";\n$LESS_THAN_MODEL_ID = "YOUR_LESS_THAN_MODEL_ID";\n$LESS_THAN_MODEL_VERSION_ID = "YOUR_LESS_THAN_MODEL_VERSION_ID";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\PostWorkflowsRequest;\nuse Clarifai\\Api\\Workflow;\nuse Clarifai\\Api\\WorkflowNode;\nuse Clarifai\\Api\\NodeInput;\nuse Clarifai\\Api\\Model;\nuse Clarifai\\Api\\ModelVersion;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PostWorkflows(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new PostWorkflowsRequest([\n        "user_app_id" => $userDataObject,\n        "workflows" => [\n            new Workflow([\n                "id" => $WORKFLOW_ID, // auto-annotation-workflow-id\n                "nodes" => [\n                    new WorkflowNode([\n                        "id" => $NODE_ID_1, // general-embed\n                        "model" => new Model([\n                            "id" => $MODEL_ID_1, // bbb5f41425b8468d9b7a554ff10f8581\n                            "model_version" => new ModelVersion([\n                                "id" => $MODEL_VERSION_ID_1 // bb186755eda04f9cbb6fe32e816be104\n                            ])\n                        ])\n\n                    ]),\n                    new WorkflowNode([\n                        "id" => $NODE_ID_2, // general-concept\n                        "model" => new Model([\n                            "id" => $MODEL_ID_2, // aaa03c23b3724a16a56b629203edc62c\n                            "model_version" => new ModelVersion([\n                                "id" => $MODEL_VERSION_ID_2 // aa7f35c01e0642fda5cf400f543e7c40\n                            ])\n                        ])\n                    ]),\n                    new WorkflowNode([\n                        "id" => $NODE_ID_3, // general-cluster\n                        "model" => new Model([\n                            "id" => $MODEL_ID_3, // cccbe437d6e54e2bb911c6aa292fb072\n                            "model_version" => new ModelVersion([\n                                "id" => $MODEL_VERSION_ID_3 // cc2074cff6dc4c02b6f4e1b8606dcb54\n                            ])\n                        ]),\n                        "node_inputs" => [\n                            new NodeInput([\n                                "node_id" => $NODE_ID_1 // general-embed\n                            ])\n                        ]\n                    ]),\n                    new WorkflowNode([\n                        "id" => $NODE_ID_4, // mapper\n                        "model" => new Model([\n                            "id" => $SYNONYM_MODEL_ID,\n                            "model_version" => new ModelVersion([\n                                "id" => $SYNONYM_MODEL_VERSION_ID\n                            ])\n                        ]),\n                        "node_inputs" => [\n                            new NodeInput([\n                                "node_id" => $NODE_ID_2 // general-concept\n                            ])\n                        ]\n                    ]),\n                    new WorkflowNode([\n                        "id" => $NODE_ID_5, // greater-than\n                        "model" => new Model([\n                            "id" => $GREATER_THAN_MODEL_ID,\n                            "model_version" => new ModelVersion([\n                                "id" => $GREATER_THAN_MODEL_VERSION_ID\n                            ])\n                        ]),\n                        "node_inputs" => [\n                            new NodeInput([\n                                "node_id" => $NODE_ID_4 // mapper\n                            ])\n                        ]\n                    ]),\n                    new WorkflowNode([\n                        "id" => $NODE_ID_6, // less-than\n                        "model" => new Model([\n                            "id" => $LESS_THAN_MODEL_ID,\n                            "model_version" => new ModelVersion([\n                                "id" => $LESS_THAN_MODEL_VERSION_ID\n                            ])\n                        ]),\n                        "node_inputs" => [\n                            new NodeInput([\n                                "node_id" => $NODE_ID_4 // mapper\n                            ])\n                        ]\n                    ])\n                ]\n            ])\n        ]\n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\n?>',O='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n//////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the details of the \n// nodes to suppress their outputs. Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change these to suppress the outputs of your own nodes\n$WORKFLOW_ID = "predict-cluster-only";\n$NODE_ID_1 = "general-embed";\n$MODEL_ID_1 = "bbb5f41425b8468d9b7a554ff10f8581";\n$MODEL_VERSION_ID_1 = "bb186755eda04f9cbb6fe32e816be104";\n\n$NODE_ID_2 = "general-cluster";\n$MODEL_ID_2 = "cccbe437d6e54e2bb911c6aa292fb072";\n$MODEL_VERSION_ID_2 = "cc2074cff6dc4c02b6f4e1b8606dcb54";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\PostWorkflowsRequest;\nuse Clarifai\\Api\\Workflow;\nuse Clarifai\\Api\\WorkflowNode;\nuse Clarifai\\Api\\NodeInput;\nuse Clarifai\\Api\\Model;\nuse Clarifai\\Api\\ModelVersion;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PostWorkflows(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new PostWorkflowsRequest([\n        "user_app_id" => $userDataObject,\n        "workflows" => [\n            new Workflow([\n                "id" => $WORKFLOW_ID,\n                "nodes" => [\n                    new WorkflowNode([\n                        "id" => $NODE_ID_1,\n                        "model" => new Model([\n                            "id" => $MODEL_ID_1,\n                            "model_version" => new ModelVersion([\n                                "id" => $MODEL_VERSION_ID_1\n                            ])\n                        ]),\n\n                        "suppress_output" => true\n\n                    ]),\n                    new WorkflowNode([\n                        "id" => $NODE_ID_2,\n                        "model" => new Model([\n                            "id" => $MODEL_ID_2,\n                            "model_version" => new ModelVersion([\n                                "id" => $MODEL_VERSION_ID_2\n                            ])\n                        ]),\n                        "node_inputs" => [\n                            new NodeInput([\n                                "node_id" => $NODE_ID_1\n                            ])\n                        ]\n                    ])\n                ]\n            ])\n        ]\n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\n?>',f='curl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/workflows" \\\n    -H "Authorization: Key YOUR_PAT_HERE" \\\n    -H "Content-Type: application/json" \\\n    --data-raw \'{\n        "workflows": [\n            {\n                "id": "auto-annotation-workflow-id",\n                "nodes": [\n                    {\n                        "id": "general-embed",\n                        "model": {\n                            "id": "YOUR_GENERAL_EMBED_MODEL_ID_HERE",\n                            "model_version": {\n                                "id": "YOUR_GENERAL_EMBED_MODEL_VERSION_ID_HERE"\n                            }\n                        }\n                    },\n                    {\n                        "id": "general-concept",\n                        "model": {\n                            "id": "YOUR_GENERAL_CONCEPT_MODEL_ID_HERE",\n                            "model_version": {\n                                "id": "YOUR_GENERAL_CONCEPT_MODEL_VERSION_ID_HERE"\n                            }\n                        }\n                    },\n                    {\n                        "id": "general-cluster",\n                        "model": {\n                            "id": "YOUR_GENERAL_CLUSTER_MODEL_ID_HERE",\n                            "model_version": {\n                                "id": "YOUR_GENERAL_CLUSTER_MODEL_VERSION_ID_HERE"\n                            }\n                        }\n                    },\n                    {\n                        "id": "mapper",\n                        "model": {\n                            "id": "synonym-model-id",\n                            "model_version": {\n                                "id": "YOUR_MAPPER_MODEL_VERSION_ID_HERE"\n                            }\n                        },\n                        "node_inputs": [\n                            {\n                                "node_id": "general-concept"\n                            }\n                        ]\n                    },\n                    {\n                        "id": "greater-than",\n                        "model": {\n                            "id": "greater-than-model-id",\n                            "model_version": {\n                                "id": "YOUR_GREATER_THAN_MODEL_VERSION_ID_HERE"\n                            }\n                        },\n                        "node_inputs": [\n                            {\n                                "node_id": "mapper"\n                            }\n                        ]\n                    },\n                    {\n                        "id": "less-than",\n                        "model": {\n                            "id": "less-than-model-id",\n                            "model_version": {\n                                "id": "YOUR_LESS_THAN_MODEL_VERSION_ID_HERE"\n                            }\n                        },\n                        "node_inputs": [\n                            {\n                                "node_id": "mapper"\n                            }\n                        ]\n                    }\n                ]\n            }\n        ]\n    }\'',N='curl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/workflows" \\\n    -H "Authorization: Key YOUR_PAT_HERE" \\\n    -H "Content-Type: application/json" \\\n    --data-raw \'{\n\t\t"workflows": [\n\t\t\t{\n\t\t\t  "id": "predict-cluster-only",\n\t\t\t  "nodes": [\n\t\t\t\t{\n\t\t\t\t  "id": "general-embed",\n\t\t\t\t  "model": {\n\t\t\t\t\t"id": "bbb5f41425b8468d9b7a554ff10f8581",\n\t\t\t\t\t"model_version": {\n\t\t\t\t\t  "id": "bb186755eda04f9cbb6fe32e816be104"\n\t\t\t\t\t}\n\t\t\t\t  },\n\t\t\t\t  "suppress_output": true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t  "id": "general-cluster",\n\t\t\t\t  "node_inputs": [\n\t\t\t\t\t{\n\t\t\t\t\t  "node_id": "general-embed"\n\t\t\t\t\t}\n\t\t\t\t  ],\n\t\t\t\t  "model": {\n\t\t\t\t\t"id": "cccbe437d6e54e2bb911c6aa292fb072",\n\t\t\t\t\t"model_version": {\n\t\t\t\t\t  "id": "cc2074cff6dc4c02b6f4e1b8606dcb54"\n\t\t\t\t\t}\n\t\t\t\t  }\n\t\t\t\t}\n\t\t\t  ]\n\t\t\t}\n\t\t]\n\t}\'',h={description:"Connect your models together.",sidebar_position:1},b="Input Nodes",R={id:"api-guide/workflows/input_nodes",title:"Input Nodes",description:"Connect your models together.",source:"@site/docs/api-guide/workflows/input_nodes.md",sourceDirName:"api-guide/workflows",slug:"/api-guide/workflows/input_nodes",permalink:"/api-guide/workflows/input_nodes",draft:!1,unlisted:!1,editUrl:"https://github.com/Clarifai/docs/blob/main/docs/api-guide/workflows/input_nodes.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{description:"Connect your models together.",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Creating Workflows",permalink:"/api-guide/workflows/"},next:{title:"Create, Get, Update, Delete",permalink:"/api-guide/workflows/create-get-update-delete"}},w={},S=[{value:"Supported Input and Output Types",id:"supported-input-and-output-types",level:2},{value:"Inputs",id:"inputs",level:4},{value:"Outputs",id:"outputs",level:4},{value:"The Building Blocks",id:"the-building-blocks",level:2},{value:"Sample Workflow With Multiple Connected Nodes",id:"sample-workflow-with-multiple-connected-nodes",level:3},{value:"Suppressing the Output From Nodes",id:"suppressing-the-output-from-nodes",level:3}];function m(n){const e={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",strong:"strong",ul:"ul",...(0,s.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h1,{id:"input-nodes",children:"Input Nodes"}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Connect your models together"})}),"\n",(0,o.jsx)("hr",{}),"\n",(0,o.jsx)(e.p,{children:"The outputs from one model can be used as inputs for another model. This allows you to link together the models in a graph. Linking models helps you build sophisticated AI solutions that can zero-in on a specific use case."}),"\n",(0,o.jsx)(e.h2,{id:"supported-input-and-output-types",children:"Supported Input and Output Types"}),"\n",(0,o.jsxs)(e.p,{children:["To view your available models, just open your application in the Portal and click the ",(0,o.jsx)(e.strong,{children:"Model Mode"})," icon on the left-hand side of the screen. From there, just click the ",(0,o.jsx)(e.strong,{children:"Create a Custom Model"})," button on the top right-hand corner of the screen."]}),"\n",(0,o.jsx)(e.p,{children:"Different models accept different types of inputs and return different types of outputs. They are named after the fields in the Data object of our API. This object uses inputs, annotations, models, and workflows."}),"\n",(0,o.jsx)(e.p,{children:"Some examples include:"}),"\n",(0,o.jsx)(e.h4,{id:"inputs",children:"Inputs"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"Concepts"}),"\n",(0,o.jsx)(e.li,{children:"Embeddings"}),"\n",(0,o.jsx)(e.li,{children:"Image"}),"\n",(0,o.jsx)(e.li,{children:"Image or video"}),"\n",(0,o.jsx)(e.li,{children:"Regions"}),"\n"]}),"\n",(0,o.jsx)(e.h4,{id:"outputs",children:"Outputs"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"Concepts"}),"\n",(0,o.jsx)(e.li,{children:"Clusters"}),"\n",(0,o.jsx)(e.li,{children:"Regions"}),"\n"]}),"\n",(0,o.jsx)(e.h2,{id:"the-building-blocks",children:"The Building Blocks"}),"\n",(0,o.jsx)(e.p,{children:"You can create workflows out of any Clarifai Models or custom models that you have created for your app. The inputs and outputs supported by your custom models will depend on the inputs and outputs supported by the Clarifai Models, or model templates that you have used to build them."}),"\n",(0,o.jsx)(e.admonition,{type:"info",children:(0,o.jsxs)(e.p,{children:["The initialization code used in the following examples is outlined in detail on the ",(0,o.jsx)(e.a,{href:"https://docs.clarifai.com/api-guide/api-overview/api-clients/#client-installation-instructions",children:"client installation page."})]})}),"\n","\n","\n","\n","\n","\n","\n",(0,o.jsx)(e.h3,{id:"sample-workflow-with-multiple-connected-nodes",children:"Sample Workflow With Multiple Connected Nodes"}),"\n",(0,o.jsxs)(e.p,{children:["The following is an example of how to build a workflow with multiple connected nodes. Note that model IDs and model version IDs from the public ",(0,o.jsx)(e.code,{children:"clarifai/main"})," application are fixed, so they are already hard-coded in the code examples below. It is possible to use other public model or model version IDs."]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(a.A,{value:"python",label:"Python",children:(0,o.jsx)(i.A,{className:"language-python",children:_})}),(0,o.jsx)(a.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,o.jsx)(i.A,{className:"language-javascript",children:d})}),(0,o.jsx)(a.A,{value:"nodejs",label:"NodeJS",children:(0,o.jsx)(i.A,{className:"language-javascript",children:E})}),(0,o.jsx)(a.A,{value:"java",label:"Java",children:(0,o.jsx)(i.A,{className:"language-java",children:D})}),(0,o.jsx)(a.A,{value:"php",label:"PHP",children:(0,o.jsx)(i.A,{className:"language-php",children:I})}),(0,o.jsx)(a.A,{value:"curl",label:"cURL",children:(0,o.jsx)(i.A,{className:"language-bash",children:f})})]}),"\n",(0,o.jsx)(e.h3,{id:"suppressing-the-output-from-nodes",children:"Suppressing the Output From Nodes"}),"\n",(0,o.jsxs)(e.p,{children:["It is possible to turn the outputs from given nodes in your workflow on and off with the ",(0,o.jsx)(e.code,{children:"suppress_output"})," endpoint. This can be helpful when you want to hide outputs for expensive return values like image crops or embedding."]}),"\n",(0,o.jsx)(e.p,{children:"By default, this endpoint will be set to false, meaning that we do not suppress any model's output."}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(a.A,{value:"python",label:"Python",children:(0,o.jsx)(i.A,{className:"language-python",children:l})}),(0,o.jsx)(a.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,o.jsx)(i.A,{className:"language-javascript",children:c})}),(0,o.jsx)(a.A,{value:"nodejs",label:"NodeJS",children:(0,o.jsx)(i.A,{className:"language-javascript",children:u})}),(0,o.jsx)(a.A,{value:"java",label:"Java",children:(0,o.jsx)(i.A,{className:"language-java",children:p})}),(0,o.jsx)(a.A,{value:"php",label:"PHP",children:(0,o.jsx)(i.A,{className:"language-php",children:O})}),(0,o.jsx)(a.A,{value:"curl",label:"cURL",children:(0,o.jsx)(i.A,{className:"language-bash",children:N})})]})]})}function L(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(m,{...n})}):m(n)}},19365:(n,e,t)=>{t.d(e,{A:()=>a});t(96540);var o=t(18215);const s={tabItem:"tabItem_Ymn6"};var r=t(74848);function a(n){let{children:e,hidden:t,className:a}=n;return(0,r.jsx)("div",{role:"tabpanel",className:(0,o.A)(s.tabItem,a),hidden:t,children:e})}},11470:(n,e,t)=>{t.d(e,{A:()=>R});var o=t(96540),s=t(18215),r=t(23104),a=t(56347),i=t(205),_=t(57485),l=t(31682),d=t(70679);function c(n){return o.Children.toArray(n).filter((n=>"\n"!==n)).map((n=>{if(!n||(0,o.isValidElement)(n)&&function(n){const{props:e}=n;return!!e&&"object"==typeof e&&"value"in e}(n))return n;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof n.type?n.type:n.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function E(n){const{values:e,children:t}=n;return(0,o.useMemo)((()=>{const n=e??function(n){return c(n).map((n=>{let{props:{value:e,label:t,attributes:o,default:s}}=n;return{value:e,label:t,attributes:o,default:s}}))}(t);return function(n){const e=(0,l.X)(n,((n,e)=>n.value===e.value));if(e.length>0)throw new Error(`Docusaurus error: Duplicate values "${e.map((n=>n.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(n),n}),[e,t])}function u(n){let{value:e,tabValues:t}=n;return t.some((n=>n.value===e))}function D(n){let{queryString:e=!1,groupId:t}=n;const s=(0,a.W6)(),r=function(n){let{queryString:e=!1,groupId:t}=n;if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:e,groupId:t});return[(0,_.aZ)(r),(0,o.useCallback)((n=>{if(!r)return;const e=new URLSearchParams(s.location.search);e.set(r,n),s.replace({...s.location,search:e.toString()})}),[r,s])]}function p(n){const{defaultValue:e,queryString:t=!1,groupId:s}=n,r=E(n),[a,_]=(0,o.useState)((()=>function(n){let{defaultValue:e,tabValues:t}=n;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!u({value:e,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${t.map((n=>n.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const o=t.find((n=>n.default))??t[0];if(!o)throw new Error("Unexpected error: 0 tabValues");return o.value}({defaultValue:e,tabValues:r}))),[l,c]=D({queryString:t,groupId:s}),[p,I]=function(n){let{groupId:e}=n;const t=function(n){return n?`docusaurus.tab.${n}`:null}(e),[s,r]=(0,d.Dv)(t);return[s,(0,o.useCallback)((n=>{t&&r.set(n)}),[t,r])]}({groupId:s}),O=(()=>{const n=l??p;return u({value:n,tabValues:r})?n:null})();(0,i.A)((()=>{O&&_(O)}),[O]);return{selectedValue:a,selectValue:(0,o.useCallback)((n=>{if(!u({value:n,tabValues:r}))throw new Error(`Can't select invalid tab value=${n}`);_(n),c(n),I(n)}),[c,I,r]),tabValues:r}}var I=t(92303);const O={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var f=t(74848);function N(n){let{className:e,block:t,selectedValue:o,selectValue:a,tabValues:i}=n;const _=[],{blockElementScrollPositionUntilNextRender:l}=(0,r.a_)(),d=n=>{const e=n.currentTarget,t=_.indexOf(e),s=i[t].value;s!==o&&(l(e),a(s))},c=n=>{let e=null;switch(n.key){case"Enter":d(n);break;case"ArrowRight":{const t=_.indexOf(n.currentTarget)+1;e=_[t]??_[0];break}case"ArrowLeft":{const t=_.indexOf(n.currentTarget)-1;e=_[t]??_[_.length-1];break}}e?.focus()};return(0,f.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":t},e),children:i.map((n=>{let{value:e,label:t,attributes:r}=n;return(0,f.jsx)("li",{role:"tab",tabIndex:o===e?0:-1,"aria-selected":o===e,ref:n=>_.push(n),onKeyDown:c,onClick:d,...r,className:(0,s.A)("tabs__item",O.tabItem,r?.className,{"tabs__item--active":o===e}),children:t??e},e)}))})}function h(n){let{lazy:e,children:t,selectedValue:s}=n;const r=(Array.isArray(t)?t:[t]).filter(Boolean);if(e){const n=r.find((n=>n.props.value===s));return n?(0,o.cloneElement)(n,{className:"margin-top--md"}):null}return(0,f.jsx)("div",{className:"margin-top--md",children:r.map(((n,e)=>(0,o.cloneElement)(n,{key:e,hidden:n.props.value!==s})))})}function b(n){const e=p(n);return(0,f.jsxs)("div",{className:(0,s.A)("tabs-container",O.tabList),children:[(0,f.jsx)(N,{...e,...n}),(0,f.jsx)(h,{...e,...n})]})}function R(n){const e=(0,I.A)();return(0,f.jsx)(b,{...n,children:c(n.children)},String(e))}}}]);
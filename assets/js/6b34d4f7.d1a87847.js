"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[1542],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var s=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,s)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,s,o=function(e,t){if(null==e)return{};var n,s,o={},a=Object.keys(e);for(s=0;s<a.length;s++)n=a[s],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(s=0;s<a.length;s++)n=a[s],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=s.createContext({}),p=function(e){var t=s.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=p(e.components);return s.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},c=s.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,d=r(e,["components","mdxType","originalType","parentName"]),c=p(n),m=o,h=c["".concat(l,".").concat(m)]||c[m]||u[m]||a;return n?s.createElement(h,i(i({ref:t},d),{},{components:n})):s.createElement(h,i({ref:t},d))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=c;var r={};for(var l in t)hasOwnProperty.call(t,l)&&(r[l]=t[l]);r.originalType=e,r.mdxType="string"==typeof e?e:o,i[1]=r;for(var p=2;p<a;p++)i[p]=n[p];return s.createElement.apply(null,i)}return s.createElement.apply(null,n)}c.displayName="MDXCreateElement"},8215:function(e,t,n){var s=n(7294);t.Z=function(e){var t=e.children,n=e.hidden,o=e.className;return s.createElement("div",{role:"tabpanel",hidden:n,className:o},t)}},6396:function(e,t,n){n.d(t,{Z:function(){return c}});var s=n(7462),o=n(7294),a=n(2389),i=n(9443);var r=function(){var e=(0,o.useContext)(i.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},l=n(3616),p=n(6010),d="tabItem_vU9c";function u(e){var t,n,a,i=e.lazy,u=e.block,c=e.defaultValue,m=e.values,h=e.groupId,_=e.className,g=o.Children.map(e.children,(function(e){if((0,o.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),v=null!=m?m:g.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),f=(0,l.lx)(v,(function(e,t){return e.value===t.value}));if(f.length>0)throw new Error('Docusaurus error: Duplicate values "'+f.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var b=null===c?c:null!=(t=null!=c?c:null==(n=g.find((function(e){return e.props.default})))?void 0:n.props.value)?t:null==(a=g[0])?void 0:a.props.value;if(null!==b&&!v.some((function(e){return e.value===b})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+b+'" but none of its children has the corresponding value. Available values are: '+v.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var I=r(),y=I.tabGroupChoices,T=I.setTabGroupChoices,k=(0,o.useState)(b),w=k[0],S=k[1],E=[],R=(0,l.o5)().blockElementScrollPositionUntilNextRender;if(null!=h){var M=y[h];null!=M&&M!==w&&v.some((function(e){return e.value===M}))&&S(M)}var N=function(e){var t=e.currentTarget,n=E.indexOf(t),s=v[n].value;s!==w&&(R(t),S(s),null!=h&&T(h,s))},O=function(e){var t,n=null;switch(e.key){case"ArrowRight":var s=E.indexOf(e.currentTarget)+1;n=E[s]||E[0];break;case"ArrowLeft":var o=E.indexOf(e.currentTarget)-1;n=E[o]||E[E.length-1]}null==(t=n)||t.focus()};return o.createElement("div",{className:"tabs-container"},o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,p.Z)("tabs",{"tabs--block":u},_)},v.map((function(e){var t=e.value,n=e.label,a=e.attributes;return o.createElement("li",(0,s.Z)({role:"tab",tabIndex:w===t?0:-1,"aria-selected":w===t,key:t,ref:function(e){return E.push(e)},onKeyDown:O,onFocus:N,onClick:N},a,{className:(0,p.Z)("tabs__item",d,null==a?void 0:a.className,{"tabs__item--active":w===t})}),null!=n?n:t)}))),i?(0,o.cloneElement)(g.filter((function(e){return e.props.value===w}))[0],{className:"margin-vert--md"}):o.createElement("div",{className:"margin-vert--md"},g.map((function(e,t){return(0,o.cloneElement)(e,{key:t,hidden:e.props.value!==w})}))))}function c(e){var t=(0,a.Z)();return o.createElement(u,(0,s.Z)({key:String(t)},e))}},4746:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return p},contentTitle:function(){return d},metadata:function(){return u},toc:function(){return c},default:function(){return h}});var s=n(7462),o=n(3366),a=(n(7294),n(3905)),i=n(6396),r=n(8215),l=["components"],p={description:"Manage your model training jobs.",sidebar_position:5},d="Create, Get, Update, Delete",u={unversionedId:"api-guide/model/create-get-update-and-delete",id:"api-guide/model/create-get-update-and-delete",title:"Create, Get, Update, Delete",description:"Manage your model training jobs.",source:"@site/docs/api-guide/model/create-get-update-and-delete.md",sourceDirName:"api-guide/model",slug:"/api-guide/model/create-get-update-and-delete",permalink:"/api-guide/model/create-get-update-and-delete",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/api-guide/model/create-get-update-and-delete.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{description:"Manage your model training jobs.",sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Custom Text Model",permalink:"/api-guide/model/custom-text-model-walkthrough"},next:{title:"Deep Training",permalink:"/api-guide/model/deep-training"}},c=[{value:"Create Model",id:"create-model",children:[],level:3},{value:"Add Concepts To A Model",id:"add-concepts-to-a-model",children:[],level:3},{value:"Remove Concepts From A Model",id:"remove-concepts-from-a-model",children:[],level:3},{value:"Update Model Name and Configuration",id:"update-model-name-and-configuration",children:[],level:3},{value:"Get",id:"get",children:[{value:"List Model Types",id:"list-model-types",children:[],level:3},{value:"Get Models",id:"get-models",children:[],level:3},{value:"Get Model By Id",id:"get-model-by-id",children:[],level:3},{value:"Get Model Output Info By Id",id:"get-model-output-info-by-id",children:[],level:3},{value:"List Model Versions",id:"list-model-versions",children:[],level:3},{value:"Get Model Version By Id",id:"get-model-version-by-id",children:[],level:3},{value:"Get Model Training Inputs",id:"get-model-training-inputs",children:[],level:3},{value:"Get Model Training Inputs By Version",id:"get-model-training-inputs-by-version",children:[],level:3},{value:"Delete A Model",id:"delete-a-model",children:[],level:3},{value:"Delete A Model Version",id:"delete-a-model-version",children:[],level:3},{value:"Delete All Models",id:"delete-all-models",children:[],level:3},{value:"Train A Model",id:"train-a-model",children:[],level:3}],level:2},{value:"Predict With A Model",id:"predict-with-a-model",children:[{value:"Search Models By Name And Type",id:"search-models-by-name-and-type",children:[],level:3}],level:2}],m={toc:c};function h(e){var t=e.components,n=(0,o.Z)(e,l);return(0,a.kt)("wrapper",(0,s.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"create-get-update-delete"},"Create, Get, Update, Delete"),(0,a.kt)("h3",{id:"create-model"},"Create Model"),(0,a.kt)("p",null,"To create a model, you need to specify the model's name and other required fields ","(","which depend on the model",")",". Specifying the ID is optional."),(0,a.kt)("p",null,"Below, we create a classifier model with one initial concept. You can always add and remove concepts later."),(0,a.kt)(i.Z,{mdxType:"Tabs"},(0,a.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nSingleModelResponse postModelsResponse = stub.postModels(\n    PostModelsRequest.newBuilder().addModels(\n        Model.newBuilder()\n            .setId("petsID")\n            .setOutputInfo(\n                OutputInfo.newBuilder().setData(\n                    Data.newBuilder().addConcepts(Concept.newBuilder().setId("boscoe"))\n                )\n            )\n    ).build()\n);\n\nif (postModelsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n    throw new RuntimeException("Post models failed, status: " + postModelsResponse.getStatus());\n'))),(0,a.kt)(r.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nstub.PostModels(\n    {\n        models: [\n            {\n                id: "petsID",\n                output_info: {\n                    data: {concepts: [{id: "boscoe"}]},\n                }\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post models failed, status: " + response.status.description);\n        }\n    }\n);\n'))),(0,a.kt)(r.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'# Insert here the initialization code as outlined on this page:\n# https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\npost_models_response = stub.PostModels(\n    service_pb2.PostModelsRequest(\n        models=[\n            resources_pb2.Model(\n                id="petsID",\n                output_info=resources_pb2.OutputInfo(\n                    data=resources_pb2.Data(\n                        concepts=[resources_pb2.Concept(id="boscoe", value=1)]\n                    ),\n                )\n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif post_models_response.status.code != status_code_pb2.SUCCESS:\n    print("There was an error with your request!")\n    print("\\tCode: {}".format(post_models_response.outputs[0].status.code))\n    print("\\tDescription: {}".format(post_models_response.outputs[0].status.description))\n    print("\\tDetails: {}".format(post_models_response.outputs[0].status.details))\n    raise Exception("Post models failed, status: " + post_models_response.status.description)\n'))),(0,a.kt)(r.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'\n  {\n    "model": {\n      "id": "petsID",\n      "output_info": {\n        "data": {\n          "concepts": [\n            {\n              "id": "boscoe",\n              "value": 1\n            }\n          ]\n        }\n      }\n    }\n  }\'\\\n  https://api.clarifai.com/v2/models\n'))),(0,a.kt)(r.Z,{value:"js_rest",label:"Javascript (REST)",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'const raw = JSON.stringify({\n    "user_app_id": {\n        "user_id": "{YOUR_USER_ID}",\n        "app_id": "{YOUR_APP_ID}"\n    },\n  "model": {\n    "id": "petsID",\n    "output_info": {\n      "data": {\n        "concepts": [\n          {\n            "id": "boscoe",\n            "value": 1\n          }\n        ]\n      }\n    }\n  }\n});\n\nconst requestOptions = {\n  method: \'POST\',\n  headers: {\n    \'Accept\': \'application/json\',\n    \'Authorization\': \'Key {YOUR_PERSONAL_TOKEN}\'\n  },\n  body: raw\n};\n\nfetch("https://api.clarifai.com/v2/models", requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log(\'error\', error));\n')))),(0,a.kt)("h3",{id:"add-concepts-to-a-model"},"Add Concepts To A Model"),(0,a.kt)("p",null,"You can add concepts to a model at any point. As you add concepts to inputs, you may want to add them to your model."),(0,a.kt)(i.Z,{mdxType:"Tabs"},(0,a.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n...\n\nMultiModelResponse patchModelsResponse = stub.patchModels(\n    PatchModelsRequest.newBuilder()\n        .setAction("merge")  // Supported actions: overwrite, merge, remove\n        .addModels(\n            Model.newBuilder()\n                .setId("petsID")\n                .setOutputInfo(\n                    OutputInfo.newBuilder().setData(\n                        Data.newBuilder().addConcepts(Concept.newBuilder().setId("charlie"))\n                    )\n                )\n        )\n        .build()\n);\n\nif (patchModelsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n    throw new RuntimeException("Patch models failed, status: " + patchModelsResponse.getStatus());\n}\n'))),(0,a.kt)(r.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nstub.PatchModels(\n    {\n        action: "merge",  // Supported actions: overwrite, merge, remove\n        models: [\n            {\n                id: "petsID",\n                output_info: {data: {concepts: [{id: "charlie"}]}}\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Patch models failed, status: " + response.status.description);\n        }\n    }\n);\n'))),(0,a.kt)(r.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'# Insert here the initialization code as outlined on this page:\n# https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\npatch_models_response = stub.PatchModels(\n    service_pb2.PatchModelsRequest(\n        action="merge",  # Supported actions: overwrite, merge, remove\n        models=[\n            resources_pb2.Model(\n                id="petsID",\n                output_info=resources_pb2.OutputInfo(\n                    data=resources_pb2.Data(\n                        concepts=[resources_pb2.Concept(id="charlie")]\n                    ),\n                )\n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif patch_models_response.status.code != status_code_pb2.SUCCESS:\n    print("There was an error with your request!")\n    print("\\tCode: {}".format(patch_models_response.outputs[0].status.code))\n    print("\\tDescription: {}".format(patch_models_response.outputs[0].status.description))\n    print("\\tDetails: {}".format(patch_models_response.outputs[0].status.details))\n    raise Exception("Patch models failed, status: " + patch_models_response.status.description)\n'))),(0,a.kt)(r.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X PATCH \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'\n  {\n    "models": [\n      {\n        "id": "petsID",\n        "output_info": {\n          "data": {\n            "concepts": [\n              {\n                "id": "charlie"\n              }\n            ]\n          }\n        }\n      }\n    ],\n    "action": "merge"\n  }\'\\\n  https://api.clarifai.com/v2/models/\n'))),(0,a.kt)(r.Z,{value:"js_rest",label:"Javascript (REST)",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'const raw = JSON.stringify({\n    "user_app_id": {\n        "user_id": "{YOUR_USER_ID}",\n        "app_id": "{YOUR_APP_ID}"\n    },\n  "models": [\n    {\n      "id": "petsID",\n      "output_info": {\n        "data": {\n          "concepts": [\n            {\n              "id": "charlie"\n            }\n          ]\n        }\n      }\n    }\n  ],\n  "action": "merge"\n});\n\nconst requestOptions = {\n  method: \'PATCH\',\n  headers: {\n    \'Accept\': \'application/json\',\n    \'Authorization\': \'Key {YOUR_PERSONAL_TOKEN}\'\n  },\n  body: raw\n};\n\nfetch("https://api.clarifai.com/v2/models", requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log(\'error\', error));\n')))),(0,a.kt)("h3",{id:"remove-concepts-from-a-model"},"Remove Concepts From A Model"),(0,a.kt)("p",null,"Conversely, if you'd like to remove concepts from a model, you can also do that."),(0,a.kt)(i.Z,{mdxType:"Tabs"},(0,a.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nMultiModelResponse patchModelsResponse = stub.patchModels(\n    PatchModelsRequest.newBuilder()\n        .setAction("remove")  // Supported actions: overwrite, merge, remove\n        .addModels(\n            Model.newBuilder()\n                .setId("petsID")\n                .setOutputInfo(\n                    OutputInfo.newBuilder().setData(\n                        Data.newBuilder().addConcepts(Concept.newBuilder().setId("charlie"))\n                    )\n                )\n        )\n        .build()\n);\n\nif (patchModelsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n    throw new RuntimeException("Patch models failed, status: " + patchModelsResponse.getStatus());\n}\n'))),(0,a.kt)(r.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nstub.PatchModels(\n    {\n        action: "remove",  // Supported actions: overwrite, merge, remove\n        models: [\n            {\n                id: "petsID",\n                output_info: {data: {concepts: [{id: "charlie"}]}}\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Patch models failed, status: " + response.status.description);\n        }\n    }\n);\n'))),(0,a.kt)(r.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'# Insert here the initialization code as outlined on this page:\n# https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\npatch_models_response = stub.PatchModels(\n    service_pb2.PatchModelsRequest(\n        action="remove",  # Supported actions: overwrite, merge, remove\n        models=[\n            resources_pb2.Model(\n                id="petsID",\n                output_info=resources_pb2.OutputInfo(\n                    data=resources_pb2.Data(\n                        concepts=[resources_pb2.Concept(id="charlie")]\n                    ),\n                )\n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif patch_models_response.status.code != status_code_pb2.SUCCESS:\n    print("There was an error with your request!")\n    print("\\tCode: {}".format(patch_models_response.outputs[0].status.code))\n    print("\\tDescription: {}".format(patch_models_response.outputs[0].status.description))\n    print("\\tDetails: {}".format(patch_models_response.outputs[0].status.details))\n    raise Exception("Patch models failed, status: " + patch_models_response.status.description)\n'))),(0,a.kt)(r.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X PATCH \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'\n  {\n    "models": [\n      {\n        "id": "petsID",\n        "output_info": {\n          "data": {\n            "concepts": [\n              {\n                "id": "charlie"\n              }\n            ]\n          }\n        }\n      }\n    ],\n    "action": "remove"\n  }\'\\\n  https://api.clarifai.com/v2/models/\n'))),(0,a.kt)(r.Z,{value:"js_rest",label:"Javascript (REST)",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'const raw = JSON.stringify({\n    "user_app_id": {\n        "user_id": "{YOUR_USER_ID}",\n        "app_id": "{YOUR_APP_ID}"\n    },\n  "models": [\n    {\n      "id": "petsID",\n      "output_info": {\n        "data": {\n          "concepts": [\n            {\n              "id": "charlie"\n            }\n          ]\n        }\n      }\n    }\n  ],\n  "action": "remove"\n});\n\nconst requestOptions = {\n  method: \'PATCH\',\n  headers: {\n    \'Accept\': \'application/json\',\n    \'Authorization\': \'Key {YOUR_PERSONAL_TOKEN}\'\n  },\n  body: raw\n};\n\nfetch("https://api.clarifai.com/v2/models", requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log(\'error\', error));\n')))),(0,a.kt)("h3",{id:"update-model-name-and-configuration"},"Update Model Name and Configuration"),(0,a.kt)("p",null,"Here we will change the model name to 'newname' and the model's configuration to have concepts","_","mutually","_","exclusive=true and closed","_","environment=true."),(0,a.kt)(i.Z,{mdxType:"Tabs"},(0,a.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nMultiModelResponse patchModelsResponse = stub.patchModels(\n    PatchModelsRequest.newBuilder()\n        .setAction("overwrite")\n        .addModels(\n            Model.newBuilder()\n                .setId("petsID")\n                .setName("newname")\n                .setOutputInfo(\n                    OutputInfo.newBuilder()\n                        .setData(\n                            Data.newBuilder()\n                                .addConcepts(Concept.newBuilder().setId("birds"))\n                                .addConcepts(Concept.newBuilder().setId("hurd"))\n                        )\n                        .setOutputConfig(\n                            OutputConfig.newBuilder()\n                                .setConceptsMutuallyExclusive(true)\n                                .setClosedEnvironment(true)\n                        )\n                )\n    ).build()\n);\n\nif (patchModelsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n    throw new RuntimeException("Patch models failed, status: " + patchModelsResponse.getStatus());\n}\n'))),(0,a.kt)(r.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nstub.PatchModels(\n    {\n        action: "overwrite",\n        models: [\n            {\n                id: "petsID",\n                name: "newname",\n                output_info: {\n                    data: {concepts: [{id: "birds"}, {id: "hurd"}]},\n                    output_config: {concepts_mutually_exclusive: true, closed_environment: true}\n                }\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Patch models failed, status: " + response.status.description);\n        }\n    }\n);\n'))),(0,a.kt)(r.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'# Insert here the initialization code as outlined on this page:\n# https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\npatch_models_response = stub.PatchModels(\n    service_pb2.PatchModelsRequest(\n        action="overwrite",\n        models=[\n            resources_pb2.Model(\n                id="petsID",\n                name="newname",\n                output_info=resources_pb2.OutputInfo(\n                    data=resources_pb2.Data(\n                        concepts=[\n                            resources_pb2.Concept(id="birds"),\n                            resources_pb2.Concept(id="hurd")\n                        ]\n                    ),\n                    output_config=resources_pb2.OutputConfig(\n                        concepts_mutually_exclusive=True,\n                        closed_environment=True,\n                    )\n                )\n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif patch_models_response.status.code != status_code_pb2.SUCCESS:\n    print("There was an error with your request!")\n    print("\\tCode: {}".format(patch_models_response.outputs[0].status.code))\n    print("\\tDescription: {}".format(patch_models_response.outputs[0].status.description))\n    print("\\tDetails: {}".format(patch_models_response.outputs[0].status.details))\n    raise Exception("Patch models failed, status: " + patch_models_response.status.description)\n'))),(0,a.kt)(r.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X PATCH \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'\n  {\n    "models": [\n      {\n        "id": "petsID",\n        "name": "newname",\n        "output_info": {\n          "data": {"concepts": [{"id": "birds"}, {"id": "hurd"}]},\n          "output_config": {\n            "concepts_mutually_exclusive": true,\n            "closed_environment": true\n          }\n        }\n      }\n    ],\n    "action": "overwrite"\n  }\'\\\n  https://api.clarifai.com/v2/models/\n'))),(0,a.kt)(r.Z,{value:"js_rest",label:"Javascript (REST)",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'const raw = JSON.stringify({\n    "user_app_id": {\n        "user_id": "{YOUR_USER_ID}",\n        "app_id": "{YOUR_APP_ID}"\n    },\n  "models": [\n    {\n      "id": "petsID",\n      "name": "newname",\n      "output_info": {\n        "data": {"concepts": [{"id": "birds"}, {"id": "hurd"}]},\n        "output_config": {\n          "concepts_mutually_exclusive": true,\n          "closed_environment": true\n        }\n      }\n    }\n  ],\n  "action": "overwrite"\n});\n\nconst requestOptions = {\n  method: \'PATCH\',\n  headers: {\n    \'Accept\': \'application/json\',\n    \'Authorization\': \'Key {YOUR_PERSONAL_TOKEN}\'\n  },\n  body: raw\n};\n\nfetch("https://api.clarifai.com/v2/models", requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log(\'error\', error));\n')))),(0,a.kt)("h2",{id:"get"},"Get"),(0,a.kt)("h3",{id:"list-model-types"},"List Model Types"),(0,a.kt)("p",null,"Learn about available model types and their hyperparameters. This endpoint lists all the possible models that are creatable ","(","when creatable=true",")",", or in general in the platform ","(","the others ones have creatable=false",")","."),(0,a.kt)(i.Z,{mdxType:"Tabs"},(0,a.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nMultiModelTypeResponse listModelTypesResponse = stub.listModelTypes(ListModelTypesRequest.newBuilder().build());\n\nfor (ModelType modelType : listModelTypesResponse.getModelTypesList()) {\n    System.out.println(modelType);\n}\n"))),(0,a.kt)(r.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nstub.ListModelTypes(\n    {\n        page: 1,\n        per_page: 500\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Received status: " + response.status.description + "\\n" + response.status.details);\n        }\n\n        for (const model_type of response.model_types) {\n            console.log(model_type)\n        }\n    }\n);\n'))),(0,a.kt)(r.Z,{value:"grpc_python",label:"gRPC Python",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'# Insert here the initialization code as outlined on this page:\n# https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nresponse = stub.ListModelTypes(\n    service_pb2.ListModelTypesRequest(), \n    metadata=metadata\n    )\n\nif response.status.code != status_code_pb2.SUCCESS:\n    print("There was an error with your request!")\n    print("\\tCode: {}".format(response.outputs[0].status.code))\n    print("\\tDescription: {}".format(response.outputs[0].status.description))\n    print("\\tDetails: {}".format(response.outputs[0].status.details))\n    raise Exception("Patch models failed, status: " + response.status.description)\n\nfor model_type in response.model_types:\n  print(model_type)\n'))),(0,a.kt)(r.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"curl -X GET 'https://api.clarifai.com/v2/models/types?per_page=20&page=1' \\\n    -H 'Authorization: Key YOUR_API_KEY'\n"))),(0,a.kt)(r.Z,{value:"js_rest",label:"Javascript (REST)",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const appId = '{YOUR_APP_ID}'\n\nconst requestOptions = {\n  method: 'GET',\n  headers: {\n    'Accept': 'application/json',\n    'Authorization': 'Key {YOUR_PERSONAL_TOKEN}'\n  }\n};\n\nfetch(`https://api.clarifai.com/v2/users/me/apps/${appId}/models/types?per_page=20&page=1`, requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log('error', error));\n")))),(0,a.kt)("h3",{id:"get-models"},"Get Models"),(0,a.kt)("p",null,"To get a list of all models including models you've created as well as ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/Clarifai/docs/tree/1c1d25cdd43190c38a2edb313297c0d566b3a0e3/api-guide/model/api-guide/model/public-models.md"},"Clarifai models"),":"),(0,a.kt)(i.Z,{mdxType:"Tabs"},(0,a.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\nimport java.util.List;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nMultiModelResponse listModelsResponse = stub.listModels(\n    ListModelsRequest.newBuilder().build()\n);\n\nif (listModelsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n    throw new RuntimeException("List models failed, status: " + listModelsResponse.getStatus());\n}\n\nList<Model> models = listModelsResponse.getModelsList();\nfor (Model model : models) {\n    System.out.println(model);\n}\n'))),(0,a.kt)(r.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nstub.ListModels(\n    {},\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("List models failed, status: " + response.status.description);\n        }\n\n        for (const model of response.models) {\n            console.log(JSON.stringify(model, null, 2));\n        }\n    }\n);\n'))),(0,a.kt)(r.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'# Insert here the initialization code as outlined on this page:\n# https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nlist_models_response = stub.ListModels(\n    service_pb2.ListModelsRequest(),\n    metadata=metadata\n)\n\nif list_models_response.status.code != status_code_pb2.SUCCESS:\n    print("There was an error with your request!")\n    print("\\tCode: {}".format(list_models_response.outputs[0].status.code))\n    print("\\tDescription: {}".format(list_models_response.outputs[0].status.description))\n    print("\\tDetails: {}".format(list_models_response.outputs[0].status.details))\n    raise Exception("List models failed, status: " + list_models_response.status.description)\n\nfor model in list_models_response.models:\n    print(model)\n'))),(0,a.kt)(r.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X GET \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  https://api.clarifai.com/v2/models\n'))),(0,a.kt)(r.Z,{value:"js_rest",label:"Javascript (REST)",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const appId = '{YOUR_APP_ID}'\n\nconst requestOptions = {\n  method: 'GET',\n  headers: {\n    'Accept': 'application/json',\n    'Authorization': 'Key {YOUR_PERSONAL_TOKEN}'\n  }\n};\n\nfetch(`https://api.clarifai.com/v2/users/me/apps/${appId}/models`, requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log('error', error));\n")))),(0,a.kt)("h3",{id:"get-model-by-id"},"Get Model By Id"),(0,a.kt)("p",null,"All models have unique Ids. You can get a specific model by its id:"),(0,a.kt)(i.Z,{mdxType:"Tabs"},(0,a.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nSingleModelResponse getModelResponse = stub.getModel(\n    GetModelRequest.newBuilder()\n        .setModelId("petsID")\n        .build()\n);\n\nif (getModelResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n    throw new RuntimeException("Get model failed, status: " + getModelResponse.getStatus());\n}\n\nModel model = getModelResponse.getModel();\nSystem.out.println(model);\n'))),(0,a.kt)(r.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nstub.GetModel(\n    {model_id: "petsID"},\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("List models failed, status: " + response.status.description);\n        }\n\n        const model = response.model;\n        console.log(JSON.stringify(model, null, 2));\n    }\n);\n'))),(0,a.kt)(r.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'# Insert here the initialization code as outlined on this page:\n# https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nget_model_response = stub.GetModel(\n    service_pb2.GetModelRequest(model_id="petsID"),\n    metadata=metadata\n)\n\nif get_model_response.status.code != status_code_pb2.SUCCESS:\n    print("There was an error with your request!")\n    print("\\tCode: {}".format(get_model_response.outputs[0].status.code))\n    print("\\tDescription: {}".format(get_model_response.outputs[0].status.description))\n    print("\\tDetails: {}".format(get_model_response.outputs[0].status.details))\n    raise Exception("Get model failed, status: " + get_model_response.status.description)\n\nmodel = get_model_response.model\nprint(model)\n'))),(0,a.kt)(r.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X GET \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  https://api.clarifai.com/v2/models/petsID\n'))),(0,a.kt)(r.Z,{value:"js_rest",label:"Javascript (REST)",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const appId = '{YOUR_APP_ID}'\nconst modelId = '{MODEL_ID}'\n\nconst requestOptions = {\n  method: 'GET',\n  headers: {\n    'Accept': 'application/json',\n    'Authorization': 'Key {YOUR_PERSONAL_TOKEN}'\n  }\n};\n\nfetch(`https://api.clarifai.com/v2/users/me/apps/${appId}/models/${modelId}`, requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log('error', error));\n")))),(0,a.kt)("h3",{id:"get-model-output-info-by-id"},"Get Model Output Info By Id"),(0,a.kt)("p",null,"The output info of a model lists what concepts it contains."),(0,a.kt)(i.Z,{mdxType:"Tabs"},(0,a.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nSingleModelResponse getModelOutputInfoResponse = stub.getModelOutputInfo(\n    GetModelRequest.newBuilder()\n        .setModelId("petsID")\n        .build()\n);\n\nif (getModelOutputInfoResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n    throw new RuntimeException("Get model output info failed, status: " + getModelOutputInfoResponse.getStatus());\n}\n\nModel model = getModelOutputInfoResponse.getModel();\nSystem.out.println(model);\n'))),(0,a.kt)(r.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nstub.GetModelOutputInfo(\n    {model_id: "petsID"},\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("List models failed, status: " + response.status.description);\n        }\n\n        const model = response.model;\n        console.log(JSON.stringify(model, null, 2));\n    }\n);\n'))),(0,a.kt)(r.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'# Insert here the initialization code as outlined on this page:\n# https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nget_model_response = stub.GetModelOutputInfo(\n    service_pb2.GetModelRequest(model_id="petsID"),\n    metadata=metadata\n)\n\nif get_model_response.status.code != status_code_pb2.SUCCESS:\n    print("There was an error with your request!")\n    print("\\tCode: {}".format(get_model_response.outputs[0].status.code))\n    print("\\tDescription: {}".format(get_model_response.outputs[0].status.description))\n    print("\\tDetails: {}".format(get_model_response.outputs[0].status.details))\n    raise Exception("Get model failed, status: " + get_model_response.status.description)\n\nmodel = get_model_response.model\nprint(model)\n'))),(0,a.kt)(r.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X GET \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  https://api.clarifai.com/v2/models/petsID/output_info\n'))),(0,a.kt)(r.Z,{value:"js_rest",label:"Javascript (REST)",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const appId = '{YOUR_APP_ID}'\nconst modelId = '{MODEL_ID}'\n\nconst requestOptions = {\n  method: 'GET',\n  headers: {\n    'Accept': 'application/json',\n    'Authorization': 'Key {YOUR_PERSONAL_TOKEN}'\n  }\n};\n\nfetch(`https://api.clarifai.com/v2/users/me/apps/${appId}/models/${modelId}/output_info`, requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log('error', error));\n")))),(0,a.kt)("h3",{id:"list-model-versions"},"List Model Versions"),(0,a.kt)("p",null,"Every time you train a model, it creates a new version. You can list all the versions created."),(0,a.kt)(i.Z,{mdxType:"Tabs"},(0,a.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\nimport java.util.List;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nMultiModelVersionResponse listModelVersionsResponse = stub.listModelVersions(\n    ListModelVersionsRequest.newBuilder()\n        .setModelId("petsID")\n        .build()\n);\n\nif (listModelVersionsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n    throw new RuntimeException("List model versions failed, status: " + listModelVersionsResponse.getStatus());\n}\n\nList<ModelVersion> modelVersions = listModelVersionsResponse.getModelVersionsList();\nfor (ModelVersion modelVersion : modelVersions) {\n    System.out.println(modelVersion);\n}\n'))),(0,a.kt)(r.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nstub.ListModelVersions(\n    {model_id: "petsID"},\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("List model versions failed, status: " + response.status.description);\n        }\n\n        for (const model_version of response.model_versions) {\n            console.log(JSON.stringify(model_version, null, 2));\n        }\n    }\n);\n'))),(0,a.kt)(r.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'# Insert here the initialization code as outlined on this page:\n# https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nlist_model_versions_response = stub.ListModelVersions(\n    service_pb2.ListModelVersionsRequest(\n        model_id="petsID"\n    ),\n    metadata=metadata\n)\n\nif list_model_versions_response.status.code != status_code_pb2.SUCCESS:\n    print("There was an error with your request!")\n    print("\\tCode: {}".format(list_model_versions_response.outputs[0].status.code))\n    print("\\tDescription: {}".format(list_model_versions_response.outputs[0].status.description))\n    print("\\tDetails: {}".format(list_model_versions_response.outputs[0].status.details))\n    raise Exception("List model versions failed, status: " + list_model_versions_response.status.description)\n\nfor model_version in list_model_versions_response.model_versions:\n    print(model_version)\n'))),(0,a.kt)(r.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X GET \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  https://api.clarifai.com/v2/models/petsID/versions\n'))),(0,a.kt)(r.Z,{value:"js_rest",label:"Javascript (REST)",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const appId = '{YOUR_APP_ID}'\nconst modelId = '{MODEL_ID}'\n\nconst requestOptions = {\n  method: 'GET',\n  headers: {\n    'Accept': 'application/json',\n    'Authorization': 'Key {YOUR_PERSONAL_TOKEN}'\n  }\n};\n\nfetch(`https://api.clarifai.com/v2/users/me/apps/${appId}/models/${modelId}/versions`, requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log('error', error));\n")))),(0,a.kt)("h3",{id:"get-model-version-by-id"},"Get Model Version By Id"),(0,a.kt)("p",null,"To get a specific model version, you must provide the model","_","id as well as the version","_","id. You can inspect the model version status to determine if your model is trained or still training."),(0,a.kt)(i.Z,{mdxType:"Tabs"},(0,a.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\n\nSingleModelVersionResponse getModelVersionResponse = stub.getModelVersion(\n    GetModelVersionRequest.newBuilder()\n        .setModelId("petsID")\n        .setVersionId("{YOUR_MODEL_VERSION_ID}")\n        .build()\n);\n\nif (getModelVersionResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n    throw new RuntimeException("Get model version failed, status: " + getModelVersionResponse.getStatus());\n}\n\nModelVersion modelVersion = getModelVersionResponse.getModelVersion();\nSystem.out.println(modelVersion);\n'))),(0,a.kt)(r.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nstub.GetModelVersion(\n    {model_id: "petsID", version_id: "{YOUR_MODEL_VERSION_ID}"},\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Get model version failed, status: " + response.status.description);\n        }\n\n        const model_version = response.model_version;\n        console.log(JSON.stringify(model_version, null, 2));\n    }\n);\n'))),(0,a.kt)(r.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'# Insert here the initialization code as outlined on this page:\n# https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nget_model_version_response = stub.GetModelVersion(\n    service_pb2.GetModelVersionRequest(\n        model_id="petsID",\n        version_id="{YOUR_MODEL_VERSION_ID}"\n    ),\n    metadata=metadata\n)\n\nif get_model_version_response.status.code != status_code_pb2.SUCCESS:\n    print("There was an error with your request!")\n    print("\\tCode: {}".format(get_model_version_response.outputs[0].status.code))\n    print("\\tDescription: {}".format(get_model_version_response.outputs[0].status.description))\n    print("\\tDetails: {}".format(get_model_version_response.outputs[0].status.details))\n    raise Exception("Get model version failed, status: " + get_model_version_response.status.description)\n\nmodel_version = get_model_version_response.model_version\nprint(model_version)\n'))),(0,a.kt)(r.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X GET \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  https://api.clarifai.com/v2/models/petsID/versions/{YOUR_MODEL_VERSION_ID}\n'))),(0,a.kt)(r.Z,{value:"js_rest",label:"Javascript (REST)",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const appId = '{YOUR_APP_ID}'\nconst modelId = '{MODEL_ID}'\nconst modelVersionId = '{MODEL_VERSION_ID}'\n\nconst requestOptions = {\n  method: 'GET',\n  headers: {\n    'Accept': 'application/json',\n    'Authorization': 'Key {YOUR_PERSONAL_TOKEN}'\n  }\n};\n\nfetch(`https://api.clarifai.com/v2/users/me/apps/${appId}/models/${modelId}/versions/${modelVersionId}`, requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log('error', error));\n")))),(0,a.kt)("h3",{id:"get-model-training-inputs"},"Get Model Training Inputs"),(0,a.kt)("p",null,"You can list all the inputs that were used to train the model."),(0,a.kt)(i.Z,{mdxType:"Tabs"},(0,a.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nMultiInputResponse listModelInputsResponse = stub.listModelInputs(\n    ListModelInputsRequest.newBuilder()\n        .setModelId("petsID")\n        .build()\n);\n\nif (listModelInputsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n    throw new RuntimeException("List model inputs failed, status: " + listModelInputsResponse.getStatus());\n}\n\nList<Input> inputs = listModelInputsResponse.getInputsList();\nfor (Input input : inputs) {\n    System.out.println(input);\n}\n'))),(0,a.kt)(r.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nstub.ListModelInputs(\n    {model_id: "petsID"},\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("List model inputs failed, status: " + response.status.description);\n        }\n\n        for (const input of response.inputs) {\n            console.log(JSON.stringify(input, null, 2));\n        }\n    }\n);\n'))),(0,a.kt)(r.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'# Insert here the initialization code as outlined on this page:\n# https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nlist_model_inputs_response = stub.ListModelInputs(\n    service_pb2.ListModelInputsRequest(model_id="petsID"),\n    metadata=metadata\n)\n\nif list_model_inputs_response.status.code != status_code_pb2.SUCCESS:\n    print("There was an error with your request!")\n    print("\\tCode: {}".format(list_model_inputs_response.outputs[0].status.code))\n    print("\\tDescription: {}".format(list_model_inputs_response.outputs[0].status.description))\n    print("\\tDetails: {}".format(list_model_inputs_response.outputs[0].status.details))\n    raise Exception("List model inputs failed, status: " + list_model_inputs_response.status.description)\n\nfor input_object in list_model_inputs_response.inputs:\n    print(input_object)\n'))),(0,a.kt)(r.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X GET \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  https://api.clarifai.com/v2/models/petsID/inputs\n'))),(0,a.kt)(r.Z,{value:"js_rest",label:"Javascript (REST)",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const appId = '{YOUR_APP_ID}'\nconst modelId = '{MODEL_ID}'\n\nconst requestOptions = {\n  method: 'GET',\n  headers: {\n    'Accept': 'application/json',\n    'Authorization': 'Key {YOUR_PERSONAL_TOKEN}'\n  }\n};\n\nfetch(`https://api.clarifai.com/v2/users/me/apps/${appId}/models/${modelId}/inputs`, requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log('error', error));\n")))),(0,a.kt)("h3",{id:"get-model-training-inputs-by-version"},"Get Model Training Inputs By Version"),(0,a.kt)("p",null,"You can also list all the inputs that were used to train a specific model version."),(0,a.kt)(i.Z,{mdxType:"Tabs"},(0,a.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\nimport java.util.List;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nMultiInputResponse listModelInputsResponse = stub.listModelInputs(\n    ListModelInputsRequest.newBuilder()\n        .setModelId("petsID")\n        .setVersionId("{YOUR_MODEL_VERSION_ID}")\n        .build()\n);\n\nif (listModelInputsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n    throw new RuntimeException("List model inputs failed, status: " + listModelInputsResponse.getStatus());\n}\n\nList<Input> inputs = listModelInputsResponse.getInputsList();\nfor (Input input : inputs) {\n    System.out.println(input);\n}\n'))),(0,a.kt)(r.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nstub.ListModelInputs(\n    {\n        model_id: "petsID",\n        version_id: "{YOUR_MODEL_VERSION_ID}"\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("List model inputs failed, status: " + response.status.description);\n        }\n\n        for (const input of response.inputs) {\n            console.log(JSON.stringify(input, null, 2));\n        }\n    }\n);\n'))),(0,a.kt)(r.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'# Insert here the initialization code as outlined on this page:\n# https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nlist_model_inputs_response = stub.ListModelInputs(\n    service_pb2.ListModelInputsRequest(\n        model_id="petsID",\n        version_id="{YOUR_MODEL_VERSION_ID}"\n    ),\n    metadata=metadata\n)\n\nif list_model_inputs_response.status.code != status_code_pb2.SUCCESS:\n    print("There was an error with your request!")\n    print("\\tCode: {}".format(list_model_inputs_response.outputs[0].status.code))\n    print("\\tDescription: {}".format(list_model_inputs_response.outputs[0].status.description))\n    print("\\tDetails: {}".format(list_model_inputs_response.outputs[0].status.details))\n    raise Exception("List model inputs failed, status: " + list_model_inputs_response.status.description)\n\nfor input_object in list_model_inputs_response.inputs:\n    print(input_object)\n'))),(0,a.kt)(r.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X GET \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  https://api.clarifai.com/v2/models/petsID/versions/{YOUR_MODEL_VERSION_ID}/inputs\n'))),(0,a.kt)(r.Z,{value:"js_rest",label:"Javascript (REST)",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const appId = '{YOUR_APP_ID}'\nconst modelId = '{MODEL_ID}'\nconst modelVersionId = '{MODEL_VERSION_ID}'\n\nconst requestOptions = {\n  method: 'GET',\n  headers: {\n    'Accept': 'application/json',\n    'Authorization': 'Key {YOUR_PERSONAL_TOKEN}'\n  }\n};\n\nfetch(`https://api.clarifai.com/v2/users/me/apps/${appId}/models/${modelId}/versions/${modelVersionId}/inputs`, requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log('error', error));\n")))),(0,a.kt)("h3",{id:"delete-a-model"},"Delete A Model"),(0,a.kt)("p",null,"You can delete a model using the model","_","id."),(0,a.kt)(i.Z,{mdxType:"Tabs"},(0,a.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nBaseResponse deleteModelResponse = stub.deleteModel(\n    DeleteModelRequest.newBuilder()\n        .setModelId("petsID")\n        .build()\n);\n\nif (deleteModelResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n    throw new RuntimeException("Delete model failed, status: " + deleteModelResponse.getStatus());\n}\n'))),(0,a.kt)(r.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nstub.DeleteModel(\n    {model_id: "petsID"},\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Delete model failed, status: " + response.status.description);\n        }\n    }\n);\n'))),(0,a.kt)(r.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'# Insert here the initialization code as outlined on this page:\n# https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\ndelete_model_response = stub.DeleteModel(\n    service_pb2.DeleteModelRequest(model_id="petsID"),\n    metadata=metadata\n)\n\nif delete_model_response.status.code != status_code_pb2.SUCCESS:\n    print("There was an error with your request!")\n    print("\\tCode: {}".format(delete_model_response.outputs[0].status.code))\n    print("\\tDescription: {}".format(delete_model_response.outputs[0].status.description))\n    print("\\tDetails: {}".format(delete_model_response.outputs[0].status.details))\n    raise Exception("Delete model failed, status: " + delete_model_response.status.description)\n'))),(0,a.kt)(r.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X DELETE \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  https://api.clarifai.com/v2/models/petsID\n'))),(0,a.kt)(r.Z,{value:"js_rest",label:"Javascript (REST)",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const appId = '{YOUR_APP_ID}'\nconst modelId = '{MODEL_ID}'\n\nconst requestOptions = {\n  method: 'DELETE',\n  headers: {\n    'Accept': 'application/json',\n    'Authorization': 'Key {YOUR_PERSONAL_TOKEN}'\n  }\n};\n\nfetch(`https://api.clarifai.com/v2/users/me/apps/${appId}/models/${modelId}`, requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log('error', error));\n")))),(0,a.kt)("h3",{id:"delete-a-model-version"},"Delete A Model Version"),(0,a.kt)("p",null,"You can also delete a specific version of a model with the model","_","id and version","_","id."),(0,a.kt)(i.Z,{mdxType:"Tabs"},(0,a.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nBaseResponse deleteModelVersionResponse = stub.deleteModelVersion(\n    DeleteModelVersionRequest.newBuilder()\n        .setModelId("petsID")\n        .setVersionId("{YOUR_MODEL_VERSION_ID}")\n        .build()\n);\n\nif (deleteModelVersionResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n    throw new RuntimeException("Delete model version failed, status: " + deleteModelVersionResponse.getStatus());\n}\n'))),(0,a.kt)(r.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nstub.DeleteModelVersion(\n    {\n        model_id: "petsID",\n        version_id: "{YOUR_MODEL_VERSION_ID}"\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Delete model version failed, status: " + response.status.description);\n        }\n    }\n);\n'))),(0,a.kt)(r.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'# Insert here the initialization code as outlined on this page:\n# https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\ndelete_model_version_response = stub.DeleteModelVersion(\n    service_pb2.DeleteModelVersionRequest(\n        model_id="petsID",\n        version_id="{YOUR_MODEL_VERSION_ID}"\n    ),\n    metadata=metadata\n)\n\nif delete_model_version_response.status.code != status_code_pb2.SUCCESS:\n    print("There was an error with your request!")\n    print("\\tCode: {}".format(delete_model_version_response.outputs[0].status.code))\n    print("\\tDescription: {}".format(delete_model_version_response.outputs[0].status.description))\n    print("\\tDetails: {}".format(delete_model_version_response.outputs[0].status.details))\n    raise Exception("Delete model version failed, status: " + delete_model_version_response.status.description)\n'))),(0,a.kt)(r.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X DELETE \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  https://api.clarifai.com/v2/models/petsID/versions/{YOUR_MODEL_VERSION_ID}\n'))),(0,a.kt)(r.Z,{value:"js_rest",label:"Javascript (REST)",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const appId = '{YOUR_APP_ID}'\nconst modelId = '{MODEL_ID}'\nconst modelVersionId = '{MODEL_VERSION_ID}'\n\nconst requestOptions = {\n  method: 'DELETE',\n  headers: {\n    'Accept': 'application/json',\n    'Authorization': 'Key {YOUR_PERSONAL_TOKEN}'\n  }\n};\n\nfetch(`https://api.clarifai.com/v2/users/me/apps/${appId}/models/${modelId}/versions/${modelVersionId}`, requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log('error', error));\n")))),(0,a.kt)("h3",{id:"delete-all-models"},"Delete All Models"),(0,a.kt)("p",null,"If you would like to delete all models associated with an application, you can also do that. Please proceed with caution as these cannot be recovered."),(0,a.kt)(i.Z,{mdxType:"Tabs"},(0,a.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nBaseResponse deleteModelsResponse = stub.deleteModels(\n    DeleteModelsRequest.newBuilder()\n        .setDeleteAll(true)\n        .build()\n);\n\nif (deleteModelsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n    throw new RuntimeException("Delete models failed, status: " + deleteModelsResponse.getStatus());\n}\n'))),(0,a.kt)(r.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nstub.DeleteModels(\n    {delete_all: true},\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Delete models failed, status: " + response.status.description);\n        }\n    }\n);\n'))),(0,a.kt)(r.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'# Insert here the initialization code as outlined on this page:\n# https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\ndelete_models_response = stub.DeleteModels(\n    service_pb2.DeleteModelsRequest(delete_all=True),\n    metadata=metadata\n)\n\nif delete_models_response.status.code != status_code_pb2.SUCCESS:\n    print("There was an error with your request!")\n    print("\\tCode: {}".format(delete_models_response.outputs[0].status.code))\n    print("\\tDescription: {}".format(delete_models_response.outputs[0].status.description))\n    print("\\tDetails: {}".format(delete_models_response.outputs[0].status.details))\n    raise Exception("Delete models failed, status: " + delete_models_response.status.description)\n'))),(0,a.kt)(r.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X DELETE \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  https://api.clarifai.com/v2/models/\n'))),(0,a.kt)(r.Z,{value:"js_rest",label:"Javascript (REST)",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const appId = '{YOUR_APP_ID}'\n\nconst requestOptions = {\n  method: 'DELETE',\n  headers: {\n    'Accept': 'application/json',\n    'Authorization': 'Key {YOUR_PERSONAL_TOKEN}'\n  }\n};\n\nfetch(`https://api.clarifai.com/v2/users/me/apps/${appId}/models`, requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log('error', error));\n")))),(0,a.kt)("h3",{id:"train-a-model"},"Train A Model"),(0,a.kt)("p",null,"When you train a model, you are telling the system to look at successfully indexed images with concepts you've provided and learn from them. This train operation is asynchronous. It may take a few seconds for your model to be fully trained and ready."),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Note: you can repeat this operation as often as you like. By adding more images with concepts and training, you can get the model to predict exactly how you want it to.")),(0,a.kt)(i.Z,{mdxType:"Tabs"},(0,a.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nSingleModelResponse postModelVersionsResponse = stub.postModelVersions(\n    PostModelVersionsRequest.newBuilder()\n        .setModelId("petsID")\n        .build()\n);\n\nif (postModelVersionsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n  throw new RuntimeException("Post model versions failed, status: " + postModelVersionsResponse.getStatus());\n}\n\nString modelVersionId = postModelVersionsResponse.getModel().getModelVersion().getId();\nSystem.out.println("New model version ID: " + modelVersionId);\n'))),(0,a.kt)(r.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nstub.PostModelVersions(\n    {model_id: "petsID"},\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post model versions failed, status: " + response.status.description);\n        }\n    }\n);\n'))),(0,a.kt)(r.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'# Insert here the initialization code as outlined on this page:\n# https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\npost_model_versions = stub.PostModelVersions(\n    service_pb2.PostModelVersionsRequest(\n        model_id="petsID"\n    ),\n    metadata=metadata\n)\n\nif post_model_versions.status.code != status_code_pb2.SUCCESS:\n    print("There was an error with your request!")\n    print("\\tCode: {}".format(post_model_versions.outputs[0].status.code))\n    print("\\tDescription: {}".format(post_model_versions.outputs[0].status.description))\n    print("\\tDetails: {}".format(post_model_versions.outputs[0].status.details))\n    raise Exception("Post model versions failed, status: " + post_model_versions.status.description)\n'))),(0,a.kt)(r.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  https://api.clarifai.com/v2/models/petsID/versions\n'))),(0,a.kt)(r.Z,{value:"js_rest",label:"Javascript (REST)",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const appId = '{YOUR_APP_ID}'\nconst modelId = '{MODEL_ID}'\n\nconst requestOptions = {\n  method: 'POST',\n  headers: {\n    'Accept': 'application/json',\n    'Authorization': 'Key {YOUR_PERSONAL_TOKEN}'\n  }\n};\n\nfetch(`https://api.clarifai.com/v2/users/me/apps/${appId}/models/${modelId}/versions`, requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log('error', error));\n")))),(0,a.kt)("h2",{id:"predict-with-a-model"},"Predict With A Model"),(0,a.kt)("p",null,"Once you have trained a model you are ready to use your new model to get predictions. The predictions returned will only contain the concepts that you told it to see."),(0,a.kt)(i.Z,{mdxType:"Tabs"},(0,a.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nMultiOutputResponse postModelOutputsResponse = stub.postModelOutputs(\n    PostModelOutputsRequest.newBuilder()\n        .setModelId("petsID")\n        .setVersionId("{YOUR_MODEL_VERSION_ID}")  // Optional. Defaults to the latest version.\n        .addInputs(\n            Input.newBuilder().setData(\n                Data.newBuilder().setImage(\n                    Image.newBuilder().setUrl("https://samples.clarifai.com/metro-north.jpg")\n                )\n            )\n        )\n        .build()\n);\n\nif (postModelOutputsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n  throw new RuntimeException("Post model outputs failed, status: " + postModelOutputsResponse.getStatus());\n}\n\n// Since we have one input, one output will exist here.\nOutput output = postModelOutputsResponse.getOutputs(0);\n\nSystem.out.println("Predicted concepts:");\nfor (Concept concept : output.getData().getConceptsList()) {\n    System.out.printf("%s %.2f%n", concept.getName(), concept.getValue());\n}\n'))),(0,a.kt)(r.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nstub.PostModelOutputs(\n    {\n        model_id: "petsID",\n        version_id: "{YOUR_MODEL_VERSION_ID}",  // This is optional. Defaults to the latest model version.\n        inputs: [\n            {data: {image: {url: "https://samples.clarifai.com/metro-north.jpg"}}}\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post model outputs failed, status: " + response.status.description);\n        }\n\n        // Since we have one input, one output will exist here.\n        const output = response.outputs[0];\n\n        console.log("Predicted concepts:");\n        for (const concept of output.data.concepts) {\n            console.log(concept.name + " " + concept.value);\n        }\n    }\n);\n'))),(0,a.kt)(r.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'# Insert here the initialization code as outlined on this page:\n# https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\npost_model_outputs_response = stub.PostModelOutputs(\n    service_pb2.PostModelOutputsRequest(\n        model_id="petsID",\n        version_id="{YOUR_MODEL_VERSION_ID}",  # This is optional. Defaults to the latest model version.\n        inputs=[\n            resources_pb2.Input(\n                data=resources_pb2.Data(\n                    image=resources_pb2.Image(\n                        url="https://samples.clarifai.com/metro-north.jpg"\n                    )\n                )\n            )\n        ]\n    ),\n    metadata=metadata\n)\nif post_model_outputs_response.status.code != status_code_pb2.SUCCESS:\n    print("There was an error with your request!")\n    print("\\tCode: {}".format(post_model_outputs_response.outputs[0].status.code))\n    print("\\tDescription: {}".format(post_model_outputs_response.outputs[0].status.description))\n    print("\\tDetails: {}".format(post_model_outputs_response.outputs[0].status.details))\n    raise Exception("Post model outputs failed, status: " + post_model_outputs_response.status.description)\n\n# Since we have one input, one output will exist here.\noutput = post_model_outputs_response.outputs[0]\n\nprint("Predicted concepts:")\nfor concept in output.data.concepts:\n    print("%s %.2f" % (concept.name, concept.value))\n'))),(0,a.kt)(r.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'\n  {\n    "inputs": [\n      {\n        "data": {\n          "image": {\n            "url": "https://samples.clarifai.com/puppy.jpeg"\n          }\n        }\n      }\n    ]\n  }\'\\\n  https://api.clarifai.com/v2/models/petsID/outputs\n\n# Model version defaults to latest. If you want to specify the model version, use this URL:\n# https://api.clarifai.com/v2/models/petsID/versions/{YOUR_MODEL_VERSION_ID}/outputs\n'))),(0,a.kt)(r.Z,{value:"js_rest",label:"Javascript (REST)",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'const raw = JSON.stringify({\n  "user_app_id": {\n        "user_id": "{YOUR_USER_ID}",\n        "app_id": "{YOUR_APP_ID}"\n    },\n  "inputs": [\n    {\n      "data": {\n        "image": {\n          "url": "https://samples.clarifai.com/puppy.jpeg"\n        }\n      }\n    }\n  ]\n});\n\nconst requestOptions = {\n  method: \'POST\',\n  headers: {\n    \'Accept\': \'application/json\',\n    \'Authorization\': \'Key {YOUR_PERSONAL_TOKEN}\'\n  },\n  body: raw\n};\n\n// NOTE: MODEL_VERSION_ID is optional, you can also call prediction with the MODEL_ID only\n// https://api.clarifai.com/v2/models/{YOUR_MODEL_ID}/outputs\n// this will default to the latest version_id\n\nfetch("https://api.clarifai.com/v2/models/petsID/versions/{MODEL_VERSION_ID}/outputs", requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(JSON.parse(result, null, 2).outputs[0].data))\n  .catch(error => console.log(\'error\', error));\n')))),(0,a.kt)("h3",{id:"search-models-by-name-and-type"},"Search Models By Name And Type"),(0,a.kt)("p",null,"You can search all your models by name and type of model."),(0,a.kt)(i.Z,{mdxType:"Tabs"},(0,a.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\nimport java.util.List;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nMultiModelResponse postModelsSearchesResponse = stub.postModelsSearches(\n    PostModelsSearchesRequest.newBuilder()\n        .setModelQuery(\n            ModelQuery.newBuilder()\n                .setName("gen*")\n                .setType("concept")\n        )\n        .build()\n);\n\nif (postModelsSearchesResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n    throw new RuntimeException("Post models searches failed, status: " + postModelsSearchesResponse.getStatus());\n}\n\nList<Model> models = postModelsSearchesResponse.getModelsList();\nfor (Model model : models) {\n    System.out.println(model);\n}\n'))),(0,a.kt)(r.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nstub.PostModelsSearches(\n    {\n        model_query: {\n            name: "gen*",\n            type: "concept"\n        }\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post model searches failed, status: " + response.status.description);\n        }\n\n        const models = response.models;\n        for (const model of models) {\n            console.log(JSON.stringify(model, null, 2));\n        }\n    }\n);\n'))),(0,a.kt)(r.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'# Insert here the initialization code as outlined on this page:\n# https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\npost_models_searches_response = stub.PostModelsSearches(\n    service_pb2.PostModelsSearchesRequest(\n        model_query=resources_pb2.ModelQuery(\n            name="gen*",\n            type="concept"\n        )\n    ),\n    metadata=metadata\n)\n\nif post_models_searches_response.status.code != status_code_pb2.SUCCESS:\n    print("There was an error with your request!")\n    print("\\tCode: {}".format(post_models_searches_response.outputs[0].status.code))\n    print("\\tDescription: {}".format(post_models_searches_response.outputs[0].status.description))\n    print("\\tDetails: {}".format(post_models_searches_response.outputs[0].status.details))\n    raise Exception("Post models searches failed, status: " + post_models_searches_response.status.description)\n\nfor model in post_models_searches_response.models:\n    print(model)\n'))),(0,a.kt)(r.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'\n  {\n    "model_query": {\n      "name": "gen*",\n      "type": "concept"\n    }\n  }\'\\\n  https://api.clarifai.com/v2/models/searches\n'))),(0,a.kt)(r.Z,{value:"js_rest",label:"Javascript (REST)",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'const raw = JSON.stringify({\n  "user_app_id": {\n        "user_id": "{YOUR_USER_ID}",\n        "app_id": "{YOUR_APP_ID}"\n    },\n  "model_query": {\n    "name": "gen*",\n    "type": "concept"\n  }\n});\n\nconst requestOptions = {\n  method: \'POST\',\n  headers: {\n    \'Accept\': \'application/json\',\n    \'Authorization\': \'Key {YOUR_PERSONAL_TOKEN}\'\n  },\n  body: raw\n};\n\nfetch("https://api.clarifai.com/v2/models/searches", requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log(\'error\', error));\n')))))}h.isMDXComponent=!0}}]);
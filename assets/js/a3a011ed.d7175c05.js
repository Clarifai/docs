"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[8122],{3905:function(e,n,t){t.d(n,{Zo:function(){return l},kt:function(){return d}});var a=t(67294);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,a,s=function(e,n){if(null==e)return{};var t,a,s={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var o=a.createContext({}),p=function(e){var n=a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},l=function(e){var n=p(e.components);return a.createElement(o.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},h=a.forwardRef((function(e,n){var t=e.components,s=e.mdxType,r=e.originalType,o=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),h=p(t),d=s,m=h["".concat(o,".").concat(d)]||h[d]||u[d]||r;return t?a.createElement(m,i(i({ref:n},l),{},{components:t})):a.createElement(m,i({ref:n},l))}));function d(e,n){var t=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var r=t.length,i=new Array(r);i[0]=h;var c={};for(var o in n)hasOwnProperty.call(n,o)&&(c[o]=n[o]);c.originalType=e,c.mdxType="string"==typeof e?e:s,i[1]=c;for(var p=2;p<r;p++)i[p]=t[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}h.displayName="MDXCreateElement"},57160:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return c},contentTitle:function(){return o},metadata:function(){return p},toc:function(){return l},default:function(){return g}});var a=t(87462),s=t(63366),r=(t(67294),t(3905)),i=["components"],c={description:"Search your data based on concepts or visual similarity",sidebar_position:3},o="Rank",p={unversionedId:"api-guide/search/legacy-search/rank",id:"api-guide/search/legacy-search/rank",title:"Rank",description:"Search your data based on concepts or visual similarity",source:"@site/docs/api-guide/search/legacy-search/rank.md",sourceDirName:"api-guide/search/legacy-search",slug:"/api-guide/search/legacy-search/rank",permalink:"/docs-new/api-guide/search/legacy-search/rank",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/api-guide/search/legacy-search/rank.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{description:"Search your data based on concepts or visual similarity",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Filter",permalink:"/docs-new/api-guide/search/legacy-search/filter"},next:{title:"Saved Searches",permalink:"/docs-new/api-guide/search/legacy-search/saved_searches"}},l=[{value:"Search By Concept",id:"search-by-concept",children:[{value:"By clarifai/main App Concepts",id:"by-clarifaimain-app-concepts",children:[],level:3},{value:"By Custom Concepts",id:"by-custom-concepts",children:[],level:3},{value:"By clarifai/main and custom concepts",id:"by-clarifaimain-and-custom-concepts",children:[],level:3},{value:"By concept in another language",id:"by-concept-in-another-language",children:[],level:3}],level:2},{value:"By Image",id:"by-image",children:[{value:"By Url",id:"by-url",children:[],level:3}],level:2}],u=function(e){return function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",n)}},h=u("Tabs"),d=u("TabItem"),m={toc:l};function g(e){var n=e.components,t=(0,s.Z)(e,i);return(0,r.kt)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"rank"},"Rank"),(0,r.kt)("p",null,"Rank Order your search results with the intuitive insights of AI. Your model can identify concepts in your data and rank your search results by how confident it is that a given concept is present. You can even rank search results by how similar one input is to another input."),(0,r.kt)("h2",{id:"search-by-concept"},"Search By Concept"),(0,r.kt)("p",null,"Once your images are indexed, you can search for them by concept."),(0,r.kt)("h3",{id:"by-clarifaimain-app-concepts"},"By clarifai/main App Concepts"),(0,r.kt)("p",null,"When you add an input, it automatically gets predictions from the models in your default which are typically models from the clarifai/main app such as the general model. You can search by those predictions."),(0,r.kt)(h,{mdxType:"Tabs"},(0,r.kt)(d,{value:"grpc_java",label:"gRPC Java",mdxType:"TabItem"},"```java import com.clarifai.grpc.api.*; import com.clarifai.grpc.api.status.*;",(0,r.kt)("p",null,"// Insert here the initialization code as outlined on this page:\n// ",(0,r.kt)("a",{parentName:"p",href:"https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions"},"https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions")),(0,r.kt)("p",null,'MultiSearchResponse postSearchesResponse = stub.postSearches(\nPostSearchesRequest.newBuilder().setQuery(\nQuery.newBuilder().addAnds(\nAnd.newBuilder().setOutput( // Setting Output indicates we search for images that have the concept(s)\n// which were predicted by the General model.\nOutput.newBuilder().setData(\nData.newBuilder().addConcepts(  // You can search by multiple concepts.\nConcept.newBuilder()\n.setName("people")  // You could search by concept ID as well.\n.setValue(1f)  // Value of 0 will search for images that don\'t have the concept.\n)\n)\n)\n)\n)\n.build()\n);'),(0,r.kt)("p",null,'if (postSearchesResponse.getStatus().getCode() != StatusCode.SUCCESS) {\nthrow new RuntimeException("Post searches failed, status: " + postSearchesResponse.getStatus());\n}'),(0,r.kt)("p",null,'System.out.println("Found inputs " + postSearchesResponse.getHitsCount() + ":");\nfor (Hit hit : postSearchesResponse.getHitsList()) {\nSystem.out.printf("\\tScore %.2f for %s\\n", hit.getScore(), hit.getInput().getId());\n}'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'</TabItem>\n\n<TabItem value="grpc_nodejs" label="gRPC NodeJS">\n```javascript\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nstub.PostSearches(\n    {\n        query: {\n            ands: [\n                {\n                    output: {  // Setting Output indicates we search for images that have the concept(s)\n                               // which were predicted by the General model.\n                        data: {\n                            concepts: [  // You can search by multiple concepts.\n                                {\n                                    name: "people",  // You could search by concept ID as well.\n                                    value: 1  // Value of 0 will search for images that don\'t have the concept\n                                }\n                            ]\n                        }\n                    }\n                }\n            ]\n        }\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post searches failed, status: " + response.status.description);\n        }\n\n        console.log("Found inputs:");\n        for (const hit of response.hits) {\n            console.log("\\tScore " + hit.score + " for " + hit.input.id);\n        }\n    }\n);\n'))),(0,r.kt)(d,{value:"grpc_python",label:"gRPC Python",mdxType:"TabItem"},"```python # Insert here the initialization code as outlined on this page: # https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions",(0,r.kt)("p",null,"post_searches_response = stub.PostSearches(\nservice_pb2.PostSearchesRequest(\nquery=resources_pb2.Query(\nands=[\nresources_pb2.And(\noutput=resources_pb2.Output( # Setting Output indicates we search for images that have the concept(s)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'                                             # which were predicted by the General model.\n                    data=resources_pb2.Data(\n                        concepts=[  # You can search by multiple concepts.\n                            resources_pb2.Concept(\n                                name="people",  # You could search by concept ID as well.\n                                value=1  # Value of 0 will search for images that don\'t have the concept.\n                            )\n                        ]\n                    )\n                )\n            )\n        ]\n    )\n),\nmetadata=metadata\n')),(0,r.kt)("p",null,")"),(0,r.kt)("p",null,'if post_searches_response.status.code != status_code_pb2.SUCCESS:\nraise Exception("Post searches failed, status: " + post_searches_response.status.description)'),(0,r.kt)("p",null,'print("Found inputs:")\nfor hit in post_searches_response.hits:\nprint("\\tScore %.2f for %s" % (hit.score, hit.input.id))'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"</TabItem>\n\n<TabItem value=\"javascript\" label=\"Javascript\">\n```javascript\napp.inputs.search([\n  {\n    concept: {\n      name: 'cat'\n    }\n  },\n  {\n    concept: {\n      name: 'dog'\n    }\n  }\n]).then(\n  function(response) {\n    // do something with response\n  },\n  function(err) {\n    // there was an error\n  }\n);\n"))),(0,r.kt)(d,{value:"python",label:"Python",mdxType:"TabItem"},"```python from clarifai.rest import ClarifaiApp app = ClarifaiApp(api_key='YOUR_CLARIFAI_KEY')",(0,r.kt)("h1",{id:"search-by-single-concept-name"},"search by single concept name"),(0,r.kt)("p",null,"app.inputs.search_by_predicted_concepts(concept='cat')"),(0,r.kt)("h1",{id:"search-by-single-concept-id"},"search by single concept id"),(0,r.kt)("p",null,"app.inputs.search_by_predicted_concepts(concept_id='ai_mFqxrph2')"),(0,r.kt)("h1",{id:"search-by-multiple-concepts-with-name"},"search by multiple concepts with name"),(0,r.kt)("p",null,"app.inputs.search_by_predicted_concepts(concepts=","['cat', 'cute']",")"),(0,r.kt)("h1",{id:"search-by-multiple-concepts-with-ids"},"search by multiple concepts with ids"),(0,r.kt)("p",null,"app.inputs.search_by_predicted_concepts(concept_ids=","['ai_mFqxrph2', 'ai_4CRlSvbV']",")"),(0,r.kt)("h1",{id:"search-by-multiple-concepts-with-not-logic"},"search by multiple concepts with not logic"),(0,r.kt)("p",null,"app.inputs.search_by_predicted_concepts(concepts=","['cat', 'dog']",", values=","[True, False]",")"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'</TabItem>\n\n<TabItem value="java" label="Java">\n```java\n// Search concept by name\nclient.searchInputs(SearchClause.matchConcept(Concept.forName("cat")))\n    .getPage(1)\n    .executeSync();\n\n// Search concept by ID\nclient.searchInputs(SearchClause.matchConcept(Concept.forID("ai_mFqxrph2")))\n    .getPage(1)\n    .executeSync();\n\n// Search multiple concepts\nclient.searchInputs(SearchClause.matchConcept(Concept.forID("cat")))\n    .and(SearchClause.matchConcept(Concept.forID("cute")))\n    .getPage(1)\n    .executeSync();\n\n// Search NOT by concept\nclient.searchInputs(SearchClause.matchConcept(Concept.forID("cat").withValue(false)))\n    .getPage(1)\n    .executeSync();\n'))),(0,r.kt)(d,{value:"csharp",label:"C#",mdxType:"TabItem"},"```csharp using System.Threading.Tasks; using Clarifai.API; using Clarifai.DTOs.Searches;",(0,r.kt)("p",null,'namespace YourNamespace\n{\npublic class YourClassName\n{\npublic static async Task Main()\n{\nvar client = new ClarifaiClient("YOUR_API_KEY");'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'        // Search concept by name\n        await client.SearchInputs(SearchBy.ConceptName("cat"))\n            .Page(1)\n            .ExecuteAsync();\n\n        // Search concept by ID\n        await client.SearchInputs(SearchBy.ConceptID("cat"))\n            .Page(1)\n            .ExecuteAsync();\n\n        // Search multiple concepts\n        await client.SearchInputs(\n                SearchBy.ConceptID("cat"),\n                SearchBy.ConceptID("cute"))\n            .Page(1)\n            .ExecuteAsync();\n    }\n}\n')),(0,r.kt)("p",null,"}"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'</TabItem>\n\n<TabItem value="objective-c" label="Objective-C">\n```text\n// First create a search term with a concept you want to search.\nClarifaiConcept *conceptFromGeneralModel = [[ClarifaiConcept alloc] initWithConceptName:@"fast"];\nClarifaiSearchTerm *searchTerm = [ClarifaiSearchTerm searchByPredictedConcept:conceptFromGeneralModel];\n\n[app search:@[searchTerm] page:@1 perPage:@20 completion:^(NSArray<ClarifaiSearchResult *> *results, NSError *error) {\n  // Print output of first search result.\n  NSLog(@"inputID: %@", results[0].inputID);\n  NSLog(@"URL: %@", results[0].mediaURL);\n  NSLog(@"probability of input matching search query: %@", results[0].score);\n}];\n'))),(0,r.kt)(d,{value:"php",label:"PHP",mdxType:"TabItem"},"```php use Clarifai\\API\\ClarifaiClient; use Clarifai\\DTOs\\Searches\\SearchBy; use Clarifai\\DTOs\\Searches\\SearchInputsResult;",(0,r.kt)("p",null,"$client = new ClarifaiClient('YOUR_API_KEY');"),(0,r.kt)("p",null,"// Search concept by name\n$response = $client->searchInputs(SearchBy::conceptName('cat'))\n->executeSync();"),(0,r.kt)("p",null,"/",(0,r.kt)("em",{parentName:"p"},"\n// Search concept by ID\n$response = $client->searchInputs(SearchBy::conceptID('cat'))\n->executeSync();\n"),"/"),(0,r.kt)("p",null,"/",(0,r.kt)("em",{parentName:"p"},"\n// Search multiple concepts\n$response = $client->searchInputs(","[SearchBy::conceptID('cat'), SearchBy::conceptID('cute')]",")\n->executeSync();\n"),"/"),(0,r.kt)("p",null,'if ($response->isSuccessful()) {\necho "Response is successful.\\n";'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"/** @var SearchInputsResult $result */\n$result = $response->get();\n\nforeach ($result->searchHits() as $searchHit) {\n    echo $searchHit->input()->id() . ' ' . $searchHit->score() . \"\\n\";\n}\n")),(0,r.kt)("p",null,'} else {\necho "Response is not successful. Reason: \\n";\necho $response->status()->description() . "\\n";\necho $response->status()->errorDetails() . "\\n";\necho "Status code: " . $response->status()->statusCode();\n}'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'</TabItem>\n\n<TabItem value="curl" label="cURL">\n```text\n# Setting "output" indicates we search for images that have the concept(s) which were predicted by\n# the General model.\n#\n# Value of 0 will search for images that don\'t have the concept.\n#\n# Instead of "name" you can search by "id" as well.\n\ncurl -X POST \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'\n  {\n    "query": {\n      "ands": [\n        {\n          "output": {\n            "data": {\n              "concepts": [\n                {\n                  "name":"people",\n                  "value": 1\n                }\n              ]\n            }\n          }\n        }\n      ]\n    }\n  }\'\\\n  https://api.clarifai.com/v2/searches\n')))),(0,r.kt)("h3",{id:"by-custom-concepts"},"By Custom Concepts"),(0,r.kt)("p",null,"After you have ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/Clarifai/docs/tree/1c1d25cdd43190c38a2edb313297c0d566b3a0e3/api-guide/search/data-management/inputs.md#add-inputs-with-concepts"},"added inputs with concepts"),", you can search by those concepts."),(0,r.kt)(h,{mdxType:"Tabs"},(0,r.kt)(d,{value:"grpc_java",label:"gRPC Java",mdxType:"TabItem"},"```java import com.clarifai.grpc.api.*; import com.clarifai.grpc.api.status.*;",(0,r.kt)("p",null,"// Insert here the initialization code as outlined on this page:\n// ",(0,r.kt)("a",{parentName:"p",href:"https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions"},"https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions")),(0,r.kt)("p",null,'MultiSearchResponse postSearchesResponse = stub.postSearches(\nPostSearchesRequest.newBuilder().setQuery(\nQuery.newBuilder().addAnds(\nAnd.newBuilder().setInput( // Setting Input indicates we search for images that have the concept(s)\n// which we added to the input manually.\nInput.newBuilder().setData(\nData.newBuilder().addConcepts(  // You can search by multiple concepts.\nConcept.newBuilder()\n.setName("people")  // You could search by concept ID as well.\n.setValue(1f)  // Value of 0 will search for images that we marked not to have the concept.\n)\n)\n)\n)\n)\n.build()\n);'),(0,r.kt)("p",null,'if (postSearchesResponse.getStatus().getCode() != StatusCode.SUCCESS) {\nthrow new RuntimeException("Post searches failed, status: " + postSearchesResponse.getStatus());\n}'),(0,r.kt)("p",null,'System.out.println("Found inputs " + postSearchesResponse.getHitsCount() + ":");\nfor (Hit hit : postSearchesResponse.getHitsList()) {\nSystem.out.printf("\\tScore %.2f for %s\\n", hit.getScore(), hit.getInput().getId());\n}'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'</TabItem>\n\n<TabItem value="grpc_nodejs" label="gRPC NodeJS">\n```javascript\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nstub.PostSearches(\n    {\n        query: {\n            ands: [\n                {\n                    input: {  // Setting Input indicates we search for images that have the concept(s)\n                              // which we added to the input manually.\n                        data: {\n                            concepts: [  // You can search by multiple concepts.\n                                {\n                                    name: "people",  // You could search by concept ID as well.\n                                    value: 1  // Value of 0 will search for images that we marked not to have the concept.\n                                }\n                            ]\n                        }\n                    }\n                }\n            ]\n        }\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post searches failed, status: " + response.status.description);\n        }\n\n        console.log("Found inputs:");\n        for (const hit of response.hits) {\n            console.log("\\tScore " + hit.score + " for " + hit.input.id);\n        }\n    }\n);\n'))),(0,r.kt)(d,{value:"grpc_python",label:"gRPC Python",mdxType:"TabItem"},"```python # Insert here the initialization code as outlined on this page: # https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions",(0,r.kt)("p",null,"post_searches_response = stub.PostSearches(\nservice_pb2.PostSearchesRequest(\nquery=resources_pb2.Query(\nands=[\nresources_pb2.And(\ninput=resources_pb2.Input(  # Setting Input indicates we search for images that have the concept(s)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'                                            # which we added to the input manually.\n                    data=resources_pb2.Data(\n                        concepts=[  # You can search by multiple concepts.\n                            resources_pb2.Concept(\n                                name="people",  # You could search by concept ID as well.\n                                value=1  # Value of 0 will search for images that we marked not to have the concept.\n                            )\n                        ]\n                    )\n                )\n            )\n        ]\n    )\n),\nmetadata=metadata\n')),(0,r.kt)("p",null,")"),(0,r.kt)("p",null,'if post_searches_response.status.code != status_code_pb2.SUCCESS:\nraise Exception("Post searches failed, status: " + post_searches_response.status.description)'),(0,r.kt)("p",null,'print("Found inputs:")\nfor hit in post_searches_response.hits:\nprint("\\tScore %.2f for %s" % (hit.score, hit.input.id))'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"</TabItem>\n\n<TabItem value=\"javascript\" label=\"Javascript\">\n```javascript\napp.inputs.search([\n  {\n    concept: {\n      type: 'input',\n      name: 'cat'\n    }\n  },\n  {\n    concept: {\n      type: 'input',\n      name: 'dog'\n    }\n  }\n]).then(\n  function(response) {\n    // do something with response\n  },\n  function(err) {\n    // there was an error\n  }\n);\n"))),(0,r.kt)(d,{value:"python",label:"Python",mdxType:"TabItem"},"```python from clarifai.rest import ClarifaiApp app = ClarifaiApp(api_key='YOUR_CLARIFAI_KEY')",(0,r.kt)("h1",{id:"search-by-single-concept-name-1"},"search by single concept name"),(0,r.kt)("p",null,"app.inputs.search_by_annotated_concepts(concept='cat')"),(0,r.kt)("h1",{id:"search-by-single-concept-id-1"},"search by single concept id"),(0,r.kt)("p",null,"app.inputs.search_by_annotated_concepts(concept_id='ai_mFqxrph2')"),(0,r.kt)("h1",{id:"search-by-multiple-concepts-with-name-1"},"search by multiple concepts with name"),(0,r.kt)("p",null,"app.inputs.search_by_annotated_concepts(concepts=","['cat', 'cute']",")"),(0,r.kt)("h1",{id:"search-by-multiple-concepts-with-ids-1"},"search by multiple concepts with ids"),(0,r.kt)("p",null,"app.inputs.search_by_annotated_concepts(concept_ids=","['ai_mFqxrph2', 'ai_4CRlSvbV']",")"),(0,r.kt)("h1",{id:"search-by-multiple-concepts-with-not-logic-1"},"search by multiple concepts with not logic"),(0,r.kt)("p",null,"app.inputs.search_by_annotated_concepts(concepts=","['cat', 'dog']",", values=","[True, False]",")"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'</TabItem>\n\n<TabItem value="java" label="Java">\n```java\n// Search concept by name\nclient.searchInputs(SearchClause.matchUserTaggedConcept(Concept.forName("cat")))\n    .getPage(1)\n    .executeSync();\n\n// Search concept by ID\nclient.searchInputs(SearchClause.matchUserTaggedConcept(Concept.forID("ai_mFqxrph2")))\n    .getPage(1)\n    .executeSync();\n\n// Search multiple concepts\nclient.searchInputs(SearchClause.matchUserTaggedConcept(Concept.forID("cat")))\n    .and(SearchClause.matchUserTaggedConcept(Concept.forID("cute")))\n    .getPage(1)\n    .executeSync();\n\n// Search NOT by concept\nclient.searchInputs(SearchClause.matchUserTaggedConcept(Concept.forID("cat").withValue(false)))\n    .getPage(1)\n    .executeSync();\n'))),(0,r.kt)(d,{value:"csharp",label:"C#",mdxType:"TabItem"},"```csharp using System.Threading.Tasks; using Clarifai.API; using Clarifai.DTOs.Searches;",(0,r.kt)("p",null,'namespace YourNamespace\n{\npublic class YourClassName\n{\npublic static async Task Main()\n{\nvar client = new ClarifaiClient("YOUR_API_KEY");'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'        // Search concept by name\n        await client.SearchInputs(SearchBy.UserTaggedConceptName("cat")\n            )\n            .Page(1)\n            .ExecuteAsync();\n\n        // Search concept by ID\n        await client.SearchInputs(SearchBy.UserTaggedConceptID("ai_mFqxrph2")\n            )\n            .Page(1)\n            .ExecuteAsync();\n\n        // Search multiple concepts\n        await client.SearchInputs(\n                SearchBy.UserTaggedConceptID("cat"),\n                SearchBy.UserTaggedConceptID("cute"))\n            .Page(1)\n            .ExecuteAsync();\n    }\n}\n')),(0,r.kt)("p",null,"}"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'</TabItem>\n\n<TabItem value="objective-c" label="Objective-C">\n```text\n// If you have previously added inputs tagged with "dog", you can search for them by the same tag.\nClarifaiConcept *concept = [[ClarifaiConcept alloc] initWithConceptName:@"dog"];\nClarifaiSearchTerm *term = [ClarifaiSearchTerm searchInputsByConcept:concept];\n\n[app search:@[term] page:@1 perPage:@20 completion:^(NSArray<ClarifaiSearchResult *> *results, NSError *error) {\n  // Print output of first search result.\n  NSLog(@"inputID: %@", results[0].inputID);\n  NSLog(@"URL: %@", results[0].mediaURL);\n  NSLog(@"probability of input matching search query: %@", results[0].score);\n}];\n'))),(0,r.kt)(d,{value:"php",label:"PHP",mdxType:"TabItem"},"```php use Clarifai\\API\\ClarifaiClient; use Clarifai\\DTOs\\Searches\\SearchBy; use Clarifai\\DTOs\\Searches\\SearchInputsResult;",(0,r.kt)("p",null,"$client = new ClarifaiClient('YOUR_API_KEY');"),(0,r.kt)("p",null,"// Search concept by name\n$response = $client->searchInputs(SearchBy::userTaggedConceptName('cat'))\n->executeSync();"),(0,r.kt)("p",null,"/",(0,r.kt)("em",{parentName:"p"},"\n// Search concept by ID\n$response = $client->searchInputs(SearchBy::userTaggedConceptID('cat'))\n->executeSync();\n"),"/"),(0,r.kt)("p",null,"/",(0,r.kt)("em",{parentName:"p"},"\n// Search multiple concepts\n$response = $client->searchInputs(","[SearchBy::userTaggedConceptName('cat'),\nSearchBy::userTaggedConceptID('dog')]",")\n->executeSync();\n"),"/"),(0,r.kt)("p",null,'if ($response->isSuccessful()) {\necho "Response is successful.\\n";'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"/** @var SearchInputsResult $result */\n$result = $response->get();\n\nforeach ($result->searchHits() as $searchHit) {\n    echo $searchHit->input()->id() . ' ' . $searchHit->score() . \"\\n\";\n}\n")),(0,r.kt)("p",null,'} else {\necho "Response is not successful. Reason: \\n";\necho $response->status()->description() . "\\n";\necho $response->status()->errorDetails() . "\\n";\necho "Status code: " . $response->status()->statusCode();\n}'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'</TabItem>\n\n<TabItem value="curl" label="cURL">\n```text\n# Setting "input" indicates we search for images that have the concept(s) which we added to the\n# input manually.\n#\n# Value of 0 will search for images that don\'t have the concept.\n#\n# Instead of "name" you can search by "id" as well.\n\ncurl -X POST \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'\n  {\n    "query": {\n      "ands": [\n        {\n          "input": {\n            "data": {\n              "concepts": [\n                {\n                  "name":"people",\n                  "value": 1\n                }\n              ]\n            }\n          }\n        }\n      ]\n    }\n  }\'\\\n  https://api.clarifai.com/v2/searches\n')))),(0,r.kt)("h3",{id:"by-clarifaimain-and-custom-concepts"},"By clarifai/main and custom concepts"),(0,r.kt)("p",null,"You can combine a search to find inputs that have concepts you have supplied as well as predictions from your model."),(0,r.kt)(h,{mdxType:"Tabs"},(0,r.kt)(d,{value:"grpc_java",label:"gRPC Java",mdxType:"TabItem"},"```java import com.clarifai.grpc.api.*; import com.clarifai.grpc.api.status.*;",(0,r.kt)("p",null,"// Insert here the initialization code as outlined on this page:\n// ",(0,r.kt)("a",{parentName:"p",href:"https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions"},"https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions")),(0,r.kt)("p",null,'// Here we search for images which we labeled with "cat" and for which the General prediction model does not find\n// a "dog" concept.\nMultiSearchResponse postSearchesResponse = stub.postSearches(\nPostSearchesRequest.newBuilder().setQuery(\nQuery.newBuilder()\n.addAnds(\nAnd.newBuilder().setInput( // Setting Input indicates we search for images that have the concept(s)\n// which we added to the input manually.\nInput.newBuilder().setData(\nData.newBuilder().addConcepts(\nConcept.newBuilder()\n.setName("cat")\n.setValue(1f)\n)\n)\n)\n)\n.addAnds(\nAnd.newBuilder().setOutput(  // Setting Output indicates we search for images that have the concept(s)\n// which were predicted by the General model.\nOutput.newBuilder().setData(\nData.newBuilder().addConcepts(\nConcept.newBuilder()\n.setName("dog")\n.setValue(0f)  // Because of 0, the dog must not be present in the image.\n)\n)\n)\n)\n)\n.build()\n);'),(0,r.kt)("p",null,'if (postSearchesResponse.getStatus().getCode() != StatusCode.SUCCESS) {\nthrow new RuntimeException("Post searches failed, status: " + postSearchesResponse.getStatus());\n}'),(0,r.kt)("p",null,'System.out.println("Found inputs " + postSearchesResponse.getHitsCount() + ":");\nfor (Hit hit : postSearchesResponse.getHitsList()) {\nSystem.out.printf("\\tScore %.2f for %s\\n", hit.getScore(), hit.getInput().getId());\n}'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'</TabItem>\n\n<TabItem value="grpc_nodejs" label="gRPC NodeJS">\n```javascript\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\n// Here we search for images which we labeled with "cat" and for which the General prediction model does not find\n// a "dog" concept.\nstub.PostSearches(\n    {\n        query: {\n            ands: [\n                {\n                    input: {  // Setting Input indicates we search for images that have the concept(s)\n                              // which we added to the input manually.\n                        data: {\n                            concepts: [\n                                {\n                                    name: "cat",\n                                    value: 1\n                                }\n                            ]\n                        }\n                    }\n                },\n                {\n                    output: {  // Setting Output indicates we search for images that have the concept(s)\n                               // which were predicted by the General model.\n                        data: {\n                            concepts: [\n                                {\n                                    name: "dog",\n                                    value: 0\n                                }\n                            ]\n                        }\n                    }\n                }\n            ]\n        }\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post searches failed, status: " + response.status.description);\n        }\n\n        console.log("Found inputs:");\n        for (const hit of response.hits) {\n            console.log("\\tScore " + hit.score + " for " + hit.input.id);\n        }\n    }\n);\n'))),(0,r.kt)(d,{value:"grpc_python",label:"gRPC Python",mdxType:"TabItem"},"```python # Insert here the initialization code as outlined on this page: # https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions",(0,r.kt)("h1",{id:"here-we-search-for-images-which-we-labeled-with-cat-and-for-which-the-general-prediction-model-does-not-find"},'Here we search for images which we labeled with "cat" and for which the General prediction model does not find'),(0,r.kt)("h1",{id:"a-dog-concept"},'a "dog" concept.'),(0,r.kt)("p",null,"post_searches_response = stub.PostSearches(\nservice_pb2.PostSearchesRequest(\nquery=resources_pb2.Query(\nands=[\nresources_pb2.And(\ninput=resources_pb2.Input(  # Setting Input indicates we search for images that have the concept(s)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'                                            # which we added to the input manually.\n                    data=resources_pb2.Data(\n                        concepts=[\n                            resources_pb2.Concept(\n                                name="cat",\n                                value=1\n                            )\n                        ]\n                    )\n                )\n            ),\n            resources_pb2.And(\n                output=resources_pb2.Output(  # Setting Output indicates we search for images that have the concept(s)\n                                              # which were predicted by the General model.\n                    data=resources_pb2.Data(\n                        concepts=[\n                            resources_pb2.Concept(\n                                name="dog",\n                                value=0\n                            )\n                        ]\n                    )\n                )\n            )\n        ]\n    )\n),\nmetadata=metadata\n')),(0,r.kt)("p",null,")"),(0,r.kt)("p",null,'if post_searches_response.status.code != status_code_pb2.SUCCESS:\nraise Exception("Post searches failed, status: " + post_searches_response.status.description)'),(0,r.kt)("p",null,'print("Found inputs:")\nfor hit in post_searches_response.hits:\nprint("\\tScore %.2f for %s" % (hit.score, hit.input.id))'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"</TabItem>\n\n<TabItem value=\"javascript\" label=\"Javascript\">\n```javascript\napp.inputs.search([\n  // this is the public concept\n  {\n    concept: {\n      name: 'cat'\n    }\n  },\n  // this is the user-supplied concept\n  {\n    concept: {\n      type: 'input',\n      name: 'dog'\n    }\n  }\n]).then(\n  function(response) {\n    // do something with response\n  },\n  function(err) {\n    // there was an error\n  }\n);\n"))),(0,r.kt)(d,{value:"python",label:"Python",mdxType:"TabItem"},"```python from clarifai.rest import ClarifaiApp, InputSearchTerm, OutputSearchTerm, SearchQueryBuilder app = ClarifaiApp(api_key='YOUR_API_KEY')",(0,r.kt)("p",null,"term1 = InputSearchTerm(concept='cat')\nterm2 = OutputSearchTerm(concept='dog', value=False)\nquery = SearchQueryBuilder()\nquery.add_term(term1)\nquery.add_term(term2)"),(0,r.kt)("p",null,"app.inputs.search(query)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'</TabItem>\n\n<TabItem value="java" label="Java">\n```java\nclient.searchInputs()\n    // Matches images we tagged as "cat", and that the API tagged as not having "dog"\n    .ands(\n        SearchClause.matchUserTaggedConcept(Concept.forName("cat")),\n        SearchClause.matchConcept(Concept.forName("dog").withValue(false))\n    )\n    .getPage(1)\n    .executeSync();\n'))),(0,r.kt)(d,{value:"csharp",label:"C#",mdxType:"TabItem"},"```csharp using System.Threading.Tasks; using Clarifai.API; using Clarifai.DTOs.Searches;",(0,r.kt)("p",null,'namespace YourNamespace\n{\npublic class YourClassName\n{\npublic static async Task Main()\n{\nvar client = new ClarifaiClient("YOUR_API_KEY");'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'        await client.SearchInputs(\n                SearchBy.UserTaggedConceptName("cat"),\n                SearchBy.ConceptID("dog"))\n            .Page(1)\n            .ExecuteAsync();\n    }\n}\n')),(0,r.kt)("p",null,"}"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'</TabItem>\n\n<TabItem value="objective-c" label="Objective-C">\n```text\nClarifaiConcept *conceptFromGeneralModel = [[ClarifaiConcept alloc] initWithConceptName:@"fast"];\nClarifaiConcept *conceptFromTrainedCustomModel = [[ClarifaiConcept alloc] initWithConceptName:@"dog"];\n\nClarifaiSearchTerm *term1 = [ClarifaiSearchTerm searchByPredictedConcept:conceptFromGeneralModel];\nClarifaiSearchTerm *term2 = [ClarifaiSearchTerm searchByPredictedConcept:conceptFromTrainedCustomModel];\n\n[_app search:@[term1, term2] page:@1 perPage:@20 completion:^(NSArray<ClarifaiSearchResult *> *results, NSError *error) {\n  // Print output of first search result.\n  NSLog(@"inputID: %@", results[0].inputID);\n  NSLog(@"URL: %@", results[0].mediaURL);\n  NSLog(@"probability of input matching search query: %@", results[0].score);\n}];\n'))),(0,r.kt)(d,{value:"php",label:"PHP",mdxType:"TabItem"},"```php use Clarifai\\API\\ClarifaiClient; use Clarifai\\DTOs\\Searches\\SearchBy; use Clarifai\\DTOs\\Searches\\SearchInputsResult;",(0,r.kt)("p",null,"$client = new ClarifaiClient('YOUR_API_KEY');"),(0,r.kt)("p",null,"$response = $client->searchInputs(","[SearchBy::userTaggedConceptName('cat'),\nSearchBy::conceptID('dog')]",")\n->executeSync();"),(0,r.kt)("p",null,'if ($response->isSuccessful()) {\necho "Response is successful.\\n";'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"/** @var SearchInputsResult $result */\n$result = $response->get();\n\nforeach ($result->searchHits() as $searchHit) {\n    echo $searchHit->input()->id() . ' ' . $searchHit->score() . \"\\n\";\n}\n")),(0,r.kt)("p",null,'} else {\necho "Response is not successful. Reason: \\n";\necho $response->status()->description() . "\\n";\necho $response->status()->errorDetails() . "\\n";\necho "Status code: " . $response->status()->statusCode();\n}'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'</TabItem>\n\n<TabItem value="curl" label="cURL">\n```text\n# Here we search for images which we labeled with "cat" and for which the General prediction model\n# does not find a "dog" concept.\n\ncurl -X POST \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n-d \'\n{\n  "query": {\n    "ands": [\n      {\n        "input": {\n          "data": {\n            "concepts": [\n              {\n                "name": "cat",\n                "value": 1\n              }\n            ]\n          }\n        }\n      },\n      {\n        "output": {\n          "data": {\n            "concepts": [\n              {\n                "name": "dog",\n                "value": 0\n              }\n            ]\n          }\n        }\n      }\n    ]\n  }\n}\'\\\nhttps://api.clarifai.com/v2/searches\n')))),(0,r.kt)("h3",{id:"by-concept-in-another-language"},"By concept in another language"),(0,r.kt)("p",null,'Concepts that have a translation into another langauge can be searched for in that language, even without having the default language for your app being in that language. This uses Clarifai\'s knowledge graph to lookup the translation and then perform the search. For example, if you app is in english and you want to search for "dog" in Japanese, then you could search wiht ',(0,r.kt)("inlineCode",{parentName:"p"},'language="ja"')," and ",(0,r.kt)("inlineCode",{parentName:"p"},'name="\u72ac"'),"."),(0,r.kt)(h,{mdxType:"Tabs"},(0,r.kt)(d,{value:"grpc_java",label:"gRPC Java",mdxType:"TabItem"},"```java import com.clarifai.grpc.api.*; import com.clarifai.grpc.api.status.*;",(0,r.kt)("p",null,"// Insert here the initialization code as outlined on this page:\n// ",(0,r.kt)("a",{parentName:"p",href:"https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions"},"https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions")),(0,r.kt)("p",null,'MultiSearchResponse postSearchesResponse = stub.postSearches(\nPostSearchesRequest.newBuilder().setQuery(\nQuery.newBuilder().addAnds(\nAnd.newBuilder().setOutput( // Setting Output indicates we search for images that have the concept(s)\n// which were predicted by the General model.\nOutput.newBuilder().setData(\nData.newBuilder().addConcepts(  // You can search by multiple concepts.\nConcept.newBuilder()\n.setName("\u72ac")  // You could search by concept ID as well.\n.setLanguage("ja") // japanese\n.setValue(1f)  // Value of 0 will search for images that don\'t have the concept.\n)\n)\n)\n)\n)\n.build()\n);'),(0,r.kt)("p",null,'if (postSearchesResponse.getStatus().getCode() != StatusCode.SUCCESS) {\nthrow new RuntimeException("Post searches failed, status: " + postSearchesResponse.getStatus());\n}'),(0,r.kt)("p",null,'System.out.println("Found inputs " + postSearchesResponse.getHitsCount() + ":");\nfor (Hit hit : postSearchesResponse.getHitsList()) {\nSystem.out.printf("\\tScore %.2f for %s\\n", hit.getScore(), hit.getInput().getId());\n}'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'</TabItem>\n\n<TabItem value="grpc_nodejs" label="gRPC NodeJS">\n```javascript\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nstub.PostSearches(\n    {\n        query: {\n            ands: [\n                {\n                    output: {  // Setting Output indicates we search for images that have the concept(s)\n                               // which were predicted by the General model.\n                        data: {\n                            concepts: [  // You can search by multiple concepts.\n                                {\n                                    name: "\u72ac",  // You could search by concept ID as well.\n                                    language: "ja", // japanese\n                                    value: 1  // Value of 0 will search for images that don\'t have the concept\n                                }\n                            ]\n                        }\n                    }\n                }\n            ]\n        }\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post searches failed, status: " + response.status.description);\n        }\n\n        console.log("Found inputs:");\n        for (const hit of response.hits) {\n            console.log("\\tScore " + hit.score + " for " + hit.input.id);\n        }\n    }\n);\n'))),(0,r.kt)(d,{value:"grpc_python",label:"gRPC Python",mdxType:"TabItem"},"```python # Insert here the initialization code as outlined on this page: # https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions",(0,r.kt)("p",null,"post_searches_response = stub.PostSearches(\nservice_pb2.PostSearchesRequest(\nquery=resources_pb2.Query(\nands=[\nresources_pb2.And(\noutput=resources_pb2.Output( # Setting Output indicates we search for images that have the concept(s)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'                                             # which were predicted by the General model.\n                    data=resources_pb2.Data(\n                        concepts=[  # You can search by multiple concepts.\n                            resources_pb2.Concept(\n                                name="\u72ac",  # You could search by concept ID as well.\n                                language="ja", # japanese\n                                value=1  # Value of 0 will search for images that don\'t have the concept.\n                            )\n                        ]\n                    )\n                )\n            )\n        ]\n    )\n),\nmetadata=metadata\n')),(0,r.kt)("p",null,")"),(0,r.kt)("p",null,'if post_searches_response.status.code != status_code_pb2.SUCCESS:\nraise Exception("Post searches failed, status: " + post_searches_response.status.description)'),(0,r.kt)("p",null,'print("Found inputs:")\nfor hit in post_searches_response.hits:\nprint("\\tScore %.2f for %s" % (hit.score, hit.input.id))'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'</TabItem>\n\n<TabItem value="curl" label="cURL">\n```text\ncurl -X POST \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'\n  {\n    "query": {\n      "ands": [\n        {\n          "output": {\n            "data": {\n              "concepts": [\n                {\n                  "name":"\u72ac",\n                  "language": "ja",\n                  "value": 1\n                }\n              ]\n            }\n          }\n        }\n      ]\n    }\n  }\'\\\n  https://api.clarifai.com/v2/searches\n')))),(0,r.kt)("h2",{id:"by-image"},"By Image"),(0,r.kt)("p",null,"You can use images to search through your collection. The API will return ranked results based on how similar the results are to the image you provided in your query."),(0,r.kt)(h,{mdxType:"Tabs"},(0,r.kt)(d,{value:"grpc_java",label:"gRPC Java",mdxType:"TabItem"},"```java import com.clarifai.grpc.api.*; import com.clarifai.grpc.api.status.*;",(0,r.kt)("p",null,"// Insert here the initialization code as outlined on this page:\n// ",(0,r.kt)("a",{parentName:"p",href:"https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions"},"https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions")),(0,r.kt)("p",null,'MultiSearchResponse postSearchesResponse = stub.postSearches(\nPostSearchesRequest.newBuilder().setQuery(\nQuery.newBuilder().addAnds(\nAnd.newBuilder().setOutput(\nOutput.newBuilder().setInput(\nInput.newBuilder().setData(\nData.newBuilder().setImage(\nImage.newBuilder()\n.setUrl("{YOUR_IMAGE_URL}")\n)\n)\n)\n)\n)\n)\n.build()\n);'),(0,r.kt)("p",null,'if (postSearchesResponse.getStatus().getCode() != StatusCode.SUCCESS) {\nthrow new RuntimeException("Post searches failed, status: " + postSearchesResponse.getStatus());\n}'),(0,r.kt)("p",null,'System.out.println("Found inputs " + postSearchesResponse.getHitsCount() + ":");\nfor (Hit hit : postSearchesResponse.getHitsList()) {\nSystem.out.printf("\\tScore %.2f for %s\\n", hit.getScore(), hit.getInput().getId());\n}'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'</TabItem>\n\n<TabItem value="grpc_nodejs" label="gRPC NodeJS">\n```javascript\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nstub.PostSearches(\n    {\n        query: {\n            ands: [\n                {\n                    output: {\n                        input: {\n                            data: {\n                                image: {\n                                    url: "{YOUR_IMAGE_URL}"\n                                }\n                            }\n                        }\n                    }\n                }\n            ]\n        }\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post searches failed, status: " + response.status.description);\n        }\n\n        console.log("Found inputs:");\n        for (const hit of response.hits) {\n            console.log("\\tScore " + hit.score + " for " + hit.input.id);\n        }\n    }\n);\n'))),(0,r.kt)(d,{value:"grpc_python",label:"gRPC Python",mdxType:"TabItem"},"```python # Insert here the initialization code as outlined on this page: # https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions",(0,r.kt)("p",null,"post_searches_response = stub.PostSearches(\nservice_pb2.PostSearchesRequest(\nquery=resources_pb2.Query(\nands=",'[\nresources_pb2.And(\noutput=resources_pb2.Output(\ninput=resources_pb2.Input(\ndata=resources_pb2.Data(\nimage=resources_pb2.Image(\nurl="{YOUR_IMAGE_URL}"\n)\n)\n)\n)\n)\n]',"\n)\n),\nmetadata=metadata\n)"),(0,r.kt)("p",null,'if post_searches_response.status.code != status_code_pb2.SUCCESS:\nraise Exception("Post searches failed, status: " + post_searches_response.status.description)'),(0,r.kt)("p",null,'print("Found inputs:")\nfor hit in post_searches_response.hits:\nprint("\\tScore %.2f for %s" % (hit.score, hit.input.id))'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'</TabItem>\n\n<TabItem value="javascript" label="Javascript">\n```javascript\napp.inputs.search(\n  {\n    input: {\n      url: \'https://samples.clarifai.com/puppy.jpeg\'\n    }\n  }\n).then(\n  function(response) {\n    // do something with response\n  },\n  function(err) {\n    // there was an error\n  }\n);\n'))),(0,r.kt)(d,{value:"python",label:"Python",mdxType:"TabItem"},"```python from clarifai.rest import ClarifaiApp app = ClarifaiApp(api_key='YOUR_CLARIFAI_KEY')",(0,r.kt)("h1",{id:"search-by-image-url"},"search by image url"),(0,r.kt)("p",null,'app.inputs.search_by_image(url="',(0,r.kt)("a",{parentName:"p",href:"https://samples.clarifai.com/metro-north.jpg%22"},'https://samples.clarifai.com/metro-north.jpg"'),")"),(0,r.kt)("h1",{id:"search-by-existing-input-id"},"search by existing input id"),(0,r.kt)("p",null,'input_id = "some_existing_input_id"\napp.inputs.search_by_image(image_id=input_id)'),(0,r.kt)("h1",{id:"search-by-raw-bytes"},"search by raw bytes"),(0,r.kt)("p",null,'data = "image_raw_bytes"\napp.inputs.search_by_image(imgbytes=data)'),(0,r.kt)("h1",{id:"search-by-base64-bytes"},"search by base64 bytes"),(0,r.kt)("p",null,'base64_data = "image_bytes_encoded_in_base64"\napp.inputs.search_by_image(base64bytes=base64_data)'),(0,r.kt)("h1",{id:"search-by-local-filename"},"search by local filename"),(0,r.kt)("p",null,'filename="filename_on_local_disk.jpg"\napp.inputs.search_by_image(filename=filename)'),(0,r.kt)("h1",{id:"search-from-fileio"},"search from fileio"),(0,r.kt)("p",null,"fio = open(\"filename_on_local_disk.jpg\", 'rb')\napp.inputs.search_by_image(fileobj=fio)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'</TabItem>\n\n<TabItem value="java" label="Java">\n```java\n// Search by image URL (String or java.net.URL)\nclient.searchInputs(SearchClause.matchImageVisually(ClarifaiImage.of("https://samples.clarifai.com/metro-north.jpg")))\n    .getPage(1)\n    .executeSync();\n\n// Search by local image (java.io.File or byte[])\nclient.searchInputs(SearchClause.matchImageVisually(ClarifaiImage.of(new File("image.png"))))\n    .getPage(1)\n    .executeSync();\n'))),(0,r.kt)(d,{value:"csharp",label:"C#",mdxType:"TabItem"},"```csharp using System.IO; using System.Threading.Tasks; using Clarifai.API; using Clarifai.DTOs.Searches;",(0,r.kt)("p",null,'namespace YourNamespace\n{\npublic class YourClassName\n{\npublic static async Task Main()\n{\nvar client = new ClarifaiClient("YOUR_API_KEY");'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'        // Search by image URL\n        await client.SearchInputs(\n                SearchBy.ImageVisually("https://samples.clarifai.com/metro-north.jpg"))\n            .Page(1)\n            .ExecuteAsync();\n\n        // Search by local image\n        await client.SearchInputs(\n                SearchBy.ImageVisually(File.ReadAllBytes("image.png")))\n            .Page(1)\n            .ExecuteAsync();\n    }\n}\n')),(0,r.kt)("p",null,"}"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'</TabItem>\n\n<TabItem value="objective-c" label="Objective-C">\n```text\nClarifaiSearchTerm *searchTerm = [ClarifaiSearchTerm searchVisuallyWithImageURL:@"https://samples.clarifai.com/metro-north.jpg"];\n\n[app search:@[searchTerm] page:@1 perPage:@20 completion:^(NSArray<ClarifaiSearchResult *> *results, NSError *error) {\n  // Print output of first search result.\n  NSLog(@"inputID: %@", results[0].inputID);\n  NSLog(@"URL: %@", results[0].mediaURL);\n  NSLog(@"probability of input matching search query: %@", results[0].score);\n}];\n'))),(0,r.kt)(d,{value:"php",label:"PHP",mdxType:"TabItem"},"```php use Clarifai\\API\\ClarifaiClient; use Clarifai\\DTOs\\Searches\\SearchBy; use Clarifai\\DTOs\\Searches\\SearchInputsResult;",(0,r.kt)("p",null,"$client = new ClarifaiClient('YOUR_API_KEY');"),(0,r.kt)("p",null,"$response = $client->searchInputs(\nSearchBy::urlImageVisually('",(0,r.kt)("a",{parentName:"p",href:"https://samples.clarifai.com/metro-north.jpg'"},"https://samples.clarifai.com/metro-north.jpg'"),"))\n->executeSync();"),(0,r.kt)("p",null,'if ($response->isSuccessful()) {\necho "Response is successful.\\n";'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"/** @var SearchInputsResult $result */\n$result = $response->get();\n\nforeach ($result->searchHits() as $searchHit) {\n    echo $searchHit->input()->id() . ' ' . $searchHit->score() . \"\\n\";\n}\n")),(0,r.kt)("p",null,'} else {\necho "Response is not successful. Reason: \\n";\necho $response->status()->description() . "\\n";\necho $response->status()->errorDetails() . "\\n";\necho "Status code: " . $response->status()->statusCode();\n}'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'</TabItem>\n\n<TabItem value="curl" label="cURL">\n```text\ncurl -X POST \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'\n  {\n    "query": {\n      "ands": [\n        {\n          "output":{\n            "input":{\n              "data": {\n                "image": {\n                  "url": "{YOUR_IMAGE_URL}"\n                }\n              }\n            }\n          }\n        }\n      ]\n    }\n  }\'\\\n  https://api.clarifai.com/v2/searches\n')))),(0,r.kt)("h3",{id:"by-url"},"By Url"),(0,r.kt)("p",null,"You can also search for an input by URL."),(0,r.kt)(h,{mdxType:"Tabs"},(0,r.kt)(d,{value:"grpc_java",label:"gRPC Java",mdxType:"TabItem"},"```java import com.clarifai.grpc.api.*; import com.clarifai.grpc.api.status.*;",(0,r.kt)("p",null,"// Insert here the initialization code as outlined on this page:\n// ",(0,r.kt)("a",{parentName:"p",href:"https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions"},"https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions")),(0,r.kt)("p",null,'MultiSearchResponse postSearchesResponse = stub.postSearches(\nPostSearchesRequest.newBuilder().setQuery(\nQuery.newBuilder().addAnds(\nAnd.newBuilder().setInput(\nInput.newBuilder().setData(\nData.newBuilder().setImage(\nImage.newBuilder()\n.setUrl("{YOUR_IMAGE_URL}")\n)\n)\n)\n)\n)\n.build()\n);'),(0,r.kt)("p",null,'if (postSearchesResponse.getStatus().getCode() != StatusCode.SUCCESS) {\nthrow new RuntimeException("Post searches failed, status: " + postSearchesResponse.getStatus());\n}'),(0,r.kt)("p",null,'System.out.println("Found inputs " + postSearchesResponse.getHitsCount() + ":");\nfor (Hit hit : postSearchesResponse.getHitsList()) {\nSystem.out.printf("\\tScore %.2f for %s\\n", hit.getScore(), hit.getInput().getId());\n}'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'</TabItem>\n\n<TabItem value="grpc_nodejs" label="gRPC NodeJS">\n```javascript\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nstub.PostSearches(\n    {\n        query: {\n            ands: [\n                {\n                    input: {\n                        data: {\n                            image: {\n                                url: "{YOUR_IMAGE_URL}"\n                            }\n                        }\n                    }\n                }\n            ]\n        }\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post searches failed, status: " + response.status.description);\n        }\n\n        console.log("Found inputs:");\n        for (const hit of response.hits) {\n            console.log("\\tScore " + hit.score + " for " + hit.input.id);\n        }\n    }\n);\n'))),(0,r.kt)(d,{value:"grpc_python",label:"gRPC Python",mdxType:"TabItem"},"```python # Insert here the initialization code as outlined on this page: # https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions",(0,r.kt)("p",null,"post_searches_response = stub.PostSearches(\nservice_pb2.PostSearchesRequest(\nquery=resources_pb2.Query(\nands=",'[\nresources_pb2.And(\ninput=resources_pb2.Input(\ndata=resources_pb2.Data(\nimage=resources_pb2.Image(\nurl="{YOUR_IMAGE_URL}"\n)\n)\n)\n)\n]',"\n)\n),\nmetadata=metadata\n)"),(0,r.kt)("p",null,'if post_searches_response.status.code != status_code_pb2.SUCCESS:\nraise Exception("Post searches failed, status: " + post_searches_response.status.description)'),(0,r.kt)("p",null,'print("Found inputs:")\nfor hit in post_searches_response.hits:\nprint("\\tScore %.2f for %s" % (hit.score, hit.input.id))'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"</TabItem>\n\n<TabItem value=\"javascript\" label=\"Javascript\">\n```javascript\napp.inputs.search(\n  {\n    input: {\n      type: 'input',\n      url: 'https://samples.clarifai.com/puppy.jpeg'\n    }\n  }\n).then(\n  function(response) {\n    // do something with response\n  },\n  function(err) {\n    // there was an error\n  }\n);\n"))),(0,r.kt)(d,{value:"python",label:"Python",mdxType:"TabItem"},"```python from clarifai.rest import ClarifaiApp app = ClarifaiApp(api_key='YOUR_API_KEY')",(0,r.kt)("p",null,'meta = {"url":"',(0,r.kt)("a",{parentName:"p",href:"https://samples.clarifai.com/metro-north.jpg%22%7D"},'https://samples.clarifai.com/metro-north.jpg"}'),"\napp.inputs.search_by_metadata(meta)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'</TabItem>\n\n<TabItem value="java" label="Java">\n```java\n// Lookup images with this URL\nclient.searchInputs(SearchClause.matchImageURL(ClarifaiImage.of("https://samples.clarifai.com/puppy.jpeg")))\n    .getPage(1)\n    .executeSync();\n'))),(0,r.kt)(d,{value:"csharp",label:"C#",mdxType:"TabItem"},"```csharp using System.Threading.Tasks; using Clarifai.API; using Clarifai.DTOs.Searches;",(0,r.kt)("p",null,'namespace YourNamespace\n{\npublic class YourClassName\n{\npublic static async Task Main()\n{\nvar client = new ClarifaiClient("YOUR_API_KEY");'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'        await client.SearchInputs(\n                SearchBy.ImageURL("https://samples.clarifai.com/metro-north.jpg"))\n            .Page(1)\n            .ExecuteAsync();\n    }\n}\n')),(0,r.kt)("p",null,"}"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'</TabItem>\n\n<TabItem value="objective-c" label="Objective-C">\n```text\n// Lookup images with this URL\nClarifaiSearchTerm *term = [ClarifaiSearchTerm searchInputsWithImageURL:@"https://samples.clarifai.com/metro-north.jpg"];\n\n[app search:@[term] page:@1 perPage:@20 completion:^(NSArray<ClarifaiSearchResult *> *results, NSError *error) {\n  // Print output of first search result.\n  NSLog(@"inputID: %@", results[0].inputID);\n  NSLog(@"URL: %@", results[0].mediaURL);\n  NSLog(@"probability of input matching search query: %@", results[0].score);\n}];\n'))),(0,r.kt)(d,{value:"php",label:"PHP",mdxType:"TabItem"},"```php use Clarifai\\API\\ClarifaiClient; use Clarifai\\DTOs\\Searches\\SearchBy; use Clarifai\\DTOs\\Searches\\SearchInputsResult;",(0,r.kt)("p",null,"$client = new ClarifaiClient('YOUR_API_KEY');"),(0,r.kt)("p",null,"$response = $client->searchInputs(\nSearchBy::imageURL('",(0,r.kt)("a",{parentName:"p",href:"https://samples.clarifai.com/metro-north.jpg'"},"https://samples.clarifai.com/metro-north.jpg'"),"))\n->executeSync();"),(0,r.kt)("p",null,'if ($response->isSuccessful()) {\necho "Response is successful.\\n";'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"/** @var SearchInputsResult $result */\n$result = $response->get();\n\nforeach ($result->searchHits() as $searchHit) {\n    echo $searchHit->input()->id() . ' ' . $searchHit->score() . \"\\n\";\n}\n")),(0,r.kt)("p",null,'} else {\necho "Response is not successful. Reason: \\n";\necho $response->status()->description() . "\\n";\necho $response->status()->errorDetails() . "\\n";\necho "Status code: " . $response->status()->statusCode();\n}'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'</TabItem>\n\n<TabItem value="curl" label="cURL">\n```text\ncurl -X POST \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'\n  {\n    "query": {\n      "ands": [\n        {\n          "input":{\n            "data": {\n              "image": {\n                "url": "{YOUR_IMAGE_URL}"\n              }\n            }\n          }\n        }\n      ]\n    }\n  }\'\\\n  https://api.clarifai.com/v2/searches\n')))))}g.isMDXComponent=!0}}]);
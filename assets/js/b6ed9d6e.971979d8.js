"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[5028],{11470:(e,a,n)=>{n.d(a,{A:()=>j});var t=n(96540),i=n(18215),r=n(17559),s=n(23104),l=n(56347),o=n(205),c=n(57485),u=n(31682),d=n(70679);function h(e){return t.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,t.isValidElement)(e)&&function(e){const{props:a}=e;return!!a&&"object"==typeof a&&"value"in a}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function p(e){const{values:a,children:n}=e;return(0,t.useMemo)(()=>{const e=a??function(e){return h(e).map(({props:{value:e,label:a,attributes:n,default:t}})=>({value:e,label:a,attributes:n,default:t}))}(n);return function(e){const a=(0,u.XI)(e,(e,a)=>e.value===a.value);if(a.length>0)throw new Error(`Docusaurus error: Duplicate values "${a.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[a,n])}function f({value:e,tabValues:a}){return a.some(a=>a.value===e)}function g({queryString:e=!1,groupId:a}){const n=(0,l.W6)(),i=function({queryString:e=!1,groupId:a}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:e,groupId:a});return[(0,c.aZ)(i),(0,t.useCallback)(e=>{if(!i)return;const a=new URLSearchParams(n.location.search);a.set(i,e),n.replace({...n.location,search:a.toString()})},[i,n])]}function m(e){const{defaultValue:a,queryString:n=!1,groupId:i}=e,r=p(e),[s,l]=(0,t.useState)(()=>function({defaultValue:e,tabValues:a}){if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!f({value:e,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${a.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const n=a.find(e=>e.default)??a[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:a,tabValues:r})),[c,u]=g({queryString:n,groupId:i}),[h,m]=function({groupId:e}){const a=function(e){return e?`docusaurus.tab.${e}`:null}(e),[n,i]=(0,d.Dv)(a);return[n,(0,t.useCallback)(e=>{a&&i.set(e)},[a,i])]}({groupId:i}),C=(()=>{const e=c??h;return f({value:e,tabValues:r})?e:null})();(0,o.A)(()=>{C&&l(C)},[C]);return{selectedValue:s,selectValue:(0,t.useCallback)(e=>{if(!f({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);l(e),u(e),m(e)},[u,m,r]),tabValues:r}}var C=n(92303);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var y=n(74848);function v({className:e,block:a,selectedValue:n,selectValue:t,tabValues:r}){const l=[],{blockElementScrollPositionUntilNextRender:o}=(0,s.a_)(),c=e=>{const a=e.currentTarget,i=l.indexOf(a),s=r[i].value;s!==n&&(o(a),t(s))},u=e=>{let a=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const n=l.indexOf(e.currentTarget)+1;a=l[n]??l[0];break}case"ArrowLeft":{const n=l.indexOf(e.currentTarget)-1;a=l[n]??l[l.length-1];break}}a?.focus()};return(0,y.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.A)("tabs",{"tabs--block":a},e),children:r.map(({value:e,label:a,attributes:t})=>(0,y.jsx)("li",{role:"tab",tabIndex:n===e?0:-1,"aria-selected":n===e,ref:e=>{l.push(e)},onKeyDown:u,onClick:c,...t,className:(0,i.A)("tabs__item",b.tabItem,t?.className,{"tabs__item--active":n===e}),children:a??e},e))})}function A({lazy:e,children:a,selectedValue:n}){const r=(Array.isArray(a)?a:[a]).filter(Boolean);if(e){const e=r.find(e=>e.props.value===n);return e?(0,t.cloneElement)(e,{className:(0,i.A)("margin-top--md",e.props.className)}):null}return(0,y.jsx)("div",{className:"margin-top--md",children:r.map((e,a)=>(0,t.cloneElement)(e,{key:a,hidden:e.props.value!==n}))})}function P(e){const a=m(e);return(0,y.jsxs)("div",{className:(0,i.A)(r.G.tabs.container,"tabs-container",b.tabList),children:[(0,y.jsx)(v,{...a,...e}),(0,y.jsx)(A,{...a,...e})]})}function j(e){const a=(0,C.A)();return(0,y.jsx)(P,{...e,children:h(e.children)},String(a))}},19365:(e,a,n)=>{n.d(a,{A:()=>s});n(96540);var t=n(18215);const i={tabItem:"tabItem_Ymn6"};var r=n(74848);function s({children:e,hidden:a,className:n}){return(0,r.jsx)("div",{role:"tabpanel",className:(0,t.A)(i.tabItem,n),hidden:a,children:e})}},28453:(e,a,n)=>{n.d(a,{R:()=>s,x:()=>l});var t=n(96540);const i={},r=t.createContext(i);function s(e){const a=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function l(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),t.createElement(r.Provider,{value:a},e.children)}},60868:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>u,contentTitle:()=>c,default:()=>p,frontMatter:()=>o,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"resources/api-overview/grpc-clients","title":"gRPC API Clients","description":"Clarifai API provides gRPC clients in the most popular languages","source":"@site/docs/resources/api-overview/grpc-clients.md","sourceDirName":"resources/api-overview","slug":"/resources/api-overview/grpc-clients","permalink":"/resources/api-overview/grpc-clients","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"description":"Clarifai API provides gRPC clients in the most popular languages","sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Clarifai CLI","permalink":"/resources/api-overview/cli"},"next":{"title":"API Outputs","permalink":"/resources/api-overview/api-outputs"}}');var i=n(74848),r=n(28453),s=n(11470),l=n(19365);const o={description:"Clarifai API provides gRPC clients in the most popular languages",sidebar_position:4},c="gRPC API Clients",u={},d=[{value:"Official Clients",id:"official-clients",level:2},{value:"Manually-built Clients (deprecated)",id:"manually-built-clients-deprecated",level:2},{value:"Client Installation Instructions",id:"client-installation-instructions",level:2},{value:"gRPC vs HTTP Channels",id:"grpc-vs-http-channels",level:2},{value:"Why did we build our API on gRPC in the first place?",id:"why-did-we-build-our-api-on-grpc-in-the-first-place",level:3},{value:"Cutting edge performance",id:"cutting-edge-performance",level:4},{value:"Clean code and resource management",id:"clean-code-and-resource-management",level:4},{value:"A gift for languages",id:"a-gift-for-languages",level:4},{value:"Streaming capabilities",id:"streaming-capabilities",level:4},{value:"When to use the HTTP Channel",id:"when-to-use-the-http-channel",level:3},{value:"Familiarity",id:"familiarity",level:4},{value:"Browser support",id:"browser-support",level:4},{value:"Human readability",id:"human-readability",level:4}];function h(e){const a={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",img:"img",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(a.header,{children:(0,i.jsx)(a.h1,{id:"grpc-api-clients",children:"gRPC API Clients"})}),"\n",(0,i.jsx)(a.p,{children:(0,i.jsx)(a.strong,{children:"Clarifai API provides gRPC clients in the most popular languages"})}),"\n",(0,i.jsx)("hr",{}),"\n",(0,i.jsxs)(a.p,{children:["You can access the Clarifai API through clients in many of the most popular programming languages. Our clients are built on ",(0,i.jsx)(a.a,{href:"https://grpc.io/",children:"gRPC"})," and are accessible through HTTP+JSON channels as well as gRPC channels."]}),"\n",(0,i.jsx)(a.h2,{id:"official-clients",children:"Official Clients"}),"\n",(0,i.jsxs)(a.table,{children:[(0,i.jsx)(a.thead,{children:(0,i.jsx)(a.tr,{children:(0,i.jsx)(a.th,{style:{textAlign:"left"},children:"Available Clients"})})}),(0,i.jsxs)(a.tbody,{children:[(0,i.jsx)(a.tr,{children:(0,i.jsx)(a.td,{style:{textAlign:"left"},children:(0,i.jsx)(a.a,{href:"https://github.com/Clarifai/clarifai-python-grpc/",children:"Clarifai Python"})})}),(0,i.jsx)(a.tr,{children:(0,i.jsx)(a.td,{style:{textAlign:"left"},children:(0,i.jsx)(a.a,{href:"https://github.com/Clarifai/clarifai-java-grpc/",children:"Clarifai Java"})})}),(0,i.jsx)(a.tr,{children:(0,i.jsx)(a.td,{style:{textAlign:"left"},children:(0,i.jsx)(a.a,{href:"https://github.com/Clarifai/clarifai-nodejs-grpc",children:"Clarifai NodeJS"})})}),(0,i.jsx)(a.tr,{children:(0,i.jsx)(a.td,{style:{textAlign:"left"},children:(0,i.jsx)(a.a,{href:"https://github.com/Clarifai/clarifai-csharp-grpc/",children:"Clarifai C#"})})}),(0,i.jsx)(a.tr,{children:(0,i.jsx)(a.td,{style:{textAlign:"left"},children:(0,i.jsx)(a.a,{href:"https://github.com/Clarifai/clarifai-php-grpc/",children:"Clarifai PHP"})})}),(0,i.jsx)(a.tr,{children:(0,i.jsx)(a.td,{style:{textAlign:"left"},children:(0,i.jsx)(a.a,{href:"https://github.com/Clarifai/clarifai-swift-grpc",children:"Clarifai Swift"})})}),(0,i.jsx)(a.tr,{children:(0,i.jsx)(a.td,{style:{textAlign:"left"},children:(0,i.jsx)(a.a,{href:"https://github.com/Clarifai/clarifai-rust-grpc",children:"Clarifai Rust"})})}),(0,i.jsx)(a.tr,{children:(0,i.jsx)(a.td,{style:{textAlign:"left"},children:(0,i.jsx)(a.a,{href:"https://github.com/Clarifai/clarifai-go-grpc",children:"Clarifai Go"})})}),(0,i.jsx)(a.tr,{children:(0,i.jsx)(a.td,{style:{textAlign:"left"},children:(0,i.jsx)(a.a,{href:"https://github.com/Clarifai/clarifai-cpp-grpc",children:"Clarifai C++"})})})]})]}),"\n",(0,i.jsx)(a.h2,{id:"manually-built-clients-deprecated",children:"Manually-built Clients (deprecated)"}),"\n",(0,i.jsxs)(a.table,{children:[(0,i.jsx)(a.thead,{children:(0,i.jsx)(a.tr,{children:(0,i.jsx)(a.th,{style:{textAlign:"left"},children:"Deprecated Clients"})})}),(0,i.jsxs)(a.tbody,{children:[(0,i.jsx)(a.tr,{children:(0,i.jsx)(a.td,{style:{textAlign:"left"},children:(0,i.jsx)(a.a,{href:"https://github.com/Clarifai/clarifai-csharp",children:"C#"})})}),(0,i.jsx)(a.tr,{children:(0,i.jsx)(a.td,{style:{textAlign:"left"},children:(0,i.jsx)(a.a,{href:"https://github.com/Clarifai/clarifai-java",children:"Java"})})}),(0,i.jsx)(a.tr,{children:(0,i.jsxs)(a.td,{style:{textAlign:"left"},children:[(0,i.jsx)(a.a,{href:"https://github.com/Clarifai/clarifai-javascript",children:"JavaScript"})," (",(0,i.jsx)(a.a,{href:"https://sdk.clarifai.com/js/latest/index.html",children:"Reference Docs"}),")"]})}),(0,i.jsx)(a.tr,{children:(0,i.jsx)(a.td,{style:{textAlign:"left"},children:(0,i.jsx)(a.a,{href:"https://github.com/Clarifai/clarifai-php",children:"PHP"})})})]})]}),"\n",(0,i.jsx)(a.h2,{id:"client-installation-instructions",children:"Client Installation Instructions"}),"\n",(0,i.jsx)(a.p,{children:"Here are the installation instructions and the initialization code for some of our most commonly used clients."}),"\n",(0,i.jsx)(a.p,{children:"For information on installing our other clients, please follow the links above."}),"\n",(0,i.jsx)(a.admonition,{title:"authorization",type:"tip",children:(0,i.jsxs)(a.p,{children:["Learn how to set up authorization with the various API clients ",(0,i.jsx)(a.a,{href:"https://docs.clarifai.com/clarifai-basics/authentication/authorize",children:"here"}),"."]})}),"\n",(0,i.jsx)(a.admonition,{title:"CORS Policy Error",type:"warning",children:(0,i.jsxs)(a.p,{children:["Learn how to resolve CORS errors in your JavaScript application(s) ",(0,i.jsx)(a.a,{href:"https://docs.clarifai.com/clarifai-basics/authentication/authorize/#cors-policy",children:"here"}),"."]})}),"\n","\n",(0,i.jsxs)(s.A,{groupId:"code",children:[(0,i.jsx)(l.A,{value:"python",label:"Python",children:(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-python",children:"##############################################################################################\n# Installation\n##############################################################################################\n\npython -m pip install clarifai-grpc\n\n##############################################################################################\n# Initialize the gRPC-based client to communicate with the Clarifai platform.\n##############################################################################################\n\n# Import the Clarifai gRPC-based objects needed\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_pb2, status_code_pb2\n\n# Construct the communications channel \nchannel = ClarifaiChannel.get_grpc_channel()\n# Construct the V2Stub object for accessing all the Clarifai API functionality\nstub = service_pb2_grpc.V2Stub(channel)\n\n##############################################################################################\n# This is where you set up the metadata object that's used to authenticate. \n# This authorization will be used by every Clarifai API call.\n# Change the following authorization key to your own credentials\n# Example: metadata = (('authorization', 'Key ' + 'a123457612345678'),)\n##############################################################################################\n \nmetadata = (('authorization', 'Key ' + 'YOUR_CLARIFAI_PAT_HERE'),)\n# Or, if you were to use an API Key:\n# metadata = (('authorization', 'Key ' + 'YOUR_CLARIFAI_API_KEY_HERE'),)\n# Yes, the word 'Key' appears in addition to the alphanumeric PAT or API Key\n\n##############################################################################################\n# A UserAppIDSet object is needed when using a PAT. It contains two pieces of information: \n# user_id (your user id) and app_id (app id that contains the model of interest). \n# Both of them are specified as string values.\n##############################################################################################\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id='YOUR_USER_ID_HERE', app_id='YOUR_APPLICATION_ID_HERE')\n"})})}),(0,i.jsx)(l.A,{value:"nodejs",label:"NodeJS",children:(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-javascript",children:'///////////////////////////////////////////////////////////////////////////////\n// Installation\n///////////////////////////////////////////////////////////////////////////////\n\nnpm install clarifai-nodejs-grpc\n\n/////////////////////////////////////////////////////////////////////////////////////////////\n// Initialize the gRPC-based client to communicate with the Clarifai platform.\n////////////////////////////////////////////////////////////////////////////////////////////\n\n// Import the Clarifai gRPC-based client\nconst {ClarifaiStub, grpc} = require("clarifai-nodejs-grpc");\n\n// Construct the stub object for accessing all the Clarifai API functionality\nconst stub = ClarifaiStub.grpc();\n\n////////////////////////////////////////////////////////////////////////////////////////////\n// This is where you set up the Metadata object that\'s used to authenticate. \n// This authorization will be used by every Clarifai API call.\n// Change the following authorization key to your own credentials\n// Example: metadata.set("authorization", "Key " + "a123457612345678");\n////////////////////////////////////////////////////////////////////////////////////////////\n\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + "YOUR_CLARIFAI_PAT_HERE");\n// Or, if you were to use an API Key:\n// metadata.set("authorization", "Key " + "YOUR_CLARIFAI_API_KEY_HERE");\n// Yes, the word \'Key\' appears in addition to the alphanumeric PAT or API Key\n\n/////////////////////////////////////////////////////////////////////////////////////////////\n// A UserAppIDSet object is needed when using a PAT. It contains two pieces of information: \n// user_id (your user id) and app_id (app id that contains the model of interest). \n// Both of them are specified as string values.\n/////////////////////////////////////////////////////////////////////////////////////////////\n\nuser_app_id: {\n    "user_id": "YOUR_USER_ID_HERE",\n    "app_id": "YOUR_APPLICATION_ID_HERE"\n}\n'})})}),(0,i.jsx)(l.A,{value:"java",label:"Java",children:(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-java",children:'//////////////////////////////////////////////////////////////////////////////////////////////\n// Installation\n/////////////////////////////////////////////////////////////////////////////////////////////\n\nVia Gradle:\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    implementation \'com.clarifai:clarifai-grpc:LATEST_VERSION_HERE\'\n}\n\nVia Maven:\n\n<repositories>\n    <repository>\n        <id>mavenCentral</id>\n        <name>mavenCentral</name>\n        <url>https://repo1.maven.org/maven2</url>\n    </repository>\n</repositories>\n\n<dependencies>\n    <dependency>\n        <groupId>com.clarifai</groupId>\n        <artifactId>clarifai-grpc</artifactId>\n        <version>LATEST_VERSION_HERE</version>\n    </dependency>\n</dependencies>\n\n/////////////////////////////////////////////////////////////////////////////////////////////\n// Initialize the gRPC-based client to communicate with the Clarifai platform.\n////////////////////////////////////////////////////////////////////////////////////////////\n\n// Import the Clarifai gRPC-based objects needed\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\n\n/////////////////////////////////////////////////////////////////////////////////////////////\n// Construct the communications channel.\n// Construct the stub object for accessing all the Clarifai API functionality.\n// Set up the authorization that will be used by every Clarifai API call.\n/////////////////////////////////////////////////////////////////////////////////////////////\n\nChannel channel = ClarifaiChannel.INSTANCE.getGrpcChannel();\n\nV2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(channel)\n.withCallCredentials(new ClarifaiCallCredentials("YOUR_CLARIFAI_PAT_HERE"));\n\n// Or, if you were to use an API Key:\n//.withCallCredentials(new ClarifaiCallCredentials("YOUR_CLARIFAI_API_KEY_HERE"));\n\n/////////////////////////////////////////////////////////////////////////////////////////////\n// A UserAppIDSet object is needed when using a PAT. It contains two pieces of information: \n// user_id (your user id) and app_id (app id that contains the model of interest). \n// Both of them are specified as string values.\n/////////////////////////////////////////////////////////////////////////////////////////////\n\n.setUserAppId(UserAppIDSet.newBuilder().setUserId("YOUR_USER_ID_HERE").setAppId("YOUR_APPLICATION_ID_HERE"))\n'})})}),(0,i.jsx)(l.A,{value:"php",label:"PHP",children:(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-php",children:"//////////////////////////////////////////////////////////////////////////////\n// Installation     \n//////////////////////////////////////////////////////////////////////////////\n\ncomposer require clarifai/clarifai-php-grpc\n\n// gRPC for PHP extension is required to use the Clarifai gRPC PHP client\n// Check how to add gRPC to your PHP installation here: https://github.com/grpc/grpc/tree/master/src/php\n\n////////////////////////////////////////////////////////////////////////////////\n// Set Clarifai Namespace\n//     - A variety of standard objects are provided in the Clarifai namespace\n//       from the client library. The ones that are necessary depend on the\n//       specific RPC call being made. The namespaces used in the example\n//       code throughout this documentation are included below for reference, \n //      although you likely won't need all of them in your application. \n////////////////////////////////////////////////////////////////////////////////\n\n// Various data structures that are used in the RPC calls to the Clarifai Platform\n// These operate as standardization wrappers for various types of data.\n\n//    Data Types\nuse Clarifai\\Api\\Image;\nuse Clarifai\\Api\\Text;\nuse Clarifai\\Api\\Video;\n\n//    ML Structures\nuse Clarifai\\Api\\Concept;\nuse Clarifai\\Api\\Model;\n\n//    Wrapper Types\nuse Clarifai\\Api\\Data;\nuse Clarifai\\Api\\Input;\n\n// Various Request objects. These specify the structure of the actual RPC request between\n// the client and the platform.\nuse Clarifai\\Api\\PostModelOutputsRequest;\nuse Clarifai\\Api\\PostConceptsSearchesRequest;\n\n\nuse Clarifai\\Api\\ConceptQuery;\n\n// Output configuration objects\nuse Clarifai\\Api\\OutputInfo;\nuse Clarifai\\Api\\OutputConfig;\n\n// The request status code object.  This contains information on the success or failure of\n// the API operation.\nuse Clarifai\\Api\\Status\\StatusCode;\n\n/////////////////////////////////////////////////////////////////////////////////////////////\n// Initialize the gRPC-based client to communicate with the Clarifai platform.\n////////////////////////////////////////////////////////////////////////////////////////////\n\n// The Clarifai PHP Client repository includes an autoload.php helper file that needs to be included\nrequire __DIR__ . '/vendor/autoload.php';\n\n// Enable use of the ClarifaiClient object from the Clarifai namespace\nuse Clarifai\\ClarifaiClient;  \n\n// Construct the initialization object for accessing all the Clarifai API functionality\n$client = ClarifaiClient::grpc();\n\n////////////////////////////////////////////////////////////////////////////////////////////\n// This is where you set up the Metadata object that's used to authenticate. \n// This authorization will be used by every Clarifai API call.\n// Change the following authorization key to your own credentials\n// Example: $metadata = ['Authorization' => ['Key a123457612345678']];\n////////////////////////////////////////////////////////////////////////////////////////////\n\n$metadata = ['Authorization' => ['Key YOUR_CLARIFAI_PAT_HERE']];\n\n// Or, if you were to use an API Key:\n// $metadata = ['Authorization' => ['Key YOUR_CLARIFAI_API_KEY_HERE']];\n// Yes, the word 'Key' appears in addition to the alphanumeric PAT or API Key\n\n/////////////////////////////////////////////////////////////////////////////////////////////\n// A UserAppIDSet object is needed when using a PAT. It contains two pieces of information: \n// user_id (your user id) and app_id (app id that contains the model of interest). \n// Both of them are specified as string values.\n/////////////////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\Api\\UserAppIDSet;\n\n$userDataObject = new UserAppIDSet([\n    'user_id' => 'YOUR_USER_ID_HERE', \n    'app_id' => 'YOUR_APPLICATION_ID_HERE' \n]);\n\n"})})}),(0,i.jsx)(l.A,{value:"csharp",label:"C#",children:(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-csharp",children:'\n///////////////////////////////////////////////////////////////////////////////\n// Installation\n///////////////////////////////////////////////////////////////////////////////\ndotnet add package ClarifaiGrpc\n\n///////////////////////////////////////////////////////////////////////////////\n// Initialize client\n///////////////////////////////////////////////////////////////////////////////\nusing System;\nusing System.Collections.Generic;\nusing Clarifai.Api;\nusing Clarifai.Channels;\nusing Grpc.Core;\nusing StatusCode = Clarifai.Api.Status.StatusCode;\n\nvar client = new V2.V2Client(ClarifaiChannel.Grpc());\n\nvar metadata = new Metadata\n{\n    {"Authorization", "Key {YOUR_PERSONAL_TOKEN}"}\n};\n'})})})]}),"\n",(0,i.jsx)(a.h2,{id:"grpc-vs-http-channels",children:"gRPC vs HTTP Channels"}),"\n",(0,i.jsx)(a.p,{children:"The Clarifai API offers you an encrypted gRPC channel, as well as an HTTPS+JSON channel for making requests. Why the different options?"}),"\n",(0,i.jsx)(a.p,{children:"Learn about the many convenient benefits of using the Clarifai API built on gRPC."}),"\n",(0,i.jsx)(a.h3,{id:"why-did-we-build-our-api-on-grpc-in-the-first-place",children:"Why did we build our API on gRPC in the first place?"}),"\n",(0,i.jsx)(a.p,{children:(0,i.jsx)(a.img,{alt:"grpc vs http clarifai",src:n(76360).A+"",width:"1252",height:"254"})}),"\n",(0,i.jsx)(a.h4,{id:"cutting-edge-performance",children:"Cutting edge performance"}),"\n",(0,i.jsx)(a.p,{children:"Clarifai gRPC is built to deliver lightweight microservices. This is one of the keys to Clarifai Amada\u2019s ability to load and balance thousands of different instances of machine learning models, and deliver MLOps at scale. With low latency and high throughput communication, we can deliver high performance machine learning services anywhere you are."}),"\n",(0,i.jsx)(a.p,{children:"Clarifai also uses gRPC to reduce network constraints. Our API messages are serialized using Protobuf, a compact, binary (though non human-readable) message format that is always smaller than the equivalent JSON. gRPC Protobuf serializes very quickly on the server and client."}),"\n",(0,i.jsx)(a.p,{children:"gRPC is specifically designed for HTTP/2, a major revision of HTTP that provides significant performance benefits over HTTP. The HTTP/2 protocol is efficient both when sending and receiving messages. HTTP/2 also eliminates head-of-line blocking by allowing multiplexing of multiple HTTP/2 calls over a single TCP connection."}),"\n",(0,i.jsx)(a.h4,{id:"clean-code-and-resource-management",children:"Clean code and resource management"}),"\n",(0,i.jsx)(a.p,{children:"There simply is no formal definition of how to build an HTTP API with JSON, and there is ongoing debate about the best format for URLs, HTTP verbs, and response codes. The gRPC specification is prescriptive about the format a gRPC service must follow, which means that behavior is consistent across platforms and implementations."}),"\n",(0,i.jsx)(a.p,{children:"Resource management is also made easier by virtue of the fact that gRPC also allows clients to specify how long they are willing to wait for an RPC to complete. The deadline is sent to the server, and the server has the ability to \u201ctimeout\u201d in-progress gRPC/HTTP/database requests."}),"\n",(0,i.jsx)(a.h4,{id:"a-gift-for-languages",children:"A gift for languages"}),"\n",(0,i.jsx)(a.p,{children:"Clarifai is a global, multi-lingual organization. We offer multi-lingual support for our models, and our API is a \u201cpolyglot\u201d as well. Clarifai takes advantage of the fact that gRPC tooling supports all popular development languages, and we offer clients in many of the most popular programming languages."}),"\n",(0,i.jsx)(a.p,{children:"Code generation of the client creates a strongly-typed client, and eliminates duplication of messages on the client and server. Clarifai automatically creates RESTful JSON Web APIs from gRPC services. This allows us to support both gRPC and JSON web APIs, without duplicating effort of building separate services for both."}),"\n",(0,i.jsx)(a.h4,{id:"streaming-capabilities",children:"Streaming capabilities"}),"\n",(0,i.jsx)(a.p,{children:"Two-way real-time communication is needed for many promising ML use cases. gRPC offers support for bi-directional streaming, allowing gRPC services to push messages in real-time without polling. All streaming combinations are natively supported when using our gRPC clients: unary (no streaming), server to client streaming, client to server streaming and bi-directional streaming."}),"\n",(0,i.jsx)(a.h3,{id:"when-to-use-the-http-channel",children:"When to use the HTTP Channel"}),"\n",(0,i.jsx)(a.p,{children:"We recommend using the encrypted gRPC channel for most of our customers in most use cases, but the HTTP+JSON channel does have its advantages:"}),"\n",(0,i.jsx)(a.h4,{id:"familiarity",children:"Familiarity"}),"\n",(0,i.jsx)(a.p,{children:"Working with a RESTful JSON Web API will be familiar to many developers. In these cases, you may want to evaluate the tradeoff between development time and the additional performance offered by the gRPC channel."}),"\n",(0,i.jsx)(a.h4,{id:"browser-support",children:"Browser support"}),"\n",(0,i.jsx)(a.p,{children:"It's impossible to directly call a gRPC service from a browser today. gRPC uses HTTP/2 features which major browsers currently do not support."}),"\n",(0,i.jsx)(a.h4,{id:"human-readability",children:"Human readability"}),"\n",(0,i.jsx)(a.p,{children:"HTTP API requests are sent as text and can be read and created by humans. gRPC messages are encoded with Protobuf by default. While serializing Protobuf is more efficient and the payloads are smaller, its binary format isn't human readable. Additional tooling is required to analyze Protobuf payloads and to compose requests by hand."})]})}function p(e={}){const{wrapper:a}={...(0,r.R)(),...e.components};return a?(0,i.jsx)(a,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},76360:(e,a,n)=>{n.d(a,{A:()=>t});const t=n.p+"assets/images/grpc-vs-http-e43cfaffd48eadcfa9b32a7cb5383032.png"}}]);
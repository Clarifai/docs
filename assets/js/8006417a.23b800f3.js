"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[6888],{7516:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>p,frontMatter:()=>t,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"resources/api-references/python","title":"Python API Reference","description":"Clarifai Python SDK API Reference","source":"@site/docs/resources/api-references/python.md","sourceDirName":"resources/api-references","slug":"/resources/api-references/python","permalink":"/resources/api-references/python","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"description":"Clarifai Python SDK API Reference","sidebar_position":2,"toc_max_heading_level":4},"sidebar":"tutorialSidebar","previous":{"title":"API References","permalink":"/resources/api-references/"},"next":{"title":"Node.js API Reference","permalink":"/resources/api-references/node"}}');var r=s(74848),l=s(28453);const t={description:"Clarifai Python SDK API Reference",sidebar_position:2,toc_max_heading_level:4},d="Python API Reference",c={},o=[{value:"App",id:"app",level:2},{value:"App.create_concepts",id:"appcreate_concepts",level:3},{value:"App.create_concept_relations",id:"appcreate_concept_relations",level:3},{value:"App.create_dataset",id:"appcreate_dataset",level:3},{value:"App.create_model",id:"appcreate_model",level:3},{value:"App.create_module",id:"appcreate_module",level:3},{value:"App.create_workflow",id:"appcreate_workflow",level:3},{value:"App.dataset",id:"appdataset",level:3},{value:"App.delete_concept_relations",id:"appdelete_concept_relations",level:3},{value:"App.delete_dataset",id:"appdelete_dataset",level:3},{value:"App.delete_model",id:"appdelete_model",level:3},{value:"App.delete_module",id:"appdelete_module",level:3},{value:"App.delete_workflow",id:"appdelete_workflow",level:3},{value:"App.get_input_count",id:"appget_input_count",level:3},{value:"App.inputs",id:"appinputs",level:3},{value:"App.list_concepts",id:"applist_concepts",level:3},{value:"App.list_datasets",id:"applist_datasets",level:3},{value:"App.list_installed_module_versions",id:"applist_installed_module_versions",level:3},{value:"App.list_models",id:"applist_models",level:3},{value:"App.list_modules",id:"applist_modules",level:3},{value:"App.list_pipelines",id:"applist_pipelines",level:3},{value:"App.list_pipeline_steps",id:"applist_pipeline_steps",level:3},{value:"App.list_trainable_model_types",id:"applist_trainable_model_types",level:3},{value:"App.list_workflows",id:"applist_workflows",level:3},{value:"App.model",id:"appmodel",level:3},{value:"App.module",id:"appmodule",level:3},{value:"App.patch_dataset",id:"apppatch_dataset",level:3},{value:"App.patch_model",id:"apppatch_model",level:3},{value:"App.patch_workflow",id:"apppatch_workflow",level:3},{value:"App.search",id:"appsearch",level:3},{value:"App.search_concept_relations",id:"appsearch_concept_relations",level:3},{value:"App.workflow",id:"appworkflow",level:3},{value:"ComputeCluster",id:"computecluster",level:2},{value:"ComputeCluster.list_nodepools",id:"computeclusterlist_nodepools",level:3},{value:"ComputeCluster.create_nodepool",id:"computeclustercreate_nodepool",level:3},{value:"ComputeCluster.nodepool",id:"computeclusternodepool",level:3},{value:"ComputeCluster.delete_nodepools",id:"computeclusterdelete_nodepools",level:3},{value:"Dataset",id:"dataset",level:2},{value:"Dataset.create_version",id:"datasetcreate_version",level:3},{value:"Dataset.delete_version",id:"datasetdelete_version",level:3},{value:"Dataset.list_versions",id:"datasetlist_versions",level:3},{value:"Dataset.list_inputs",id:"datasetlist_inputs",level:3},{value:"Dataset.upload_dataset",id:"datasetupload_dataset",level:3},{value:"Dataset.retry_upload_from_logs",id:"datasetretry_upload_from_logs",level:3},{value:"Dataset.upload_from_csv",id:"datasetupload_from_csv",level:3},{value:"Dataset.upload_from_folder",id:"datasetupload_from_folder",level:3},{value:"Dataset.get_upload_status",id:"datasetget_upload_status",level:3},{value:"Dataset.merge_dataset",id:"datasetmerge_dataset",level:3},{value:"Dataset.archive_zip",id:"datasetarchive_zip",level:3},{value:"Dataset.export",id:"datasetexport",level:3},{value:"Deployment",id:"deployment",level:2},{value:"Deployment.get_runner_selector",id:"deploymentget_runner_selector",level:3},{value:"Inputs",id:"inputs",level:2},{value:"Inputs.get_input",id:"inputsget_input",level:3},{value:"Inputs.get_input_from_url",id:"inputsget_input_from_url",level:3},{value:"Inputs.get_input_from_file",id:"inputsget_input_from_file",level:3},{value:"Inputs.get_input_from_bytes",id:"inputsget_input_from_bytes",level:3},{value:"Inputs.get_image_inputs_from_folder",id:"inputsget_image_inputs_from_folder",level:3},{value:"Inputs.get_text_input",id:"inputsget_text_input",level:3},{value:"Inputs.get_multimodal_input",id:"inputsget_multimodal_input",level:3},{value:"Inputs.get_inputs_from_csv",id:"inputsget_inputs_from_csv",level:3},{value:"Inputs.get_text_inputs_from_folder",id:"inputsget_text_inputs_from_folder",level:3},{value:"Inputs.get_bbox_proto",id:"inputsget_bbox_proto",level:3},{value:"Inputs.get_mask_proto",id:"inputsget_mask_proto",level:3},{value:"Inputs.upload_from_url",id:"inputsupload_from_url",level:3},{value:"Inputs.upload_from_file",id:"inputsupload_from_file",level:3},{value:"Inputs.upload_from_bytes",id:"inputsupload_from_bytes",level:3},{value:"Inputs.upload_text",id:"inputsupload_text",level:3},{value:"Inputs.upload_inputs",id:"inputsupload_inputs",level:3},{value:"Inputs.patch_inputs",id:"inputspatch_inputs",level:3},{value:"Inputs.upload_annotations",id:"inputsupload_annotations",level:3},{value:"Inputs.patch_annotations",id:"inputspatch_annotations",level:3},{value:"Inputs.patch_concepts",id:"inputspatch_concepts",level:3},{value:"Inputs.delete_inputs",id:"inputsdelete_inputs",level:3},{value:"Inputs.delete_annotations",id:"inputsdelete_annotations",level:3},{value:"Inputs.download_inputs",id:"inputsdownload_inputs",level:3},{value:"Inputs.list_inputs",id:"inputslist_inputs",level:3},{value:"Inputs.list_annotations",id:"inputslist_annotations",level:3},{value:"Lister",id:"lister",level:2},{value:"Lister.list_pages_generator",id:"listerlist_pages_generator",level:3},{value:"Model",id:"model",level:2},{value:"Model.from_current_context",id:"modelfrom_current_context",level:3},{value:"Model.list_training_templates",id:"modellist_training_templates",level:3},{value:"Model.get_params",id:"modelget_params",level:3},{value:"Model.update_params",id:"modelupdate_params",level:3},{value:"Model.get_param_info",id:"modelget_param_info",level:3},{value:"Model.train",id:"modeltrain",level:3},{value:"Model.training_status",id:"modeltraining_status",level:3},{value:"Model.delete_version",id:"modeldelete_version",level:3},{value:"Model.create_version",id:"modelcreate_version",level:3},{value:"Model.list_versions",id:"modellist_versions",level:3},{value:"Model.predict",id:"modelpredict",level:3},{value:"Model.async_predict",id:"modelasync_predict",level:3},{value:"Model.load_input_types",id:"modelload_input_types",level:3},{value:"Model.predict_by_filepath",id:"modelpredict_by_filepath",level:3},{value:"Model.predict_by_bytes",id:"modelpredict_by_bytes",level:3},{value:"Model.predict_by_url",id:"modelpredict_by_url",level:3},{value:"Model.generate",id:"modelgenerate",level:3},{value:"Model.async_generate",id:"modelasync_generate",level:3},{value:"Model.generate_by_filepath",id:"modelgenerate_by_filepath",level:3},{value:"Model.generate_by_bytes",id:"modelgenerate_by_bytes",level:3},{value:"Model.generate_by_url",id:"modelgenerate_by_url",level:3},{value:"Model.stream",id:"modelstream",level:3},{value:"Model.async_stream",id:"modelasync_stream",level:3},{value:"Model.stream_by_filepath",id:"modelstream_by_filepath",level:3},{value:"Model.stream_by_bytes",id:"modelstream_by_bytes",level:3},{value:"Model.stream_by_url",id:"modelstream_by_url",level:3},{value:"Model.evaluate",id:"modelevaluate",level:3},{value:"Model.get_eval_by_id",id:"modelget_eval_by_id",level:3},{value:"Model.get_latest_eval",id:"modelget_latest_eval",level:3},{value:"Model.list_evaluations",id:"modellist_evaluations",level:3},{value:"Model.get_eval_by_dataset",id:"modelget_eval_by_dataset",level:3},{value:"Model.get_raw_eval",id:"modelget_raw_eval",level:3},{value:"Model.create_version_by_file",id:"modelcreate_version_by_file",level:3},{value:"Model.create_version_by_url",id:"modelcreate_version_by_url",level:3},{value:"Model.patch_version",id:"modelpatch_version",level:3},{value:"Model.export",id:"modelexport",level:3},{value:"Model.load_info",id:"modelload_info",level:3},{value:"ModelClient",id:"modelclient",level:2},{value:"Instance Methods",id:"instance-methods",level:3},{value:"ModelClient.fetch",id:"modelclientfetch",level:4},{value:"ModelClient.available_methods",id:"modelclientavailable_methods",level:4},{value:"ModelClient.method_signature",id:"modelclientmethod_signature",level:4},{value:"ModelClient.generate_client_script",id:"modelclientgenerate_client_script",level:4},{value:"Dynamic Methods",id:"dynamic-methods",level:3},{value:"Predict Methods",id:"predict-methods",level:4},{value:"Async Predict Methods",id:"async-predict-methods",level:4},{value:"Generate Methods",id:"generate-methods",level:4},{value:"Async Generate Methods",id:"async-generate-methods",level:4},{value:"Stream Methods",id:"stream-methods",level:4},{value:"Async Stream Methods",id:"async-stream-methods",level:4},{value:"Module",id:"module",level:2},{value:"Module.list_versions",id:"modulelist_versions",level:3},{value:"Accessing Module Properties",id:"accessing-module-properties",level:3},{value:"Nodepool",id:"nodepool",level:2},{value:"Nodepool.list_deployments",id:"nodepoollist_deployments",level:3},{value:"Nodepool.create_deployment",id:"nodepoolcreate_deployment",level:3},{value:"Nodepool.deployment",id:"nodepooldeployment",level:3},{value:"Nodepool.delete_deployments",id:"nodepooldelete_deployments",level:3},{value:"Nodepool.runner",id:"nodepoolrunner",level:3},{value:"Nodepool.create_runner",id:"nodepoolcreate_runner",level:3},{value:"Nodepool.delete_runners",id:"nodepooldelete_runners",level:3},{value:"Nodepool.get_runner_selector",id:"nodepoolget_runner_selector",level:3},{value:"Pipeline",id:"pipeline",level:2},{value:"Pipeline.run",id:"pipelinerun",level:3},{value:"Pipeline.monitor_only",id:"pipelinemonitor_only",level:3},{value:"Search",id:"search",level:2},{value:"Search.query",id:"searchquery",level:3},{value:"User",id:"user",level:2},{value:"User.app",id:"userapp",level:3},{value:"User.create_app",id:"usercreate_app",level:3},{value:"User.delete_app",id:"userdelete_app",level:3},{value:"User.list_apps",id:"userlist_apps",level:3},{value:"User.patch_app",id:"userpatch_app",level:3},{value:"User.runner",id:"userrunner",level:3},{value:"User.list_runners",id:"userlist_runners",level:3},{value:"User.delete_runner",id:"userdelete_runner",level:3},{value:"User.compute_cluster",id:"usercompute_cluster",level:3},{value:"User.create_compute_cluster",id:"usercreate_compute_cluster",level:3},{value:"User.list_compute_clusters",id:"userlist_compute_clusters",level:3},{value:"User.delete_compute_clusters",id:"userdelete_compute_clusters",level:3},{value:"User.list_pipelines",id:"userlist_pipelines",level:3},{value:"User.list_pipeline_steps",id:"userlist_pipeline_steps",level:3},{value:"User.get_secret",id:"userget_secret",level:3},{value:"User.list_secrets",id:"userlist_secrets",level:3},{value:"User.create_secrets",id:"usercreate_secrets",level:3},{value:"User.patch_secrets",id:"userpatch_secrets",level:3},{value:"User.delete_secrets",id:"userdelete_secrets",level:3},{value:"User.list_models",id:"userlist_models",level:3},{value:"User.get_user_info",id:"userget_user_info",level:3},{value:"Workflow",id:"workflow",level:2},{value:"Workflow.predict",id:"workflowpredict",level:3},{value:"Workflow.predict_by_filepath",id:"workflowpredict_by_filepath",level:3},{value:"Workflow.predict_by_bytes",id:"workflowpredict_by_bytes",level:3},{value:"Workflow.predict_by_url",id:"workflowpredict_by_url",level:3},{value:"Workflow.list_versions",id:"workflowlist_versions",level:3},{value:"Workflow.export",id:"workflowexport",level:3},{value:"Workflow.load_info",id:"workflowload_info",level:3}];function a(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"python-api-reference",children:"Python API Reference"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Clarifai Python SDK API Reference"})}),"\n",(0,r.jsx)("hr",{}),"\n",(0,r.jsxs)(n.p,{children:["This is the API Reference documentation extracted from the ",(0,r.jsx)(n.a,{href:"https://github.com/Clarifai/clarifai-python/tree/master/clarifai/client",children:"source code"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"app",children:(0,r.jsx)(n.a,{href:"https://github.com/Clarifai/clarifai-python/blob/master/clarifai/client/app.py",children:"App"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'class App(url=None, app_id=None, user_id=None, base_url="https://api.clarifai.com", pat=None, token=None, root_certificates_path=None, **kwargs)\n'})}),"\n",(0,r.jsx)(n.p,{children:"App is a class that provides access to Clarifai API endpoints related to App information."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"url"})," (",(0,r.jsx)(n.em,{children:"str"}),") - The URL to initialize the app object"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"app_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - The App ID for the App to interact with"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"user_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - The user ID of the owner"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"base_url"})," (",(0,r.jsx)(n.em,{children:"str"}),') - Base API url. Default "',(0,r.jsx)(n.a,{href:"https://api.clarifai.com",children:"https://api.clarifai.com"}),'"']}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"pat"})," (",(0,r.jsx)(n.em,{children:"str"}),") - A personal access token for authentication. Can be set as env var CLARIFAI_PAT"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"token"})," (",(0,r.jsx)(n.em,{children:"str"}),") - A session token for authentication. Can be set as env var CLARIFAI_SESSION_TOKEN"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"root_certificates_path"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Path to the SSL root certificates file"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"**kwargs"})," - Additional keyword arguments:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"name"})," (",(0,r.jsx)(n.em,{children:"str"}),") - The name of the app"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"description"})," (",(0,r.jsx)(n.em,{children:"str"}),") - The description of the app"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"appcreate_concepts",children:"App.create_concepts"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"App.create_concepts(concept_ids, concepts=[]) \n"})}),"\n",(0,r.jsx)(n.p,{children:"Add concepts to the app."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"concept_ids"})," (",(0,r.jsx)(n.em,{children:"List[str]"}),") - List of concept IDs to add"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"concepts"})," (",(0,r.jsx)(n.em,{children:"List[str]"}),") - Optional list of concept names"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from clarifai.client.app import App\napp = App(app_id="app_id", user_id="user_id")\napp.create_concepts(concept_ids=["concept_id_1", "concept_id_2"])\n'})}),"\n",(0,r.jsx)(n.h3,{id:"appcreate_concept_relations",children:"App.create_concept_relations"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"App.create_concept_relations(subject_concept_id, object_concept_ids, predicates) \n"})}),"\n",(0,r.jsx)(n.p,{children:"Creates concept relations between concepts."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"subject_concept_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Subject concept ID"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"object_concept_ids"})," (",(0,r.jsx)(n.em,{children:"List[str]"}),") - Object concept IDs"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"predicates"})," (",(0,r.jsx)(n.em,{children:"List[str]"}),") - Relation predicates"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from clarifai.client.app import App\napp = App(app_id="app_id", user_id="user_id")\napp.create_concept_relations(\n    subject_concept_id="subject_id",\n    object_concept_ids=["object_id_1", "object_id_2"],\n    predicates=["predicate_1", "predicate_2"]\n)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"appcreate_dataset",children:"App.create_dataset"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"App.create_dataset(dataset_id, **kwargs) \n"})}),"\n",(0,r.jsx)(n.p,{children:"Creates a dataset in the app."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"dataset_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - The dataset ID to create"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"**kwargs"})," - Additional dataset arguments"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Dataset object for the created dataset"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from clarifai.client.app import App\napp = App(app_id="app_id", user_id="user_id")\ndataset = app.create_dataset(dataset_id="dataset_id")\n'})}),"\n",(0,r.jsx)(n.h3,{id:"appcreate_model",children:"App.create_model"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"App.create_model(model_id, **kwargs) \n"})}),"\n",(0,r.jsx)(n.p,{children:"Creates a model in the app."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"model_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - The model ID to create"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"**kwargs"})," - Additional model arguments"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Model object for the created model"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from clarifai.client.app import App\napp = App(app_id="app_id", user_id="user_id")\nmodel = app.create_model(model_id="model_id")\n'})}),"\n",(0,r.jsx)(n.h3,{id:"appcreate_module",children:"App.create_module"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"App.create_module(module_id, description, **kwargs) \n"})}),"\n",(0,r.jsx)(n.p,{children:"Creates a module in the app."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"module_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - The module ID to create"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"description"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Module description"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"**kwargs"})," - Additional module arguments"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Module object for the created module"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from clarifai.client.app import App\napp = App(app_id="app_id", user_id="user_id")\nmodule = app.create_module(module_id="module_id", description="Module description")\n'})}),"\n",(0,r.jsx)(n.h3,{id:"appcreate_workflow",children:"App.create_workflow"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"App.create_workflow(config_filepath, generate_new_id=False, display=True) \n"})}),"\n",(0,r.jsx)(n.p,{children:"Creates a workflow in the app."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"config_filepath"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Path to workflow config YAML file"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"generate_new_id"})," (",(0,r.jsx)(n.em,{children:"bool"}),") - Generate new workflow ID if True"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"display"})," (",(0,r.jsx)(n.em,{children:"bool"}),") - Display workflow tree if True"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Workflow object for the created workflow"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from clarifai.client.app import App\napp = App(app_id="app_id", user_id="user_id")\nworkflow = app.create_workflow(config_filepath="config.yml")\n'})}),"\n",(0,r.jsx)(n.h3,{id:"appdataset",children:"App.dataset"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"App.dataset(dataset_id, dataset_version_id=None, **kwargs) \n"})}),"\n",(0,r.jsx)(n.p,{children:"Returns a Dataset object."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"dataset_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Dataset ID to get"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"dataset_version_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Optional dataset version ID"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"**kwargs"})," - Additional arguments"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Dataset object for the specified ID"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from clarifai.client.app import App\napp = App(app_id="app_id", user_id="user_id")\ndataset = app.dataset(dataset_id="dataset_id")\n'})}),"\n",(0,r.jsx)(n.h3,{id:"appdelete_concept_relations",children:"App.delete_concept_relations"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"App.delete_concept_relations(concept_id, concept_relation_ids=[]) \n"})}),"\n",(0,r.jsx)(n.p,{children:"Deletes concept relations for a concept."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"concept_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Concept ID to delete relations for"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"concept_relation_ids"})," (",(0,r.jsx)(n.em,{children:"List[str]"}),") - Optional specific relation IDs to delete"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from clarifai.client.app import App\napp = App(app_id="app_id", user_id="user_id")\napp.delete_concept_relations(concept_id="concept_id")\n'})}),"\n",(0,r.jsx)(n.h3,{id:"appdelete_dataset",children:"App.delete_dataset"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"App.delete_dataset(dataset_id) \n"})}),"\n",(0,r.jsx)(n.p,{children:"Deletes a dataset by ID."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"dataset_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Dataset ID to delete"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from clarifai.client.app import App\napp = App(app_id="app_id", user_id="user_id")\napp.delete_dataset(dataset_id="dataset_id")\n'})}),"\n",(0,r.jsx)(n.h3,{id:"appdelete_model",children:"App.delete_model"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"App.delete_model(model_id) \n"})}),"\n",(0,r.jsx)(n.p,{children:"Deletes a model by ID."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"model_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Model ID to delete"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from clarifai.client.app import App\napp = App(app_id="app_id", user_id="user_id")\napp.delete_model(model_id="model_id")\n'})}),"\n",(0,r.jsx)(n.h3,{id:"appdelete_module",children:"App.delete_module"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"App.delete_module(module_id) \n"})}),"\n",(0,r.jsx)(n.p,{children:"Deletes a module by ID."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"module_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Module ID to delete"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from clarifai.client.app import App\napp = App(app_id="app_id", user_id="user_id")\napp.delete_module(module_id="module_id")\n'})}),"\n",(0,r.jsx)(n.h3,{id:"appdelete_workflow",children:"App.delete_workflow"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"App.delete_workflow(workflow_id) \n"})}),"\n",(0,r.jsx)(n.p,{children:"Deletes a workflow by ID."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"workflow_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Workflow ID to delete"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from clarifai.client.app import App\napp = App(app_id="app_id", user_id="user_id")\napp.delete_workflow(workflow_id="workflow_id")\n'})}),"\n",(0,r.jsx)(n.h3,{id:"appget_input_count",children:"App.get_input_count"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"App.get_input_count() \n"})}),"\n",(0,r.jsx)(n.p,{children:"Gets count of all inputs in the app."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Total number of processed inputs"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from clarifai.client.app import App\napp = App(app_id="app_id", user_id="user_id")\ncount = app.get_input_count()\n'})}),"\n",(0,r.jsx)(n.h3,{id:"appinputs",children:"App.inputs"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"App.inputs()\n"})}),"\n",(0,r.jsx)(n.p,{children:"Returns an Input object."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Inputs object for managing app inputs"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"applist_concepts",children:"App.list_concepts"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"App.list_concepts(page_no=None, per_page=None)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Lists all concepts in the app."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"page_no"})," (",(0,r.jsx)(n.em,{children:"int"}),") - Page number to list"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"per_page"})," (",(0,r.jsx)(n.em,{children:"int"}),") - Items per page"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Yields:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Concept objects"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from clarifai.client.app import App\napp = App(app_id="app_id", user_id="user_id")\nconcepts = list(app.list_concepts())\n'})}),"\n",(0,r.jsx)(n.h3,{id:"applist_datasets",children:"App.list_datasets"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"App.list_datasets(page_no=None, per_page=None)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Lists all datasets in the app."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"page_no"})," (",(0,r.jsx)(n.em,{children:"int"}),") - Page number to list"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"per_page"})," (",(0,r.jsx)(n.em,{children:"int"}),") - Items per page"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Yields:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Dataset objects"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from clarifai.client.app import App\napp = App(app_id="app_id", user_id="user_id")\ndatasets = list(app.list_datasets())\n'})}),"\n",(0,r.jsx)(n.h3,{id:"applist_installed_module_versions",children:"App.list_installed_module_versions"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"App.list_installed_module_versions(filter_by={}, page_no=None, per_page=None)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Lists installed module versions."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"filter_by"})," (",(0,r.jsx)(n.em,{children:"dict"}),") - Filters to apply"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"page_no"})," (",(0,r.jsx)(n.em,{children:"int"}),") - Page number to list"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"per_page"})," (",(0,r.jsx)(n.em,{children:"int"}),") - Items per page"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Yields:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Module objects"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from clarifai.client.app import App\napp = App(app_id="app_id", user_id="user_id")\nversions = list(app.list_installed_module_versions())\n'})}),"\n",(0,r.jsx)(n.h3,{id:"applist_models",children:"App.list_models"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"App.list_models(filter_by={}, only_in_app=True, page_no=None, per_page=None)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Lists models in the app."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"filter_by"})," (",(0,r.jsx)(n.em,{children:"dict"}),") - Filters to apply"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"only_in_app"})," (",(0,r.jsx)(n.em,{children:"bool"}),") - Only list app models if True"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"page_no"})," (",(0,r.jsx)(n.em,{children:"int"}),") - Page number to list"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"per_page"})," (",(0,r.jsx)(n.em,{children:"int"}),") - Items per page"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Yields:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Model objects"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from clarifai.client.app import App\napp = App(app_id="app_id", user_id="user_id")\nmodels = list(app.list_models())\n'})}),"\n",(0,r.jsx)(n.h3,{id:"applist_modules",children:"App.list_modules"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"App.list_modules(filter_by={}, only_in_app=True, page_no=None, per_page=None)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Lists modules in the app."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"filter_by"})," (",(0,r.jsx)(n.em,{children:"dict"}),") - Filters to apply"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"only_in_app"})," (",(0,r.jsx)(n.em,{children:"bool"}),") - Only list app modules if True"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"page_no"})," (",(0,r.jsx)(n.em,{children:"int"}),") - Page number to list"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"per_page"})," (",(0,r.jsx)(n.em,{children:"int"}),") - Items per page"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Yields:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Module objects"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from clarifai.client.app import App\napp = App(app_id="app_id", user_id="user_id")\nmodules = list(app.list_modules())\n'})}),"\n",(0,r.jsx)(n.h3,{id:"applist_pipelines",children:"App.list_pipelines"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"App.list_pipelines(filter_by={}, only_in_app=True, page_no=None, per_page=None)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Lists all pipelines for the user."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"filter_by"})," (",(0,r.jsx)(n.em,{children:"dict"}),") - Filters to apply"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"only_in_app"})," (",(0,r.jsx)(n.em,{children:"bool"}),") - Only list app pipelines if True"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"page_no"})," (",(0,r.jsx)(n.em,{children:"int"}),") - Page number to list"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"per_page"})," (",(0,r.jsx)(n.em,{children:"int"}),") - Items per page"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Yields:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Pipeline objects"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from clarifai.client.app import App\napp = App(app_id="app_id", user_id="user_id")\npipelines = list(app.list_pipelines())\n'})}),"\n",(0,r.jsx)(n.h3,{id:"applist_pipeline_steps",children:"App.list_pipeline_steps"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"App.list_pipeline_steps(pipeline_id=None, filter_by={}, only_in_app=True, page_no=None, per_page=None)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Lists all pipeline steps for the user."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"pipeline_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Optional pipeline ID to filter steps"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"filter_by"})," (",(0,r.jsx)(n.em,{children:"dict"}),") - Filters to apply"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"only_in_app"})," (",(0,r.jsx)(n.em,{children:"bool"}),") - Only list app pipeline steps if True"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"page_no"})," (",(0,r.jsx)(n.em,{children:"int"}),") - Page number to list"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"per_page"})," (",(0,r.jsx)(n.em,{children:"int"}),") - Items per page"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Yields:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"PipelineStep objects"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from clarifai.client.app import App\napp = App(app_id="app_id", user_id="user_id")\npipeline_steps = list(app.list_pipeline_steps())\n'})}),"\n",(0,r.jsx)(n.h3,{id:"applist_trainable_model_types",children:"App.list_trainable_model_types"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"App.list_trainable_model_types()\n"})}),"\n",(0,r.jsx)(n.p,{children:"Lists trainable model types."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"List of trainable model type names"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from clarifai.client.app import App\ntypes = app.list_trainable_model_types()\n"})}),"\n",(0,r.jsx)(n.h3,{id:"applist_workflows",children:"App.list_workflows"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"App.list_workflows(filter_by={}, only_in_app=True, page_no=None, per_page=None)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Lists workflows in the app."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"filter_by"})," (",(0,r.jsx)(n.em,{children:"dict"}),") - Filters to apply"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"only_in_app"})," (",(0,r.jsx)(n.em,{children:"bool"}),") - Only list app workflows if True"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"page_no"})," (",(0,r.jsx)(n.em,{children:"int"}),") - Page number to list"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"per_page"})," (",(0,r.jsx)(n.em,{children:"int"}),") - Items per page"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Yields:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Workflow objects"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from clarifai.client.app import App\napp = App(app_id="app_id", user_id="user_id")\nworkflows = list(app.list_workflows())\n'})}),"\n",(0,r.jsx)(n.h3,{id:"appmodel",children:"App.model"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"App.model(model_id, model_version={'id': \"\"}, **kwargs)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Returns a Model object."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"model_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Model ID to get"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"model_version"})," (",(0,r.jsx)(n.em,{children:"Dict"}),") - Optional model version info"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"**kwargs"})," - Additional arguments"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Model object for specified ID"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from clarifai.client.app import App\napp = App(app_id="app_id", user_id="user_id")\nmodel = app.model(model_id="model_id", model_version={"id": "model_version_id"})\n'})}),"\n",(0,r.jsx)(n.h3,{id:"appmodule",children:"App.module"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"App.module(module_id, **kwargs)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Returns a Module object."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"module_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Module ID to get"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"**kwargs"})," - Additional arguments"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Module object for specified ID"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from clarifai.client.app import App\napp = App(app_id="app_id", user_id="user_id")\nmodule = app.module(module_id="module_id")\n'})}),"\n",(0,r.jsx)(n.h3,{id:"apppatch_dataset",children:"App.patch_dataset"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"App.patch_dataset(dataset_id, action='merge', **kwargs)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Updates a dataset."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"dataset_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Dataset ID to update"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"action"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Update action ('merge'/'overwrite'/'remove')"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"**kwargs"})," - Properties to update"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Updated Dataset object"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"apppatch_model",children:"App.patch_model"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"App.patch_model(model_id, action='merge', **kwargs)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Updates a model."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"model_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Model ID to update"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"action"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Update action ('merge'/'overwrite'/'remove')"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"**kwargs"})," - Properties to update"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Updated Model object"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"apppatch_workflow",children:"App.patch_workflow"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"App.patch_workflow(workflow_id, action='merge', config_filepath=None, **kwargs)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Updates a workflow by workflow id."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"workflow_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - The Workflow ID to patch"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"action"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Action to perform ('merge'/'overwrite'/'remove')"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"config_filepath"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Optional path to workflow config YAML file"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"**kwargs"})," - Additional properties to update"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Updated Workflow object"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from clarifai.client.app import App\napp = App(app_id="app_id", user_id="user_id")\nworkflow = app.patch_workflow(workflow_id="workflow_id", description="New description")\n'})}),"\n",(0,r.jsx)(n.h3,{id:"appsearch",children:"App.search"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"App.search(**kwargs)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Returns a Search object for the user and app ID."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"See the Search class in clarifai.client.search for kwargs"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Search object for the user and app ID"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from clarifai.client.app import App\napp = App(app_id="app_id", user_id="user_id")\nsearch_client = app.search(top_k=12, metric="euclidean")\n'})}),"\n",(0,r.jsx)(n.h3,{id:"appsearch_concept_relations",children:"App.search_concept_relations"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"App.search_concept_relations(concept_id=None, predicate=None, page_no=None, per_page=None, show_tree=False)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Lists all concept relations of the app."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"concept_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - The concept ID to filter the concept relations"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"predicate"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Type of relation to filter ('hypernym', 'hyponym', 'synonym')"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"page_no"})," (",(0,r.jsx)(n.em,{children:"int"}),") - The page number to list"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"per_page"})," (",(0,r.jsx)(n.em,{children:"int"}),") - The number of items per page"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"show_tree"})," (",(0,r.jsx)(n.em,{children:"bool"}),") - If True, prints rich tree representation of concept relations"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Yields:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"ConceptRelation objects"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from clarifai.client.app import App\napp = App(app_id="app_id", user_id="user_id")\nrelations = list(app.search_concept_relations())\n'})}),"\n",(0,r.jsx)(n.h3,{id:"appworkflow",children:"App.workflow"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"App.workflow(workflow_id, **kwargs)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Returns a workflow object for the existing workflow ID."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"workflow_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - The workflow ID to interact with"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"**kwargs"})," - Additional keyword arguments"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Workflow object for the specified ID"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from clarifai.client.app import App\napp = App(app_id="app_id", user_id="user_id")\nworkflow = app.workflow(workflow_id="workflow_id")\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Notes:"})," For list methods: Defaults to 16 per page if page_no is specified and per_page is not specified. If both page_no and per_page are None, then lists all resources. The App class inherits from Lister and BaseClient, providing pagination and authentication functionality."]}),"\n",(0,r.jsx)(n.h2,{id:"computecluster",children:(0,r.jsx)(n.a,{href:"https://github.com/Clarifai/clarifai-python/blob/master/clarifai/client/compute_cluster.py",children:"ComputeCluster"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'class ComputeCluster(compute_cluster_id=None, user_id=None, base_url="https://api.clarifai.com", pat=None, token=None, root_certificates_path=None, **kwargs)\n'})}),"\n",(0,r.jsx)(n.p,{children:"ComputeCluster is a class that provides access to Clarifai API endpoints related to Compute Cluster information."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"compute_cluster_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - The ComputeCluster ID for the ComputeCluster to interact with"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"user_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - The user ID of the user"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"base_url"})," (",(0,r.jsx)(n.em,{children:"str"}),') - Base API url. Default "',(0,r.jsx)(n.a,{href:"https://api.clarifai.com",children:"https://api.clarifai.com"}),'"']}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"pat"})," (",(0,r.jsx)(n.em,{children:"str"}),") - A personal access token for authentication. Can be set as env var CLARIFAI_PAT"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"token"})," (",(0,r.jsx)(n.em,{children:"str"}),") - A session token for authentication. Accepts either a session token or a pat. Can be set as env var CLARIFAI_SESSION_TOKEN"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"root_certificates_path"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Path to the SSL root certificates file, used to establish secure gRPC connections"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"**kwargs"})," - Additional keyword arguments to be passed to the compute cluster"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"computeclusterlist_nodepools",children:"ComputeCluster.list_nodepools"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"ComputeCluster.list_nodepools(page_no=None, per_page=None)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Lists all the available nodepools of the compute cluster."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"page_no"})," (",(0,r.jsx)(n.em,{children:"int"}),") - The page number to list"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"per_page"})," (",(0,r.jsx)(n.em,{children:"int"}),") - The number of items per page"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Yields:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Nodepool objects for the nodepools in the compute cluster"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from clarifai.client.compute_cluster import ComputeCluster\ncompute_cluster = ComputeCluster(compute_cluster_id="compute_cluster_id", user_id="user_id")\nall_nodepools = list(compute_cluster.list_nodepools())\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Note:"}),"\nDefaults to 16 per page if page_no is specified and per_page is not specified.\nIf both page_no and per_page are None, then lists all the resources."]}),"\n",(0,r.jsx)(n.h3,{id:"computeclustercreate_nodepool",children:"ComputeCluster.create_nodepool"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"ComputeCluster.create_nodepool(config_filepath=None, nodepool_id=None, nodepool_config=None)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Creates a nodepool for the compute cluster."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"config_filepath"})," (",(0,r.jsx)(n.em,{children:"str"}),") - The path to the nodepool config file"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"nodepool_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - New nodepool ID for the nodepool to create"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"nodepool_config"})," (",(0,r.jsx)(n.em,{children:"Dict[str, Any]"}),") - Nodepool configuration dictionary"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Nodepool: A Nodepool object for the specified nodepool ID"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from clarifai.client.compute_cluster import ComputeCluster\ncompute_cluster = ComputeCluster(compute_cluster_id="compute_cluster_id", user_id="user_id")\nnodepool = compute_cluster.create_nodepool(config_filepath="config.yml")\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Note:"}),"\nEither config_filepath or nodepool_config must be provided, but not both."]}),"\n",(0,r.jsx)(n.h3,{id:"computeclusternodepool",children:"ComputeCluster.nodepool"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"ComputeCluster.nodepool(nodepool_id)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Returns a Nodepool object for the existing nodepool ID."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"nodepool_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - The nodepool ID for the nodepool to interact with"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Nodepool: A Nodepool object for the existing nodepool ID"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from clarifai.client.compute_cluster import ComputeCluster\ncompute_cluster = ComputeCluster(compute_cluster_id="compute_cluster_id", user_id="user_id")\nnodepool = compute_cluster.nodepool(nodepool_id="nodepool_id")\n'})}),"\n",(0,r.jsx)(n.h3,{id:"computeclusterdelete_nodepools",children:"ComputeCluster.delete_nodepools"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"ComputeCluster.delete_nodepools(nodepool_ids)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Deletes list of nodepools for the compute cluster."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"nodepool_ids"})," (",(0,r.jsx)(n.em,{children:"List[str]"}),") - The nodepool IDs of the compute cluster to delete"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from clarifai.client.compute_cluster import ComputeCluster\ncompute_cluster = ComputeCluster(compute_cluster_id="compute_cluster_id", user_id="user_id")\ncompute_cluster.delete_nodepools(nodepool_ids=["nodepool_id1", "nodepool_id2"])\n'})}),"\n",(0,r.jsx)(n.h2,{id:"dataset",children:(0,r.jsx)(n.a,{href:"https://github.com/Clarifai/clarifai-python/blob/master/clarifai/client/dataset.py",children:"Dataset"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'class Dataset(url=None, dataset_id=None, dataset_version_id=None, base_url="https://api.clarifai.com", pat=None, token=None, root_certificates_path=None, **kwargs)\n'})}),"\n",(0,r.jsx)(n.p,{children:"Dataset is a class that provides access to Clarifai API endpoints related to Dataset information."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"url"})," (",(0,r.jsx)(n.em,{children:"str"}),") - The URL to initialize the dataset object"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"dataset_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - The Dataset ID within the App to interact with"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"dataset_version_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - The Dataset Version ID within the Dataset to interact with"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"base_url"})," (",(0,r.jsx)(n.em,{children:"str"}),') - Base API url. Default "',(0,r.jsx)(n.a,{href:"https://api.clarifai.com",children:"https://api.clarifai.com"}),'"']}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"pat"})," (",(0,r.jsx)(n.em,{children:"str"}),") - A personal access token for authentication. Can be set as env var CLARIFAI_PAT"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"token"})," (",(0,r.jsx)(n.em,{children:"str"}),") - A session token for authentication. Accepts either a session token or a pat. Can be set as env var CLARIFAI_SESSION_TOKEN"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"root_certificates_path"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Path to the SSL root certificates file, used to establish secure gRPC connections"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"**kwargs"})," - Additional keyword arguments to be passed to the Dataset"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"datasetcreate_version",children:"Dataset.create_version"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Dataset.create_version(**kwargs)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Creates a dataset version for the Dataset."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"**kwargs"})," - Additional keyword arguments to be passed to Dataset Version:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"description"})," (",(0,r.jsx)(n.em,{children:"str"}),") - The description of the dataset version"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"metadata"})," (",(0,r.jsx)(n.em,{children:"Dict[str, Any]"}),") - The metadata dictionary for the dataset version"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Dataset: A Dataset object for the newly created dataset version"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from clarifai.client.dataset import Dataset\ndataset = Dataset(dataset_id='dataset_id', user_id='user_id', app_id='app_id')\ndataset_version = dataset.create_version(description='dataset_version_description')\n"})}),"\n",(0,r.jsx)(n.h3,{id:"datasetdelete_version",children:"Dataset.delete_version"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Dataset.delete_version(version_id)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Deletes a dataset version for the Dataset."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"version_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - The version ID to delete"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from clarifai.client.dataset import Dataset\ndataset = Dataset(dataset_id='dataset_id', user_id='user_id', app_id='app_id')\ndataset.delete_version(version_id='version_id')\n"})}),"\n",(0,r.jsx)(n.h3,{id:"datasetlist_versions",children:"Dataset.list_versions"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Dataset.list_versions(page_no=None, per_page=None)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Lists all the versions for the dataset."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"page_no"})," (",(0,r.jsx)(n.em,{children:"int"}),") - The page number to list. If None, lists all pages"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"per_page"})," (",(0,r.jsx)(n.em,{children:"int"}),") - The number of items per page. If None, uses default"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Yields:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Dataset: Dataset objects for the versions of the dataset"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from clarifai.client.dataset import Dataset\ndataset = Dataset(dataset_id='dataset_id', user_id='user_id', app_id='app_id')\nall_dataset_versions = list(dataset.list_versions())\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Note:"}),"\nDefaults to 16 per page if page_no is specified and per_page is not specified.\nIf both page_no and per_page are None, then lists all the resources."]}),"\n",(0,r.jsx)(n.h3,{id:"datasetlist_inputs",children:"Dataset.list_inputs"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Dataset.list_inputs(page_no=None, per_page=None, input_type=None)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Lists all the inputs for the dataset."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"page_no"})," (",(0,r.jsx)(n.em,{children:"int"}),") - The page number to list"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"per_page"})," (",(0,r.jsx)(n.em,{children:"int"}),") - The number of items per page"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"input_type"})," (",(0,r.jsx)(n.em,{children:"str"}),") - The type of input to list. Options: 'image', 'video', 'audio', 'text'"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Yields:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Input: Input objects in the dataset"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from clarifai.client.dataset import Dataset\ndataset = Dataset(dataset_id='dataset_id', user_id='user_id', app_id='app_id')\nall_dataset_inputs = list(dataset.list_inputs())\n"})}),"\n",(0,r.jsx)(n.h3,{id:"datasetupload_dataset",children:"Dataset.upload_dataset"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Dataset.upload_dataset(dataloader, batch_size=32, get_upload_status=False, log_warnings=False, **kwargs)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Uploads a dataset to the app."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"dataloader"})," (",(0,r.jsx)(n.em,{children:"Type[ClarifaiDataLoader]"}),") - ClarifaiDataLoader object"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"batch_size"})," (",(0,r.jsx)(n.em,{children:"int"}),") - Batch size for concurrent upload of inputs and annotations (max: 128)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"get_upload_status"})," (",(0,r.jsx)(n.em,{children:"bool"}),") - True if you want to get the upload status of the dataset"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"log_warnings"})," (",(0,r.jsx)(n.em,{children:"bool"}),") - True if you want to save log warnings in a file"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"**kwargs"})," - Additional keyword arguments for retry uploading functionality"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from clarifai.client.dataset import Dataset\ndataset = Dataset(dataset_id='dataset_id')\ndataset.upload_dataset(dataloader=my_dataloader)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"datasetretry_upload_from_logs",children:"Dataset.retry_upload_from_logs"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Dataset.retry_upload_from_logs(log_file_path, dataloader, retry_duplicates=False, log_warnings=False, **kwargs)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Retries failed uploads from the log file."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"log_file_path"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Path to the log file"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"dataloader"})," (",(0,r.jsx)(n.em,{children:"Type[ClarifaiDataLoader]"}),") - ClarifaiDataLoader object"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"retry_duplicates"})," (",(0,r.jsx)(n.em,{children:"bool"}),") - True if you want to retry duplicate inputs"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"log_warnings"})," (",(0,r.jsx)(n.em,{children:"bool"}),") - True if you want to save log warnings in a file"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"**kwargs"})," - Additional keyword arguments for retry uploading functionality"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from clarifai.client.dataset import Dataset\ndataset = Dataset(dataset_id='dataset_id')\ndataset.retry_upload_from_logs(log_file_path='upload.log', dataloader=my_dataloader)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"datasetupload_from_csv",children:"Dataset.upload_from_csv"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Dataset.upload_from_csv(csv_path, input_type='text', csv_type=None, labels=True, batch_size=128)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Uploads dataset from a csv file."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"csv_path"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Path to the csv file"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"input_type"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Type of the dataset ('text', 'image', 'video', 'audio')"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"csv_type"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Type of the csv file ('raw', 'url', 'file_path')"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"labels"})," (",(0,r.jsx)(n.em,{children:"bool"}),") - True if csv file has labels column"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"batch_size"})," (",(0,r.jsx)(n.em,{children:"int"}),") - Batch size for concurrent upload of inputs and annotations"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from clarifai.client.dataset import Dataset\ndataset = Dataset(user_id='user_id', app_id='demo_app', dataset_id='demo_dataset')\ndataset.upload_from_csv(csv_path='csv_path', input_type='text', csv_type='raw', labels=True)\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Note:"}),"\nCSV file supports 'inputid', 'input', 'concepts', 'metadata', 'geopoints' columns.\nAll the data in the CSV should be in double quotes.\nmetadata should be in single quotes format. Example: ",(0,r.jsx)(n.code,{children:"\"{'key': 'value'}\""}),'\ngeopoints should be in "long,lat" format.']}),"\n",(0,r.jsx)(n.h3,{id:"datasetupload_from_folder",children:"Dataset.upload_from_folder"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Dataset.upload_from_folder(folder_path, input_type, labels=False, batch_size=128)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Upload dataset from folder."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"folder_path"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Path to the folder containing images"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"input_type"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Type of the dataset ('text', 'image')"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"labels"})," (",(0,r.jsx)(n.em,{children:"bool"}),") - True if folder name is the label for the inputs"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"batch_size"})," (",(0,r.jsx)(n.em,{children:"int"}),") - Batch size for concurrent upload of inputs and annotations"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from clarifai.client.dataset import Dataset\ndataset = Dataset(user_id='user_id', app_id='demo_app', dataset_id='demo_dataset')\ndataset.upload_from_folder(folder_path='folder_path', input_type='text', labels=True)\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Note:"})," The filename is used as the input_id."]}),"\n",(0,r.jsx)(n.h3,{id:"datasetget_upload_status",children:"Dataset.get_upload_status"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Dataset.get_upload_status(dataloader=None, delete_version=False, timeout=600, pre_upload_stats=None, pre_upload=False)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Creates a new dataset version and displays the upload status of the dataset."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"dataloader"})," (",(0,r.jsx)(n.em,{children:"Type[ClarifaiDataLoader]"}),") - ClarifaiDataLoader object"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"delete_version"})," (",(0,r.jsx)(n.em,{children:"bool"}),") - True if you want to delete the version after getting the upload status"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"timeout"})," (",(0,r.jsx)(n.em,{children:"int"}),") - Timeout in seconds for getting the upload status. Default is 600 seconds"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"pre_upload_stats"})," (",(0,r.jsx)(n.em,{children:"Tuple[Dict[str, int], Dict[str, int]]"}),") - The pre upload stats for the dataset"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"pre_upload"})," (",(0,r.jsx)(n.em,{children:"bool"}),") - True if you want to get the pre upload stats for the dataset"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Optional[Tuple[Dict[str, int], Dict[str, int]]]: Pre-upload statistics if pre_upload=True"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from clarifai.client.dataset import Dataset\ndataset = Dataset(dataset_id='dataset_id', user_id='user_id', app_id='app_id')\ndataset.get_upload_status(dataloader=my_dataloader)\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Note:"}),"\nThis is a beta feature and is subject to change."]}),"\n",(0,r.jsx)(n.h3,{id:"datasetmerge_dataset",children:"Dataset.merge_dataset"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Dataset.merge_dataset(merge_dataset_id)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Merges the another dataset into current dataset."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"merge_dataset_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - The dataset ID of the dataset to merge"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from clarifai.client.dataset import Dataset\ndataset = Dataset(dataset_id='dataset_id', user_id='user_id', app_id='app_id')\ndataset.merge_dataset(merge_dataset_id='merge_dataset_id')\n"})}),"\n",(0,r.jsx)(n.h3,{id:"datasetarchive_zip",children:"Dataset.archive_zip"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Dataset.archive_zip(wait=True)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Exports the dataset to a zip file URL."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"wait"})," (",(0,r.jsx)(n.em,{children:"bool"}),") - Wait for export completion if True"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"URL to download the archive"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from clarifai.client.dataset import Dataset\ndataset = Dataset(dataset_id='dataset_id')\narchive_url = dataset.archive_zip()\n"})}),"\n",(0,r.jsx)(n.h3,{id:"datasetexport",children:"Dataset.export"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Dataset.export(save_path, archive_url=None, local_archive_path=None, split='all', num_workers=4)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Exports the Clarifai protobuf dataset to a local archive."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"save_path"})," (",(0,r.jsx)(n.em,{children:"str"}),") - The path to save the archive to"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"archive_url"})," (",(0,r.jsx)(n.em,{children:"str"}),") - The URL to the Clarifai protobuf archive"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"local_archive_path"})," (",(0,r.jsx)(n.em,{children:"str"}),") - The path to the local Clarifai protobuf archive"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"split"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Export dataset inputs in the directory format ",(0,r.jsx)(n.code,{children:"{split}/{input_type}"}),". Default is 'all'"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"num_workers"})," (",(0,r.jsx)(n.em,{children:"int"}),") - Number of workers to use for downloading the archive. Default is 4"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from clarifai.client.dataset import Dataset\ndataset = Dataset(dataset_id='dataset_id')\ndataset.export(save_path='output.zip')\n"})}),"\n",(0,r.jsx)(n.h2,{id:"deployment",children:(0,r.jsx)(n.a,{href:"https://github.com/Clarifai/clarifai-python/blob/master/clarifai/client/deployment.py",children:"Deployment"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'class Deployment(deployment_id=None, user_id=None, base_url="https://api.clarifai.com", pat=None, token=None, root_certificates_path=None, **kwargs)\n'})}),"\n",(0,r.jsx)(n.p,{children:"Deployment is a class that provides access to Clarifai API endpoints related to Deployment information."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"deployment_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - The Deployment ID for the Deployment to interact with"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"user_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - The user ID of the user"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"base_url"})," (",(0,r.jsx)(n.em,{children:"str"}),') - Base API url. Default "',(0,r.jsx)(n.a,{href:"https://api.clarifai.com",children:"https://api.clarifai.com"}),'"']}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"pat"})," (",(0,r.jsx)(n.em,{children:"str"}),") - A personal access token for authentication. Can be set as env var CLARIFAI_PAT"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"token"})," (",(0,r.jsx)(n.em,{children:"str"}),") - A session token for authentication. Accepts either a session token or a pat. Can be set as env var CLARIFAI_SESSION_TOKEN"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"root_certificates_path"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Path to the SSL root certificates file, used to establish secure gRPC connections"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"**kwargs"})," - Additional keyword arguments to be passed to the deployment"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"deploymentget_runner_selector",children:"Deployment.get_runner_selector"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Deployment.get_runner_selector(user_id, deployment_id)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Returns a RunnerSelector object for the given deployment_id."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"user_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - The user ID for the deployment"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"deployment_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - The deployment ID for the deployment"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"resources_pb2.RunnerSelector"}),": A RunnerSelector object for the given deployment_id"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from clarifai.client.deployment import Deployment\nrunner_selector = Deployment.get_runner_selector(user_id="user_id", deployment_id="deployment_id")\n'})}),"\n",(0,r.jsx)(n.h2,{id:"inputs",children:(0,r.jsx)(n.a,{href:"https://github.com/Clarifai/clarifai-python/blob/master/clarifai/client/input.py",children:"Inputs"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'class Inputs(user_id=None, app_id=None, logger_level="INFO", base_url="https://api.clarifai.com", pat=None, token=None, root_certificates_path=None, **kwargs)\n'})}),"\n",(0,r.jsx)(n.p,{children:"Inputs is a class that provides access to Clarifai API endpoints related to Input information."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"user_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - A user ID for authentication"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"app_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - An app ID for the application to interact with"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"logger_level"})," (",(0,r.jsx)(n.em,{children:"str"}),') - Logging level. Default "INFO"']}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"base_url"})," (",(0,r.jsx)(n.em,{children:"str"}),') - Base API url. Default "',(0,r.jsx)(n.a,{href:"https://api.clarifai.com",children:"https://api.clarifai.com"}),'"']}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"pat"})," (",(0,r.jsx)(n.em,{children:"str"}),") - A personal access token for authentication. Can be set as env var CLARIFAI_PAT"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"token"})," (",(0,r.jsx)(n.em,{children:"str"}),") - A session token for authentication. Accepts either a session token or a pat. Can be set as env var CLARIFAI_SESSION_TOKEN"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"root_certificates_path"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Path to the SSL root certificates file, used to establish secure gRPC connections"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"**kwargs"})," - Additional keyword arguments to be passed to the Input"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"inputsget_input",children:"Inputs.get_input"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Inputs.get_input(input_id)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Get Input object of input with input_id provided from the app."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"input_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - The input ID for the annotation to get"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Input: An Input object for the specified input ID"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from clarifai.client.input import Inputs\ninput_obj = Inputs(user_id='user_id', app_id='demo_app')\ninput_obj.get_input(input_id='demo')\n"})}),"\n",(0,r.jsx)(n.h3,{id:"inputsget_input_from_url",children:"Inputs.get_input_from_url"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Inputs.get_input_from_url(input_id, image_url=None, video_url=None, audio_url=None, text_url=None, dataset_id=None, **kwargs)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Create input proto from url."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"input_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - The input ID for the input to create"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"image_url"})," (",(0,r.jsx)(n.em,{children:"str"}),") - The url for the image"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"video_url"})," (",(0,r.jsx)(n.em,{children:"str"}),") - The url for the video"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"audio_url"})," (",(0,r.jsx)(n.em,{children:"str"}),") - The url for the audio"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"text_url"})," (",(0,r.jsx)(n.em,{children:"str"}),") - The url for the text"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"dataset_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - The dataset ID for the dataset to add the input to"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"**kwargs"})," - Additional keyword arguments"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Input: An Input object for the specified input ID"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from clarifai.client.input import Inputs\ninput_proto = Inputs.get_input_from_url(input_id='demo', image_url='https://samples.clarifai.com/metro-north.jpg')\n"})}),"\n",(0,r.jsx)(n.h3,{id:"inputsget_input_from_file",children:"Inputs.get_input_from_file"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Inputs.get_input_from_file(input_id, image_file=None, video_file=None, audio_file=None, text_file=None, dataset_id=None, **kwargs)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Create input proto from files."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"input_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - The input ID for the input to create"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"image_file"})," (",(0,r.jsx)(n.em,{children:"str"}),") - The file_path for the image"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"video_file"})," (",(0,r.jsx)(n.em,{children:"str"}),") - The file_path for the video"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"audio_file"})," (",(0,r.jsx)(n.em,{children:"str"}),") - The file_path for the audio"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"text_file"})," (",(0,r.jsx)(n.em,{children:"str"}),") - The file_path for the text"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"dataset_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - The dataset ID for the dataset to add the input to"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"**kwargs"})," - Additional keyword arguments"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Input: An Input object for the specified input ID"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from clarifai.client.input import Inputs\ninput_proto = Inputs.get_input_from_file(input_id='demo', video_file='file_path')\n"})}),"\n",(0,r.jsx)(n.h3,{id:"inputsget_input_from_bytes",children:"Inputs.get_input_from_bytes"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Inputs.get_input_from_bytes(input_id, image_bytes=None, video_bytes=None, audio_bytes=None, text_bytes=None, dataset_id=None, **kwargs)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Create input proto from bytes."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"input_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - The input ID for the input to create"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"image_bytes"})," (",(0,r.jsx)(n.em,{children:"bytes"}),") - The bytes for the image"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"video_bytes"})," (",(0,r.jsx)(n.em,{children:"bytes"}),") - The bytes for the video"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"audio_bytes"})," (",(0,r.jsx)(n.em,{children:"bytes"}),") - The bytes for the audio"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"text_bytes"})," (",(0,r.jsx)(n.em,{children:"bytes"}),") - The bytes for the text"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"dataset_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - The dataset ID for the dataset to add the input to"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"**kwargs"})," - Additional keyword arguments"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Input: An Input object for the specified input ID"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from clarifai.client.input import Inputs\nimage = open('demo.jpg', 'rb').read()\nvideo = open('demo.mp4', 'rb').read()\ninput_proto = Inputs.get_input_from_bytes(input_id='demo', image_bytes=image, video_bytes=video)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"inputsget_image_inputs_from_folder",children:"Inputs.get_image_inputs_from_folder"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Inputs.get_image_inputs_from_folder(folder_path, dataset_id=None, labels=False)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Create input protos for image data type from folder."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"folder_path"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Path to the folder containing images"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"dataset_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - The dataset ID for the dataset to add the input to"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"labels"})," (",(0,r.jsx)(n.em,{children:"bool"}),") - Use folder name as label if True"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"List[Input]: A list of Input objects for the specified folder"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from clarifai.client.input import Inputs\ninput_protos = Inputs.get_image_inputs_from_folder(folder_path='demo_folder')\n"})}),"\n",(0,r.jsx)(n.h3,{id:"inputsget_text_input",children:"Inputs.get_text_input"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Inputs.get_text_input(input_id, raw_text, dataset_id=None, **kwargs)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Create input proto for text data type from raw text."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"input_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - The input ID for the input to create"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"raw_text"})," (",(0,r.jsx)(n.em,{children:"str"}),") - The raw text input"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"dataset_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - The dataset ID for the dataset to add the input to"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"**kwargs"})," - Additional keyword arguments"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Text: An Input object for the specified input ID"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from clarifai.client.input import Inputs\ninput_proto = Inputs.get_text_input(input_id='demo', raw_text='This is a test')\n"})}),"\n",(0,r.jsx)(n.h3,{id:"inputsget_multimodal_input",children:"Inputs.get_multimodal_input"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Inputs.get_multimodal_input(input_id, raw_text=None, text_bytes=None, image_url=None, image_bytes=None, dataset_id=None, **kwargs)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Create input proto for text and image from bytes or url."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"input_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - The input ID for the input to create"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"raw_text"})," (",(0,r.jsx)(n.em,{children:"str"}),") - The raw text input"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"text_bytes"})," (",(0,r.jsx)(n.em,{children:"bytes"}),") - The bytes for the text"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"image_url"})," (",(0,r.jsx)(n.em,{children:"str"}),") - The url for the image"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"image_bytes"})," (",(0,r.jsx)(n.em,{children:"bytes"}),") - The bytes for the image"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"dataset_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - The dataset ID for the dataset to add the input to"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"**kwargs"})," - Additional keyword arguments"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Input: An Input object for the specified input ID"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from clarifai.client.input import Inputs\ninput_proto = Inputs.get_multimodal_input(input_id='demo', raw_text='What time of day is it?', image_url='https://samples.clarifai.com/metro-north.jpg')\n"})}),"\n",(0,r.jsx)(n.h3,{id:"inputsget_inputs_from_csv",children:"Inputs.get_inputs_from_csv"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Inputs.get_inputs_from_csv(csv_path, input_type='text', csv_type='raw', dataset_id=None, labels=True)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Create input protos from csv."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"csv_path"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Path to the csv file"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"input_type"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Type of input. Options: 'text', 'image', 'video', 'audio'"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"csv_type"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Type of csv file. Options: 'raw', 'url', 'file_path'"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"dataset_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - The dataset ID for the dataset to add the input to"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"labels"})," (",(0,r.jsx)(n.em,{children:"bool"}),") - True if csv file has labels column"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"List[Text]: List of input protos"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from clarifai.client.input import Inputs\ninput_protos = Inputs.get_inputs_from_csv(csv_path='filepath', input_type='text', csv_type='raw')\n"})}),"\n",(0,r.jsx)(n.h3,{id:"inputsget_text_inputs_from_folder",children:"Inputs.get_text_inputs_from_folder"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Inputs.get_text_inputs_from_folder(folder_path, dataset_id=None, labels=False)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Create input protos for text data type from folder."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"folder_path"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Path to the folder containing text files"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"dataset_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - The dataset ID for the dataset to add the input to"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"labels"})," (",(0,r.jsx)(n.em,{children:"bool"}),") - Use folder name as label if True"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"List[Text]: A list of Input objects for the specified folder"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from clarifai.client.input import Inputs\ninput_protos = Inputs.get_text_inputs_from_folder(folder_path='demo_folder')\n"})}),"\n",(0,r.jsx)(n.h3,{id:"inputsget_bbox_proto",children:"Inputs.get_bbox_proto"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Inputs.get_bbox_proto(input_id, label, bbox, label_id=None, annot_id=None)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Create an annotation proto for each bounding box, label input pair."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"input_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - The input ID for the annotation to create"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"label"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Annotation label name"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"bbox"})," (",(0,r.jsx)(n.em,{children:"List"}),") - A list of a single bbox's coordinates [xmin, ymin, xmax, ymax]"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"label_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Annotation label ID"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"annot_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Annotation ID"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Annotation: An annotation object for the specified input ID"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from clarifai.client.input import Inputs\nInputs.get_bbox_proto(input_id='demo', label='demo', bbox=[x_min, y_min, x_max, y_max])\n"})}),"\n",(0,r.jsx)(n.h3,{id:"inputsget_mask_proto",children:"Inputs.get_mask_proto"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Inputs.get_mask_proto(input_id, label, polygons, label_id=None, annot_id=None)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Create an annotation proto for each polygon box, label input pair."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"input_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - The input ID for the annotation to create"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"label"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Annotation label name"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"polygons"})," (",(0,r.jsx)(n.em,{children:"List[List[float]]"}),") - Polygon x,y points iterable"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"label_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Annotation label ID"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"annot_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Annotation ID"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Annotation: An annotation object for the specified input ID"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from clarifai.client.input import Inputs\nInputs.get_mask_proto(input_id='demo', label='demo', polygons=[[[x,y],...,[x,y]],...])\n"})}),"\n",(0,r.jsx)(n.h3,{id:"inputsupload_from_url",children:"Inputs.upload_from_url"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Inputs.upload_from_url(input_id, image_url=None, video_url=None, audio_url=None, text_url=None, dataset_id=None, **kwargs)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Upload input from url."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"input_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - The input ID for the input to create"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"image_url"})," (",(0,r.jsx)(n.em,{children:"str"}),") - The url for the image"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"video_url"})," (",(0,r.jsx)(n.em,{children:"str"}),") - The url for the video"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"audio_url"})," (",(0,r.jsx)(n.em,{children:"str"}),") - The url for the audio"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"text_url"})," (",(0,r.jsx)(n.em,{children:"str"}),") - The url for the text"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"dataset_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - The dataset ID for the dataset to add the input to"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"**kwargs"})," - Additional keyword arguments"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"input_job_id: job id for the upload request"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from clarifai.client.input import Inputs\ninput_obj = Inputs(user_id='user_id', app_id='demo_app')\ninput_obj.upload_from_url(input_id='demo', image_url='https://samples.clarifai.com/metro-north.jpg')\n"})}),"\n",(0,r.jsx)(n.h3,{id:"inputsupload_from_file",children:"Inputs.upload_from_file"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Inputs.upload_from_file(input_id, image_file=None, video_file=None, audio_file=None, text_file=None, dataset_id=None, **kwargs)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Upload input from file."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"input_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - The input ID for the input to create"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"image_file"})," (",(0,r.jsx)(n.em,{children:"str"}),") - The file for the image"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"video_file"})," (",(0,r.jsx)(n.em,{children:"str"}),") - The file for the video"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"audio_file"})," (",(0,r.jsx)(n.em,{children:"str"}),") - The file for the audio"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"text_file"})," (",(0,r.jsx)(n.em,{children:"str"}),") - The file for the text"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"dataset_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - The dataset ID for the dataset to add the input to"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"**kwargs"})," - Additional keyword arguments"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"input_job_id: job id for the upload request"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from clarifai.client.input import Inputs\ninput_obj = Inputs(user_id='user_id', app_id='demo_app')\ninput_obj.upload_from_file(input_id='demo', audio_file='demo.mp3')\n"})}),"\n",(0,r.jsx)(n.h3,{id:"inputsupload_from_bytes",children:"Inputs.upload_from_bytes"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Inputs.upload_from_bytes(input_id, image_bytes=None, video_bytes=None, audio_bytes=None, text_bytes=None, dataset_id=None, **kwargs)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Upload input from bytes."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"input_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - The input ID for the input to create"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"image_bytes"})," (",(0,r.jsx)(n.em,{children:"bytes"}),") - The bytes for the image"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"video_bytes"})," (",(0,r.jsx)(n.em,{children:"bytes"}),") - The bytes for the video"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"audio_bytes"})," (",(0,r.jsx)(n.em,{children:"bytes"}),") - The bytes for the audio"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"text_bytes"})," (",(0,r.jsx)(n.em,{children:"bytes"}),") - The bytes for the text"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"dataset_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - The dataset ID for the dataset to add the input to"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"**kwargs"})," - Additional keyword arguments"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"input_job_id: job id for the upload request"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from clarifai.client.input import Inputs\ninput_obj = Inputs(user_id='user_id', app_id='demo_app')\nimage = open('demo.jpg', 'rb').read()\ninput_obj.upload_from_bytes(input_id='demo', image_bytes=image)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"inputsupload_text",children:"Inputs.upload_text"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Inputs.upload_text(input_id, raw_text, dataset_id=None, **kwargs)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Upload text from raw text."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"input_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - The input ID for the input to create"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"raw_text"})," (",(0,r.jsx)(n.em,{children:"str"}),") - The raw text"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"dataset_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - The dataset ID for the dataset to add the input to"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"**kwargs"})," - Additional keyword arguments"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"input_job_id: job id for the upload request"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from clarifai.client.input import Inputs\ninput_obj = Inputs(user_id='user_id', app_id='demo_app')\ninput_obj.upload_text(input_id='demo', raw_text='This is a test')\n"})}),"\n",(0,r.jsx)(n.h3,{id:"inputsupload_inputs",children:"Inputs.upload_inputs"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Inputs.upload_inputs(inputs, show_log=True)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Upload list of input objects to the app."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"inputs"})," (",(0,r.jsx)(n.em,{children:"List[Input]"}),") - List of input objects to upload"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"show_log"})," (",(0,r.jsx)(n.em,{children:"bool"}),") - Show upload status log"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Tuple of (input_job_id, response)"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"inputspatch_inputs",children:"Inputs.patch_inputs"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Inputs.patch_inputs(inputs, action='merge')\n"})}),"\n",(0,r.jsx)(n.p,{children:"Patch list of input objects to the app."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"inputs"})," (",(0,r.jsx)(n.em,{children:"List[Input]"}),") - List of input objects to upload"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"action"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Action to perform on the input. Options: 'merge', 'overwrite', 'remove'"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Response from the grpc request"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"inputsupload_annotations",children:"Inputs.upload_annotations"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Inputs.upload_annotations(batch_annot, show_log=True)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Upload image annotations to app."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"batch_annot"})," (",(0,r.jsx)(n.em,{children:"List[resources_pb2.Annotation]"}),") - Annotation batch protos"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"show_log"})," (",(0,r.jsx)(n.em,{children:"bool"}),") - Show upload status log"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Union[List[resources_pb2.Annotation], List[None]]: Failed annotation uploads for retry"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"inputspatch_annotations",children:"Inputs.patch_annotations"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Inputs.patch_annotations(batch_annot, action='merge')\n"})}),"\n",(0,r.jsx)(n.p,{children:"Patch image annotations to app."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"batch_annot"})," (",(0,r.jsx)(n.em,{children:"List[resources_pb2.Annotation]"}),") - Annotation batch protos"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"action"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Action to perform on the input. Options: 'merge', 'overwrite', 'remove'"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"inputspatch_concepts",children:"Inputs.patch_concepts"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Inputs.patch_concepts(concept_ids, labels=[], values=[], action='overwrite')\n"})}),"\n",(0,r.jsx)(n.p,{children:"Patch concepts to app."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"concept_ids"})," (",(0,r.jsx)(n.em,{children:"List[str]"}),") - A list of concept IDs"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"labels"})," (",(0,r.jsx)(n.em,{children:"List[str]"}),") - A list of label names"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"values"})," (",(0,r.jsx)(n.em,{children:"List[float]"}),") - Concept values"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"action"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Action to perform on the input. Options: 'overwrite'"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"inputsdelete_inputs",children:"Inputs.delete_inputs"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Inputs.delete_inputs(inputs)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Delete list of input objects from the app."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"inputs"})," (",(0,r.jsx)(n.em,{children:"List[Input]"}),") - List of input objects to delete"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from clarifai.client.user import User\ninput_obj = User(user_id="user_id").app(app_id="app_id").inputs()\ninput_obj.delete_inputs(list(input_obj.list_inputs()))\n'})}),"\n",(0,r.jsx)(n.h3,{id:"inputsdelete_annotations",children:"Inputs.delete_annotations"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Inputs.delete_annotations(input_ids, annotation_ids=[])\n"})}),"\n",(0,r.jsx)(n.p,{children:"Delete list of annotations of input objects from the app."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"input_ids"})," (",(0,r.jsx)(n.em,{children:"List[str]"}),") - List of input objects for which annotations to delete"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"annotation_ids"})," (",(0,r.jsx)(n.em,{children:"List[str]"}),") - List of annotation ids to delete"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from clarifai.client.user import User\ninput_obj = User(user_id=\"user_id\").app(app_id=\"app_id\").inputs()\ninput_obj.delete_annotations(input_ids=['input_id_1', 'input_id_2'])\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Note:"}),"\n'annotation_ids' are optional but if they are provided, the number and order in 'annotation_ids' and 'input_ids' should match"]}),"\n",(0,r.jsx)(n.h3,{id:"inputsdownload_inputs",children:"Inputs.download_inputs"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Inputs.download_inputs(inputs)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Download list of input objects from the app."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"inputs"})," (",(0,r.jsx)(n.em,{children:"List[Input]"}),") - List of input objects to download"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"List[bytes]: Downloaded input content"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from clarifai.client.user import User\ninput_obj = User(user_id="user_id").app(app_id="app_id").inputs()\ninput_obj.download_inputs(list(input_obj.list_inputs()))\n'})}),"\n",(0,r.jsx)(n.h3,{id:"inputslist_inputs",children:"Inputs.list_inputs"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Inputs.list_inputs(dataset_id=None, page_no=None, per_page=None, input_type=None)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Lists all the inputs for the app."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"dataset_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - The dataset ID for the dataset to list inputs from"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"page_no"})," (",(0,r.jsx)(n.em,{children:"int"}),") - The page number to list"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"per_page"})," (",(0,r.jsx)(n.em,{children:"int"}),") - The number of items per page"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"input_type"})," (",(0,r.jsx)(n.em,{children:"str"}),") - The type of input to list. Options: 'image', 'video', 'audio', 'text'"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Yields:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Input: Input objects for the app"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from clarifai.client.user import User\ninput_obj = User(user_id="user_id").app(app_id="app_id").inputs()\nall_inputs = list(input_obj.list_inputs(input_type=\'image\'))\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Note:"}),"\nDefaults to 16 per page if page_no is specified and per_page is not specified.\nIf both page_no and per_page are None, then lists all the resources."]}),"\n",(0,r.jsx)(n.h3,{id:"inputslist_annotations",children:"Inputs.list_annotations"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Inputs.list_annotations(batch_input=None, page_no=None, per_page=None)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Lists all the annotations for the app."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"batch_input"})," (",(0,r.jsx)(n.em,{children:"List[Input]"}),") - The input objects to list annotations from"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"page_no"})," (",(0,r.jsx)(n.em,{children:"int"}),") - The page number to list"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"per_page"})," (",(0,r.jsx)(n.em,{children:"int"}),") - The number of items per page"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Yields:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Annotation: Annotation objects for the app"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from clarifai.client.user import User\ninput_obj = User(user_id="user_id").app(app_id="app_id").inputs()\nall_inputs = list(input_obj.list_inputs(input_type=\'image\'))\nall_annotations = list(input_obj.list_annotations(batch_input=all_inputs))\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Note:"})," If batch_input is not given, then lists all the annotations for the app.\nDefaults to 16 per page if page_no is specified and per_page is not specified.\nIf both page_no and per_page are None, then lists all the resources."]}),"\n",(0,r.jsx)(n.p,{children:"Based on the provided file content, here's the API Reference for the Lister class:"}),"\n",(0,r.jsx)(n.h2,{id:"lister",children:(0,r.jsx)(n.a,{href:"https://github.com/Clarifai/clarifai-python/blob/master/clarifai/client/lister.py",children:"Lister"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"class Lister(page_size=16)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Lister class for obtaining paginated results from the Clarifai API."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"page_size"})," (",(0,r.jsx)(n.em,{children:"int"}),") - Default number of items per page. Default is 16"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"listerlist_pages_generator",children:"Lister.list_pages_generator"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Lister.list_pages_generator(endpoint, proto_message, request_data, page_no=None, per_page=None)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Lists pages of a resource using a generator for efficient pagination."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"endpoint"})," (",(0,r.jsx)(n.em,{children:"Callable"}),") - The gRPC endpoint function to call"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"proto_message"})," (",(0,r.jsx)(n.em,{children:"Any"}),") - The proto message class to use for the request"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"request_data"})," (",(0,r.jsx)(n.em,{children:"Dict[str, Any]"}),") - The request data dictionary to populate the proto message"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"page_no"})," (",(0,r.jsx)(n.em,{children:"int"}),") - The specific page number to list. If None, lists all pages"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"per_page"})," (",(0,r.jsx)(n.em,{children:"int"}),") - The number of items per page. If None, uses default page size"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Yields:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Dict[str, Any]: The next item in the listing, with response keys processed for consistency"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Raises:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Exception: If the listing fails with a non-success status code"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Behavior:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["When both ",(0,r.jsx)(n.code,{children:"page_no"})," and ",(0,r.jsx)(n.code,{children:"per_page"})," are None, iterates through all pages automatically"]}),"\n",(0,r.jsxs)(n.li,{children:["When ",(0,r.jsx)(n.code,{children:"page_no"})," is specified but ",(0,r.jsx)(n.code,{children:"per_page"})," is not, uses the default page size"]}),"\n",(0,r.jsxs)(n.li,{children:["When either ",(0,r.jsx)(n.code,{children:"page_no"})," or ",(0,r.jsx)(n.code,{children:"per_page"})," is specified, returns only that specific page"]}),"\n",(0,r.jsx)(n.li,{children:"Processes response keys to maintain consistent naming across different resource types"}),"\n",(0,r.jsx)(n.li,{children:'Handles special cases like "dataset_inputs" resource type'}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example Usage:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# List all resources across all pages\nfor item in lister.list_pages_generator(\n    endpoint=stub.ListModels,\n    proto_message=service_pb2.ListModelsRequest,\n    request_data={'user_app_id': user_app_id}\n):\n    print(item)\n\n# List a specific page\nfor item in lister.list_pages_generator(\n    endpoint=stub.ListModels,\n    proto_message=service_pb2.ListModelsRequest,\n    request_data={'user_app_id': user_app_id},\n    page_no=2,\n    per_page=20\n):\n    print(item)\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Notes:"}),' This class is typically used as a mixin with other client classes that need paginated listing functionality. The default page size of 16 is optimized for API performance and rate limiting considerations. The method handles special resource types like "dataset_inputs" that require specific key processing.']}),"\n",(0,r.jsx)(n.h2,{id:"model",children:(0,r.jsx)(n.a,{href:"https://github.com/Clarifai/clarifai-python/blob/master/clarifai/client/model.py",children:"Model"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'class Model(url=None, model_id=None, model_version={\'id\': ""}, base_url="https://api.clarifai.com", pat=None, token=None, root_certificates_path=None, compute_cluster_id=None, nodepool_id=None, deployment_id=None, deployment_user_id=None, **kwargs)\n'})}),"\n",(0,r.jsx)(n.p,{children:"Model is a class that provides access to Clarifai API endpoints related to Model information."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"url"})," (",(0,r.jsx)(n.em,{children:"str"}),") - URL to initialize model object"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"model_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Model ID to interact with"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"model_version"})," (",(0,r.jsx)(n.em,{children:"Dict"}),") - Model version details with id"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"base_url"})," (",(0,r.jsx)(n.em,{children:"str"}),') - Base API url. Default "',(0,r.jsx)(n.a,{href:"https://api.clarifai.com",children:"https://api.clarifai.com"}),'"']}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"pat"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Personal access token for authentication"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"token"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Session token for authentication"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"root_certificates_path"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Path to SSL root certificates file"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"compute_cluster_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Compute cluster ID for runner selector"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"nodepool_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Nodepool ID for runner selector"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"deployment_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Deployment ID for runner selector"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"deployment_user_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - User ID for runner selector (organization or user)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"**kwargs"})," - Additional keyword arguments"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Note:"})," Either url or model_id must be specified, but not both."]}),"\n",(0,r.jsx)(n.h3,{id:"modelfrom_current_context",children:"Model.from_current_context"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Model.from_current_context(**kwargs)\n"})}),"\n",(0,r.jsx)(n.p,{children:"This Class method creates a Model instance from the current context."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"**kwargs"})," - Additional keyword arguments"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Model instance"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"modellist_training_templates",children:"Model.list_training_templates"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Model.list_training_templates()\n"})}),"\n",(0,r.jsx)(n.p,{children:"Lists all training templates for the model type."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"List of available training templates"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from clarifai.client.model import Model\nmodel = Model(model_id='model_id', user_id='user_id', app_id='app_id')\ntemplates = model.list_training_templates()\n"})}),"\n",(0,r.jsx)(n.h3,{id:"modelget_params",children:"Model.get_params"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Model.get_params(template=None, save_to='params.yaml')\n"})}),"\n",(0,r.jsx)(n.p,{children:"Gets model parameters for training."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"template"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Template to use for model type"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"save_to"})," (",(0,r.jsx)(n.em,{children:"str"}),") - YAML file path to save parameters"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Dictionary of model parameters"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from clarifai.client.model import Model\nmodel = Model(model_id='model_id', user_id='user_id', app_id='app_id')\nparams = model.get_params(template='template', save_to='model_params.yaml')\n"})}),"\n",(0,r.jsx)(n.h3,{id:"modelupdate_params",children:"Model.update_params"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Model.update_params(**kwargs)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Updates model training parameters."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"**kwargs"})," - Parameter key-value pairs to update"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from clarifai.client.model import Model\nmodel = Model(model_id='model_id', user_id='user_id', app_id='app_id')\nmodel.update_params(batch_size=8, dataset_version='dataset_version_id')\n"})}),"\n",(0,r.jsx)(n.h3,{id:"modelget_param_info",children:"Model.get_param_info"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Model.get_param_info(param)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Gets information about a specific parameter."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"param"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Parameter name to get info for"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Dictionary with parameter information"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from clarifai.client.model import Model\nmodel = Model(model_id='model_id', user_id='user_id', app_id='app_id')\nparam_info = model.get_param_info('learning_rate')\n"})}),"\n",(0,r.jsx)(n.h3,{id:"modeltrain",children:"Model.train"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Model.train(yaml_file=None)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Trains the model using specified parameters."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"yaml_file"})," (",(0,r.jsx)(n.em,{children:"str"}),") - YAML file containing training parameters"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Model version ID of trained model"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from clarifai.client.model import Model\nmodel = Model(model_id='model_id', user_id='user_id', app_id='app_id')\nversion_id = model.train('model_params.yaml')\n"})}),"\n",(0,r.jsx)(n.h3,{id:"modeltraining_status",children:"Model.training_status"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Model.training_status(version_id=None, training_logs=False)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Gets training status for a model version."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"version_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Version ID to check status for"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"training_logs"})," (",(0,r.jsx)(n.em,{children:"bool"}),") - Save training logs to file if True"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Dictionary with training status information"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from clarifai.client.model import Model\nmodel = Model(model_id='model_id', user_id='user_id', app_id='app_id')\nstatus = model.training_status(version_id='version_id', training_logs=True)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"modeldelete_version",children:"Model.delete_version"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Model.delete_version(version_id)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Deletes a model version."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"version_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Version ID to delete"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from clarifai.client.model import Model\nmodel = Model(model_id='model_id', user_id='user_id', app_id='app_id')\nmodel.delete_version('version_id')\n"})}),"\n",(0,r.jsx)(n.h3,{id:"modelcreate_version",children:"Model.create_version"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Model.create_version(**kwargs)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Creates a new model version."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"**kwargs"})," - Version parameters including:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"description"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Version description"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"concepts"})," (",(0,r.jsx)(n.em,{children:"list"}),") - Associated concepts"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"output_info"})," (",(0,r.jsx)(n.em,{children:"OutputInfo"}),") - Output configuration"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"New Model object for created version"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from clarifai.client.model import Model\nmodel = Model(model_id='model_id', user_id='user_id', app_id='app_id')\nnew_version = model.create_version(description='New version')\n"})}),"\n",(0,r.jsx)(n.h3,{id:"modellist_versions",children:"Model.list_versions"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Model.list_versions(page_no=None, per_page=None)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Lists all versions of the model."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"page_no"})," (",(0,r.jsx)(n.em,{children:"int"}),") - Page number for pagination"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"per_page"})," (",(0,r.jsx)(n.em,{children:"int"}),") - Items per page"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Yields:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Model objects for each version"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from clarifai.client.model import Model\nmodel = Model(model_id='model_id', user_id='user_id', app_id='app_id')\nversions = list(model.list_versions())\n"})}),"\n",(0,r.jsx)(n.h3,{id:"modelpredict",children:"Model.predict"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Model.predict(inputs, inference_params={}, output_config={})\n"})}),"\n",(0,r.jsx)(n.p,{children:"Makes predictions using the model."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"inputs"})," (",(0,r.jsx)(n.em,{children:"List[Input]"}),") - List of inputs to predict on"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"inference_params"})," (",(0,r.jsx)(n.em,{children:"Dict"}),") - Inference parameters"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"output_config"})," (",(0,r.jsx)(n.em,{children:"Dict"}),") - Output configuration"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Prediction response"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"modelasync_predict",children:"Model.async_predict"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Model.async_predict(inputs, inference_params={}, output_config={})\n"})}),"\n",(0,r.jsx)(n.p,{children:"Makes asynchronous predictions using the model."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"inputs"})," (",(0,r.jsx)(n.em,{children:"List[Input]"}),") - List of inputs to predict on"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"inference_params"})," (",(0,r.jsx)(n.em,{children:"Dict"}),") - Inference parameters"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"output_config"})," (",(0,r.jsx)(n.em,{children:"Dict"}),") - Output configuration"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Async prediction response"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"modelload_input_types",children:"Model.load_input_types"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Model.load_input_types()\n"})}),"\n",(0,r.jsx)(n.p,{children:"Loads available input types for the model."}),"\n",(0,r.jsx)(n.h3,{id:"modelpredict_by_filepath",children:"Model.predict_by_filepath"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Model.predict_by_filepath(filepath, input_type=None, inference_params={}, output_config={})\n"})}),"\n",(0,r.jsx)(n.p,{children:"Makes predictions from file input."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"filepath"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Path to input file"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"input_type"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Input type ('image', 'text', 'video', 'audio')"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"inference_params"})," (",(0,r.jsx)(n.em,{children:"Dict"}),") - Inference parameters"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"output_config"})," (",(0,r.jsx)(n.em,{children:"Dict"}),") - Output configuration"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from clarifai.client.model import Model \nmodel = Model(model_id='model_id')\nresponse = model.predict_by_filepath('image.jpg', input_type='image')\n"})}),"\n",(0,r.jsx)(n.h3,{id:"modelpredict_by_bytes",children:"Model.predict_by_bytes"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Model.predict_by_bytes(input_bytes, input_type=None, inference_params={}, output_config={})\n"})}),"\n",(0,r.jsx)(n.p,{children:"Makes predictions from bytes input."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"input_bytes"})," (",(0,r.jsx)(n.em,{children:"bytes"}),") - Input bytes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"input_type"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Input type ('image', 'text', 'video', 'audio')"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"inference_params"})," (",(0,r.jsx)(n.em,{children:"Dict"}),") - Inference parameters"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"output_config"})," (",(0,r.jsx)(n.em,{children:"Dict"}),") - Output configuration"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"text = b'Write a tweet about AI'\nmodel = Model(\"https://clarifai.com/openai/chat-completion/models/GPT-4\")\nresponse = model.predict_by_bytes(text, inference_params={'temperature': 0.7})\n"})}),"\n",(0,r.jsx)(n.h3,{id:"modelpredict_by_url",children:"Model.predict_by_url"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Model.predict_by_url(url, input_type=None, inference_params={}, output_config={})\n"})}),"\n",(0,r.jsx)(n.p,{children:"Makes predictions from URL input."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"url"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Input URL"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"input_type"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Input type ('image', 'text', 'video', 'audio')"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"inference_params"})," (",(0,r.jsx)(n.em,{children:"Dict"}),") - Inference parameters"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"output_config"})," (",(0,r.jsx)(n.em,{children:"Dict"}),") - Output configuration"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from clarifai.client.model import Model\nmodel = Model(model_id='model_id')\nresponse = model.predict_by_url('https://example.com/image.jpg', input_type='image')\n"})}),"\n",(0,r.jsx)(n.h3,{id:"modelgenerate",children:"Model.generate"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Model.generate(inputs, inference_params={}, output_config={})\n"})}),"\n",(0,r.jsx)(n.p,{children:"Generates outputs with streaming response."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"inputs"})," (",(0,r.jsx)(n.em,{children:"List[Input]"}),") - List of inputs"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"inference_params"})," (",(0,r.jsx)(n.em,{children:"Dict"}),") - Inference parameters"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"output_config"})," (",(0,r.jsx)(n.em,{children:"Dict"}),") - Output configuration"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Generator yielding output responses"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"modelasync_generate",children:"Model.async_generate"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Model.async_generate(inputs, inference_params={}, output_config={})\n"})}),"\n",(0,r.jsx)(n.p,{children:"Generates outputs asynchronously with streaming response."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"inputs"})," (",(0,r.jsx)(n.em,{children:"List[Input]"}),") - List of inputs"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"inference_params"})," (",(0,r.jsx)(n.em,{children:"Dict"}),") - Inference parameters"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"output_config"})," (",(0,r.jsx)(n.em,{children:"Dict"}),") - Output configuration"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Async generator yielding output responses"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"modelgenerate_by_filepath",children:"Model.generate_by_filepath"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Model.generate_by_filepath(filepath, input_type=None, inference_params={}, output_config={})\n"})}),"\n",(0,r.jsx)(n.p,{children:"Generates outputs from file input with streaming response."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"filepath"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Path to input file"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"input_type"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Input type ('image', 'text', 'video', 'audio')"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"inference_params"})," (",(0,r.jsx)(n.em,{children:"Dict"}),") - Inference parameters"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"output_config"})," (",(0,r.jsx)(n.em,{children:"Dict"}),") - Output configuration"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Generator yielding output responses"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"modelgenerate_by_bytes",children:"Model.generate_by_bytes"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Model.generate_by_bytes(input_bytes, input_type=None, inference_params={}, output_config={})\n"})}),"\n",(0,r.jsx)(n.p,{children:"Generates outputs from bytes input with streaming response."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"input_bytes"})," (",(0,r.jsx)(n.em,{children:"bytes"}),") - Input bytes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"input_type"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Input type ('image', 'text', 'video', 'audio')"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"inference_params"})," (",(0,r.jsx)(n.em,{children:"Dict"}),") - Inference parameters"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"output_config"})," (",(0,r.jsx)(n.em,{children:"Dict"}),") - Output configuration"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Generator yielding output responses"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"modelgenerate_by_url",children:"Model.generate_by_url"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Model.generate_by_url(url, input_type=None, inference_params={}, output_config={})\n"})}),"\n",(0,r.jsx)(n.p,{children:"Generates outputs from URL input with streaming response."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"url"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Input URL"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"input_type"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Input type ('image', 'text', 'video', 'audio')"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"inference_params"})," (",(0,r.jsx)(n.em,{children:"Dict"}),") - Inference parameters"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"output_config"})," (",(0,r.jsx)(n.em,{children:"Dict"}),") - Output configuration"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Generator yielding output responses"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"modelstream",children:"Model.stream"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Model.stream(inputs, inference_params={}, output_config={})\n"})}),"\n",(0,r.jsx)(n.p,{children:"Streams predictions for input iterator."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"inputs"})," (",(0,r.jsx)(n.em,{children:"Iterator[List[Input]]"}),") - Iterator of input lists"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"inference_params"})," (",(0,r.jsx)(n.em,{children:"Dict"}),") - Inference parameters"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"output_config"})," (",(0,r.jsx)(n.em,{children:"Dict"}),") - Output configuration"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Generator yielding output responses"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"modelasync_stream",children:"Model.async_stream"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Model.async_stream(inputs, inference_params={}, output_config={})\n"})}),"\n",(0,r.jsx)(n.p,{children:"Streams predictions asynchronously for input iterator."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"inputs"})," (",(0,r.jsx)(n.em,{children:"Iterator[List[Input]]"}),") - Iterator of input lists"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"inference_params"})," (",(0,r.jsx)(n.em,{children:"Dict"}),") - Inference parameters"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"output_config"})," (",(0,r.jsx)(n.em,{children:"Dict"}),") - Output configuration"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Async generator yielding output responses"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"modelstream_by_filepath",children:"Model.stream_by_filepath"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Model.stream_by_filepath(filepath, input_type=None, inference_params={}, output_config={})\n"})}),"\n",(0,r.jsx)(n.p,{children:"Streams predictions from file input."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"filepath"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Path to input file"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"input_type"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Input type ('image', 'text', 'video', 'audio')"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"inference_params"})," (",(0,r.jsx)(n.em,{children:"Dict"}),") - Inference parameters"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"output_config"})," (",(0,r.jsx)(n.em,{children:"Dict"}),") - Output configuration"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Generator yielding output responses"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"modelstream_by_bytes",children:"Model.stream_by_bytes"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Model.stream_by_bytes(input_bytes_iterator, input_type=None, inference_params={}, output_config={})\n"})}),"\n",(0,r.jsx)(n.p,{children:"Streams predictions from bytes iterator."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"input_bytes_iterator"})," (",(0,r.jsx)(n.em,{children:"Iterator[bytes]"}),") - Iterator of input bytes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"input_type"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Input type ('image', 'text', 'video', 'audio')"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"inference_params"})," (",(0,r.jsx)(n.em,{children:"Dict"}),") - Inference parameters"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"output_config"})," (",(0,r.jsx)(n.em,{children:"Dict"}),") - Output configuration"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Generator yielding output responses"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"modelstream_by_url",children:"Model.stream_by_url"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Model.stream_by_url(url_iterator, input_type=None, inference_params={}, output_config={})\n"})}),"\n",(0,r.jsx)(n.p,{children:"Streams predictions from URL iterator."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"url_iterator"})," (",(0,r.jsx)(n.em,{children:"Iterator[str]"}),") - Iterator of input URLs"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"input_type"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Input type ('image', 'text', 'video', 'audio')"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"inference_params"})," (",(0,r.jsx)(n.em,{children:"Dict"}),") - Inference parameters"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"output_config"})," (",(0,r.jsx)(n.em,{children:"Dict"}),") - Output configuration"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Generator yielding output responses"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"modelevaluate",children:"Model.evaluate"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Model.evaluate(dataset=None, dataset_id=None, dataset_app_id=None, dataset_user_id=None, dataset_version_id=None, eval_id=None, extended_metrics=None, eval_info=None)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Evaluates model performance on a dataset."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"dataset"})," (",(0,r.jsx)(n.em,{children:"Dataset"}),") - Dataset to evaluate on"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"dataset_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Dataset ID if not using Dataset object"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"dataset_app_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Dataset app ID for cross-app evaluation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"dataset_user_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Dataset user ID for cross-app evaluation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"dataset_version_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Dataset version ID"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"eval_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Custom evaluation ID"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"extended_metrics"})," (",(0,r.jsx)(n.em,{children:"dict"}),") - Custom metrics configuration"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"eval_info"})," (",(0,r.jsx)(n.em,{children:"dict"}),") - Additional evaluation information"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Evaluation metrics"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"modelget_eval_by_id",children:"Model.get_eval_by_id"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Model.get_eval_by_id(eval_id, label_counts=False, test_set=False, binary_metrics=False, confusion_matrix=False, metrics_by_class=False, metrics_by_area=False)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Gets detailed evaluation metrics by ID."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"eval_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Evaluation ID"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"label_counts"})," (",(0,r.jsx)(n.em,{children:"bool"}),") - Include label counts"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"test_set"})," (",(0,r.jsx)(n.em,{children:"bool"}),") - Include test set"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"binary_metrics"})," (",(0,r.jsx)(n.em,{children:"bool"}),") - Include binary metrics"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"confusion_matrix"})," (",(0,r.jsx)(n.em,{children:"bool"}),") - Include confusion matrix"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"metrics_by_class"})," (",(0,r.jsx)(n.em,{children:"bool"}),") - Include per-class metrics"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"metrics_by_area"})," (",(0,r.jsx)(n.em,{children:"bool"}),") - Include metrics by area"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Detailed evaluation metrics"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"modelget_latest_eval",children:"Model.get_latest_eval"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Model.get_latest_eval(label_counts=False, test_set=False, binary_metrics=False, confusion_matrix=False, metrics_by_class=False, metrics_by_area=False)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Gets metrics from latest evaluation."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"label_counts"})," (",(0,r.jsx)(n.em,{children:"bool"}),") - Include label counts"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"test_set"})," (",(0,r.jsx)(n.em,{children:"bool"}),") - Include test set"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"binary_metrics"})," (",(0,r.jsx)(n.em,{children:"bool"}),") - Include binary metrics"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"confusion_matrix"})," (",(0,r.jsx)(n.em,{children:"bool"}),") - Include confusion matrix"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"metrics_by_class"})," (",(0,r.jsx)(n.em,{children:"bool"}),") - Include per-class metrics"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"metrics_by_area"})," (",(0,r.jsx)(n.em,{children:"bool"}),") - Include metrics by area"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Latest evaluation metrics or None if not evaluated"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"modellist_evaluations",children:"Model.list_evaluations"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Model.list_evaluations()\n"})}),"\n",(0,r.jsx)(n.p,{children:"Lists all evaluation metrics for current model version."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"List of evaluation metrics"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"modelget_eval_by_dataset",children:"Model.get_eval_by_dataset"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Model.get_eval_by_dataset(dataset)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Gets all evaluation data for a dataset."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"dataset"})," (",(0,r.jsx)(n.em,{children:"Dataset"}),") - Dataset to get evaluations for"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"List of evaluation metrics for dataset"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"modelget_raw_eval",children:"Model.get_raw_eval"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Model.get_raw_eval(dataset=None, eval_id=None, return_format='array')\n"})}),"\n",(0,r.jsx)(n.p,{children:"Gets raw evaluation data in specified format."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"dataset"})," (",(0,r.jsx)(n.em,{children:"Dataset"}),") - Dataset to get evaluation for"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"eval_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Specific evaluation ID"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"return_format"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Output format ('proto', 'array', 'coco')"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Evaluation data in requested format"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from clarifai.client.model import Model\nfrom clarifai.client.dataset import Dataset\n\nmodel = Model(url="model_url")\ndataset = Dataset(dataset_id="dataset_id")\ny_true, y_pred, classes, inputs = model.get_raw_eval(\n    dataset,\n    return_format="array"\n)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"modelcreate_version_by_file",children:"Model.create_version_by_file"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'Model.create_version_by_file(file_path, input_field_maps, output_field_maps, inference_parameter_configs=None, model_version=None, part_id=1, range_start=0, no_cache=False, no_resume=False, description="")\n'})}),"\n",(0,r.jsx)(n.p,{children:"Creates new model version from local file."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"file_path"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Path to model file"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"input_field_maps"})," (",(0,r.jsx)(n.em,{children:"dict"}),") - Input field mappings"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"output_field_maps"})," (",(0,r.jsx)(n.em,{children:"dict"}),") - Output field mappings"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"inference_parameter_configs"})," (",(0,r.jsx)(n.em,{children:"List[dict]"}),") - Inference parameter configurations"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"model_version"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Custom version ID"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"part_id"})," (",(0,r.jsx)(n.em,{children:"int"}),") - Part ID for upload (default: 1)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"range_start"})," (",(0,r.jsx)(n.em,{children:"int"}),") - Range start for upload (default: 0)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"no_cache"})," (",(0,r.jsx)(n.em,{children:"bool"}),") - Disable upload cache (default: False)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"no_resume"})," (",(0,r.jsx)(n.em,{children:"bool"}),") - Disable auto-resume upload (default: False)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"description"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Version description"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"New Model instance"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"modelcreate_version_by_url",children:"Model.create_version_by_url"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'Model.create_version_by_url(url, input_field_maps, output_field_maps, inference_parameter_configs=None, description="")\n'})}),"\n",(0,r.jsx)(n.p,{children:"Creates new model version from URL."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"url"})," (",(0,r.jsx)(n.em,{children:"str"}),") - URL to model file"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"input_field_maps"})," (",(0,r.jsx)(n.em,{children:"dict"}),") - Input field mappings"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"output_field_maps"})," (",(0,r.jsx)(n.em,{children:"dict"}),") - Output field mappings"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"inference_parameter_configs"})," (",(0,r.jsx)(n.em,{children:"List[dict]"}),") - Inference parameter configurations"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"description"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Version description"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"New Model instance"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"modelpatch_version",children:"Model.patch_version"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Model.patch_version(version_id, **kwargs)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Patches an existing model version."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"version_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Version ID to patch"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"**kwargs"})," - Fields to update"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Updated Model instance"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"modelexport",children:"Model.export"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Model.export(export_dir=None)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Exports model to local file."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"export_dir"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Directory to save exported model"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from clarifai.client.model import Model\nmodel = Model("model_url")\nmodel.export("exported_models/")\n'})}),"\n",(0,r.jsx)(n.h3,{id:"modelload_info",children:"Model.load_info"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Model.load_info()\n"})}),"\n",(0,r.jsx)(n.p,{children:"Loads or refreshes model information."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from clarifai.client.model import Model\nmodel = Model("model_url")\nmodel.load_info()\n'})}),"\n",(0,r.jsx)(n.h2,{id:"modelclient",children:(0,r.jsx)(n.a,{href:"https://github.com/Clarifai/clarifai-python/blob/master/clarifai/client/model_client.py",children:"ModelClient"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"class ModelClient(stub, async_stub=None, request_template=None)\n"})}),"\n",(0,r.jsx)(n.p,{children:"The ModelClient offers a flexible interface that adapts to the specific capabilities of each model while maintaining a consistent programming interface across different model types."}),"\n",(0,r.jsx)(n.p,{children:"Also, it provides dynamic method generation based on model signatures and handles both synchronous and asynchronous inference calls."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"stub"})," - The gRPC stub for the model"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"async_stub"})," (",(0,r.jsx)(n.em,{children:"V2Stub"}),") - The async gRPC stub for the model (optional)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"request_template"})," (",(0,r.jsx)(n.em,{children:"service_pb2.PostModelOutputsRequest"}),") - Template request with common fields like model_id, model_version, etc."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"instance-methods",children:"Instance Methods"}),"\n",(0,r.jsx)(n.h4,{id:"modelclientfetch",children:"ModelClient.fetch"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"ModelClient.fetch()\n"})}),"\n",(0,r.jsx)(n.p,{children:"Fetches function signature definitions from the model and defines the functions in the client. This method is called automatically when accessing model methods."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from clarifai.client.model_client import ModelClient\n\n# Initialize client (typically done through Model class)\nclient = ModelClient(stub, async_stub, request_template)\nclient.fetch()  # Explicitly fetch signatures\n"})}),"\n",(0,r.jsx)(n.h4,{id:"modelclientavailable_methods",children:"ModelClient.available_methods"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"ModelClient.available_methods()\n"})}),"\n",(0,r.jsx)(n.p,{children:"Gets the available methods for this model."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"List[str]: The available method names"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"methods = client.available_methods()\nprint(methods)  # ['predict', 'generate', 'classify']\n\n# Check all available methods and their signatures\nfor method in client.available_methods():\n    print(f\"{method}: {client.method_signature(method)}\")\n"})}),"\n",(0,r.jsx)(n.h4,{id:"modelclientmethod_signature",children:"ModelClient.method_signature"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"ModelClient.method_signature(method_name)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Gets the method signature for a specific method."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"method_name"})," (",(0,r.jsx)(n.em,{children:"str"}),") - The name of the method"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"str: The method signature string"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"signature = client.method_signature('predict')\nprint(signature)  # 'predict(input: str) -> str'\n"})}),"\n",(0,r.jsx)(n.h4,{id:"modelclientgenerate_client_script",children:"ModelClient.generate_client_script"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"ModelClient.generate_client_script(base_url=None, use_ctx=False, colorize=False)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Generates a client script for this model."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"base_url"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Base URL for the API"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"use_ctx"})," (",(0,r.jsx)(n.em,{children:"bool"}),") - Whether to use context manager in generated script"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"colorize"})," (",(0,r.jsx)(n.em,{children:"bool"}),") - Whether to colorize the output"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"str: The generated client script"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"script = client.generate_client_script()\nprint(script)  # Prints a ready-to-use client script\n"})}),"\n",(0,r.jsx)(n.h3,{id:"dynamic-methods",children:"Dynamic Methods"}),"\n",(0,r.jsx)(n.p,{children:"The ModelClient dynamically creates methods based on the model's method signatures. These typically include:"}),"\n",(0,r.jsx)(n.h4,{id:"predict-methods",children:"Predict Methods"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"ModelClient.predict(inputs)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Makes synchronous predictions using the model."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"inputs"})," - Input data matching the model's expected format"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Prediction results"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# Single input prediction\nresult = client.predict({"text": "Hello world"})\nprint(result)\n\n# Batch input prediction\nbatch_results = client.predict([\n    {"text": "First input"},\n    {"text": "Second input"}\n])\nfor result in batch_results:\n    print(result)\n'})}),"\n",(0,r.jsx)(n.h4,{id:"async-predict-methods",children:"Async Predict Methods"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"ModelClient.async_predict(inputs)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Makes asynchronous predictions using the model."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"inputs"})," - Input data matching the model's expected format"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Async prediction results"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import asyncio\n\nasync def main():\n    # Single input prediction\n    result = await client.async_predict({"text": "Hello world"})\n    print(result)\n    \n    # Batch input prediction  \n    batch_results = await client.async_predict([\n        {"text": "First input"},\n        {"text": "Second input"}\n    ])\n    for result in batch_results:\n        print(result)\n\nasyncio.run(main())\n'})}),"\n",(0,r.jsx)(n.h4,{id:"generate-methods",children:"Generate Methods"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"ModelClient.generate(inputs)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Generates outputs with streaming response."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"inputs"})," - Input data matching the model's expected format"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Generator yielding output responses"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# Streaming text generation\nfor chunk in client.generate({"prompt": "Write a story about AI"}):\n    print(chunk, end="", flush=True)\n\n# Batch streaming generation\nfor batch_chunks in client.generate([\n    {"prompt": "First prompt"},\n    {"prompt": "Second prompt"}\n]):\n    for chunk in batch_chunks:\n        print(f"Chunk: {chunk}")\n'})}),"\n",(0,r.jsx)(n.h4,{id:"async-generate-methods",children:"Async Generate Methods"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"ModelClient.async_generate(inputs)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Generates outputs asynchronously with streaming response."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"inputs"})," - Input data matching the model's expected format"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Async generator yielding output responses"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import asyncio\n\nasync def main():\n    # Single input streaming generation\n    async for chunk in client.async_generate({"prompt": "Write a story"}):\n        print(chunk, end="", flush=True)\n    \n    # Batch streaming generation\n    async for batch_chunks in client.async_generate([\n        {"prompt": "First prompt"},\n        {"prompt": "Second prompt"}\n    ]):\n        for chunk in batch_chunks:\n            print(f"Chunk: {chunk}")\n\nasyncio.run(main())\n'})}),"\n",(0,r.jsx)(n.h4,{id:"stream-methods",children:"Stream Methods"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"ModelClient.stream(inputs)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Streams predictions for input iterator. This is used for models that accept streaming inputs (like audio processing)."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"inputs"})," - Input data with streaming components, must include a generator for the stream"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Generator yielding output responses"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'def audio_chunk_generator():\n    # Simulate audio chunks\n    yield b"audio_chunk_1"\n    yield b"audio_chunk_2"\n    yield b"audio_chunk_3"\n    \n# Stream audio processing\nfor response in client.stream({"audio_stream": audio_chunk_generator()}):\n    print(f"Processed: {response}")\n'})}),"\n",(0,r.jsx)(n.h4,{id:"async-stream-methods",children:"Async Stream Methods"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"ModelClient.async_stream(inputs)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Streams predictions asynchronously for input iterator."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"inputs"})," - Input data with streaming components, must include an async generator for the stream"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Async generator yielding output responses"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import asyncio\n\nasync def async_audio_chunk_generator():\n    # Simulate async audio chunks\n    yield b"audio_chunk_1"\n    await asyncio.sleep(0.1)\n    yield b"audio_chunk_2"\n    await asyncio.sleep(0.1)\n    yield b"audio_chunk_3"\n    \nasync def main():\n    async for response in client.async_stream({"audio_stream": async_audio_chunk_generator()}):\n        print(f"Processed: {response}")\n\nasyncio.run(main())\n'})}),"\n",(0,r.jsx)(n.h2,{id:"module",children:(0,r.jsx)(n.a,{href:"https://github.com/Clarifai/clarifai-python/blob/master/clarifai/client/module.py",children:"Module"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'class Module(url=None, module_id=None, module_version={\'id\': ""}, base_url="https://api.clarifai.com", pat=None, token=None, root_certificates_path=None, **kwargs)\n'})}),"\n",(0,r.jsx)(n.p,{children:"The Module class provides a comprehensive interface for interacting with Clarifai modules and their versions, making it easy to manage and explore module configurations across different versions."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"url"})," (",(0,r.jsx)(n.em,{children:"Optional[str]"}),") - URL to initialize module object"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"module_id"})," (",(0,r.jsx)(n.em,{children:"Optional[str]"}),") - Module ID to interact with"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"module_version"})," (",(0,r.jsx)(n.em,{children:"Dict[str, str]"}),") - Module version details with ID. Defaults to ",(0,r.jsx)(n.code,{children:"{'id': \"\"}"})," for latest version"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"base_url"})," (",(0,r.jsx)(n.em,{children:"str"}),') - Base API URL. Default "',(0,r.jsx)(n.a,{href:"https://api.clarifai.com",children:"https://api.clarifai.com"}),'"']}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"pat"})," (",(0,r.jsx)(n.em,{children:"Optional[str]"}),") - Personal access token for authentication. Can be set as env var CLARIFAI_PAT"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"token"})," (",(0,r.jsx)(n.em,{children:"Optional[str]"}),") - Session token for authentication. Accepts either a session token or a pat. Can be set as env var CLARIFAI_SESSION_TOKEN"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"root_certificates_path"})," (",(0,r.jsx)(n.em,{children:"Optional[str]"}),") - Path to SSL root certificates file, used to establish secure gRPC connections"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"**kwargs"})," - Additional keyword arguments to be passed to the Module"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Note:"})," Either url or module_id must be specified, but not both."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from clarifai.client.module import Module\n\n# Initialize from URL\nmodule = Module(url=\"https://clarifai.com/user_id/app_id/modules/module_id/versions/version_id\")\n\n# Initialize with module ID\nmodule = Module(\n    module_id='my-module',\n    user_id='user_id', \n    app_id='app_id',\n    module_version={'id': 'specific-version'}  # or omit for latest version\n)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"modulelist_versions",children:"Module.list_versions"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Module.list_versions(page_no=None, per_page=None)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Lists all versions of the module."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"page_no"})," (",(0,r.jsx)(n.em,{children:"int"}),") - Page number for pagination"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"per_page"})," (",(0,r.jsx)(n.em,{children:"int"}),") - Items per page"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Yields:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Module objects for each version"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from clarifai.client.module import Module\n\nmodule = Module(module_id='my-module', user_id='user_id', app_id='app_id')\n\n# List all versions\nall_module_versions = list(module.list_versions())\n\n# List versions with pagination\nfirst_page_versions = list(module.list_versions(page_no=1, per_page=10))\n\n# Iterate through versions\nfor version in module.list_versions():\n    print(f\"Version ID: {version.id}\")\n    print(f\"Description: {version.description}\")\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Note:"})," Defaults to 16 per page if page_no is specified and per_page is not specified. If both page_no and per_page are None, then lists all the resources."]}),"\n",(0,r.jsx)(n.h3,{id:"accessing-module-properties",children:"Accessing Module Properties"}),"\n",(0,r.jsx)(n.p,{children:"Once initialized, you can access various module properties directly from the Module instance:"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from clarifai.client.module import Module\n\nmodule = Module(module_id='my-module', user_id='user_id', app_id='app_id')\n\n# Access module properties\nprint(f\"Module ID: {module.id}\")\nprint(f\"App ID: {module.app_id}\")\nprint(f\"User ID: {module.user_id}\")\n\n# The module also provides a string representation\nprint(module)  # Shows formatted module details\n"})}),"\n",(0,r.jsx)(n.h2,{id:"nodepool",children:(0,r.jsx)(n.a,{href:"https://github.com/Clarifai/clarifai-python/blob/master/clarifai/client/nodepool.py",children:"Nodepool"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'class Nodepool(nodepool_id=None, user_id=None, base_url="https://api.clarifai.com", pat=None, token=None, root_certificates_path=None, **kwargs)\n'})}),"\n",(0,r.jsx)(n.p,{children:"The Nodepool class provides comprehensive management capabilities for deployments and runners within a compute cluster, enabling efficient resource allocation and scaling for model serving."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"nodepool_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - The Nodepool ID for the Nodepool to interact with"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"user_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - The user ID of the user"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"base_url"})," (",(0,r.jsx)(n.em,{children:"str"}),') - Base API URL. Default "',(0,r.jsx)(n.a,{href:"https://api.clarifai.com",children:"https://api.clarifai.com"}),'"']}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"pat"})," (",(0,r.jsx)(n.em,{children:"str"}),") - A personal access token for authentication. Can be set as env var CLARIFAI_PAT"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"token"})," (",(0,r.jsx)(n.em,{children:"str"}),") - A session token for authentication. Accepts either a session token or a pat. Can be set as env var CLARIFAI_SESSION_TOKEN"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"root_certificates_path"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Path to the SSL root certificates file, used to establish secure gRPC connections"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"**kwargs"})," - Additional keyword arguments to be passed to the nodepool"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from clarifai.client.nodepool import Nodepool\n\n# Initialize nodepool\nnodepool = Nodepool(nodepool_id="my-nodepool", user_id="user_id")\n'})}),"\n",(0,r.jsx)(n.h3,{id:"nodepoollist_deployments",children:"Nodepool.list_deployments"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Nodepool.list_deployments(filter_by={}, page_no=None, per_page=None)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Lists all the available deployments of the compute cluster."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"filter_by"})," (",(0,r.jsx)(n.em,{children:"Dict[str, Any]"}),") - The filter to apply to the list of deployments"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"page_no"})," (",(0,r.jsx)(n.em,{children:"int"}),") - The page number to list"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"per_page"})," (",(0,r.jsx)(n.em,{children:"int"}),") - The number of items per page"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Yields:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Deployment: Deployment objects for the nodepools in the compute cluster"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from clarifai.client.nodepool import Nodepool\n\nnodepool = Nodepool(nodepool_id="nodepool_id", user_id="user_id")\n\n# List all deployments\nall_deployments = list(nodepool.list_deployments())\n\n# List deployments with filtering and pagination\nfiltered_deployments = list(nodepool.list_deployments(\n    filter_by={"status": "active"},\n    page_no=1,\n    per_page=10\n))\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Note:"})," Defaults to 16 per page if page_no is specified and per_page is not specified. If both page_no and per_page are None, then lists all the resources."]}),"\n",(0,r.jsx)(n.h3,{id:"nodepoolcreate_deployment",children:"Nodepool.create_deployment"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Nodepool.create_deployment(config_filepath=None, deployment_id=None, deployment_config=None)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Creates a deployment for the nodepool."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"config_filepath"})," (",(0,r.jsx)(n.em,{children:"str"}),") - The path to the deployment config file (YAML format)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"deployment_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - New deployment ID for the deployment to create"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"deployment_config"})," (",(0,r.jsx)(n.em,{children:"Dict[str, Any]"}),") - Deployment configuration as a dictionary (alternative to config file)"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Deployment: A Deployment object for the specified deployment ID"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from clarifai.client.nodepool import Nodepool\n\nnodepool = Nodepool(nodepool_id="nodepool_id", user_id="user_id")\n\n# Create deployment from config file\ndeployment = nodepool.create_deployment(config_filepath="deployment_config.yml")\n\n# Create deployment with custom ID\ndeployment = nodepool.create_deployment(\n    config_filepath="deployment_config.yml",\n    deployment_id="my-custom-deployment"\n)\n\n# Create deployment from dictionary config\ndeployment_config = {\n    "deployment": {\n        "worker": {\n            "model": {"id": "my-model", "user_id": "user_id", "app_id": "app_id"}\n        },\n        "scheduling_choice": "priority",\n        "nodepools": [{"id": "nodepool_id", "compute_cluster": {"id": "cluster_id"}}]\n    }\n}\ndeployment = nodepool.create_deployment(deployment_config=deployment_config)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"nodepooldeployment",children:"Nodepool.deployment"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Nodepool.deployment(deployment_id)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Returns a Deployment object for the existing deployment ID."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"deployment_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - The deployment ID for the deployment to interact with"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Deployment: A Deployment object for the existing deployment ID"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from clarifai.client.nodepool import Nodepool\n\nnodepool = Nodepool(nodepool_id="nodepool_id", user_id="user_id")\ndeployment = nodepool.deployment(deployment_id="existing_deployment_id")\n'})}),"\n",(0,r.jsx)(n.h3,{id:"nodepooldelete_deployments",children:"Nodepool.delete_deployments"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Nodepool.delete_deployments(deployment_ids)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Deletes list of deployments for the nodepool."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"deployment_ids"})," (",(0,r.jsx)(n.em,{children:"List[str]"}),") - The list of deployment IDs to delete"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from clarifai.client.nodepool import Nodepool\n\nnodepool = Nodepool(nodepool_id="nodepool_id", user_id="user_id")\nnodepool.delete_deployments(deployment_ids=["deployment_id1", "deployment_id2"])\n'})}),"\n",(0,r.jsx)(n.h3,{id:"nodepoolrunner",children:"Nodepool.runner"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Nodepool.runner(runner_id)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Returns a Runner object for the existing runner ID."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"runner_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - The runner ID for the runner to interact with"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Runner: A Runner object for the existing runner ID"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from clarifai.client.nodepool import Nodepool\n\nnodepool = Nodepool(nodepool_id="nodepool_id", user_id="user_id")\nrunner = nodepool.runner(runner_id="runner_id")\n'})}),"\n",(0,r.jsx)(n.h3,{id:"nodepoolcreate_runner",children:"Nodepool.create_runner"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Nodepool.create_runner(config_filepath=None, runner_config=None)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Creates a runner for the nodepool. Only needed for local runners."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"config_filepath"})," (",(0,r.jsx)(n.em,{children:"str"}),") - The path to the runner config file (YAML format)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"runner_config"})," (",(0,r.jsx)(n.em,{children:"Dict[str, Any]"}),") - Runner configuration as a dictionary (alternative to config file)"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Runner: A Runner object for the specified runner"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from clarifai.client.nodepool import Nodepool\n\nnodepool = Nodepool(nodepool_id="nodepool_id", user_id="user_id")\n\n# Create runner from config file\nrunner = nodepool.create_runner(config_filepath="runner_config.yml")\n\n# Create runner from dictionary config\nrunner_config = {\n    "runner": {\n        "worker": {"image_url": "my-image:latest"},\n        "num_replicas": 2\n    }\n}\nrunner = nodepool.create_runner(runner_config=runner_config)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"nodepooldelete_runners",children:"Nodepool.delete_runners"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Nodepool.delete_runners(runner_ids)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Deletes list of runners for the nodepool."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"runner_ids"})," (",(0,r.jsx)(n.em,{children:"List[str]"}),") - The list of runner IDs to delete"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from clarifai.client.nodepool import Nodepool\n\nnodepool = Nodepool(nodepool_id="nodepool_id", user_id="user_id")\nnodepool.delete_runners(runner_ids=["runner_id1", "runner_id2"])\n'})}),"\n",(0,r.jsx)(n.h3,{id:"nodepoolget_runner_selector",children:"Nodepool.get_runner_selector"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Nodepool.get_runner_selector(user_id, compute_cluster_id, nodepool_id)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Returns a RunnerSelector object for the specified compute cluster and nodepool."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"user_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - The user ID of the user"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"compute_cluster_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - The compute cluster ID for the compute cluster"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"nodepool_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - The nodepool ID for the nodepool"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"resources_pb2.RunnerSelector: A RunnerSelector object for the specified compute cluster and nodepool"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from clarifai.client.nodepool import Nodepool\n\nrunner_selector = Nodepool.get_runner_selector(\n    user_id="user_id",\n    compute_cluster_id="compute_cluster_id", \n    nodepool_id="nodepool_id"\n)\n'})}),"\n",(0,r.jsx)(n.h2,{id:"pipeline",children:(0,r.jsx)(n.a,{href:"https://github.com/Clarifai/clarifai-python/blob/master/clarifai/client/pipeline.py",children:"Pipeline"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'class Pipeline(url=None, pipeline_id=None, pipeline_version_id=None, pipeline_version_run_id=None, user_id=None, app_id=None, nodepool_id=None, compute_cluster_id=None, log_file=None, base_url="https://api.clarifai.com", pat=None, token=None, root_certificates_path=None, **kwargs)\n'})}),"\n",(0,r.jsx)(n.p,{children:"The Pipeline class provides a complete interface for executing and monitoring pipeline runs, making it easy to integrate complex data processing workflows into your applications with robust monitoring and logging capabilities."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"url"})," (",(0,r.jsx)(n.em,{children:"Optional[str]"}),") - The URL to initialize the pipeline object"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"pipeline_id"})," (",(0,r.jsx)(n.em,{children:"Optional[str]"}),") - The Pipeline ID to interact with"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"pipeline_version_id"})," (",(0,r.jsx)(n.em,{children:"Optional[str]"}),") - The Pipeline Version ID to interact with"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"pipeline_version_run_id"})," (",(0,r.jsx)(n.em,{children:"Optional[str]"}),") - The Pipeline Version Run ID. If not provided, a UUID will be generated"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"user_id"})," (",(0,r.jsx)(n.em,{children:"Optional[str]"}),") - The User ID that owns the pipeline"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"app_id"})," (",(0,r.jsx)(n.em,{children:"Optional[str]"}),") - The App ID that contains the pipeline"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"nodepool_id"})," (",(0,r.jsx)(n.em,{children:"Optional[str]"}),") - The Nodepool ID to run the pipeline on"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"compute_cluster_id"})," (",(0,r.jsx)(n.em,{children:"Optional[str]"}),") - The Compute Cluster ID to run the pipeline on"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"log_file"})," (",(0,r.jsx)(n.em,{children:"Optional[str]"}),") - Path to file where logs should be written. If not provided, logs are displayed on console"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"base_url"})," (",(0,r.jsx)(n.em,{children:"str"}),') - Base API URL. Default "',(0,r.jsx)(n.a,{href:"https://api.clarifai.com",children:"https://api.clarifai.com"}),'"']}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"pat"})," (",(0,r.jsx)(n.em,{children:"Optional[str]"}),") - A personal access token for authentication. Can be set as env var CLARIFAI_PAT"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"token"})," (",(0,r.jsx)(n.em,{children:"Optional[str]"}),") - A session token for authentication. Accepts either a session token or a pat. Can be set as env var CLARIFAI_SESSION_TOKEN"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"root_certificates_path"})," (",(0,r.jsx)(n.em,{children:"Optional[str]"}),") - Path to the SSL root certificates file, used to establish secure gRPC connections"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"**kwargs"})," - Additional keyword arguments to be passed to the Pipeline"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Note:"})," Either url or pipeline_id must be specified, but not both."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from clarifai.client.pipeline import Pipeline\n\n# Initialize from URL\npipeline = Pipeline(url="https://clarifai.com/user_id/app_id/pipelines/pipeline_id")\n\n# Initialize with explicit parameters\npipeline = Pipeline(\n    pipeline_id="my-pipeline",\n    pipeline_version_id="v1",\n    user_id="user_id",\n    app_id="app_id",\n    nodepool_id="nodepool-1",\n    compute_cluster_id="cluster-1"\n)\n\n# Initialize with custom run ID and log file\npipeline = Pipeline(\n    pipeline_id="my-pipeline",\n    pipeline_version_run_id="custom-run-123",\n    log_file="pipeline_logs.txt",\n    user_id="user_id",\n    app_id="app_id"\n)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"pipelinerun",children:"Pipeline.run"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Pipeline.run(inputs=None, timeout=3600, monitor_interval=10)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Run the pipeline and monitor its progress."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"inputs"})," (",(0,r.jsx)(n.em,{children:"List"}),") - List of inputs to run the pipeline with. If None, runs without inputs"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"timeout"})," (",(0,r.jsx)(n.em,{children:"int"}),") - Maximum time to wait for completion in seconds. Default 3600 (1 hour)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"monitor_interval"})," (",(0,r.jsx)(n.em,{children:"int"}),") - Interval between status checks in seconds. Default 10"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Dict: The pipeline run result with keys:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"status"}),': "success", "failed", or "timeout"']}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"pipeline_version_run"}),": Detailed run information when successful"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from clarifai.client.pipeline import Pipeline\n\n# Initialize pipeline\npipeline = Pipeline(\n    pipeline_id="my-pipeline",\n    user_id="user_id",\n    app_id="app_id",\n    nodepool_id="nodepool-1",\n    compute_cluster_id="cluster-1"\n)\n\n# Run pipeline without inputs\nresult = pipeline.run()\n\n# Run pipeline with inputs\ninputs = [{"data": {"text": {"raw": "Hello world"}}}]\nresult = pipeline.run(inputs=inputs)\n\n# Run with custom timeout and monitoring interval\nresult = pipeline.run(\n    inputs=inputs,\n    timeout=7200,  # 2 hours\n    monitor_interval=5  # Check every 5 seconds\n)\n\nif result["status"] == "success":\n    print("Pipeline completed successfully!")\n    print(f"Run details: {result[\'pipeline_version_run\']}")\nelif result["status"] == "failed":\n    print("Pipeline failed")\nelse:\n    print("Pipeline timed out")\n'})}),"\n",(0,r.jsx)(n.h3,{id:"pipelinemonitor_only",children:"Pipeline.monitor_only"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Pipeline.monitor_only(timeout=3600, monitor_interval=10)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Monitor an existing pipeline run without starting a new one."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"timeout"})," (",(0,r.jsx)(n.em,{children:"int"}),") - Maximum time to wait for completion in seconds. Default 3600 (1 hour)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"monitor_interval"})," (",(0,r.jsx)(n.em,{children:"int"}),") - Interval between status checks in seconds. Default 10"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Dict: The pipeline run result with keys:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"status"}),': "success", "failed", or "timeout"']}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"pipeline_version_run"}),": Detailed run information when successful"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from clarifai.client.pipeline import Pipeline\n\n# Monitor an existing pipeline run\npipeline = Pipeline(\n    pipeline_id="my-pipeline",\n    pipeline_version_run_id="existing-run-id-123",\n    user_id="user_id",\n    app_id="app_id"\n)\n\n# Monitor the existing run\nresult = pipeline.monitor_only()\n\n# Monitor with custom settings\nresult = pipeline.monitor_only(\n    timeout=1800,  # 30 minutes\n    monitor_interval=15  # Check every 15 seconds\n)\n\nif result["status"] == "success":\n    print("Pipeline run completed successfully!")\n'})}),"\n",(0,r.jsx)(n.h2,{id:"search",children:(0,r.jsx)(n.a,{href:"https://github.com/Clarifai/clarifai-python/blob/master/clarifai/client/search.py",children:"Search"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"class Search(user_id, app_id, top_k=None, metric='cosine', algorithm='nearest_neighbor', pagination=False, base_url=\"https://api.clarifai.com\", pat=None, token=None, root_certificates_path=None)\n"})}),"\n",(0,r.jsx)(n.p,{children:"The Search class provides a comprehensive interface for performing various types of searches across your Clarifai app's inputs with powerful filtering and ranking capabilities."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"user_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - User ID"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"app_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - App ID"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"top_k"})," (",(0,r.jsx)(n.em,{children:"int"}),") - Top K results to retrieve. Defaults to 10 when pagination is False"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"metric"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Similarity metric (either 'cosine' or 'euclidean'). Defaults to 'cosine'"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"algorithm"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Search algorithm (either 'nearest_neighbor' or 'brute_force'). Defaults to 'nearest_neighbor'"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"pagination"})," (",(0,r.jsx)(n.em,{children:"bool"}),") - Enable pagination. Defaults to False"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"base_url"})," (",(0,r.jsx)(n.em,{children:"str"}),') - Base API URL. Default "',(0,r.jsx)(n.a,{href:"https://api.clarifai.com",children:"https://api.clarifai.com"}),'"']}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"pat"})," (",(0,r.jsx)(n.em,{children:"str"}),") - A personal access token for authentication. Can be set as env var CLARIFAI_PAT"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"token"})," (",(0,r.jsx)(n.em,{children:"str"}),") - A session token for authentication. Accepts either a session token or a pat. Can be set as env var CLARIFAI_SESSION_TOKEN"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"root_certificates_path"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Path to the SSL root certificates file, used to establish secure gRPC connections"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Note:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Cosine distance metric is not supported with nearest neighbor algorithm"}),"\n",(0,r.jsx)(n.li,{children:"top_k and pagination cannot be used together"}),"\n",(0,r.jsx)(n.li,{children:"When pagination is False and top_k is not specified, defaults to 10 results"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from clarifai.client.search import Search\n\n# Basic search with top_k\nsearch = Search(user_id='user_id', app_id='app_id', top_k=10, metric='cosine')\n\n# Search with pagination enabled\nsearch = Search(\n    user_id='user_id', \n    app_id='app_id', \n    metric='cosine', \n    pagination=True\n)\n\n# Search with euclidean metric\nsearch = Search(\n    user_id='user_id',\n    app_id='app_id',\n    top_k=20,\n    metric='euclidean',\n    algorithm='brute_force'\n)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"searchquery",children:"Search.query"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Search.query(ranks=[{}], filters=[{}], page_no=None, per_page=None)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Perform a query with rank and filters."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"ranks"})," (",(0,r.jsx)(n.em,{children:"List[Dict]"}),") - List of rank parameters for similarity search. Each dict can contain:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"image_bytes"})," (",(0,r.jsx)(n.em,{children:"bytes"}),") - Raw image bytes for vector search"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"image_url"})," (",(0,r.jsx)(n.em,{children:"str"}),") - URL to an image for vector search"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"text_raw"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Raw text content for text search"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"concepts"})," (",(0,r.jsx)(n.em,{children:"List[Dict]"}),") - List of concept dictionaries for concept-based search"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"metadata"})," (",(0,r.jsx)(n.em,{children:"Dict"}),") - Metadata dictionary for metadata-based search"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"geo_point"})," (",(0,r.jsx)(n.em,{children:"Dict"}),") - Geographic point with keys:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"longitude"})," (",(0,r.jsx)(n.em,{children:"float"}),") - Geographic longitude"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"latitude"})," (",(0,r.jsx)(n.em,{children:"float"}),") - Geographic latitude"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"geo_limit"})," (",(0,r.jsx)(n.em,{children:"float"}),") - Geographical limit in kilometers"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"filters"})," (",(0,r.jsx)(n.em,{children:"List[Dict]"}),") - List of filter parameters to narrow down results. Each dict can contain:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"input_types"})," (",(0,r.jsx)(n.em,{children:"List[str]"}),") - List of input types to filter by ('image', 'text', 'audio', 'video')"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"input_dataset_ids"})," (",(0,r.jsx)(n.em,{children:"List[str]"}),") - List of dataset IDs to filter by"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"input_status_code"})," (",(0,r.jsx)(n.em,{children:"int"}),") - Status code to filter by (e.g., 30000 for successful inputs)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"concepts"})," (",(0,r.jsx)(n.em,{children:"List[Dict]"}),") - List of concept dictionaries for filtering"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"metadata"})," (",(0,r.jsx)(n.em,{children:"Dict"}),") - Metadata dictionary for filtering"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"geo_point"})," (",(0,r.jsx)(n.em,{children:"Dict"}),") - Geographic point for location-based filtering"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"page_no"})," (",(0,r.jsx)(n.em,{children:"int"}),") - The page number to list (only when pagination=True)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"per_page"})," (",(0,r.jsx)(n.em,{children:"int"}),") - The number of items per page (only when pagination=True)"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Generator[Dict[str, Any], None, None]: A generator of query results"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from clarifai.client.search import Search\n\n# Vector search by image URL with top_k\nsearch = Search(user_id='user_id', app_id='app_id', top_k=10, metric='cosine')\nresults = search.query(\n    ranks=[{'image_url': 'https://samples.clarifai.com/dog.tiff'}]\n)\n\n# Text search with filtering\nsearch = Search(user_id='user_id', app_id='app_id', top_k=15, metric='cosine')\nresults = search.query(\n    ranks=[{'text_raw': 'search query'}],\n    filters=[{'input_types': ['text']}]\n)\n\n# Search with pagination\nsearch = Search(user_id='user_id', app_id='app_id', metric='cosine', pagination=True)\nresults = search.query(\n    ranks=[{'image_url': 'https://samples.clarifai.com/dog.tiff'}],\n    page_no=2, \n    per_page=5\n)\n\n# Filter by input status and type\nsearch = Search(user_id='user_id', app_id='app_id', top_k=10, metric='cosine')\nresults = search.query(\n    filters=[{\n        'input_types': ['image', 'text'], \n        'input_status_code': 30000  # Successful inputs\n    }]\n)\n\n# Geographic search\nsearch = Search(user_id='user_id', app_id='app_id', top_k=10, metric='cosine')\nresults = search.query(\n    ranks=[{\n        'geo_point': {\n            'longitude': -74.006,\n            'latitude': 40.7128,\n            'geo_limit': 10.0  # Within 10 kilometers\n        }\n    }]\n)\n\n# Concept-based search\nsearch = Search(user_id='user_id', app_id='app_id', top_k=10, metric='cosine')\nresults = search.query(\n    ranks=[{\n        'concepts': [\n            {'id': 'cat', 'value': 1.0},\n            {'id': 'animal', 'value': 1.0}\n        ]\n    }]\n)\n\n# Iterate through results\nfor result_batch in results:\n    for hit in result_batch.hits:\n        print(f\"Score: {hit.score}, Input ID: {hit.input.id}\")\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Note:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["For detailed schema of rank and filter parameters, refer to the ",(0,r.jsx)(n.a,{href:"https://github.com/Clarifai/clarifai-python/tree/master/clarifai/schema/search.py",children:"search schema"})]}),"\n",(0,r.jsxs)(n.li,{children:["For more search examples, refer to the ",(0,r.jsx)(n.a,{href:"https://github.com/Clarifai/examples/tree/main/search",children:"examples repository"})]}),"\n",(0,r.jsxs)(n.li,{children:["When using pagination, you must set ",(0,r.jsx)(n.code,{children:"pagination=True"})," during Search initialization"]}),"\n",(0,r.jsx)(n.li,{children:"The method performs OR operations when multiple values are provided in filters (e.g., multiple input_types)"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"user",children:(0,r.jsx)(n.a,{href:"https://github.com/Clarifai/clarifai-python/blob/master/clarifai/client/user.py",children:"User"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'class User(user_id=None, base_url="https://api.clarifai.com", pat=None, token=None, root_certificates_path=None, **kwargs)\n'})}),"\n",(0,r.jsx)(n.p,{children:"User is a class that provides access to Clarifai API endpoints related to user information."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"user_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - The user ID for the user to interact with"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"base_url"})," (",(0,r.jsx)(n.em,{children:"str"}),') - Base API url. Default "',(0,r.jsx)(n.a,{href:"https://api.clarifai.com",children:"https://api.clarifai.com"}),'"']}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"pat"})," (",(0,r.jsx)(n.em,{children:"str"}),") - A personal access token for authentication. Can be set as env var CLARIFAI_PAT"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"token"})," (",(0,r.jsx)(n.em,{children:"str"}),") - A session token for authentication. Can be set as env var CLARIFAI_SESSION_TOKEN"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"root_certificates_path"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Path to the SSL root certificates file"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"**kwargs"})," - Additional keyword arguments"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"userapp",children:"User.app"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"User.app(app_id, **kwargs)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Returns an App object for the specified app ID."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"app_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - The app ID for the app to interact with"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"**kwargs"})," - Additional keyword arguments"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"App: An App object for the specified app ID"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from clarifai.client.user import User\napp = User("user_id").app("app_id")\n'})}),"\n",(0,r.jsx)(n.h3,{id:"usercreate_app",children:"User.create_app"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"User.create_app(app_id, base_workflow='Empty', **kwargs)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Creates an app for the user."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"app_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - The app ID for the app to create"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"base_workflow"})," (",(0,r.jsx)(n.em,{children:"str"}),") - The base workflow to use (e.g. 'Universal', 'Empty', 'General')"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"**kwargs"})," - Additional keyword arguments"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"App: An App object for the specified app ID"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from clarifai.client.user import User\nclient = User(user_id="user_id")\napp = client.create_app(app_id="app_id", base_workflow="Universal")\n'})}),"\n",(0,r.jsx)(n.h3,{id:"userdelete_app",children:"User.delete_app"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"User.delete_app(app_id)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Deletes an app by app id."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"app_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - The ID of the app to delete"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from clarifai.client.user import User\nUser("user_id").delete_app("app_id")\n'})}),"\n",(0,r.jsx)(n.h3,{id:"userlist_apps",children:"User.list_apps"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"User.list_apps(filter_by={}, page_no=None, per_page=None)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Lists all apps for the user."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"filter_by"})," (",(0,r.jsx)(n.em,{children:"Dict[str, Any]"}),") - Dictionary of filters"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"page_no"})," (",(0,r.jsx)(n.em,{children:"int"}),") - Page number to list"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"per_page"})," (",(0,r.jsx)(n.em,{children:"int"}),") - Items per page"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Yields:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"App objects"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from clarifai.client.user import User\napps = list(User("user_id").list_apps())\n'})}),"\n",(0,r.jsx)(n.h3,{id:"userpatch_app",children:"User.patch_app"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"User.patch_app(app_id, action='overwrite', **kwargs) \n"})}),"\n",(0,r.jsx)(n.p,{children:"Updates an app by app id."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"app_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - The app ID to patch"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"action"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Action to perform ('overwrite'/'remove')"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"**kwargs"})," - Properties to update"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Updated App object"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from clarifai.client.user import User\nclient = User(user_id="user_id")\napp = client.patch_app("app_id", description="New description")\n'})}),"\n",(0,r.jsx)(n.h3,{id:"userrunner",children:"User.runner"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"User.runner(runner_id) \n"})}),"\n",(0,r.jsx)(n.p,{children:"Returns a Runner object if it exists."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"runner_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - The runner ID to interact with"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Dict containing information about the existing runner"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from clarifai.client.user import User\nclient = User(user_id="user_id")\nrunner_info = client.runner(runner_id="runner_id")\n'})}),"\n",(0,r.jsx)(n.h3,{id:"userlist_runners",children:"User.list_runners"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"User.list_runners(filter_by={}, page_no=None, per_page=None) \n"})}),"\n",(0,r.jsx)(n.p,{children:"Lists all runners for the user."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"filter_by"})," (",(0,r.jsx)(n.em,{children:"Dict[str, Any]"}),") - Dictionary of filters"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"page_no"})," (",(0,r.jsx)(n.em,{children:"int"}),") - Page number to list"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"per_page"})," (",(0,r.jsx)(n.em,{children:"int"}),") - Items per page"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Yields:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Dict objects containing runner information"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from clarifai.client.user import User\nclient = User(user_id="user_id")\nall_runners = list(client.list_runners())\n'})}),"\n",(0,r.jsx)(n.h3,{id:"userdelete_runner",children:"User.delete_runner"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"User.delete_runner(runner_id)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Deletes a runner by runner id."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"runner_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - The ID of the runner to delete"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from clarifai.client.user import User\nclient = User(user_id="user_id")\nclient.delete_runner(runner_id="runner_id")\n'})}),"\n",(0,r.jsx)(n.h3,{id:"usercompute_cluster",children:"User.compute_cluster"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"User.compute_cluster(compute_cluster_id) \n"})}),"\n",(0,r.jsx)(n.p,{children:"Returns a Compute Cluster object for the specified compute cluster ID."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"compute_cluster_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - The compute cluster ID to interact with"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"ComputeCluster: A Compute Cluster object for the specified ID"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from clarifai.client.user import User\ncompute_cluster = User("user_id").compute_cluster("compute_cluster_id")\n'})}),"\n",(0,r.jsx)(n.h3,{id:"usercreate_compute_cluster",children:"User.create_compute_cluster"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"User.create_compute_cluster(config_filepath=None, compute_cluster_id=None, compute_cluster_config=None) \n"})}),"\n",(0,r.jsx)(n.p,{children:"Creates a compute cluster for the user."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"config_filepath"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Path to the compute cluster config file"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"compute_cluster_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Optional ID for the new compute cluster"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"compute_cluster_config"})," (",(0,r.jsx)(n.em,{children:"Dict[str, Any]"}),") - Optional dictionary containing compute cluster configuration"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"ComputeCluster object for the created cluster"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from clarifai.client.user import User\nclient = User(user_id="user_id")\ncluster = client.create_compute_cluster(config_filepath="config.yml")\n'})}),"\n",(0,r.jsx)(n.h3,{id:"userlist_compute_clusters",children:"User.list_compute_clusters"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"User.list_compute_clusters(page_no=None, per_page=None) \n"})}),"\n",(0,r.jsx)(n.p,{children:"Lists compute clusters for the user."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"page_no"})," (",(0,r.jsx)(n.em,{children:"int"}),") - Page number to list"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"per_page"})," (",(0,r.jsx)(n.em,{children:"int"}),") - Items per page"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Yields:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"ComputeCluster objects"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from clarifai.client.user import User\nclient = User(user_id="user_id")\nclusters = list(client.list_compute_clusters())\n'})}),"\n",(0,r.jsx)(n.h3,{id:"userdelete_compute_clusters",children:"User.delete_compute_clusters"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"User.delete_compute_clusters(compute_cluster_ids) \n"})}),"\n",(0,r.jsx)(n.p,{children:"Deletes multiple compute clusters by their IDs."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"compute_cluster_ids"})," (",(0,r.jsx)(n.em,{children:"List[str]"}),") - List of compute cluster IDs to delete"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from clarifai.client.user import User\nUser("user_id").delete_compute_clusters(["cluster_id1", "cluster_id2"])\n'})}),"\n",(0,r.jsx)(n.h3,{id:"userlist_pipelines",children:"User.list_pipelines"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"User.list_pipelines(page_no=None, per_page=None)\n"})}),"\n",(0,r.jsx)(n.p,{children:"List all pipelines for the user across all apps."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"page_no"})," (",(0,r.jsx)(n.em,{children:"int"}),") - Page number to list"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"per_page"})," (",(0,r.jsx)(n.em,{children:"int"}),") - Items per page"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Yields:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Dict objects containing pipeline information"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from clarifai.client.user import User\nclient = User(user_id="user_id")\nall_pipelines = list(client.list_pipelines())\n'})}),"\n",(0,r.jsx)(n.h3,{id:"userlist_pipeline_steps",children:"User.list_pipeline_steps"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"User.list_pipeline_steps(page_no=None, per_page=None)\n"})}),"\n",(0,r.jsx)(n.p,{children:"List all pipeline steps for the user across all apps."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"page_no"})," (",(0,r.jsx)(n.em,{children:"int"}),") - Page number to list"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"per_page"})," (",(0,r.jsx)(n.em,{children:"int"}),") - Items per page"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Yields:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Dict objects containing pipeline step information"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from clarifai.client.user import User\nclient = User(user_id="user_id")\nall_pipeline_steps = list(client.list_pipeline_steps())\n'})}),"\n",(0,r.jsx)(n.h3,{id:"userget_secret",children:"User.get_secret"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"User.get_secret(secret_id)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Returns a secret object if exists."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"secret_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - The secret ID to interact with"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Dict containing information about the existing secret"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from clarifai.client.user import User\nclient = User(user_id="user_id")\nsecret_info = client.get_secret(secret_id="secret_id")\n'})}),"\n",(0,r.jsx)(n.h3,{id:"userlist_secrets",children:"User.list_secrets"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"User.list_secrets(page_no=None, per_page=None)\n"})}),"\n",(0,r.jsx)(n.p,{children:"List all secrets for the user."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"page_no"})," (",(0,r.jsx)(n.em,{children:"int"}),") - Page number to list"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"per_page"})," (",(0,r.jsx)(n.em,{children:"int"}),") - Items per page"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Yields:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Dict objects containing secret information"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from clarifai.client.user import User\nclient = User(user_id="user_id")\nall_secrets = list(client.list_secrets())\n'})}),"\n",(0,r.jsx)(n.h3,{id:"usercreate_secrets",children:"User.create_secrets"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"User.create_secrets(secrets)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Creates secrets for the user."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"secrets"})," (",(0,r.jsx)(n.em,{children:"List[Dict[str, Any]]"}),") - List of secret configurations to create"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"List[Dict]: List of dictionaries containing information about the created secrets"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from clarifai.client.user import User\nclient = User(user_id="user_id")\nsecrets = [{"id": "secret1", "value": "secret_value", "description": "My Secret"}]\ncreated_secrets = client.create_secrets(secrets)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"userpatch_secrets",children:"User.patch_secrets"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"User.patch_secrets(secrets, action='overwrite')\n"})}),"\n",(0,r.jsx)(n.p,{children:"Patches secrets for the user."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"secrets"})," (",(0,r.jsx)(n.em,{children:"List[Dict[str, Any]]"}),") - List of secret configurations to patch"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"action"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Action to perform ('overwrite'/'remove')"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"List[Dict]: List of dictionaries containing information about the patched secrets"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from clarifai.client.user import User\nclient = User(user_id="user_id")\nsecrets = [{"id": "secret1", "description": "Updated Secret Description"}]\npatched_secrets = client.patch_secrets(secrets, action="overwrite")\n'})}),"\n",(0,r.jsx)(n.h3,{id:"userdelete_secrets",children:"User.delete_secrets"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"User.delete_secrets(secret_ids)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Deletes a list of secrets for the user."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"secret_ids"})," (",(0,r.jsx)(n.em,{children:"List[str]"}),") - The secret IDs to delete"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from clarifai.client.user import User\nclient = User(user_id="user_id")\nclient.delete_secrets(secret_ids=["secret_id1", "secret_id2"])\n'})}),"\n",(0,r.jsx)(n.h3,{id:"userlist_models",children:"User.list_models"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"User.list_models(user_id=None, app_id=None, show=True, return_clarifai_model=False, **kwargs)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Lists models for the user or across all users."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"user_id"})," (",(0,r.jsx)(n.em,{children:"str"}),') - User ID to list models from, use "all" for all users']}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"app_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - App ID to filter models"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"show"})," (",(0,r.jsx)(n.em,{children:"bool"}),") - Whether to display results in table format"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"return_clarifai_model"})," (",(0,r.jsx)(n.em,{children:"bool"}),") - Whether to return Model objects instead of dicts"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"**kwargs"})," - Additional keyword arguments"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"List of model dictionaries or Model objects"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from clarifai.client.user import User\nclient = User(user_id="user_id")\nmodels = client.list_models(user_id="all", show=True)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"userget_user_info",children:"User.get_user_info"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"User.get_user_info(user_id=None)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Returns the user information for the specified user ID."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"user_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - The user ID for the user to interact with"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"User: A User object for the specified user ID"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"workflow",children:(0,r.jsx)(n.a,{href:"https://github.com/Clarifai/clarifai-python/blob/master/clarifai/client/workflow.py",children:"Workflow"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"class Workflow(url=None, workflow_id=None, workflow_version={'id': \"\"}, output_config={'min_value': 0}, base_url=\"https://api.clarifai.com\", pat=None, token=None, root_certificates_path=None, **kwargs)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Workflow is a class that provides access to Clarifai API endpoints related to Workflow information."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"url"})," (",(0,r.jsx)(n.em,{children:"str"}),") - URL to initialize workflow object"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"workflow_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Workflow ID to interact with"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"workflow_version"})," (",(0,r.jsx)(n.em,{children:"Dict[str, str]"}),") - Workflow Version to interact with. Defaults to ",(0,r.jsx)(n.code,{children:"{'id': \"\"}"})," for latest version"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"output_config"})," (",(0,r.jsx)(n.em,{children:"Dict[str, Any]"}),") - Output configuration including:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"min_value"})," (",(0,r.jsx)(n.em,{children:"float"}),") - Minimum prediction confidence threshold"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"max_concepts"})," (",(0,r.jsx)(n.em,{children:"int"}),") - Maximum number of concepts to return"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"select_concepts"})," (",(0,r.jsx)(n.em,{children:"List[Concept]"}),") - Specific concepts to select"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"sample_ms"})," (",(0,r.jsx)(n.em,{children:"int"}),") - Sampling duration in milliseconds"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"base_url"})," (",(0,r.jsx)(n.em,{children:"str"}),') - Base API URL. Default "',(0,r.jsx)(n.a,{href:"https://api.clarifai.com",children:"https://api.clarifai.com"}),'"']}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"pat"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Personal access token for authentication. Can be set as env var CLARIFAI_PAT"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"token"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Session token for authentication. Can be set as env var CLARIFAI_SESSION_TOKEN"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"root_certificates_path"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Path to SSL root certificates file"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"**kwargs"})," - Additional keyword arguments"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Note:"})," You must specify either ",(0,r.jsx)(n.code,{children:"url"})," or ",(0,r.jsx)(n.code,{children:"workflow_id"}),", but not both."]}),"\n",(0,r.jsx)(n.h3,{id:"workflowpredict",children:"Workflow.predict"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Workflow.predict(inputs, workflow_state_id=None)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Makes predictions using the workflow."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"inputs"})," (",(0,r.jsx)(n.em,{children:"List[Input]"}),") - List of inputs to predict (max 32)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"workflow_state_id"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Cache key for workflow node predictions"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Workflow prediction response"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from clarifai.client.workflow import Workflow\nworkflow = Workflow(workflow_id='workflow_id')\nresponse = workflow.predict(inputs=[input_proto])\n"})}),"\n",(0,r.jsx)(n.h3,{id:"workflowpredict_by_filepath",children:"Workflow.predict_by_filepath"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Workflow.predict_by_filepath(filepath, input_type=None)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Makes predictions from file input."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"filepath"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Path to input file"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"input_type"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Input type ('image', 'text', 'video', 'audio'). If not provided, will be inferred from workflow"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Workflow prediction response"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from clarifai.client.workflow import Workflow\nworkflow = Workflow(\"https://clarifai.com/clarifai/main/workflows/Face-Sentiment\")\nprediction = workflow.predict_by_filepath('image.jpg', input_type='image')\n"})}),"\n",(0,r.jsx)(n.h3,{id:"workflowpredict_by_bytes",children:"Workflow.predict_by_bytes"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Workflow.predict_by_bytes(input_bytes, input_type=None)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Makes predictions from bytes input."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"input_bytes"})," (",(0,r.jsx)(n.em,{children:"bytes"}),") - Input bytes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"input_type"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Input type ('image', 'text', 'video', 'audio'). If not provided, will be inferred from workflow"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Workflow prediction response"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"with open('image.jpg', 'rb') as f:\n    bytes_data = f.read()\nworkflow = Workflow(user_id='user_id', app_id='app_id', workflow_id='workflow_id')\nprediction = workflow.predict_by_bytes(bytes_data, input_type='image')\n"})}),"\n",(0,r.jsx)(n.h3,{id:"workflowpredict_by_url",children:"Workflow.predict_by_url"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Workflow.predict_by_url(url, input_type=None)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Makes predictions from URL input."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"url"})," (",(0,r.jsx)(n.em,{children:"str"}),") - URL to input"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"input_type"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Input type ('image', 'text', 'video', 'audio'). If not provided, will be inferred from workflow"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Workflow prediction response"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from clarifai.client.workflow import Workflow\nworkflow = Workflow(\"https://clarifai.com/clarifai/main/workflows/Face-Sentiment\")\nprediction = workflow.predict_by_url('https://example.com/image.jpg', input_type='image')\n"})}),"\n",(0,r.jsx)(n.h3,{id:"workflowlist_versions",children:"Workflow.list_versions"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Workflow.list_versions(page_no=None, per_page=None)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Lists all versions of the workflow."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"page_no"})," (",(0,r.jsx)(n.em,{children:"int"}),") - Page number for pagination"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"per_page"})," (",(0,r.jsx)(n.em,{children:"int"}),") - Items per page"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Yields:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Workflow objects for each version"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from clarifai.client.workflow import Workflow\nworkflow = Workflow(user_id='user_id', app_id='app_id', workflow_id='workflow_id')\nworkflow_versions = list(workflow.list_versions())\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Note:"})," Defaults to 16 items per page if only page_no specified. Lists all if neither specified."]}),"\n",(0,r.jsx)(n.h3,{id:"workflowexport",children:"Workflow.export"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Workflow.export(out_path)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Exports workflow to YAML file."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"out_path"})," (",(0,r.jsx)(n.em,{children:"str"}),") - Path to save YAML file"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from clarifai.client.workflow import Workflow\nworkflow = Workflow(\"https://clarifai.com/clarifai/main/workflows/Demographics\")\nworkflow.export('workflow_config.yml')\n"})}),"\n",(0,r.jsx)(n.h3,{id:"workflowload_info",children:"Workflow.load_info"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Workflow.load_info()\n"})}),"\n",(0,r.jsx)(n.p,{children:"Loads or refreshes workflow information and input types."}),"\n",(0,r.jsx)(n.p,{children:"This method:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Fetches latest workflow configuration"}),"\n",(0,r.jsx)(n.li,{children:"Updates workflow info and kwargs"}),"\n",(0,r.jsx)(n.li,{children:"Loads input types from first workflow node"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from clarifai.client.workflow import Workflow\nworkflow = Workflow(workflow_id='workflow_id')\nworkflow.load_info()\n"})})]})}function p(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>d});var i=s(96540);const r={},l=i.createContext(r);function t(e){const n=i.useContext(l);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);
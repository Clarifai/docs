"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[3221],{3905:function(n,t,e){e.d(t,{Zo:function(){return u},kt:function(){return _}});var a=e(7294);function o(n,t,e){return t in n?Object.defineProperty(n,t,{value:e,enumerable:!0,configurable:!0,writable:!0}):n[t]=e,n}function i(n,t){var e=Object.keys(n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),e.push.apply(e,a)}return e}function s(n){for(var t=1;t<arguments.length;t++){var e=null!=arguments[t]?arguments[t]:{};t%2?i(Object(e),!0).forEach((function(t){o(n,t,e[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(e)):i(Object(e)).forEach((function(t){Object.defineProperty(n,t,Object.getOwnPropertyDescriptor(e,t))}))}return n}function r(n,t){if(null==n)return{};var e,a,o=function(n,t){if(null==n)return{};var e,a,o={},i=Object.keys(n);for(a=0;a<i.length;a++)e=i[a],t.indexOf(e)>=0||(o[e]=n[e]);return o}(n,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);for(a=0;a<i.length;a++)e=i[a],t.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(n,e)&&(o[e]=n[e])}return o}var p=a.createContext({}),l=function(n){var t=a.useContext(p),e=t;return n&&(e="function"==typeof n?n(t):s(s({},t),n)),e},u=function(n){var t=l(n.components);return a.createElement(p.Provider,{value:t},n.children)},d={inlineCode:"code",wrapper:function(n){var t=n.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(n,t){var e=n.components,o=n.mdxType,i=n.originalType,p=n.parentName,u=r(n,["components","mdxType","originalType","parentName"]),c=l(e),_=o,m=c["".concat(p,".").concat(_)]||c[_]||d[_]||i;return e?a.createElement(m,s(s({ref:t},u),{},{components:e})):a.createElement(m,s({ref:t},u))}));function _(n,t){var e=arguments,o=t&&t.mdxType;if("string"==typeof n||o){var i=e.length,s=new Array(i);s[0]=c;var r={};for(var p in t)hasOwnProperty.call(t,p)&&(r[p]=t[p]);r.originalType=n,r.mdxType="string"==typeof n?n:o,s[1]=r;for(var l=2;l<i;l++)s[l]=e[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,e)}c.displayName="MDXCreateElement"},8215:function(n,t,e){var a=e(7294);t.Z=function(n){var t=n.children,e=n.hidden,o=n.className;return a.createElement("div",{role:"tabpanel",hidden:e,className:o},t)}},6396:function(n,t,e){e.d(t,{Z:function(){return c}});var a=e(7462),o=e(7294),i=e(2389),s=e(9443);var r=function(){var n=(0,o.useContext)(s.Z);if(null==n)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return n},p=e(3616),l=e(6010),u="tabItem_vU9c";function d(n){var t,e,i,s=n.lazy,d=n.block,c=n.defaultValue,_=n.values,m=n.groupId,h=n.className,g=o.Children.map(n.children,(function(n){if((0,o.isValidElement)(n)&&void 0!==n.props.value)return n;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof n.type?n.type:n.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),I=null!=_?_:g.map((function(n){var t=n.props;return{value:t.value,label:t.label,attributes:t.attributes}})),b=(0,p.lx)(I,(function(n,t){return n.value===t.value}));if(b.length>0)throw new Error('Docusaurus error: Duplicate values "'+b.map((function(n){return n.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var f=null===c?c:null!=(t=null!=c?c:null==(e=g.find((function(n){return n.props.default})))?void 0:e.props.value)?t:null==(i=g[0])?void 0:i.props.value;if(null!==f&&!I.some((function(n){return n.value===f})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+f+'" but none of its children has the corresponding value. Available values are: '+I.map((function(n){return n.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var v=r(),N=v.tabGroupChoices,T=v.setTabGroupChoices,O=(0,o.useState)(f),A=O[0],w=O[1],R=[],D=(0,p.o5)().blockElementScrollPositionUntilNextRender;if(null!=m){var y=N[m];null!=y&&y!==A&&I.some((function(n){return n.value===y}))&&w(y)}var E=function(n){var t=n.currentTarget,e=R.indexOf(t),a=I[e].value;a!==A&&(D(t),w(a),null!=m&&T(m,a))},k=function(n){var t,e=null;switch(n.key){case"ArrowRight":var a=R.indexOf(n.currentTarget)+1;e=R[a]||R[0];break;case"ArrowLeft":var o=R.indexOf(n.currentTarget)-1;e=R[o]||R[R.length-1]}null==(t=e)||t.focus()};return o.createElement("div",{className:"tabs-container"},o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":d},h)},I.map((function(n){var t=n.value,e=n.label,i=n.attributes;return o.createElement("li",(0,a.Z)({role:"tab",tabIndex:A===t?0:-1,"aria-selected":A===t,key:t,ref:function(n){return R.push(n)},onKeyDown:k,onFocus:E,onClick:E},i,{className:(0,l.Z)("tabs__item",u,null==i?void 0:i.className,{"tabs__item--active":A===t})}),null!=e?e:t)}))),s?(0,o.cloneElement)(g.filter((function(n){return n.props.value===A}))[0],{className:"margin-vert--md"}):o.createElement("div",{className:"margin-vert--md"},g.map((function(n,t){return(0,o.cloneElement)(n,{key:t,hidden:n.props.value!==A})}))))}function c(n){var t=(0,i.Z)();return o.createElement(d,(0,a.Z)({key:String(t)},n))}},182:function(n,t,e){e.r(t),e.d(t,{frontMatter:function(){return l},contentTitle:function(){return u},metadata:function(){return d},toc:function(){return c},default:function(){return m}});var a=e(7462),o=e(3366),i=(e(7294),e(3905)),s=e(6396),r=e(8215),p=["components"],l={description:"Label your data.",sidebar_position:1},u="Annotations",d={unversionedId:"api-guide/annotate/annotations",id:"api-guide/annotate/annotations",title:"Annotations",description:"Label your data.",source:"@site/docs/api-guide/annotate/annotations.md",sourceDirName:"api-guide/annotate",slug:"/api-guide/annotate/annotations",permalink:"/api-guide/annotate/annotations",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/api-guide/annotate/annotations.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{description:"Label your data.",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Labeling Your Data",permalink:"/api-guide/annotate/"},next:{title:"Training Data",permalink:"/api-guide/annotate/training-data"}},c=[{value:"Annotations",id:"annotations-1",children:[{value:"Add Annotations",id:"add-annotations",children:[{value:"Annotate images with concepts",id:"annotate-images-with-concepts",children:[],level:4},{value:"Annotate New Bounding Boxes in an Image",id:"annotate-new-bounding-boxes-in-an-image",children:[],level:4},{value:"Annotate Existing Regions in an Image",id:"annotate-existing-regions-in-an-image",children:[],level:4},{value:"Annotate Images with Different <code>user_id</code> and <code>status</code>.",id:"annotate-images-with-different-user_id-and-status",children:[],level:4}],level:3},{value:"List Annotations",id:"list-annotations",children:[{value:"List All User Created Annotations in Your App",id:"list-all-user-created-annotations-in-your-app",children:[],level:4},{value:"List All Annotations in Your App",id:"list-all-annotations-in-your-app",children:[],level:4},{value:"List User Created Annotations by Input IDs",id:"list-user-created-annotations-by-input-ids",children:[],level:4},{value:"List Annotations by Input IDs and Annotation IDs",id:"list-annotations-by-input-ids-and-annotation-ids",children:[],level:4},{value:"List Annotations by User IDs",id:"list-annotations-by-user-ids",children:[],level:4},{value:"List Annotations by Model Version IDs",id:"list-annotations-by-model-version-ids",children:[],level:4}],level:3},{value:"Update Annotations",id:"update-annotations",children:[{value:"Update Annotation with Concepts",id:"update-annotation-with-concepts",children:[],level:4},{value:"Update Annotation with Concepts in a Region",id:"update-annotation-with-concepts-in-a-region",children:[],level:4},{value:"Update Annotation Region Coordinates",id:"update-annotation-region-coordinates",children:[],level:4},{value:"Update Annotation Status",id:"update-annotation-status",children:[],level:4}],level:3},{value:"Delete Annotations",id:"delete-annotations",children:[{value:"Delete Annotation by Input ID and Annotation ID",id:"delete-annotation-by-input-id-and-annotation-id",children:[],level:4},{value:"Bulk Delete Annotations by Input Ids and Annotation IDs",id:"bulk-delete-annotations-by-input-ids-and-annotation-ids",children:[],level:4},{value:"Bulk Delete All Annotations by Input IDs",id:"bulk-delete-all-annotations-by-input-ids",children:[],level:4}],level:3}],level:2}],_={toc:c};function m(n){var t=n.components,e=(0,o.Z)(n,p);return(0,i.kt)("wrapper",(0,a.Z)({},_,e,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"annotations"},"Annotations"),(0,i.kt)("h2",{id:"annotations-1"},"Annotations"),(0,i.kt)("p",null,"Annotations ","(","also known as labels",")"," describe your inputs. When you add inputs to your app, we will create an input level annotation for each input. This input level annotation contains any data you provided in ",(0,i.kt)("inlineCode",{parentName:"p"},"POST /inputs")," call. Models in your default workflow can also write annotations."),(0,i.kt)("p",null,"Once your input is successfully indexed, you can add additional annotations such as concepts and bounding boxes."),(0,i.kt)("h3",{id:"add-annotations"},"Add Annotations"),(0,i.kt)("p",null,"You can label your inputs by calling the ",(0,i.kt)("inlineCode",{parentName:"p"},"POST /annotations")," endpoint. For example, you can add concept","(","s",")"," to an image, draw a bounding box, or label concept","(","s",")"," in a video frame."),(0,i.kt)("p",null,"When you add an annotation, the app's default workflow will not run by default. This means that the annotation will not be immediately available for training of your custom model or for visual search. To make the annotation available for AI based search and training, you need to provide ",(0,i.kt)("inlineCode",{parentName:"p"},"embed_model_version_id")," field. This field specifies how to associate the annotation for your input to one of the embedding models in your default workflow. When associated during patching then we know how to index it for training and visual search, therefore if your use case includes those features it is recommended to provide this field on each add annotation call."),(0,i.kt)("p",null,"You can add from 1 up to 128 annotations in a single API call."),(0,i.kt)("p",null,"Each annotation should contain at most one region. If it is a video, each annotation should contain 1 frame. If there are multiple regions in a frame you want to label, you can add multiple annotations for each regoin and each annotation will be contained within the same frame but a different region."),(0,i.kt)("h4",{id:"annotate-images-with-concepts"},"Annotate images with concepts"),(0,i.kt)("p",null,"To annotate a concept present anywhere in an image:"),(0,i.kt)(s.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"python",label:"Python",default:!0,mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'# Insert here the initialization code as outlined on this page:\n# https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\npost_annotations_response = stub.PostAnnotations(\n    service_pb2.PostAnnotationsRequest(\n        user_app_id=userDataObject,  # The userDataObject is created in the overview and is required when using a PAT\n        annotations=[\n            resources_pb2.Annotation(\n                input_id="{YOUR_INPUT_ID}",\n                data=resources_pb2.Data(\n                    concepts=[\n                        resources_pb2.Concept(id="tree", value=1.),  # 1 means true, this concept is present.\n                        resources_pb2.Concept(id="water", value=0.)  # 0 means false, this concept is not present.\n                    ]\n                ),\n                embed_model_version_id="{EMBED_MODEL_VERSION_ID}"\n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif post_annotations_response.status.code != status_code_pb2.SUCCESS:\n    print("There was an error with your request!")\n    print("\\tCode: {}".format(post_annotations_response.outputs[0].status.code))\n    print("\\tDescription: {}".format(post_annotations_response.outputs[0].status.description))\n    print("\\tDetails: {}".format(post_annotations_response.outputs[0].status.details))\n    raise Exception("Post annotations failed, status: " + post_annotations_response.status.description)\n'))),(0,i.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'import java.util.List;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nMultiAnnotationResponse postAnnotationsResponse = stub.postAnnotations(\n    PostAnnotationsRequest.newBuilder().addAnnotations(\n        Annotation.newBuilder()\n            .setInputId("{YOUR_INPUT_ID}")\n            .setData(\n                Data.newBuilder().addConcepts(\n                    Concept.newBuilder()\n                        .setId("tree")\n                        .setValue(1f)  // 1 means true, this concept is present.\n                        .build()\n                    ).addConcepts(\n                        Concept.newBuilder()\n                            .setId("water")\n                            .setValue(0f)  // 0 means false, this concept is not present.\n                            .build()\n                    )\n            ).setEmbedModelVersionId("{EMBED_MODEL_VERSION_ID}") // so the concept can be used for custom model training\n            .build()\n    ).build()\n);\n\nif (postAnnotationsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n    throw new RuntimeException("Post annotations failed, status: " + postAnnotationsResponse.getStatus());\n}\n'))),(0,i.kt)(r.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nstub.PostAnnotations(\n    {\n        annotations: [\n            {\n                input_id: "{YOUR_INPUT_ID}",\n                // 1 means true, this concept is present.\n                // 0 means false, this concept is not present.\n                data: {\n                    concepts: [\n                        {id: "tree", value: 1},\n                        {id: "water", value: 0}\n                    ]\n                },\n                embed_model_version_id: "{EMBED_MODEL_VERSION_ID}"\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post annotations failed, status: " + response.status.description);\n        }\n    }\n);\n'))),(0,i.kt)(r.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'# Value of 1 means true, this concept is present.\n# Value of 0 means false, this concept is not present.\ncurl -X POST \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'\n  {\n    "annotations": [\n      {\n        "input_id": "{YOUR_INPUT_ID}",\n        "data": {\n          "concepts": [\n            {\n              "id": "tree",\n              "value": 1\n            },\n            {\n              "id": "water",\n              "value": 0\n            }\n          ]\n        },\n        "embed_model_version_id": "{EMBED_MODEL_VERSION_ID}"\n      }\n    ]\n}\'\\\n  https://api.clarifai.com/v2/annotations\n'))),(0,i.kt)(r.Z,{value:"js_rest",label:"Javascript (REST)",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'const raw = JSON.stringify({\n    "user_app_id": {\n        "user_id": "{YOUR_USER_ID}",\n        "app_id": "{YOUR_APP_ID}"\n    },\n    "annotations": [\n    {\n      "input_id": "{YOUR_INPUT_ID}",\n      "data": {\n        "concepts": [\n          {\n            "id": "tree",\n            "value": 1\n          },\n          {\n            "id": "water",\n            "value": 0\n          }\n        ]\n      },\n      "embed_model_version_id": "{EMBED_MODEL_VERSION_ID}"\n    }\n  ]\n});\n\nconst requestOptions = {\n  method: \'POST\',\n  headers: {\n    \'Accept\': \'application/json\',\n    \'Authorization\': \'Key {YOUR_PERSONAL_TOKEN}\'\n  },\n  body: raw\n};\n\nfetch("https://api.clarifai.com/v2/annotations", requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log(\'error\', error));\n')))),(0,i.kt)("h4",{id:"annotate-new-bounding-boxes-in-an-image"},"Annotate New Bounding Boxes in an Image"),(0,i.kt)("p",null,"You can label a new bounding box by providing bounding box coordinates."),(0,i.kt)(s.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"python",label:"Python",default:!0,mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'# Insert here the initialization code as outlined on this page:\n# https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\npost_annotations_response = stub.PostAnnotations(\n    service_pb2.PostAnnotationsRequest(\n        user_app_id=userDataObject,  # The userDataObject is created in the overview and is required when using a PAT\n        annotations=[\n            resources_pb2.Annotation(\n                input_id="{YOUR_INPUT_ID}",\n                data=resources_pb2.Data(\n                    regions=[\n                        resources_pb2.Region(\n                            region_info=resources_pb2.RegionInfo(\n                                bounding_box=resources_pb2.BoundingBox(       # draw a bounding box\n                                    top_row=0,\n                                    left_col=0,\n                                    bottom_row=0.5,\n                                    right_col=0.5\n                                )\n                            ),\n                            data=resources_pb2.Data(\n                                concepts=[\n                                    resources_pb2.Concept(id="tree", value=1.),  # 1 means true, this concept is present.\n                                    resources_pb2.Concept(id="water", value=0.)  # 0 means false, this concept is not present.\n                                ]\n                            )\n                        )\n                    ]\n                ),\n                embed_model_version_id="{EMBED_MODEL_VERSION_ID}"\n            ),\n            resources_pb2.Annotation(\n                input_id="{YOUR_INPUT_ID}",\n                data=resources_pb2.Data(\n                    regions=[\n                        resources_pb2.Region(\n                            region_info=resources_pb2.RegionInfo(\n                                bounding_box=resources_pb2.BoundingBox(        # draw another bounding box\n                                    top_row=0.6,\n                                    left_col=0.6,\n                                    bottom_row=0.8,\n                                    right_col=0.8\n                                )\n                            ),\n                            data=resources_pb2.Data(\n                                concepts=[\n                                    resources_pb2.Concept(id="bike", value=1.),  # 1 means true, this concept is present.\n                                ]\n                            )\n                        )\n                    ]\n                ),\n                embed_model_version_id="{EMBED_MODEL_VERSION_ID}"\n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif post_annotations_response.status.code != status_code_pb2.SUCCESS:\n    print("There was an error with your request!")\n    print("\\tCode: {}".format(post_annotations_response.outputs[0].status.code))\n    print("\\tDescription: {}".format(post_annotations_response.outputs[0].status.description))\n    print("\\tDetails: {}".format(post_annotations_response.outputs[0].status.details))\n    raise Exception("Post annotations failed, status: " + post_annotations_response.status.description)\n'))),(0,i.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'import java.util.List;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nMultiAnnotationResponse postAnnotationsResponse = stub.postAnnotations(\n    PostAnnotationsRequest.newBuilder().addAnnotations(\n        Annotation.newBuilder()                     // label a region in this image\n            .setInputId("{YOUR_INPUT_ID}")\n            .setData(\n                Data.newBuilder().addRegions(\n                    Region.newBuilder()\n                        .setRegionInfo(\n                            RegionInfo.newBuilder()\n                                .setBoundingBox(        // draw a bounding box\n                                    BoundingBox.newBuilder()\n                                        .setTopRow(0f)\n                                        .setLeftCol(0f)\n                                        .setBottomRow(0.5f)\n                                        .setRightCol(0.5f)\n                                        .build()\n                                )\n                                .build()\n                        )\n                        .setData(\n                            Data.newBuilder()\n                                .addConcepts(\n                                    Concept.newBuilder()\n                                        .setId("tree")\n                                        .setValue(1f)  // 1 means true, this concept is present.\n                                        .build()\n                                )\n                                .addConcepts(\n                                    Concept.newBuilder()\n                                        .setId("water")\n                                        .setValue(0f)  // 0 means false, this concept is not present.\n                                        .build()\n                                )\n                        ).build()\n                ).build()\n            ).setEmbedModelVersionId("{EMBED_MODEL_VERSION_ID}") // so the concept can be used for custom model training\n            .build()\n    ).addAnnotations(                           // label another region in this image\n            .setInputId("{YOUR_INPUT_ID}")\n            .setData(\n                Data.newBuilder().addRegions(\n                    Region.newBuilder()\n                        .setRegionInfo(\n                            RegionInfo.newBuilder()\n                                .setBoundingBox(        // draw another bounding box\n                                    BoundingBox.newBuilder()\n                                        .setTopRow(0.6f)\n                                        .setLeftCol(0.6f)\n                                        .setBottomRow(0.8f)\n                                        .setRightCol(0.8f)\n                                        .build()\n                                )\n                                .build()\n                        )\n                        .setData(\n                            Data.newBuilder()\n                                .addConcepts(\n                                    Concept.newBuilder()\n                                        .setId("bike")\n                                        .setValue(1f)  // 1 means true, this concept is present.\n                                        .build()\n                                )\n                        ).build()\n                ).build()\n            ).setEmbedModelVersionId("{EMBED_MODEL_VERSION_ID}") // so the concept can be used for custom model training\n            .build()\n    ).build()\n);\n\nif (postAnnotationsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n    throw new RuntimeException("Post annotations failed, status: " + postAnnotationsResponse.getStatus());\n}\n'))),(0,i.kt)(r.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nstub.PostAnnotations(\n    {\n        annotations: [\n            {                     // label a region in this image\n                input_id: "{YOUR_INPUT_ID}",\n                data: {\n                    regions: [\n                        {\n                            region_info: {\n                                bounding_box: {        // draw a bounding box\n                                    top_row: 0,\n                                    left_col: 0,\n                                    bottom_row: 0.5,\n                                    right_col: 0.5\n                                }\n                            }\n                            // 1 means true, this concept is present.\n                            // 0 means false, this concept is not present.\n                            data: {\n                                concepts: [\n                                    {id: "tree", value: 1},\n                                    {id: "water", value: 0}\n                                ]\n                            },\n                        }\n                    ]\n                }\n                embed_model_version_id: "{EMBED_MODEL_VERSION_ID}"\n            }, {                     // label another region in this image\n                input_id: "{YOUR_INPUT_ID}",\n                data: {\n                    regions: [\n                        {\n                            region_info: {\n                                bounding_box: {        // draw another bounding box\n                                    top_row: 0.6,\n                                    left_col: 0.6,\n                                    bottom_row: 0.8,\n                                    right_col: 0.8\n                                }\n                            }\n                            // 1 means true, this concept is present.\n                            // 0 means false, this concept is not present.\n                            data: {\n                                concepts: [\n                                    {id: "bike", value: 1},\n                                ]\n                            },\n                        }\n                    ]\n                }\n                embed_model_version_id: "{EMBED_MODEL_VERSION_ID}"\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post annotations failed, status: " + response.status.description);\n        }\n    }\n);\n'))),(0,i.kt)(r.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'# draw 2 bouding boxes in the same region\n# Value of 1 means true, this concept is present.\n# Value of 0 means false, this concept is not present.\ncurl -X POST \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'\n  {\n    "annotations": [\n      {\n        "input_id": "{YOUR_INPUT_ID}",\n        "data": {\n          "regions": [\n            {\n              "region_info": {\n                  "bounding_box": {\n                      "top_row": 0,\n                      "left_col": 0,\n                      "bottom_row": 0.5,\n                      "right_col": 0.5\n                  }\n              },\n              "data": {\n                "concepts": [\n                  {\n                    "id": "tree",\n                    "value": 1\n                  },\n                  {\n                    "id": "water",\n                    "value": 0\n                  }\n                ]\n              }\n            }\n          ]\n        },\n        "embed_model_version_id": "{EMBED_MODEL_VERSION_ID}"\n      }, {\n        "input_id": "{YOUR_INPUT_ID}",\n        "data": {\n          "regions": [\n            {\n              "region_info": {\n                  "bounding_box": {\n                      "top_row": 0.6,\n                      "left_col": 0.6,\n                      "bottom_row": 0.8,\n                      "right_col": 0.8\n                  }\n              },\n              "data": {\n                "concepts": [\n                  {\n                    "id": "bike",\n                    "value": 1\n                  }\n                ]\n              }\n            }\n          ]\n        },\n        "embed_model_version_id": "{EMBED_MODEL_VERSION_ID}"\n      }\n    ]\n}\'\\\n  https://api.clarifai.com/v2/annotations\n'))),(0,i.kt)(r.Z,{value:"js_rest",label:"Javascript (REST)",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'const raw = JSON.stringify({\n    "user_app_id": {\n        "user_id": "{YOUR_USER_ID}",\n        "app_id": "{YOUR_APP_ID}"\n    },\n    "annotations": [\n    {\n      "input_id": "{YOUR_INPUT_ID}",\n      "data": {\n        "regions": [\n          {\n            "region_info": {\n                "bounding_box": {\n                    "top_row": 0,\n                    "left_col": 0,\n                    "bottom_row": 0.5,\n                    "right_col": 0.5\n                }\n            },\n            "data": {\n              "concepts": [\n                {\n                  "id": "tree",\n                  "value": 1\n                },\n                {\n                  "id": "water",\n                  "value": 0\n                }\n              ]\n            }\n          }\n        ]\n      },\n      "embed_model_version_id": "{EMBED_MODEL_VERSION_ID}"\n    }, {\n      "input_id": "{YOUR_INPUT_ID}",\n      "data": {\n        "regions": [\n          {\n            "region_info": {\n                "bounding_box": {\n                    "top_row": 0.6,\n                    "left_col": 0.6,\n                    "bottom_row": 0.8,\n                    "right_col": 0.8\n                }\n            },\n            "data": {\n              "concepts": [\n                {\n                  "id": "bike",\n                  "value": 1\n                }\n              ]\n            }\n          }\n        ]\n      },\n      "embed_model_version_id": "{EMBED_MODEL_VERSION_ID}"\n    }\n  ]\n});\n\nconst requestOptions = {\n  method: \'POST\',\n  headers: {\n    \'Accept\': \'application/json\',\n    \'Authorization\': \'Key {YOUR_PERSONAL_TOKEN}\'\n  },\n  body: raw\n};\n\nfetch("https://api.clarifai.com/v2/annotations", requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log(\'error\', error));\n')))),(0,i.kt)("h4",{id:"annotate-existing-regions-in-an-image"},"Annotate Existing Regions in an Image"),(0,i.kt)("p",null,"When you add an input, detection models ","(","such as ",(0,i.kt)("inlineCode",{parentName:"p"},"Face Detection")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"General Detection"),")"," will detect regions in your image where there appear to be relevant objects. You can check these detected regions by listing model's annotations. Your labels should be contained within ",(0,i.kt)("inlineCode",{parentName:"p"},"Region.Data"),". Each annotation can have only 1 region. If you want to label multiple regions, it is possible to label multiple annotations in a single API call."),(0,i.kt)(s.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"python",label:"Python",default:!0,mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'# Insert here the initialization code as outlined on this page:\n# https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\npost_annotations_response = stub.PostAnnotations(\n    service_pb2.PostAnnotationsRequest(\n        user_app_id=userDataObject,  # The userDataObject is created in the overview and is required when using a PAT\n        annotations=[\n            resources_pb2.Annotation(                # label a region in this image\n                input_id="{YOUR_INPUT_ID}",\n                data=resources_pb2.Data(\n                    regions=[\n                        resources_pb2.Region(\n                            id="{REGION_ID_1}" ,  # this should be a region id returned from list annotations call\n                            data=resources_pb2.Data(\n                                concepts=[\n                                    resources_pb2.Concept(id="tree", value=1.),  # 1 means true, this concept is present.\n                                    resources_pb2.Concept(id="water", value=0.)  # 0 means false, this concept is not present.\n                                ]\n                            )\n                        )\n                    ]\n                ),\n                embed_model_version_id="{EMBED_MODEL_VERSION_ID}"\n            ),\n            resources_pb2.Annotation(                # label another region in this image\n                input_id="{YOUR_INPUT_ID}",\n                data=resources_pb2.Data(\n                    regions=[\n                        resources_pb2.Region(\n                            id="{REGION_ID_2}" ,  # this should be a region id returned from list annotations call\n                            data=resources_pb2.Data(\n                                concepts=[\n                                    resources_pb2.Concept(id="bike", value=1.),  # 1 means true, this concept is present.\n                                ]\n                            )\n                        )\n                    ]\n                ),\n                embed_model_version_id="{EMBED_MODEL_VERSION_ID}"\n            ),\n        ]\n    ),\n    metadata=metadata\n)\n\nif post_annotations_response.status.code != status_code_pb2.SUCCESS:\n    print("There was an error with your request!")\n    print("\\tCode: {}".format(post_annotations_response.outputs[0].status.code))\n    print("\\tDescription: {}".format(post_annotations_response.outputs[0].status.description))\n    print("\\tDetails: {}".format(post_annotations_response.outputs[0].status.details))\n    raise Exception("Post annotations failed, status: " + post_annotations_response.status.description)\n'))),(0,i.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'import java.util.List;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nMultiAnnotationResponse postAnnotationsResponse = stub.postAnnotations(\n    PostAnnotationsRequest.newBuilder().addAnnotations(\n        Annotation.newBuilder()                // label a region in this image\n            .setInputId("{YOUR_INPUT_ID}")\n            .setData(\n                Data.newBuilder().addRegions(\n                    Region.newBuilder()\n                        .setId("{REGION_ID_1}") // this should be a region id returned from list annotations call\n                        .setData(\n                            Data.newBuilder().addConcepts(\n                                Concept.newBuilder()\n                                    .setId("tree")\n                                    .setValue(1f)  // 1 means true, this concept is present.\n                                    .build()\n                                ).addConcepts(\n                                    Concept.newBuilder()\n                                        .setId("water")\n                                        .setValue(0f)  // 0 means false, this concept is not present.\n                                        .build()\n                                )\n                        ).build()\n                ).build()\n            ).setEmbedModelVersionId("{EMBED_MODEL_VERSION_ID}") // so the concept can be used for custom model training\n            .build()\n    ).AddAnnotations(\n        Annotation.newBuilder()                // label another region in the same image\n            .setInputId("{YOUR_INPUT_ID}")\n            .setData(\n                Data.newBuilder().addRegions(\n                    Region.newBuilder()\n                        .setId("{REGION_ID_2}") // this should be a region id returned from list annotations call\n                        .setData(\n                            Data.newBuilder().addConcepts(\n                                Concept.newBuilder()\n                                    .setId("bike")\n                                    .setValue(1f)  // 1 means true, this concept is present.\n                                    .build()\n                                )\n                        ).build()\n                ).build()\n            ).setEmbedModelVersionId("{EMBED_MODEL_VERSION_ID}") // so the concept can be used for custom model training\n            .build()\n    ).build()\n);\n\nif (postAnnotationsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n    throw new RuntimeException("Post annotations failed, status: " + postAnnotationsResponse.getStatus());\n}\n'))),(0,i.kt)(r.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nstub.PostAnnotations(\n    {\n        annotations: [\n            {                // label a region in this image\n                input_id: "{YOUR_INPUT_ID}",\n                data: {\n                    regions: [\n                        {\n                            id: "{REGION_ID_1}" // this should be a region id  returned from list annotations call\n                            // 1 means true, this concept is present.\n                            // 0 means false, this concept is not present.\n                            data: {\n                                concepts: [\n                                    {id: "tree", value: 1},\n                                    {id: "water", value: 0}\n                                ]\n                            },\n                        }\n                    ]\n                }\n                embed_model_version_id: "{EMBED_MODEL_VERSION_ID}"\n            }, {                // label another region in this image\n                input_id: "{YOUR_INPUT_ID}",\n                data: {\n                    regions: [\n                        {\n                            id: "{REGION_ID_2}" // this should be a region id  returned from list annotations call\n                            // 1 means true, this concept is present.\n                            // 0 means false, this concept is not present.\n                            data: {\n                                concepts: [\n                                    {id: "bike", value: 1},\n                                ]\n                            },\n                        }\n                    ]\n                }\n                embed_model_version_id: "{EMBED_MODEL_VERSION_ID}"\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post annotations failed, status: " + response.status.description);\n        }\n    }\n);\n'))),(0,i.kt)(r.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'# Value of 1 means true, this concept is present.\n# Value of 0 means false, this concept is not present.\n# region id should be a region id returned from list annotations call\ncurl -X POST \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'\n  {\n    "annotations": [\n      {\n        "input_id": "{YOUR_INPUT_ID}",\n        "data": {\n          "regions": [\n            {\n              "id": "{REGION_ID_1}",\n              "data": {\n                "concepts": [\n                  {\n                    "id": "tree",\n                    "value": 1\n                  },\n                  {\n                    "id": "water",\n                    "value": 0\n                  }\n                ]\n              }\n            }\n          ]\n        },\n        "embed_model_version_id": "{EMBED_MODEL_VERSION_ID}"\n      }, {\n        "input_id": "{YOUR_INPUT_ID}",\n        "data": {\n          "regions": [\n            {\n              "id": "{REGION_ID_2}",\n              "data": {\n                "concepts": [\n                  {\n                    "id": "bike",\n                    "value": 1\n                  }\n                ]\n              }\n            }\n          ]\n        },\n        "embed_model_version_id": "{EMBED_MODEL_VERSION_ID}"\n      }\n    ]\n}\'\\\n  https://api.clarifai.com/v2/annotations\n'))),(0,i.kt)(r.Z,{value:"js_rest",label:"Javascript (REST)",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'const raw = JSON.stringify({\n    "user_app_id": {\n        "user_id": "{YOUR_USER_ID}",\n        "app_id": "{YOUR_APP_ID}"\n    },\n    "annotations": [\n    {\n      "input_id": "{YOUR_INPUT_ID}",\n      "data": {\n        "regions": [\n          {\n            "id": "{REGION_ID_1}",\n            "data": {\n              "concepts": [\n                {\n                  "id": "tree",\n                  "value": 1\n                },\n                {\n                  "id": "water",\n                  "value": 0\n                }\n              ]\n            }\n          }\n        ]\n      },\n      "embed_model_version_id": "{EMBED_MODEL_VERSION_ID}"\n    }, {\n      "input_id": "{YOUR_INPUT_ID}",\n      "data": {\n        "regions": [\n          {\n            "id": "{REGION_ID_2}",\n            "data": {\n              "concepts": [\n                {\n                  "id": "bike",\n                  "value": 1\n                }\n              ]\n            }\n          }\n        ]\n      },\n      "embed_model_version_id": "{EMBED_MODEL_VERSION_ID}"\n    }\n  ]\n});\n\nconst requestOptions = {\n  method: \'POST\',\n  headers: {\n    \'Accept\': \'application/json\',\n    \'Authorization\': \'Key {YOUR_PERSONAL_TOKEN}\'\n  },\n  body: raw\n};\n\nfetch("https://api.clarifai.com/v2/annotations", requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log(\'error\', error));\n')))),(0,i.kt)("h4",{id:"annotate-images-with-different-user_id-and-status"},"Annotate Images with Different ",(0,i.kt)("inlineCode",{parentName:"h4"},"user_id")," and ",(0,i.kt)("inlineCode",{parentName:"h4"},"status"),"."),(0,i.kt)("p",null,"Each annotation is tied to a user or a model in your workflow. By default, when a user posts an annotation, this user is the owner of the annotation. Sometimes however, you might want to post an annotation as other user, for example, when assigning an image to another user, an annotation can be created with another user","_","id ","(","and status ",(0,i.kt)("inlineCode",{parentName:"p"},"PENDING"),")","."),(0,i.kt)("p",null,"Note: only the app owner can post an annotation with other user's ",(0,i.kt)("inlineCode",{parentName:"p"},"user_id"),", collaborators cannot."),(0,i.kt)(s.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"python",label:"Python",default:!0,mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'# Insert here the initialization code as outlined on this page:\n# https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\npost_annotations_response = stub.PostAnnotations(\n    service_pb2.PostAnnotationsRequest(\n        user_app_id=userDataObject,  # The userDataObject is created in the overview and is required when using a PAT\n        annotations=[\n            resources_pb2.Annotation(\n                input_id="{YOUR_INPUT_ID}",\n                user_id="{USER_ID}",    # If empty, it is the user who posts this annotation\n                data=status_pb2.Status(\n                    code=status_code_pb2.ANNOTATION_PENDING  # annotation pending status. By default success.\n                ),\n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif post_annotations_response.status.code != status_code_pb2.SUCCESS:\n    print("There was an error with your request!")\n    print("\\tCode: {}".format(post_annotations_response.outputs[0].status.code))\n    print("\\tDescription: {}".format(post_annotations_response.outputs[0].status.description))\n    print("\\tDetails: {}".format(post_annotations_response.outputs[0].status.details))\n    raise Exception("Post annotations failed, status: " + post_annotations_response.status.description)\n'))),(0,i.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'import java.util.List;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nMultiAnnotationResponse postAnnotationsResponse = stub.postAnnotations(\n    PostAnnotationsRequest.newBuilder().addAnnotations(\n        Annotation.newBuilder()\n            .setInputId("{YOUR_INPUT_ID}")\n            .setUserId("{USER_ID}")  // If empty, it is the user who posts this annotation\n            .setStatus(\n                Status.newBuilder()\n                    .setCodeValue(StatusCode.ANNOTATION_PENDING_VALUE) // annotation pending status. By default, it\'s ANNOTATION_SUCCESS_VALUE.\n                    .build()\n            )\n            .build()\n    ).build()\n);\n\nif (postAnnotationsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n    throw new RuntimeException("Post annotations failed, status: " + postAnnotationsResponse.getStatus());\n}\n'))),(0,i.kt)(r.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nstub.PostAnnotations(\n    {\n        annotations: [\n            {\n                input_id: "{YOUR_INPUT_ID}",\n                user_id: "{USER_ID}",  // If empty, it is the user who posts this annotation\n                status: {\n                    code: 24151    // annotation pending status. By default success.\n                }\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post annotations failed, status: " + response.status.description);\n        }\n    }\n);\n'))),(0,i.kt)(r.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'\n  {\n    "annotations": [\n      {\n        "input_id": "{YOUR_INPUT_ID}",\n        "user_id": "{USER_ID}",\n        "status": {\n            "code": "ANNOTATION_PENDING"\n        }\n      }\n    ]\n}\'\\\n  https://api.clarifai.com/v2/annotations\n'))),(0,i.kt)(r.Z,{value:"js_rest",label:"Javascript (REST)",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'const raw = JSON.stringify({\n    "user_app_id": {\n        "user_id": "{YOUR_USER_ID}",\n        "app_id": "{YOUR_APP_ID}"\n    },\n    "annotations": [\n    {\n      "input_id": "{YOUR_INPUT_ID}",\n      "user_id": "{USER_ID}",\n      "status": {\n          "code": "ANNOTATION_PENDING"\n      }\n    }\n  ]\n});\n\nconst requestOptions = {\n  method: \'POST\',\n  headers: {\n    \'Accept\': \'application/json\',\n    \'Authorization\': \'Key {YOUR_PERSONAL_TOKEN}\'\n  },\n  body: raw\n};\n\nfetch("https://api.clarifai.com/v2/annotations", requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log(\'error\', error));\n')))),(0,i.kt)("h3",{id:"list-annotations"},"List Annotations"),(0,i.kt)("p",null,"You can get a list of annotations within your app with a GET call. Annotations will be returned from oldest to newest."),(0,i.kt)("p",null,"These requests are paginated. By default each page will return 20 annotations."),(0,i.kt)("h4",{id:"list-all-user-created-annotations-in-your-app"},"List All User Created Annotations in Your App"),(0,i.kt)("p",null,"To list all your user labelled annotations."),(0,i.kt)("p",null,"Note this will not show annotations by models in your worfklow. To include model created annotations, you need to set ",(0,i.kt)("inlineCode",{parentName:"p"},"list_all_annotations")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,i.kt)(s.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"python",label:"Python",default:!0,mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'# Insert here the initialization code as outlined on this page:\n# https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nlist_annotations_response = stub.ListAnnotations(\n    service_pb2.ListAnnotationsRequest(\n        user_app_id=userDataObject,  # The userDataObject is created in the overview and is required when using a PAT\n        per_page=10\n    ),\n    metadata=metadata\n)\n\nif list_annotations_response.status.code != status_code_pb2.SUCCESS:\n    print("There was an error with your request!")\n    print("\\tCode: {}".format(list_annotations_response.outputs[0].status.code))\n    print("\\tDescription: {}".format(list_annotations_response.outputs[0].status.description))\n    print("\\tDetails: {}".format(list_annotations_response.outputs[0].status.details))\n    raise Exception("List annotations failed, status: " + list_annotations_response.status.description)\n\nfor annotation_object in list_annotations_response.annotations:\n    print(annotation_object)\n'))),(0,i.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'import java.util.List;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nMultiAnnotationResponse listAnnotationsResponse = stub.listAnnotations(\n    ListAnnotationsRequest.newBuilder()\n        .setPerPage(10)\n        .setPage(1)  // Pages start at 1.\n        .build()\n);\n\nif (listAnnotationsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n    throw new RuntimeException("List annotations failed, status: " + listAnnotationsResponse.getStatus());\n}\n\nfor (Annotation annotation : listAnnotationsResponse.getAnnotationsList()) {\n    System.out.println(annotation);\n}\n'))),(0,i.kt)(r.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nstub.ListAnnotations(\n    {page: 1, per_page: 10},\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("List annotations failed, status: " + response.status.description);\n        }\n\n        for (const annotation of response.annotations) {\n            console.log(JSON.stringify(annotation, null, 2));\n        }\n    }\n);\n'))),(0,i.kt)(r.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X GET \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  https://api.clarifai.com/v2/annotations?page=1&per_page=10\n'))),(0,i.kt)(r.Z,{value:"js_rest",label:"Javascript (REST)",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const appId = '{YOUR_APP_ID}'\n\nconst requestOptions = {\n  method: 'GET',\n  headers: {\n    'Accept': 'application/json',\n    'Authorization': 'Key {YOUR_PERSONAL_TOKEN}'\n  }\n};\n\nfetch(`https://api.clarifai.com/v2/users/me/apps/${appId}/annotations?page=1&per_page=10`, requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log('error', error));\n")))),(0,i.kt)("h4",{id:"list-all-annotations-in-your-app"},"List All Annotations in Your App"),(0,i.kt)("p",null,"List all annotations, including models created."),(0,i.kt)(s.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"python",label:"Python",default:!0,mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'# Insert here the initialization code as outlined on this page:\n# https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nlist_annotations_response = stub.ListAnnotations(\n    service_pb2.ListAnnotationsRequest(\n        user_app_id=userDataObject,  # The userDataObject is created in the overview and is required when using a PAT\n        per_page=10, \n        list_all_annotations=True\n    ),\n    metadata=metadata\n)\n\nif list_annotations_response.status.code != status_code_pb2.SUCCESS:\n    print("There was an error with your request!")\n    print("\\tCode: {}".format(list_annotations_response.outputs[0].status.code))\n    print("\\tDescription: {}".format(list_annotations_response.outputs[0].status.description))\n    print("\\tDetails: {}".format(list_annotations_response.outputs[0].status.details))\n    raise Exception("List annotations failed, status: " + list_annotations_response.status.description)\n\nfor annotation_object in list_annotations_response.annotations:\n    print(annotation_object)\n'))),(0,i.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'import java.util.List;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nMultiAnnotationResponse listAnnotationsResponse = stub.listAnnotations(\n    ListAnnotationsRequest.newBuilder()\n        .setPerPage(10)\n        .setListAllAnnotations(true)\n        .setPage(1)  // Pages start at 1.\n        .build()\n);\n\nif (listAnnotationsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n    throw new RuntimeException("List annotations failed, status: " + listAnnotationsResponse.getStatus());\n}\n\nfor (Annotation annotation : listAnnotationsResponse.getAnnotationsList()) {\n    System.out.println(annotation);\n}\n'))),(0,i.kt)(r.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nstub.ListAnnotations(\n    {list_all_annotations: true, page: 1, per_page: 10},\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("List annotations failed, status: " + response.status.description);\n        }\n\n        for (const annotation of response.annotations) {\n            console.log(JSON.stringify(annotation, null, 2));\n        }\n    }\n);\n'))),(0,i.kt)(r.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X GET \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  https://api.clarifai.com/v2/annotations?page=1&per_page=10&list_all_annotations=true\n'))),(0,i.kt)(r.Z,{value:"js_rest",label:"Javascript (REST)",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const appId = '{YOUR_APP_ID}'\n\nconst requestOptions = {\n  method: 'GET',\n  headers: {\n    'Accept': 'application/json',\n    'Authorization': 'Key {YOUR_PERSONAL_TOKEN}'\n  }\n};\n\nfetch(`https://api.clarifai.com/v2/users/me/apps/${appId}/annotations?page=1&per_page=10&list_all_annotations=true`, requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log('error', error));\n")))),(0,i.kt)("h4",{id:"list-user-created-annotations-by-input-ids"},"List User Created Annotations by Input IDs"),(0,i.kt)("p",null,"To list all user created annotations for certain input ","(","one or several",")",", provide a list of input IDs."),(0,i.kt)("p",null,"Note: this will not show annotations by models in your worfklow. To include model created annotations, you need to set ",(0,i.kt)("inlineCode",{parentName:"p"},"list_all_annotations")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,i.kt)(s.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"grpc_python",label:"gRPC Python",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'# Insert here the initialization code as outlined on this page:\n# https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nlist_annotations_response = stub.ListAnnotations(\n    service_pb2.ListAnnotationsRequest(\n        user_app_id=userDataObject,  # The userDataObject is created in the overview and is required when using a PAT\n        input_ids=["{YOUR_INPUT_ID_1}". "{YOUR_INPUT_ID_2}"], \n        per_page=10\n    ),\n    metadata=metadata\n)\n\nif list_annotations_response.status.code != status_code_pb2.SUCCESS:\n    print("There was an error with your request!")\n    print("\\tCode: {}".format(list_annotations_response.outputs[0].status.code))\n    print("\\tDescription: {}".format(list_annotations_response.outputs[0].status.description))\n    print("\\tDetails: {}".format(list_annotations_response.outputs[0].status.details))\n    raise Exception("List annotations failed, status: " + list_annotations_response.status.description)\n\nfor annotation_object in list_annotations_response.annotations:\n    print(annotation_object)\n'))),(0,i.kt)(r.Z,{value:"grpc_java",label:"gRPC Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'import java.util.List;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nMultiAnnotationResponse listAnnotationsResponse = stub.listAnnotations(\n    ListAnnotationsRequest.newBuilder()\n        .addInputIds("{YOUR_INPUT_ID_1}")\n        .addInputIds("{YOUR_INPUT_ID_2}")\n        .setPerPage(10)\n        .setPage(1)  // Pages start at 1.\n        .build()\n);\n\nif (listAnnotationsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n    throw new RuntimeException("List annotations failed, status: " + listAnnotationsResponse.getStatus());\n}\n\nfor (Annotation annotation : listAnnotationsResponse.getAnnotationsList()) {\n    System.out.println(annotation);\n}\n'))),(0,i.kt)(r.Z,{value:"grpc_nodejs",label:"gRPC NodeJS",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nstub.ListAnnotations(\n    {input_ids: ["{YOUR_INPUT_ID_2}", "{YOUR_INPUT_ID_2}"], page: 1, per_page: 10},\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("List annotations failed, status: " + response.status.description);\n        }\n\n        for (const annotation of response.annotations) {\n            console.log(JSON.stringify(annotation, null, 2));\n        }\n    }\n);\n'))),(0,i.kt)(r.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X GET \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  https://api.clarifai.com/v2/annotations?page=1&per_page=10&input_ids=your_input_Id\n'))),(0,i.kt)(r.Z,{value:"js_rest",label:"Javascript (REST)",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const appId = '{YOUR_APP_ID}'\nconst inputId = '{YOUR_INPUT_ID}'\n\nconst requestOptions = {\n  method: 'GET',\n  headers: {\n    'Accept': 'application/json',\n    'Authorization': 'Key {YOUR_PERSONAL_TOKEN}'\n  }\n};\n\nfetch(`https://api.clarifai.com/v2/users/me/apps/${appId}/annotations?page=1&per_page=10&input_ids=${inputId}`, requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log('error', error));\n")))),(0,i.kt)("h4",{id:"list-annotations-by-input-ids-and-annotation-ids"},"List Annotations by Input IDs and Annotation IDs"),(0,i.kt)("p",null,"You can list annotations by both input IDs and annotation IDs. Number of input IDs and annotation IDs should be the same. Since we are finding annotatieon by IDs this will match any user or model created annotations."),(0,i.kt)(s.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"python",label:"Python",default:!0,mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'# Insert here the initialization code as outlined on this page:\n# https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nlist_annotations_response = stub.ListAnnotations(\n    service_pb2.ListAnnotationsRequest(\n        user_app_id=userDataObject,  # The userDataObject is created in the overview and is required when using a PAT\n        input_ids=["{YOUR_INPUT_ID_1}". "{YOUR_INPUT_ID_2}"],\n        ids=["{YOUR_ANNOTATION_ID_1}", "{YOUR_ANNOTATION_ID_2}"],\n        per_page=10\n    ),\n    metadata=metadata\n)\n\nif list_annotations_response.status.code != status_code_pb2.SUCCESS:\n    print("There was an error with your request!")\n    print("\\tCode: {}".format(list_annotations_response.outputs[0].status.code))\n    print("\\tDescription: {}".format(list_annotations_response.outputs[0].status.description))\n    print("\\tDetails: {}".format(list_annotations_response.outputs[0].status.details))\n    raise Exception("List annotations failed, status: " + list_annotations_response.status.description)\n\nfor annotation_object in list_annotations_response.annotations:\n    print(annotation_object)\n'))),(0,i.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'import java.util.List;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nMultiAnnotationResponse listAnnotationsResponse = stub.listAnnotations(\n    ListAnnotationsRequest.newBuilder()\n        .setPerPage(10)\n        .addInputIds("{YOUR_INPUT_ID_1}").\n        .addInputIds("{YOUR_INPUT_ID_2}").\n        .addIds("{YOUR_ANNOTATION_ID_1}")\n        .addIds("{YOUR_ANNOTATION_ID_2}")\n        .build()\n);\n\nif (listAnnotationsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n    throw new RuntimeException("List annotations failed, status: " + listAnnotationsResponse.getStatus());\n}\n\nfor (Annotation annotation : listAnnotationsResponse.getAnnotationsList()) {\n    System.out.println(annotation);\n}\n'))),(0,i.kt)(r.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nstub.ListAnnotations(\n    {\n        input_ids: ["{YOUR_INPUT_ID_2}", "{YOUR_INPUT_ID_2}"],\n        ids: ["{YOUR_ANNOTATION_ID_1}", "{YOUR_ANNOTATION_ID_2}"],\n        page: 1, per_page: 10\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("List annotations failed, status: " + response.status.description);\n        }\n\n        for (const annotation of response.annotations) {\n            console.log(JSON.stringify(annotation, null, 2));\n        }\n    }\n);\n'))),(0,i.kt)(r.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X GET \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  https://api.clarifai.com/v2/annotations?page=1&per_page=10&input_ids=YOUR_INPUT_ID_1&input_ids=YOUR_INPUT_ID_2&ids=YOUR_ANNOTATION_ID_1&ids=YOUR_ANNOTATION_ID_2\n'))),(0,i.kt)(r.Z,{value:"js_rest",label:"Javascript (REST)",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const appId = '{YOUR_APP_ID}'\nconst inputId1 = '{YOUR_INPUT_ID_1}'\nconst inputId2 = '{YOUR_INPUT_ID_2}'\nconst annotationId1 = '{YOUR_ANNOTATION_ID_1}'\nconst annotationId2 = '{YOUR_ANNOTATION_ID_2}'\n\nconst requestOptions = {\n  method: 'GET',\n  headers: {\n    'Accept': 'application/json',\n    'Authorization': 'Key {YOUR_PERSONAL_TOKEN}'\n  }\n};\n\nfetch(`https://api.clarifai.com/v2/users/me/apps/${appId}/annotations?page=1&per_page=10&input_ids=${inputId1}&input_ids=${inputId2}&ids=${annotationId1}&ids=${annotationId2}`, requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log('error', error));\n")))),(0,i.kt)("h4",{id:"list-annotations-by-user-ids"},"List Annotations by User IDs"),(0,i.kt)("p",null,"An annotation is created by either a user or a model. You can list annotations created by specific user","(","s",")"," by provider their user IDs."),(0,i.kt)(s.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"python",label:"Python",default:!0,mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'# Insert here the initialization code as outlined on this page:\n# https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nlist_annotations_response = stub.ListAnnotations(\n    service_pb2.ListAnnotationsRequest(\n        user_app_id=userDataObject,  # The userDataObject is created in the overview and is required when using a PAT\n        user_ids=["{USER_ID_1}", "{USER_ID_2}"], \n        per_page=10\n    ),\n    metadata=metadata\n)\n\nif list_annotations_response.status.code != status_code_pb2.SUCCESS:\n    print("There was an error with your request!")\n    print("\\tCode: {}".format(list_annotations_response.outputs[0].status.code))\n    print("\\tDescription: {}".format(list_annotations_response.outputs[0].status.description))\n    print("\\tDetails: {}".format(list_annotations_response.outputs[0].status.details))\n    raise Exception("List annotations failed, status: " + list_annotations_response.status.description)\n\nfor annotation_object in list_annotations_response.annotations:\n    print(annotation_object)\n'))),(0,i.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'import java.util.List;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nMultiAnnotationResponse listAnnotationsResponse = stub.listAnnotations(\n    ListAnnotationsRequest.newBuilder()\n        .addUserIds("{USER_ID_1}")\n        .addUserIds("{USER_ID_2}")\n        .setPerPage(10)\n        .build()\n);\n\nif (listAnnotationsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n    throw new RuntimeException("List annotations failed, status: " + listAnnotationsResponse.getStatus());\n}\n\nfor (Annotation annotation : listAnnotationsResponse.getAnnotationsList()) {\n    System.out.println(annotation);\n}\n'))),(0,i.kt)(r.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nstub.ListAnnotations(\n    {user_ids: ["{USER_ID_1}", "{USER_ID_2}"], page: 1, per_page: 10},\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("List annotations failed, status: " + response.status.description);\n        }\n\n        for (const annotation of response.annotations) {\n            console.log(JSON.stringify(annotation, null, 2));\n        }\n    }\n);\n'))),(0,i.kt)(r.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X GET \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  https://api.clarifai.com/v2/annotations?page=1&per_page=10&user_ids=USER_ID_1&user_ids=USER_ID_2\n'))),(0,i.kt)(r.Z,{value:"js_rest",label:"Javascript (REST)",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const appId = '{YOUR_APP_ID}'\nconst userId1 = '{USER_ID_1}'\nconst userId2 = '{USER_ID_2}'\n\nconst requestOptions = {\n  method: 'GET',\n  headers: {\n    'Accept': 'application/json',\n    'Authorization': 'Key {YOUR_PERSONAL_TOKEN}'\n  }\n};\n\nfetch(`https://api.clarifai.com/v2/users/me/apps/${appId}/annotations?page=1&per_page=10&user_ids=${userId1}&user_ids=${userId2}`, requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log('error', error));\n")))),(0,i.kt)("h4",{id:"list-annotations-by-model-version-ids"},"List Annotations by Model Version IDs"),(0,i.kt)("p",null,"An annotation is created by either a user or a model. For example if your workflow has a detection model, when you add input, the model will detect objects in your input. You can see these detected objects by listing the annotations created detection model. You can also label these regions by using ",(0,i.kt)("inlineCode",{parentName:"p"},"Post annotation")," with the region id returned from this call."),(0,i.kt)(s.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"python",label:"Python",default:!0,mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'# Insert here the initialization code as outlined on this page:\n# https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nlist_annotations_response = stub.ListAnnotations(\n    service_pb2.ListAnnotationsRequest(\n        user_app_id=userDataObject,  # The userDataObject is created in the overview and is required when using a PAT\n        model_version_ids=["{MODEL_VERSION_ID_1}", "{MODEL_VERSION_ID_2}"],\n        per_page=10\n    ),\n    metadata=metadata\n)\n\nif list_annotations_response.status.code != status_code_pb2.SUCCESS:\n    print("There was an error with your request!")\n    print("\\tCode: {}".format(list_annotations_response.outputs[0].status.code))\n    print("\\tDescription: {}".format(list_annotations_response.outputs[0].status.description))\n    print("\\tDetails: {}".format(list_annotations_response.outputs[0].status.details))\n    raise Exception("List annotations failed, status: " + list_annotations_response.status.description)\n\nfor annotation_object in list_annotations_response.annotations:\n    print(annotation_object)\n'))),(0,i.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'import java.util.List;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nMultiAnnotationResponse listAnnotationsResponse = stub.listAnnotations(\n    ListAnnotationsRequest.newBuilder()\n        .addModelVersionIds("{MODEL_VERSION_ID_1}")\n        .addModelVersionIds("{MODEL_VERSION_ID_2}")\n        .setPerPage(10)\n        .build()\n);\n\nif (listAnnotationsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n    throw new RuntimeException("List annotations failed, status: " + listAnnotationsResponse.getStatus());\n}\n\nfor (Annotation annotation : listAnnotationsResponse.getAnnotationsList()) {\n    System.out.println(annotation);\n}\n'))),(0,i.kt)(r.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nstub.ListAnnotations(\n    {model_version_ids: ["{MODEL_VERSION_ID_1}", "{MODEL_VERSION_ID_2}"], page: 1, per_page: 10},\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("List annotations failed, status: " + response.status.description);\n        }\n\n        for (const annotation of response.annotations) {\n            console.log(JSON.stringify(annotation, null, 2));\n        }\n    }\n);\n'))),(0,i.kt)(r.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X GET \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  https://api.clarifai.com/v2/annotations?page=1&per_page=10&model_version_ids=MODEL_VERSION_ID_1&model_version_ids=MODEL_VERSION_ID_2\n'))),(0,i.kt)(r.Z,{value:"js_rest",label:"Javascript (REST)",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const appId = '{YOUR_APP_ID}'\nconst modelVersionId1 = '{MODEL_VERSION_ID_1}'\nconst modelVersionId2 = '{MODEL_VERSION_ID_2}'\n\nconst requestOptions = {\n  method: 'GET',\n  headers: {\n    'Accept': 'application/json',\n    'Authorization': 'Key {YOUR_PERSONAL_TOKEN}'\n  }\n};\n\nfetch(`https://api.clarifai.com/v2/users/me/apps/${appId}/annotations?page=1&per_page=10&model_version_ids=${modelVersionId1}&model_version_ids=${modelVersionId1}`, requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log('error', error));\n")))),(0,i.kt)("h3",{id:"update-annotations"},"Update Annotations"),(0,i.kt)("p",null,"Changing annotation data is possible by PATCHing exisitng annotations. The application owner can change any user-created annotations. Collaborators are not allowed to change annotations made by other collaborators."),(0,i.kt)("p",null,"Generally speaking, you should send PATCH when you want to change the data you have posted, for example, changing the concept from positive to negative or adjusting the bbounding box cooridnates. If you want to adding more tags, you can always POST new annotations. There is no limit on how many annotations an input can have."),(0,i.kt)("p",null,"Update supports overwrite, merge, remove actions. You can update from 1 up to 128 annotations in a single API call."),(0,i.kt)("h4",{id:"update-annotation-with-concepts"},"Update Annotation with Concepts"),(0,i.kt)("p",null,"Update an annotation of a image with a new concept, or to change a concept value from true to false ","(","or vice versa",")","."),(0,i.kt)(s.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"python",label:"Python",default:!0,mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'# Insert here the initialization code as outlined on this page:\n# https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\npatch_annotations_response = stub.PatchAnnotations(\n    service_pb2.PatchAnnotationsRequest(\n        user_app_id=userDataObject,  # The userDataObject is created in the overview and is required when using a PAT\n        action="merge",  # Supported actions: overwrite, merge, remove.\n        annotations=[\n            resources_pb2.Annotation(\n                input_id="{YOUR_INPUT_ID}",\n                id="{YOUR_ANNOTATION_ID}",\n                data=resources_pb2.Data(\n                    concepts=[\n                        resources_pb2.Concept(id="apple", value=1.)  # 1 means true, this concept is present.\n                    ]\n                )\n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif patch_annotations_response.status.code != status_code_pb2.SUCCESS:\n    print("There was an error with your request!")\n    print("\\tCode: {}".format(patch_annotations_response.outputs[0].status.code))\n    print("\\tDescription: {}".format(patch_annotations_response.outputs[0].status.description))\n    print("\\tDetails: {}".format(patch_annotations_response.outputs[0].status.details))\n    raise Exception("Patch annotations failed, status: " + patch_annotations_response.status.description)\n'))),(0,i.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'import java.util.List;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nMultiAnnotationResponse patchAnnotationsResponse = stub.patchAnnotations(\n    PatchAnnotationsRequest.newBuilder()\n        .setAction("merge")  // Supported actions: overwrite, merge, remove.\n        .addAnnotations(\n        Annotation.newBuilder()\n            .setInputId("{YOUR_INPUT_ID}")\n            .setId("{YOUR_ANNOTATION_ID}")\n            .setData(\n                Data.newBuilder().addConcepts(\n                    Concept.newBuilder()\n                        .setId("apple")\n                        .setValue(1f)  // 1 means true, this concept is present.\n                        .build()\n                    )\n            )\n            .build()\n    ).build()\n);\n\nif (patchAnnotationsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n    throw new RuntimeException("Patch annotations failed, status: " + patchAnnotationsResponse.getStatus());\n}\n'))),(0,i.kt)(r.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nstub.PatchAnnotations(\n    {\n        action: "merge",  // Supported actions: overwrite, merge, remove.\n        annotations: [\n            {\n                input_id: "{YOUR_INPUT_ID}",\n                id: "{YOUR_ANNOTATION_ID}",\n                // 1 means true, this concept is present.\n                // 0 means false, this concept is not present.\n                data: {\n                    concepts: [\n                        {id: "apple", value: 1}\n                    ]\n                }\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Patch annotations failed, status: " + response.status.description);\n        }\n    }\n);\n'))),(0,i.kt)(r.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'# Value of 1 means true, this concept is present.\n# Value of 0 means false, this concept is not present.\ncurl -X PATCH \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'\n  {\n    "annotations": [\n      {\n        "input_id": "{YOUR_INPUT_ID}",\n        "id": "{YOUR_ANNOTATION_ID}",\n        "data": {\n          "concepts": [\n            {\n              "id": "apple",\n              "value": 1\n            }\n          ]\n        }\n      }\n    ],\n    "action":"merge"\n}\'\\\n  https://api.clarifai.com/v2/annotations\n'))),(0,i.kt)(r.Z,{value:"js_rest",label:"Javascript (REST)",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'const raw = JSON.stringify({\n    "user_app_id": {\n        "user_id": "{YOUR_USER_ID}",\n        "app_id": "{YOUR_APP_ID}"\n    },\n    "annotations": [\n    {\n      "input_id": "{YOUR_INPUT_ID}",\n      "id": "{YOUR_ANNOTATION_ID}",\n      "data": {\n        "concepts": [\n          {\n            "id": "apple",\n            "value": 1\n          }\n        ]\n      }\n    }\n  ],\n  "action":"merge"\n});\n\nconst requestOptions = {\n  method: \'PATCH\',\n  headers: {\n    \'Accept\': \'application/json\',\n    \'Authorization\': \'Key {YOUR_PERSONAL_TOKEN}\'\n  },\n  body: raw\n};\n\nfetch("https://api.clarifai.com/v2/annotations", requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log(\'error\', error));\n')))),(0,i.kt)("h4",{id:"update-annotation-with-concepts-in-a-region"},"Update Annotation with Concepts in a Region"),(0,i.kt)("p",null,"When you update region data, you must nest this new data within region.data. Set the region","_","id to the current region","_","id if you do not want to change or remove this region."),(0,i.kt)(s.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"python",label:"Python",default:!0,mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'# Insert here the initialization code as outlined on this page:\n# https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\npatch_annotations_response = stub.PatcchAnnotations(\n    service_pb2.PatchAnnotationsRequest(\n        user_app_id=userDataObject,  # The userDataObject is created in the overview and is required when using a PAT\n        action="merge",  # Supported actions: overwrite, merge, remove.\n        annotations=[\n            resources_pb2.Annotation(\n                input_id="{YOUR_INPUT_ID}",\n                id="{YOUR_ANNOTATION_ID}",\n                data=resources_pb2.Data(\n                    regions=[\n                        resources_pb2.Region(\n                            id="{REGION_ID}" ,  # this should be the region id of this annotation before patch\n                            data=resources_pb2.Data(\n                                concepts=[\n                                    resources_pb2.Concept(id="tree", value=1.),  # 1 means true, this concept is present.\n                                ]\n                            )\n                        )\n                    ]\n                )\n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif patch_annotations_response.status.code != status_code_pb2.SUCCESS:\n    print("There was an error with your request!")\n    print("\\tCode: {}".format(patch_annotations_response.outputs[0].status.code))\n    print("\\tDescription: {}".format(patch_annotations_response.outputs[0].status.description))\n    print("\\tDetails: {}".format(patch_annotations_response.outputs[0].status.details))\n    raise Exception("Patch annotations failed, status: " + patch_annotations_response.status.description)\n'))),(0,i.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'import java.util.List;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nMultiAnnotationResponse patchAnnotationsResponse = stub.patchAnnotations(\n    PatchAnnotationsRequest.newBuilder()\n        .setAction("merge")  // Supported actions: overwrite, merge, remove.\n        .addAnnotations(\n            Annotation.newBuilder()\n                .setInputId("{YOUR_INPUT_ID}")\n                .setId("{YOUR_ANNOTATION_ID}")\n                .setData(\n                    Data.newBuilder().addRegions(\n                        Region.newBuilder()\n                            .setId("{REGION_ID}") // this should be the region id of this annotation\n                            .setData(\n                                Data.newBuilder().addConcepts(\n                                    Concept.newBuilder()\n                                        .setId("apple")\n                                        .setValue(1f)  // 1 means true, this concept is present.\n                                        .build()\n                                    )\n                            ).build()\n                    ).build()\n                )\n                .build()\n    ).build()\n);\n\nif (patchAnnotationsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n    throw new RuntimeException("Patch annotations failed, status: " + patchAnnotationsResponse.getStatus());\n}\n'))),(0,i.kt)(r.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nstub.PatchAnnotations(\n    {\n        action: "merge",  // Supported actions: overwrite, merge, remove.\n        annotations: [\n            {\n                input_id: "{YOUR_INPUT_ID}",\n                id: "{YOUR_ANNOTATION_ID}",\n                data: {\n                    regions: [\n                        {\n                            id: "{REGION_ID}" // this should be the region id of this annotation before patch\n                            // 1 means true, this concept is present.\n                            data: {\n                                concepts: [\n                                    {id: "apple", value: 1},\n                                ]\n                            },\n                        }\n                    ]\n                }\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Patch annotations failed, status: " + response.status.description);\n        }\n    }\n);\n'))),(0,i.kt)(r.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'# Value of 1 means true, this concept is present.\n# region id should be the region id of this annotation before patch\ncurl -X PATCH \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'\n  {\n    "annotations": [\n      {\n        "input_id": "{YOUR_INPUT_ID}",\n        "id": "{YOUR_ANNOTATION_ID}",\n        "data": {\n          "regions": [\n            {\n              "id": "{REGION_ID}",\n              "data": {\n                "concepts": [\n                  {\n                    "id": "apple",\n                    "value": 1\n                  }\n                ]\n              }\n            }\n          ]\n        }\n      }\n    ],\n    "action":"merge"\n}\'\\\n  https://api.clarifai.com/v2/annotations\n'))),(0,i.kt)(r.Z,{value:"js_rest",label:"Javascript (REST)",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'const raw = JSON.stringify({\n    "user_app_id": {\n        "user_id": "{YOUR_USER_ID}",\n        "app_id": "{YOUR_APP_ID}"\n    },\n    "annotations": [\n    {\n      "input_id": "{YOUR_INPUT_ID}",\n      "id": "{YOUR_ANNOTATION_ID}",\n      "data": {\n        "regions": [\n          {\n            "id": "{REGION_ID}",\n            "data": {\n              "concepts": [\n                {\n                  "id": "apple",\n                  "value": 1\n                }\n              ]\n            }\n          }\n        ]\n      }\n    }\n  ],\n  "action":"merge"\n});\n\nconst requestOptions = {\n  method: \'PATCH\',\n  headers: {\n    \'Accept\': \'application/json\',\n    \'Authorization\': \'Key {YOUR_PERSONAL_TOKEN}\'\n  },\n  body: raw\n};\n\nfetch("https://api.clarifai.com/v2/annotations", requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log(\'error\', error));\n')))),(0,i.kt)("h4",{id:"update-annotation-region-coordinates"},"Update Annotation Region Coordinates"),(0,i.kt)("p",null,"You can update region bounding boxes coordinates. When changing the region, you should use ",(0,i.kt)("inlineCode",{parentName:"p"},"overwrite")," action. With ",(0,i.kt)("inlineCode",{parentName:"p"},"overwrite")," action, you need to provide any data you want to keep in this annotation."),(0,i.kt)(s.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"python",label:"Python",default:!0,mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'# Insert here the initialization code as outlined on this page:\n# https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\npatch_annotations_response = stub.PatcchAnnotations(\n    service_pb2.PatchAnnotationsRequest(\n        user_app_id=userDataObject,  # The userDataObject is created in the overview and is required when using a PAT\n        action="overwrite",\n        annotations=[\n            resources_pb2.Annotation(\n                input_id="{YOUR_INPUT_ID}",\n                id="{YOUR_ANNOTATION_ID}",\n                data=resources_pb2.Data(\n                    regions=[\n                        resources_pb2.Region(\n                            region_info=resources_pb2.RegionInfo(\n                                bounding_box=resources_pb2.BoundingBox(        # move bounding bbox to a new cooridnates\n                                    top_row=0.5,\n                                    left_col=0.5,\n                                    bottom_row=0.8,\n                                    right_col=0.8\n                                )\n                            ),\n                            data=resources_pb2.Data(    # need to provde tags you previously labeled since this is overwrite action\n                                concepts=[\n                                    resources_pb2.Concept(id="bike", value=1.),  # 1 means true, this concept is present.\n                                ]\n                            )\n                        )\n                    ]\n                )\n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif patch_annotations_response.status.code != status_code_pb2.SUCCESS:\n    print("There was an error with your request!")\n    print("\\tCode: {}".format(patch_annotations_response.outputs[0].status.code))\n    print("\\tDescription: {}".format(patch_annotations_response.outputs[0].status.description))\n    print("\\tDetails: {}".format(patch_annotations_response.outputs[0].status.details))\n    raise Exception("Patch annotations failed, status: " + patch_annotations_response.status.description)\n'))),(0,i.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'import java.util.List;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nMultiAnnotationResponse patchAnnotationsResponse = stub.patchAnnotations(\n    PatchAnnotationsRequest.newBuilder()\n        .setAction("overwrite")\n        .addAnnotations(\n            Annotation.newBuilder()\n                .setInputId("{YOUR_INPUT_ID}")\n                .setId("{YOUR_ANNOTATION_ID}")\n                .setData(\n                    Data.newBuilder().addRegions(\n                        Region.newBuilder()\n                            .setRegionInfo(\n                                RegionInfo.newBuilder()\n                                    .setBoundingBox(        // move bounding box to a new cooridnates\n                                        BoundingBox.newBuilder()\n                                            .setTopRow(0.5f)\n                                            .setLeftCol(0.5f)\n                                            .setBottomRow(0.8f)\n                                            .setRightCol(0.8f)\n                                            .build()\n                                    )\n                                    .build()\n                            )\n                            .setData(\n                                Data.newBuilder()\n                                    .addConcepts(\n                                        Concept.newBuilder()\n                                            .setId("bike")\n                                            .setValue(1f)  // 1 means true, this concept is present.\n                                            .build()\n                                    )\n                            ).build()\n                    ).build()\n                )\n                .build()\n    ).build()\n);\n\nif (patchAnnotationsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n    throw new RuntimeException("Patch annotations failed, status: " + patchAnnotationsResponse.getStatus());\n}\n'))),(0,i.kt)(r.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nstub.PatchAnnotations(\n    {\n        action: "overwrite",\n        annotations: [\n            {\n                input_id: "{YOUR_INPUT_ID}",\n                id: "{YOUR_ANNOTATION_ID}",\n                data: {\n                    regions: [\n                        {\n                            region_info: {\n                                bounding_box: {        // move bounding box to a new coordiates\n                                    top_row: 0.5,\n                                    left_col: 0.5,\n                                    bottom_row: 0.8\n                                    right_col: 0.8\n                                }\n                            }\n                            // 1 means true, this concept is present.\n                            // 0 means false, this concept is not present.\n                            data: {\n                                concepts: [\n                                    {id: "bike", value: 1},\n                                ]\n                            },\n                        }\n                    ]\n                }\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Patch annotations failed, status: " + response.status.description);\n        }\n    }\n);\n'))),(0,i.kt)(r.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'# Value of 1 means true, this concept is present.\n# region id should be the region id of this annotation before patch\ncurl -X PATCH \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'\n  {\n    "annotations": [\n      {\n        "input_id": "{YOUR_INPUT_ID}",\n        "id": "{YOUR_ANNOTATION_ID}",\n        "data": {\n          "regions": [\n            {\n              "id": "{REGION_ID}",\n              "data": {\n                "concepts": [\n                  {\n                    "id": "apple",\n                    "value": 1\n                  }\n                ]\n              }\n            }\n          ]\n        }\n      }\n    ],\n    "action":"merge"\n}\'\\\n  https://api.clarifai.com/v2/annotations\n'))),(0,i.kt)(r.Z,{value:"js_rest",label:"Javascript (REST)",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'const raw = JSON.stringify({\n    "user_app_id": {\n        "user_id": "{YOUR_USER_ID}",\n        "app_id": "{YOUR_APP_ID}"\n    },\n    "annotations": [\n    {\n      "data": {\n            "regions": [{\n                "region_info": {\n                    "bounding_box": {\n                        "top_row": 0,\n                        "left_col": 0,\n                        "bottom_row": 1,\n                        "right_col": 1\n                    }\n                },\n                "data": {\n                    "concepts": [{\n                        "id": "{{concept_id}}",\n                        "name": "{{concept_id}}",\n                        "value": 1\n                    }]\n                }\n            }]\n        },\n        "input_id": "{{asset_id}}"\n    }\n  ]\n});\n\nconst requestOptions = {\n  method: \'PATCH\',\n  headers: {\n    \'Accept\': \'application/json\',\n    \'Authorization\': \'Key {YOUR_PERSONAL_TOKEN}\'\n  },\n  body: raw\n};\n\nfetch("https://api.clarifai.com/v2/annotations", requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log(\'error\', error));\n')))),(0,i.kt)("h4",{id:"update-annotation-status"},"Update Annotation Status"),(0,i.kt)("p",null,"You can update an annotation status."),(0,i.kt)(s.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"python",label:"Python",default:!0,mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'# Insert here the initialization code as outlined on this page:\n# https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\npatch_annotations_response = stub.PatchAnnotations(\n    service_pb2.PatchAnnotationsRequest(\n        user_app_id=userDataObject,  # The userDataObject is created in the overview and is required when using a PAT\n        action="merge",  # Supported actions: overwrite, merge, remove.\n        annotations=[\n            resources_pb2.Annotation(\n                input_id="{YOUR_INPUT_ID}",\n                id="{YOUR_ANNOTATION_ID}",\n                status=status_pb2.Status(\n                    code=status_code_pb2.ANNOTATION_SUCCESS\n                )\n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif patch_annotations_response.status.code != status_code_pb2.SUCCESS:\n    print("There was an error with your request!")\n    print("\\tCode: {}".format(patch_annotations_response.outputs[0].status.code))\n    print("\\tDescription: {}".format(patch_annotations_response.outputs[0].status.description))\n    print("\\tDetails: {}".format(patch_annotations_response.outputs[0].status.details))\n    raise Exception("Patch annotations failed, status: " + patch_annotations_response.status.description)\n'))),(0,i.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'import java.util.List;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nMultiAnnotationResponse patchAnnotationsResponse = stub.patchAnnotations(\n    PatchAnnotationsRequest.newBuilder()\n        .setAction("merge")  // Supported actions: overwrite, merge, remove.\n        .addAnnotations(\n        Annotation.newBuilder()\n            .setInputId("{YOUR_INPUT_ID}")\n            .setId("{YOUR_ANNOTATION_ID}")\n            .setStatus(\n                Status.newBuilder()\n                    .setCodeValue(StatusCode.ANNOTATION_SUCCESS_VALUE)\n                    .build()\n            )\n            .build()\n    ).build()\n);\n\nif (patchAnnotationsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n    throw new RuntimeException("patch annotations failed, status: " + patchAnnotationsResponse.getStatus());\n}\n'))),(0,i.kt)(r.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nstub.PatchAnnotations(\n    {\n        action: "merge",  // Supported actions: overwrite, merge, remove.\n        annotations: [\n            {\n                input_id: "{YOUR_INPUT_ID}",\n                id: "{YOUR_ANNOTATION_ID}",\n                status: {\n                    code: 24150\n                }\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Patch annotations failed, status: " + response.status.description);\n        }\n    }\n);\n'))),(0,i.kt)(r.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X PATCH \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'\n  {\n    "annotations": [\n      {\n        "input_id": "{YOUR_INPUT_ID}",\n        "id": "{YOUR_ANNOTATION_ID}",\n        "status": {\n          "code": "ANNOTATION_SUCCESS"\n        }\n      }\n    ],\n    "action":"merge"\n}\'\\\n  https://api.clarifai.com/v2/annotations\n'))),(0,i.kt)(r.Z,{value:"js_rest",label:"Javascript (REST)",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'const raw = JSON.stringify({\n    "user_app_id": {\n        "user_id": "{YOUR_USER_ID}",\n        "app_id": "{YOUR_APP_ID}"\n    },\n    "annotations": [\n    {\n      "input_id": "{YOUR_INPUT_ID}",\n      "id": "{YOUR_ANNOTATION_ID}",\n      "status": {\n        "code": "ANNOTATION_SUCCESS"\n      }\n    }\n  ],\n  "action":"merge"\n});\n\nconst requestOptions = {\n  method: \'PATCH\',\n  headers: {\n    \'Accept\': \'application/json\',\n    \'Authorization\': \'Key {YOUR_PERSONAL_TOKEN}\'\n  },\n  body: raw\n};\n\nfetch("https://api.clarifai.com/v2/annotations", requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log(\'error\', error));\n')))),(0,i.kt)("h3",{id:"delete-annotations"},"Delete Annotations"),(0,i.kt)("h4",{id:"delete-annotation-by-input-id-and-annotation-id"},"Delete Annotation by Input ID and Annotation ID"),(0,i.kt)("p",null,"You can delete a single annotation by input ID and annotation ID."),(0,i.kt)(s.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"python",label:"Python",default:!0,mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'# Insert here the initialization code as outlined on this page:\n# https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\ndelete_annotation_response = stub.DeleteAnnotation(\n    service_pb2.DeleteAnnotationRequest(\n        user_app_id=userDataObject,  # The userDataObject is created in the overview and is required when using a PAT\n        input_id="{YOUR_INPUT_ID}",\n        annotation_id="{YOUR_ANNOTATION_ID}"\n    ),\n    metadata=metadata\n)\n\nif delete_annotation_response.status.code != status_code_pb2.SUCCESS:\n    print("There was an error with your request!")\n    print("\\tCode: {}".format(delete_annotation_response.outputs[0].status.code))\n    print("\\tDescription: {}".format(delete_annotation_response.outputs[0].status.description))\n    print("\\tDetails: {}".format(delete_annotation_response.outputs[0].status.details))\n    raise Exception("Delete annotation failed, status: " + delete_annotation_response.status.description)\n'))),(0,i.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nBaseResponse deleteAnnotationResponse = stub.deleteAnnotation(\n    DeleteAnnotationRequest.newBuilder()\n        .setInputId("{YOUR_INPUT_ID}")\n        .setAnnotationId("{YOUR_ANNOTATION_ID}")\n        .build()\n);\n\nif (deleteAnnotationResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n    throw new RuntimeException("Delete annotation failed, status: " + deleteAnnotationResponse.getStatus());\n}\n'))),(0,i.kt)(r.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nstub.DeleteAnnotation(\n    {\n        input_id: "{YOUR_INPUT_ID}",\n        annotation_id: "{YOUR_ANNOTATION_ID}"\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Delete annotation failed, status: " + response.status.description);\n        }\n    }\n);\n'))),(0,i.kt)(r.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X DELETE \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  https://api.clarifai.com/v2/inputs/{YOUR_INPUT_ID}/annotations/{YOUR_ANNOTATION_ID}\n'))),(0,i.kt)(r.Z,{value:"js_rest",label:"Javascript (REST)",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const appId = '{YOUR_APP_ID}'\nconst inputId = '{YOUR_INPUT_ID}'\nconst annotationId = '{YOUR_ANNOTATION_ID}'\n\nconst requestOptions = {\n  method: 'DELETE',\n  headers: {\n    'Accept': 'application/json',\n    'Authorization': 'Key {YOUR_PERSONAL_TOKEN}'\n  }\n};\n\nfetch(`https://api.clarifai.com/v2/users/me/apps/${appId}/inputs/${inputId}/annotations/${annotationId}`, requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log('error', error));\n")))),(0,i.kt)("h4",{id:"bulk-delete-annotations-by-input-ids-and-annotation-ids"},"Bulk Delete Annotations by Input Ids and Annotation IDs"),(0,i.kt)("p",null,"You can delete multiple annotations in one API call. You need to provide a list of input IDs and a list of annotation IDs. The number of input IDs has to match number of annotation IDs."),(0,i.kt)(s.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"python",label:"Python",default:!0,mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'# Insert here the initialization code as outlined on this page:\n# https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\ndelete_annotations_response = stub.DeleteAnnotations(\n    service_pb2.DeleteAnnotationsRequest(\n        user_app_id=userDataObject,  # The userDataObject is created in the overview and is required when using a PAT\n        input_ids=["{YOUR_INPUT_ID_1}", "{YOUR_INPUT_ID_2}"],\n        annotation_id=["{YOUR_ANNOTATION_ID_1}", "{YOUR_ANNOTATION_ID_2}"]\n    ),\n    metadata=metadata\n)\n\nif delete_annotations_response.status.code != status_code_pb2.SUCCESS:\n    print("There was an error with your request!")\n    print("\\tCode: {}".format(delete_annotation_response.outputs[0].status.code))\n    print("\\tDescription: {}".format(delete_annotation_response.outputs[0].status.description))\n    print("\\tDetails: {}".format(delete_annotation_response.outputs[0].status.details))\n    raise Exception("Delete annotations failed, status: " + delete_annotations_response.status.description)\n'))),(0,i.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nBaseResponse deleteAnnotationsResponse = stub.deleteAnnotations(\n    DeleteAnnotationsRequest.newBuilder()\n        .addInputIds("{YOUR_INPUT_ID_1}")\n        .addInputIds("{YOUR_INPUT_ID_2}")\n        .addIds("{YOUR_ANNOTATION_ID_1}")\n        .addIds("{YOUR_ANNOTATION_ID_2}")\n        .build()\n);\n\nif (deleteAnnotationsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n    throw new RuntimeException("Delete annotations failed, status: " + deleteAnnotationsResponse.getStatus());\n}\n'))),(0,i.kt)(r.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nstub.DeleteAnnotations(\n    {\n        input_ids: ["{YOUR_INPUT_ID_1}", "{YOUR_INPUT_ID_2}"],\n        annotation_ids: ["{YOUR_ANNOTATION_ID_1}", "{YOUR_ANNOTATION_ID_2}"]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Delete annotations failed, status: " + response.status.description);\n        }\n    }\n);\n'))),(0,i.kt)(r.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X DELETE \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  -d \'\n  {\n    "input_ids":["{YOUR_INPUT_ID_1}","{YOUR_INPUT_ID_2}"],\n    "ids":["{YOUR_ANNOTATION_ID_1}", "{YOUR_ANNOTATION_ID_2}"]\n  }\'\\\n  https://api.clarifai.com/v2/annotations\n'))),(0,i.kt)(r.Z,{value:"js_rest",label:"Javascript (REST)",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'const raw = JSON.stringify({\n    "user_app_id": {\n        "user_id": "{YOUR_USER_ID}",\n        "app_id": "{YOUR_APP_ID}"\n    },\n    "input_ids":["{YOUR_INPUT_ID_1}","{YOUR_INPUT_ID_2}"],\n  "ids":["{YOUR_ANNOTATION_ID_1}", "{YOUR_ANNOTATION_ID_2}"]\n});\n\nconst requestOptions = {\n  method: \'DELETE\',\n  headers: {\n    \'Accept\': \'application/json\',\n    \'Authorization\': \'Key {YOUR_PERSONAL_TOKEN}\'\n  },\n  body: raw\n};\n\nfetch("https://api.clarifai.com/v2/annotations", requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log(\'error\', error));\n')))),(0,i.kt)("h4",{id:"bulk-delete-all-annotations-by-input-ids"},"Bulk Delete All Annotations by Input IDs"),(0,i.kt)("p",null,"To delete all annotations of a given input, you just need to set input ID","(","s",")",". This will delete all annotations for these input","(","s",")"," EXCEPT input level annotations which only get deleted if you delete the inputs themselves."),(0,i.kt)(s.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"python",label:"Python",default:!0,mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'# Insert here the initialization code as outlined on this page:\n# https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\ndelete_annotations_response = stub.DeleteAnnotations(\n    service_pb2.DeleteAnnotationsRequest(\n        user_app_id=userDataObject,  # The userDataObject is created in the overview and is required when using a PAT\n        input_ids=["{YOUR_INPUT_ID_1}", "{YOUR_INPUT_ID_2}"]\n    ),\n    metadata=metadata\n)\n\nif delete_annotations_response.status.code != status_code_pb2.SUCCESS:\n    print("There was an error with your request!")\n    print("\\tCode: {}".format(delete_annotation_response.outputs[0].status.code))\n    print("\\tDescription: {}".format(delete_annotation_response.outputs[0].status.description))\n    print("\\tDetails: {}".format(delete_annotation_response.outputs[0].status.details))\n    raise Exception("Delete annotations failed, status: " + delete_annotations_response.status.description)\n'))),(0,i.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nBaseResponse deleteAnnotationsResponse = stub.deleteAnnotations(\n    DeleteAnnotationsRequest.newBuilder()\n        .addInputIds("{YOUR_INPUT_ID_1}")\n        .addInputIds("{YOUR_INPUT_ID_2}")\n        .build()\n);\n\nif (deleteAnnotationsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n    throw new RuntimeException("Delete annotations failed, status: " + deleteAnnotationsResponse.getStatus());\n}\n'))),(0,i.kt)(r.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nstub.DeleteAnnotations(\n    {\n        input_ids: ["{YOUR_INPUT_ID_1}", "{YOUR_INPUT_ID_2}"]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Delete annotations failed, status: " + response.status.description);\n        }\n    }\n);\n'))),(0,i.kt)(r.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X DELETE \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  -d \'\n  {\n    "input_ids":["{YOUR_INPUT_ID_1}","{YOUR_INPUT_ID_2}"]\n  }\'\\\n  https://api.clarifai.com/v2/annotations\n'))),(0,i.kt)(r.Z,{value:"js_rest",label:"Javascript (REST)",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'const raw = JSON.stringify({\n    "user_app_id": {\n        "user_id": "{YOUR_USER_ID}",\n        "app_id": "{YOUR_APP_ID}"\n    },\n    "input_ids":["{YOUR_INPUT_ID_1}","{YOUR_INPUT_ID_2}"]\n});\n\nconst requestOptions = {\n  method: \'DELETE\',\n  headers: {\n    \'Accept\': \'application/json\',\n    \'Authorization\': \'Key {YOUR_PERSONAL_TOKEN}\'\n  },\n  body: raw\n};\n\nfetch("https://api.clarifai.com/v2/annotations", requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log(\'error\', error));\n')))))}m.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[3190],{3905:function(e,t,a){a.d(t,{Zo:function(){return p},kt:function(){return f}});var n=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var s=n.createContext({}),c=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=c(a),f=i,h=d["".concat(s,".").concat(f)]||d[f]||u[f]||r;return a?n.createElement(h,l(l({ref:t},p),{},{components:a})):n.createElement(h,l({ref:t},p))}));function f(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,l=new Array(r);l[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var c=2;c<r;c++)l[c]=a[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},8215:function(e,t,a){var n=a(7294);t.Z=function(e){var t=e.children,a=e.hidden,i=e.className;return n.createElement("div",{role:"tabpanel",hidden:a,className:i},t)}},6396:function(e,t,a){a.d(t,{Z:function(){return d}});var n=a(7462),i=a(7294),r=a(2389),l=a(9443);var o=function(){var e=(0,i.useContext)(l.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},s=a(3616),c=a(6010),p="tabItem_vU9c";function u(e){var t,a,r,l=e.lazy,u=e.block,d=e.defaultValue,f=e.values,h=e.groupId,m=e.className,b=i.Children.map(e.children,(function(e){if((0,i.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),g=null!=f?f:b.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),C=(0,s.lx)(g,(function(e,t){return e.value===t.value}));if(C.length>0)throw new Error('Docusaurus error: Duplicate values "'+C.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var v=null===d?d:null!=(t=null!=d?d:null==(a=b.find((function(e){return e.props.default})))?void 0:a.props.value)?t:null==(r=b[0])?void 0:r.props.value;if(null!==v&&!g.some((function(e){return e.value===v})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+v+'" but none of its children has the corresponding value. Available values are: '+g.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var y=o(),k=y.tabGroupChoices,N=y.setTabGroupChoices,A=(0,i.useState)(v),P=A[0],w=A[1],T=[],I=(0,s.o5)().blockElementScrollPositionUntilNextRender;if(null!=h){var E=k[h];null!=E&&E!==P&&g.some((function(e){return e.value===E}))&&w(E)}var O=function(e){var t=e.currentTarget,a=T.indexOf(t),n=g[a].value;n!==P&&(I(t),w(n),null!=h&&N(h,n))},S=function(e){var t,a=null;switch(e.key){case"ArrowRight":var n=T.indexOf(e.currentTarget)+1;a=T[n]||T[0];break;case"ArrowLeft":var i=T.indexOf(e.currentTarget)-1;a=T[i]||T[T.length-1]}null==(t=a)||t.focus()};return i.createElement("div",{className:"tabs-container"},i.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,c.Z)("tabs",{"tabs--block":u},m)},g.map((function(e){var t=e.value,a=e.label,r=e.attributes;return i.createElement("li",(0,n.Z)({role:"tab",tabIndex:P===t?0:-1,"aria-selected":P===t,key:t,ref:function(e){return T.push(e)},onKeyDown:S,onFocus:O,onClick:O},r,{className:(0,c.Z)("tabs__item",p,null==r?void 0:r.className,{"tabs__item--active":P===t})}),null!=a?a:t)}))),l?(0,i.cloneElement)(b.filter((function(e){return e.props.value===P}))[0],{className:"margin-vert--md"}):i.createElement("div",{className:"margin-vert--md"},b.map((function(e,t){return(0,i.cloneElement)(e,{key:t,hidden:e.props.value!==P})}))))}function d(e){var t=(0,r.Z)();return i.createElement(u,(0,n.Z)({key:String(t)},e))}},6547:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return c},contentTitle:function(){return p},metadata:function(){return u},toc:function(){return d},default:function(){return h}});var n=a(7462),i=a(3366),r=(a(7294),a(3905)),l=a(6396),o=a(8215),s=["components"],c={description:"Clarifai API provides clients in the most popular languages."},p="Clarifai API Clients",u={unversionedId:"api-guide/api-overview/api-clients/README",id:"api-guide/api-overview/api-clients/README",title:"Clarifai API Clients",description:"Clarifai API provides clients in the most popular languages.",source:"@site/docs/api-guide/api-overview/api-clients/README.mdx",sourceDirName:"api-guide/api-overview/api-clients",slug:"/api-guide/api-overview/api-clients/",permalink:"/docs-new/api-guide/api-overview/api-clients/",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/api-guide/api-overview/api-clients/README.mdx",tags:[],version:"current",frontMatter:{description:"Clarifai API provides clients in the most popular languages."},sidebar:"tutorialSidebar",previous:{title:"Clarifai API Basics",permalink:"/docs-new/api-guide/api-overview/"},next:{title:"gRPC vs HTTP Channels",permalink:"/docs-new/api-guide/api-overview/api-clients/grpc-vs-http-channels"}},d=[{value:"Clarifai Clients",id:"clarifai-clients",children:[],level:2},{value:"Manually-built Clients (deprecated)",id:"manually-built-clients-deprecated",children:[],level:2},{value:"Client Installation Instructions",id:"client-installation-instructions",children:[{value:"Authorization keys",id:"authorization-keys",children:[],level:3}],level:2}],f={toc:d};function h(e){var t=e.components,a=(0,i.Z)(e,s);return(0,r.kt)("wrapper",(0,n.Z)({},f,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"clarifai-api-clients"},"Clarifai API Clients"),(0,r.kt)("h2",{id:"clarifai-clients"},"Clarifai Clients"),(0,r.kt)("p",null,"You can access the Clarifai API through clients in many of the most popular programming languages. Our clients are built on ",(0,r.kt)("a",{parentName:"p",href:"https://grpc.io/"},"gRPC")," and are accessible through HTTP+JSON channels as well as gRPC channels. "),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Official Clients"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"https://github.com/Clarifai/clarifai-python-grpc/"},"Clarifai Python"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"https://github.com/Clarifai/clarifai-java-grpc/"},"Clarifai Java"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"https://github.com/Clarifai/clarifai-nodejs-grpc"},"Clarifai NodeJS"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"https://github.com/Clarifai/clarifai-csharp-grpc/"},"Clarifai C","#"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"https://github.com/Clarifai/clarifai-php-grpc/"},"Clarifai PHP"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"https://github.com/Clarifai/clarifai-swift-grpc"},"Clarifai Swift"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"https://github.com/Clarifai/clarifai-rust-grpc"},"Clarifai Rust"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"https://github.com/Clarifai/clarifai-go-grpc"},"Clarifai Go"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"https://github.com/Clarifai/clarifai-cpp-grpc"},"Clarifai C++"))))),(0,r.kt)("h2",{id:"manually-built-clients-deprecated"},"Manually-built Clients ","(","deprecated",")"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Available Clients"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"https://github.com/Clarifai/clarifai-csharp"},"C","#"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"https://github.com/Clarifai/clarifai-java"},"Java"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"https://github.com/Clarifai/clarifai-javascript"},"JavaScript")," ","(",(0,r.kt)("a",{parentName:"td",href:"https://sdk.clarifai.com/js/latest/index.html"},"Reference Docs"),")")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"https://github.com/Clarifai/clarifai-php"},"PHP"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"https://github.com/Clarifai/clarifai-python"},"Python")," ","(",(0,r.kt)("a",{parentName:"td",href:"https://clarifai-python.readthedocs.io/en/latest/index.html"},"Reference Docs"),")")))),(0,r.kt)("h2",{id:"client-installation-instructions"},"Client Installation Instructions"),(0,r.kt)("p",null,"Here are installation instructions for three of our most commonly used clients. For information on installing our other clients, please follow the links above."),(0,r.kt)("h3",{id:"authorization-keys"},"Authorization keys"),(0,r.kt)("p",null,"The key to be used as authorization can be either:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"An API key, which is tied to a certain application, or"),(0,r.kt)("li",{parentName:"ul"},"A Personal Access Token ","(","PAT",")",", which is tied to a user.")),(0,r.kt)("p",null,"Since a user can own multiple applications, using a PAT is more powerful. However, using a PAT also means that you need to specify the application ID to which the request should be applied."),(0,r.kt)("p",null,"With most endpoints you can freely choose whether to use an API key or a PAT. In this documentation, some code examples use one and some the other. But certain endpoints support only PAT ","(","e.g. creating a new application or a new API key",")","."),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"##############################################################################\n# Installation\n##############################################################################\n\npip install clarifai-grpc\n\n##############################################################################\n## Initialize client\n##     - This initializes the gRPC based client to communicate with the \n##       Clarifai platform. \n##############################################################################\n## Import in the Clarifai gRPC based objects needed\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_pb2, status_code_pb2\n\n## Construct the communications channel and the object stub to call requests on.\n# Note: You can also use a secure (encrypted) ClarifaiChannel.get_grpc_channel() however\n# it is currently not possible to use it with the latest gRPC version\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\n\n################################################################################\n## Set up Personal Access Token and Access information\n##     - This will be used by every Clarifai API call \n################################################################################\n## Specify the Authorization key.  This should be changed to your Personal Access Token.\n## Example: metadata = (('authorization', 'Key 123457612345678'),) \nmetadata = (('authorization', 'Key {YOUR_CLARIFAI_API_KEY}'),)\n\n##\n## A UserAppIDSet object is needed for most rpc calls.  This object contains\n## two pieces of information: the user id and the app id.  Both of these are\n## specified as string values.\n##\n##     'user_id' : This is your user id\n##     'app_id'  : This is the app id which contains the model of interest\nuserDataObject = resources_pb2.UserAppIDSet(user_id='{YOUR USER NAME HERE}', app_id='{YOUR APPLICATION ID HERE}')\n"))),(0,r.kt)(o.Z,{value:"php",label:"PHP",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n//////////////////////////////////////////////////////////////////////////////\n// Installation\n//     - gRPC for PHP is required to use the Clarifai API\n//////////////////////////////////////////////////////////////////////////////\n\n\n\n\n//////////////////////////////////////////////////////////////////////////////\n// Set Clarifai Namespace\n//     - A variety of standard objects are provided in the Clarifai namespace\n//       from the client library.  Which ones that are necessary depend on the\n//       specific RPC call being made.  All namespaces used in the example\n//       code are included below for reference, although you likely won't need\n//       all of these in your application. \n//////////////////////////////////////////////////////////////////////////////\n\n// Various data structures that are used in the RPC calls to the Clarifai Platform\n// These operate as standardization wrappers for various types of data.\n\n//    Data Types\nuse Clarifai\\Api\\Image;\nuse Clarifai\\Api\\Text;\nuse Clarifai\\Api\\Video;\n\n//    ML Structures\nuse Clarifai\\Api\\Concept;\nuse Clarifai\\Api\\Model;\n\n//    Wrapper Types\nuse Clarifai\\Api\\Data;\nuse Clarifai\\Api\\Input;\n\n// Various Request objects.  These specify the structure of the actual RPC request between\n// the client and the platform.\nuse Clarifai\\Api\\PostModelOutputsRequest;\nuse Clarifai\\Api\\PostConceptsSearchesRequest;\n\n\nuse Clarifai\\Api\\ConceptQuery;\n\n// Output configuration objects\nuse Clarifai\\Api\\OutputInfo;\nuse Clarifai\\Api\\OutputConfig;\n\n// The request status code object.  This contains information on the success or failure of\n// the API operation.\nuse Clarifai\\Api\\Status\\StatusCode;\n\n\n\n//////////////////////////////////////////////////////////////////////////////\n// Initialize client\n//     - This initializes the gRPC based client to communicate with the \n//       Clarifai platform. \n//////////////////////////////////////////////////////////////////////////////\n\n// The Clarifai PHP Client repository includes an autoload.php helper file that needs to be included\nrequire 'vendor/autoload.php';\n\n// Enable use of the ClarifaiClient object from the Clarifai namespace\nuse Clarifai\\ClarifaiClient;  \n\n// Construct the actual gRPC client object\n$client = ClarifaiClient::grpc();\n\n\n\n//////////////////////////////////////////////////////////////////////////////\n// Set up Personal Access Token and Access information\n//     - This will be used by every Clarifai API call \n//////////////////////////////////////////////////////////////////////////////\n\n// Specify the Authorization key.  This should be changed to your Personal Access Token.\n// Example: $metadata = ['Authorization' => ['Key 123456789123456789']]; \n$metadata = ['Authorization' => ['Key {YOUR PERSONAL ACCESS TOKEN HERE}']]; // Using the PAT in these examples\n\n//\n// A UserAppIDSet object is needed for most rpc calls.  This object cotnains\n// two pieces of information: the user id and the app id.  Both of these are\n// specified as string values.\n//\n\nuse Clarifai\\Api\\UserAppIDSet;  // Specify the namespace for the UserAppIDSet object\n\n$userDataObject = new UserAppIDSet([\n    'user_id' => '{YOUR USER NAME HERE}', // This is your user id\n    'app_id' => '{YOUR APPLICATION ID HERE}' // This is the app id which contains the model of interest\n]);\n\n"))),(0,r.kt)(o.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"///////////////////////////////////////////////////////////////////////////////\n// Installation (build.gradle)\n///////////////////////////////////////////////////////////////////////////////\n\nrepositories {\n    jcenter()\n}\n\ndependencies {\n    implementation 'com.clarifai:clarifai-grpc:LATEST_VERSION'\n}\n\n///////////////////////////////////////////////////////////////////////////////\n// Initialize client\n///////////////////////////////////////////////////////////////////////////////\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport io.grpc.Channel;\n\n\nChannel channel = ClarifaiChannel.INSTANCE.getGrpcChannel();\n\n// Note: You can also use a secure (encrypted) ClarifaiChannel.INSTANCE.getGrpcChannel() however\n// it is currently not supported in the latest gRPC version.\n\nV2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(channel)\n    .withCallCredentials(new ClarifaiCallCredentials(\"{YOUR_CLARIFAI_API_KEY}\"));\n"))),(0,r.kt)(o.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'///////////////////////////////////////////////////////////////////////////////\n// Installation\n///////////////////////////////////////////////////////////////////////////////\n\nnpm install clarifai-nodejs-grpc\n\n///////////////////////////////////////////////////////////////////////////////\n// Initialize client\n///////////////////////////////////////////////////////////////////////////////\n\nconst {ClarifaiStub, grpc} = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call.\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key {YOUR_CLARIFAI_API_KEY}");\n'))),(0,r.kt)(o.Z,{value:"csharp",label:"C#",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'\n///////////////////////////////////////////////////////////////////////////////\n// Installation\n///////////////////////////////////////////////////////////////////////////////\ndotnet add package ClarifaiGrpc\n\n///////////////////////////////////////////////////////////////////////////////\n// Initialize client\n///////////////////////////////////////////////////////////////////////////////\nusing System;\nusing System.Collections.Generic;\nusing Clarifai.Api;\nusing Clarifai.Channels;\nusing Grpc.Core;\nusing StatusCode = Clarifai.Api.Status.StatusCode;\n\nvar client = new V2.V2Client(ClarifaiChannel.Grpc());\n\nvar metadata = new Metadata\n{\n    {"Authorization", "Key {YOUR_PERSONAL_TOKEN}"}\n};\n')))))}h.isMDXComponent=!0}}]);
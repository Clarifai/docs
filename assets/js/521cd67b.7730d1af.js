"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[6923],{9792:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>m,contentTitle:()=>I,default:()=>S,frontMatter:()=>O,metadata:()=>a,toc:()=>R});const a=JSON.parse('{"id":"api-guide/workflows/base-workflows","title":"Base Workflow","description":"Index your data and provide your app with a default knowledge base","source":"@site/docs/api-guide/workflows/base-workflows.md","sourceDirName":"api-guide/workflows","slug":"/api-guide/workflows/base-workflows","permalink":"/api-guide/workflows/base-workflows","draft":false,"unlisted":false,"editUrl":"https://github.com/Clarifai/docs/blob/main/docs/api-guide/workflows/base-workflows.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"description":"Index your data and provide your app with a default knowledge base","pagination_next":null,"sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"Custom Prompter Model","permalink":"/api-guide/workflows/common-workflows/prompter-model"}}');var o=t(74848),s=t(28453),r=t(65537),i=t(79329),l=t(58069);const u="###################################################################################\n# In this section, we set the user authentication, app ID, and the details we want\n# to use to create a workflow. Change these strings to run your own example.\n###################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to create your own workflow\nWORKFLOW_ID = 'my-new-workflow-id' \nEMBED_MODEL_ID = 'YOUR_EMBED_MODEL_ID'\nEMBED_MODEL_VERSION_ID = 'YOUR_EMBED_MODEL_VERSION_ID'\nWORKFLOWNODE_ID = 'my-custom-model' \nCUSTOM_MODEL_ID = 'YOUR_CUSTOM_MODEL_ID'\nCUSTOM_MODEL_VERSION_ID = 'YOUR_CUSTOM_MODEL_VERSION_ID'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\npost_workflows_response = stub.PostWorkflows(\n    service_pb2.PostWorkflowsRequest(\n        user_app_id=userDataObject,\n        workflows=[\n            resources_pb2.Workflow(\n                id=WORKFLOW_ID,\n                nodes=[\n                    resources_pb2.WorkflowNode(\n                        id=\"embed\",\n                        model=resources_pb2.Model(\n                            id=EMBED_MODEL_ID,\n                            model_version=resources_pb2.ModelVersion(\n                                id=EMBED_MODEL_VERSION_ID\n                            )\n                        )\n                    ),\n                    resources_pb2.WorkflowNode(\n                        id=WORKFLOWNODE_ID,\n                        model=resources_pb2.Model(\n                            id=CUSTOM_MODEL_ID,\n                            model_version=resources_pb2.ModelVersion(\n                                id=CUSTOM_MODEL_VERSION_ID\n                            )\n                        ),\n                        node_inputs=[\n                            resources_pb2.NodeInput(node_id=\"embed\")\n                        ]\n                    ),\n                ]\n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif  post_workflows_response.status.code != status_code_pb2.SUCCESS:\n    print(post_workflows_response.status)\n    raise Exception(\"Post workflows failed, status: \" +  post_workflows_response.status.description)",c="########################################################################\n# In this section, we set the user authentication, app ID, and default\n# workflow ID. Change these strings to run your own example.\n########################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change this to update your default workflow\nDEFAULT_WORKFlOW_ID = 'auto-annotation-workflow-id'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\npatch_apps_response = stub.PatchApps(\n    service_pb2.PatchAppsRequest(\n        user_app_id=userDataObject,\n        action=\"overwrite\",\n        apps=[\n            resources_pb2.App(\n                id=APP_ID,\n                default_workflow_id=DEFAULT_WORKFlOW_ID\n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif patch_apps_response.status.code != status_code_pb2.SUCCESS:\n    print(patch_apps_response.status)\n    raise Exception(\"Patch apps failed, status: \" + patch_apps_response.status.description) \n",d='\x3c!--index.html file--\x3e\n\n<script>\n    //////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the details we want\n    // to use to create a workflow. Change these strings to run your own example.\n    /////////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = "YOUR_USER_ID_HERE";\n    // Your PAT (Personal Access Token) can be found in the Account\'s Security section\n    const PAT = "YOUR_PAT_HERE";\n    const APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to create your own custom workflow\n    const WORKFLOW_ID = "my-new-workflow-id";\n    const EMBED_MODEL_ID = "YOUR_EMBED_MODEL_ID";\n    const EMBED_MODEL_VERSION_ID = "YOUR_EMBED_MODEL_VERSION_ID";\n    const WORKFLOWNODE_ID = "my-custom-model";\n    const CUSTOM_MODEL_ID = "YOUR_CUSTOM_MODEL_ID";\n    const CUSTOM_MODEL_VERSION_ID = "YOUR_CUSTOM_MODEL_VERSION_ID"; \n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////   \n\n    const raw = JSON.stringify({\n        "user_app_id": {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        "workflows": [{\n            "id": WORKFLOW_ID,\n            "nodes": [\n                {\n                    "id": "embed",\n                    "model": {\n                        "id": EMBED_MODEL_ID,\n                        "model_version": {\n                            "id": EMBED_MODEL_VERSION_ID\n                        }\n                    }\n                },\n                {\n                    "id": WORKFLOWNODE_ID,\n                    "model": {\n                        "id": CUSTOM_MODEL_ID,\n                        "model_version": {\n                            "id": CUSTOM_MODEL_VERSION_ID\n                        }\n                    },\n                        "node_inputs": [\n                            {\n                                "node_id": "embed"\n                            }\n                        ]\n                }\n            ]\n        }]\n    });\n\n    const requestOptions = {\n        method: \'POST\',\n        headers: {\n            \'Accept\': \'application/json\',\n            \'Authorization\': \'Key \' + PAT\n        },\n        body: raw\n    };\n\n    fetch(`https://api.clarifai.com/v2/workflows`, requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log(\'error\', error));\n\n<\/script>',p="//index.js file\n\n//////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the details we want\n// to use to create a workflow. Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = 'YOUR_USER_ID_HERE';\n// Your PAT (Personal Access Token) can be found in the Account's Security section\nconst PAT = 'YOUR_PAT_HERE';\nconst APP_ID = 'YOUR_APP_ID_HERE';\n// Change these to create your own workflow\nconst WORKFLOW_ID = 'my-new-workflow-id';\nconst EMBED_MODEL_ID = 'YOUR_EMBED_MODEL_ID';\nconst EMBED_MODEL_VERSION_ID = 'YOUR_EMBED_MODEL_VERSION_ID';\nconst WORKFLOWNODE_ID = 'my-custom-model';\nconst CUSTOM_MODEL_ID = 'YOUR_CUSTOM_MODEL_ID';\nconst CUSTOM_MODEL_VERSION_ID = 'YOUR_CUSTOM_MODEL_VERSION_ID';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require(\"clarifai-nodejs-grpc\");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set(\"authorization\", \"Key \" + PAT);\n\nstub.PostWorkflows(\n    {\n        user_app_id: {\n            \"user_id\": USER_ID,\n            \"app_id\": APP_ID\n        },\n        workflows: [\n            {\n                id: WORKFLOW_ID,\n                nodes: [\n                    {\n                        id: \"embed\",\n                        model: {\n                            id: EMBED_MODEL_ID,\n                            model_version: {\n                                id: EMBED_MODEL_VERSION_ID\n                            }\n                        }\n                    },\n                    {\n                        id: WORKFLOWNODE_ID,\n                        model: {\n                            id: CUSTOM_MODEL_ID,\n                            model_version: {\n                                id: CUSTOM_MODEL_VERSION_ID\n                            }\n                        },\n                        node_inputs: [\n                            { node_id: \"embed\" }\n                        ]\n                    }\n                ]\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            console.log(response.status);\n            throw new Error(\"Post workflows failed, status: \" + response.status.description);\n        }\n    }\n);",_='//index.js file\n\n/////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and default\n// workflow ID. Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n// Change this to update your default workflow\nconst DEFAULT_WORKFlOW_ID = \'auto-annotation-workflow-id\';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PatchApps(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        action: "overwrite",\n        apps: [\n            {\n                id: APP_ID,\n                default_workflow_id: DEFAULT_WORKFlOW_ID\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            console.log(response.status);\n            throw new Error("Patch apps failed, status: " + response.status.description);\n        }\n    }\n);',E='package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.StatusCode;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\n\npublic class ClarifaiExample {\n\n    //////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the details we want\n    // to use to create a workflow. Change these strings to run your own example.\n    /////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to create your own workflow\n    static final String WORKFLOW_ID = "my-new-workflow-id";\n    static final String EMBED_MODEL_ID = "YOUR_EMBED_MODEL_ID";\n    static final String EMBED_MODEL_VERSION_ID = "YOUR_EMBED_MODEL_VERSION_ID";\n    static final String WORKFLOWNODE_ID = "my-custom-model";\n    static final String CUSTOM_MODEL_ID = "YOUR_CUSTOM_MODEL_ID";\n    static final String CUSTOM_MODEL_VERSION_ID = "YOUR_CUSTOM_MODEL_VERSION_ID";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiWorkflowResponse postWorkflowsResponse = stub.postWorkflows(\n            PostWorkflowsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .addWorkflows(\n                Workflow.newBuilder()\n                .setId(WORKFLOW_ID)\n                .addNodes(\n                    WorkflowNode.newBuilder()\n                    .setId("embed")\n                    .setModel(\n                        Model.newBuilder()\n                        .setId(EMBED_MODEL_ID)\n                        .setModelVersion(\n                            ModelVersion.newBuilder()\n                            .setId(EMBED_MODEL_VERSION_ID)\n                        )\n                    )\n                )\n                .addNodes(\n                    WorkflowNode.newBuilder()\n                    .setId(WORKFLOWNODE_ID)\n                    .setModel(\n                        Model.newBuilder()\n                        .setId(CUSTOM_MODEL_ID)\n                        .setModelVersion(\n                            ModelVersion.newBuilder()\n                            .setId(CUSTOM_MODEL_VERSION_ID)\n                        )\n                    )\n                    .addNodeInputs(NodeInput.newBuilder().setNodeId("embed"))\n                )\n            )\n            .build()\n        );\n\n        if (postWorkflowsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post workflows failed, status: " + postWorkflowsResponse.getStatus());\n        }\n\n    }\n\n}',w='package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.StatusCode;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\n\npublic class ClarifaiExample {\n\n    /////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and default\n    // workflow ID. Change these strings to run your own example.\n    /////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change this to update your default workflow\n    static final String DEFAULT_WORKFlOW_ID = "auto-annotation-workflow-id";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiAppResponse patchAppsResponse = stub.patchApps(\n            PatchAppsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .setAction("overwrite")\n            .addApps(\n                App.newBuilder()\n                .setId(APP_ID)\n                .setDefaultWorkflowId(DEFAULT_WORKFlOW_ID)\n            ).build()\n        );\n\n        if (patchAppsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Patch apps failed, status: " + patchAppsResponse.getStatus());\n        }\n\n    }\n\n}',f='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n//////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the details we want\n// to use to create a workflow. Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change these to create your own custom workflow\n$WORKFLOW_ID = "my-new-workflow-id";\n$EMBED_MODEL_ID = "YOUR_EMBED_MODEL_ID";\n$EMBED_MODEL_VERSION_ID = "YOUR_EMBED_MODEL_VERSION_ID";\n$WORKFLOWNODE_ID = "my-custom-model";\n$CUSTOM_MODEL_ID = "YOUR_CUSTOM_MODEL_ID";\n$CUSTOM_MODEL_VERSION_ID = "YOUR_CUSTOM_MODEL_VERSION_ID";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\PostWorkflowsRequest;\nuse Clarifai\\Api\\Workflow;\nuse Clarifai\\Api\\WorkflowNode;\nuse Clarifai\\Api\\NodeInput;\nuse Clarifai\\Api\\Model;\nuse Clarifai\\Api\\ModelVersion;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]]; \n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PostWorkflows(\n        // The request object carries the request along with the request status and other metadata related to the request itself\n        new PostWorkflowsRequest([\n            "user_app_id" => $userDataObject,\n            "workflows" => [\n                new Workflow([\n                    "id"=> $WORKFLOW_ID,\n                    "nodes" => [\n                        new WorkflowNode([\n                            "id" => "embed",\n                            "model" => new Model([\n                                "id" => $EMBED_MODEL_ID,\n                                "model_version" => new ModelVersion([\n                                    "id" => $EMBED_MODEL_VERSION_ID\n                                ])\n                            ])\n\n                        ]),\n                        new WorkflowNode([\n                            "id" => $WORKFLOWNODE_ID,\n                            "model"=> new Model([\n                                "id" => $CUSTOM_MODEL_ID,\n                                "model_version" => new ModelVersion([\n                                    "id" => $CUSTOM_MODEL_VERSION_ID\n                                ])\n                            ]),\n                            "node_inputs" => [\n                                new NodeInput([\n                                    "node_id"=> "embed"\n                                ])\n                            ]\n                        ])                       \n                    ]\n                ])\n            ]\n        ]),\n        $metadata\n    )->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\n?>',h='curl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/workflows" \\\n    -H "Authorization: Key YOUR_PAT_HERE" \\\n    -H "Content-Type: application/json" \\\n    --data-raw \'{\n        "workflows": [\n            {\n                "id": "my-new-workflow-id",\n                "nodes": [\n                    {\n                        "id": "embed",\n                        "model": {\n                            "id": "YOUR_EMBED_MODEL_ID_HERE",\n                            "model_version": {\n                                "id": "YOUR_EMBED_MODEL_VERSION_ID_HERE"\n                            }\n                        }\n                    },\n                    {\n                        "id": "my-custom-model",\n                        "model": {\n                            "id": "YOUR_CUSTOM_MODEL_ID_HERE",\n                            "model_version": {\n                                "id": "YOUR_CUSTOM_MODEL_VERSION_ID_HERE"\n                            }\n                        },\n                        "node_inputs": [\n                            {\n                                "node_id": "embed"\n                            }\n                        ]\n                    }\n                ]\n            }\n        ]\n    }\'',D='curl -X PATCH "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/" \\\n    -H "Authorization: Key YOUR_PAT_HERE" \\\n    -H "Content-Type: application/json" \\\n    --data-raw \'{\n        "action": "overwrite",\n        "apps": [\n            {\n                "id": "YOUR_APP_ID_HERE",\n                "default_workflow_id": "auto-annotation-workflow-ID"\n            }\n        ]\n    }\'',O={description:"Index your data and provide your app with a default knowledge base",pagination_next:null,sidebar_position:5},I="Base Workflow",m={},R=[{value:"Create a Workflow",id:"create-a-workflow",level:2},{value:"Update Your Base Workflow",id:"update-your-base-workflow",level:2}];function b(n){const e={a:"a",admonition:"admonition",h1:"h1",h2:"h2",header:"header",p:"p",strong:"strong",...(0,s.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.header,{children:(0,o.jsx)(e.h1,{id:"base-workflow",children:"Base Workflow"})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Index your data and provide your app with a default knowledge base"})}),"\n",(0,o.jsx)("hr",{}),"\n",(0,o.jsx)(e.p,{children:'The base workflow acts as the default knowledge base for your app and provides the basic structure for indexing your data. It gives you a "head start" when working with your data \u2014 by pre-indexing your inputs for search and by providing a default embedding for your custom models.'}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.a,{href:"https://docs.clarifai.com/portal-guide/workflows/base-workflows",children:"Click here"})," to learn more about the base workflow functionality."]}),"\n","\n","\n","\n","\n","\n","\n","\n",(0,o.jsx)(e.p,{children:"Let's demonstrate how you can update the default workflow for your app."}),"\n",(0,o.jsx)(e.h2,{id:"create-a-workflow",children:"Create a Workflow"}),"\n",(0,o.jsx)(e.p,{children:"You may need to start by creating a workflow for your app."}),"\n",(0,o.jsx)(e.p,{children:"Below is an example of how to create a workflow with a custom model. Note that you can also create a workflow using the models available publicly on the Clarifai Community platform."}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(i.A,{value:"python",label:"Python",children:(0,o.jsx)(l.A,{className:"language-python",children:u})}),(0,o.jsx)(i.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,o.jsx)(l.A,{className:"language-javascript",children:d})}),(0,o.jsx)(i.A,{value:"nodejs",label:"NodeJS",children:(0,o.jsx)(l.A,{className:"language-javascript",children:p})}),(0,o.jsx)(i.A,{value:"java",label:"Java",children:(0,o.jsx)(l.A,{className:"language-java",children:E})}),(0,o.jsx)(i.A,{value:"php",label:"PHP",children:(0,o.jsx)(l.A,{className:"language-php",children:f})}),(0,o.jsx)(i.A,{value:"curl",label:"cURL",children:(0,o.jsx)(l.A,{className:"language-bash",children:h})})]}),"\n",(0,o.jsx)(e.h2,{id:"update-your-base-workflow",children:"Update Your Base Workflow"}),"\n",(0,o.jsx)(e.p,{children:"After creating a workflow, you can then use it to update the default workflow for your app. You can also use a publicly available workflow to update your default workflow."}),"\n",(0,o.jsx)(e.p,{children:"Below is an example of how to update your base workflow."}),"\n",(0,o.jsx)(e.admonition,{type:"note",children:(0,o.jsx)(e.p,{children:"Updating the base workflow will re-index your app, processing all inputs through the new base workflow. This may take some time, and could incur costs. You could avoid the costs by deleting all your inputs before updating the base workflow."})}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(i.A,{value:"python",label:"Python",children:(0,o.jsx)(l.A,{className:"language-python",children:c})}),(0,o.jsx)(i.A,{value:"nodejs",label:"NodeJS",children:(0,o.jsx)(l.A,{className:"language-javascript",children:_})}),(0,o.jsx)(i.A,{value:"java",label:"Java",children:(0,o.jsx)(l.A,{className:"language-java",children:w})}),(0,o.jsx)(i.A,{value:"curl",label:"cURL",children:(0,o.jsx)(l.A,{className:"language-bash",children:D})})]})]})}function S(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(b,{...n})}):b(n)}},65537:(n,e,t)=>{t.d(e,{A:()=>R});var a=t(96540),o=t(18215),s=t(65627),r=t(56347),i=t(50372),l=t(30604),u=t(11861),c=t(78749);function d(n){return a.Children.toArray(n).filter((n=>"\n"!==n)).map((n=>{if(!n||(0,a.isValidElement)(n)&&function(n){const{props:e}=n;return!!e&&"object"==typeof e&&"value"in e}(n))return n;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof n.type?n.type:n.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function p(n){const{values:e,children:t}=n;return(0,a.useMemo)((()=>{const n=e??function(n){return d(n).map((n=>{let{props:{value:e,label:t,attributes:a,default:o}}=n;return{value:e,label:t,attributes:a,default:o}}))}(t);return function(n){const e=(0,u.XI)(n,((n,e)=>n.value===e.value));if(e.length>0)throw new Error(`Docusaurus error: Duplicate values "${e.map((n=>n.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(n),n}),[e,t])}function _(n){let{value:e,tabValues:t}=n;return t.some((n=>n.value===e))}function E(n){let{queryString:e=!1,groupId:t}=n;const o=(0,r.W6)(),s=function(n){let{queryString:e=!1,groupId:t}=n;if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:e,groupId:t});return[(0,l.aZ)(s),(0,a.useCallback)((n=>{if(!s)return;const e=new URLSearchParams(o.location.search);e.set(s,n),o.replace({...o.location,search:e.toString()})}),[s,o])]}function w(n){const{defaultValue:e,queryString:t=!1,groupId:o}=n,s=p(n),[r,l]=(0,a.useState)((()=>function(n){let{defaultValue:e,tabValues:t}=n;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!_({value:e,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${t.map((n=>n.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const a=t.find((n=>n.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:e,tabValues:s}))),[u,d]=E({queryString:t,groupId:o}),[w,f]=function(n){let{groupId:e}=n;const t=function(n){return n?`docusaurus.tab.${n}`:null}(e),[o,s]=(0,c.Dv)(t);return[o,(0,a.useCallback)((n=>{t&&s.set(n)}),[t,s])]}({groupId:o}),h=(()=>{const n=u??w;return _({value:n,tabValues:s})?n:null})();(0,i.A)((()=>{h&&l(h)}),[h]);return{selectedValue:r,selectValue:(0,a.useCallback)((n=>{if(!_({value:n,tabValues:s}))throw new Error(`Can't select invalid tab value=${n}`);l(n),d(n),f(n)}),[d,f,s]),tabValues:s}}var f=t(9136);const h={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var D=t(74848);function O(n){let{className:e,block:t,selectedValue:a,selectValue:r,tabValues:i}=n;const l=[],{blockElementScrollPositionUntilNextRender:u}=(0,s.a_)(),c=n=>{const e=n.currentTarget,t=l.indexOf(e),o=i[t].value;o!==a&&(u(e),r(o))},d=n=>{let e=null;switch(n.key){case"Enter":c(n);break;case"ArrowRight":{const t=l.indexOf(n.currentTarget)+1;e=l[t]??l[0];break}case"ArrowLeft":{const t=l.indexOf(n.currentTarget)-1;e=l[t]??l[l.length-1];break}}e?.focus()};return(0,D.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.A)("tabs",{"tabs--block":t},e),children:i.map((n=>{let{value:e,label:t,attributes:s}=n;return(0,D.jsx)("li",{role:"tab",tabIndex:a===e?0:-1,"aria-selected":a===e,ref:n=>{l.push(n)},onKeyDown:d,onClick:c,...s,className:(0,o.A)("tabs__item",h.tabItem,s?.className,{"tabs__item--active":a===e}),children:t??e},e)}))})}function I(n){let{lazy:e,children:t,selectedValue:s}=n;const r=(Array.isArray(t)?t:[t]).filter(Boolean);if(e){const n=r.find((n=>n.props.value===s));return n?(0,a.cloneElement)(n,{className:(0,o.A)("margin-top--md",n.props.className)}):null}return(0,D.jsx)("div",{className:"margin-top--md",children:r.map(((n,e)=>(0,a.cloneElement)(n,{key:e,hidden:n.props.value!==s})))})}function m(n){const e=w(n);return(0,D.jsxs)("div",{className:(0,o.A)("tabs-container",h.tabList),children:[(0,D.jsx)(O,{...e,...n}),(0,D.jsx)(I,{...e,...n})]})}function R(n){const e=(0,f.A)();return(0,D.jsx)(m,{...n,children:d(n.children)},String(e))}},79329:(n,e,t)=>{t.d(e,{A:()=>r});t(96540);var a=t(18215);const o={tabItem:"tabItem_Ymn6"};var s=t(74848);function r(n){let{children:e,hidden:t,className:r}=n;return(0,s.jsx)("div",{role:"tabpanel",className:(0,a.A)(o.tabItem,r),hidden:t,children:e})}}}]);
"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[8067],{58215:function(n,e,t){var a=t(67294);e.Z=function(n){var e=n.children,t=n.hidden,s=n.className;return a.createElement("div",{role:"tabpanel",hidden:t,className:s},e)}},26396:function(n,e,t){t.d(e,{Z:function(){return d}});var a=t(87462),s=t(67294),i=t(72389),r=t(79443);var o=function(){var n=(0,s.useContext)(r.Z);if(null==n)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return n},l=t(63616),u=t(86010),p="tabItem_vU9c";function c(n){var e,t,i,r=n.lazy,c=n.block,d=n.defaultValue,h=n.values,_=n.groupId,m=n.className,g=s.Children.map(n.children,(function(n){if((0,s.isValidElement)(n)&&void 0!==n.props.value)return n;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof n.type?n.type:n.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),f=null!=h?h:g.map((function(n){var e=n.props;return{value:e.value,label:e.label,attributes:e.attributes}})),T=(0,l.lx)(f,(function(n,e){return n.value===e.value}));if(T.length>0)throw new Error('Docusaurus error: Duplicate values "'+T.map((function(n){return n.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var E=null===d?d:null!=(e=null!=d?d:null==(t=g.find((function(n){return n.props.default})))?void 0:t.props.value)?e:null==(i=g[0])?void 0:i.props.value;if(null!==E&&!f.some((function(n){return n.value===E})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+E+'" but none of its children has the corresponding value. Available values are: '+f.map((function(n){return n.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var I=o(),b=I.tabGroupChoices,P=I.setTabGroupChoices,S=(0,s.useState)(E),A=S[0],w=S[1],C=[],D=(0,l.o5)().blockElementScrollPositionUntilNextRender;if(null!=_){var R=b[_];null!=R&&R!==A&&f.some((function(n){return n.value===R}))&&w(R)}var y=function(n){var e=n.currentTarget,t=C.indexOf(e),a=f[t].value;a!==A&&(D(e),w(a),null!=_&&P(_,a))},U=function(n){var e,t=null;switch(n.key){case"ArrowRight":var a=C.indexOf(n.currentTarget)+1;t=C[a]||C[0];break;case"ArrowLeft":var s=C.indexOf(n.currentTarget)-1;t=C[s]||C[C.length-1]}null==(e=t)||e.focus()};return s.createElement("div",{className:"tabs-container"},s.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,u.Z)("tabs",{"tabs--block":c},m)},f.map((function(n){var e=n.value,t=n.label,i=n.attributes;return s.createElement("li",(0,a.Z)({role:"tab",tabIndex:A===e?0:-1,"aria-selected":A===e,key:e,ref:function(n){return C.push(n)},onKeyDown:U,onFocus:y,onClick:y},i,{className:(0,u.Z)("tabs__item",p,null==i?void 0:i.className,{"tabs__item--active":A===e})}),null!=t?t:e)}))),r?(0,s.cloneElement)(g.filter((function(n){return n.props.value===A}))[0],{className:"margin-vert--md"}):s.createElement("div",{className:"margin-vert--md"},g.map((function(n,e){return(0,s.cloneElement)(n,{key:e,hidden:n.props.value!==A})}))))}function d(n){var e=(0,i.Z)();return s.createElement(c,(0,a.Z)({key:String(e)},n))}},97375:function(n,e,t){t.r(e),t.d(e,{contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return p},metadata:function(){return d},toc:function(){return h}});var a=t(87462),s=t(63366),i=(t(67294),t(3905)),r=t(26396),o=t(58215),l=t(19055),u=["components"],p={description:"Select a subset of your data based on useful filters.",sidebar_position:2},c="Filter",d={unversionedId:"api-guide/search/legacy-search/filter",id:"api-guide/search/legacy-search/filter",title:"Filter",description:"Select a subset of your data based on useful filters.",source:"@site/docs/api-guide/search/legacy-search/filter.md",sourceDirName:"api-guide/search/legacy-search",slug:"/api-guide/search/legacy-search/filter",permalink:"/api-guide/search/legacy-search/filter",tags:[],version:"current",sidebarPosition:2,frontMatter:{description:"Select a subset of your data based on useful filters.",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Combine or Negate",permalink:"/api-guide/search/legacy-search/combine-or-negate"},next:{title:"Rank",permalink:"/api-guide/search/legacy-search/rank"}},h=[{value:"By Custom Metadata",id:"by-custom-metadata",children:[],level:2},{value:"By Geo Location",id:"by-geo-location",children:[{value:"Add Inputs With Longitude and Latitude Points",id:"add-inputs-with-longitude-and-latitude-points",children:[],level:3},{value:"Perform a Search With One Geo Point and Radius in Kilometers",id:"perform-a-search-with-one-geo-point-and-radius-in-kilometers",children:[],level:3},{value:"Perform a Search With Two Geo Points",id:"perform-a-search-with-two-geo-points",children:[],level:3}],level:2}],_={toc:h};function m(n){var e=n.components,t=(0,s.Z)(n,u);return(0,i.kt)("wrapper",(0,a.Z)({},_,t,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"filter"},"Filter"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Select a subset of your data based on useful filters")),(0,i.kt)("hr",null),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"The initialization code used in the following example is outlined in detail on the ",(0,i.kt)("a",{parentName:"p",href:"https://docs.clarifai.com/api-guide/api-overview/api-clients/#client-installation-instructions"},"client installation page.")))),(0,i.kt)("h2",{id:"by-custom-metadata"},"By Custom Metadata"),(0,i.kt)("p",null,"After you have added inputs with custom metadata, you can search by that metadata."),(0,i.kt)("p",null,"Below is an example of searching over custom metadata. You can exact match any ",(0,i.kt)("inlineCode",{parentName:"p"},"key"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"value")," pair no matter how nested it is. "),(0,i.kt)("p",null,"For example, if the metadata on an input is:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'{\n  "keyname": "value1",\n  "somelist": [1,2,3],\n  "somenesting": {\n     "keyname2":"value2",\n     "list2":[4,5]\n   }\n}\n')),(0,i.kt)("p",null,"Then the following searches will find this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'{\n  "keyname": "value1"\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'{\n  "somelist": [1,2,3]\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'{\n  "somelist": [1,2]\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'{\n  "somenesting": {"keyname2":"value2"}\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'{\n  "somenesting": {"list2":[5]}\n}\n')),(0,i.kt)("p",null,"How to perform searches:"),(0,i.kt)(r.Z,{mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"grpc_python",label:"gRPC Python",mdxType:"TabItem"},(0,i.kt)(l.Z,{className:"language-python",mdxType:"CodeBlock"},"################################################################\n# In this section, we set the user authentication and app ID. \n# Change these strings to run your own example.\n################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\nfrom google.protobuf.struct_pb2 import Struct\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID) # The userDataObject is required when using a PAT\n\nsearch_metadata = Struct()\nsearch_metadata.update({\"type\": \"animal\"})\n\npost_searches_response = stub.PostSearches(\n    service_pb2.PostSearchesRequest(\n        user_app_id=userDataObject,\n        query=resources_pb2.Query(\n            ands=[\n                resources_pb2.And(\n                    input=resources_pb2.Input(\n                        data=resources_pb2.Data(\n                            metadata=search_metadata\n                        )\n                    )\n                )\n            ]\n        )\n    ),\n    metadata=metadata\n)\n\nif post_searches_response.status.code != status_code_pb2.SUCCESS:\n    print(post_searches_response.status)\n    raise Exception(\"Post searches failed, status: \" + post_searches_response.status.description)\n\nprint(\"Found inputs:\")\nfor hit in post_searches_response.hits:\n    print(\"\\tScore %.2f for %s\" % (hit.score, hit.input.id))    ")),(0,i.kt)(o.Z,{value:"grpc_nodejs",label:"gRPC NodeJS",mdxType:"TabItem"},(0,i.kt)(l.Z,{className:"language-javascript",mdxType:"CodeBlock"},'//index.js file\n\n///////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication and app ID. \n// Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PostSearches(\n    {\n        user_app_id: {\n            user_id: USER_ID,\n            app_id: APP_ID\n        },\n        query: {\n            ands: [\n                {\n                    input: {\n                        data: {\n                            metadata: {\n                                "type": "animal"\n                            }\n                        }\n                    }\n                }\n            ]\n        }\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post searches failed, status: " + response.status.description);\n        }\n\n        console.log("Found inputs:");\n        for (const hit of response.hits) {\n            console.log("\\tScore " + hit.score + " for " + hit.input.id);\n        }\n    }\n);\n')),(0,i.kt)(o.Z,{value:"grpc_java",label:"gRPC Java",mdxType:"TabItem"},(0,i.kt)(l.Z,{className:"language-java",mdxType:"CodeBlock"},'package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.StatusCode;\nimport com.google.protobuf.Struct;\nimport com.google.protobuf.Value;\n\npublic class ClarifaiExample {\n\n    ///////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication and app ID. \n    // Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiSearchResponse postSearchesResponse = stub.postSearches(\n            PostSearchesRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .setQuery(\n                Query.newBuilder().addAnds(\n                    And.newBuilder().setInput(\n                        Input.newBuilder().setData(\n                            Data.newBuilder().setMetadata(\n                                Struct.newBuilder()\n                                .putFields("type", Value.newBuilder().setStringValue("animal").build())\n                            )\n                        )\n                    )\n                )\n            )\n            .build()\n        );\n\n        if (postSearchesResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post searches failed, status: " + postSearchesResponse.getStatus());\n        }\n\n        System.out.println("Found inputs " + postSearchesResponse.getHitsCount() + ":");\n        for (Hit hit: postSearchesResponse.getHitsList()) {\n            System.out.printf("\\tScore %.2f for %s\\n", hit.getScore(), hit.getInput().getId());\n        }\n\n    }\n\n}')),(0,i.kt)(o.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST \\\n  -H "Authorization: Key {api-key}" \\\n  -H "Content-Type: application/json" \\\n  -d \'\n  {\n    "query": {\n      "ands": [\n        {\n          "input":{\n            "data": {\n              "metadata": {\n                "type": "animal"\n              }\n            }\n          }\n        }\n      ]\n    }\n  }\'\\\n  https://api.clarifai.com/v2/searches\n')))),(0,i.kt)("h2",{id:"by-geo-location"},"By Geo Location"),(0,i.kt)("p",null,"Search by geo location allows you to restrict your search results to a bounding box based on longitude and latitude points. There are two ways you can provide longitude/latitude points. You can provide one point and a radius or you can provide two points."),(0,i.kt)("p",null,"It is important to note that a search by geo location acts as a filter and returns results ranked by any other provided search criteria, whether that is a visual search, concept search, or something else. If no other criteria is provided, results will return in the order the inputs were created, NOT by their distance to center of the search area."),(0,i.kt)("p",null,'If you are providing one point and a radius, the radius can be in "mile", "kilometer", "degree", or "radian", marked by keywords ',(0,i.kt)("inlineCode",{parentName:"p"},"withinMiles"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"withinKilometers"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"withinDegrees"),", or ",(0,i.kt)("inlineCode",{parentName:"p"},"withinRadians")," respectively."),(0,i.kt)("p",null,"If you are providing two points, a box will be drawn from the uppermost point to the lowermost point, and the leftmost point to the rightmost point."),(0,i.kt)("p",null,"Before you perform a search by geo location, make sure you have added inputs with longitude and latitude points."),(0,i.kt)("h3",{id:"add-inputs-with-longitude-and-latitude-points"},"Add Inputs With Longitude and Latitude Points"),(0,i.kt)("p",null,"Provide a geo point to an input. The geo point is a JSON object consisting of a longitude and a latitude in GPS coordinate system ","(","SRID 4326",")",". There can be at most one single geo point associated with each input."),(0,i.kt)(r.Z,{mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"grpc_python",label:"gRPC Python",mdxType:"TabItem"},(0,i.kt)(l.Z,{className:"language-python",mdxType:"CodeBlock"},"##################################################################################\n# In this section, we set the user authentication, app ID, and the input details \n# we want to add. Change these strings to run your own example.\n##################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to add your own input with longitude and latitude points\nIMAGE_URL = 'https://samples.clarifai.com/dog.tiff'\nLONGITUDE = -30.0\nLATITUDE = 40.0\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID) # The userDataObject is required when using a PAT\n\npost_inputs_response = stub.PostInputs(\n    service_pb2.PostInputsRequest(\n        user_app_id=userDataObject,\n        inputs=[\n            resources_pb2.Input(\n                data=resources_pb2.Data(\n                    image=resources_pb2.Image(\n                        url=IMAGE_URL,\n                        allow_duplicate_url=True\n                    ),\n                    geo=resources_pb2.Geo(\n                        geo_point=resources_pb2.GeoPoint(\n                            longitude=LONGITUDE,\n                            latitude=LATITUDE,\n                        )\n                    )\n                )\n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif post_inputs_response.status.code != status_code_pb2.SUCCESS:\n    print(post_inputs_response.status)\n    raise Exception(\"Post inputs failed, status: \" + post_inputs_response.status.description)\n    \n")),(0,i.kt)(o.Z,{value:"grpc_nodejs",label:"gRPC NodeJS",mdxType:"TabItem"},(0,i.kt)(l.Z,{className:"language-javascript",mdxType:"CodeBlock"},"//index.js file\n\n////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the input details \n// we want to add. Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = 'YOUR_USER_ID_HERE';\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\nconst PAT = 'YOUR_PAT_HERE';\nconst APP_ID = 'YOUR_APP_ID_HERE';\n// Change these to add your own input with longitude and latitude points\nconst IMAGE_URL = 'https://samples.clarifai.com/dog.tiff';\nconst LONGITUDE = -30.0;\nconst LATITUDE = 40.0;\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require(\"clarifai-nodejs-grpc\");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set(\"authorization\", \"Key \" + PAT);\n\nstub.PostInputs(\n    {\n        user_app_id: {\n            user_id: USER_ID,\n            app_id: APP_ID\n        },\n        inputs: [\n            {\n                data: {\n                    image: { url: IMAGE_URL, allow_duplicate_url: true },\n                    geo: {\n                        geo_point: {\n                            longitude: LONGITUDE,\n                            latitude: LATITUDE\n                        }\n                    }\n                }\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error(\"Post inputs failed, status: \" + response.status.description);\n        }\n    }\n);\n")),(0,i.kt)(o.Z,{value:"grpc_java",label:"gRPC Java",mdxType:"TabItem"},(0,i.kt)(l.Z,{className:"language-java",mdxType:"CodeBlock"},'package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    ////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the input details \n    // we want to add. Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\t\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to add your own input with longitude and latitude points\n    static final String IMAGE_URL = "https://samples.clarifai.com/dog.tiff";\n    static final float LONGITUDE = -30.0f;\n    static final float LATITUDE = 40.0f;\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiInputResponse postInputsResponse = stub.postInputs(\n            PostInputsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .addInputs(\n                Input.newBuilder().setData(\n                    Data.newBuilder()\n                    .setImage(\n                        Image.newBuilder()\n                        .setUrl(IMAGE_URL)\n                        .setAllowDuplicateUrl(true)\n                    )\n                    .setGeo(\n                        Geo.newBuilder().setGeoPoint(\n                            GeoPoint.newBuilder()\n                            .setLongitude(LONGITUDE)\n                            .setLatitude(LATITUDE)\n                        )\n                    )\n                )\n            ).build()\n        );\n\n        if (postInputsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post inputs failed, status: " + postInputsResponse.getStatus());\n        }\n\n    }\n\n}')),(0,i.kt)(o.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'\n  {\n    "inputs": [\n      {\n        "data": {\n          "image": {\n            "url": "https://samples.clarifai.com/dog.tiff",\n            "allow_duplicate_url": true\n          },\n          "geo": {\n            "geo_point": {\n              "longitude": -30,\n              "latitude": 40\n            }\n          }\n        }\n      }\n    ]\n  }\'\\\n  https://api.clarifai.com/v2/inputs\n')))),(0,i.kt)("h3",{id:"perform-a-search-with-one-geo-point-and-radius-in-kilometers"},"Perform a Search With One Geo Point and Radius in Kilometers"),(0,i.kt)(r.Z,{mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"grpc_python",label:"gRPC Python",mdxType:"TabItem"},(0,i.kt)(l.Z,{className:"language-python",mdxType:"CodeBlock"},"#####################################################################################\n# In this section, we set the user authentication, app ID, and details of the point \n# we want to perform a search with. Change these strings to run your own example.\n#####################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to perform your own search\nLONGITUDE = -29.0\nLATITUDE = 40.0\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID) # The userDataObject is required when using a PAT\n\npost_searches_response = stub.PostSearches(\n    service_pb2.PostSearchesRequest(\n        user_app_id=userDataObject,\n        query=resources_pb2.Query(\n            ands=[\n                resources_pb2.And(\n                    input=resources_pb2.Input(\n                        data=resources_pb2.Data(\n                            geo=resources_pb2.Geo(\n                                geo_point=resources_pb2.GeoPoint(\n                                    longitude=LONGITUDE,\n                                    latitude=LATITUDE,\n                                ),\n                                geo_limit=resources_pb2.GeoLimit(\n                                    type=\"withinKilometers\",\n                                    value=150.0\n                                )\n                            )\n                        )\n                    )\n                )\n            ]\n        )\n    ),\n    metadata=metadata\n)\n\nif post_searches_response.status.code != status_code_pb2.SUCCESS:\n    print(post_searches_response)\n    raise Exception(\"Post searches failed, status: \" + post_searches_response.status.description)\n\nprint(\"Found inputs:\")\nfor hit in post_searches_response.hits:\n    print(\"\\tScore %.2f for %s\" % (hit.score, hit.input.id))\n")),(0,i.kt)(o.Z,{value:"grpc_nodejs",label:"gRPC NodeJS",mdxType:"TabItem"},(0,i.kt)(l.Z,{className:"language-javascript",mdxType:"CodeBlock"},'//index.js file\n\n///////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and details of the point \n// we want to perform a search with. Change these strings to run your own example.\n///////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n// Change these to perform your own search\nconst LONGITUDE = -29.0;\nconst LATITUDE = 40.0;\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PostSearches(\n    {\n        user_app_id: {\n            user_id: USER_ID,\n            app_id: APP_ID\n        },\n        query: {\n            ands: [\n                {\n                    input: {\n                        data: {\n                            geo: {\n                                geo_point: {\n                                    longitude: LONGITUDE,\n                                    latitude: LATITUDE\n                                },\n                                geo_limit: {\n                                    type: "withinKilometers",\n                                    value: 150.0\n                                }\n                            }\n                        }\n                    }\n                }\n            ]\n        }\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post searches failed, status: " + response.status.description);\n        }\n\n        console.log("Found inputs:");\n        for (const hit of response.hits) {\n            console.log("\\tScore " + hit.score + " for " + hit.input.id);\n        }\n    }\n);\n')),(0,i.kt)(o.Z,{value:"grpc_java",label:"gRPC Java",mdxType:"TabItem"},(0,i.kt)(l.Z,{className:"language-java",mdxType:"CodeBlock"},'package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    ///////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and details of the point \n    // we want to perform a search with. Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\t\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to perform your own search\n    static final float LONGITUDE = -29.0f;\n    static final float LATITUDE = 40.0f;\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiSearchResponse postSearchesResponse = stub.postSearches(\n            PostSearchesRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .setQuery(\n                Query.newBuilder().addAnds(\n                    And.newBuilder().setInput(\n                        Input.newBuilder().setData(\n                            Data.newBuilder().setGeo(\n                                Geo.newBuilder()\n                                .setGeoPoint(\n                                    GeoPoint.newBuilder()\n                                    .setLongitude(LONGITUDE)\n                                    .setLatitude(LATITUDE)\n                                )\n                                .setGeoLimit(\n                                    GeoLimit.newBuilder()\n                                    .setType("withinKilometers")\n                                    .setValue(150.0f)\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n            .build()\n        );\n\n        if (postSearchesResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post searches failed, status: " + postSearchesResponse.getStatus());\n        }\n\n        System.out.println("Found inputs " + postSearchesResponse.getHitsCount() + ":");\n        for (Hit hit : postSearchesResponse.getHitsList()) {\n            System.out.printf("\\tScore %.2f for %s\\n", hit.getScore(), hit.getInput().getId());\n        }\n\n    }\n\n}')),(0,i.kt)(o.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'\n  {\n    "query": {\n      "ands": [\n        {\n          "input": {\n            "data": {\n              "geo": {\n                "geo_point": {\n                  "longitude": -29.0,\n                  "latitude": 40.0\n                },\n                "geo_limit": {\n                  "type": "withinKilometers",\n                  "value": 150\n                }\n              }\n            }\n          }\n        }\n      ]\n    }\n  }\'\\\n  https://api.clarifai.com/v2/searches\n')))),(0,i.kt)("h3",{id:"perform-a-search-with-two-geo-points"},"Perform a Search With Two Geo Points"),(0,i.kt)(r.Z,{mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"grpc_python",label:"gRPC Python",mdxType:"TabItem"},(0,i.kt)(l.Z,{className:"language-python",mdxType:"CodeBlock"},"#####################################################################################\n# In this section, we set the user authentication, app ID, and details of the points \n# we want to perform a search with. Change these strings to run your own example.\n#####################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to perform your own search\nLONGITUDE_1 = -31.0\nLATITUDE_1 = 42.0\nLONGITUDE_2 = -29.0\nLATITUDE_2 = 39.0\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID) # The userDataObject is required when using a PAT\n\npost_searches_response = stub.PostSearches(\n    service_pb2.PostSearchesRequest(\n        user_app_id=userDataObject,\n        query=resources_pb2.Query(\n            ands=[\n                resources_pb2.And(\n                    input=resources_pb2.Input(\n                        data=resources_pb2.Data(\n                            geo=resources_pb2.Geo(\n                                geo_box=[\n                                    resources_pb2.GeoBoxedPoint(\n                                        geo_point=resources_pb2.GeoPoint(\n                                            longitude=LONGITUDE_1,\n                                            latitude=LATITUDE_1,\n                                        ),\n                                    ),\n                                    resources_pb2.GeoBoxedPoint(\n                                        geo_point=resources_pb2.GeoPoint(\n                                            longitude=LONGITUDE_2,\n                                            latitude=LATITUDE_2,\n                                        ),\n                                    ),\n                                ]\n                            )\n                        )\n                    )\n                )\n            ]\n        )\n    ),\n    metadata=metadata\n)\n\nif post_searches_response.status.code != status_code_pb2.SUCCESS:\n    print(post_searches_response.status)\n    raise Exception(\"Post searches failed, status: \" + post_searches_response.status.description)\n\nprint(\"Found inputs:\")\nfor hit in post_searches_response.hits:\n    print(\"\\tScore %.2f for %s\" % (hit.score, hit.input.id))\n")),(0,i.kt)(o.Z,{value:"grpc_nodejs",label:"gRPC NodeJS",mdxType:"TabItem"},(0,i.kt)(l.Z,{className:"language-javascript",mdxType:"CodeBlock"},'//index.js file\n\n///////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and details of the points \n// we want to perform a search with. Change these strings to run your own example.\n///////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n// Change these to perform your own search\nconst LONGITUDE_1 = -31.0;\nconst LATITUDE_1 = 42.0;\nconst LONGITUDE_2 = -29.0;\nconst LATITUDE_2 = 39.0;\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PostSearches(\n    {\n        user_app_id: {\n            user_id: USER_ID,\n            app_id: APP_ID\n        },\n        query: {\n            ands: [\n                {\n                    input: {\n                        data: {\n                            geo: {\n                                geo_box: [\n                                    {\n                                        geo_point: {\n                                            longitude: LONGITUDE_1,\n                                            latitude: LATITUDE_1\n                                        }\n                                    },\n                                    {\n                                        geo_point: {\n                                            longitude: LONGITUDE_2,\n                                            latitude: LATITUDE_2\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                }\n            ]\n        }\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post searches failed, status: " + response.status.description);\n        }\n\n        console.log("Found inputs:");\n        for (const hit of response.hits) {\n            console.log("\\tScore " + hit.score + " for " + hit.input.id);\n        }\n    }\n);\n')),(0,i.kt)(o.Z,{value:"grpc_java",label:"gRPC Java",mdxType:"TabItem"},(0,i.kt)(l.Z,{className:"language-java",mdxType:"CodeBlock"},'package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    ///////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and details of the points \n    // we want to perform a search with. Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\t\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to perform your own search\n    static final float LONGITUDE_1 = -31.0f;\n    static final float LATITUDE_1 = 42.0f;\n    static final float LONGITUDE_2 = -29.0f;\n    static final float LATITUDE_2 = 39.0f;\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiSearchResponse postSearchesResponse = stub.postSearches(\n            PostSearchesRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .setQuery(\n                Query.newBuilder().addAnds(\n                    And.newBuilder().setInput(\n                        Input.newBuilder().setData(\n                            Data.newBuilder().setGeo(\n                                Geo.newBuilder()\n                                .addGeoBox(\n                                    GeoBoxedPoint.newBuilder().setGeoPoint(\n                                        GeoPoint.newBuilder()\n                                        .setLongitude(LONGITUDE_1)\n                                        .setLatitude(LATITUDE_1)\n                                    )\n                                )\n                                .addGeoBox(\n                                    GeoBoxedPoint.newBuilder().setGeoPoint(\n                                        GeoPoint.newBuilder()\n                                        .setLongitude(LONGITUDE_2)\n                                        .setLatitude(LATITUDE_2)\n                                    ).build()\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n            .build()\n        );\n\n        if (postSearchesResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post searches failed, status: " + postSearchesResponse.getStatus());\n        }\n\n        System.out.println("Found inputs " + postSearchesResponse.getHitsCount() + ":");\n        for (Hit hit : postSearchesResponse.getHitsList()) {\n            System.out.printf("\\tScore %.2f for %s\\n", hit.getScore(), hit.getInput().getId());\n        }\n\n    }\n\n}')),(0,i.kt)(o.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'\n  {\n    "query": {\n      "ands": [\n        {\n          "input": {\n            "data": {\n              "geo": {\n                "geo_box": [\n                  {\n                    "geo_point": {\n                      "latitude": 42,\n                      "longitude": -31\n                    }\n                  },\n                  {\n                    "geo_point": {\n                      "latitude": 39,\n                      "longitude": -29\n                    }\n                  }\n                ]\n              }\n            }\n          }\n        }\n      ]\n    }\n  }\'\\\n  https://api.clarifai.com/v2/searches\n')))))}m.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[3594],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return h}});var a=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var u=a.createContext({}),l=function(e){var n=a.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=l(e.components);return a.createElement(u.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,u=e.parentName,c=r(e,["components","mdxType","originalType","parentName"]),d=l(t),h=o,m=d["".concat(u,".").concat(h)]||d[h]||p[h]||i;return t?a.createElement(m,s(s({ref:n},c),{},{components:t})):a.createElement(m,s({ref:n},c))}));function h(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,s=new Array(i);s[0]=d;var r={};for(var u in n)hasOwnProperty.call(n,u)&&(r[u]=n[u]);r.originalType=e,r.mdxType="string"==typeof e?e:o,s[1]=r;for(var l=2;l<i;l++)s[l]=t[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},8215:function(e,n,t){var a=t(7294);n.Z=function(e){var n=e.children,t=e.hidden,o=e.className;return a.createElement("div",{role:"tabpanel",hidden:t,className:o},n)}},6396:function(e,n,t){t.d(n,{Z:function(){return d}});var a=t(7462),o=t(7294),i=t(2389),s=t(9443);var r=function(){var e=(0,o.useContext)(s.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},u=t(3616),l=t(6010),c="tabItem_vU9c";function p(e){var n,t,i,s=e.lazy,p=e.block,d=e.defaultValue,h=e.values,m=e.groupId,f=e.className,g=o.Children.map(e.children,(function(e){if((0,o.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),b=null!=h?h:g.map((function(e){var n=e.props;return{value:n.value,label:n.label,attributes:n.attributes}})),v=(0,u.lx)(b,(function(e,n){return e.value===n.value}));if(v.length>0)throw new Error('Docusaurus error: Duplicate values "'+v.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var _=null===d?d:null!=(n=null!=d?d:null==(t=g.find((function(e){return e.props.default})))?void 0:t.props.value)?n:null==(i=g[0])?void 0:i.props.value;if(null!==_&&!b.some((function(e){return e.value===_})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+_+'" but none of its children has the corresponding value. Available values are: '+b.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var w=r(),y=w.tabGroupChoices,O=w.setTabGroupChoices,C=(0,o.useState)(_),T=C[0],I=C[1],S=[],k=(0,u.o5)().blockElementScrollPositionUntilNextRender;if(null!=m){var j=y[m];null!=j&&j!==T&&b.some((function(e){return e.value===j}))&&I(j)}var P=function(e){var n=e.currentTarget,t=S.indexOf(n),a=b[t].value;a!==T&&(k(n),I(a),null!=m&&O(m,a))},E=function(e){var n,t=null;switch(e.key){case"ArrowRight":var a=S.indexOf(e.currentTarget)+1;t=S[a]||S[0];break;case"ArrowLeft":var o=S.indexOf(e.currentTarget)-1;t=S[o]||S[S.length-1]}null==(n=t)||n.focus()};return o.createElement("div",{className:"tabs-container"},o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":p},f)},b.map((function(e){var n=e.value,t=e.label,i=e.attributes;return o.createElement("li",(0,a.Z)({role:"tab",tabIndex:T===n?0:-1,"aria-selected":T===n,key:n,ref:function(e){return S.push(e)},onKeyDown:E,onFocus:P,onClick:P},i,{className:(0,l.Z)("tabs__item",c,null==i?void 0:i.className,{"tabs__item--active":T===n})}),null!=t?t:n)}))),s?(0,o.cloneElement)(g.filter((function(e){return e.props.value===T}))[0],{className:"margin-vert--md"}):o.createElement("div",{className:"margin-vert--md"},g.map((function(e,n){return(0,o.cloneElement)(e,{key:n,hidden:e.props.value!==T})}))))}function d(e){var n=(0,i.Z)();return o.createElement(p,(0,a.Z)({key:String(n)},e))}},9765:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return l},contentTitle:function(){return c},metadata:function(){return p},toc:function(){return d},default:function(){return m}});var a=t(7462),o=t(3366),i=(t(7294),t(3905)),s=t(6396),r=t(8215),u=["components"],l={description:"Multilingual predictions.",sidebar_position:5},c="Multilingual Classification",p={unversionedId:"api-guide/predict/multilingual-classification",id:"api-guide/predict/multilingual-classification",title:"Multilingual Classification",description:"Multilingual predictions.",source:"@site/docs/api-guide/predict/multilingual-classification.md",sourceDirName:"api-guide/predict",slug:"/api-guide/predict/multilingual-classification",permalink:"/docs-new/api-guide/predict/multilingual-classification",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/api-guide/predict/multilingual-classification.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{description:"Multilingual predictions.",sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Prediction Parameters",permalink:"/docs-new/api-guide/predict/prediction-parameters"},next:{title:"Creating and Managing Concepts",permalink:"/docs-new/api-guide/concepts/"}},d=[{value:"Example Predict API Request",id:"example-predict-api-request",children:[],level:2},{value:"Example Search By Tag API Request",id:"example-search-by-tag-api-request",children:[],level:2}],h={toc:d};function m(e){var n=e.components,t=(0,o.Z)(e,u);return(0,i.kt)("wrapper",(0,a.Z)({},h,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"multilingual-classification"},"Multilingual Classification"),(0,i.kt)("p",null,"The Clarifai API supports ",(0,i.kt)("a",{parentName:"p",href:"/docs-new/api-guide/concepts/languages"},"many languages in addition to English"),". When making a ",(0,i.kt)("a",{parentName:"p",href:"./"},"predict api request"),", you can pass in the language you would like the concepts returned in. When you create a new Application, you must specify a default language which will be the language of the returned concepts if not specified in the predict request."),(0,i.kt)("h2",{id:"example-predict-api-request"},"Example Predict API Request"),(0,i.kt)("p",null,"You can predict concepts in a language other than the Application's default, by explicitly passing in the language. Here is how you predict concepts in Chinese:"),(0,i.kt)(s.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'# Insert here the initialization code as outlined on this page:\n# https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\npost_model_outputs_response = stub.PostModelOutputs(\n    service_pb2.PostModelOutputsRequest(\n        user_app_id=userDataObject,  # The userDataObject is created in the overview and is required when using a PAT\n        model_id="aaa03c23b3724a16a56b629203edc62c",  # This is model ID of the publicly available General model.\n        inputs=[\n            resources_pb2.Input(\n                data=resources_pb2.Data(\n                    image=resources_pb2.Image(\n                        url="https://samples.clarifai.com/metro-north.jpg"\n                    )\n                )\n            )\n        ],\n        model=resources_pb2.Model(\n            output_info=resources_pb2.OutputInfo(\n                output_config=resources_pb2.OutputConfig(\n                    language="zh"  # Chinese\n                )\n            )\n        )\n    ),\n    metadata=metadata\n)\n\nif post_model_outputs_response.status.code != status_code_pb2.SUCCESS:\n    print(post_model_outputs_response.status)\n    raise Exception("Post model outputs failed, status: " + post_model_outputs_response.status.description)\n\n# Since we have one input, one output will exist here.\noutput = post_model_outputs_response.outputs[0]\n\nprint("Predicted concepts:")\nfor concept in output.data.concepts:\n    print("\\t%s %.2f" % (concept.name, concept.value))\n'))),(0,i.kt)(r.Z,{value:"php",label:"PHP",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n# Insert here the initialization code as outlined on this page:\n# https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\n///////////////////////////////////////////////////////////////////////////////\n// Specifying the Request Data\n///////////////////////////////////////////////////////////////////////////////\n//\n// In the Clarifai platform an image is defined by a special Image object.\n// There are several ways in which an Image object can be populated including\n// by url and image bytes (base64).\n//\n$image = new Image([\n    'url' => 'https://samples.clarifai.com/dog2.jpeg'\n]);\n\n//\n// After an Image object is created, a Data object is constructed around it.\n// The Data object offers a container that contains additional image independent\n// metadata.  In this particular use case, no other metadata is needed to be\n// specified.\n//\n$data = new Data([\n    'image' => $image\n]);\n\n//\n// The Data object is then wrapped in an Input object in order to meet the\n// API specification.  Additional fields are available to populate in the Input\n// object, but for the purposes of this example we can send in just the\n// Data object.\n//\n$input = new Input([\n    'data' => $data\n]);\n\n///////////////////////////////////////////////////////////////////////////////\n// Specifying Output Configuration \n///////////////////////////////////////////////////////////////////////////////\n//\n// Output configuration can be specified by the OutputConfig object.\n//\n$outputConfig = new OutputConfig([\n    'language' => 'zh' // Chinese\n])\n\n//\n// The OutputInfo object is a wrapper around the OutputConfig object\n// \n$outputInfo = new OutputInfo([\n    'output_config' => $outputConfig\n])\n\n//\n// The model object is a wrapper around the OutputInfo object.  This is the\n// final part needed to define an output configuration.\n//\n$model = new Model([\n    'output_info' => $outputInfo\n]);\n\n///////////////////////////////////////////////////////////////////////////////\n// Creating the request object \n///////////////////////////////////////////////////////////////////////////////\n//\n// Finally, the request object itself is created.  This object carries the request\n// along with the request status and other metadata related to the request itself.\n// In this example we populate:\n//    - the `user_app_id` field with the UserAppIDSet constructed above\n//    - the `model_id` field with the ID of the model we are referencing\n//    - the `inputs` field with an array of input objects constructed above \n//    - the `model` field with the output configuration specified above\n//\n$request = new PostModelOutputsRequest([\n    'user_app_id' => $userDataObject, // This is defined above\n    'model_id' => 'aaa03c23b3724a16a56b629203edc62c',  // This is the ID of the publicly available General model.\n    'inputs' => [$input],\n    'model' => $model\n]);\n\n///////////////////////////////////////////////////////////////////////////////\n// Making the RPC Call\n///////////////////////////////////////////////////////////////////////////////\n//\n// Once the request object is constructed, we can call the actual request to the\n// Clarifai platform.  This uses the opened gRPC client channel to communicate the\n// request and then wait for the response.\n//\n[$response, $status] = $client->PostModelOutputs(\n    $request,\n    $metadata\n)->wait();\n\n///////////////////////////////////////////////////////////////////////////////\n// Handling the Response\n///////////////////////////////////////////////////////////////////////////////\n//\n// The response is returned and the first thing we do is check the status of it.\n// A successful response will have a status code of 0, otherwise there is some \n// reported error.\n//\nif ($status->code !== 0) throw new Exception(\"Error: {$status->details}\");\n\n//\n// In addition to the RPC response status, there is a Clarifai API status that\n// reports if the operationo was a success or failure (not just that the commuunication)\n// was successful.\n//\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    throw new Exception(\"Failure response: \" . $response->getStatus()->getDescription() . \" \" .\n        $response->getStatus()->getDetails());\n}\n\n//\n// The output of a successful call can be used in many ways.  In this example,\n// we loop through all of the predicted concepts and print them out along with\n// their numerical prediction value (confidence).\n//\necho \"Predicted concepts:\\n\";\nforeach ($response->getOutputs()[0]->getData()->getConcepts() as $concept) {\n    echo $concept->getName() . \": \" . number_format($concept->getValue(), 2) . \"\\n\";\n}\n?>\n"))),(0,i.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nMultiOutputResponse postModelOutputsResponse = stub.postModelOutputs(\n    PostModelOutputsRequest.newBuilder()\n        .setModelId("aaa03c23b3724a16a56b629203edc62c")  // This is model ID of the publicly available General model.\n        .addInputs(\n            Input.newBuilder().setData(\n                Data.newBuilder().setImage(\n                    Image.newBuilder().setUrl("https://samples.clarifai.com/metro-north.jpg")\n                )\n            )\n        )\n        .setModel(\n            Model.newBuilder().setOutputInfo(\n                OutputInfo.newBuilder().setOutputConfig(\n                    OutputConfig.newBuilder().setLanguage("zh")  // Chinese\n                )\n            )\n        )\n        .build()\n);\n\nif (postModelOutputsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n  throw new RuntimeException("Post model outputs failed, status: " + postModelOutputsResponse.getStatus());\n}\n\n// Since we have one input, one output will exist here.\nOutput output = postModelOutputsResponse.getOutputs(0);\n\nSystem.out.println("Predicted concepts:");\nfor (Concept concept : output.getData().getConceptsList()) {\n    System.out.printf("%s %.2f%n", concept.getName(), concept.getValue());\n}\n'))),(0,i.kt)(r.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nstub.PostModelOutputs(\n    {\n        model_id: "aaa03c23b3724a16a56b629203edc62c",\n        inputs: [\n            {data: {image: {url: "https://samples.clarifai.com/metro-north.jpg"}}}\n        ],\n        model: {output_info: {output_config: {language: "zh"}}}\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post model outputs failed, status: " + response.status.description);\n        }\n\n        // Since we have one input, one output will exist here.\n        const output = response.outputs[0];\n\n        console.log("Predicted concepts:");\n        for (const concept of output.data.concepts) {\n            console.log(concept.name + " " + concept.value);\n        }\n    }\n);\n'))),(0,i.kt)(r.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'\n  {\n  "inputs": [\n    {\n      "data": {\n        "image": {\n          "url": "https://samples.clarifai.com/metro-north.jpg"\n        }\n      }\n    }\n  ],\n  "model":{\n    "output_info":{\n      "output_config":{\n        "language":"zh"\n      }\n    }\n  }\n}\'\\\n  https://api.clarifai.com/v2/models/aaa03c23b3724a16a56b629203edc62c/outputs\n\n# Above is model ID of the publicly available General model.\n'))),(0,i.kt)(r.Z,{value:"js_rest",label:"Javascript (REST)",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'const raw = JSON.stringify({\n    "user_app_id": {\n        "user_id": "{YOUR_USER_ID}",\n        "app_id": "{YOUR_APP_ID}"\n    },\n  "inputs": [\n    {\n      "data": {\n        "image": {\n          "url": "https://samples.clarifai.com/metro-north.jpg"\n        }\n      }\n    }\n  ],\n  "model":{\n    "output_info":{\n      "output_config":{\n        "language":"zh"\n      }\n    }\n  }\n});\n\nconst requestOptions = {\n  method: \'POST\',\n  headers: {\n    \'Accept\': \'application/json\',\n    \'Authorization\': \'Key {YOUR_PERSONAL_TOKEN}\'\n  },\n  body: raw\n};\n\n// NOTE: MODEL_VERSION_ID is optional, you can also call prediction with the MODEL_ID only\n// https://api.clarifai.com/v2/models/{YOUR_MODEL_ID}/outputs\n// this will default to the latest version_id\n\nfetch("https://api.clarifai.com/v2/models/{YOUR_MODEL_ID}/versions/{MODEL_VERSION_ID}/outputs", requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log(\'error\', error));\n')))),(0,i.kt)(s.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"response_json",label:"Response JSON",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'{\n  "status": {\n    "code": 10000,\n    "description": "Ok"\n  },\n  "outputs": [\n    {\n      "id": "b9f3c12f1534440fa984dc463e491780",\n      "status": {\n        "code": 10000,\n        "description": "Ok"\n      },\n      "created_at": "2017-01-31T20:59:27Z",\n      "model": {\n        "name": "general-v1.3",\n        "id": "aaa03c23b3724a16a56b629203edc62c",\n        "created_at": "2016-03-09T17:11:39Z",\n        "app_id": null,\n        "output_info": {\n          "message": "Show output_info with: GET /models/{model_id}/output_info",\n          "type": "concept"\n        },\n        "model_version": {\n          "id": "aa9ca48295b37401f8af92ad1af0d91d",\n          "created_at": "2016-07-13T01:19:12Z",\n          "status": {\n            "code": 21100,\n            "description": "Model trained successfully"\n          }\n        }\n      },\n      "input": {\n        "id": "b9f3c12f1534440fa984dc463e491780",\n        "data": {\n          "image": {\n            "url": "https://samples.clarifai.com/metro-north.jpg"\n          }\n        }\n      },\n      "data": {\n        "concepts": [\n          {\n            "id": "ai_HLmqFqBf",\n            "name": "\u94c1\u8def\u5217\u8f66",\n            "app_id": null,\n            "value": 0.9989112\n          },\n          {\n            "id": "ai_fvlBqXZR",\n            "name": "\u94c1\u8def",\n            "app_id": null,\n            "value": 0.9975532\n          },\n          {\n            "id": "ai_Xxjc3MhT",\n            "name": "\u8fd0\u8f93\u7cfb\u7edf",\n            "app_id": null,\n            "value": 0.9959158\n          },\n          {\n            "id": "ai_6kTjGfF6",\n            "name": "\u7ad9",\n            "app_id": null,\n            "value": 0.992573\n          },\n          {\n            "id": "ai_RRXLczch",\n            "name": "\u706b\u8f66",\n            "app_id": null,\n            "value": 0.992556\n          },\n          {\n            "id": "ai_VRmbGVWh",\n            "name": "\u65c5\u6e38",\n            "app_id": null,\n            "value": 0.98789215\n          },\n          {\n            "id": "ai_SHNDcmJ3",\n            "name": "\u5730\u94c1",\n            "app_id": null,\n            "value": 0.9816359\n          },\n          {\n            "id": "ai_jlb9q33b",\n            "name": "\u901a\u52e4",\n            "app_id": null,\n            "value": 0.9712483\n          },\n          {\n            "id": "ai_46lGZ4Gm",\n            "name": "\u94c1\u8def",\n            "app_id": null,\n            "value": 0.9690325\n          },\n          {\n            "id": "ai_tr0MBp64",\n            "name": "\u4ea4\u901a",\n            "app_id": null,\n            "value": 0.9687052\n          },\n          {\n            "id": "ai_l4WckcJN",\n            "name": "\u6a21\u7173",\n            "app_id": null,\n            "value": 0.9667078\n          },\n          {\n            "id": "ai_2gkfMDsM",\n            "name": "\u5e73\u53f0",\n            "app_id": null,\n            "value": 0.9624243\n          },\n          {\n            "id": "ai_CpFBRWzD",\n            "name": "\u57ce\u5e02\u7684",\n            "app_id": null,\n            "value": 0.960752\n          },\n          {\n            "id": "ai_786Zr311",\n            "name": "\u6c92\u6709\u4eba",\n            "app_id": null,\n            "value": 0.95864904\n          },\n          {\n            "id": "ai_6lhccv44",\n            "name": "\u5546\u4e1a",\n            "app_id": null,\n            "value": 0.95720303\n          },\n          {\n            "id": "ai_971KsJkn",\n            "name": "\u8dd1\u9053",\n            "app_id": null,\n            "value": 0.9494642\n          },\n          {\n            "id": "ai_WBQfVV0p",\n            "name": "\u57ce\u5e02",\n            "app_id": null,\n            "value": 0.94089437\n          },\n          {\n            "id": "ai_dSCKh8xv",\n            "name": "\u5feb\u901f\u7684",\n            "app_id": null,\n            "value": 0.9399334\n          },\n          {\n            "id": "ai_TZ3C79C6",\n            "name": "\u9a6c\u8def",\n            "app_id": null,\n            "value": 0.93121606\n          },\n          {\n            "id": "ai_VSVscs9k",\n            "name": "\u7ec8\u70b9\u7ad9",\n            "app_id": null,\n            "value": 0.9230834\n          }\n        ]\n      }\n    }\n  ]\n}\n')))),(0,i.kt)("h2",{id:"example-search-by-tag-api-request"},"Example Search By Tag API Request"),(0,i.kt)("p",null,"You can search for concepts in other languages even if the default language of your application is English. When you add inputs to your application, concepts are predicted for every language. Here is an example of searching for '\u4eba' which is simplified Chinese for 'people'."),(0,i.kt)(s.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'# Insert here the initialization code as outlined on this page:\n# https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\npost_concepts_searches_response = stub.PostConceptsSearches(\n    service_pb2.PostConceptsSearchesRequest(\n        user_app_id=userDataObject,  # The userDataObject is created in the overview and is required when using a PAT\n        concept_query=resources_pb2.ConceptQuery(\n            name="\u4eba",\n            language="zh"\n        )\n    ),\n    metadata=metadata\n)\n\nif post_model_outputs_response.status.code != status_code_pb2.SUCCESS:\n    print(post_model_outputs_response.status)\n    raise Exception("Post model outputs failed, status: " + post_model_outputs_response.status.description)\n\nprint("Found concepts:")\nfor concept in post_concepts_searches_response.concepts:\n    print("\\t%s %.2f" % (concept.name, concept.value))\n'))),(0,i.kt)(r.Z,{value:"php",label:"PHP",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},'<?php\n# Insert here the initialization code as outlined on this page:\n# https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\n\n///////////////////////////////////////////////////////////////////////////////\n// Specifying Concept Search Parameters \n///////////////////////////////////////////////////////////////////////////////\n//\n// The ConceptQuery object contains the concept restrictions for the search. \n//\n$conceptQuery = new ConceptQuery([\n    \'name\' => "\u4eba",\n    \'language\' => "zh"\n])\n\n///////////////////////////////////////////////////////////////////////////////\n// Creating the request object \n///////////////////////////////////////////////////////////////////////////////\n//\n// Finally, the request object itself is created.  This object carries the request\n// along with the request status and other metadata related to the request itself.\n// In this example we populate:\n//    - the `user_app_id` field with the UserAppIDSet constructed above\n//    - the `concept_query` field contains the search restrictions above\n//\n$request = new PostConceptsSearches([\n    \'user_app_id\' => $userDataObject, // This is defined above\n    \'concept_query\' => $conceptQuery\n]);\n\n///////////////////////////////////////////////////////////////////////////////\n// Making the RPC Call\n///////////////////////////////////////////////////////////////////////////////\n//\n// Once the request object is constructed, we can call the actual request to the\n// Clarifai platform.  This uses the opened gRPC client channel to communicate the\n// request and then wait for the response.\n//\n[$response, $status] = $client->PostConceptsSearches(\n    $request,\n    $metadata\n)->wait();\n\n///////////////////////////////////////////////////////////////////////////////\n// Handling the Response\n///////////////////////////////////////////////////////////////////////////////\n//\n// The response is returned and the first thing we do is check the status of it.\n// A successful response will have a status code of 0, otherwise there is some \n// reported error.\n//\nif ($status->code !== 0) throw new Exception("Error: {$status->details}");\n\n//\n// In addition to the RPC response status, there is a Clarifai API status that\n// reports if the operationo was a success or failure (not just that the commuunication)\n// was successful.\n//\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription() . " " .\n        $response->getStatus()->getDetails());\n}\n\n//\n// The output of a successful call can be used in many ways.  In this example,\n// we loop through all of the predicted concepts and print them out along with\n// their numerical prediction value (confidence).\n//\necho "Predicted concepts:\\n";\nforeach ($response->getConcepts() as $concept) {\n    echo $concept->getName() . ": " . number_format($concept->getValue(), 2) . "\\n";\n}\n?>\n'))),(0,i.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nMultiConceptResponse postConceptsSearchesResponse = stub.postConceptsSearches(\n    PostConceptsSearchesRequest.newBuilder()\n        .setConceptQuery(\n            ConceptQuery.newBuilder()\n                .setName("\u4eba")\n                .setLanguage("zh")\n        )\n        .build()\n);\n\nif (postConceptsSearchesResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n  throw new RuntimeException("Post concepts searches failed, status: " + postConceptsSearchesResponse.getStatus());\n}\n\nSystem.out.println("Found concepts:");\nfor (Concept concept : postConceptsSearchesResponse.getConceptsList()) {\n    System.out.printf("\\t%s %.2f%n", concept.getName(), concept.getValue());\n}\n'))),(0,i.kt)(r.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nstub.PostConceptsSearches(\n    {\n        concept_query: {name: "\u4eba", language: "zh"}\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post concepts searches failed, status: " + response.status.description);\n        }\n\n        console.log("Found concepts:");\n        for (const concept of response.concepts) {\n            console.log("\\t" + concept.name + " " + concept.value);\n        }\n    }\n);\n'))),(0,i.kt)(r.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'\n  {\n    "query": {\n      "ands": [\n        {\n          "output": {\n            "data": {\n              "concepts": [\n                {\n                  "name": "\u4eba"\n                }\n              ]\n            }\n          }\n        }\n      ],\n      "language": "zh"\n    }\n  }\'\\\n  https://api.clarifai.com/v2/searches\n'))),(0,i.kt)(r.Z,{value:"js_rest",label:"Javascript (REST)",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'const raw = JSON.stringify({\n    "user_app_id": {\n        "user_id": "{YOUR_USER_ID}",\n        "app_id": "{YOUR_APP_ID}"\n    },\n  "query": {\n    "ands": [\n      {\n        "output": {\n          "data": {\n            "concepts": [\n              {\n                "name": "\u4eba"\n              }\n            ]\n          }\n        }\n      }\n    ],\n    "language": "zh"\n  }\n});\n\nconst requestOptions = {\n  method: \'POST\',\n  headers: {\n    \'Accept\': \'application/json\',\n    \'Authorization\': \'Key {YOUR_PERSONAL_TOKEN}\'\n  },\n  body: raw\n};\n\nfetch("https://api.clarifai.com/v2/searches", requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log(\'error\', error));\n')))))}m.isMDXComponent=!0}}]);
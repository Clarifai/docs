"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[7753],{85162:(e,n,t)=>{t.d(n,{Z:()=>r});var o=t(67294),a=t(86010);const s={tabItem:"tabItem_Ymn6"};function r(e){let{children:n,hidden:t,className:r}=e;return o.createElement("div",{role:"tabpanel",className:(0,a.Z)(s.tabItem,r),hidden:t},n)}},74866:(e,n,t)=>{t.d(n,{Z:()=>g});var o=t(87462),a=t(67294),s=t(86010),r=t(12466),i=t(16550),l=t(91980),c=t(67392),u=t(50012);function p(e){return function(e){return a.Children.map(e,(e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:n,label:t,attributes:o,default:a}}=e;return{value:n,label:t,attributes:o,default:a}}))}function d(e){const{values:n,children:t}=e;return(0,a.useMemo)((()=>{const e=n??p(t);return function(e){const n=(0,c.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function _(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function f(e){let{queryString:n=!1,groupId:t}=e;const o=(0,i.k6)(),s=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,l._X)(s),(0,a.useCallback)((e=>{if(!s)return;const n=new URLSearchParams(o.location.search);n.set(s,e),o.replace({...o.location,search:n.toString()})}),[s,o])]}function w(e){const{defaultValue:n,queryString:t=!1,groupId:o}=e,s=d(e),[r,i]=(0,a.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!_({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const o=t.find((e=>e.default))??t[0];if(!o)throw new Error("Unexpected error: 0 tabValues");return o.value}({defaultValue:n,tabValues:s}))),[l,c]=f({queryString:t,groupId:o}),[p,w]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[o,s]=(0,u.Nk)(t);return[o,(0,a.useCallback)((e=>{t&&s.set(e)}),[t,s])]}({groupId:o}),h=(()=>{const e=l??p;return _({value:e,tabValues:s})?e:null})();(0,a.useLayoutEffect)((()=>{h&&i(h)}),[h]);return{selectedValue:r,selectValue:(0,a.useCallback)((e=>{if(!_({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);i(e),c(e),w(e)}),[c,w,s]),tabValues:s}}var h=t(72389);const E={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function I(e){let{className:n,block:t,selectedValue:i,selectValue:l,tabValues:c}=e;const u=[],{blockElementScrollPositionUntilNextRender:p}=(0,r.o5)(),d=e=>{const n=e.currentTarget,t=u.indexOf(n),o=c[t].value;o!==i&&(p(n),l(o))},_=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const t=u.indexOf(e.currentTarget)+1;n=u[t]??u[0];break}case"ArrowLeft":{const t=u.indexOf(e.currentTarget)-1;n=u[t]??u[u.length-1];break}}n?.focus()};return a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":t},n)},c.map((e=>{let{value:n,label:t,attributes:r}=e;return a.createElement("li",(0,o.Z)({role:"tab",tabIndex:i===n?0:-1,"aria-selected":i===n,key:n,ref:e=>u.push(e),onKeyDown:_,onClick:d},r,{className:(0,s.Z)("tabs__item",E.tabItem,r?.className,{"tabs__item--active":i===n})}),t??n)})))}function m(e){let{lazy:n,children:t,selectedValue:o}=e;const s=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=s.find((e=>e.props.value===o));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return a.createElement("div",{className:"margin-top--md"},s.map(((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==o}))))}function D(e){const n=w(e);return a.createElement("div",{className:(0,s.Z)("tabs-container",E.tabList)},a.createElement(I,(0,o.Z)({},e,n)),a.createElement(m,(0,o.Z)({},e,n)))}function g(e){const n=(0,h.Z)();return a.createElement(D,(0,o.Z)({key:String(n)},e))}},43220:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>z,contentTitle:()=>K,default:()=>J,frontMatter:()=>Z,metadata:()=>q,toc:()=>$});var o=t(87462),a=(t(67294),t(3905)),s=t(74866),r=t(85162),i=t(90814);const l="########################################################################################\n# In this section, we set the user authentication, app ID, and the details of the new\n# custom workflow we want to create. Change these strings to run your own example.\n########################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to create your own custom workflow\nWORKFLOW_ID = 'my-custom-workflow'\nNODE_ID_1 = 'optical-character-recognizer'\nMODEL_ID_1 = 'ocr-scene-english-paddleocr'\nMODEL_VERSION_ID_1 = '40dbb2c9cde44a27af226782e7157006'\n\nNODE_ID_2 = 'text-to-text'\nMODEL_ID_2 = 'text-translation-english-spanish'\nMODEL_VERSION_ID_2 = '643f30558de34013aff72b0e21f244f5'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID) # The userDataObject is required when using a PAT\n\npost_workflows_response = stub.PostWorkflows(\n    service_pb2.PostWorkflowsRequest(\n      user_app_id=userDataObject,  \n      workflows=[\n        resources_pb2.Workflow(\n          id=WORKFLOW_ID,\n          nodes=[\n            resources_pb2.WorkflowNode(\n              id=NODE_ID_1,\n              model=resources_pb2.Model(\n                id=MODEL_ID_1,\n                model_version=resources_pb2.ModelVersion(\n                  id=MODEL_VERSION_ID_1\n                )\n              )\n            ),\n            resources_pb2.WorkflowNode(\n              id=NODE_ID_2,\n              model=resources_pb2.Model(\n                id=MODEL_ID_2,\n                model_version=resources_pb2.ModelVersion(\n                  id=MODEL_VERSION_ID_2\n                )\n              ),\n              node_inputs=[\n                resources_pb2.NodeInput(node_id=NODE_ID_1)\n                ]\n            ),\n          ]\n        )\n      ]\n    ),\n    metadata=metadata\n)               \n\nif post_workflows_response.status.code != status_code_pb2.SUCCESS:\n    print(post_workflows_response.status)\n    raise Exception(\"Post workflows failed, status: \" + post_workflows_response.status.description) \n\n",c="#############################################################################\n# In this section, we set the user authentication, app ID, workflow ID, and  \n# image URL. Change these strings to run your own example.\n##############################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to make your own predictions\nWORKFLOW_ID = 'my-custom-workflow'\nIMAGE_URL = 'https://samples.clarifai.com/featured-models/ocr-woman-holding-sold-sign.jpg'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID) # The userDataObject is required when using a PAT\n\npost_workflow_results_response = stub.PostWorkflowResults(\n    service_pb2.PostWorkflowResultsRequest(\n        user_app_id=userDataObject,  \n        workflow_id=WORKFLOW_ID,\n        inputs=[\n            resources_pb2.Input(\n                data=resources_pb2.Data(\n                    image=resources_pb2.Image(\n                        url=IMAGE_URL\n                    )\n                )\n            )\n        ]\n    ),\n    metadata=metadata\n)\nif post_workflow_results_response.status.code != status_code_pb2.SUCCESS:\n    print(post_workflow_results_response.status)\n    raise Exception(\"Post workflow results failed, status: \" + post_workflow_results_response.status.description)\n\n# We'll get one WorkflowResult for each input we used above. Because of one input, we have here one WorkflowResult\nresults = post_workflow_results_response.results[0]\n\n# Each model we have in the workflow will produce its output\nfor output in results.outputs:\n    model = output.model    \n    print(\"Output for the model: `%s`\" % model.id)\n    i = 0\n    while(i < len(output.data.regions)):\n        print(output.data.regions[i].data.text.raw)\n        i += 1        \n",u="###################################################################\n# In this section, we set the user authentication and app ID.  \n# Change these strings to run your own example.\n###################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID) # The userDataObject is required when using a PAT\n\nlist_workflows_response = stub.ListWorkflows(\n    service_pb2.ListWorkflowsRequest(\n        user_app_id=userDataObject  \n    ),\n    metadata=metadata\n)\n\nif list_workflows_response.status.code != status_code_pb2.SUCCESS:\n    print(list_workflows_response.status)\n    raise Exception(\"List workflows failed, status: \" + list_workflows_response.status.description)\n\nfor workflow in list_workflows_response.workflows:\n    print(f\"The workflow {workflow.id} consists of these models:\")\n    for workflow_node in workflow.nodes:\n        model = workflow_node.model\n        print(model.id)\n    print()",p="############################################################################\n# In this section, we set the user authentication, app ID, and workflow ID. \n# Change these strings to run your own example.\n#############################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change this to your own workflow ID \nWORKFLOW_ID = 'my-custom-workflow'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID) # The userDataObject is required when using a PAT\n\nget_workflow_response = stub.GetWorkflow(\n    service_pb2.GetWorkflowRequest(\n        user_app_id=userDataObject,  \n        workflow_id=WORKFLOW_ID\n    ),\n    metadata=metadata\n)\n\nif get_workflow_response.status.code != status_code_pb2.SUCCESS:\n    print(get_workflow_response.status)\n    raise Exception(\"Get workflow failed, status: \" + get_workflow_response.status.description)\n\nworkflow = get_workflow_response.workflow\nprint(f\"The workflow consists of these models:\")\nfor workflow_node in workflow.nodes:\n    model = workflow_node.model\n    print(model.id)",d="###################################################################################\n# In this section, we set the user authentication, app ID, and the details of the \n# workflow we want to update. Change these strings to run your own example.\n###################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to update your own workflow \nWORKFLOW_ID = 'my-custom-workflow'\nNODE_ID_1 = 'audio-to-text'\nMODEL_ID_1 = 'asr-wav2vec2-base-960h-english'\nMODEL_VERSION_ID_1 = 'f4deae70a473492a8e2f9b7bb1dbee85'\n\nNODE_ID_2 = 'text-summarization'\nMODEL_ID_2 = 'text-summarization-english-distilbart-cnn-12-6'\nMODEL_VERSION_ID_2 = '8279cec2221a4b1d9db774470940aebd'\n\nNODE_ID_3 = 'english-to-french'\nMODEL_ID_3 = 'translation-english-to-french-text'\nMODEL_VERSION_ID_3 = 'c65a4a51c2b646fca5f0e4bf1ff200d7'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID) # The userDataObject is required when using a PAT\n\npatch_workflows_response = stub.PatchWorkflows(\n    service_pb2.PatchWorkflowsRequest(\n      user_app_id=userDataObject,  \n      action=\"overwrite\",\n      workflows=[\n        resources_pb2.Workflow(\n          id=WORKFLOW_ID,\n          nodes=[\n            resources_pb2.WorkflowNode(\n              id=NODE_ID_1,\n              model=resources_pb2.Model(\n                id=MODEL_ID_1,\n                model_version=resources_pb2.ModelVersion(\n                  id=MODEL_VERSION_ID_1\n                )\n              )\n            ),\n            resources_pb2.WorkflowNode(\n              id=NODE_ID_2,\n              model=resources_pb2.Model(              \n                id=MODEL_ID_2,\n                model_version=resources_pb2.ModelVersion(\n                  id=MODEL_VERSION_ID_2\n                )\n              ),\n              node_inputs=[\n                  resources_pb2.NodeInput(node_id=NODE_ID_1) \n                  ]\n            ),\n            resources_pb2.WorkflowNode(\n              id=NODE_ID_3,\n              model=resources_pb2.Model(\n                id=MODEL_ID_3,\n                model_version=resources_pb2.ModelVersion(\n                  id=MODEL_VERSION_ID_3\n                )\n              ),\n              node_inputs=[\n                  resources_pb2.NodeInput(node_id=NODE_ID_2) \n                  ]\n            ),\n          ]\n        )\n      ]\n    ),\n    metadata=metadata\n)\n\nif patch_workflows_response.status.code != status_code_pb2.SUCCESS:\n    print(patch_workflows_response.status)\n    raise Exception(\"Patch workflows failed, status: \" + patch_workflows_response.status.description)",_="###################################################################################\n# In this section, we set the user authentication, app ID, and the ID of the \n# workflow we want to delete. Change these strings to run your own example.\n###################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change this to delete your own workflow \nWORKFLOW_ID = 'my-custom-workflow'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID) # The userDataObject is required when using a PAT\n\ndelete_workflow_response = stub.DeleteWorkflow(\n    service_pb2.DeleteWorkflowRequest(\n      user_app_id=userDataObject,  \n      workflow_id=WORKFLOW_ID\n    ),\n    metadata=metadata\n)\n\nif delete_workflow_response.status.code != status_code_pb2.SUCCESS:\n    print(delete_workflow_response.status)\n    raise Exception(\"Delete workflow failed, status: \" + delete_workflow_response.status.description)\n",f="###################################################################\n# In this section, we set the user authentication and app ID.\n# Change these strings to run your own example.\n###################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID) # The userDataObject is required when using a PAT\n\ndelete_workflows_response = stub.DeleteWorkflows(\n    service_pb2.DeleteWorkflowsRequest(\n      user_app_id=userDataObject,  \n      delete_all=True\n      # ids = ['workflow_id_1', 'workflow_id_2'] # Specify a list of workflow IDs to be deleted\n    \n    ),\n    metadata=metadata\n)\n\nif delete_workflows_response.status.code != status_code_pb2.SUCCESS:\n    print(delete_workflows_response.status)\n    raise Exception(\"Delete workflows failed, status: \" + delete_workflows_response.status.description)\n",w='\x3c!--index.html file--\x3e\n\n<script>\n    //////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the details of the new\n    // custom workflow we want to create. Change these strings to run your own example.\n    /////////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = \'YOUR_USER_ID_HERE\';\n    // Your PAT (Personal Access Token) can be found in the portal under Authentification\n    const PAT = \'YOUR_PAT_HERE\';\n    const APP_ID = \'YOUR_APP_ID_HERE\';\n    // Change these to create your own custom workflow\n    const WORKFLOW_ID = \'my-custom-workflow\';\n    const NODE_ID_1 = \'optical-character-recognizer\';\n    const MODEL_ID_1 = \'ocr-scene-english-paddleocr\';\n    const MODEL_VERSION_ID_1 = \'40dbb2c9cde44a27af226782e7157006\';\n\n    const NODE_ID_2 = \'text-to-text\';\n    const MODEL_ID_2 = \'text-translation-english-spanish\';\n    const MODEL_VERSION_ID_2 = \'643f30558de34013aff72b0e21f244f5\';\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////   \n\n    const raw = JSON.stringify({\n        "user_app_id": {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        "workflows": [{\n            "id": WORKFLOW_ID,\n            "nodes": [\n                {\n                    "id": NODE_ID_1,\n                    "model": {\n                        "id": MODEL_ID_1,\n                        "model_version": {\n                            "id": MODEL_VERSION_ID_1\n                        }\n                    }\n                },\n                {\n                    "id": NODE_ID_2,\n                    "model": {\n                        "id": MODEL_ID_2,\n                        "model_version": {\n                            "id": MODEL_VERSION_ID_2\n                        }\n                    },\n                        "node_inputs": [\n                            {\n                                "node_id": NODE_ID_1\n                            }\n                        ]\n                }\n            ]\n        }]\n    });\n\n    const requestOptions = {\n        method: \'POST\',\n        headers: {\n            \'Accept\': \'application/json\',\n            \'Authorization\': \'Key \' + PAT\n        },\n        body: raw\n    };\n\n    fetch(`https://api.clarifai.com/v2/workflows`, requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log(\'error\', error));\n\n<\/script>',h='\x3c!--index.html file--\x3e\n\n<script>\n  ///////////////////////////////////////////////////////////////////////////////////\n  // In this section, we set the user authentication, app ID, workflow ID, and\n  // image URL. Change these strings to run your own example.\n  ///////////////////////////////////////////////////////////////////////////////////\n\n  const USER_ID = "YOUR_USER_ID_HERE";\n  // Your PAT (Personal Access Token) can be found in the portal under Authentification\n  const PAT = "YOUR_PAT_HERE";\n  const APP_ID = "YOUR_APP_ID_HERE";\n  // Change these to make your own predictions\n  const WORKFLOW_ID = "my-custom-workflow";\n  const IMAGE_URL = "https://samples.clarifai.com/featured-models/ocr-woman-holding-sold-sign.jpg";\n\n  ///////////////////////////////////////////////////////////////////////////////////\n  // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n  /////////////////////////////////////////////////////////////////////////////////// \n\n  const raw = JSON.stringify({\n    "user_app_id": {\n      "user_id": USER_ID,\n      "app_id": APP_ID\n    },\n    "inputs": [\n      {\n        "data": {\n          "image": {\n            "url": IMAGE_URL\n          }\n        }\n      }\n    ]\n  });\n\n  const requestOptions = {\n    method: \'POST\',\n    headers: {\n      \'Accept\': \'application/json\',\n      \'Authorization\': \'Key \' + PAT\n    },\n    body: raw\n  };\n\n  fetch(`https://api.clarifai.com/v2/workflows/${WORKFLOW_ID}/results`, requestOptions)\n    .then(response => response.text())\n    .then(result => console.log(result))\n    .catch(error => console.log(\'error\', error));\n<\/script>',E='\x3c!--index.html file--\x3e\n\n<script>\n  ///////////////////////////////////////////////////////////////////////\n  // In this section, we set the user authentication and app ID.\n  // Change these strings to run your own example.\n  ///////////////////////////////////////////////////////////////////////\n\n  const USER_ID = "YOUR_USER_ID_HERE";\n  // Your PAT (Personal Access Token) can be found in the portal under Authentification\n  const PAT = "YOUR_PAT_HERE";\n  const APP_ID = "YOUR_APP_ID_HERE";\n\n  ///////////////////////////////////////////////////////////////////////////////////\n  // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n  ///////////////////////////////////////////////////////////////////////////////////\n\n  const requestOptions = {\n    method: "GET",\n    headers: {\n      "Accept": "application/json",\n      "Authorization": "Key " + PAT,\n    },\n  };\n\n  fetch(\n    `https://api.clarifai.com/v2/users/${USER_ID}/apps/${APP_ID}/workflows`,\n    requestOptions\n  )\n    .then((response) => response.text())\n    .then((result) => console.log(result))\n    .catch((error) => console.log("error", error));\n<\/script>\n',I='\x3c!--index.html file--\x3e\n\n<script>\n  ///////////////////////////////////////////////////////////////////////////////\n  // In this section, we set the user authentication, app ID, and workflow ID.\n  // Change these strings to run your own example.\n  //////////////////////////////////////////////////////////////////////////////\n\n  const USER_ID = "YOUR_USER_ID_HERE";\n  // Your PAT (Personal Access Token) can be found in the portal under Authentification\n  const PAT = "YOUR_PAT_HERE";\n  const APP_ID = "YOUR_APP_ID_HERE";\n  // Change this to your own workflow ID\n  const WORKFLOW_ID = "my-custom-workflow";\n\n  ///////////////////////////////////////////////////////////////////////////////////\n  // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n  ///////////////////////////////////////////////////////////////////////////////////\n\n  const requestOptions = {\n    method: "GET",\n    headers: {\n      "Accept": "application/json",\n      "Authorization": "Key " + PAT,\n    },\n  };\n\n  fetch(\n    `https://api.clarifai.com/v2/users/${USER_ID}/apps/${APP_ID}/workflows/${WORKFLOW_ID}`,\n    requestOptions\n  )\n    .then((response) => response.text())\n    .then((result) => console.log(result))\n    .catch((error) => console.log("error", error));\n<\/script>',m='\x3c!--index.html file--\x3e\n\n<script>\n  ///////////////////////////////////////////////////////////////////////////////////////\n  // In this section, we set the user authentication, app ID, and the details of the\n  // workflow we want to update. Change these strings to run your own example.\n  ///////////////////////////////////////////////////////////////////////////////////////\n\n  const USER_ID = \'YOUR_USER_ID_HERE\';\n  // Your PAT (Personal Access Token) can be found in the portal under Authentification\n  const PAT = \'YOUR_PAT_HERE\';\n  const APP_ID = \'YOUR_APP_ID_HERE\';\n  // Change these to update your own workflow\n  const WORKFLOW_ID = "my-custom-workflow";\n  const NODE_ID_1 = "audio-to-text";\n  const MODEL_ID_1 = "asr-wav2vec2-base-960h-english";\n  const MODEL_VERSION_ID_1 = "f4deae70a473492a8e2f9b7bb1dbee85";\n\n  const NODE_ID_2 = "text-summarization";\n  const MODEL_ID_2 = "text-summarization-english-distilbart-cnn-12-6";\n  const MODEL_VERSION_ID_2 = "8279cec2221a4b1d9db774470940aebd";\n\n  const NODE_ID_3 = "english-to-french";\n  const MODEL_ID_3 = "translation-english-to-french-text";\n  const MODEL_VERSION_ID_3 = "c65a4a51c2b646fca5f0e4bf1ff200d7";\n\n  ///////////////////////////////////////////////////////////////////////////////////\n  // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n  ///////////////////////////////////////////////////////////////////////////////////\n\n  const raw = JSON.stringify({\n    "user_app_id": {\n      "user_id": USER_ID,\n      "app_id": APP_ID\n    },\n    "action": "overwrite",\n    "workflows": [\n      {\n        "id": WORKFLOW_ID,\n        "nodes": [\n          {\n            "id": NODE_ID_1,\n            "model": {\n              "id": MODEL_ID_1,\n              "model_version": {\n                "id": MODEL_VERSION_ID_1\n              }\n            }\n          },\n          {\n            "id": NODE_ID_2,\n            "model": {\n              "id": MODEL_ID_2,\n              "model_version": {\n                "id": MODEL_VERSION_ID_2\n              }\n            },\n            "node_inputs": [\n                {\n                  "node_id": NODE_ID_1\n                }\n              ]\n          },\n          {\n            "id": NODE_ID_3,\n            "model": {\n              "id": MODEL_ID_3,\n              "model_version": {\n                "id": MODEL_VERSION_ID_3\n              }\n            },\n            "node_inputs": [\n                {\n                  "node_id": NODE_ID_2\n                }\n              ]\n          }\n        ]\n      }\n    ]\n  });\n\n  const requestOptions = {\n    method: "PATCH",\n    headers: {\n      "Accept": \'application/json\',\n      "Authorization": \'Key \' + PAT\n    },\n    body: raw\n  };\n\n  fetch(`https://api.clarifai.com/v2/workflows`, requestOptions)\n    .then(response => response.text())\n    .then(result => console.log(result))\n    .catch(error => console.log(\'error\', error));\n\n<\/script>',D='\x3c!--index.html file--\x3e\n\n<script>\n  ///////////////////////////////////////////////////////////////////////////////////\n  // In this section, we set the user authentication, app ID, and the ID of the\n  // workflow we want to delete. Change these strings to run your own example.\n  ///////////////////////////////////////////////////////////////////////////////////\n\n  // Your PAT (Personal Access Token) can be found in the portal under Authentification\n  const PAT = "YOUR_PAT_HERE";\n  const APP_ID = "YOUR_APP_ID_HERE";\n  // Change this to delete your own workflow\n  const WORKFLOW_ID = "my-custom-workflow";\n\n  ///////////////////////////////////////////////////////////////////////////////////\n  // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n  ///////////////////////////////////////////////////////////////////////////////////\n\n  const requestOptions = {\n    method: "DELETE",\n    headers: {\n      "Accept": "application/json",\n      "Authorization": "Key " + PAT,\n    },\n  };\n\n  fetch(\n    `https://api.clarifai.com/v2/users/me/apps/${APP_ID}/workflows/${WORKFLOW_ID}`,\n    requestOptions\n  )\n    .then((response) => response.text())\n    .then((result) => console.log(result))\n    .catch((error) => console.log("error", error));\n<\/script>',g='\x3c!--index.html file--\x3e\n\n<script>\n  /////////////////////////////////////////////////////////////////////\n  // In this section, we set the user authentication and app ID.\n  // Change these strings to run your own example.\n  /////////////////////////////////////////////////////////////////////\n\n  const USER_ID = "YOUR_USER_ID_HERE";\n  // Your PAT (Personal Access Token) can be found in the portal under Authentification\n  const PAT = "YOUR_PAT_HERE";\n  const APP_ID = "YOUR_APP_ID_HERE";\n\n  ///////////////////////////////////////////////////////////////////////////////////\n  // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n  ///////////////////////////////////////////////////////////////////////////////////\n\n  const raw = JSON.stringify({\n    "user_app_id": {\n      "user_id": USER_ID,\n      "app_id": APP_ID,\n    },\n    "delete_all": true,\n    //"ids": [\'workflow_id_1\', \'workflow_id_2\'] // Specify a list of workflow IDs to be deleted\n  });\n\n  const requestOptions = {\n    method: "DELETE",\n    headers: {\n      "Accept": "application/json",\n      "Authorization": "Key " + PAT,\n    },\n    body: raw,\n  };\n\n  fetch(`https://api.clarifai.com/v2/workflows`, requestOptions)\n    .then((response) => response.text())\n    .then((result) => console.log(result))\n    .catch((error) => console.log("error", error));\n<\/script>',O="//index.js file\n\n//////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the details of the new\n// custom workflow we want to create. Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = 'YOUR_USER_ID_HERE';\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\nconst PAT = 'YOUR_PAT_HERE';\nconst APP_ID = 'YOUR_APP_ID_HERE';\n// Change these to create your own custom workflow\nconst WORKFLOW_ID = 'my-custom-workflow';\nconst NODE_ID_1 = 'optical-character-recognizer';\nconst MODEL_ID_1 = 'ocr-scene-english-paddleocr';\nconst MODEL_VERSION_ID_1 = '40dbb2c9cde44a27af226782e7157006';\n\nconst NODE_ID_2 = 'text-to-text';\nconst MODEL_ID_2 = 'text-translation-english-spanish';\nconst MODEL_VERSION_ID_2 = '643f30558de34013aff72b0e21f244f5';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require(\"clarifai-nodejs-grpc\");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set(\"authorization\", \"Key \" + PAT);\n\nstub.PostWorkflows(\n    {\n        user_app_id: {\n            \"user_id\": USER_ID,\n            \"app_id\": APP_ID\n        },\n        workflows: [\n            {\n                id: WORKFLOW_ID,\n                nodes: [\n                    {\n                        id: NODE_ID_1,\n                        model: {\n                            id: MODEL_ID_1,\n                            model_version: {\n                                id: MODEL_VERSION_ID_1\n                            }\n                        }\n                    },\n                    {\n                        id: NODE_ID_2,\n                        model: {\n                            id: MODEL_ID_2,\n                            model_version: {\n                                id: MODEL_VERSION_ID_2\n                            }\n                        },\n                        node_inputs: [\n                            {\n                                node_id: NODE_ID_1 \n                            }\n                        ]\n                    }\n                ]\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error(\"Post workflows failed, status: \" + response.status.description);\n        }\n    }\n);",k='//index.js file\n\n///////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, workflow ID, and\n// image URL. Change these strings to run your own example.\n///////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\nconst PAT = "YOUR_PAT_HERE";\nconst APP_ID = "YOUR_APP_ID_HERE";\n// Change these to make your own predictions\nconst WORKFLOW_ID = "my-custom-workflow";\nconst IMAGE_URL = "https://samples.clarifai.com/featured-models/ocr-woman-holding-sold-sign.jpg";\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PostWorkflowResults(\n  {\n    user_app_id: {\n      "user_id": USER_ID,\n      "app_id": APP_ID,\n    },\n    workflow_id: WORKFLOW_ID,\n    inputs: [{ data: { image: { url: IMAGE_URL } } }],\n  },\n  metadata,\n  (err, response) => {\n    if (err) {\n      throw new Error(err);\n    }\n\n    if (response.status.code !== 10000) {\n      throw new Error(\n        "Post workflow results failed, status: " + response.status.description\n      );\n    }\n\n    // We\'ll get one WorkflowResult for each input we used above. Because of one input, we have here \n    // one WorkflowResult\n    const results = response.results[0];\n\n    // Each model we have in the workflow will produce its output.\n    for (const output of results.outputs) {\n      const model = output.model;\n      console.log("Output for the model: `" + model.id + "`");\n      let i = 0;\n      while(i < output.data.regions.length){\n        console.log(output.data.regions[i].data.text.raw);\n        i += 1; \n      }    \n    }\n  }\n);\n',R='//index.js file\n\n///////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication and app ID.\n// Change these strings to run your own example.\n///////////////////////////////////////////////////////////////////////\n\nconst USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\nconst PAT = "YOUR_PAT_HERE";\nconst APP_ID = "YOUR_APP_ID_HERE";\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.ListWorkflows(\n  {\n    user_app_id: {\n      "user_id": USER_ID,\n      "app_id": APP_ID\n    },\n  },\n  metadata,\n  (err, response) => {\n    if (err) {\n      throw new Error(err);\n    }\n\n    if (response.status.code !== 10000) {\n      throw new Error(\n        "List workflows failed, status: " + response.status.description\n      );\n    }\n\n    for (const workflow of response.workflows) {\n      console.log("The workflow " + workflow.id + " consists of these models:");\n      for (const workflowNode of workflow.nodes) {\n        const model = workflowNode.model;\n        console.log(model.id);\n      }\n      console.log();\n    }\n  }\n);\n',T='//index.js file\n\n///////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and workflow ID.\n// Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\nconst PAT = "YOUR_PAT_HERE";\nconst APP_ID = "YOUR_APP_ID_HERE";\n// Change this to your own workflow ID\nconst WORKFLOW_ID = "my-custom-workflow";\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.GetWorkflow(\n  {\n    user_app_id: {\n      "user_id": USER_ID,\n      "app_id": APP_ID,\n    },\n    workflow_id: WORKFLOW_ID,\n  },\n  metadata,\n  (err, response) => {\n    if (err) {\n      throw new Error(err);\n    }\n\n    if (response.status.code !== 10000) {\n      throw new Error(\n        "Get workflow failed, status: " + response.status.description\n      );\n    }\n\n    const workflow = response.workflow;\n\n    console.log("The workflow consists of these models:");\n    for (const workflowNode of workflow.nodes) {\n      const model = workflowNode.model;\n      console.log(model.id);\n    }\n  }\n);\n',b='//index.js file\n\n///////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the details of the\n// workflow we want to update. Change these strings to run your own example.\n///////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\nconst PAT = "YOUR_PAT_HERE";\nconst APP_ID = "YOUR_APP_ID_HERE";\n// Change these to update your own workflow\nconst WORKFLOW_ID = "my-custom-workflow";\nconst NODE_ID_1 = "audio-to-text";\nconst MODEL_ID_1 = "asr-wav2vec2-base-960h-english";\nconst MODEL_VERSION_ID_1 = "f4deae70a473492a8e2f9b7bb1dbee85";\n\nconst NODE_ID_2 = "text-summarization";\nconst MODEL_ID_2 = "text-summarization-english-distilbart-cnn-12-6";\nconst MODEL_VERSION_ID_2 = "8279cec2221a4b1d9db774470940aebd";\n\nconst NODE_ID_3 = "english-to-french";\nconst MODEL_ID_3 = "translation-english-to-french-text";\nconst MODEL_VERSION_ID_3 = "c65a4a51c2b646fca5f0e4bf1ff200d7";\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PatchWorkflows(\n  {\n    user_app_id: {\n      "user_id": USER_ID,\n      "app_id": APP_ID,\n    },\n    action: "overwrite",\n    workflows: [\n      {\n        id: WORKFLOW_ID,\n        nodes: [\n          {\n            id: NODE_ID_1,\n            model: {\n              id: MODEL_ID_1,\n              model_version: {\n                id: MODEL_VERSION_ID_1,\n              }\n            }\n          },\n          {\n            id: NODE_ID_2,\n            model: {\n              id: MODEL_ID_2,\n              model_version: {\n                id: MODEL_VERSION_ID_2\n              }\n            },\n            node_inputs: [\n                {\n                    node_id: NODE_ID_1 \n                }\n            ]\n          },\n          {\n            id: NODE_ID_3,\n            model: {\n              id: MODEL_ID_3,\n              model_version: {\n                id: MODEL_VERSION_ID_3\n              }\n            },\n            node_inputs: [\n                {\n                    node_id: NODE_ID_2\n                }\n            ]\n          }\n        ]\n      }\n    ]\n  },\n  metadata,\n  (err, response) => {\n    if (err) {\n      throw new Error(err);\n    }\n\n    if (response.status.code !== 10000) {\n      throw new Error(\n        "Patch workflows failed, status: " + response.status.description\n      );\n    }\n  }\n);\n',A='//index.js file\n\n//////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the ID of the\n// workflow we want to delete. Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\nconst PAT = "YOUR_PAT_HERE";\nconst APP_ID = "YOUR_APP_ID_HERE";\n// Change this to delete your own workflow\nconst WORKFLOW_ID = "my-custom-workflow";\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.DeleteWorkflow(\n  {\n    user_app_id: {\n      "user_id": USER_ID,\n      "app_id": APP_ID,\n    },\n    workflow_id: WORKFLOW_ID,\n  },\n  metadata,\n  (err, response) => {\n    if (err) {\n      throw new Error(err);\n    }\n\n    if (response.status.code !== 10000) {\n      throw new Error(\n        "Delete workflow failed, status: " + response.status.description\n      );\n    }\n  }\n);\n',S='//index.js file\n\n/////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication and app ID.\n// Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////\n\nconst USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\nconst PAT = "YOUR_PAT_HERE";\nconst APP_ID = "YOUR_APP_ID_HERE";\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.DeleteWorkflows(\n  {\n    user_app_id: {\n      "user_id": USER_ID,\n      "app_id": APP_ID,\n    },\n    delete_all: true\n    //ids: [\'workflow_id_1\', \'workflow_id_2\'] // Specify a list of workflow IDs to be deleted\n  },\n  metadata,\n  (err, response) => {\n    if (err) {\n      throw new Error(err);\n    }\n\n    if (response.status.code !== 10000) {\n      throw new Error(\n        "Delete workflows failed, status: " + response.status.description\n      );\n    }\n  }\n);\n',N='package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    //////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the details of the new\n    // custom workflow we want to create. Change these strings to run your own example.\n    /////////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to create your own custom workflow\n    static final String WORKFLOW_ID = "my-custom-workflow";\n    static final String NODE_ID_1 = "optical-character-recognizer";\n    static final String MODEL_ID_1 = "ocr-scene-english-paddleocr";\n    static final String MODEL_VERSION_ID_1 = "40dbb2c9cde44a27af226782e7157006";\n\n    static final String NODE_ID_2 = "text-to-text";\n    static final String MODEL_ID_2 = "text-translation-english-spanish";\n    static final String MODEL_VERSION_ID_2 = "643f30558de34013aff72b0e21f244f5";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiWorkflowResponse postWorkflowsResponse = stub.postWorkflows(\n            PostWorkflowsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .addWorkflows(\n                Workflow.newBuilder()\n                .setId(WORKFLOW_ID)\n                .addNodes(\n                    WorkflowNode.newBuilder()\n                    .setId(NODE_ID_1)\n                    .setModel(\n                        Model.newBuilder()\n                        .setId(MODEL_ID_1)\n                        .setModelVersion(ModelVersion.newBuilder().setId(MODEL_VERSION_ID_1))\n                    )\n                )\n                .addNodes(\n                    WorkflowNode.newBuilder()\n                    .setId(NODE_ID_2)\n                    .setModel(\n                        Model.newBuilder()\n                        .setId(MODEL_ID_2)\n                        .setModelVersion(ModelVersion.newBuilder().setId(MODEL_VERSION_ID_2))\n                    )\n                    .addNodeInputs(NodeInput.newBuilder().setNodeId(NODE_ID_1))\n                )\n            ).build()\n        );\n\n        if (postWorkflowsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post workflows failed, status: " + postWorkflowsResponse.getStatus());\n        }\n\n    }\n\n}',P='package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, workflow ID, and\n    // image URL. Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to make your own predictions\n    static final String WORKFLOW_ID = "my-custom-workflow";\n    static final String IMAGE_URL = "https://samples.clarifai.com/featured-models/ocr-woman-holding-sold-sign.jpg";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        PostWorkflowResultsResponse postWorkflowResultsResponse = stub.postWorkflowResults(\n            PostWorkflowResultsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .setWorkflowId(WORKFLOW_ID)\n            .addInputs(\n                Input.newBuilder().setData(\n                    Data.newBuilder().setImage(\n                        Image.newBuilder().setUrl(IMAGE_URL)\n                    )\n                )\n            )\n            .build()\n        );\n\n        if (postWorkflowResultsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post workflow results failed, status: " + postWorkflowResultsResponse.getStatus());\n        }\n\n        // We\'ll get one WorkflowResult for each input we used above. Because of one input, we have here\n        // one WorkflowResult\n        WorkflowResult results = postWorkflowResultsResponse.getResults(0);\n\n        // Each model we have in the workflow will produce its output\n        for (Output output: results.getOutputsList()) {\n            Model model = output.getModel();\n            System.out.println("Output for the model: `" + model.getId() + "`");            \n            int i = 0;\n            while(i < output.getData().getRegionsCount()) {\n            \tString modelOutput = output.getData().getRegionsList().get(i).getData().getText().getRaw();\n            \tSystem.out.println(modelOutput);            \n                i += 1;            \t\n            }\n        }\n\n    }\n\n}',C='package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    ///////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication and app ID.\n    // Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiWorkflowResponse listWorkflowsResponse = stub.listWorkflows(\n            ListWorkflowsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .build());\n\n        if (listWorkflowsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("List workflows failed, status: " + listWorkflowsResponse.getStatus());\n        }\n\n        for (Workflow workflow: listWorkflowsResponse.getWorkflowsList()) {\n            System.out.println("The workflow " + workflow.getId() + " consists of these models:");\n            for (WorkflowNode workflowNode: workflow.getNodesList()) {\n                Model model = workflowNode.getModel();\n                System.out.println(model.getId());\n            }\n            System.out.println();\n        }\n\n    }\n\n}',U='package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    ///////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and workflow ID.\n    // Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change this to your own workflow ID\n    static final String WORKFLOW_ID = "food-and-general";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        SingleWorkflowResponse getWorkflowResponse = stub.getWorkflow(\n            GetWorkflowRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .setWorkflowId(WORKFLOW_ID)\n            .build()\n        );\n\n        if (getWorkflowResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Get workflow failed, status: " + getWorkflowResponse.getStatus());\n        }\n\n        Workflow workflow = getWorkflowResponse.getWorkflow();\n\n        System.out.println("The workflow consists of these models:");\n        for (WorkflowNode workflowNode: workflow.getNodesList()) {\n            Model model = workflowNode.getModel();\n            System.out.println(model.getId());\n        }\n\n    }\n\n}',y='package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    ///////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the details of the\n    // workflow we want to update. Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to update your own workflow\n    static final String WORKFLOW_ID = "my-custom-workflow";\n    static final String NODE_ID_1 = "audio-to-text";\n    static final String MODEL_ID_1 = "asr-wav2vec2-base-960h-english";\n    static final String MODEL_VERSION_ID_1 = "f4deae70a473492a8e2f9b7bb1dbee85";\n\n    static final String NODE_ID_2 = "text-summarization";\n    static final String MODEL_ID_2 = "text-summarization-english-distilbart-cnn-12-6";\n    static final String MODEL_VERSION_ID_2 = "8279cec2221a4b1d9db774470940aebd";\n\n    static final String NODE_ID_3 = "english-to-french";\n    static final String MODEL_ID_3 = "translation-english-to-french-text";\n    static final String MODEL_VERSION_ID_3 = "c65a4a51c2b646fca5f0e4bf1ff200d7";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiWorkflowResponse patchWorkflowsResponse = stub.patchWorkflows(\n            PatchWorkflowsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .setAction("overwrite")\n            .addWorkflows(\n                Workflow.newBuilder()\n                .setId(WORKFLOW_ID)\n                .addNodes(\n                    WorkflowNode.newBuilder()\n                    .setId(NODE_ID_1)\n                    .setModel(\n                        Model.newBuilder()\n                        .setId(MODEL_ID_1)\n                        .setModelVersion(ModelVersion.newBuilder().setId(MODEL_VERSION_ID_1))\n                    )\n                )\n                .addNodes(\n                    WorkflowNode.newBuilder()\n                    .setId(NODE_ID_2)\n                    .setModel(\n                        Model.newBuilder()\n                        .setId(MODEL_ID_2)\n                        .setModelVersion(ModelVersion.newBuilder().setId(MODEL_VERSION_ID_2))\n                    )\n                    .addNodeInputs(NodeInput.newBuilder().setNodeId(NODE_ID_1))\n                )\n                .addNodes(\n                    WorkflowNode.newBuilder()\n                    .setId(NODE_ID_3)\n                    .setModel(\n                        Model.newBuilder()\n                        .setId(MODEL_ID_3)\n                        .setModelVersion(ModelVersion.newBuilder().setId(MODEL_VERSION_ID_3))\n                    )\n                    .addNodeInputs(NodeInput.newBuilder().setNodeId(NODE_ID_2))\n                )\n            ).build()\n        );\n\n        if (patchWorkflowsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Patch workflows failed, status: " + patchWorkflowsResponse.getStatus());\n        }\n\n    }\n\n}',L='package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.BaseResponse;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    //////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the ID of the\n    // workflow we want to delete. Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change this to delete your own workflow\n    static final String WORKFLOW_ID = "my-custom-workflow";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        BaseResponse deleteWorkflowResponse = stub.deleteWorkflow(\n            DeleteWorkflowRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .setWorkflowId(WORKFLOW_ID)\n            .build()\n        );\n\n        if (deleteWorkflowResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Delete workflow failed, status: " + deleteWorkflowResponse.getStatus());\n        }\n\n    }\n\n}',v='package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.BaseResponse;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    //////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication and app ID.\n    // Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        BaseResponse deleteWorkflowsResponse = stub.deleteWorkflows(\n            DeleteWorkflowsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .setDeleteAll(true)\n            .build()\n        );\n\n        if (deleteWorkflowsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Delete workflows failed, status: " + deleteWorkflowsResponse.getStatus());\n        }\n\n    }\n\n}',W="<?php\n\nrequire __DIR__ . '/vendor/autoload.php';\n\n/////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, workflow ID, and  \n// image URL. Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = 'YOUR_USER_ID_HERE';\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\n$PAT = 'YOUR_PAT_HERE';\n$APP_ID = 'YOUR_APP_ID_HERE';\n// Change these to make your own predictions\n$WORKFLOW_ID = 'my-custom-workflow';\n$IMAGE_URL = 'https://samples.clarifai.com/featured-models/ocr-woman-holding-sold-sign.jpg';\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\Data;\nuse Clarifai\\Api\\Image;\nuse Clarifai\\Api\\Input;\nuse Clarifai\\Api\\PostWorkflowResultsRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ['Authorization' => ['Key ' . $PAT ]];\n\n$userDataObject = new UserAppIDSet([\n    'user_id' => $USER_ID, \n    'app_id' => $APP_ID \n]);\n\n// Let's make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PostWorkflowResults(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new PostWorkflowResultsRequest([\n        'user_app_id' => $userDataObject,\n        'workflow_id' => $WORKFLOW_ID,          \n        'inputs' => [\n            new Input([ // The Input object wraps the Data object in order to meet the API specification                \n                'data' => new Data([ // The Data object is constructed around the Image object. It offers a container that has additional image independent\n                                    // metadata. In this particular use case, no other metadata is needed to be specified\n                    'image' => new Image([ // In the Clarifai platform, an image is defined by a special Image object\n                        'url' => $IMAGE_URL\n                    ])\n                ])\n            ])\n        ]\n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception(\"Error: {$status->details}\");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    throw new Exception(\"Failure response: \" . $response->getStatus()->getDescription() . \" \" .\n        $response->getStatus()->getDetails());\n}\n\n// We'll get one WorkflowResult for each input we used above. Because of one input, we have here one WorkflowResult\n$results = $response->getResults()[0];\n\n// Each model we have in the workflow will produce its output\nforeach ($results->getOutputs() as $output) {\n    $model = $output->getModel();\n    echo \"Output for the model: '\" . $model->getId() . \"'\" . \"`<br>\";\n    $i = 0;\n    while ($i < count($output->getData()->getRegions())) {\n        echo $output->getData()->getRegions()[$i]->getData()->getText()->getRaw() . \"`<br>\";\n        $i++;\n    }\n}\n\n?>",H='curl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/workflows" \\\n    -H "Content-Type: application/json" \\\n    -H "Authorization: Key YOUR_PAT_HERE" \\\n    --data-raw \'{\n      "workflows": [{\n        "id": "my-custom-workflow",\n        "nodes": [\n          {\n            "id": "optical-character-recognizer",\n            "model": {\n              "id": "ocr-scene-english-paddleocr",\n              "model_version": {\n                "id": "40dbb2c9cde44a27af226782e7157006"\n              }\n            }\n          },\n          {\n            "id": "text-to-text",\n            "model": {\n              "id": "text-translation-english-spanish",\n              "model_version": {\n                "id": "643f30558de34013aff72b0e21f244f5"\n              }\n            },\n              "node_inputs": [\n                {\n                  "node_id": "optical-character-recognizer"\n                }\n              ]\n          }\n        ]\n      }]\n    }\'',x='curl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/workflows/YOUR_WORKFLOW_ID_HERE/results" \\\n  -H "authorization: Key YOUR_PAT_HERE" \\\n  -H "content-type: application/json" \\\n  -d \'{\n    "inputs": [\n        {\n          "data": {\n            "image": {\n              "url": "https://samples.clarifai.com/featured-models/ocr-woman-holding-sold-sign.jpg"\n          }\n        }\n      }\n    ]\n}\'',Y='curl -X GET "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/workflows/" \\\n    -H "Content-Type: application/json" \\\n    -H "Authorization: Key YOUR_PAT_HERE"',M='curl -X GET "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/workflows/YOUR_WORKFLOW_ID_HERE" \\\n    -H "Content-Type: application/json" \\\n    -H "Authorization: Key YOUR_PAT_HERE"',B='curl -X PATCH "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/workflows/" \\\n    -H "Content-Type: application/json" \\\n    -H "Authorization: Key YOUR_PAT_HERE" \\\n    --data-raw \'{\n        "action": "overwrite",\n        "workflows": [\n            {\n                "id": "my-custom-workflow",\n                "nodes": [\n                    {\n                        "id": "audio-to-text",\n                        "model": {\n                            "id": "asr-wav2vec2-base-960h-english",\n                            "model_version": {\n                                "id": "f4deae70a473492a8e2f9b7bb1dbee85"\n                            }\n                        }\n                    },\n                    {\n                        "id": "text-summarization",\n                        "model": {\n                            "id": "text-summarization-english-distilbart-cnn-12-6",\n                            "model_version": {\n                                "id": "8279cec2221a4b1d9db774470940aebd"\n                            }\n                        },\n                        "node_inputs": [\n                            {\n                                "node_id": "audio-to-text"\n                            }\n                        ]                        \n                    },\n                    {\n                        "id": "english-to-french",\n                        "model": {\n                            "id": "translation-english-to-french-text",\n                            "model_version": {\n                                "id": "c65a4a51c2b646fca5f0e4bf1ff200d7"\n                            }\n                        },\n                        "node_inputs": [\n                            {\n                                "node_id": "text-summarization"\n                            }\n                        ] \n                    }\n                ]\n            }\n        ]\n    }\'',j='curl -X DELETE "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/workflows/YOUR_WORKFLOW_ID_HERE" \\\n    -H "Content-Type: application/json" \\\n    -H "Authorization: Key YOUR_PAT_HERE"',G='curl -X DELETE "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/workflows" \\\n    -H "Content-Type: application/json" \\\n    -H "Authorization: Key YOUR_PAT_HERE" \\\n    --data-raw \'{\n        "delete_all": true\n    }\'',V="Output for the model: `ocr-scene-english-paddleocr`\nSOLD\nWe can SELL YOURS too!\nOutput for the model: `text-translation-english-spanish`\nVENDIDO\n\xa1Nosotros tambi\xe9n podemos venderla!",Z={description:"Manage your Mesh Workflows.",sidebar_position:3},K="Setting Up Mesh Workflows",q={unversionedId:"api-guide/workflows/create-get-update-delete",id:"api-guide/workflows/create-get-update-delete",title:"Setting Up Mesh Workflows",description:"Manage your Mesh Workflows.",source:"@site/docs/api-guide/workflows/create-get-update-delete.md",sourceDirName:"api-guide/workflows",slug:"/api-guide/workflows/create-get-update-delete",permalink:"/api-guide/workflows/create-get-update-delete",draft:!1,editUrl:"https://github.com/Clarifai/docs/blob/main/docs/api-guide/workflows/create-get-update-delete.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{description:"Manage your Mesh Workflows.",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Input Nodes",permalink:"/api-guide/workflows/input_nodes"},next:{title:"Common Workflows",permalink:"/api-guide/workflows/common-workflows/"}},z={},$=[{value:"Create",id:"create",level:2},{value:"Workflow Predict",id:"workflow-predict",level:2},{value:"Get",id:"get",level:2},{value:"Get all Workflows in an App",id:"get-all-workflows-in-an-app",level:3},{value:"Get a Workflow by a Specific ID",id:"get-a-workflow-by-a-specific-id",level:3},{value:"Update",id:"update",level:2},{value:"Patch Workflow",id:"patch-workflow",level:3},{value:"Delete",id:"delete",level:2},{value:"Delete Workflow by ID",id:"delete-workflow-by-id",level:3},{value:"Delete all Workflows",id:"delete-all-workflows",level:3}],F={toc:$},X="wrapper";function J(e){let{components:n,...t}=e;return(0,a.kt)(X,(0,o.Z)({},F,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"setting-up-mesh-workflows"},"Setting Up Mesh Workflows"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Manage your Mesh Workflows")),(0,a.kt)("hr",null),(0,a.kt)("p",null,"Workflows is a useful Clarifai's feature that allows you to combine multiple models and carry out different operations. With workflows, you can create a powerful multi-model system that meets various use cases in a single API call\u2014instead of relying only on one model. "),(0,a.kt)("p",null,"You can use Clarifai's built-in models or your own custom models. "),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"The initialization code used in the following examples is outlined in detail on the ",(0,a.kt)("a",{parentName:"p",href:"https://docs.clarifai.com/api-guide/api-overview/api-clients/#client-installation-instructions"},"client installation page."))),(0,a.kt)("h2",{id:"create"},"Create"),(0,a.kt)("p",null,"In this example, we'll create a simple custom workflow that first extracts text from an image and then translates the extracted text to Spanish."),(0,a.kt)("p",null,"We'll connect the following two models to achieve our objective:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The ",(0,a.kt)("a",{parentName:"li",href:"https://clarifai.com/clarifai/main/models/ocr-scene-english-paddleocr"},"ocr-scene-english-paddleocr")," model, which detects and recognizes English texts in images;"),(0,a.kt)("li",{parentName:"ul"},"The ",(0,a.kt)("a",{parentName:"li",href:"https://clarifai.com/helsinkinlp/translation/models/text-translation-english-spanish"},"text-translation-english-spanish")," model, which translates texts from English to Spanish. ")),(0,a.kt)("p",null,"We'll specify the IDs of the models and their versions\u2014since a model can have several versions. "),(0,a.kt)(s.Z,{mdxType:"Tabs"},(0,a.kt)(r.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,a.kt)(i.Z,{className:"language-python",mdxType:"CodeBlock"},l)),(0,a.kt)(r.Z,{value:"js_rest",label:"JavaScript (REST)",mdxType:"TabItem"},(0,a.kt)(i.Z,{className:"language-javascript",mdxType:"CodeBlock"},w)),(0,a.kt)(r.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,a.kt)(i.Z,{className:"language-javascript",mdxType:"CodeBlock"},O)),(0,a.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)(i.Z,{className:"language-java",mdxType:"CodeBlock"},N)),(0,a.kt)(r.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,a.kt)(i.Z,{className:"language-bash",mdxType:"CodeBlock"},H))),(0,a.kt)("h2",{id:"workflow-predict"},"Workflow Predict"),(0,a.kt)("p",null,"After creating the workflow, let's now use it to extract texts from ",(0,a.kt)("a",{parentName:"p",href:"https://samples.clarifai.com/featured-models/ocr-woman-holding-sold-sign.jpg"},"this image")," and translate them into Spanish. "),(0,a.kt)("p",null,"The response will contain the predictions each model in the workflow returns for the input."),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"If you want to make a predict call with an external workflow that is outside the scope of your app, you need to use a PAT while specifying the ",(0,a.kt)("inlineCode",{parentName:"p"},"app_id")," and the ",(0,a.kt)("inlineCode",{parentName:"p"},"user_id")," associated with the workflow you want to use. ")),(0,a.kt)(s.Z,{mdxType:"Tabs"},(0,a.kt)(r.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,a.kt)(i.Z,{className:"language-python",mdxType:"CodeBlock"},c)),(0,a.kt)(r.Z,{value:"js_rest",label:"JavaScript (REST)",mdxType:"TabItem"},(0,a.kt)(i.Z,{className:"language-javascript",mdxType:"CodeBlock"},h)),(0,a.kt)(r.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,a.kt)(i.Z,{className:"language-javascript",mdxType:"CodeBlock"},k)),(0,a.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)(i.Z,{className:"language-java",mdxType:"CodeBlock"},P)),(0,a.kt)(r.Z,{value:"php",label:"PHP",mdxType:"TabItem"},(0,a.kt)(i.Z,{className:"language-php",mdxType:"CodeBlock"},W)),(0,a.kt)(r.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,a.kt)(i.Z,{className:"language-bash",mdxType:"CodeBlock"},x))),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Code Output Example"),(0,a.kt)(i.Z,{className:"language-text",mdxType:"CodeBlock"},V)),(0,a.kt)("h2",{id:"get"},"Get"),(0,a.kt)("h3",{id:"get-all-workflows-in-an-app"},"Get all Workflows in an App"),(0,a.kt)("p",null,"You can return all custom workflows in your app."),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"If you want to get a list of the workflows not within the scope of your app, you need to use your PAT while specifying the ",(0,a.kt)("inlineCode",{parentName:"p"},"user_id")," of their owner and the ",(0,a.kt)("inlineCode",{parentName:"p"},"app_id")," of the application that you\u2019re accessing. For example, to get Clarifai's workflows in the ",(0,a.kt)("inlineCode",{parentName:"p"},"main")," app, you need to use your PAT while specifying Clarifai's ",(0,a.kt)("inlineCode",{parentName:"p"},"user_id"),' as "clarifai" and ',(0,a.kt)("inlineCode",{parentName:"p"},"app_id"),' as "main" in the request.')),(0,a.kt)(s.Z,{mdxType:"Tabs"},(0,a.kt)(r.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,a.kt)(i.Z,{className:"language-python",mdxType:"CodeBlock"},u)),(0,a.kt)(r.Z,{value:"js_rest",label:"JavaScript (REST)",mdxType:"TabItem"},(0,a.kt)(i.Z,{className:"language-javascript",mdxType:"CodeBlock"},E)),(0,a.kt)(r.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,a.kt)(i.Z,{className:"language-javascript",mdxType:"CodeBlock"},R)),(0,a.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)(i.Z,{className:"language-java",mdxType:"CodeBlock"},C)),(0,a.kt)(r.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,a.kt)(i.Z,{className:"language-bash",mdxType:"CodeBlock"},Y))),(0,a.kt)("h3",{id:"get-a-workflow-by-a-specific-id"},"Get a Workflow by a Specific ID"),(0,a.kt)("p",null,"You can return information about a specific workflow."),(0,a.kt)(s.Z,{mdxType:"Tabs"},(0,a.kt)(r.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,a.kt)(i.Z,{className:"language-python",mdxType:"CodeBlock"},p)),(0,a.kt)(r.Z,{value:"js_rest",label:"JavaScript (REST)",mdxType:"TabItem"},(0,a.kt)(i.Z,{className:"language-javascript",mdxType:"CodeBlock"},I)),(0,a.kt)(r.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,a.kt)(i.Z,{className:"language-javascript",mdxType:"CodeBlock"},T)),(0,a.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)(i.Z,{className:"language-javascript",mdxType:"CodeBlock"},U)),(0,a.kt)(r.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,a.kt)(i.Z,{className:"language-bash",mdxType:"CodeBlock"},M))),(0,a.kt)("h2",{id:"update"},"Update"),(0,a.kt)("h3",{id:"patch-workflow"},"Patch Workflow"),(0,a.kt)("p",null,"You can change a workflow; that is, change the models of which the workflow consists."),(0,a.kt)("p",null,"The possible actions are ",(0,a.kt)("inlineCode",{parentName:"p"},"overwrite"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"merge"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"remove"),"."),(0,a.kt)(s.Z,{mdxType:"Tabs"},(0,a.kt)(r.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,a.kt)(i.Z,{className:"language-python",mdxType:"CodeBlock"},d)),(0,a.kt)(r.Z,{value:"js_rest",label:"JavaScript (REST)",mdxType:"TabItem"},(0,a.kt)(i.Z,{className:"language-javascript",mdxType:"CodeBlock"},m)),(0,a.kt)(r.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,a.kt)(i.Z,{className:"language-javascript",mdxType:"CodeBlock"},b)),(0,a.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)(i.Z,{className:"language-java",mdxType:"CodeBlock"},y)),(0,a.kt)(r.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,a.kt)(i.Z,{className:"language-bash",mdxType:"CodeBlock"},B))),(0,a.kt)("h2",{id:"delete"},"Delete"),(0,a.kt)("h3",{id:"delete-workflow-by-id"},"Delete Workflow by ID"),(0,a.kt)("p",null,"You can delete a specific workflow."),(0,a.kt)(s.Z,{mdxType:"Tabs"},(0,a.kt)(r.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,a.kt)(i.Z,{className:"language-python",mdxType:"CodeBlock"},_)),(0,a.kt)(r.Z,{value:"js_rest",label:"JavaScript (REST)",mdxType:"TabItem"},(0,a.kt)(i.Z,{className:"language-javascript",mdxType:"CodeBlock"},D)),(0,a.kt)(r.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,a.kt)(i.Z,{className:"language-javascript",mdxType:"CodeBlock"},A)),(0,a.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)(i.Z,{className:"language-java",mdxType:"CodeBlock"},L)),(0,a.kt)(r.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,a.kt)(i.Z,{className:"language-bash",mdxType:"CodeBlock"},j))),(0,a.kt)("h3",{id:"delete-all-workflows"},"Delete all Workflows"),(0,a.kt)("p",null,"You can delete all custom workflows."),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"Instead of ",(0,a.kt)("inlineCode",{parentName:"p"},"delete_all"),", you can specify a list of workflow IDs to be deleted, using the ",(0,a.kt)("inlineCode",{parentName:"p"},"ids")," field.")),(0,a.kt)(s.Z,{mdxType:"Tabs"},(0,a.kt)(r.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,a.kt)(i.Z,{className:"language-python",mdxType:"CodeBlock"},f)),(0,a.kt)(r.Z,{value:"js_rest",label:"JavaScript (REST)",mdxType:"TabItem"},(0,a.kt)(i.Z,{className:"language-javascript",mdxType:"CodeBlock"},g)),(0,a.kt)(r.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,a.kt)(i.Z,{className:"language-javascript",mdxType:"CodeBlock"},S)),(0,a.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)(i.Z,{className:"language-java",mdxType:"CodeBlock"},v)),(0,a.kt)(r.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,a.kt)(i.Z,{className:"language-bash",mdxType:"CodeBlock"},G))))}J.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[8307],{85162:function(n,e,t){t.d(e,{Z:function(){return o}});var a=t(67294),s=t(34334),i="tabItem_Ymn6";function o(n){let{children:e,hidden:t,className:o}=n;return a.createElement("div",{role:"tabpanel",className:(0,s.Z)(i,o),hidden:t},e)}},65488:function(n,e,t){t.d(e,{Z:function(){return _}});var a=t(83117),s=t(67294),i=t(34334),o=t(72389),r=t(67392),l=t(7094),p=t(12466),c="tabList__CuJ",u="tabItem_LNqP";function d(n){var e,t;const{lazy:o,block:d,defaultValue:_,values:m,groupId:h,className:g}=n,I=s.Children.map(n.children,(n=>{if((0,s.isValidElement)(n)&&"value"in n.props)return n;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof n.type?n.type:n.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),E=null!=m?m:I.map((n=>{let{props:{value:e,label:t,attributes:a}}=n;return{value:e,label:t,attributes:a}})),f=(0,r.l)(E,((n,e)=>n.value===e.value));if(f.length>0)throw new Error('Docusaurus error: Duplicate values "'+f.map((n=>n.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const C=null===_?_:null!=(e=null!=_?_:null==(t=I.find((n=>n.props.default)))?void 0:t.props.value)?e:I[0].props.value;if(null!==C&&!E.some((n=>n.value===C)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+C+'" but none of its children has the corresponding value. Available values are: '+E.map((n=>n.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:T,setTabGroupChoices:D}=(0,l.U)(),[P,O]=(0,s.useState)(C),b=[],{blockElementScrollPositionUntilNextRender:A}=(0,p.o5)();if(null!=h){const n=T[h];null!=n&&n!==P&&E.some((e=>e.value===n))&&O(n)}const N=n=>{const e=n.currentTarget,t=b.indexOf(e),a=E[t].value;a!==P&&(A(e),O(a),null!=h&&D(h,String(a)))},R=n=>{var e;let t=null;switch(n.key){case"ArrowRight":{var a;const e=b.indexOf(n.currentTarget)+1;t=null!=(a=b[e])?a:b[0];break}case"ArrowLeft":{var s;const e=b.indexOf(n.currentTarget)-1;t=null!=(s=b[e])?s:b[b.length-1];break}}null==(e=t)||e.focus()};return s.createElement("div",{className:(0,i.Z)("tabs-container",c)},s.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":d},g)},E.map((n=>{let{value:e,label:t,attributes:o}=n;return s.createElement("li",(0,a.Z)({role:"tab",tabIndex:P===e?0:-1,"aria-selected":P===e,key:e,ref:n=>b.push(n),onKeyDown:R,onFocus:N,onClick:N},o,{className:(0,i.Z)("tabs__item",u,null==o?void 0:o.className,{"tabs__item--active":P===e})}),null!=t?t:e)}))),o?(0,s.cloneElement)(I.filter((n=>n.props.value===P))[0],{className:"margin-top--md"}):s.createElement("div",{className:"margin-top--md"},I.map(((n,e)=>(0,s.cloneElement)(n,{key:e,hidden:n.props.value!==P})))))}function _(n){const e=(0,o.Z)();return s.createElement(d,(0,a.Z)({key:String(e)},n))}},59894:function(n,e,t){t.r(e),t.d(e,{assets:function(){return u},contentTitle:function(){return p},default:function(){return m},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return d}});var a=t(83117),s=(t(67294),t(3905)),i=t(65488),o=t(85162),r=t(66066);const l={description:"Clarifai makes it easy to customize and repurpose existing models.",sidebar_position:3},p="Custom Models",c={unversionedId:"api-guide/model/custom-model-walkthrough",id:"api-guide/model/custom-model-walkthrough",title:"Custom Models",description:"Clarifai makes it easy to customize and repurpose existing models.",source:"@site/docs/api-guide/model/custom-model-walkthrough.md",sourceDirName:"api-guide/model",slug:"/api-guide/model/custom-model-walkthrough",permalink:"/api-guide/model/custom-model-walkthrough",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{description:"Clarifai makes it easy to customize and repurpose existing models.",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Model Types",permalink:"/api-guide/model/model-types"},next:{title:"Custom Text Model",permalink:"/api-guide/model/custom-text-model-walkthrough"}},u={},d=[{value:"Add Images With Concepts",id:"add-images-with-concepts",level:2},{value:"Create a Model",id:"create-a-model",level:2},{value:"Train the Model",id:"train-the-model",level:2},{value:"Predict With the Model",id:"predict-with-the-model",level:2}],_={toc:d};function m(n){let{components:e,...l}=n;return(0,s.kt)("wrapper",(0,a.Z)({},_,l,{components:e,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"custom-models"},"Custom Models"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Clarifai makes it easy to customize and repurpose existing models")),(0,s.kt)("hr",null),(0,s.kt)("p",null,"You do not need many images to get started. We recommend starting with 10 and adding more as needed. Before you train your first model, you need to ",(0,s.kt)("a",{parentName:"p",href:"https://docs.clarifai.com/clarifai-basics/applications/#create-an-application"},"create an application")," and select a Base Workflow."),(0,s.kt)("p",null,(0,s.kt)("img",{src:t(90059).Z,width:"700",height:"440"})),(0,s.kt)("admonition",{type:"info"},(0,s.kt)("p",{parentName:"admonition"},"The initialization code used in the following examples is outlined in detail on the ",(0,s.kt)("a",{parentName:"p",href:"https://docs.clarifai.com/api-guide/api-overview/api-clients/#client-installation-instructions"},"client installation page."))),(0,s.kt)("h2",{id:"add-images-with-concepts"},"Add Images With Concepts"),(0,s.kt)("p",null,"To get started training your own model, you must first add images that already contain the concepts you want your model to see."),(0,s.kt)(i.Z,{mdxType:"Tabs"},(0,s.kt)(o.Z,{value:"grpc_python",label:"gRPC Python",mdxType:"TabItem"},(0,s.kt)(r.Z,{className:"language-python",mdxType:"CodeBlock"},"##############################################################################\n# In this section, we set the user authentication, app ID, and the images and \n# concepts we want to add. Change these strings to run your own example.\n##############################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to add your own images with concepts\nIMAGE_URL_1 = 'https://samples.clarifai.com/puppy.jpeg'\nIMAGE_URL_2 = 'https://samples.clarifai.com/wedding.jpg'\nCONCEPT_ID_1 = 'charlie'\nCONCEPT_ID_2 = 'our_wedding'\nCONCEPT_ID_3 = 'our_wedding'\nCONCEPT_ID_4 = 'charlie'\nCONCEPT_ID_5 = 'cat'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\npost_inputs_response = stub.PostInputs(\n    service_pb2.PostInputsRequest(\n        user_app_id=userDataObject,\n        inputs=[\n            resources_pb2.Input(\n                data=resources_pb2.Data(\n                    image=resources_pb2.Image(\n                        url=IMAGE_URL_1,\n                        allow_duplicate_url=True\n                    ),\n                    concepts=[\n                        resources_pb2.Concept(id=CONCEPT_ID_1, value=1),\n                        resources_pb2.Concept(id=CONCEPT_ID_2, value=0),\n                    ]\n                )\n            ),\n            resources_pb2.Input(\n                data=resources_pb2.Data(\n                    image=resources_pb2.Image(\n                        url=IMAGE_URL_2,\n                        allow_duplicate_url=True\n                    ),\n                    concepts=[\n                        resources_pb2.Concept(id=CONCEPT_ID_3, value=1),\n                        resources_pb2.Concept(id=CONCEPT_ID_4, value=0),\n                        resources_pb2.Concept(id=CONCEPT_ID_5, value=0),\n                    ]\n                )\n            ),\n        ]\n    ),\n    metadata=metadata\n)\n\nif post_inputs_response.status.code != status_code_pb2.SUCCESS:\n    print(\"There was an error with your request!\")\n    for input_object in post_inputs_response.inputs:\n        print(\"Input \" + input_object.id + \" status:\")\n        print(input_object.status)\n   \n    print(post_inputs_response.status)\n    raise Exception(\"Post inputs failed, status: \" + post_inputs_response.status.description)\n\nprint(post_inputs_response)\n")),(0,s.kt)(o.Z,{value:"js_rest",label:"JavaScript (REST)",mdxType:"TabItem"},(0,s.kt)(r.Z,{className:"language-javascript",mdxType:"CodeBlock"},'\x3c!--index.html file--\x3e\n\n<script>\n    //////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the images and \n    // concepts we want to add. Change these strings to run your own example.\n    /////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = \'YOUR_USER_ID_HERE\';\n    // Your PAT (Personal Access Token) can be found in the portal under Authentification\n    const PAT = \'YOUR_PAT_HERE\';\n    const APP_ID = \'YOUR_APP_ID_HERE\';\n    // Change these to add your own images with concepts\n    const IMAGE_URL_1 = \'https://samples.clarifai.com/puppy.jpeg\';\n    const IMAGE_URL_2 = \'https://samples.clarifai.com/wedding.jpg\';\n    const CONCEPT_ID_1 = \'charlie\';\n    const CONCEPT_ID_2 = \'our_wedding\';\n    const CONCEPT_ID_3 = \'our_wedding\';\n    const CONCEPT_ID_4 = \'charlie\';\n    const CONCEPT_ID_5 = \'cat\';\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        "user_app_id": {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        "inputs": [\n            {\n                "data": {\n                    "image": {\n                        "url": IMAGE_URL_1,\n                        "allow_duplicate_url": true\n                    },\n                    "concepts": [\n                        {\n                            "id": CONCEPT_ID_1,\n                            "value": 1\n                        },\n                        {\n                            "id": CONCEPT_ID_2,\n                            "value": 0\n                        }\n                    ]\n                }\n            },\n            {\n                "data": {\n                    "image": {\n                        "url": IMAGE_URL_2,\n                        "allow_duplicate_url": true\n                    },\n                    "concepts": [\n                        {\n                            "id": CONCEPT_ID_3,\n                            "value": 1\n                        },\n                        {\n                            "id": CONCEPT_ID_4,\n                            "value": 0\n                        },\n                        {\n                            "id": CONCEPT_ID_5,\n                            "value": 0\n                        }\n                    ]\n                }\n            }\n        ]\n    });\n\n    const requestOptions = {\n        method: \'POST\',\n        headers: {\n            \'Accept\': \'application/json\',\n            \'Authorization\': \'Key \' + PAT\n        },\n        body: raw\n    };\n\n    fetch("https://api.clarifai.com/v2/inputs", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log(\'error\', error));\n\n<\/script>')),(0,s.kt)(o.Z,{value:"grpc_nodejs",label:"gRPC NodeJS",mdxType:"TabItem"},(0,s.kt)(r.Z,{className:"language-javascript",mdxType:"CodeBlock"},"//index.js file\n\n//////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the images and \n// concepts we want to add. Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = 'YOUR_USER_ID_HERE';\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\nconst PAT = 'YOUR_PAT_HERE';\nconst APP_ID = 'YOUR_APP_ID_HERE';\n// Change these to add your own images with concepts\nconst IMAGE_URL_1 = 'https://samples.clarifai.com/puppy.jpeg';\nconst IMAGE_URL_2 = 'https://samples.clarifai.com/wedding.jpg';\nconst CONCEPT_ID_1 = 'charlie';\nconst CONCEPT_ID_2 = 'our_wedding';\nconst CONCEPT_ID_3 = 'our_wedding';\nconst CONCEPT_ID_4 = 'charlie';\nconst CONCEPT_ID_5 = 'cat';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require(\"clarifai-nodejs-grpc\");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set(\"authorization\", \"Key \" + PAT);\n\nstub.PostInputs(\n    {\n        user_app_id: {\n            \"user_id\": USER_ID,\n            \"app_id\": APP_ID\n        },\n        inputs: [\n            {\n                data: {\n                    image: { url: IMAGE_URL_1, allow_duplicate_url: true },\n                    concepts: [{ id: CONCEPT_ID_1, value: 1 }, { id: CONCEPT_ID_2, value: 0 }]\n                }\n            },\n            {\n                data: {\n                    image: { url: IMAGE_URL_2, allow_duplicate_url: true },\n                    concepts: [{ id: CONCEPT_ID_3, value: 1 }, { id: CONCEPT_ID_4, value: 0 }, { id: CONCEPT_ID_5, value: 0 }]\n                }\n            },\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            for (const input of response.inputs) {\n                console.log(\"Input \" + input.id + \" status: \");\n                console.log(JSON.stringify(input.status, null, 2) + \"\\n\");\n            }\n\n            throw new Error(\"Post inputs failed, status: \" + response.status.description);\n        }\n    }\n);")),(0,s.kt)(o.Z,{value:"grpc_java",label:"gRPC Java",mdxType:"TabItem"},(0,s.kt)(r.Z,{className:"language-java",mdxType:"CodeBlock"},'package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    //////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the images and \n    // concepts we want to add. Change these strings to run your own example.\n    /////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to add your own images with concepts\n    static final String IMAGE_URL_1 = "https://samples.clarifai.com/puppy.jpeg";\n    static final String IMAGE_URL_2 = "https://samples.clarifai.com/wedding.jpg";\n    static final String CONCEPT_ID_1 = "charlie";\n    static final String CONCEPT_ID_2 = "our_wedding";\n    static final String CONCEPT_ID_3 = "our_wedding";\n    static final String CONCEPT_ID_4 = "charlie";\n    static final String CONCEPT_ID_5 = "cat";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\t\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiInputResponse postInputsResponse = stub.postInputs(\n            PostInputsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .addInputs(\n                Input.newBuilder()\n                .setData(\n                    Data.newBuilder()\n                    .setImage(\n                        Image.newBuilder()\n                        .setUrl(IMAGE_URL_1)\n                        .setAllowDuplicateUrl(true)\n                    )\n                    .addConcepts(Concept.newBuilder().setId(CONCEPT_ID_1).setValue(1))\n                    .addConcepts(Concept.newBuilder().setId(CONCEPT_ID_2).setValue(0))\n                )\n            )\n            .addInputs(\n                Input.newBuilder()\n                .setData(\n                    Data.newBuilder()\n                    .setImage(\n                        Image.newBuilder()\n                        .setUrl(IMAGE_URL_2)\n                        .setAllowDuplicateUrl(true)\n                    )\n                    .addConcepts(Concept.newBuilder().setId(CONCEPT_ID_3).setValue(1))\n                    .addConcepts(Concept.newBuilder().setId(CONCEPT_ID_4).setValue(0))\n                    .addConcepts(Concept.newBuilder().setId(CONCEPT_ID_5).setValue(0))\n                )\n            )\n            .build()\n        );\n\n        if (postInputsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            for (Input input: postInputsResponse.getInputsList()) {\n                System.out.println("Input " + input.getId() + " status: ");\n                System.out.println(input.getStatus() + "\\n");\n            }\n\n            throw new RuntimeException("Post inputs failed, status: " + postInputsResponse.getStatus());\n        }\n\n    }\n\n}')),(0,s.kt)(o.Z,{value:"csharp",label:"C#",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},'using System.Collections.Generic;\nusing System.Threading.Tasks;\nusing Clarifai.API;\nusing Clarifai.DTOs.Inputs;\nusing Clarifai.DTOs.Predictions;\n\nnamespace YourNamespace\n{\n    public class YourClassName\n    {\n        public static async Task Main()\n        {\n            var client = new ClarifaiClient("YOUR_API_KEY");\n\n            await client.AddInputs(\n                    new ClarifaiURLImage(\n                        "https://samples.clarifai.com/puppy.jpeg",\n                        positiveConcepts: new List<Concept> {new Concept(id: "charlie")}))\n                .ExecuteAsync();\n        }\n    }\n}\n'))),(0,s.kt)(o.Z,{value:"php",label:"PHP",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},'use Clarifai\\API\\ClarifaiClient;\nuse Clarifai\\DTOs\\Inputs\\ClarifaiURLImage;\nuse Clarifai\\DTOs\\Predictions\\Concept;\n\n$client = new ClarifaiClient(\'YOUR_API_KEY\');\n\n$response = $client->addInputs(\n        (new ClarifaiURLImage(\'https://samples.clarifai.com/puppy.jpeg\'))\n        ->withAllowDuplicateUrl(true)\n        ->withPositiveConcepts([new Concept(\'charlie\')]))\n    ->executeSync();\n\nif ($response-> isSuccessful()) {\n    echo "Response is successful.\\n";\n} else {\n    echo "Response is not successful. Reason: \\n";\n    echo $response->status()->description() . "\\n";\n    echo $response->status()->errorDetails() . "\\n";\n    echo "Status code: " . $response->status()->statusCode();\n}\n'))),(0,s.kt)(o.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'\n  {\n    "inputs": [\n      {\n        "data": {\n          "image": {\n            "url": "https://samples.clarifai.com/puppy.jpeg",\n            "allow_duplicate_url": true\n          },\n          "concepts":[\n            {\n              "id": "charlie",\n              "value": 1\n            },\n            {\n              "id": "our_wedding",\n              "value": 0\n            }\n          ]\n        }\n      },\n      {\n        "data": {\n          "image": {\n            "url": "https://samples.clarifai.com/wedding.jpg",\n            "allow_duplicate_url": true\n          },\n          "concepts":[\n            {\n              "id": "our_wedding",\n              "value": 1\n            },\n            {\n              "id": "charlie",\n              "value": 0\n            },\n            {\n              "id": "cat",\n              "value": 0\n            }\n          ]\n        }\n      }\n    ]\n  }\'\\\n  https://api.clarifai.com/v2/inputs\n')))),(0,s.kt)("details",null,(0,s.kt)("summary",null,"JSON Output Example"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},'status {\n  code: SUCCESS\n  description: "Ok"\n  req_id: "7ff42b88ef477bb9b9ecab0b61d051ca"\n}\ninputs {\n  id: "7b708ee204284ed0a914dc37a7def8be"\n  data {\n    image {\n      url: "https://samples.clarifai.com/puppy.jpeg"\n      image_info {\n        format: "UnknownImageFormat"\n        color_mode: "UnknownColorMode"\n      }\n    }\n    concepts {\n      id: "charlie"\n      name: "charlie"\n      value: 1.0\n      app_id: "test-app"\n    }\n    concepts {\n      id: "our_wedding"\n      name: "our_wedding"\n      app_id: "test-app"\n    }\n  }\n  created_at {\n    seconds: 1646288847\n    nanos: 89138802\n  }\n  modified_at {\n    seconds: 1646288847\n    nanos: 89138802\n  }\n  status {\n    code: INPUT_DOWNLOAD_PENDING\n    description: "Download pending"\n  }\n}\ninputs {\n  id: "5571376e9d42447dafb76711669f6731"\n  data {\n    image {\n      url: "https://samples.clarifai.com/wedding.jpg"\n      image_info {\n        format: "UnknownImageFormat"\n        color_mode: "UnknownColorMode"\n      }\n    }\n    concepts {\n      id: "our_wedding"\n      name: "our_wedding"\n      value: 1.0\n      app_id: "test-app"\n    }\n    concepts {\n      id: "charlie"\n      name: "charlie"\n      app_id: "test-app"\n    }\n    concepts {\n      id: "cat"\n      name: "cat"\n      app_id: "test-app"\n    }\n  }\n  created_at {\n    seconds: 1646288847\n    nanos: 89138802\n  }\n  modified_at {\n    seconds: 1646288847\n    nanos: 89138802\n  }\n  status {\n    code: INPUT_DOWNLOAD_PENDING\n    description: "Download pending"\n  }\n}\n\n'))),(0,s.kt)("h2",{id:"create-a-model"},"Create a Model"),(0,s.kt)("p",null,"Once your images with concepts are added, you are now ready to create the model. You'll need a name for the model and you'll also need to provide it with the concepts you added above."),(0,s.kt)("p",null,"Take note of the ",(0,s.kt)("inlineCode",{parentName:"p"},"model id")," that is returned in the response. We'll need that for the next two steps."),(0,s.kt)(i.Z,{mdxType:"Tabs"},(0,s.kt)(o.Z,{value:"grpc_python",label:"gRPC Python",mdxType:"TabItem"},(0,s.kt)(r.Z,{className:"language-python",mdxType:"CodeBlock"},"###############################################################################\n# In this section, we set the user authentication, app ID, and the model ID  \n# and concept ID. Change these strings to run your own example.\n###############################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to create your own model\nMODEL_ID = 'my-pets'\nCONCEPT_ID = 'charlie'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\npost_models_response = stub.PostModels(\n    service_pb2.PostModelsRequest(\n        user_app_id=userDataObject,\n        models=[\n            resources_pb2.Model(\n                id=MODEL_ID,\n                output_info=resources_pb2.OutputInfo(\n                    data=resources_pb2.Data(\n                        concepts=[resources_pb2.Concept(id=CONCEPT_ID, value=1)]\n                    ),\n                    output_config=resources_pb2.OutputConfig(\n                        concepts_mutually_exclusive=False,\n                        closed_environment=False\n                    )\n                )\n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif post_models_response.status.code != status_code_pb2.SUCCESS:\n    print(post_models_response.status)\n    raise Exception(\"Post models failed, status: \" + post_models_response.status.description)\n    \nprint(post_models_response)")),(0,s.kt)(o.Z,{value:"js_rest",label:"JavaScript (REST)",mdxType:"TabItem"},(0,s.kt)(r.Z,{className:"language-javascript",mdxType:"CodeBlock"},'\x3c!--index.html file--\x3e\n\n<script>\n    //////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the model ID  \n    // and concept ID. Change these strings to run your own example.\n    /////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = \'YOUR_USER_ID_HERE\';\n    // Your PAT (Personal Access Token) can be found in the portal under Authentification\n    const PAT = \'YOUR_PAT_HERE\';\n    const APP_ID = \'YOUR_APP_ID_HERE\';\n    // Change these to create your own model\n    const MODEL_ID = \'my-pets\';\n    const CONCEPT_ID = \'charlie\';\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        "user_app_id": {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        "model": {\n            "id": MODEL_ID,\n            "output_info": {\n                "data": {\n                    "concepts": [\n                        {\n                            "id": CONCEPT_ID\n                        }\n                    ]\n                },\n                "output_config": {\n                    "concepts_mutually_exclusive": false,\n                    "closed_environment": false\n                }\n            }\n        }\n    });\n\n    const requestOptions = {\n        method: \'POST\',\n        headers: {\n            \'Accept\': \'application/json\',\n            \'Authorization\': \'Key \' + PAT\n        },\n        body: raw\n    };\n\n    fetch("https://api.clarifai.com/v2/models", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log(\'error\', error));\n\n<\/script>')),(0,s.kt)(o.Z,{value:"grpc_nodejs",label:"gRPC NodeJS",mdxType:"TabItem"},(0,s.kt)(r.Z,{className:"language-javascript",mdxType:"CodeBlock"},'//index.js file\n\n//////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the model ID  \n// and concept ID. Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n// Change these to create your own model\nconst MODEL_ID = \'my-pets\';\nconst CONCEPT_ID = \'charlie\';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PostModels(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        models: [\n            {\n                id: MODEL_ID,\n                output_info: {\n                    data: { concepts: [{ id: CONCEPT_ID }] },\n                    output_config: { concepts_mutually_exclusive: false, closed_environment: false }\n                }\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post models failed, status: " + response.status.description);\n        }\n    }\n);')),(0,s.kt)(o.Z,{value:"grpc_java",label:"gRPC Java",mdxType:"TabItem"},(0,s.kt)(r.Z,{className:"language-java",mdxType:"CodeBlock"},'package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    ////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the model ID  \n    // and concept ID. Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to create your own model\n    static final String MODEL_ID = "my-pets";\n    static final String CONCEPT_ID = "charlie";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\t\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        SingleModelResponse postModelsResponse = stub.postModels(\n            PostModelsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .addModels(\n                Model.newBuilder()\n                .setId(MODEL_ID)\n                .setOutputInfo(\n                    OutputInfo.newBuilder()\n                    .setData(\n                        Data.newBuilder().addConcepts(Concept.newBuilder().setId(CONCEPT_ID))\n                    )\n                    .setOutputConfig(\n                        OutputConfig.newBuilder()\n                        .setConceptsMutuallyExclusive(false)\n                        .setClosedEnvironment(false)\n                    )\n                )\n            ).build()\n        );\n\n        if (postModelsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post models failed, status: " + postModelsResponse.getStatus());\n        }\n\n    }\n\n}')),(0,s.kt)(o.Z,{value:"csharp",label:"C#",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},'using System.Collections.Generic;\nusing System.Threading.Tasks;\nusing Clarifai.API;\nusing Clarifai.DTOs.Predictions;\n\nnamespace YourNamespace\n{\n    public class YourClassName\n    {\n        public static async Task Main()\n        {\n            var client = new ClarifaiClient("YOUR_API_KEY");\n\n            await client.CreateModel(\n                    "pets",\n                    concepts: new List<Concept> {new Concept("charlie")})\n                .ExecuteAsync();\n        }\n    }\n}\n'))),(0,s.kt)(o.Z,{value:"php",label:"PHP",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},'use Clarifai\\API\\ClarifaiClient;\nuse Clarifai\\DTOs\\Predictions\\Concept;\n\n$client = new ClarifaiClient(\'YOUR_API_KEY\');\n\n$response = $client->createModel(\'pets\')\n    ->withConcepts([new Concept(\'charlie\')])\n    ->executeSync();\n\nif ($response-> isSuccessful()) {\n    echo "Response is successful.\\n";\n} else {\n    echo "Response is not successful. Reason: \\n";\n    echo $response->status()->description() . "\\n";\n    echo $response->status()->errorDetails() . "\\n";\n    echo "Status code: " . $response->status()->statusCode();\n}\n'))),(0,s.kt)(o.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'\n  {\n    "model": {\n      "id": "pets",\n      "output_info": {\n        "data": {\n          "concepts": [\n            {\n              "id": "charlie"\n            }\n          ]\n        },\n        "output_config": {\n          "concepts_mutually_exclusive": false,\n          "closed_environment":false\n        }\n      }\n    }\n  }\'\\\n  https://api.clarifai.com/v2/models\n')))),(0,s.kt)("details",null,(0,s.kt)("summary",null,"JSON Output Example"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},'status {\n  code: SUCCESS\n  description: "Ok"\n  req_id: "5e0b4675ea65cc53735c9ffd6d9b8f64"\n}\nmodel {\n  id: "my-pets"\n  name: "my-pets"\n  created_at {\n    seconds: 1646291711\n    nanos: 640607856\n  }\n  app_id: "test-app"\n  output_info {\n    output_config {\n    }\n    message: "Show output_info with: GET /models/{model_id}/output_info"\n    params {\n      fields {\n        key: "max_concepts"\n        value {\n          number_value: 20.0\n        }\n      }\n      fields {\n        key: "min_value"\n        value {\n          number_value: 0.0\n        }\n      }\n      fields {\n        key: "select_concepts"\n        value {\n          list_value {\n          }\n        }\n      }\n    }\n  }\n  model_version {\n    id: "464bec38d2a2419c8a26e5b2660a0c0b"\n    created_at {\n      seconds: 1646291711\n      nanos: 667255260\n    }\n    status {\n      code: MODEL_UNTRAINED\n      description: "Model not yet trained"\n    }\n    active_concept_count: 1\n    visibility {\n      gettable: PRIVATE\n    }\n    app_id: "test-app"\n    user_id: "ei2leoz3s3iy"\n    metadata {\n    }\n  }\n  user_id: "ei2leoz3s3iy"\n  input_info {\n    params {\n    }\n  }\n  train_info {\n    params {\n    }\n  }\n  model_type_id: "embedding-classifier"\n  visibility {\n    gettable: PRIVATE\n  }\n  metadata {\n  }\n  modified_at {\n    seconds: 1646291711\n    nanos: 640607856\n  }\n  import_info {\n  }\n}\n\n'))),(0,s.kt)("h2",{id:"train-the-model"},"Train the Model"),(0,s.kt)("p",null,"Now that you've added images with concepts, then created a model with those concepts, the next step is to train the model. When you train a model, you are telling the system to look at all the images with concepts you've provided and learn from them. This train operation is asynchronous. It may take a few seconds for your model to be fully trained and ready."),(0,s.kt)("p",null,"Take note of the ",(0,s.kt)("inlineCode",{parentName:"p"},"model_version id")," in the response. We'll need that for the next section when we predict with the model."),(0,s.kt)(i.Z,{mdxType:"Tabs"},(0,s.kt)(o.Z,{value:"grpc_python",label:"gRPC Python",mdxType:"TabItem"},(0,s.kt)(r.Z,{className:"language-python",mdxType:"CodeBlock"},"###############################################################################\n# In this section, we set the user authentication, app ID, and the model ID  \n# Change these strings to run your own example.\n###############################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change this to train your own model\nMODEL_ID = 'my-pets'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\npost_model_versions = stub.PostModelVersions(\n    service_pb2.PostModelVersionsRequest(\n        user_app_id=userDataObject,\n        model_id=MODEL_ID\n    ),\n    metadata=metadata\n)\n\nif post_model_versions.status.code != status_code_pb2.SUCCESS:\n    print(post_model_versions.status)\n    raise Exception(\"Post models versions failed, status: \" + post_model_versions.status.description)\n    \nprint(post_model_versions)")),(0,s.kt)(o.Z,{value:"js_rest",label:"JavaScript (REST)",mdxType:"TabItem"},(0,s.kt)(r.Z,{className:"language-javascript",mdxType:"CodeBlock"},"\x3c!--index.html file--\x3e\n\n<script>\n    //////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the model ID.  \n    // Change these strings to run your own example.\n    /////////////////////////////////////////////////////////////////////////////////\n  \n    // Your PAT (Personal Access Token) can be found in the portal under Authentification\n    const PAT = 'YOUR_PAT_HERE';\n    const APP_ID = 'YOUR_APP_ID_HERE';\n    // Change this to train your own model\n    const MODEL_ID = 'my-pets';\n  \n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n  \n  const requestOptions = {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Authorization': 'Key ' + PAT\n    }\n  };\n  \n  fetch(`https://api.clarifai.com/v2/users/me/apps/${APP_ID}/models/${MODEL_ID}/versions`, requestOptions)\n    .then(response => response.text())\n    .then(result => console.log(result))\n    .catch(error => console.log('error', error));\n  \n  <\/script>")),(0,s.kt)(o.Z,{value:"grpc_nodejs",label:"gRPC NodeJS",mdxType:"TabItem"},(0,s.kt)(r.Z,{className:"language-javascript",mdxType:"CodeBlock"},'//index.js file\n\n//////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the model ID.  \n// Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n// Change this to train your own model\nconst MODEL_ID = \'my-pets\';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PostModelVersions(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        model_id: MODEL_ID\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post model versions failed, status: " + response.status.description);\n        }\n    }\n);')),(0,s.kt)(o.Z,{value:"grpc_java",label:"gRPC Java",mdxType:"TabItem"},(0,s.kt)(r.Z,{className:"language-java",mdxType:"CodeBlock"},'package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    ////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the model ID.  \n    // Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change this to train your own model\n    static final String MODEL_ID = "my-pets";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\t\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        SingleModelResponse postModelVersionsResponse = stub.postModelVersions(\n            PostModelVersionsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .setModelId(MODEL_ID)\n            .build()\n        );\n\n        if (postModelVersionsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post model versions failed, status: " + postModelVersionsResponse.getStatus());\n        }\n\n        String modelVersionId = postModelVersionsResponse.getModel().getModelVersion().getId();\n        System.out.println("New model version ID: " + modelVersionId);\n\n    }\n\n}')),(0,s.kt)(o.Z,{value:"csharp",label:"C#",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},'using System.Threading.Tasks;\nusing Clarifai.API;\nusing Clarifai.DTOs.Predictions;\n\nnamespace YourNamespace\n{\n    public class YourClassName\n    {\n        public static async Task Main()\n        {\n            var client = new ClarifaiClient("YOUR_API_KEY");\n\n            await client.TrainModel<Concept>("{model_id}")\n                .ExecuteAsync();\n        }\n    }\n}\n'))),(0,s.kt)(o.Z,{value:"php",label:"PHP",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},'use Clarifai\\API\\ClarifaiClient;\nuse Clarifai\\DTOs\\Models\\ModelType;\n\n$client = new ClarifaiClient(\'YOUR_API_KEY\');\n\n$response = $client->trainModel(ModelType::concept(), \'MODEL_ID\')\n    ->executeSync();\n\nif ($response-> isSuccessful()) {\n    echo "Response is successful.\\n";\n} else {\n    echo "Response is not successful. Reason: \\n";\n    echo $response->status()->description() . "\\n";\n    echo $response->status()->errorDetails() . "\\n";\n    echo "Status code: " . $response->status()->statusCode();\n}\n'))),(0,s.kt)(o.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  https://api.clarifai.com/v2/models/pets/versions\n')))),(0,s.kt)("details",null,(0,s.kt)("summary",null,"JSON Output Example"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},'status {\n  code: SUCCESS\n  description: "Ok"\n  req_id: "d707b6c108847ccd9891e7ad98f91f98"\n}\nmodel {\n  id: "my-pets"\n  name: "my-pets"\n  created_at {\n    seconds: 1646291711\n    nanos: 640607000\n  }\n  app_id: "test-app"\n  output_info {\n    output_config {\n    }\n    message: "Show output_info with: GET /models/{model_id}/output_info"\n    params {\n      fields {\n        key: "max_concepts"\n        value {\n          number_value: 20.0\n        }\n      }\n      fields {\n        key: "min_value"\n        value {\n          number_value: 0.0\n        }\n      }\n      fields {\n        key: "select_concepts"\n        value {\n          list_value {\n          }\n        }\n      }\n    }\n  }\n  model_version {\n    id: "8eb21f63ba9d40c7b84ecfd664ac603d"\n    created_at {\n      seconds: 1646330065\n      nanos: 537080027\n    }\n    status {\n      code: MODEL_QUEUED_FOR_TRAINING\n      description: "Model is currently in queue for training."\n    }\n    active_concept_count: 1\n    visibility {\n      gettable: PRIVATE\n    }\n    app_id: "test-app"\n    user_id: "ei2leoz3s3iy"\n    metadata {\n    }\n  }\n  user_id: "ei2leoz3s3iy"\n  input_info {\n  }\n  train_info {\n  }\n  model_type_id: "embedding-classifier"\n  visibility {\n    gettable: PRIVATE\n  }\n  metadata {\n  }\n  modified_at {\n    seconds: 1646291711\n    nanos: 640607000\n  }\n  import_info {\n  }\n}\n\n'))),(0,s.kt)("h2",{id:"predict-with-the-model"},"Predict With the Model"),(0,s.kt)("p",null,"Now that we have trained the model, we can start making predictions with it. In our predict call, we specify three items: the ",(0,s.kt)("inlineCode",{parentName:"p"},"model id"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"model version id")," ","(","optional, defaults to the latest trained version",")",", and the ",(0,s.kt)("inlineCode",{parentName:"p"},"input")," we want a prediction for."),(0,s.kt)("admonition",{title:"note",type:"important"},(0,s.kt)("p",{parentName:"admonition"},"You can repeat the above steps as often as you like. By adding more images with concepts and training, you can get the model to predict exactly how you want it to.")),(0,s.kt)(i.Z,{mdxType:"Tabs"},(0,s.kt)(o.Z,{value:"grpc_python",label:"gRPC Python",mdxType:"TabItem"},(0,s.kt)(r.Z,{className:"language-python",mdxType:"CodeBlock"},"####################################################################################\n# In this section, we set the user authentication, app ID, model ID, model version, \n# and image URL. Change these strings to run your own example.\n####################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to make your own predictions\nMODEL_ID = 'my-pets'\nMODEL_VERSION = '8eb21f63ba9d40c7b84ecfd664ac603d'\nIMAGE_URL = 'https://samples.clarifai.com/puppy.jpeg'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\npost_model_outputs_response = stub.PostModelOutputs(\n    service_pb2.PostModelOutputsRequest(\n        user_app_id=userDataObject,\n        model_id=MODEL_ID,\n        version_id=MODEL_VERSION,  # This is optional. Defaults to the latest model version.\n        inputs=[\n            resources_pb2.Input(\n                data=resources_pb2.Data(\n                    image=resources_pb2.Image(\n                        url=IMAGE_URL\n                    )\n                )\n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif post_model_outputs_response.status.code != status_code_pb2.SUCCESS:\n    print(post_model_outputs_response.status)\n    raise Exception(\"Post model outputs failed, status: \" + post_model_outputs_response.status.description)\n\n# Since we have one input, one output will exist here.\noutput = post_model_outputs_response.outputs[0]\n\nprint(\"Predicted concepts:\")\nfor concept in output.data.concepts:\n    print(\"%s %.2f\" % (concept.name, concept.value))\n\n# Uncomment this line to print the full Response JSON\n#print(post_model_outputs_response)")),(0,s.kt)(o.Z,{value:"js_rest",label:"JavaScript (REST)",mdxType:"TabItem"},(0,s.kt)(r.Z,{className:"language-javascript",mdxType:"CodeBlock"},"\x3c!--index.html file--\x3e\n\n<script>\n    //////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, model ID, model version, \n    // and image URL. Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = 'YOUR_USER_ID_HERE';\n    // Your PAT (Personal Access Token) can be found in the portal under Authentification\n    const PAT = 'YOUR_PAT_HERE';\n    const APP_ID = 'YOUR_APP_ID_HERE';\n    // Change these to make your own predictions\n    const MODEL_ID = 'my-pets';\n    const MODEL_VERSION = '6f2c3e043b3e49bdafd38851fb5675d5';\n    const IMAGE_URL = 'https://samples.clarifai.com/metro-north.jpg';\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        \"user_app_id\": {\n            \"user_id\": USER_ID,\n            \"app_id\": APP_ID\n        },\n        \"inputs\": [\n            {\n                \"data\": {\n                    \"image\": {\n                        \"url\": IMAGE_URL\n                    }\n                }\n            }\n        ]\n    });\n\n    const requestOptions = {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        },\n        body: raw\n    };\n\n    // NOTE: MODEL_VERSION_ID is optional, you can also call prediction with the MODEL_ID only\n    // https://api.clarifai.com/v2/models/{YOUR_MODEL_ID}/outputs\n    // this will default to the latest version_id\n\n    fetch(`https://api.clarifai.com/v2/models/${MODEL_ID}/versions/${MODEL_VERSION}/outputs`, requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n\n<\/script>")),(0,s.kt)(o.Z,{value:"grpc_nodejs",label:"gRPC NodeJS",mdxType:"TabItem"},(0,s.kt)(r.Z,{className:"language-javascript",mdxType:"CodeBlock"},'//index.js file\n\n//////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, model ID, model version, \n// and image URL. Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n// Change these to make your own predictions\nconst MODEL_ID = \'my-pets\';\nconst MODEL_VERSION = \'6f2c3e043b3e49bdafd38851fb5675d5\';\nconst IMAGE_URL = \'https://samples.clarifai.com/metro-north.jpg\';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PostModelOutputs(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        model_id: MODEL_ID,\n        version_id: MODEL_VERSION,  // This is optional. Defaults to the latest model version\n        inputs: [\n            { data: { image: { url: IMAGE_URL } } }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post model outputs failed, status: " + response.status.description);\n        }\n\n        // Since we have one input, one output will exist here.\n        const output = response.outputs[0];\n\n        console.log("Predicted concepts:");\n        for (const concept of output.data.concepts) {\n            console.log(concept.name + " " + concept.value);\n        }\n    }\n);')),(0,s.kt)(o.Z,{value:"grpc_java",label:"gRPC Java",mdxType:"TabItem"},(0,s.kt)(r.Z,{className:"language-java",mdxType:"CodeBlock"},'package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    //////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, model ID, model version, \n    // and image URL. Change these strings to run your own example\n    /////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\t\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to make your own predictions\n    static final String MODEL_ID = "my-pets";\n    static final String MODEL_VERSION = "6f2c3e043b3e49bdafd38851fb5675d5";\n    static final String IMAGE_URL = "https://samples.clarifai.com/metro-north.jpg";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\t\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiOutputResponse postModelOutputsResponse = stub.postModelOutputs(\n            PostModelOutputsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .setModelId(MODEL_ID)\n            .setVersionId(MODEL_VERSION) // This is optional. Defaults to the latest model version \n            .addInputs(\n                Input.newBuilder().setData(\n                    Data.newBuilder().setImage(\n                        Image.newBuilder().setUrl(IMAGE_URL)\n                    )\n                )\n            )\n            .build()\n        );\n\n        if (postModelOutputsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post model outputs failed, status: " + postModelOutputsResponse.getStatus());\n        }\n\n        // Since we have one input, one output will exist here.\n        Output output = postModelOutputsResponse.getOutputs(0);\n\n        System.out.println("Predicted concepts:");\n        for (Concept concept: output.getData().getConceptsList()) {\n            System.out.printf("%s %.2f%n", concept.getName(), concept.getValue());\n        }\n\n    }\n\n}')),(0,s.kt)(o.Z,{value:"csharp",label:"C#",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},'using System.Threading.Tasks;\nusing Clarifai.API;\nusing Clarifai.DTOs.Inputs;\nusing Clarifai.DTOs.Predictions;\n\nnamespace YourNamespace\n{\n    public class YourClassName\n    {\n        public static async Task Main()\n        {\n            var client = new ClarifaiClient("YOUR_API_KEY");\n\n                 var response = await Client.Predict<Concept>(\n                    "YOUR_MODEL_ID",\n                    new ClarifaiURLImage("https://samples.clarifai.com/metro-north.jpg"),\n                    modelVersionID: "MODEL_VERSION_ID")\n                  .ExecuteAsync();\n        }\n    }\n}\n'))),(0,s.kt)(o.Z,{value:"php",label:"PHP",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},'use Clarifai\\API\\ClarifaiClient;\nuse Clarifai\\DTOs\\Inputs\\ClarifaiURLImage;\nuse Clarifai\\DTOs\\Models\\ModelType;\nuse Clarifai\\DTOs\\Outputs\\ClarifaiOutput;\nuse Clarifai\\DTOs\\Predictions\\Concept;\n\n$client = new ClarifaiClient(\'YOUR_API_KEY\');\n\n$response = $client->predict(ModelType::concept(), \'MODEL_ID,\n        new ClarifaiURLImage(\'https://samples.clarifai.com/puppy.jpeg\'))\n    ->executeSync();\n\nif ($response-> isSuccessful()) {\n    /** @var ClarifaiOutput $output */\n    $output = $response->get();\n\n    echo "Predicted concepts:\\n";\n    /** @var Concept $concept */\n    foreach ($output->data() as $concept) {\n        echo $concept->name() . \': \' . $concept->value() . "\\n";\n    }\n} else {\n    echo "Response is not successful. Reason: \\n";\n    echo $response->status()->description() . "\\n";\n    echo $response->status()->errorDetails() . "\\n";\n    echo "Status code: " . $response->status()->statusCode();\n}\n'))),(0,s.kt)(o.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'\n  {\n    "inputs": [\n      {\n        "data": {\n          "image": {\n            "url": "https://samples.clarifai.com/metro-north.jpg"\n          }\n        }\n      }\n    ]\n  }\'\\\n  https://api.clarifai.com/v2/models/pets/versions/{YOUR_MODEL_VERSION_ID}/outputs\n')))),(0,s.kt)("details",null,(0,s.kt)("summary",null,"Code Output Example"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},"Predicted concepts:\ncharlie 1.00\n"))),(0,s.kt)("details",null,(0,s.kt)("summary",null,"JSON Output Example"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},'status {\n  code: SUCCESS\n  description: "Ok"\n  req_id: "db4cf89c13303aa9889a89f2ae0a91f4"\n}\noutputs {\n  id: "20ed3f59dc5b4b1e9082a7e91ff29f48"\n  status {\n    code: SUCCESS\n    description: "Ok"\n  }\n  created_at {\n    seconds: 1646333543\n    nanos: 352417324\n  }\n  model {\n    id: "my-pets"\n    name: "my-pets"\n    created_at {\n      seconds: 1646291711\n      nanos: 640607000\n    }\n    app_id: "test-app"\n    output_info {\n      output_config {\n      }\n      message: "Show output_info with: GET /models/{model_id}/output_info"\n      params {\n        fields {\n          key: "max_concepts"\n          value {\n            number_value: 20.0\n          }\n        }\n        fields {\n          key: "min_value"\n          value {\n            number_value: 0.0\n          }\n        }\n        fields {\n          key: "select_concepts"\n          value {\n            list_value {\n            }\n          }\n        }\n      }\n    }\n    model_version {\n      id: "8eb21f63ba9d40c7b84ecfd664ac603d"\n      created_at {\n        seconds: 1646330065\n        nanos: 537080000\n      }\n      status {\n        code: MODEL_TRAINED\n        description: "Model is trained and ready"\n      }\n      total_input_count: 14\n      completed_at {\n        seconds: 1646330068\n        nanos: 100250000\n      }\n      visibility {\n        gettable: PRIVATE\n      }\n      app_id: "test-app"\n      user_id: "ei2leoz3s3iy"\n      metadata {\n      }\n    }\n    user_id: "ei2leoz3s3iy"\n    input_info {\n    }\n    train_info {\n    }\n    model_type_id: "embedding-classifier"\n    visibility {\n      gettable: PRIVATE\n    }\n    modified_at {\n      seconds: 1646291711\n      nanos: 640607000\n    }\n    import_info {\n    }\n  }\n  input {\n    id: "f1ce5584c5e54653b722ac3ef163a077"\n    data {\n      image {\n        url: "https://samples.clarifai.com/puppy.jpeg"\n      }\n    }\n  }\n  data {\n    concepts {\n      id: "charlie"\n      name: "charlie"\n      value: 0.9998574256896973\n      app_id: "test-app"\n    }\n  }\n}\n\n'))))}m.isMDXComponent=!0},90059:function(n,e,t){e.Z=t.p+"assets/images/illustration-training-22112a4ec017ebaf5f8c40832742148d.png"}}]);
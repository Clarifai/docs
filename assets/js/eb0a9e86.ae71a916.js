"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[5899],{48342:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>on,contentTitle:()=>sn,default:()=>ln,frontMatter:()=>an,metadata:()=>a,toc:()=>rn});const a=JSON.parse('{"id":"api-guide/search/rank","title":"Rank","description":"Search your data based on concepts or visual similarity","source":"@site/docs/api-guide/search/rank.md","sourceDirName":"api-guide/search","slug":"/api-guide/search/rank","permalink":"/api-guide/search/rank","draft":false,"unlisted":false,"editUrl":"https://github.com/Clarifai/docs/blob/main/docs/api-guide/search/rank.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"description":"Search your data based on concepts or visual similarity","sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Filter","permalink":"/api-guide/search/filter"},"next":{"title":"Combine or Negate","permalink":"/api-guide/search/combine-or-negate"}}');var s=t(74848),i=t(28453),o=t(65537),r=t(79329),c=t(58069);const l="##################################################################################\n# In this section, we set the user authentication, app ID, and the concept ID we  \n# we want to rank by. Change these strings to run your own example.\n##################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change this to rank by a Clarifai/main concept\nCONCEPT_ID = 'ai_fvlBqXZR'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID) # The userDataObject is required when using a PAT\n\npost_annotations_searches_response = stub.PostAnnotationsSearches(\n    service_pb2.PostAnnotationsSearchesRequest(\n        user_app_id=userDataObject,\n        searches = [\n            resources_pb2.Search(\n                query=resources_pb2.Query(\n                    ranks=[\n                        resources_pb2.Rank(\n                            annotation=resources_pb2.Annotation(\n                                data=resources_pb2.Data(\n                                    concepts=[  # You can search by multiple concepts.\n                                        resources_pb2.Concept(\n                                            id=CONCEPT_ID,  # You could search by concept Name as well.\n                                            value=1  # Value of 0 will search for images that don't have the concept.\n                                        )\n                                    ]\n                                )\n                            )\n                        )\n                    ]\n                )\n            )\n        ],\n        pagination=service_pb2.Pagination(per_page=2, page=1)\n    ),\n    metadata=metadata\n)\n\nif post_annotations_searches_response.status.code != status_code_pb2.SUCCESS:\n    raise Exception(\"Post searches failed, status: \" + post_annotations_searches_response.status.description)\n\nprint(\"Search result:\")\nfor hit in post_annotations_searches_response.hits:\n    print(\"\\tScore %.2f for annotation: %s off input: %s\" % (hit.score, hit.annotation.id, hit.input.id))",u="########################################################################################\n# In this section, we set the user authentication, app ID, and the custom concept we  \n# we want to rank by. Change these strings to run your own example.\n########################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change this to rank by your own custom concept\nCONCEPT_ID = 'people'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID) # The userDataObject is required when using a PAT\n\npost_annotations_searches_response = stub.PostAnnotationsSearches(\n    service_pb2.PostAnnotationsSearchesRequest(\n        user_app_id=userDataObject,\n        searches = [\n            resources_pb2.Search(\n                query=resources_pb2.Query(\n                    ranks=[\n                        resources_pb2.Rank(\n                            annotation=resources_pb2.Annotation(\n                                data=resources_pb2.Data(\n                                    concepts=[  # You can search by multiple concepts.\n                                        resources_pb2.Concept(\n                                            id=CONCEPT_ID,  # You could search by concept Name as well.\n                                            value=1  # Value of 0 will search for images that don't have the concept.\n                                        )\n                                    ]\n                                )\n                            )\n                        )\n                    ]\n                )\n            )\n        ],\n        pagination=service_pb2.Pagination(per_page=2, page=1)\n    ),\n    metadata=metadata\n)\n\nif post_annotations_searches_response.status.code != status_code_pb2.SUCCESS:\n    raise Exception(\"Post searches failed, status: \" + post_annotations_searches_response.status.description)\n\nprint(\"Search result:\")\nfor hit in post_annotations_searches_response.hits:\n    print(\"\\tScore %.2f for annotation: %s off input: %s\" % (hit.score, hit.annotation.id, hit.input.id))",p="################################################################################\n# In this section, we set the user authentication, app ID, and the concepts we  \n# we want to rank by. Change these strings to run your own example.\n################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change this to a Clarifai/main concept\nCONCEPT_ID_1 = 'ai_fvlBqXZR'\n# Change this to your own custom concept\nCONCEPT_ID_2 = 'people'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID) # The userDataObject is required when using a PAT\n\n# Here we search for images labeled with 'ai_fvlBqXZR' and for which the General prediction model does not find\n# a 'people' concept\npost_annotations_searches_response = stub.PostAnnotationsSearches(\n    service_pb2.PostAnnotationsSearchesRequest(\n        user_app_id=userDataObject,\n        searches = [\n            resources_pb2.Search(\n                query=resources_pb2.Query(\n                    ranks=[\n                        resources_pb2.Rank(\n                            annotation=resources_pb2.Annotation(\n                                data=resources_pb2.Data(\n                                    concepts=[  # You can search by multiple concepts\n                                        resources_pb2.Concept(\n                                            id=CONCEPT_ID_1,  # You could search by concept Name as well\n                                            value=1  # Value of 0 will search for images that don't have the concept\n                                        )\n                                    ]\n                                )\n                            )\n                        )               \n                    ],                    \n                    filters=[\n                         resources_pb2.Filter(\n                            annotation=resources_pb2.Annotation(\n                                data=resources_pb2.Data(\n                                    concepts=[  # You can search by multiple concepts\n                                        resources_pb2.Concept(\n                                            id=CONCEPT_ID_2,  # You could search by concept Name as well\n                                            value=0  # Value of 0 will search for images that don't have the concept\n                                        )\n                                    ]\n                                )\n                            )\n                        )\n                     ]         \n                )\n            )\n        ],\n        pagination=service_pb2.Pagination(per_page=2, page=1)\n    ),\n    metadata=metadata\n)\n\nif post_annotations_searches_response.status.code != status_code_pb2.SUCCESS:\n    raise Exception(\"Post searches failed, status: \" + post_annotations_searches_response.status.description)\n\nprint(\"Search result:\")\nfor hit in post_annotations_searches_response.hits:\n    print(\"\\tScore %.2f for annotation: %s off input: %s\" % (hit.score, hit.annotation.id, hit.input.id))",h="################################################################################\n# In this section, we set the user authentication, app ID, concept name, and \n# language ID. Change these strings to run your own example.\n################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to what you want to search by\nCONCEPT_NAME = '\u72ac'\nLANGUAGE_ID = 'ja' # Japanese\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\npost_annotations_searches_response = stub.PostAnnotationsSearches(\n    service_pb2.PostAnnotationsSearchesRequest(\n        user_app_id=userDataObject,\n        searches = [\n            resources_pb2.Search(\n                query=resources_pb2.Query(\n                    ranks=[\n                        resources_pb2.Rank(\n                            annotation=resources_pb2.Annotation(\n                                data=resources_pb2.Data(\n                                    concepts=[  # You can search by multiple concepts\n                                        resources_pb2.Concept(\n                                            name=CONCEPT_NAME,  # You could search by concept ID as well                                            \n                                            value=1  # Value of 0 will search for images that don't have the concept\n                                        )\n                                    ]\n                                )\n                            )\n                        )\n                    ],\n                    language=LANGUAGE_ID\n                )\n            )\n        ],\n        pagination=service_pb2.Pagination(per_page=2, page=1)\n    ),\n    metadata=metadata\n)\n\nif post_annotations_searches_response.status.code != status_code_pb2.SUCCESS:\n    print(post_annotations_searches_response.status)   \n    raise Exception(\"Post searches failed, status: \" + post_annotations_searches_response.status.description)\n\nprint(\"Search result:\")\nfor hit in post_annotations_searches_response.hits:\n    print(\"\\tScore %.2f for annotation: %s off input: %s\" % (hit.score, hit.annotation.id, hit.input.id))\n",d="##################################################################\n# In this section, we set the user authentication, app ID, and \n# image URL. Change these strings to run your own example.\n##################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change this to the image URL you want to search by\nIMAGE_URL = 'https://samples.clarifai.com/metro-north.jpg'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\npost_inputs_searches_response = stub.PostInputsSearches(\n    service_pb2.PostInputsSearchesRequest(\n        user_app_id=userDataObject,\n        searches = [\n            resources_pb2.Search(\n                query=resources_pb2.Query(\n                    ranks=[\n                        resources_pb2.Rank(\n                            annotation=resources_pb2.Annotation(\n                                data=resources_pb2.Data(\n                                    image=resources_pb2.Image(\n                                        url=IMAGE_URL\n                                    )\n                                )\n                            )\n                        )\n                    ]\n                )\n            )\n        ],\n        pagination=service_pb2.Pagination(per_page=2, page=1)\n    ),\n    metadata=metadata\n)\n\nif post_inputs_searches_response.status.code != status_code_pb2.SUCCESS:\n    print(post_inputs_searches_response.status)    \n    raise Exception(\"Post searches failed, status: \" + post_inputs_searches_response.status.description)\n\nprint(\"Search result:\")\nfor hit in post_inputs_searches_response.hits:\n    print(\"\\tScore %.2f for input: %s\" % (hit.score, hit.input.id))",A="#######################################################################\n# In this section, we set the user authentication, app ID, and image\n# file location. Change these strings to run your own example.\n#######################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change this to the image file location you want to search by\nIMAGE_FILE_LOCATION = 'YOUR_IMAGE_FILE_LOCATION'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\nwith open(IMAGE_FILE_LOCATION, \"rb\") as f:\n    file_bytes = f.read()\n\npost_inputs_searches_response = stub.PostInputsSearches(\n    service_pb2.PostInputsSearchesRequest(\n        user_app_id=userDataObject,\n        searches = [\n            resources_pb2.Search(\n                query=resources_pb2.Query(\n                    ranks=[\n                        resources_pb2.Rank(\n                            input=resources_pb2.Annotation(\n                                data=resources_pb2.Data(\n                                    image=resources_pb2.Image(\n                                        base64=file_bytes\n                                    )\n                                )\n                            )\n                        )\n                    ]\n                )\n            )\n        ],\n        pagination=service_pb2.Pagination(per_page=2, page=1)\n    ),\n    metadata=metadata\n)\n\nif post_inputs_searches_response.status.code != status_code_pb2.SUCCESS:\n    print(post_inputs_searches_response.status)  \n    raise Exception(\"Post searches failed, status: \" + post_inputs_searches_response.status.description)\n\nprint(\"Search result:\")\nfor hit in post_inputs_searches_response.hits:\n    print(\"\\tScore %.2f for input: %s\" % (hit.score, hit.input.id))",_="##################################################################\n# In this section, we set the user authentication, app ID, and \n# input ID. Change these strings to run your own example.\n##################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change this to the input ID you want to search by\nINPUT_ID = 'c021c670357e4083b197abe80bda82b0'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\npost_annotations_searches_response = stub.PostAnnotationsSearches(\n    service_pb2.PostAnnotationsSearchesRequest(\n        user_app_id=userDataObject,\n        searches = [\n            resources_pb2.Search(\n                query=resources_pb2.Query(\n                    ranks=[\n                        resources_pb2.Rank(\n                            annotation=resources_pb2.Annotation(\n                                input_id=INPUT_ID\n                                )                          \n                        )\n                    ]\n                )\n            )\n        ],\n        pagination=service_pb2.Pagination(per_page=2, page=1)\n    ),\n    metadata=metadata\n)\n\nif post_annotations_searches_response.status.code != status_code_pb2.SUCCESS:\n    print(post_annotations_searches_response.status)   \n    raise Exception(\"Post searches failed, status: \" + post_annotations_searches_response.status.description)\n\nprint(\"Search result:\")\nfor hit in post_annotations_searches_response.hits:\n    print(\"\\tScore %.2f for annotation: %s off input: %s\" % (hit.score, hit.annotation.id, hit.input.id))",f="####################################################################################\n# In this section, we set the user authentication, app ID, and the raw text we  \n# we want to search by. Change these strings to run your own example.\n###################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change this to the raw text you want to search by\nRAW_TEXT = 'black dress with white polka dots'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\npost_annotations_searches_response = stub.PostAnnotationsSearches(\n    service_pb2.PostAnnotationsSearchesRequest(\n        user_app_id=userDataObject,\n        searches = [\n            resources_pb2.Search(\n                query=resources_pb2.Query(\n                    ranks=[\n                        resources_pb2.Rank(\n                            annotation=resources_pb2.Annotation(\n                                data=resources_pb2.Data(\n                                    text=resources_pb2.Text(\n                                        raw=RAW_TEXT\n                                    )\n                                )\n                            )\n                        )\n                    ]\n                )\n            )\n        ],\n        pagination=service_pb2.Pagination(per_page=2, page=1)\n    ),\n    metadata=metadata\n)\n\nif post_annotations_searches_response.status.code != status_code_pb2.SUCCESS:\n    print(post_annotations_searches_response.status)    \n    raise Exception(\"Post searches failed, status: \" + post_annotations_searches_response.status.description)\n\nprint(\"Search result:\")\nfor hit in post_annotations_searches_response.hits:\n    print(\"\\tScore %.2f for annotation: %s off input: %s\" % (hit.score, hit.annotation.id, hit.input.id))",E='\x3c!--index.html file--\x3e\n\n<script>\n    /////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the concept ID we  \n    // we want to rank by. Change these strings to run your own example.\n    /////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = \'YOUR_USER_ID_HERE\';\n    // Your PAT (Personal Access Token) can be found in the Account\'s Security section\n    const PAT = \'YOUR_PAT_HERE\';\n    const APP_ID = \'YOUR_APP_ID_HERE\';\n    // Change this to rank by a Clarifai/main concept\n    const CONCEPT_ID = \'ai_fvlBqXZR\';\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        "user_app_id": {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        "searches": [\n            {\n                "query": {\n                    "ranks": [\n                        {\n                            "annotation": {\n                                "data": {\n                                    "concepts": [\n                                        {\n                                            "id": CONCEPT_ID,\n                                            "value": 1\n                                        }\n                                    ]\n                                }\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n    });\n\n    const requestOptions = {\n        method: \'POST\',\n        headers: {\n            \'Accept\': \'application/json\',\n            \'Authorization\': \'Key \' + PAT\n        },\n        body: raw\n    };\n\n    fetch(`https://api.clarifai.com/v2/annotations/searches`, requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log(\'error\', error));\n\n<\/script>',g='\x3c!--index.html file--\x3e\n\n<script>\n    ////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the custom concept we  \n    // we want to rank by. Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = \'YOUR_USER_ID_HERE\';\n    // Your PAT (Personal Access Token) can be found in the Account\'s Security section\n    const PAT = \'YOUR_PAT_HERE\';\n    const APP_ID = \'YOUR_APP_ID_HERE\';\n    // Change this to rank by your own custom concept\n    const CONCEPT_ID = \'people\';\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        "user_app_id": {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        "searches": [\n            {\n                "query": {\n                    "ranks": [\n                        {\n                            "annotation": {\n                                "data": {\n                                    "concepts": [\n                                        {\n                                            "id": CONCEPT_ID,\n                                            "value": 1\n                                        }\n                                    ]\n                                }\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n    });\n\n    const requestOptions = {\n        method: \'POST\',\n        headers: {\n            \'Accept\': \'application/json\',\n            \'Authorization\': \'Key \' + PAT\n        },\n        body: raw\n    };\n\n    fetch(`https://api.clarifai.com/v2/annotations/searches`, requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log(\'error\', error));\n\n<\/script>',I='\x3c!--index.html file--\x3e\n\n<script>\n    ///////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the concepts we  \n    // we want to rank by. Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = \'YOUR_USER_ID_HERE\';\n    // Your PAT (Personal Access Token) can be found in the Account\'s Security section\n    const PAT = \'YOUR_PAT_HERE\';\n    const APP_ID = \'YOUR_APP_ID_HERE\';\n    // Change this to a Clarifai/main concept\n    const CONCEPT_ID_1 = \'ai_fvlBqXZR\';\n    // Change this to your own custom concept\n    const CONCEPT_ID_2 = \'people\';\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        "user_app_id": {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        "searches": [\n            {\n                "query": {\n                    "ranks": [\n                        {\n                            "annotation": {\n                                "data": {\n                                    "concepts": [\n                                        {\n                                            "id": CONCEPT_ID_1,\n                                            "value": 1\n                                        }\n                                    ]\n                                }\n                            }\n                        }, {\n                            "annotation": {\n                                "data": {\n                                    "concepts": [\n                                        {\n                                            "id": CONCEPT_ID_2,\n                                            "value": 0\n                                        }\n                                    ]\n                                }\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n    });\n\n    const requestOptions = {\n        method: \'POST\',\n        headers: {\n            \'Accept\': \'application/json\',\n            \'Authorization\': \'Key \' + PAT\n        },\n        body: raw\n    };\n\n    fetch(`https://api.clarifai.com/v2/annotations/searches`, requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log(\'error\', error));\n\n<\/script>',S='\x3c!--index.html file--\x3e\n\n<script>\n    ///////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, concept name, and \n    // language ID. Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = "YOUR_USER_ID_HERE";\n    // Your PAT (Personal Access Token) can be found in the Account\'s Security section\n    const PAT = "YOUR_PAT_HERE";\n    const APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to what you want to search by\n    const CONCEPT_NAME = "\u72ac";\n    const LANGUAGE_ID = "ja"; // Japanese\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        "user_app_id": {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        "searches": [\n            {\n                "query": {\n                    "ranks": [\n                        {\n                            "annotation": {\n                                "data": {\n                                    "concepts": [\n                                        {\n                                            "name": CONCEPT_NAME,                                            \n                                            "value": 1\n                                        }\n                                    ]\n                                }\n                            }\n                        }\n                    ],\n                    "language": LANGUAGE_ID\n                }\n            }\n        ]\n    });\n\n    const requestOptions = {\n        method: \'POST\',\n        headers: {\n            \'Accept\': \'application/json\',\n            \'Authorization\': \'Key \' + PAT\n        },\n        body: raw\n    };\n\n    fetch(`https://api.clarifai.com/v2/annotations/searches`, requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log(\'error\', error));\n\n<\/script>\n',C="\x3c!--index.html file--\x3e\n\n<script>\n    ////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and \n    // image URL. Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////\n\n    const USER_ID = 'YOUR_USER_ID_HERE';\n    // Your PAT (Personal Access Token) can be found in the Account's Security section\n    const PAT = 'YOUR_PAT_HERE';\n    const APP_ID = 'YOUR_APP_ID_HERE';\n    // Change this to the image URL you want to search by\n    const IMAGE_URL = 'https://samples.clarifai.com/metro-north.jpg';\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        \"user_app_id\": {\n            \"user_id\": USER_ID,\n            \"app_id\": APP_ID\n        },\n        \"searches\": [\n            {\n                \"query\": {\n                    \"ranks\": [\n                        {\n                            \"annotation\": {\n                                \"data\": {\n                                    \"image\": {\n                                        \"url\": IMAGE_URL\n                                    }\n                                }\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n    });\n\n    const requestOptions = {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        },\n        body: raw\n    };\n\n    fetch(`https://api.clarifai.com/v2/inputs/searches`, requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n\n<\/script>",P="\x3c!--index.html file--\x3e\n\n<script>\n    /////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and image\n    // file location. Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = 'YOUR_USER_ID_HERE';\n    // Your PAT (Personal Access Token) can be found in the Account's Security section\n    const PAT = 'YOUR_PAT_HERE';\n    const APP_ID = 'YOUR_APP_ID_HERE';\n    // Change this to the image bytes you want to search by\n    const IMAGE_FILE_BYTES = '/9j/4AAQSkZJRgABAQAAAQABAAD/2wBDAAUDBAQEAwUEBAQFBQUGBwwIBwcHBw8LCwkMEQ8SEhEPERETFhwXExQaFRERGCEYGh0dHx8fExciJCIeJBweHx7/2wBDAQUFBQcGBw4ICA4eFBEUHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh7/wAARCAAoACgDASIAAhEBAxEB/8QAGQAAAgMBAAAAAAAAAAAAAAAAAAYDBQcE/8QAMBAAAQMDAwMDAgQHAAAAAAAAAQIDBAAFEQYSIQcTMTJBURRhCBYikSNScXKhsdH/xAAZAQACAwEAAAAAAAAAAAAAAAAFBgIDBAf/xAAtEQABAwMBBgQHAQAAAAAAAAABAgMRAAQhMQUSE0FRYQaBocEUFiJCcrHR8P/aAAwDAQACEQMRAD8A3+RYY1unSYzCS0ttZUkAgktn0q5yT7jPyDUC4wdGwycH5U2Kt9ZQ7VI1qw5PkvQy3CSVPpf7aQjuKyFH25xzn3pHn3TVNy01Hl2hyy6YdkSpKsS9sl/6RlI3rRu3dxWd6spwnAGPIJTfl925fcLaoSDHXvyo6i9SlCQrU9wKln3OyWiaDN1RAbW3kKbSd7gPtwMkH/tTWy9afuy1iPfnXMAblITwkE4yf08cn3pSbYt1uts24XH6fUbiLAuY1MWyGkLEmUW0rcCRvUpQ5CtwKQCPgi4S1ZbDe4sd9NntDEe79m3uOBLTr0IR9jzodSMqUpTu9JJ8owD7UTT4ZCfv9PbP7860m+s+HBSrejWRuz2kAxoesGYxTW/Zlpkwo1vkuSly3UgKWQUhHJUvIHsAaKTemF8XE6sWmxyZkiaZrMh1jv8ArQNpUVqB8FW0njHqx4zRVVhsph1KlKk5xQ+7uHmikaSJrQerMByet2IwvtuTLa4xv2k7Rk84H9x/esHv92d01boenLXGcuiWrFIhLlpbcaQ2/JdK3VJCkAq2pAR7Zz7YxWudY9fxNIdQbNGkR5TyX4aisNNpUMFZAzkj4NK0jq9ZpbLr0PSlzkhrlZDaQlP3P8Q4/ap3F87bPucJEkx/hHv60b2TYXLrKN5sramYECSQRk9M6c6zmJ+eb5Hi22M7cnWGIQgFLbX0zSo4PDa1YBcTgDyMjJ/qbGPabH08SJt1Uzc9QqRliGg5QySPKvgc+TyfYDmmTUWpNYz7ctxoQdPQshCktupckDJUPUcJT6DwMq8YyaQ9VL0pCS8zapcq4SVOBZmPDO8/cnknlWcDBwn4NYnPjLkQ+qE9OtOVlYpeVHDCEkkkJyT+SuQzy5Y0ru6Ez511/Efa5s1fdkOtyVurIxgdlQAA9gOKKPwolU7remU5hCGYEgo38KUv9I/0TRTDYJCWQBSF4rIN/CRgAR0iTpVD1j1g/qDqJcJqlKcjB9bcda142MpOEJAzgeMnjyTSyze5KEuNRpDoDvC0oe4X9iAeaKKFK+oya6fbOqYbDTeEiAPKpHdS3gBLYc7RQkp3ApQog+cq8nwPJrljzxnPZbUfnugn/NFFRgEVch9xKsH0H8pg6e3x3T3UC1ajaZITGkJLoS4MKbOUrzz/ACKVRRRVzVwtoQmhG1NkWu0HuI+JI8u/Kv/Z';\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        \"user_app_id\": {\n            \"user_id\": USER_ID,\n            \"app_id\": APP_ID\n        },\n        \"searches\": [\n            {\n                \"query\": {\n                    \"ranks\": [\n                        {\n                            \"annotation\": {\n                                \"data\": {\n                                    \"image\": {\n                                        \"base64\": IMAGE_FILE_BYTES\n                                    }\n                                }\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n    });\n\n    const requestOptions = {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        },\n        body: raw\n    };\n\n    fetch(`https://api.clarifai.com/v2/inputs/searches`, requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n        \n<\/script>",m="\x3c!--index.html file--\x3e\n\n<script>\n    ////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and \n    // input ID. Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////\n\n    const USER_ID = 'YOUR_USER_ID_HERE';\n    // Your PAT (Personal Access Token) can be found in the Account's Security section\n    const PAT = 'YOUR_PAT_HERE';\n    const APP_ID = 'YOUR_APP_ID_HERE';\n    // Change this to the input ID you want to search by\n    const INPUT_ID = 'c29f81469db34e04b36d22b9a4aba1fa';\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        \"user_app_id\": {\n            \"user_id\": USER_ID,\n            \"app_id\": APP_ID\n        },\n        \"searches\": [\n            {\n                \"query\": {\n                    \"ranks\": [\n                        {\n                            \"annotation\": {\n                                \"input_id\": INPUT_ID\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n    });\n\n    const requestOptions = {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        },\n        body: raw\n    };\n\n    fetch(`https://api.clarifai.com/v2/annotations/searches`, requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n\n<\/script>",R="\x3c!--index.html file--\x3e\n\n<script>\n    /////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the raw text we  \n    // we want to search by. Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = 'YOUR_USER_ID_HERE';\n    // Your PAT (Personal Access Token) can be found in the Account's Security section\n    const PAT = 'YOUR_PAT_HERE';\n    const APP_ID = 'YOUR_APP_ID_HERE';\n    // Change this to the raw text you want to search by\n    const RAW_TEXT = 'black dress with white polka dots';\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        \"user_app_id\": {\n            \"user_id\": USER_ID,\n            \"app_id\": APP_ID\n        },\n        \"searches\": [\n            {\n                \"query\": {\n                    \"ranks\": [\n                        {\n                            \"annotation\": {\n                                \"data\": {\n                                    \"text\": {\n                                        \"raw\": RAW_TEXT\n                                    }\n                                }\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n    });\n\n    const requestOptions = {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        },\n        body: raw\n    };\n\n    fetch(`https://api.clarifai.com/v2/annotations/searches`, requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n\n<\/script>",w='//index.js file\n\n/////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the concept ID we  \n// we want to rank by. Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n// Change this to rank by a Clarifai/main concept\nconst CONCEPT_ID = \'ai_fvlBqXZR\';\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PostAnnotationsSearches(\n    {\n        user_app_id: {\n            user_id: USER_ID,\n            app_id: APP_ID\n        },\n        searches: [\n            {\n                query: {\n                    ranks: [\n                        {\n                            annotation: {\n                                data: {\n                                    concepts: [  // You can search by multiple concepts.\n                                        {\n                                            id: CONCEPT_ID,  // You could search by concept Name as well.\n                                            value: 1  // Value of 0 will search for images that don\'t have the concept\n                                        }\n                                    ]\n                                }\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post annotations searches failed, status: " + response.status.description);\n        }\n\n        console.log("Search result:");\n        for (const hit of response.hits) {\n            console.log("\\tScore " + hit.score + " for annotation: " + hit.annotation.id + " of input: ", hit.input.id);\n        }\n    }\n);',b='//index.js file\n\n////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the custom concept we  \n// we want to rank by. Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n// Change this to rank by your own custom concept\nconst CONCEPT_ID = \'people\';\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PostAnnotationsSearches(\n    {\n        user_app_id: {\n            user_id: USER_ID,\n            app_id: APP_ID\n        },\n        searches: [\n            {\n                query: {\n                    ranks: [\n                        {\n                            annotation: {\n                                data: {\n                                    concepts: [  // You can search by multiple concepts.\n                                        {\n                                            id: CONCEPT_ID,  // You could search by concept Name as well.\n                                            value: 1  // Value of 0 will search for images that don\'t have the concept\n                                        }\n                                    ]\n                                }\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n        console.log(response.status)\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post annotations searches failed, status: " + response.status.description);\n        }\n\n        console.log("Search result:");\n        for (const hit of response.hits) {\n            console.log("\\tScore " + hit.score + " for annotation: " + hit.annotation.id + " of input: ", hit.input.id);\n        }\n    }\n);',T='//index.js file\n\n///////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the concepts we  \n// we want to rank by. Change these strings to run your own example.\n///////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n// Change this to a Clarifai/main concept\nconst CONCEPT_ID_1 = \'ai_fvlBqXZR\';\n// Change this to your own custom concept\nconst CONCEPT_ID_2 = \'people\';\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\n// Here we search for images which we labeled with "ai_fvlBqXZR" and for which the General prediction model does not find\n// a "people" concept.\n\nstub.PostAnnotationsSearches(\n    {\n        user_app_id: {\n            user_id: USER_ID,\n            app_id: APP_ID\n        },\n        searches: [\n            {\n                query: {\n                    ranks: [\n                        {\n                            annotation: {\n                                data: {\n                                    concepts: [  // You can search by multiple concepts.\n                                        {\n                                            id: CONCEPT_ID_1,  // You could search by concept Name as well.\n                                            value: 1  // Value of 0 will search for images that don\'t have the concept\n                                        }\n                                    ]\n                                }\n                            }\n                        }, {\n                            annotation: {\n                                data: {\n                                    concepts: [  // You can search by multiple concepts.\n                                        {\n                                            id: CONCEPT_ID_2,  // You could search by concept Name as well.\n                                            value: 0  // Value of 0 will search for images that don\'t have the concept\n                                        }\n                                    ]\n                                }\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post annotations searches failed, status: " + response.status.description);\n        }\n\n        console.log("Search result:");\n        for (const hit of response.hits) {\n            console.log("\\tScore " + hit.score + " for annotation: " + hit.annotation.id + " of input: ", hit.input.id);\n        }\n    }\n);',D='//index.js file\n\n///////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, concept name, and \n// language ID. Change these strings to run your own example.\n///////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = "YOUR_PAT_HERE";\nconst APP_ID = "YOUR_APP_ID_HERE";\n// Change these to what you want to search by\nconst CONCEPT_NAME = "\u72ac";\nconst LANGUAGE_ID = "ja"; // Japanese\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PostAnnotationsSearches(\n    {\n        user_app_id: {\n            user_id: USER_ID,\n            app_id: APP_ID\n        },\n        searches: [\n            {\n                query: {\n                    ranks: [\n                        {\n                            annotation: {\n                                data: {\n                                    concepts: [  // You can search by multiple concepts\n                                        {\n                                            name: CONCEPT_NAME,  // You could search by concept Id as well                                           \n                                            value: 1  // Value of 0 will search for images that don\'t have the concept\n                                        }\n                                    ]\n                                }\n                            }\n                        }\n                    ],\n                    language: LANGUAGE_ID\n                }\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post annotations searches failed, status: " + response.status.description);\n        }\n\n        console.log("Search result:");\n        for (const hit of response.hits) {\n            console.log("\\tScore " + hit.score + " for annotation: " + hit.annotation.id + " of input: ", hit.input.id);\n        }\n    }\n);\n',y='//index.js file\n\n////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and \n// image URL. Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n// Change this to the image URL you want to search by\nconst IMAGE_URL = \'https://samples.clarifai.com/metro-north.jpg\';\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PostInputsSearches(\n    {\n        user_app_id: {\n            user_id: USER_ID,\n            app_id: APP_ID\n        },\n        searches: [\n            {\n                query: {\n                    ranks: [\n                        {\n                            annotation: {\n                                data: {\n                                    image: {\n                                        url: IMAGE_URL\n                                    }\n                                }\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post inputs searches failed, status: " + response.status.description);\n        }\n\n        console.log("Search result:");\n        for (const hit of response.hits) {\n            console.log("\\tScore " + hit.score + " for input: " + hit.input.id);\n        }\n    }\n);',O='//index.js file\n\n/////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and image\n// file location. Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n// Change this to the image file location you want to search by\nconst IMAGE_FILE_LOCATION = \'YOUR_IMAGE_FILE_LOCATION\';\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nconst fs = require("fs");\nconst imageBytes = fs.readFileSync(IMAGE_FILE_LOCATION);\n\nstub.PostInputsSearches(\n    {\n        user_app_id: {\n            user_id: USER_ID,\n            app_id: APP_ID\n        },\n        searches: [\n            {\n                query: {\n                    ranks: [\n                        {\n                            annotation: {\n                                data: {\n                                    image: {\n                                        base64: imageBytes\n                                    }\n                                }\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post inputs searches failed, status: " + response.status.description);\n        }\n\n        console.log("Search result:");\n        for (const hit of response.hits) {\n            console.log("\\tScore " + hit.score + " for input: " + hit.input.id);\n        }\n    }\n);',U='//index.js file\n\n////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and \n// input ID. Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n// Change this to the input ID you want to search by\nconst INPUT_ID = \'c29f81469db34e04b36d22b9a4aba1fa\';\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PostAnnotationsSearches(\n    {\n        user_app_id: {\n            user_id: USER_ID,\n            app_id: APP_ID\n        },\n        searches: [\n            {\n                query: {\n                    ranks: [\n                        {\n                            annotation: {\n                                input_id: INPUT_ID\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post annotations searches failed, status: " + response.status.description);\n        }\n\n        console.log("Search result:");\n        for (const hit of response.hits) {\n            console.log("\\tScore " + hit.score + " for annotation: " + hit.annotation.id + " of input: ", hit.input.id);\n        }\n    }\n);',N='//index.js file\n\n///////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the raw text we  \n// we want to search by. Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\'; \n// Change this to the raw text you want to search by\nconst RAW_TEXT = \'black dress with white polka dots\';\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PostAnnotationsSearches(\n    {\n        user_app_id: {\n            user_id: USER_ID,\n            app_id: APP_ID\n        },\n        searches: [\n            {\n                query: {\n                    ranks: [\n                        {\n                            annotation: {\n                                data: {\n                                    text: {\n                                        raw: RAW_TEXT\n                                    }\n                                }\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post annotations searches failed, status: " + response.status.description);\n        }\n\n        console.log("Search result:");\n        for (const hit of response.hits) {\n            console.log("\\tScore " + hit.score + " for annotation: " + hit.annotation.id + " of input: ", hit.input.id);\n        }\n    }\n);',H='package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    /////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the concept ID we  \n    // we want to rank by. Change these strings to run your own example.\n    /////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change this to rank by a Clarifai/main concept\n    static final String CONCEPT_ID = "ai_fvlBqXZR";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiSearchResponse postAnnotationsSearchesResponse = stub.postAnnotationsSearches(\n            PostAnnotationsSearchesRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .addSearches(\n                Search.newBuilder().setQuery(\n                    Query.newBuilder().addRanks(\n                        Rank.newBuilder().setAnnotation(\n                            Annotation.newBuilder().setData(\n                                Data.newBuilder().addConcepts( // You can search by multiple concepts\n                                    Concept.newBuilder()\n                                    .setId(CONCEPT_ID) // You could search by concept Name as well\n                                    .setValue(1f) // Value of 0 will search for images that don\'t have the concept\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n            .build()\n        );\n\n        if (postAnnotationsSearchesResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post annotations searches failed, status: " + postAnnotationsSearchesResponse.getStatus());\n        }\n\n        System.out.println("Found inputs " + postAnnotationsSearchesResponse.getHitsCount() + ":");\n        for (Hit hit : postAnnotationsSearchesResponse.getHitsList()) {\n            System.out.printf("\\tScore %.2f for annotation %s of input %s\\n", hit.getScore(), hit.getAnnotation().getId(), hit.getInput().getId());\n        }\n\n    }\n\n}',x='package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    ////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the custom concept we  \n    // we want to rank by. Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change this to rank by your own custom concept\n    static final String CONCEPT_ID = "people";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiSearchResponse postAnnotationsSearchesResponse = stub.postAnnotationsSearches(\n            PostAnnotationsSearchesRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .addSearches(\n                Search.newBuilder().setQuery(\n                    Query.newBuilder().addRanks(\n                        Rank.newBuilder().setAnnotation(\n                            Annotation.newBuilder().setData(\n                                Data.newBuilder().addConcepts( // You can search by multiple concepts\n                                    Concept.newBuilder()\n                                    .setId(CONCEPT_ID) // You could search by concept Name as well\n                                    .setValue(1f) // Value of 0 will search for images that don\'t have the concept\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n            .build()\n        );\n\n        if (postAnnotationsSearchesResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post annotations searches failed, status: " + postAnnotationsSearchesResponse.getStatus());\n        }\n\n        System.out.println("Found inputs " + postAnnotationsSearchesResponse.getHitsCount() + ":");\n        for (Hit hit : postAnnotationsSearchesResponse.getHitsList()) {\n            System.out.printf("\\tScore %.2f for annotation %s of input %s\\n", hit.getScore(), hit.getAnnotation().getId(), hit.getInput().getId());\n        }\n\n    }\n\n}',Y='package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the concepts we  \n    // we want to rank by. Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change this to a Clarifai/main concept\n    static final String CONCEPT_ID_1 = "ai_fvlBqXZR";\n    // Change this to your own custom concept\n    static final String CONCEPT_ID_2 = "people";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        // Here we search for images which we labeled with "ai_fvlBqXZR" and for which the General prediction model does not find\n        // a "people" concept.\n        MultiSearchResponse postAnnotationsSearchesResponse = stub.postAnnotationsSearches(\n            PostAnnotationsSearchesRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .addSearches(\n                Search.newBuilder().setQuery(\n                    Query.newBuilder().addRanks(\n                        Rank.newBuilder().setAnnotation(\n                            Annotation.newBuilder().setData(\n                                Data.newBuilder().addConcepts( // You can search by multiple concepts\n                                    Concept.newBuilder()\n                                    .setId(CONCEPT_ID_1) // You could search by concept Name as well\n                                    .setValue(1f) // Value of 0 will search for images that don\'t have the concept\n                                )\n                            )\n                        )\n                    )\n                    .addRanks(\n                        Rank.newBuilder().setAnnotation(\n                            Annotation.newBuilder().setData(\n                                Data.newBuilder().addConcepts( // You can search by multiple concepts\n                                    Concept.newBuilder()\n                                    .setId(CONCEPT_ID_2) // You could search by concept Name as well\n                                    .setValue(0f) // Value of 0 will search for images that don\'t have the concept\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n            .build()\n        );\n\n        if (postAnnotationsSearchesResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post annotations searches failed, status: " + postAnnotationsSearchesResponse.getStatus());\n        }\n\n        System.out.println("Found inputs " + postAnnotationsSearchesResponse.getHitsCount() + ":");\n        for (Hit hit : postAnnotationsSearchesResponse.getHitsList()) {\n            System.out.printf("\\tScore %.2f for annotation %s of input %s\\n", hit.getScore(), hit.getAnnotation().getId(), hit.getInput().getId());\n        }\n\n    }\n\n}',v='package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    //////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, concept name, and \n    // language ID. Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to what you want to search by\n    static final String CONCEPT_NAME = "\u72ac";\n    static final String LANGUAGE_ID = "ja"; // Japanese   \n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiSearchResponse postAnnotationsSearchesResponse = stub.postAnnotationsSearches(\n            PostAnnotationsSearchesRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .addSearches(\n                Search.newBuilder().setQuery(\n                    Query.newBuilder().addRanks(\n                        Rank.newBuilder().setAnnotation(\n                            Annotation.newBuilder().setData(\n                                Data.newBuilder().addConcepts( // You can search by multiple concepts\n                                    Concept.newBuilder()\n                                    .setName(CONCEPT_NAME) // You could search by concept ID as well                                    \n                                    .setValue(1f) // Value of 0 will search for images that don\'t have the concept\n                                )\n                            )\n                        )\n                    )\n                    .setLanguage(LANGUAGE_ID)\n                )\n            )\n            .build()\n        );\n\n        if (postAnnotationsSearchesResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post annotations searches failed, status: " + postAnnotationsSearchesResponse.getStatus());\n        }\n\n        System.out.println("Found inputs " + postAnnotationsSearchesResponse.getHitsCount() + ":");\n        for (Hit hit : postAnnotationsSearchesResponse.getHitsList()) {\n            System.out.printf("\\tScore %.2f for annotation %s of input %s\\n", hit.getScore(), hit.getAnnotation().getId(), hit.getInput().getId());\n        }\n\n    }\n\n}\n',j='package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    ////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and \n    // image URL. Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change this to the image URL you want to search by\n    static final String IMAGE_URL = "https://samples.clarifai.com/metro-north.jpg";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiSearchResponse postInputsSearchesResponse = stub.postInputsSearches(\n            PostInputsSearchesRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .addSearches(\n                Search.newBuilder().setQuery(\n                    Query.newBuilder().addRanks(\n                        Rank.newBuilder().setAnnotation(\n                            Input.newBuilder().setData(\n                                Data.newBuilder().setImage(\n                                    Image.newBuilder()\n                                    .setUrl(IMAGE_URL)\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n            .build()\n        );\n\n        if (postInputsSearchesResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post inputs searches failed, status: " + postInputsSearchesResponse.getStatus());\n        }\n\n        System.out.println("Found inputs " + postInputsSearchesResponse.getHitsCount() + ":");\n        for (Hit hit : postInputsSearchesResponse.getHitsList()) {\n            System.out.printf("\\tScore %.2f for input %s", hit.getScore(), hit.getInput().getId());\n        }\n\n    }\n\n}',k='package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.StatusCode;\nimport com.google.protobuf.ByteString;\nimport java.io.File;\nimport java.io.IOException;\nimport java.nio.file.Files;\n\npublic class ClarifaiExample {\n\n    /////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and image\n    // file location. Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change this to the image file location you want to search by\n    static final String IMAGE_FILE_LOCATION = "YOUR_IMAGE_FILE_LOCATION";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) throws IOException {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n\n        MultiSearchResponse postInputsSearchesResponse = stub.postInputsSearches(\n            PostInputsSearchesRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .addSearches(\n                Search.newBuilder().setQuery(\n                    Query.newBuilder().addRanks(\n                        Rank.newBuilder().setAnnotation(\n                            Input.newBuilder().setData(\n                                Data.newBuilder().setImage(\n                                    Image.newBuilder()\n                                    .setBase64(ByteString.copyFrom(Files.readAllBytes(\n                                        new File(IMAGE_FILE_LOCATION).toPath()\n                                    )))\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n            .build()\n        );\n\n        if (postInputsSearchesResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post inputs searches failed, status: " + postInputsSearchesResponse.getStatus());\n        }\n\n        System.out.println("Found inputs " + postInputsSearchesResponse.getHitsCount() + ":");\n        for (Hit hit : postInputsSearchesResponse.getHitsList()) {\n            System.out.printf("\\tScore %.2f for input %s", hit.getScore(), hit.getInput().getId());\n        }\n\n    }\n\n}',L='package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    ////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and \n    // input ID. Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change this to the input ID you want to search by\n    static final String INPUT_ID = "c29f81469db34e04b36d22b9a4aba1fa";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiSearchResponse postAnnotationsSearchesResponse = stub.postAnnotationsSearches(\n            PostAnnotationsSearchesRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .addSearches(\n                Search.newBuilder().setQuery(\n                    Query.newBuilder().addRanks(\n                        Rank.newBuilder().setAnnotation(\n                            Annotation.newBuilder().setInputId(INPUT_ID)\n                        )\n                    )\n                )\n            )\n            .build()\n        );\n\n        if (postAnnotationsSearchesResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post annotations searches failed, status: " + postAnnotationsSearchesResponse.getStatus());\n        }\n\n        System.out.println("Found inputs " + postAnnotationsSearchesResponse.getHitsCount() + ":");\n        for (Hit hit : postAnnotationsSearchesResponse.getHitsList()) {\n            System.out.printf("\\tScore %.2f for annotation %s of input %s\\n", hit.getScore(), hit.getAnnotation().getId(), hit.getInput().getId());\n        }\n\n    }\n\n}',B='package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the raw text we  \n    // we want to search by. Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change this to the raw text you want to search by\n    static final String RAW_TEXT = "black dress with white polka dots";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiSearchResponse postAnnotationsSearchesResponse = stub.postAnnotationsSearches(\n            PostAnnotationsSearchesRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .addSearches(\n                Search.newBuilder().setQuery(\n                    Query.newBuilder().addRanks(\n                        Rank.newBuilder().setAnnotation(\n                            Annotation.newBuilder().setData(\n                                Data.newBuilder().setText(\n                                    Text.newBuilder()\n                                    .setRaw(RAW_TEXT)                                 \n                                )\n                            )\n                        )\n                    )\n                )\n            )\n            .build()\n        );\n\n        if (postAnnotationsSearchesResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post annotations searches failed, status: " + postAnnotationsSearchesResponse.getStatus());\n        }\n\n        System.out.println("Found inputs " + postAnnotationsSearchesResponse.getHitsCount() + ":");\n        for (Hit hit : postAnnotationsSearchesResponse.getHitsList()) {\n            System.out.printf("\\tScore %.2f for annotation %s of input %s\\n", hit.getScore(), hit.getAnnotation().getId(), hit.getInput().getId());\n        }\n\n    }\n\n}',$='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the concept ID we  \n// we want to rank by. Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change this to rank by a Clarifai/main concept\n$CONCEPT_ID = "ai_fvlBqXZR";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\PostAnnotationsSearchesRequest;\nuse Clarifai\\Api\\Annotation;\nuse Clarifai\\Api\\Concept;\nuse Clarifai\\Api\\Data;\nuse Clarifai\\Api\\Rank;\nuse Clarifai\\Api\\Query;\nuse Clarifai\\Api\\Search;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PostAnnotationsSearches(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new PostAnnotationsSearchesRequest([\n        "user_app_id" => $userDataObject,\n        "searches" => [\n            new Search([\n                "query" => new Query([\n                    "ranks" => [\n                        new Rank([\n                            "annotation" => new Annotation([\n                                "data" => new Data([\n                                    "concepts" => [  # You can search by multiple concepts\n                                        new Concept([\n                                            "id" => $CONCEPT_ID, # You could search by concept name as well\n                                            "value" => 1 # Value of 0 will search for images that don\'t have the concept\n                                        ])\n                                    ]\n                                ])\n                            ])                            \n                        ])\n                    ]\n                ])\n            ])\n        ]\n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\necho "Search result:\\n";\nforeach ($response->getHits() as $hit) {\n    printf("\\tScore %.2f for annotation: %s off input: %s\\n", $hit->getScore(), $hit->getAnnotation()->getId(), $hit->getInput()->getId());\n}\n\n?>\n',q='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n//////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the custom concept we  \n// we want to rank by. Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change this to rank by your own custom concept\n$CONCEPT_ID = "people";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\PostAnnotationsSearchesRequest;\nuse Clarifai\\Api\\Annotation;\nuse Clarifai\\Api\\Concept;\nuse Clarifai\\Api\\Data;\nuse Clarifai\\Api\\Rank;\nuse Clarifai\\Api\\Query;\nuse Clarifai\\Api\\Search;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PostAnnotationsSearches(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new PostAnnotationsSearchesRequest([\n        "user_app_id" => $userDataObject,\n        "searches" => [\n            new Search([\n                "query" => new Query([\n                    "ranks" => [\n                        new Rank([\n                            "annotation" => new Annotation([\n                                "data" => new Data([\n                                    "concepts" => [  # You can search by multiple concepts\n                                        new Concept([\n                                            "id" => $CONCEPT_ID, # You could search by concept name as well\n                                            "value" => 1 # Value of 0 will search for images that don\'t have the concept\n                                        ])\n                                    ]\n                                ])\n                            ])                            \n                        ])\n                    ]\n                ])\n            ])\n        ]\n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\necho "Search result:\\n";\nforeach ($response->getHits() as $hit) {\n    printf("\\tScore %.2f for annotation: %s off input: %s\\n", $hit->getScore(), $hit->getAnnotation()->getId(), $hit->getInput()->getId());\n}\n\n?>\n',G='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n//////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the concepts we  \n// we want to rank by. Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change this to a Clarifai/main concept\n$CONCEPT_ID_1 = "ai_fvlBqXZR";\n// Change this to your own custom concept\n$CONCEPT_ID_2 = "people";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\PostAnnotationsSearchesRequest;\nuse Clarifai\\Api\\Annotation;\nuse Clarifai\\Api\\Concept;\nuse Clarifai\\Api\\Data;\nuse Clarifai\\Api\\Rank;\nuse Clarifai\\Api\\Filter;\nuse Clarifai\\Api\\Query;\nuse Clarifai\\Api\\Search;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PostAnnotationsSearches(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new PostAnnotationsSearchesRequest([\n        "user_app_id" => $userDataObject,\n        "searches" => [\n            new Search([\n                "query" => new Query([\n                    "ranks" => [\n                        new Rank([\n                            "annotation" => new Annotation([\n                                "data" => new Data([\n                                    "concepts" => [  # You can search by multiple concepts\n                                        new Concept([\n                                            "id" => $CONCEPT_ID_1, # You could search by concept name as well\n                                            "value" => 1 # Value of 0 will search for images that don\'t have the concept\n                                        ])\n                                    ]\n                                ])\n                            ])                            \n                        ])\n                    ],\n                    "filters" => [\n                        new Filter([\n                            "annotation" => new Annotation([\n                                "data" => new Data([\n                                    "concepts" => [  # You can search by multiple concepts\n                                        new Concept([\n                                            "id" => $CONCEPT_ID_2, # You could search by concept id as well\n                                            "value" => 0 # Value of 0 will search for images that don\'t have the concept\n                                        ])\n                                    ]\n                                ])\n                            ])                            \n                        ])\n                    ]\n                ])\n            ])\n        ]\n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\necho "Search result:\\n";\nforeach ($response->getHits() as $hit) {\n    printf("\\tScore %.2f for annotation: %s off input: %s\\n", $hit->getScore(), $hit->getAnnotation()->getId(), $hit->getInput()->getId());\n}\n\n?>\n',Q='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n//////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, concept name, and \n// language ID. Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n# Change these to what you want to search by\n$CONCEPT_NAME = "\u72ac";\n$LANGUAGE_ID = "ja"; // Japanese\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\PostAnnotationsSearchesRequest;\nuse Clarifai\\Api\\Annotation;\nuse Clarifai\\Api\\Concept;\nuse Clarifai\\Api\\Data;\nuse Clarifai\\Api\\Rank;\nuse Clarifai\\Api\\Query;\nuse Clarifai\\Api\\Search;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PostAnnotationsSearches(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new PostAnnotationsSearchesRequest([\n        "user_app_id" => $userDataObject,\n        "searches" => [\n            new Search([\n                "query" => new Query([\n                    "ranks" => [\n                        new Rank([\n                            "annotation" => new Annotation([\n                                "data" => new Data([\n                                    "concepts" => [  # You can search by multiple concepts\n                                        new Concept([\n                                            "name" => $CONCEPT_NAME, # You could search by concept id as well                                           \n                                            "value" => 1 # Value of 0 will search for images that don\'t have the concept\n                                        ])\n                                    ]\n                                ])\n                            ])                            \n                        ])\n                    ],\n                    "language" => $LANGUAGE_ID\n                ])\n            ])\n        ]\n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\necho "Search result:\\n";\nforeach ($response->getHits() as $hit) {\n    printf("\\tScore %.2f for annotation: %s off input: %s\\n", $hit->getScore(), $hit->getAnnotation()->getId(), $hit->getInput()->getId());\n}\n\n?>\n',M='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n//////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and \n// image URL. Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n# Change this to the image URL you want to search by\n$IMAGE_URL = \'https://samples.clarifai.com/metro-north.jpg\';\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\PostAnnotationsSearchesRequest;\nuse Clarifai\\Api\\Annotation;\nuse Clarifai\\Api\\Concept;\nuse Clarifai\\Api\\Data;\nuse Clarifai\\Api\\Rank;\nuse Clarifai\\Api\\Query;\nuse Clarifai\\Api\\Search;\nuse Clarifai\\Api\\Image;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PostAnnotationsSearches(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new PostAnnotationsSearchesRequest([\n        "user_app_id" => $userDataObject,\n        "searches" => [\n            new Search([\n                "query" => new Query([\n                    "ranks" => [\n                        new Rank([\n                            "annotation" => new Annotation([\n                                "data" => new Data([\n                                    "image" => new Image([\n                                        "url" => $IMAGE_URL\n                                    ])\n                                ])\n                            ])                            \n                        ])\n                    ]\n                ])\n            ])\n        ]\n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\necho "Search result:\\n";\nforeach ($response->getHits() as $hit) {\n    printf("\\tScore %.2f for input: %s\\n", $hit->getScore(), $hit->getInput()->getId());\n}\n\n?>\n',V='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n//////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and image\n// file location. Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n# Change this to the image file location you want to search by\n$IMAGE_FILE_LOCATION = "YOUR_IMAGE_FILE_LOCATION";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\PostAnnotationsSearchesRequest;\nuse Clarifai\\Api\\Annotation;\nuse Clarifai\\Api\\Concept;\nuse Clarifai\\Api\\Data;\nuse Clarifai\\Api\\Rank;\nuse Clarifai\\Api\\Query;\nuse Clarifai\\Api\\Search;\nuse Clarifai\\Api\\Image;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n$imageData = file_get_contents($IMAGE_FILE_LOCATION); // Get the image bytes data from the location\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PostAnnotationsSearches(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new PostAnnotationsSearchesRequest([\n        "user_app_id" => $userDataObject,\n        "searches" => [\n            new Search([\n                "query" => new Query([\n                    "ranks" => [\n                        new Rank([\n                            "annotation" => new Annotation([\n                                "data" => new Data([\n                                    "image" => new Image([\n                                        "base64" => $imageData\n                                    ])\n                                ])\n                            ])                            \n                        ])\n                    ]\n                ])\n            ])\n        ]\n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\necho "Search result:\\n";\nforeach ($response->getHits() as $hit) {\n    printf("\\tScore %.2f for input: %s\\n", $hit->getScore(), $hit->getInput()->getId());\n}\n\n?>\n',K='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n//////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and \n// input ID. Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change this to the input ID you want to search by\n$INPUT_ID = "9dc2185524d8422eb1900848f70134db";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\PostAnnotationsSearchesRequest;\nuse Clarifai\\Api\\Annotation;\nuse Clarifai\\Api\\Data;\nuse Clarifai\\Api\\Rank;\nuse Clarifai\\Api\\Query;\nuse Clarifai\\Api\\Search;\nuse Clarifai\\Api\\Image;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PostAnnotationsSearches(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new PostAnnotationsSearchesRequest([\n        "user_app_id" => $userDataObject,\n        "searches" => [\n            new Search([\n                "query" => new Query([\n                    "ranks" => [\n                        new Rank([\n                            "annotation" => new Annotation([\n                                "input_id" => $INPUT_ID\n                            ])                            \n                        ])\n                    ]\n                ])\n            ])\n        ]\n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\necho "Search result:\\n";\nforeach ($response->getHits() as $hit) {\n    printf("\\tScore %.2f for annotation: %s off input: %s\\n", $hit->getScore(), $hit->getAnnotation()->getId(), $hit->getInput()->getId());\n}\n\n?>\n',X='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the raw text we  \n// we want to search by. Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change this to the raw text you want to search by\n$RAW_TEXT = "black dress with white polka dots";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\PostAnnotationsSearchesRequest;\nuse Clarifai\\Api\\Annotation;\nuse Clarifai\\Api\\Concept;\nuse Clarifai\\Api\\Data;\nuse Clarifai\\Api\\Rank;\nuse Clarifai\\Api\\Query;\nuse Clarifai\\Api\\Search;\nuse Clarifai\\Api\\Text;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PostAnnotationsSearches(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new PostAnnotationsSearchesRequest([\n        "user_app_id" => $userDataObject,\n        "searches" => [\n            new Search([\n                "query" => new Query([\n                    "ranks" => [\n                        new Rank([\n                            "annotation" => new Annotation([\n                                "data" => new Data([\n                                    "text" => new Text([\n                                        "raw" => $RAW_TEXT\n                                    ])\n                                ])\n                            ])                            \n                        ])\n                    ]\n                ])\n            ])\n        ]\n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\necho "Search result:\\n";\nforeach ($response->getHits() as $hit) {\n    printf("\\tScore %.2f for annotation: %s off input: %s\\n", $hit->getScore(), $hit->getAnnotation()->getId(), $hit->getInput()->getId());\n}\n\n?>\n',J='# Value of 0 will search for images that don\'t have the concept.\n# Instead of "id", you can search by "name" as well.\n\ncurl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/annotations/searches" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "searches": [\n      {\n        "query": {\n        "ranks": [\n            {\n            "annotation": {\n                "data": {\n                "concepts": [\n                    {\n                    "id":"ai_fvlBqXZR",\n                    "value": 1\n                    }\n                ]\n                }\n            }\n            }\n        ]\n       }\n      }\n    ]\n  }\'',W='# Value of 0 will search for images that don\'t have the concept.\n# Instead of "id", you can search by "name" as well.\n\ncurl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/annotations/searches" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "searches": [\n      {\n        "query": {\n        "ranks": [\n            {\n            "annotation": {\n                "data": {\n                "concepts": [\n                    {\n                    "id":"people",\n                    "value": 1\n                    }\n                ]\n                }\n            }\n            }\n        ]\n        }\n      }\n    ]\n  }\'',z='# Value of 0 will search for images that don\'t have the concept.\n# Instead of "id", you can search by "name" as well.\n# Here we search for images which we labeled with "ai_fvlBqXZR" and for which the General prediction model does not find\n# a "people" concept.\n\ncurl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/annotations/searches" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "searches": [\n      {\n        "query": {\n        "ranks": [\n            {\n            "annotation": {\n                "data": {\n                "concepts": [\n                    {\n                    "id":"ai_fvlBqXZR",\n                    "value": 1\n                    }\n                ]\n                }\n            }\n            }, {   \n            "annotation": {\n                "data": {\n                "concepts": [\n                    {\n                    "id":"people",\n                    "value": 0\n                    }\n                ]\n                }\n            }\n            }\n        ]\n        }\n      }\n    ]\n  }\'',F='# Value of 0 will search for images that don\'t have the concept.\n# Instead of "name", you can search by "id" as well.\n\ncurl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/annotations/searches" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "searches": [\n      {\n        "query": {\n          "ranks": [\n            {\n              "annotation": {\n                "data": {\n                  "concepts": [\n                    {\n                      "name": "\u72ac",\n                      "value": 1\n                    }\n                  ]\n                }\n              }\n            }\n          ],\n          "language": "ja"\n        }\n      }\n    ]\n  }\'\n',Z='curl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/inputs/searches" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "searches": [\n      {\n        "query": {\n        "ranks": [\n            {\n            "annotation": {\n                "data": {\n                "image": {\n                    "url": "https://samples.clarifai.com/metro-north.jpg"\n                }\n                }\n            }\n            }\n        ]\n        }\n      }\n    ]\n  }\'',nn='curl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/inputs/searches" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "searches": [\n      {\n        "query": {\n        "ranks": [\n            {\n            "annotation": {\n                "data": {\n                "image": {\n                    "base64": "/9j/4AAQSkZJRgABAQAAAQABAAD/2wBDAAUDBAQEAwUEBAQFBQUGBwwIBwcHBw8LCwkMEQ8SEhEPERETFhwXExQaFRERGCEYGh0dHx8fExciJCIeJBweHx7/2wBDAQUFBQcGBw4ICA4eFBEUHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh7/wAARCAAoACgDASIAAhEBAxEB/8QAGQAAAgMBAAAAAAAAAAAAAAAAAAYDBQcE/8QAMBAAAQMDAwMDAgQHAAAAAAAAAQIDBAAFEQYSIQcTMTJBURRhCBYikSNScXKhsdH/xAAZAQACAwEAAAAAAAAAAAAAAAAFBgIDBAf/xAAtEQABAwMBBgQHAQAAAAAAAAABAgMRAAQhMQUSE0FRYQaBocEUFiJCcrHR8P/aAAwDAQACEQMRAD8A3+RYY1unSYzCS0ttZUkAgktn0q5yT7jPyDUC4wdGwycH5U2Kt9ZQ7VI1qw5PkvQy3CSVPpf7aQjuKyFH25xzn3pHn3TVNy01Hl2hyy6YdkSpKsS9sl/6RlI3rRu3dxWd6spwnAGPIJTfl925fcLaoSDHXvyo6i9SlCQrU9wKln3OyWiaDN1RAbW3kKbSd7gPtwMkH/tTWy9afuy1iPfnXMAblITwkE4yf08cn3pSbYt1uts24XH6fUbiLAuY1MWyGkLEmUW0rcCRvUpQ5CtwKQCPgi4S1ZbDe4sd9NntDEe79m3uOBLTr0IR9jzodSMqUpTu9JJ8owD7UTT4ZCfv9PbP7860m+s+HBSrejWRuz2kAxoesGYxTW/Zlpkwo1vkuSly3UgKWQUhHJUvIHsAaKTemF8XE6sWmxyZkiaZrMh1jv8ArQNpUVqB8FW0njHqx4zRVVhsph1KlKk5xQ+7uHmikaSJrQerMByet2IwvtuTLa4xv2k7Rk84H9x/esHv92d01boenLXGcuiWrFIhLlpbcaQ2/JdK3VJCkAq2pAR7Zz7YxWudY9fxNIdQbNGkR5TyX4aisNNpUMFZAzkj4NK0jq9ZpbLr0PSlzkhrlZDaQlP3P8Q4/ap3F87bPucJEkx/hHv60b2TYXLrKN5sramYECSQRk9M6c6zmJ+eb5Hi22M7cnWGIQgFLbX0zSo4PDa1YBcTgDyMjJ/qbGPabH08SJt1Uzc9QqRliGg5QySPKvgc+TyfYDmmTUWpNYz7ctxoQdPQshCktupckDJUPUcJT6DwMq8YyaQ9VL0pCS8zapcq4SVOBZmPDO8/cnknlWcDBwn4NYnPjLkQ+qE9OtOVlYpeVHDCEkkkJyT+SuQzy5Y0ru6Ez511/Efa5s1fdkOtyVurIxgdlQAA9gOKKPwolU7remU5hCGYEgo38KUv9I/0TRTDYJCWQBSF4rIN/CRgAR0iTpVD1j1g/qDqJcJqlKcjB9bcda142MpOEJAzgeMnjyTSyze5KEuNRpDoDvC0oe4X9iAeaKKFK+oya6fbOqYbDTeEiAPKpHdS3gBLYc7RQkp3ApQog+cq8nwPJrljzxnPZbUfnugn/NFFRgEVch9xKsH0H8pg6e3x3T3UC1ajaZITGkJLoS4MKbOUrzz/ACKVRRRVzVwtoQmhG1NkWu0HuI+JI8u/Kv/Z"\n                }\n                }\n            }\n            }\n        ]\n        }\n      }\n    ]\n  }\'',en='curl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/annotations/searches" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "searches": [\n      {\n        "query": {\n          "ranks": [\n            {\n              "annotation": {\n                     "input_id": "c29f81469db34e04b36d22b9a4aba1fa"              \n              }\n            }\n          ]\n        }\n      }\n    ]\n  }\'',tn='curl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/annotations/searches" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "searches": [\n      {\n        "query": {\n        "ranks": [\n            {\n            "annotation": {\n                "data": {\n                "text": {\n                    "raw": "black dress with white polka dots"\n                }\n                }\n            }\n            }\n        ]\n        }\n      }\n    ]\n  }\'',an={description:"Search your data based on concepts or visual similarity",sidebar_position:4},sn="Rank",on={},rn=[{value:"Search by Concepts",id:"search-by-concepts",level:2},{value:"By Clarifai/main App Concepts",id:"by-clarifaimain-app-concepts",level:3},{value:"By Custom Concepts",id:"by-custom-concepts",level:3},{value:"By Clarifai/main and Custom Concepts",id:"by-clarifaimain-and-custom-concepts",level:3},{value:"By Concept in Another Language",id:"by-concept-in-another-language",level:3},{value:"Search by Visual Similarity",id:"search-by-visual-similarity",level:2},{value:"Search by Image URL",id:"search-by-image-url",level:3},{value:"Search by Image Bytes",id:"search-by-image-bytes",level:3},{value:"By Input ID",id:"by-input-id",level:3},{value:"Search by Text Similarity",id:"search-by-text-similarity",level:2}];function cn(n){const e={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",p:"p",strong:"strong",ul:"ul",...(0,i.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"rank",children:"Rank"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Search your data based on concepts or visual similarity"})}),"\n",(0,s.jsx)("hr",{}),"\n",(0,s.jsx)(e.p,{children:"You can rank order your search results with the intuitive insights of an AI. Your model can identify concepts in your data and rank search results by how confident it is that a given concept is present."}),"\n",(0,s.jsx)(e.p,{children:"You can even rank search results by how similar one input is to another input or region of the input model detected. The search results will return the input and also the annotation, which includes the region."}),"\n",(0,s.jsxs)(e.p,{children:["In annotation search, ",(0,s.jsx)(e.code,{children:"Rank"})," is a list of ",(0,s.jsx)(e.code,{children:"Annotation"})," objects."]}),"\n",(0,s.jsx)(e.admonition,{type:"info",children:(0,s.jsxs)(e.p,{children:["The initialization code used in the following examples is outlined in detail on the ",(0,s.jsx)(e.a,{href:"https://docs.clarifai.com/api-guide/api-overview/api-clients/#client-installation-instructions",children:"client installation page."})]})}),"\n",(0,s.jsx)(e.admonition,{type:"tip",children:(0,s.jsxs)(e.p,{children:["You can learn how to paginate your API requests results ",(0,s.jsx)(e.a,{href:"https://docs.clarifai.com/api-guide/advanced-topics/pagination/",children:"here"}),"."]})}),"\n","\n","\n","\n","\n","\n","\n","\n",(0,s.jsx)(e.h2,{id:"search-by-concepts",children:"Search by Concepts"}),"\n",(0,s.jsx)(e.p,{children:"Once your inputs are indexed, you can search for them by concepts."}),"\n",(0,s.jsx)(e.h3,{id:"by-clarifaimain-app-concepts",children:"By Clarifai/main App Concepts"}),"\n",(0,s.jsxs)(e.p,{children:["When you add an input, it automatically gets predictions from the workflow in your ",(0,s.jsx)(e.a,{href:"https://docs.clarifai.com/portal-guide/workflows/base-workflows",children:"base workflow"}),", which is typically from the ",(0,s.jsx)(e.a,{href:"https://clarifai.com/clarifai/main",children:(0,s.jsx)(e.code,{children:"clarifai/main"})})," app, such as the ",(0,s.jsx)(e.a,{href:"https://clarifai.com/clarifai/main/workflows/Universal",children:"Universal"})," workflow. You can search by those predictions."]}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.a,{href:"https://docs.clarifai.com/api-guide/concepts/create-get-update#list-concepts",children:"Click here"})," to learn how to get a list of concepts available in the app."]}),"\n",(0,s.jsxs)(o.A,{children:[(0,s.jsx)(r.A,{value:"python",label:"Python",children:(0,s.jsx)(c.A,{className:"language-python",children:l})}),(0,s.jsx)(r.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:E})}),(0,s.jsx)(r.A,{value:"nodejs",label:"NodeJS",children:(0,s.jsx)(c.A,{className:"language-javascript",children:w})}),(0,s.jsx)(r.A,{value:"java",label:"Java",children:(0,s.jsx)(c.A,{className:"language-java",children:H})}),(0,s.jsx)(r.A,{value:"php",label:"PHP",children:(0,s.jsx)(c.A,{className:"language-php",children:$})}),(0,s.jsx)(r.A,{value:"curl",label:"cURL",children:(0,s.jsx)(c.A,{className:"language-bash",children:J})})]}),"\n",(0,s.jsx)(e.h3,{id:"by-custom-concepts",children:"By Custom Concepts"}),"\n",(0,s.jsx)(e.p,{children:"After you have added inputs, annotated the inputs, and trained a custom model, you can search by those concepts."}),"\n",(0,s.jsxs)(o.A,{children:[(0,s.jsx)(r.A,{value:"python",label:"Python",children:(0,s.jsx)(c.A,{className:"language-python",children:u})}),(0,s.jsx)(r.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:g})}),(0,s.jsx)(r.A,{value:"nodejs",label:"NodeJS",children:(0,s.jsx)(c.A,{className:"language-javascript",children:b})}),(0,s.jsx)(r.A,{value:"java",label:"Java",children:(0,s.jsx)(c.A,{className:"language-java",children:x})}),(0,s.jsx)(r.A,{value:"php",label:"PHP",children:(0,s.jsx)(c.A,{className:"language-php",children:q})}),(0,s.jsx)(r.A,{value:"curl",label:"cURL",children:(0,s.jsx)(c.A,{className:"language-bash",children:W})})]}),"\n",(0,s.jsx)(e.h3,{id:"by-clarifaimain-and-custom-concepts",children:"By Clarifai/main and Custom Concepts"}),"\n",(0,s.jsx)(e.p,{children:"You can combine a search to find inputs that have concepts you have supplied as well as predictions from your model."}),"\n",(0,s.jsxs)(o.A,{children:[(0,s.jsx)(r.A,{value:"python",label:"Python",children:(0,s.jsx)(c.A,{className:"language-python",children:p})}),(0,s.jsx)(r.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:I})}),(0,s.jsx)(r.A,{value:"nodejs",label:"NodeJS",children:(0,s.jsx)(c.A,{className:"language-javascript",children:T})}),(0,s.jsx)(r.A,{value:"java",label:"Java",children:(0,s.jsx)(c.A,{className:"language-java",children:Y})}),(0,s.jsx)(r.A,{value:"php",label:"PHP",children:(0,s.jsx)(c.A,{className:"language-php",children:G})}),(0,s.jsx)(r.A,{value:"curl",label:"cURL",children:(0,s.jsx)(c.A,{className:"language-bash",children:z})})]}),"\n",(0,s.jsx)(e.h3,{id:"by-concept-in-another-language",children:"By Concept in Another Language"}),"\n",(0,s.jsx)(e.p,{children:"Concepts that have a translation into another language can be searched for in that language, even without having the default language for your app being in that language. This uses the Clarifai's knowledge graph to lookup the translation and then perform the search."}),"\n",(0,s.jsxs)(e.p,{children:['For example, if your app is in English and you want to search for "dog" in Japanese, then you could search with ',(0,s.jsx)(e.code,{children:'language="ja"'})," and ",(0,s.jsx)(e.code,{children:'name="\u72ac"'}),"."]}),"\n",(0,s.jsxs)(o.A,{children:[(0,s.jsx)(r.A,{value:"python",label:"Python",children:(0,s.jsx)(c.A,{className:"language-python",children:h})}),(0,s.jsx)(r.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:S})}),(0,s.jsx)(r.A,{value:"nodejs",label:"NodeJS",children:(0,s.jsx)(c.A,{className:"language-javascript",children:D})}),(0,s.jsx)(r.A,{value:"java",label:"Java",children:(0,s.jsx)(c.A,{className:"language-java",children:v})}),(0,s.jsx)(r.A,{value:"php",label:"PHP",children:(0,s.jsx)(c.A,{className:"language-php",children:Q})}),(0,s.jsx)(r.A,{value:"curl",label:"cURL",children:(0,s.jsx)(c.A,{className:"language-bash",children:F})})]}),"\n",(0,s.jsx)(e.h2,{id:"search-by-visual-similarity",children:"Search by Visual Similarity"}),"\n",(0,s.jsx)(e.p,{children:"You can use images to search through your collection. The API will return ranked results based on how similar the results are to the image you provided in your query."}),"\n",(0,s.jsx)(e.h3,{id:"search-by-image-url",children:"Search by Image URL"}),"\n",(0,s.jsxs)(o.A,{children:[(0,s.jsx)(r.A,{value:"python",label:"Python",children:(0,s.jsx)(c.A,{className:"language-python",children:d})}),(0,s.jsx)(r.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:C})}),(0,s.jsx)(r.A,{value:"nodejs",label:"NodeJS",children:(0,s.jsx)(c.A,{className:"language-javascript",children:y})}),(0,s.jsx)(r.A,{value:"java",label:"Java",children:(0,s.jsx)(c.A,{className:"language-java",children:j})}),(0,s.jsx)(r.A,{value:"php",label:"PHP",children:(0,s.jsx)(c.A,{className:"language-php",children:M})}),(0,s.jsx)(r.A,{value:"curl",label:"cURL",children:(0,s.jsx)(c.A,{className:"language-bash",children:Z})})]}),"\n",(0,s.jsx)(e.h3,{id:"search-by-image-bytes",children:"Search by Image Bytes"}),"\n",(0,s.jsx)(e.p,{children:"You can also search for an input by bytes, with the bytes being from local storage."}),"\n",(0,s.jsxs)(o.A,{children:[(0,s.jsx)(r.A,{value:"python",label:"Python",children:(0,s.jsx)(c.A,{className:"language-python",children:A})}),(0,s.jsx)(r.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:P})}),(0,s.jsx)(r.A,{value:"nodejs",label:"NodeJS",children:(0,s.jsx)(c.A,{className:"language-javascript",children:O})}),(0,s.jsx)(r.A,{value:"java",label:"Java",children:(0,s.jsx)(c.A,{className:"language-java",children:k})}),(0,s.jsx)(r.A,{value:"php",label:"PHP",children:(0,s.jsx)(c.A,{className:"language-php",children:V})}),(0,s.jsx)(r.A,{value:"curl",label:"cURL",children:(0,s.jsx)(c.A,{className:"language-bash",children:nn})})]}),"\n",(0,s.jsx)(e.h3,{id:"by-input-id",children:"By Input ID"}),"\n",(0,s.jsx)(e.p,{children:"If the input has been indexed, we can use the input ID. If there are multiple embeddings (for example multiple regions), we will average the embeddings."}),"\n",(0,s.jsxs)(o.A,{children:[(0,s.jsx)(r.A,{value:"python",label:"Python",children:(0,s.jsx)(c.A,{className:"language-python",children:_})}),(0,s.jsx)(r.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:m})}),(0,s.jsx)(r.A,{value:"nodejs",label:"NodeJS",children:(0,s.jsx)(c.A,{className:"language-javascript",children:U})}),(0,s.jsx)(r.A,{value:"java",label:"Java",children:(0,s.jsx)(c.A,{className:"language-java",children:L})}),(0,s.jsx)(r.A,{value:"php",label:"PHP",children:(0,s.jsx)(c.A,{className:"language-php",children:K})}),(0,s.jsx)(r.A,{value:"curl",label:"cURL",children:(0,s.jsx)(c.A,{className:"language-bash",children:en})})]}),"\n",(0,s.jsx)(e.h2,{id:"search-by-text-similarity",children:"Search by Text Similarity"}),"\n",(0,s.jsx)(e.p,{children:"You can use texts to search through your collection of texts. The text-to-text search will return ranked results based on how similar the results are to the text you provided in your query."}),"\n",(0,s.jsxs)(e.admonition,{type:"tip",children:[(0,s.jsx)(e.mdxAdmonitionTitle,{}),(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["To perform text-to-text searches, you could choose a workflow that includes a text embedder and a clusterer, such as the ",(0,s.jsx)(e.a,{href:"https://clarifai.com/clarifai/main/workflows/Text",children:(0,s.jsx)(e.strong,{children:"Text"})})," workflow, as the ",(0,s.jsx)(e.a,{href:"https://docs.clarifai.com/portal-guide/workflows/base-workflows/",children:"base workflow"})," for your application."]}),"\n",(0,s.jsxs)(e.li,{children:["To perform text-to-image searches, you could choose ",(0,s.jsx)(e.a,{href:"https://clarifai.com/clarifai/main/workflows/Universal",children:(0,s.jsx)(e.strong,{children:"Universal"})})," as the base workflow, which allows you to use texts to search through your collection of images."]}),"\n"]})]}),"\n",(0,s.jsxs)(o.A,{children:[(0,s.jsx)(r.A,{value:"python",label:"Python",children:(0,s.jsx)(c.A,{className:"language-python",children:f})}),(0,s.jsx)(r.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:R})}),(0,s.jsx)(r.A,{value:"nodejs",label:"NodeJS",children:(0,s.jsx)(c.A,{className:"language-javascript",children:N})}),(0,s.jsx)(r.A,{value:"java",label:"Java",children:(0,s.jsx)(c.A,{className:"language-java",children:B})}),(0,s.jsx)(r.A,{value:"php",label:"PHP",children:(0,s.jsx)(c.A,{className:"language-php",children:X})}),(0,s.jsx)(r.A,{value:"curl",label:"cURL",children:(0,s.jsx)(c.A,{className:"language-bash",children:tn})})]})]})}function ln(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(cn,{...n})}):cn(n)}},65537:(n,e,t)=>{t.d(e,{A:()=>P});var a=t(96540),s=t(18215),i=t(65627),o=t(56347),r=t(50372),c=t(30604),l=t(11861),u=t(78749);function p(n){return a.Children.toArray(n).filter((n=>"\n"!==n)).map((n=>{if(!n||(0,a.isValidElement)(n)&&function(n){const{props:e}=n;return!!e&&"object"==typeof e&&"value"in e}(n))return n;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof n.type?n.type:n.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(n){const{values:e,children:t}=n;return(0,a.useMemo)((()=>{const n=e??function(n){return p(n).map((n=>{let{props:{value:e,label:t,attributes:a,default:s}}=n;return{value:e,label:t,attributes:a,default:s}}))}(t);return function(n){const e=(0,l.XI)(n,((n,e)=>n.value===e.value));if(e.length>0)throw new Error(`Docusaurus error: Duplicate values "${e.map((n=>n.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(n),n}),[e,t])}function d(n){let{value:e,tabValues:t}=n;return t.some((n=>n.value===e))}function A(n){let{queryString:e=!1,groupId:t}=n;const s=(0,o.W6)(),i=function(n){let{queryString:e=!1,groupId:t}=n;if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:e,groupId:t});return[(0,c.aZ)(i),(0,a.useCallback)((n=>{if(!i)return;const e=new URLSearchParams(s.location.search);e.set(i,n),s.replace({...s.location,search:e.toString()})}),[i,s])]}function _(n){const{defaultValue:e,queryString:t=!1,groupId:s}=n,i=h(n),[o,c]=(0,a.useState)((()=>function(n){let{defaultValue:e,tabValues:t}=n;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!d({value:e,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${t.map((n=>n.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const a=t.find((n=>n.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:e,tabValues:i}))),[l,p]=A({queryString:t,groupId:s}),[_,f]=function(n){let{groupId:e}=n;const t=function(n){return n?`docusaurus.tab.${n}`:null}(e),[s,i]=(0,u.Dv)(t);return[s,(0,a.useCallback)((n=>{t&&i.set(n)}),[t,i])]}({groupId:s}),E=(()=>{const n=l??_;return d({value:n,tabValues:i})?n:null})();(0,r.A)((()=>{E&&c(E)}),[E]);return{selectedValue:o,selectValue:(0,a.useCallback)((n=>{if(!d({value:n,tabValues:i}))throw new Error(`Can't select invalid tab value=${n}`);c(n),p(n),f(n)}),[p,f,i]),tabValues:i}}var f=t(9136);const E={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var g=t(74848);function I(n){let{className:e,block:t,selectedValue:a,selectValue:o,tabValues:r}=n;const c=[],{blockElementScrollPositionUntilNextRender:l}=(0,i.a_)(),u=n=>{const e=n.currentTarget,t=c.indexOf(e),s=r[t].value;s!==a&&(l(e),o(s))},p=n=>{let e=null;switch(n.key){case"Enter":u(n);break;case"ArrowRight":{const t=c.indexOf(n.currentTarget)+1;e=c[t]??c[0];break}case"ArrowLeft":{const t=c.indexOf(n.currentTarget)-1;e=c[t]??c[c.length-1];break}}e?.focus()};return(0,g.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":t},e),children:r.map((n=>{let{value:e,label:t,attributes:i}=n;return(0,g.jsx)("li",{role:"tab",tabIndex:a===e?0:-1,"aria-selected":a===e,ref:n=>{c.push(n)},onKeyDown:p,onClick:u,...i,className:(0,s.A)("tabs__item",E.tabItem,i?.className,{"tabs__item--active":a===e}),children:t??e},e)}))})}function S(n){let{lazy:e,children:t,selectedValue:i}=n;const o=(Array.isArray(t)?t:[t]).filter(Boolean);if(e){const n=o.find((n=>n.props.value===i));return n?(0,a.cloneElement)(n,{className:(0,s.A)("margin-top--md",n.props.className)}):null}return(0,g.jsx)("div",{className:"margin-top--md",children:o.map(((n,e)=>(0,a.cloneElement)(n,{key:e,hidden:n.props.value!==i})))})}function C(n){const e=_(n);return(0,g.jsxs)("div",{className:(0,s.A)("tabs-container",E.tabList),children:[(0,g.jsx)(I,{...e,...n}),(0,g.jsx)(S,{...e,...n})]})}function P(n){const e=(0,f.A)();return(0,g.jsx)(C,{...n,children:p(n.children)},String(e))}},79329:(n,e,t)=>{t.d(e,{A:()=>o});t(96540);var a=t(18215);const s={tabItem:"tabItem_Ymn6"};var i=t(74848);function o(n){let{children:e,hidden:t,className:o}=n;return(0,i.jsx)("div",{role:"tabpanel",className:(0,a.A)(s.tabItem,o),hidden:t,children:e})}}}]);
"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[4221],{92904:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>Y,contentTitle:()=>H,default:()=>M,frontMatter:()=>L,metadata:()=>w,toc:()=>y});var s=t(74848),r=t(28453),a=t(11470),i=t(19365),o=t(21432);const l='#############################################################################################\n# In this section, we set the user authentication, app ID, and the model evaluation ID.\n# Change these strings to run your own example.\n############################################################################################\n\nUSER_ID = "YOUR_USER_ID_HERE"\n# Your PAT (Personal Access Token) can be found in the Account\'s Security section\nPAT = "YOUR_PAT_HERE"\nAPP_ID = "YOUR_APP_ID_HERE"\n# Change this to get your model evaluation results\nEVALUATION_ID = "YOUR_EVALUATION_ID_HERE"\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (("authorization", "Key " + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\nget_evaluation_response = stub.GetEvaluation(\n    service_pb2.GetEvaluationRequest(\n        user_app_id=userDataObject,\n        evaluation_id=EVALUATION_ID, # returned after starting an evaluation\n        fields=resources_pb2.FieldsValue(\n            confusion_matrix=True,\n            cooccurrence_matrix=True,\n            label_counts=True,\n            binary_metrics=True,\n            test_set=True,\n            metrics_by_area=True,\n            metrics_by_class=True,\n        ),\n    ),\n    metadata=metadata,\n)\n\nif get_evaluation_response.status.code != status_code_pb2.SUCCESS:\n    print(get_evaluation_response.status)\n    raise Exception(\n        "Get model metrics failed, status: "\n        + get_evaluation_response.status.description\n    )\n\nprint(get_evaluation_response)\n',c='\x3c!--index.html file--\x3e\n\n<script>\n    ////////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the model evaluation ID.\n    // Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = "YOUR_USER_ID_HERE";\n    // Your PAT (Personal Access Token) can be found in the Account\'s Security section\n    const PAT = "YOUR_PAT_HERE";\n    const APP_ID = "YOUR_APP_ID_HERE";\n    // Change this to get your model evaluation results\n    const EVALUATION_ID = "YOUR_EVALUATION_ID_HERE";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const requestOptions = {\n        method: "GET",\n        headers: {\n            "Accept": "application/json",\n            "Authorization": "Key " + PAT\n        }\n\n    };\n\n    fetch(`https://api.clarifai.com/v2/users/${USER_ID}/apps/${APP_ID}/evaluations/${EVALUATION_ID}`, requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log(\'error\', error));\n\n<\/script>\n',p='//index.js file\n\n//////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the model evaluation ID.\n// Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = "YOUR_PAT_HERE";\nconst APP_ID = "YOUR_APP_ID_HERE";\n// Change this to get your model evaluation results\nconst EVALUATION_ID = "YOUR_EVALUATION_ID_HERE";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.GetEvaluation(\n  {\n    user_app_id: {\n      user_id: USER_ID,\n      app_id: APP_ID,\n    },\n\n    evaluation_id: EVALUATION_ID, // returned after starting an evaluation\n    fields: {\n      confusion_matrix: true,\n      cooccurrence_matrix: true,\n      label_counts: true,\n      binary_metrics: true,\n      test_set: true,\n      metrics_by_area: true,\n      metrics_by_class: true\n    }\n  \n  },\n\n  metadata,\n\n  (err, response) => {\n    if (err) {\n      throw new Error(err);\n    }\n\n    if (response.status.code !== 10000) {\n      throw new Error("Get model metrics failed, status: " + response.status.description);\n    }  \n\n    console.log(response);\n\n  }\n\n);\n',h='package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    //////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the model evaluation ID.\n    // Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    // Your PAT (Personal Access Token) can be found in the Account\'s Security section\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change this to get your model evaluation results\n    static final String EVALUATION_ID = "YOUR_EVALUATION_ID_HERE";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n    \n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n                .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        SingleEvalMetricsResponse postEvaluationsResponse = stub.getEvaluation(\n                GetEvaluationRequest.newBuilder()\n                        .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n                        .setEvaluationId(EVALUATION_ID) // returned after starting an evaluation\n                        .setFields(FieldsValue.newBuilder()\n                                .setConfusionMatrix(true)\n                                .setCooccurrenceMatrix(true)\n                                .setLabelCounts(true)\n                                .setBinaryMetrics(true)\n                                .setTestSet(true)\n                                .setMetricsByArea(true)\n                                .setMetricsByClass(true)\n                        )\n                        .build()\n        );\n\n        if (postEvaluationsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Evaluate model failed, status: " + postEvaluationsResponse.getStatus());\n        }\n\n        System.out.println(postEvaluationsResponse);\n\n    }\n\n}\n',d='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n////////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the model evaluation ID.\n// Change these strings to run your own example.\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change this to get your model evaluation results\n$EVALUATION_ID = "YOUR_EVALUATION_ID_HERE";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\GetEvaluationRequest;\nuse Clarifai\\Api\\FieldsValue;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID,\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->GetEvaluation(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new GetEvaluationRequest([\n        "user_app_id" => $userDataObject,\n        "evaluation_id" => $EVALUATION_ID, // returned after starting an evaluation\n        "fields" => new FieldsValue([\n            "confusion_matrix" => True,\n            "cooccurrence_matrix" => True,\n            "label_counts" => True,\n            "binary_metrics" => True,\n            "test_set" => True,\n            "metrics_by_area" => True,\n            "metrics_by_class" => True\n        ])\n\n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure\n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription() . " " . $response->getStatus()->getDetails());\n}\n\necho $response->serializeToJsonString();\n\n?>',u='curl -X GET "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/evaluations/YOUR_EVALUATION_ID_HERE/" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \n  ',_='#################################################################################\n# In this section, we set the user authentication and app ID.\n# Change these strings to run your own example.\n#################################################################################\n\nUSER_ID = "YOUR_USER_ID_HERE"\n# Your PAT (Personal Access Token) can be found in the Account\'s Security section\nPAT = "YOUR_PAT_HERE"\nAPP_ID = "YOUR_APP_ID_HERE"\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (("authorization", "Key " + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\nlist_evaluation_response = stub.ListEvaluations(\n    service_pb2.ListEvaluationsRequest(user_app_id=userDataObject),\n    metadata=metadata,\n)\n\nif list_evaluation_response.status.code != status_code_pb2.SUCCESS:\n    print(list_evaluation_response.status)\n    raise Exception("Get model metrics failed, status: " + list_evaluation_response.status.description)\n\nprint(list_evaluation_response)\n',E='\x3c!--index.html file--\x3e\n\n<script>\n    ////////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication and app ID.\n    // Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = "YOUR_USER_ID_HERE";\n    // Your PAT (Personal Access Token) can be found in the Account\'s Security section\n    const PAT = "YOUR_PAT_HERE";\n    const APP_ID = "YOUR_APP_ID_HERE";\n  \n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const requestOptions = {\n        method: "GET",\n        headers: {\n            "Accept": "application/json",\n            "Authorization": "Key " + PAT\n        }\n\n    };\n\n    fetch(`https://api.clarifai.com/v2/users/${USER_ID}/apps/${APP_ID}/evaluations/`, requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log(\'error\', error));\n\n<\/script>\n',f='//index.js file\n\n//////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication and app ID.\n// Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = "YOUR_PAT_HERE";\nconst APP_ID = "YOUR_APP_ID_HERE";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.ListEvaluations(\n  {\n    user_app_id: {\n      user_id: USER_ID,\n      app_id: APP_ID,\n    },\n  \n  },\n\n  metadata,\n\n  (err, response) => {\n    if (err) {\n      throw new Error(err);\n    }\n\n    if (response.status.code !== 10000) {\n      throw new Error("Get model metrics failed, status: " + response.status.description);\n    }  \n\n    console.log(response);\n\n  }\n\n);\n',I='package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    //////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication and app ID.\n    // Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    // Your PAT (Personal Access Token) can be found in the Account\'s Security section\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";    \n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n    \n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n                .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiEvalMetricsResponse listEvaluationsResponse = stub.listEvaluations(\n                ListEvaluationsRequest.newBuilder()\n                        .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n                        .build()\n        );\n\n        if (listEvaluationsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("List model failed, status: " + listEvaluationsResponse.getStatus());\n        }\n\n        System.out.println(listEvaluationsResponse);\n\n    }\n\n}\n',m='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n////////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication and app ID.\n// Change these strings to run your own example.\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\ListEvaluationsRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID,\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->ListEvaluations(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new ListEvaluationsRequest([\n        "user_app_id" => $userDataObject\n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure\n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription() . " " . $response->getStatus()->getDetails());\n}\n\necho $response->serializeToJsonString();\n\n?>',v='curl -X GET "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/evaluations/" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \n  ',A='###################################################################################################\n# In this section, we set the user authentication, app ID, and the model evaluation details.\n# Change these strings to run your own example.\n##################################################################################################\n\nUSER_ID = "YOUR_USER_ID_HERE"\n# Your PAT (Personal Access Token) can be found in the Account\'s Security section\nPAT = "YOUR_PAT_HERE"\nAPP_ID = "YOUR_APP_ID_HERE"\n# Change these to get your model evaluation results\nMODEL_ID = "YOUR_MODEL_ID_HERE"\nMODEL_VERSION_ID = "YOUR_MODEL_VERSION_ID_HERE"\nEVALUATION_ID = "YOUR_EVALUATION_ID_HERE"\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (("authorization", "Key " + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\nget_evaluation_response = stub.GetModelVersionEvaluation(\n    service_pb2.GetModelVersionEvaluationRequest(\n        user_app_id=userDataObject,\n        model_id=MODEL_ID,\n        model_version_id=MODEL_VERSION_ID,\n        evaluation_id=EVALUATION_ID,\n    ),\n    metadata=metadata,\n)\n\nif get_evaluation_response.status.code != status_code_pb2.SUCCESS:\n    print(get_evaluation_response.status)\n    raise Exception("Get model metrics failed, status: " + get_evaluation_response.status.description)\n\nprint(get_evaluation_response)\n',g='\x3c!--index.html file--\x3e\n\n<script>\n    ///////////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the model evaluation details.\n    // Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = "YOUR_USER_ID_HERE";\n    // Your PAT (Personal Access Token) can be found in the Account\'s Security section\n    const PAT = "YOUR_PAT_HERE";\n    const APP_ID = "YOUR_APP_ID_HERE";    \n    // Change these to get your model evaluation results\n    const MODEL_ID = "YOUR_MODEL_ID_HERE";\n    const MODEL_VERSION_ID = "YOUR_MODEL_VERSION_ID_HERE";\n    const EVALUATION_ID = "YOUR_EVALUATION_ID_HERE";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const requestOptions = {\n        method: "GET",\n        headers: {\n            "Accept": "application/json",\n            "Authorization": "Key " + PAT\n        }\n\n    };\n\n    fetch(`https://api.clarifai.com/v2/users/${USER_ID}/apps/${APP_ID}/models/${MODEL_ID}/versions/${MODEL_VERSION_ID}/evaluations/${EVALUATION_ID}`, requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log(\'error\', error));\n\n<\/script>\n',D='//index.js file\n\n//////////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the model evaluation details.\n// Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = "YOUR_PAT_HERE";\nconst APP_ID = "YOUR_APP_ID_HERE";\n// Change these to get your model evaluation results\nconst MODEL_ID = "YOUR_MODEL_ID_HERE";\nconst MODEL_VERSION_ID = "YOUR_MODEL_VERSION_ID_HERE";\nconst EVALUATION_ID = "YOUR_EVALUATION_ID_HERE";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.GetEvaluation(\n  {\n    user_app_id: {\n      user_id: USER_ID,\n      app_id: APP_ID,\n    },\n\n    model_id: MODEL_ID,\n    model_version_id: MODEL_VERSION_ID,\n    evaluation_id: EVALUATION_ID   \n    \n  },\n\n  metadata,\n\n  (err, response) => {\n    if (err) {\n      throw new Error(err);\n    }\n\n    if (response.status.code !== 10000) {\n      throw new Error("Get model metrics failed, status: " + response.status.description);\n    }  \n\n    console.log(response);\n\n  }\n\n);\n',R='package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    //////////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the model evaluation details.\n    // Change these strings to run your own example.\n    /////////////////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    // Your PAT (Personal Access Token) can be found in the Account\'s Security section\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to get your model evaluation results\n    static final String MODEL_ID = "YOUR_MODEL_ID_HERE";\n    static final String MODEL_VERSION_ID = "YOUR_MODEL_VERSION_ID_HERE";\n    static final String EVALUATION_ID = "YOUR_EVALUATION_ID_HERE";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n        \n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n                .withCallCredentials(new ClarifaiCallCredentials(PAT));\n        \n        SingleEvalMetricsResponse postEvaluationsResponse = stub.getModelVersionEvaluation(\n                GetModelVersionEvaluationRequest.newBuilder()\n                        .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n                        .setModelId(MODEL_ID)\n                        .setModelVersionId(MODEL_VERSION_ID)\n                        .setEvaluationId(EVALUATION_ID) \n                        .build()\n        );\n        \n        if (postEvaluationsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Evaluate model failed, status: " + postEvaluationsResponse.getStatus());\n        }\n        \n        System.out.println(postEvaluationsResponse);\n        \n    }\n    \n}\n',O='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n////////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the model evaluation details.\n// Change these strings to run your own example.\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change these to get your model evaluation results\n$MODEL_ID = "YOUR_MODEL_ID_HERE";\n$MODEL_VERSION_ID = "YOUR_MODEL_VERSION_ID_HERE";\n$EVALUATION_ID = "YOUR_EVALUATION_ID_HERE";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\GetModelVersionEvaluationRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID,\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->GetModelVersionEvaluation(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new GetModelVersionEvaluationRequest([\n        "user_app_id" => $userDataObject,\n        "model_id" => $MODEL_ID,\n        "model_version_id" => $MODEL_VERSION_ID,\n        "evaluation_id" => $EVALUATION_ID \n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure\n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription() . " " . $response->getStatus()->getDetails());\n}\n\necho $response->serializeToJsonString();\n\n?>',S='curl -X GET "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/models/YOUR_MODEL_ID_HERE/versions/YOUR_MODEL_VERSION_ID_HERE/evaluations/YOUR_EVALUATION_ID_HERE/" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \n  ',T='###################################################################################################\n# In this section, we set the user authentication, app ID, and the model evaluation details.\n# Change these strings to run your own example.\n##################################################################################################\n\nUSER_ID = "YOUR_USER_ID_HERE"\n# Your PAT (Personal Access Token) can be found in the Account\'s Security section\nPAT = "YOUR_PAT_HERE"\nAPP_ID = "YOUR_APP_ID_HERE"\n# Change these to get your model evaluation results\nMODEL_ID = "YOUR_MODEL_ID_HERE"\nMODEL_VERSION_ID = "YOUR_MODEL_VERSION_ID_HERE"\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (("authorization", "Key " + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\nlist_evaluation_response = stub.ListModelVersionEvaluations(\n    service_pb2.ListModelVersionEvaluationsRequest(\n        user_app_id=userDataObject,\n        model_id=MODEL_ID,\n        model_version_id=MODEL_VERSION_ID       \n    ),\n    metadata=metadata,\n)\n\nif list_evaluation_response.status.code != status_code_pb2.SUCCESS:\n    print(list_evaluation_response.status)\n    raise Exception("Get model metrics failed, status: " + list_evaluation_response.status.description)\n\nprint(list_evaluation_response)\n',U='\x3c!--index.html file--\x3e\n\n<script>\n    ///////////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the model evaluation details.\n    // Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = "YOUR_USER_ID_HERE";\n    // Your PAT (Personal Access Token) can be found in the Account\'s Security section\n    const PAT = "YOUR_PAT_HERE";\n    const APP_ID = "YOUR_APP_ID_HERE";    \n    // Change these to get your model evaluation results\n    const MODEL_ID = "YOUR_MODEL_ID_HERE";\n    const MODEL_VERSION_ID = "YOUR_MODEL_VERSION_ID_HERE";\n    \n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const requestOptions = {\n        method: "GET",\n        headers: {\n            "Accept": "application/json",\n            "Authorization": "Key " + PAT\n        }\n\n    };\n\n    fetch(`https://api.clarifai.com/v2/users/${USER_ID}/apps/${APP_ID}/models/${MODEL_ID}/versions/${MODEL_VERSION_ID}/evaluations/`, requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log(\'error\', error));\n\n<\/script>\n',b='//index.js file\n\n//////////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the model evaluation details.\n// Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = "YOUR_PAT_HERE";\nconst APP_ID = "YOUR_APP_ID_HERE";\n// Change these to get your model evaluation results\nconst MODEL_ID = "YOUR_MODEL_ID_HERE";\nconst MODEL_VERSION_ID = "YOUR_MODEL_VERSION_ID_HERE";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.ListModelVersionEvaluations(\n  {\n    user_app_id: {\n      user_id: USER_ID,\n      app_id: APP_ID,\n    },\n\n    model_id: MODEL_ID,\n    model_version_id: MODEL_VERSION_ID     \n    \n  },\n\n  metadata,\n\n  (err, response) => {\n    if (err) {\n      throw new Error(err);\n    }\n\n    if (response.status.code !== 10000) {\n      throw new Error("Get model metrics failed, status: " + response.status.description);\n    }  \n\n    console.log(response);\n\n  }\n\n);\n',P='package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    //////////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the model evaluation details.\n    // Change these strings to run your own example.\n    /////////////////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    // Your PAT (Personal Access Token) can be found in the Account\'s Security section\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to get your model evaluation results\n    static final String MODEL_ID = "YOUR_MODEL_ID_HERE";\n    static final String MODEL_VERSION_ID = "YOUR_MODEL_VERSION_ID_HERE";\n   \n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n        \n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n                .withCallCredentials(new ClarifaiCallCredentials(PAT));\n        \n        MultiEvalMetricsResponse listEvaluationsResponse = stub.listModelVersionEvaluations(\n                ListModelVersionEvaluationsRequest.newBuilder()\n                        .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n                        .setModelId(MODEL_ID)\n                        .setModelVersionId(MODEL_VERSION_ID)                       \n                        .build()\n        );\n        \n        if (listEvaluationsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Evaluate model failed, status: " + listEvaluationsResponse.getStatus());\n        }\n        \n        System.out.println(listEvaluationsResponse);\n        \n    }\n    \n}\n',C='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n////////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the model evaluation details.\n// Change these strings to run your own example.\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change these to get your model evaluation results\n$MODEL_ID = "YOUR_MODEL_ID_HERE";\n$MODEL_VERSION_ID = "YOUR_MODEL_VERSION_ID_HERE";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\ListModelVersionEvaluationsRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID,\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->ListModelVersionEvaluations(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new ListModelVersionEvaluationsRequest([\n        "user_app_id" => $userDataObject,\n        "model_id" => $MODEL_ID,\n        "model_version_id" => $MODEL_VERSION_ID      \n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure\n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription() . " " . $response->getStatus()->getDetails());\n}\n\necho $response->serializeToJsonString();\n\n?>',N='curl -X GET "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/models/YOUR_MODEL_ID_HERE/versions/YOUR_MODEL_VERSION_ID_HERE/evaluations/" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \n  ',x='status {\n  code: SUCCESS\n  description: "Ok"\n  req_id: "0251012185ab3e3c76dd0b31262b78f0"\n}\neval_metrics {\n  status {\n    code: MODEL_EVALUATED\n    description: "Model was successfully evaluated."\n  }\n  summary {\n    macro_avg_roc_auc: 1.0\n    macro_avg_f1_score: 0.8809523582458496\n    macro_std_f1_score: 0.13677529990673065\n    macro_avg_precision: 0.9375\n    macro_avg_recall: 0.875\n  }\n  confusion_matrix {\n    matrix {\n      predicted: "positive"\n      actual: "positive"\n      value: 0.7497637867927551\n      predicted_concept {\n        id: "positive"\n        name: "positive"\n        value: 0.7497637867927551\n        app_id: "text-search-app"\n      }\n      actual_concept {\n        id: "positive"\n        name: "positive"\n        value: 1.0\n        app_id: "text-search-app"\n      }\n    }\n    matrix {\n      predicted: "negative"\n      actual: "positive"\n      value: 0.2502362132072449\n      predicted_concept {\n        id: "negative"\n        name: "negative"\n        value: 0.2502362132072449\n        app_id: "text-search-app"\n      }\n      actual_concept {\n        id: "positive"\n        name: "positive"\n        value: 1.0\n        app_id: "text-search-app"\n      }\n    }\n    matrix {\n      predicted: "positive"\n      actual: "negative"\n      value: 3.033356961168465e-07\n      predicted_concept {\n        id: "positive"\n        name: "positive"\n        value: 3.033356961168465e-07\n        app_id: "text-search-app"\n      }\n      actual_concept {\n        id: "negative"\n        name: "negative"\n        value: 1.0\n        app_id: "text-search-app"\n      }\n    }\n    matrix {\n      predicted: "negative"\n      actual: "negative"\n      value: 0.9999997019767761\n      predicted_concept {\n        id: "negative"\n        name: "negative"\n        value: 0.9999997019767761\n        app_id: "text-search-app"\n      }\n      actual_concept {\n        id: "negative"\n        name: "negative"\n        value: 1.0\n        app_id: "text-search-app"\n      }\n    }\n    concept_ids: "positive"\n    concept_ids: "negative"\n  }\n  cooccurrence_matrix {\n    matrix {\n      row: "positive"\n      col: "positive"\n      count: 10\n    }\n    matrix {\n      row: "negative"\n      col: "negative"\n      count: 11\n    }\n    concept_ids: "positive"\n    concept_ids: "negative"\n  }\n  label_counts {\n    positive_label_counts {\n      concept_name: "positive"\n      count: 10\n      concept {\n        id: "positive"\n        name: "positive"\n        value: 1.0\n        app_id: "text-search-app"\n      }\n    }\n    positive_label_counts {\n      concept_name: "negative"\n      count: 11\n      concept {\n        id: "negative"\n        name: "negative"\n        value: 1.0\n        app_id: "text-search-app"\n      }\n    }\n  }\n  binary_metrics {\n    num_pos: 2\n    num_neg: 2\n    num_tot: 4\n    roc_auc: 1.0\n    f1: 0.8333333730697632\n    concept {\n      id: "positive"\n      name: "positive"\n      value: 1.0\n      app_id: "text-search-app"\n    }\n    roc_curve {\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 0.0\n      fpr: 1.0\n      tpr: 0.0\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 0.75\n      tpr: 1.0\n      thresholds: 1.0\n      thresholds: 0.9900000095367432\n      thresholds: 0.9800000190734863\n      thresholds: 0.9700000286102295\n      thresholds: 0.9599999785423279\n      thresholds: 0.949999988079071\n      thresholds: 0.9399999976158142\n      thresholds: 0.9300000071525574\n      thresholds: 0.9200000166893005\n      thresholds: 0.9100000262260437\n      thresholds: 0.8999999761581421\n      thresholds: 0.8899999856948853\n      thresholds: 0.8799999952316284\n      thresholds: 0.8700000047683716\n      thresholds: 0.8600000143051147\n      thresholds: 0.8500000238418579\n      thresholds: 0.8399999737739563\n      thresholds: 0.8299999833106995\n      thresholds: 0.8199999928474426\n      thresholds: 0.8100000023841858\n      thresholds: 0.800000011920929\n      thresholds: 0.7900000214576721\n      thresholds: 0.7799999713897705\n      thresholds: 0.7699999809265137\n      thresholds: 0.7599999904632568\n      thresholds: 0.75\n      thresholds: 0.7400000095367432\n      thresholds: 0.7300000190734863\n      thresholds: 0.7200000286102295\n      thresholds: 0.7099999785423279\n      thresholds: 0.699999988079071\n      thresholds: 0.6899999976158142\n      thresholds: 0.6800000071525574\n      thresholds: 0.6700000166893005\n      thresholds: 0.6600000262260437\n      thresholds: 0.6499999761581421\n      thresholds: 0.6399999856948853\n      thresholds: 0.6299999952316284\n      thresholds: 0.6200000047683716\n      thresholds: 0.6100000143051147\n      thresholds: 0.6000000238418579\n      thresholds: 0.5899999737739563\n      thresholds: 0.5799999833106995\n      thresholds: 0.5699999928474426\n      thresholds: 0.5600000023841858\n      thresholds: 0.550000011920929\n      thresholds: 0.5400000214576721\n      thresholds: 0.5299999713897705\n      thresholds: 0.5199999809265137\n      thresholds: 0.5099999904632568\n      thresholds: 0.5\n      thresholds: 0.49000000953674316\n      thresholds: 0.47999998927116394\n      thresholds: 0.4699999988079071\n      thresholds: 0.46000000834465027\n      thresholds: 0.44999998807907104\n      thresholds: 0.4399999976158142\n      thresholds: 0.4300000071525574\n      thresholds: 0.41999998688697815\n      thresholds: 0.4099999964237213\n      thresholds: 0.4000000059604645\n      thresholds: 0.38999998569488525\n      thresholds: 0.3799999952316284\n      thresholds: 0.3700000047683716\n      thresholds: 0.36000001430511475\n      thresholds: 0.3499999940395355\n      thresholds: 0.3400000035762787\n      thresholds: 0.33000001311302185\n      thresholds: 0.3199999928474426\n      thresholds: 0.3100000023841858\n      thresholds: 0.30000001192092896\n      thresholds: 0.28999999165534973\n      thresholds: 0.2800000011920929\n      thresholds: 0.27000001072883606\n      thresholds: 0.25999999046325684\n      thresholds: 0.25\n      thresholds: 0.23999999463558197\n      thresholds: 0.23000000417232513\n      thresholds: 0.2199999988079071\n      thresholds: 0.20999999344348907\n      thresholds: 0.20000000298023224\n      thresholds: 0.1899999976158142\n      thresholds: 0.18000000715255737\n      thresholds: 0.17000000178813934\n      thresholds: 0.1599999964237213\n      thresholds: 0.15000000596046448\n      thresholds: 0.14000000059604645\n      thresholds: 0.12999999523162842\n      thresholds: 0.11999999731779099\n      thresholds: 0.10999999940395355\n      thresholds: 0.10000000149011612\n      thresholds: 0.09000000357627869\n      thresholds: 0.07999999821186066\n      thresholds: 0.07000000029802322\n      thresholds: 0.05999999865889549\n      thresholds: 0.05000000074505806\n      thresholds: 0.03999999910593033\n      thresholds: 0.029999999329447746\n      thresholds: 0.019999999552965164\n      thresholds: 0.009999999776482582\n      thresholds: 0.0\n    }\n    precision_recall_curve {\n      recall: 1.0\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.75\n      recall: 0.0\n      precision: 0.5\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      precision: 1.0\n      thresholds: 0.0\n      thresholds: 0.009999999776482582\n      thresholds: 0.019999999552965164\n      thresholds: 0.029999999329447746\n      thresholds: 0.03999999910593033\n      thresholds: 0.05000000074505806\n      thresholds: 0.05999999865889549\n      thresholds: 0.07000000029802322\n      thresholds: 0.07999999821186066\n      thresholds: 0.09000000357627869\n      thresholds: 0.10000000149011612\n      thresholds: 0.10999999940395355\n      thresholds: 0.11999999731779099\n      thresholds: 0.12999999523162842\n      thresholds: 0.14000000059604645\n      thresholds: 0.15000000596046448\n      thresholds: 0.1599999964237213\n      thresholds: 0.17000000178813934\n      thresholds: 0.18000000715255737\n      thresholds: 0.1899999976158142\n      thresholds: 0.20000000298023224\n      thresholds: 0.20999999344348907\n      thresholds: 0.2199999988079071\n      thresholds: 0.23000000417232513\n      thresholds: 0.23999999463558197\n      thresholds: 0.25\n      thresholds: 0.25999999046325684\n      thresholds: 0.27000001072883606\n      thresholds: 0.2800000011920929\n      thresholds: 0.28999999165534973\n      thresholds: 0.30000001192092896\n      thresholds: 0.3100000023841858\n      thresholds: 0.3199999928474426\n      thresholds: 0.33000001311302185\n      thresholds: 0.3400000035762787\n      thresholds: 0.3499999940395355\n      thresholds: 0.36000001430511475\n      thresholds: 0.3700000047683716\n      thresholds: 0.3799999952316284\n      thresholds: 0.38999998569488525\n      thresholds: 0.4000000059604645\n      thresholds: 0.4099999964237213\n      thresholds: 0.41999998688697815\n      thresholds: 0.4300000071525574\n      thresholds: 0.4399999976158142\n      thresholds: 0.44999998807907104\n      thresholds: 0.46000000834465027\n      thresholds: 0.4699999988079071\n      thresholds: 0.47999998927116394\n      thresholds: 0.49000000953674316\n      thresholds: 0.5\n      thresholds: 0.5099999904632568\n      thresholds: 0.5199999809265137\n      thresholds: 0.5299999713897705\n      thresholds: 0.5400000214576721\n      thresholds: 0.550000011920929\n      thresholds: 0.5600000023841858\n      thresholds: 0.5699999928474426\n      thresholds: 0.5799999833106995\n      thresholds: 0.5899999737739563\n      thresholds: 0.6000000238418579\n      thresholds: 0.6100000143051147\n      thresholds: 0.6200000047683716\n      thresholds: 0.6299999952316284\n      thresholds: 0.6399999856948853\n      thresholds: 0.6499999761581421\n      thresholds: 0.6600000262260437\n      thresholds: 0.6700000166893005\n      thresholds: 0.6800000071525574\n      thresholds: 0.6899999976158142\n      thresholds: 0.699999988079071\n      thresholds: 0.7099999785423279\n      thresholds: 0.7200000286102295\n      thresholds: 0.7300000190734863\n      thresholds: 0.7400000095367432\n      thresholds: 0.75\n      thresholds: 0.7599999904632568\n      thresholds: 0.7699999809265137\n      thresholds: 0.7799999713897705\n      thresholds: 0.7900000214576721\n      thresholds: 0.800000011920929\n      thresholds: 0.8100000023841858\n      thresholds: 0.8199999928474426\n      thresholds: 0.8299999833106995\n      thresholds: 0.8399999737739563\n      thresholds: 0.8500000238418579\n      thresholds: 0.8600000143051147\n      thresholds: 0.8700000047683716\n      thresholds: 0.8799999952316284\n      thresholds: 0.8899999856948853\n      thresholds: 0.8999999761581421\n      thresholds: 0.9100000262260437\n      thresholds: 0.9200000166893005\n      thresholds: 0.9300000071525574\n      thresholds: 0.9399999976158142\n      thresholds: 0.949999988079071\n      thresholds: 0.9599999785423279\n      thresholds: 0.9700000286102295\n      thresholds: 0.9800000190734863\n      thresholds: 0.9900000095367432\n      thresholds: 1.0\n    }\n  }\n  binary_metrics {\n    num_pos: 2\n    num_neg: 2\n    num_tot: 4\n    roc_auc: 1.0\n    f1: 0.9285714626312256\n    concept {\n      id: "negative"\n      name: "negative"\n      value: 1.0\n      app_id: "text-search-app"\n    }\n    roc_curve {\n      fpr: 0.0\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 0.25\n      fpr: 1.0\n      tpr: 0.5\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      tpr: 1.0\n      thresholds: 1.0\n      thresholds: 0.9900000095367432\n      thresholds: 0.9800000190734863\n      thresholds: 0.9700000286102295\n      thresholds: 0.9599999785423279\n      thresholds: 0.949999988079071\n      thresholds: 0.9399999976158142\n      thresholds: 0.9300000071525574\n      thresholds: 0.9200000166893005\n      thresholds: 0.9100000262260437\n      thresholds: 0.8999999761581421\n      thresholds: 0.8899999856948853\n      thresholds: 0.8799999952316284\n      thresholds: 0.8700000047683716\n      thresholds: 0.8600000143051147\n      thresholds: 0.8500000238418579\n      thresholds: 0.8399999737739563\n      thresholds: 0.8299999833106995\n      thresholds: 0.8199999928474426\n      thresholds: 0.8100000023841858\n      thresholds: 0.800000011920929\n      thresholds: 0.7900000214576721\n      thresholds: 0.7799999713897705\n      thresholds: 0.7699999809265137\n      thresholds: 0.7599999904632568\n      thresholds: 0.75\n      thresholds: 0.7400000095367432\n      thresholds: 0.7300000190734863\n      thresholds: 0.7200000286102295\n      thresholds: 0.7099999785423279\n      thresholds: 0.699999988079071\n      thresholds: 0.6899999976158142\n      thresholds: 0.6800000071525574\n      thresholds: 0.6700000166893005\n      thresholds: 0.6600000262260437\n      thresholds: 0.6499999761581421\n      thresholds: 0.6399999856948853\n      thresholds: 0.6299999952316284\n      thresholds: 0.6200000047683716\n      thresholds: 0.6100000143051147\n      thresholds: 0.6000000238418579\n      thresholds: 0.5899999737739563\n      thresholds: 0.5799999833106995\n      thresholds: 0.5699999928474426\n      thresholds: 0.5600000023841858\n      thresholds: 0.550000011920929\n      thresholds: 0.5400000214576721\n      thresholds: 0.5299999713897705\n      thresholds: 0.5199999809265137\n      thresholds: 0.5099999904632568\n      thresholds: 0.5\n      thresholds: 0.49000000953674316\n      thresholds: 0.47999998927116394\n      thresholds: 0.4699999988079071\n      thresholds: 0.46000000834465027\n      thresholds: 0.44999998807907104\n      thresholds: 0.4399999976158142\n      thresholds: 0.4300000071525574\n      thresholds: 0.41999998688697815\n      thresholds: 0.4099999964237213\n      thresholds: 0.4000000059604645\n      thresholds: 0.38999998569488525\n      thresholds: 0.3799999952316284\n      thresholds: 0.3700000047683716\n      thresholds: 0.36000001430511475\n      thresholds: 0.3499999940395355\n      thresholds: 0.3400000035762787\n      thresholds: 0.33000001311302185\n      thresholds: 0.3199999928474426\n      thresholds: 0.3100000023841858\n      thresholds: 0.30000001192092896\n      thresholds: 0.28999999165534973\n      thresholds: 0.2800000011920929\n      thresholds: 0.27000001072883606\n      thresholds: 0.25999999046325684\n      thresholds: 0.25\n      thresholds: 0.23999999463558197\n      thresholds: 0.23000000417232513\n      thresholds: 0.2199999988079071\n      thresholds: 0.20999999344348907\n      thresholds: 0.20000000298023224\n      thresholds: 0.1899999976158142\n      thresholds: 0.18000000715255737\n      thresholds: 0.17000000178813934\n      thresholds: 0.1599999964237213\n      thresholds: 0.15000000596046448\n      thresholds: 0.14000000059604645\n      thresholds: 0.12999999523162842\n      thresholds: 0.11999999731779099\n      thresholds: 0.10999999940395355\n      thresholds: 0.10000000149011612\n      thresholds: 0.09000000357627869\n      thresholds: 0.07999999821186066\n      thresholds: 0.07000000029802322\n      thresholds: 0.05999999865889549\n      thresholds: 0.05000000074505806\n      thresholds: 0.03999999910593033\n      thresholds: 0.029999999329447746\n      thresholds: 0.019999999552965164\n      thresholds: 0.009999999776482582\n      thresholds: 0.0\n    }\n    precision_recall_curve {\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 1.0\n      recall: 0.5\n      precision: 0.5\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 0.875\n      precision: 1.0\n      thresholds: 0.0\n      thresholds: 0.009999999776482582\n      thresholds: 0.019999999552965164\n      thresholds: 0.029999999329447746\n      thresholds: 0.03999999910593033\n      thresholds: 0.05000000074505806\n      thresholds: 0.05999999865889549\n      thresholds: 0.07000000029802322\n      thresholds: 0.07999999821186066\n      thresholds: 0.09000000357627869\n      thresholds: 0.10000000149011612\n      thresholds: 0.10999999940395355\n      thresholds: 0.11999999731779099\n      thresholds: 0.12999999523162842\n      thresholds: 0.14000000059604645\n      thresholds: 0.15000000596046448\n      thresholds: 0.1599999964237213\n      thresholds: 0.17000000178813934\n      thresholds: 0.18000000715255737\n      thresholds: 0.1899999976158142\n      thresholds: 0.20000000298023224\n      thresholds: 0.20999999344348907\n      thresholds: 0.2199999988079071\n      thresholds: 0.23000000417232513\n      thresholds: 0.23999999463558197\n      thresholds: 0.25\n      thresholds: 0.25999999046325684\n      thresholds: 0.27000001072883606\n      thresholds: 0.2800000011920929\n      thresholds: 0.28999999165534973\n      thresholds: 0.30000001192092896\n      thresholds: 0.3100000023841858\n      thresholds: 0.3199999928474426\n      thresholds: 0.33000001311302185\n      thresholds: 0.3400000035762787\n      thresholds: 0.3499999940395355\n      thresholds: 0.36000001430511475\n      thresholds: 0.3700000047683716\n      thresholds: 0.3799999952316284\n      thresholds: 0.38999998569488525\n      thresholds: 0.4000000059604645\n      thresholds: 0.4099999964237213\n      thresholds: 0.41999998688697815\n      thresholds: 0.4300000071525574\n      thresholds: 0.4399999976158142\n      thresholds: 0.44999998807907104\n      thresholds: 0.46000000834465027\n      thresholds: 0.4699999988079071\n      thresholds: 0.47999998927116394\n      thresholds: 0.49000000953674316\n      thresholds: 0.5\n      thresholds: 0.5099999904632568\n      thresholds: 0.5199999809265137\n      thresholds: 0.5299999713897705\n      thresholds: 0.5400000214576721\n      thresholds: 0.550000011920929\n      thresholds: 0.5600000023841858\n      thresholds: 0.5699999928474426\n      thresholds: 0.5799999833106995\n      thresholds: 0.5899999737739563\n      thresholds: 0.6000000238418579\n      thresholds: 0.6100000143051147\n      thresholds: 0.6200000047683716\n      thresholds: 0.6299999952316284\n      thresholds: 0.6399999856948853\n      thresholds: 0.6499999761581421\n      thresholds: 0.6600000262260437\n      thresholds: 0.6700000166893005\n      thresholds: 0.6800000071525574\n      thresholds: 0.6899999976158142\n      thresholds: 0.699999988079071\n      thresholds: 0.7099999785423279\n      thresholds: 0.7200000286102295\n      thresholds: 0.7300000190734863\n      thresholds: 0.7400000095367432\n      thresholds: 0.75\n      thresholds: 0.7599999904632568\n      thresholds: 0.7699999809265137\n      thresholds: 0.7799999713897705\n      thresholds: 0.7900000214576721\n      thresholds: 0.800000011920929\n      thresholds: 0.8100000023841858\n      thresholds: 0.8199999928474426\n      thresholds: 0.8299999833106995\n      thresholds: 0.8399999737739563\n      thresholds: 0.8500000238418579\n      thresholds: 0.8600000143051147\n      thresholds: 0.8700000047683716\n      thresholds: 0.8799999952316284\n      thresholds: 0.8899999856948853\n      thresholds: 0.8999999761581421\n      thresholds: 0.9100000262260437\n      thresholds: 0.9200000166893005\n      thresholds: 0.9300000071525574\n      thresholds: 0.9399999976158142\n      thresholds: 0.949999988079071\n      thresholds: 0.9599999785423279\n      thresholds: 0.9700000286102295\n      thresholds: 0.9800000190734863\n      thresholds: 0.9900000095367432\n      thresholds: 1.0\n    }\n  }\n  test_set {\n    predicted_concepts {\n      id: "positive"\n      name: "positive"\n      value: 0.9999601244926453\n      app_id: "text-search-app"\n    }\n    predicted_concepts {\n      id: "negative"\n      name: "negative"\n      value: 3.9902104617794976e-05\n      app_id: "text-search-app"\n    }\n    ground_truth_concepts {\n      id: "positive"\n      name: "positive"\n      value: 1.0\n      app_id: "text-search-app"\n    }\n    input {\n      id: "UyZACEDqN6WhAQOO"\n      data {\n        text {\n          url: "https://data.clarifai.com/orig/users/alfrick/apps/text-search-app/inputs/text/e9dc85e0585a7a6d32da791e6cfa2c52"\n          hosted {\n            prefix: "https://data.clarifai.com"\n            suffix: "users/alfrick/apps/text-search-app/inputs/text/e9dc85e0585a7a6d32da791e6cfa2c52"\n            sizes: "orig"\n            crossorigin: "use-credentials"\n          }\n          text_info {\n            char_count: 507\n            encoding: "UTF8"\n          }\n        }\n      }\n      created_at {\n        seconds: 1687435506\n        nanos: 969900000\n      }\n      modified_at {\n        seconds: 1690525794\n        nanos: 876378000\n      }\n      status {\n        code: INPUT_DOWNLOAD_SUCCESS\n        description: "Download complete"\n      }\n    }\n  }\n  test_set {\n    predicted_concepts {\n      id: "negative"\n      name: "negative"\n      value: 0.9999999403953552\n      app_id: "text-search-app"\n    }\n    predicted_concepts {\n      id: "positive"\n      name: "positive"\n      value: 6.925120743517255e-08\n      app_id: "text-search-app"\n    }\n    ground_truth_concepts {\n      id: "negative"\n      name: "negative"\n      value: 1.0\n      app_id: "text-search-app"\n    }\n    input {\n      id: "A2SsbMJrHqiAUmnr"\n      data {\n        text {\n          url: "https://data.clarifai.com/orig/users/alfrick/apps/text-search-app/inputs/text/77fe0c1ff92bcb6d876ec8e551e9268f"\n          hosted {\n            prefix: "https://data.clarifai.com"\n            suffix: "users/alfrick/apps/text-search-app/inputs/text/77fe0c1ff92bcb6d876ec8e551e9268f"\n            sizes: "orig"\n            crossorigin: "use-credentials"\n          }\n          text_info {\n            char_count: 440\n            encoding: "UTF8"\n          }\n        }\n      }\n      created_at {\n        seconds: 1687436288\n        nanos: 370201000\n      }\n      modified_at {\n        seconds: 1690525794\n        nanos: 876378000\n      }\n      status {\n        code: INPUT_DOWNLOAD_SUCCESS\n        description: "Download complete"\n      }\n    }\n  }\n  test_set {\n    predicted_concepts {\n      id: "negative"\n      name: "negative"\n      value: 0.9999988675117493\n      app_id: "text-search-app"\n    }\n    predicted_concepts {\n      id: "positive"\n      name: "positive"\n      value: 1.1424209560573217e-06\n      app_id: "text-search-app"\n    }\n    ground_truth_concepts {\n      id: "negative"\n      name: "negative"\n      value: 1.0\n      app_id: "text-search-app"\n    }\n    input {\n      id: "NnIBViXRFrXAGKkd"\n      data {\n        text {\n          url: "https://data.clarifai.com/orig/users/alfrick/apps/text-search-app/inputs/text/65d33e371bbdd16cbcf7a2826ab0bcc1"\n          hosted {\n            prefix: "https://data.clarifai.com"\n            suffix: "users/alfrick/apps/text-search-app/inputs/text/65d33e371bbdd16cbcf7a2826ab0bcc1"\n            sizes: "orig"\n            crossorigin: "use-credentials"\n          }\n          text_info {\n            char_count: 359\n            encoding: "UTF8"\n          }\n        }\n      }\n      created_at {\n        seconds: 1687435598\n        nanos: 758239000\n      }\n      modified_at {\n        seconds: 1690525794\n        nanos: 876378000\n      }\n      status {\n        code: INPUT_DOWNLOAD_SUCCESS\n        description: "Download complete"\n      }\n    }\n  }\n  test_set {\n    predicted_concepts {\n      id: "positive"\n      name: "positive"\n      value: 0.9999937415122986\n      app_id: "text-search-app"\n    }\n    predicted_concepts {\n      id: "negative"\n      name: "negative"\n      value: 6.254503659874899e-06\n      app_id: "text-search-app"\n    }\n    ground_truth_concepts {\n      id: "positive"\n      name: "positive"\n      value: 1.0\n      app_id: "text-search-app"\n    }\n    input {\n      id: "OK2cJALgpFQYafF2"\n      data {\n        text {\n          url: "https://data.clarifai.com/orig/users/alfrick/apps/text-search-app/inputs/text/90fd9b5c2f9af536520add1a2da13db8"\n          hosted {\n            prefix: "https://data.clarifai.com"\n            suffix: "users/alfrick/apps/text-search-app/inputs/text/90fd9b5c2f9af536520add1a2da13db8"\n            sizes: "orig"\n            crossorigin: "use-credentials"\n          }\n          text_info {\n            char_count: 399\n            encoding: "UTF8"\n          }\n        }\n      }\n      created_at {\n        seconds: 1687435419\n        nanos: 661211000\n      }\n      modified_at {\n        seconds: 1690525794\n        nanos: 810009000\n      }\n      status {\n        code: INPUT_DOWNLOAD_SUCCESS\n        description: "Download complete"\n      }\n    }\n  }\n  test_set {\n    predicted_concepts {\n      id: "positive"\n      name: "positive"\n      value: 0.9985570907592773\n      app_id: "text-search-app"\n    }\n    predicted_concepts {\n      id: "negative"\n      name: "negative"\n      value: 0.001442914130166173\n      app_id: "text-search-app"\n    }\n    ground_truth_concepts {\n      id: "positive"\n      name: "positive"\n      value: 1.0\n      app_id: "text-search-app"\n    }\n    input {\n      id: "YViTPPBzt3pTlmgY"\n      data {\n        text {\n          url: "https://data.clarifai.com/orig/users/alfrick/apps/text-search-app/inputs/text/5bccdbc8c9f8fb9a673d61dc2e32e40b"\n          hosted {\n            prefix: "https://data.clarifai.com"\n            suffix: "users/alfrick/apps/text-search-app/inputs/text/5bccdbc8c9f8fb9a673d61dc2e32e40b"\n            sizes: "orig"\n            crossorigin: "use-credentials"\n          }\n          text_info {\n            char_count: 413\n            encoding: "UTF8"\n          }\n        }\n      }\n      created_at {\n        seconds: 1687436129\n        nanos: 772735000\n      }\n      modified_at {\n        seconds: 1690525794\n        nanos: 876378000\n      }\n      status {\n        code: INPUT_DOWNLOAD_SUCCESS\n        description: "Download complete"\n      }\n    }\n  }\n  id: "e223fa4ac14b4784b223cd31cc545f34"\n  eval_info {\n    params {\n      fields {\n        key: "dataset_id"\n        value {\n          string_value: ""\n        }\n      }\n      fields {\n        key: "dataset_version_id"\n        value {\n          string_value: ""\n        }\n      }\n      fields {\n        key: "use_kfold"\n        value {\n          bool_value: true\n        }\n      }\n    }\n  }\n  model {\n    id: "text-model-1"\n    app_id: "text-search-app"\n    model_version {\n      id: "3ad2c152232e46ebb16ed31f67dc54d8"\n      created_at {\n        seconds: 1693564041\n        nanos: 515456000\n      }\n      status {\n        code: MODEL_TRAINED\n        description: "Model is trained and ready"\n      }\n      active_concept_count: 2\n      metrics {\n        status {\n          code: MODEL_EVALUATED\n          description: "Model was successfully evaluated."\n        }\n        summary {\n          macro_avg_roc_auc: 1.0\n          macro_avg_f1_score: 0.8809523582458496\n          macro_std_f1_score: 0.13677529990673065\n          macro_avg_precision: 0.9375\n          macro_avg_recall: 0.875\n        }\n      }\n      total_input_count: 21\n      completed_at {\n        seconds: 1693564044\n        nanos: 915680000\n      }\n      visibility {\n        gettable: PRIVATE\n      }\n      app_id: "text-search-app"\n      user_id: "alfrick"\n      metadata {\n      }\n      output_info {\n        output_config {\n        }\n        message: "Show output_info with: GET /models/{model_id}/output_info"\n        params {\n          fields {\n            key: "max_concepts"\n            value {\n              number_value: 20.0\n            }\n          }\n          fields {\n            key: "min_value"\n            value {\n              number_value: 0.0\n            }\n          }\n          fields {\n            key: "select_concepts"\n            value {\n              list_value {\n              }\n            }\n          }\n        }\n      }\n      input_info {\n        base_embed_model {\n          id: "multilingual-text-embedding"\n          app_id: "main"\n          model_version {\n            id: "9b33adf15280465b857163ddaaacdcb1"\n          }\n          user_id: "clarifai"\n          model_type_id: "text-embedder"\n        }\n      }\n      train_info {\n        params {\n          fields {\n            key: "dataset_id"\n            value {\n              string_value: ""\n            }\n          }\n          fields {\n            key: "dataset_version_id"\n            value {\n              string_value: ""\n            }\n          }\n          fields {\n            key: "enrich_dataset"\n            value {\n              string_value: "Automatic"\n            }\n          }\n        }\n      }\n      import_info {\n      }\n    }\n    user_id: "alfrick"\n    model_type_id: "embedding-classifier"\n  }\n  user_id: "alfrick"\n  app_id: "text-search-app"\n}\n',L={description:"Learn to interpret model evaluations.",sidebar_position:1},H="Interpreting Evaluations",w={id:"api-guide/evaluate/interpreting-evaluations",title:"Interpreting Evaluations",description:"Learn to interpret model evaluations.",source:"@site/docs/api-guide/evaluate/interpreting-evaluations.md",sourceDirName:"api-guide/evaluate",slug:"/api-guide/evaluate/interpreting-evaluations",permalink:"/api-guide/evaluate/interpreting-evaluations",draft:!1,unlisted:!1,editUrl:"https://github.com/Clarifai/docs/blob/main/docs/api-guide/evaluate/interpreting-evaluations.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{description:"Learn to interpret model evaluations.",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Evaluating Models",permalink:"/api-guide/evaluate/"},next:{title:"Improving Your Model",permalink:"/api-guide/evaluate/improving-your-model"}},Y={},y=[{value:"Get Evaluation Results",id:"get-evaluation-results",level:2},{value:"Get Evaluation",id:"get-evaluation",level:3},{value:"List Evaluations",id:"list-evaluations",level:3},{value:"Get Model Version Evaluation",id:"get-model-version-evaluation",level:3},{value:"List Model Version Evaluations",id:"list-model-version-evaluations",level:3}];function j(n){const e={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",strong:"strong",...(0,r.R)(),...n.components},{Details:t}=e;return t||function(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.h1,{id:"interpreting-evaluations",children:"Interpreting Evaluations"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Learn to interpret model evaluations"})}),"\n",(0,s.jsx)("hr",{}),"\n",(0,s.jsx)(e.p,{children:"Model evaluation takes some time \u2014 depending on the amount of data the model has. After the process is complete, you could get the results and use them to assess the performance of your model."}),"\n",(0,s.jsx)(e.h2,{id:"get-evaluation-results",children:"Get Evaluation Results"}),"\n",(0,s.jsx)(e.p,{children:"Below are examples of how you would use different methods to get the evaluation results."}),"\n",(0,s.jsx)(e.admonition,{type:"info",children:(0,s.jsxs)(e.p,{children:["The initialization code used in the following examples is outlined in detail on the ",(0,s.jsx)(e.a,{href:"https://docs.clarifai.com/api-guide/api-overview/api-clients/#client-installation-instructions",children:"client installation page."})]})}),"\n","\n","\n","\n","\n","\n","\n",(0,s.jsx)(e.h3,{id:"get-evaluation",children:"Get Evaluation"}),"\n",(0,s.jsxs)(e.p,{children:["Get the evaluation results by using the ",(0,s.jsx)(e.code,{children:"evaluation_id"})," returned after starting an evaluation."]}),"\n",(0,s.jsxs)(a.A,{children:[(0,s.jsx)(i.A,{value:"python",label:"Python",children:(0,s.jsx)(o.A,{className:"language-python",children:l})}),(0,s.jsx)(i.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(o.A,{className:"language-javascript",children:c})}),(0,s.jsx)(i.A,{value:"nodejs",label:"NodeJS",children:(0,s.jsx)(o.A,{className:"language-javascript",children:p})}),(0,s.jsx)(i.A,{value:"java",label:"Java",children:(0,s.jsx)(o.A,{className:"language-java",children:h})}),(0,s.jsx)(i.A,{value:"php",label:"PHP",children:(0,s.jsx)(o.A,{className:"language-php",children:d})}),(0,s.jsx)(i.A,{value:"curl",label:"cURL",children:(0,s.jsx)(o.A,{className:"language-bash",children:u})})]}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{children:"Raw Output Example"}),(0,s.jsx)(o.A,{className:"language-javascript",children:x})]}),"\n",(0,s.jsx)(e.h3,{id:"list-evaluations",children:"List Evaluations"}),"\n",(0,s.jsx)(e.p,{children:"List the evaluation results of all models in your app."}),"\n",(0,s.jsxs)(a.A,{children:[(0,s.jsx)(i.A,{value:"python",label:"Python",children:(0,s.jsx)(o.A,{className:"language-python",children:_})}),(0,s.jsx)(i.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(o.A,{className:"language-javascript",children:E})}),(0,s.jsx)(i.A,{value:"nodejs",label:"NodeJS",children:(0,s.jsx)(o.A,{className:"language-javascript",children:f})}),(0,s.jsx)(i.A,{value:"java",label:"Java",children:(0,s.jsx)(o.A,{className:"language-java",children:I})}),(0,s.jsx)(i.A,{value:"php",label:"PHP",children:(0,s.jsx)(o.A,{className:"language-php",children:m})}),(0,s.jsx)(i.A,{value:"curl",label:"cURL",children:(0,s.jsx)(o.A,{className:"language-bash",children:v})})]}),"\n",(0,s.jsx)(e.h3,{id:"get-model-version-evaluation",children:"Get Model Version Evaluation"}),"\n",(0,s.jsxs)(e.p,{children:["Get the evaluation results of a specific version of a custom model by using the ",(0,s.jsx)(e.code,{children:"evaluation_id"})," returned after starting an evaluation."]}),"\n",(0,s.jsxs)(a.A,{children:[(0,s.jsx)(i.A,{value:"python",label:"Python",children:(0,s.jsx)(o.A,{className:"language-python",children:A})}),(0,s.jsx)(i.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(o.A,{className:"language-javascript",children:g})}),(0,s.jsx)(i.A,{value:"nodejs",label:"NodeJS",children:(0,s.jsx)(o.A,{className:"language-javascript",children:D})}),(0,s.jsx)(i.A,{value:"java",label:"Java",children:(0,s.jsx)(o.A,{className:"language-java",children:R})}),(0,s.jsx)(i.A,{value:"php",label:"PHP",children:(0,s.jsx)(o.A,{className:"language-php",children:O})}),(0,s.jsx)(i.A,{value:"curl",label:"cURL",children:(0,s.jsx)(o.A,{className:"language-bash",children:S})})]}),"\n",(0,s.jsx)(e.h3,{id:"list-model-version-evaluations",children:"List Model Version Evaluations"}),"\n",(0,s.jsx)(e.p,{children:"List the evaluation results of a model version in your app."}),"\n",(0,s.jsxs)(a.A,{children:[(0,s.jsx)(i.A,{value:"python",label:"Python",children:(0,s.jsx)(o.A,{className:"language-python",children:T})}),(0,s.jsx)(i.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(o.A,{className:"language-javascript",children:U})}),(0,s.jsx)(i.A,{value:"nodejs",label:"NodeJS",children:(0,s.jsx)(o.A,{className:"language-javascript",children:b})}),(0,s.jsx)(i.A,{value:"java",label:"Java",children:(0,s.jsx)(o.A,{className:"language-java",children:P})}),(0,s.jsx)(i.A,{value:"php",label:"PHP",children:(0,s.jsx)(o.A,{className:"language-php",children:C})}),(0,s.jsx)(i.A,{value:"curl",label:"cURL",children:(0,s.jsx)(o.A,{className:"language-bash",children:N})})]}),"\n",(0,s.jsx)(e.admonition,{type:"tip",children:(0,s.jsxs)(e.p,{children:["You can also learn how to interpret a model's evaluation results via the Portal ",(0,s.jsx)(e.a,{href:"https://docs.clarifai.com/portal-guide/evaluate/interpreting-evaluations",children:"here"}),"."]})})]})}function M(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(j,{...n})}):j(n)}},19365:(n,e,t)=>{t.d(e,{A:()=>i});t(96540);var s=t(18215);const r={tabItem:"tabItem_Ymn6"};var a=t(74848);function i(n){let{children:e,hidden:t,className:i}=n;return(0,a.jsx)("div",{role:"tabpanel",className:(0,s.A)(r.tabItem,i),hidden:t,children:e})}},11470:(n,e,t)=>{t.d(e,{A:()=>D});var s=t(96540),r=t(18215),a=t(23104),i=t(56347),o=t(205),l=t(57485),c=t(31682),p=t(70679);function h(n){return s.Children.toArray(n).filter((n=>"\n"!==n)).map((n=>{if(!n||(0,s.isValidElement)(n)&&function(n){const{props:e}=n;return!!e&&"object"==typeof e&&"value"in e}(n))return n;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof n.type?n.type:n.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function d(n){const{values:e,children:t}=n;return(0,s.useMemo)((()=>{const n=e??function(n){return h(n).map((n=>{let{props:{value:e,label:t,attributes:s,default:r}}=n;return{value:e,label:t,attributes:s,default:r}}))}(t);return function(n){const e=(0,c.X)(n,((n,e)=>n.value===e.value));if(e.length>0)throw new Error(`Docusaurus error: Duplicate values "${e.map((n=>n.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(n),n}),[e,t])}function u(n){let{value:e,tabValues:t}=n;return t.some((n=>n.value===e))}function _(n){let{queryString:e=!1,groupId:t}=n;const r=(0,i.W6)(),a=function(n){let{queryString:e=!1,groupId:t}=n;if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:e,groupId:t});return[(0,l.aZ)(a),(0,s.useCallback)((n=>{if(!a)return;const e=new URLSearchParams(r.location.search);e.set(a,n),r.replace({...r.location,search:e.toString()})}),[a,r])]}function E(n){const{defaultValue:e,queryString:t=!1,groupId:r}=n,a=d(n),[i,l]=(0,s.useState)((()=>function(n){let{defaultValue:e,tabValues:t}=n;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!u({value:e,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${t.map((n=>n.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const s=t.find((n=>n.default))??t[0];if(!s)throw new Error("Unexpected error: 0 tabValues");return s.value}({defaultValue:e,tabValues:a}))),[c,h]=_({queryString:t,groupId:r}),[E,f]=function(n){let{groupId:e}=n;const t=function(n){return n?`docusaurus.tab.${n}`:null}(e),[r,a]=(0,p.Dv)(t);return[r,(0,s.useCallback)((n=>{t&&a.set(n)}),[t,a])]}({groupId:r}),I=(()=>{const n=c??E;return u({value:n,tabValues:a})?n:null})();(0,o.A)((()=>{I&&l(I)}),[I]);return{selectedValue:i,selectValue:(0,s.useCallback)((n=>{if(!u({value:n,tabValues:a}))throw new Error(`Can't select invalid tab value=${n}`);l(n),h(n),f(n)}),[h,f,a]),tabValues:a}}var f=t(92303);const I={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var m=t(74848);function v(n){let{className:e,block:t,selectedValue:s,selectValue:i,tabValues:o}=n;const l=[],{blockElementScrollPositionUntilNextRender:c}=(0,a.a_)(),p=n=>{const e=n.currentTarget,t=l.indexOf(e),r=o[t].value;r!==s&&(c(e),i(r))},h=n=>{let e=null;switch(n.key){case"Enter":p(n);break;case"ArrowRight":{const t=l.indexOf(n.currentTarget)+1;e=l[t]??l[0];break}case"ArrowLeft":{const t=l.indexOf(n.currentTarget)-1;e=l[t]??l[l.length-1];break}}e?.focus()};return(0,m.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":t},e),children:o.map((n=>{let{value:e,label:t,attributes:a}=n;return(0,m.jsx)("li",{role:"tab",tabIndex:s===e?0:-1,"aria-selected":s===e,ref:n=>l.push(n),onKeyDown:h,onClick:p,...a,className:(0,r.A)("tabs__item",I.tabItem,a?.className,{"tabs__item--active":s===e}),children:t??e},e)}))})}function A(n){let{lazy:e,children:t,selectedValue:r}=n;const a=(Array.isArray(t)?t:[t]).filter(Boolean);if(e){const n=a.find((n=>n.props.value===r));return n?(0,s.cloneElement)(n,{className:"margin-top--md"}):null}return(0,m.jsx)("div",{className:"margin-top--md",children:a.map(((n,e)=>(0,s.cloneElement)(n,{key:e,hidden:n.props.value!==r})))})}function g(n){const e=E(n);return(0,m.jsxs)("div",{className:(0,r.A)("tabs-container",I.tabList),children:[(0,m.jsx)(v,{...e,...n}),(0,m.jsx)(A,{...e,...n})]})}function D(n){const e=(0,f.A)();return(0,m.jsx)(g,{...n,children:h(n.children)},String(e))}}}]);
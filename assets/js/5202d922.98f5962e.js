"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[8067],{58215:function(e,n,t){var a=t(67294);n.Z=function(e){var n=e.children,t=e.hidden,s=e.className;return a.createElement("div",{role:"tabpanel",hidden:t,className:s},n)}},26396:function(e,n,t){t.d(n,{Z:function(){return d}});var a=t(87462),s=t(67294),i=t(72389),r=t(79443);var o=function(){var e=(0,s.useContext)(r.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},l=t(63616),p=t(86010),u="tabItem_vU9c";function c(e){var n,t,i,r=e.lazy,c=e.block,d=e.defaultValue,h=e.values,m=e.groupId,g=e.className,f=s.Children.map(e.children,(function(e){if((0,s.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),_=null!=h?h:f.map((function(e){var n=e.props;return{value:n.value,label:n.label,attributes:n.attributes}})),b=(0,l.lx)(_,(function(e,n){return e.value===n.value}));if(b.length>0)throw new Error('Docusaurus error: Duplicate values "'+b.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var y=null===d?d:null!=(n=null!=d?d:null==(t=f.find((function(e){return e.props.default})))?void 0:t.props.value)?n:null==(i=f[0])?void 0:i.props.value;if(null!==y&&!_.some((function(e){return e.value===y})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+y+'" but none of its children has the corresponding value. Available values are: '+_.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var v=o(),T=v.tabGroupChoices,S=v.setTabGroupChoices,k=(0,s.useState)(y),I=k[0],w=k[1],C=[],P=(0,l.o5)().blockElementScrollPositionUntilNextRender;if(null!=m){var N=T[m];null!=N&&N!==I&&_.some((function(e){return e.value===N}))&&w(N)}var R=function(e){var n=e.currentTarget,t=C.indexOf(n),a=_[t].value;a!==I&&(P(n),w(a),null!=m&&S(m,a))},E=function(e){var n,t=null;switch(e.key){case"ArrowRight":var a=C.indexOf(e.currentTarget)+1;t=C[a]||C[0];break;case"ArrowLeft":var s=C.indexOf(e.currentTarget)-1;t=C[s]||C[C.length-1]}null==(n=t)||n.focus()};return s.createElement("div",{className:"tabs-container"},s.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,p.Z)("tabs",{"tabs--block":c},g)},_.map((function(e){var n=e.value,t=e.label,i=e.attributes;return s.createElement("li",(0,a.Z)({role:"tab",tabIndex:I===n?0:-1,"aria-selected":I===n,key:n,ref:function(e){return C.push(e)},onKeyDown:E,onFocus:R,onClick:R},i,{className:(0,p.Z)("tabs__item",u,null==i?void 0:i.className,{"tabs__item--active":I===n})}),null!=t?t:n)}))),r?(0,s.cloneElement)(f.filter((function(e){return e.props.value===I}))[0],{className:"margin-vert--md"}):s.createElement("div",{className:"margin-vert--md"},f.map((function(e,n){return(0,s.cloneElement)(e,{key:n,hidden:e.props.value!==I})}))))}function d(e){var n=(0,i.Z)();return s.createElement(c,(0,a.Z)({key:String(n)},e))}},30958:function(e,n,t){t.r(n),t.d(n,{contentTitle:function(){return c},default:function(){return g},frontMatter:function(){return u},metadata:function(){return d},toc:function(){return h}});var a=t(87462),s=t(63366),i=(t(67294),t(3905)),r=t(26396),o=t(58215),l=t(19055),p=["components"],u={description:"Select a subset of your data based on useful filters.",sidebar_position:2},c="Filter",d={unversionedId:"api-guide/search/legacy-search/filter",id:"api-guide/search/legacy-search/filter",title:"Filter",description:"Select a subset of your data based on useful filters.",source:"@site/docs/api-guide/search/legacy-search/filter.md",sourceDirName:"api-guide/search/legacy-search",slug:"/api-guide/search/legacy-search/filter",permalink:"/api-guide/search/legacy-search/filter",tags:[],version:"current",sidebarPosition:2,frontMatter:{description:"Select a subset of your data based on useful filters.",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Combine or Negate",permalink:"/api-guide/search/legacy-search/combine-or-negate"},next:{title:"Rank",permalink:"/api-guide/search/legacy-search/rank"}},h=[{value:"By Custom Metadata",id:"by-custom-metadata",children:[],level:2},{value:"By Geo Location",id:"by-geo-location",children:[{value:"Add Inputs With Longitude and Latitude Points",id:"add-inputs-with-longitude-and-latitude-points",children:[],level:3},{value:"Perform a Search With One Geo Point and Radius in Kilometers",id:"perform-a-search-with-one-geo-point-and-radius-in-kilometers",children:[],level:3},{value:"Perform a Search With Two Geo Points",id:"perform-a-search-with-two-geo-points",children:[],level:3}],level:2}],m={toc:h};function g(e){var n=e.components,t=(0,s.Z)(e,p);return(0,i.kt)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"filter"},"Filter"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Select a subset of your data based on useful filters")),(0,i.kt)("hr",null),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"The initialization code used in the following example is outlined in detail on the ",(0,i.kt)("a",{parentName:"p",href:"../../api-overview/api-clients#client-installation-instructions"},"client installation page.")))),(0,i.kt)("h2",{id:"by-custom-metadata"},"By Custom Metadata"),(0,i.kt)("p",null,"After you have added inputs with custom metadata, you can search by that metadata."),(0,i.kt)("p",null,"Below is an example of searching over custom metadata. You can exact match any ",(0,i.kt)("inlineCode",{parentName:"p"},"key"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"value")," pair no matter how nested it is. For example, if the metadata on an input is:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'{\n  "keyname": "value1",\n  "somelist": [1,2,3],\n  "somenesting": {\n     "keyname2":"value2",\n     "list2":[4,5]\n   }\n}\n')),(0,i.kt)("p",null,"Then the following searches will find this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'{\n  "keyname": "value1"\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'{\n  "somelist": [1,2,3]\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'{\n  "somelist": [1,2]\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'{\n  "somenesting": {"keyname2":"value2"}\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'{\n  "somenesting": {"list2":[5]}\n}\n')),(0,i.kt)("p",null,"How to perform searches:"),(0,i.kt)(r.Z,{mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"grpc_python",label:"gRPC Python",mdxType:"TabItem"},(0,i.kt)(l.Z,{className:"language-python",mdxType:"CodeBlock"},"################################################################\n# In this section, we set the user authentication and app ID. \n# Change these strings to run your own example.\n################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\nfrom google.protobuf.struct_pb2 import Struct\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID) # The userDataObject is required when using a PAT\n\nsearch_metadata = Struct()\nsearch_metadata.update({\"type\": \"animal\"})\n\npost_searches_response = stub.PostSearches(\n    service_pb2.PostSearchesRequest(\n        user_app_id=userDataObject,\n        query=resources_pb2.Query(\n            ands=[\n                resources_pb2.And(\n                    input=resources_pb2.Input(\n                        data=resources_pb2.Data(\n                            metadata=search_metadata\n                        )\n                    )\n                )\n            ]\n        )\n    ),\n    metadata=metadata\n)\n\nif post_searches_response.status.code != status_code_pb2.SUCCESS:\n    print(post_searches_response.status)\n    raise Exception(\"Post searches failed, status: \" + post_searches_response.status.description)\n\nprint(\"Found inputs:\")\nfor hit in post_searches_response.hits:\n    print(\"\\tScore %.2f for %s\" % (hit.score, hit.input.id))    ")),(0,i.kt)(o.Z,{value:"grpc_java",label:"gRPC Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\nimport com.google.protobuf.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nMultiSearchResponse postSearchesResponse = stub.postSearches(\n    PostSearchesRequest.newBuilder().setQuery(\n        Query.newBuilder().addAnds(\n            And.newBuilder().setInput(\n                Input.newBuilder().setData(\n                    Data.newBuilder().setMetadata(\n                        Struct.newBuilder()\n                            .putFields("type", Value.newBuilder().setStringValue("animal").build())\n                    )\n                )\n            )\n        )\n    )\n    .build()\n);\n\nif (postSearchesResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n  throw new RuntimeException("Post searches failed, status: " + postSearchesResponse.getStatus());\n}\n\nSystem.out.println("Found inputs " + postSearchesResponse.getHitsCount() + ":");\nfor (Hit hit : postSearchesResponse.getHitsList()) {\n    System.out.printf("\\tScore %.2f for %s\\n", hit.getScore(), hit.getInput().getId());\n}\n'))),(0,i.kt)(o.Z,{value:"grpc_nodejs",label:"gRPC NodeJS",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nstub.PostSearches(\n    {\n        query: {\n            ands: [\n                {\n                    input: {\n                        data: {\n                            metadata: {\n                                "type": "animal"\n                            }\n                        }\n                    }\n                }\n            ]\n        }\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post searches failed, status: " + response.status.description);\n        }\n\n        console.log("Found inputs:");\n        for (const hit of response.hits) {\n            console.log("\\tScore " + hit.score + " for " + hit.input.id);\n        }\n    }\n);\n'))),(0,i.kt)(o.Z,{value:"javascript",label:"Javascript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"// Search with only metadata\napp.inputs.search({\n  input: {\n    metadata: {\n      key: 'value'\n    }\n  }\n}).then(\n  function(response) {\n    // do something with response\n  },\n  function(err) {\n    // there was an error\n  }\n);\n\n// Search with nested metadata\napp.inputs.search({\n  input: {\n    metadata: {\n      parent: {\n        key: 'value'\n      }\n    }\n  }\n}).then(\n  function(response) {\n    // do something with response\n  },\n  function(err) {\n    // there was an error\n  }\n);\n\n// Search with metadata and concepts or input source\napp.inputs.search([\n  {\n    input: { metadata: { key: 'value' } }\n  },\n  {\n    concept: { name: 'cat' }\n  },\n  {\n    concept: { type: 'output', name: 'group', value: false }\n  }\n]).then(\n  function(response) {\n    // do something with response\n  },\n  function(err) {\n    // there was an error\n  }\n);\n"))),(0,i.kt)(o.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from clarifai.rest import ClarifaiApp, InputSearchTerm, OutputSearchTerm, SearchQueryBuilder\napp = ClarifaiApp(api_key='YOUR_API_KEY')\n\n# search with simple metadata only\napp.inputs.search_by_metadata(metadata={'name':'bla'})\n\n# search with nested metadata only\napp.inputs.search_by_metadata(metadata={'my_class1': { 'name' : 'bla' }})\n\n# search with metadata combined with others\nquery = SearchQueryBuilder()\nquery.add_term(InputSearchTerm(concept='cat'))\nquery.add_term(InputSearchTerm(metadata={'name':'value'}))\nquery.add_term(OutputSearchTerm(concept='group', value=False))\n\napp.inputs.search(query)\n"))),(0,i.kt)(o.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'JsonObject metadata = new JsonObject();\nmetadata.addProperty("isPuppy", true);\n\nList<SearchHit> hits = client\n  .searchInputs(SearchClause.matchMetadata(metadata))\n  .executeSync();\n'))),(0,i.kt)(o.Z,{value:"csharp",label:"C#",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'using System.Threading.Tasks;\nusing Clarifai.API;\nusing Clarifai.DTOs.Searches;\nusing Newtonsoft.Json.Linq;\n\nnamespace YourNamespace\n{\n    public class YourClassName\n    {\n        public static async Task Main()\n        {\n            var client = new ClarifaiClient("YOUR_API_KEY");\n\n            var metadata = new JObject();\n            metadata.Add("isPuppy", true);\n            await client.SearchInputs(\n                    SearchBy.Metadata(metadata))\n                .Page(1)\n                .ExecuteAsync();\n        }\n    }\n}\n'))),(0,i.kt)(o.Z,{value:"objective-c",label:"Objective-C",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-objectivec"},'// Search by metadata only.\n[_app searchByMetadata:@{@"my_key": @[@"my", @"values"]} page:@1 perPage:@20 completion:^(NSArray<ClarifaiSearchResult *> *results, NSError *error) {\n  // Print output of first search result.\n  NSLog(@"inputID: %@", results[0].inputID);\n  NSLog(@"URL: %@", results[0].mediaURL);\n  NSLog(@"probability of input matching search query: %@", results[0].score);\n}];\n\n// Search metadata in conjunction with other ClarifaiSearchTerms. For example, the\n// following will search for inputs with predicted tag "fast" and matching metadata.\nClarifaiConcept *conceptFromGeneralModel = [[ClarifaiConcept alloc] initWithConceptName:@"fast"];\nClarifaiSearchTerm *searchTerm1 = [ClarifaiSearchTerm searchByPredictedConcept:conceptFromGeneralModel];\n\nClarifaiSearchTerm *searchTerm2 = [ClarifaiSearchTerm searchInputsWithMetadata:@{@"my_key": @[@"my", @"values"]}];\n\n[app search:@[searchTerm1, searchTerm2] page:@1 perPage:@20 completion:^(NSArray<ClarifaiSearchResult *> *results, NSError *error) {\n  // Print output of first search result.\n  NSLog(@"inputID: %@", results[0].inputID);\n  NSLog(@"URL: %@", results[0].mediaURL);\n  NSLog(@"probability of input matching search query: %@", results[0].score);\n}];\n'))),(0,i.kt)(o.Z,{value:"php",label:"PHP",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"// Coming soon\n"))),(0,i.kt)(o.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST \\\n  -H "Authorization: Key {api-key}" \\\n  -H "Content-Type: application/json" \\\n  -d \'\n  {\n    "query": {\n      "ands": [\n        {\n          "input":{\n            "data": {\n              "metadata": {\n                "type": "animal"\n              }\n            }\n          }\n        }\n      ]\n    }\n  }\'\\\n  https://api.clarifai.com/v2/searches\n')))),(0,i.kt)("h2",{id:"by-geo-location"},"By Geo Location"),(0,i.kt)("p",null,"Search by geo location allows you to restrict your search results to a bounding box based on longitude and latitude points. There are two ways you can provide longitude/latitude points. You can provide one point and a radius or you can provide two points."),(0,i.kt)("p",null,"It is important to note that a search by geo location acts as a filter and returns results ranked by any other provided search criteria, whether that is a visual search, concept search, or something else. If no other criteria is provided, results will return in the order the inputs were created, NOT by their distance to center of the search area."),(0,i.kt)("p",null,'If you are providing one point and a radius, the radius can be in "mile", "kilometer", "degree", or "radian", marked by keywords ',(0,i.kt)("inlineCode",{parentName:"p"},"withinMiles"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"withinKilometers"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"withinDegrees"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"withinRadians"),"."),(0,i.kt)("p",null,"If you are providing two points, a box will be drawn from the uppermost point to the lowermost point, and the leftmost point to the rightmost point."),(0,i.kt)("p",null,"Before you perform a search by geo location, make sure you have added inputs with longitude and latitude points."),(0,i.kt)("h3",{id:"add-inputs-with-longitude-and-latitude-points"},"Add Inputs With Longitude and Latitude Points"),(0,i.kt)("p",null,"Provide a geo point to an input. The geo point is a JSON object consisting of a longitude and a latitude in GPS coordinate system ","(","SRID 4326",")",". There can be at most one single geo point associated with each input."),(0,i.kt)(r.Z,{mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"grpc_python",label:"gRPC Python",mdxType:"TabItem"},(0,i.kt)(l.Z,{className:"language-python",mdxType:"CodeBlock"},"##################################################################################\n# In this section, we set the user authentication, app ID, and the input details \n# we want to add. Change these strings to run your own example.\n##################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to add your own input with longitude and latitude points\nIMAGE_URL = 'https://samples.clarifai.com/dog.tiff'\nLONGITUDE = -30.0\nLATITUDE = 40.0\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID) # The userDataObject is required when using a PAT\n\npost_inputs_response = stub.PostInputs(\n    service_pb2.PostInputsRequest(\n        user_app_id=userDataObject,\n        inputs=[\n            resources_pb2.Input(\n                data=resources_pb2.Data(\n                    image=resources_pb2.Image(\n                        url=IMAGE_URL,\n                        allow_duplicate_url=True\n                    ),\n                    geo=resources_pb2.Geo(\n                        geo_point=resources_pb2.GeoPoint(\n                            longitude=LONGITUDE,\n                            latitude=LATITUDE,\n                        )\n                    )\n                )\n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif post_inputs_response.status.code != status_code_pb2.SUCCESS:\n    print(post_inputs_response.status)\n    raise Exception(\"Post inputs failed, status: \" + post_inputs_response.status.description)\n    \n")),(0,i.kt)(o.Z,{value:"grpc_java",label:"gRPC Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nMultiInputResponse postInputsResponse = stub.postInputs(\n    PostInputsRequest.newBuilder().addInputs(\n        Input.newBuilder().setData(\n            Data.newBuilder()\n                .setImage(\n                    Image.newBuilder()\n                        .setUrl("https://samples.clarifai.com/dog.tiff")\n                        .setAllowDuplicateUrl(true)\n                )\n                .setGeo(\n                    Geo.newBuilder().setGeoPoint(\n                        GeoPoint.newBuilder()\n                            .setLongitude(-30)\n                            .setLatitude(40)\n                    )\n                )\n        )\n    ).build()\n);\n\nif (postInputsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n    throw new RuntimeException("Post inputs failed, status: " + postInputsResponse.getStatus());\n}\n'))),(0,i.kt)(o.Z,{value:"grpc_nodejs",label:"gRPC NodeJS",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nstub.PostInputs(\n    {\n        inputs: [\n            {\n                data: {\n                    image: {url: "https://samples.clarifai.com/dog.tiff", allow_duplicate_url: true},\n                    geo: {\n                        geo_point: {\n                            longitude: -30,\n                            latitude: 40\n                        }\n                    }\n                }\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post inputs failed, status: " + response.status.description);\n        }\n    }\n);\n'))),(0,i.kt)(o.Z,{value:"javascript",label:"Javascript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'app.inputs.create({\n  url: "https://samples.clarifai.com/puppy.jpeg",\n  geo: { longitude: 116.2317, latitude: 39.5427},\n}).then(\n  function(response) {\n    // do something with response\n  },\n  function(err) {\n    // there was an error\n  }\n);\n'))),(0,i.kt)(o.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from clarifai.rest import ClarifaiApp, Geo, GeoPoint\napp = ClarifaiApp(api_key='YOUR_API_KEY')\n\ngeo_p1 = Geo(geo_point=GeoPoint(116.2317,39.5427))\n\napp.inputs.create_image_from_url(url=\"https://samples.clarifai.com/puppy.jpeg\", geo=geo_p1)\n"))),(0,i.kt)(o.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'client.addInputs().plus(ClarifaiInput.forImage("https://samples.clarifai.com/puppy.jpeg")\n    .withGeo(PointF.at(116.2317F, 39.5427F))).executeSync();\n'))),(0,i.kt)(o.Z,{value:"csharp",label:"C#",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'using System.Threading.Tasks;\nusing Clarifai.API;\nusing Clarifai.DTOs;\nusing Clarifai.DTOs.Inputs;\n\nnamespace YourNamespace\n{\n    public class YourClassName\n    {\n        public static async Task Main()\n        {\n            var client = new ClarifaiClient("YOUR_API_KEY");\n\n            await client.AddInputs(\n                    new ClarifaiURLImage(\n                        "https://samples.clarifai.com/puppy.jpeg",\n                        geo: new GeoPoint(116.2317M, 39.5427M)))\n                .ExecuteAsync();\n        }\n    }\n}\n'))),(0,i.kt)(o.Z,{value:"objective-c",label:"Objective-C",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-objectivec"},'ClarifaiImage *image = [[ClarifaiImage alloc] initWithURL:@"https://samples.clarifai.com/metro-north.jpg"];\nimage.location = [[ClarifaiLocation alloc] initWithLatitude:116.2317 longitude:39.5427];\n\n[_app addInputs:@[image] completion:^(NSArray<ClarifaiInput *> *inputs, NSError *error) {\n  NSLog(@"%@",inputs);\n}];\n'))),(0,i.kt)(o.Z,{value:"php",label:"PHP",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},'use Clarifai\\API\\ClarifaiClient;\nuse Clarifai\\DTOs\\GeoPoint;\nuse Clarifai\\DTOs\\Inputs\\ClarifaiURLImage;\n\n$client = new ClarifaiClient(\'YOUR_API_KEY\');\n\n$response = $client->addInputs(\n        (new ClarifaiURLImage(\'https://samples.clarifai.com/puppy.jpeg\'))\n            ->withGeo(new GeoPoint(116.2317, 39.5427)))\n    ->executeSync();\n\nif ($response->isSuccessful()) {\n    echo "Response is successful.\\n";\n} else {\n    echo "Response is not successful. Reason: \\n";\n    echo $response->status()->description() . "\\n";\n    echo $response->status()->errorDetails() . "\\n";\n    echo "Status code: " . $response->status()->statusCode();\n}\n'))),(0,i.kt)(o.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'\n  {\n    "inputs": [\n      {\n        "data": {\n          "image": {\n            "url": "https://samples.clarifai.com/dog.tiff",\n            "allow_duplicate_url": true\n          },\n          "geo": {\n            "geo_point": {\n              "longitude": -30,\n              "latitude": 40\n            }\n          }\n        }\n      }\n    ]\n  }\'\\\n  https://api.clarifai.com/v2/inputs\n')))),(0,i.kt)("h3",{id:"perform-a-search-with-one-geo-point-and-radius-in-kilometers"},"Perform a Search With One Geo Point and Radius in Kilometers"),(0,i.kt)(r.Z,{mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"grpc_python",label:"gRPC Python",mdxType:"TabItem"},(0,i.kt)(l.Z,{className:"language-python",mdxType:"CodeBlock"},"#####################################################################################\n# In this section, we set the user authentication, app ID, and details of the point \n# we want to perform a search with. Change these strings to run your own example.\n#####################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to perform your own search\nLONGITUDE = -29.0\nLATITUDE = 40.0\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID) # The userDataObject is required when using a PAT\n\npost_searches_response = stub.PostSearches(\n    service_pb2.PostSearchesRequest(\n        user_app_id=userDataObject,\n        query=resources_pb2.Query(\n            ands=[\n                resources_pb2.And(\n                    input=resources_pb2.Input(\n                        data=resources_pb2.Data(\n                            geo=resources_pb2.Geo(\n                                geo_point=resources_pb2.GeoPoint(\n                                    longitude=LONGITUDE,\n                                    latitude=LATITUDE,\n                                ),\n                                geo_limit=resources_pb2.GeoLimit(\n                                    type=\"withinKilometers\",\n                                    value=150.0\n                                )\n                            )\n                        )\n                    )\n                )\n            ]\n        )\n    ),\n    metadata=metadata\n)\n\nif post_searches_response.status.code != status_code_pb2.SUCCESS:\n    print(post_searches_response)\n    raise Exception(\"Post searches failed, status: \" + post_searches_response.status.description)\n\nprint(\"Found inputs:\")\nfor hit in post_searches_response.hits:\n    print(\"\\tScore %.2f for %s\" % (hit.score, hit.input.id))\n")),(0,i.kt)(o.Z,{value:"grpc_java",label:"gRPC Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nMultiSearchResponse postSearchesResponse = stub.postSearches(\n    PostSearchesRequest.newBuilder().setQuery(\n        Query.newBuilder().addAnds(\n            And.newBuilder().setInput(\n                Input.newBuilder().setData(\n                    Data.newBuilder().setGeo(\n                        Geo.newBuilder()\n                            .setGeoPoint(\n                                GeoPoint.newBuilder()\n                                    .setLongitude(-29)\n                                    .setLatitude(40)\n                            )\n                            .setGeoLimit(\n                                GeoLimit.newBuilder()\n                                    .setType("withinKilometers")\n                                    .setValue(150.0f)\n                            )\n                    )\n                )\n            )\n        )\n    )\n    .build()\n);\n\nif (postSearchesResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n  throw new RuntimeException("Post searches failed, status: " + postSearchesResponse.getStatus());\n}\n\nSystem.out.println("Found inputs " + postSearchesResponse.getHitsCount() + ":");\nfor (Hit hit : postSearchesResponse.getHitsList()) {\n    System.out.printf("\\tScore %.2f for %s\\n", hit.getScore(), hit.getInput().getId());\n}\n'))),(0,i.kt)(o.Z,{value:"grpc_nodejs",label:"gRPC NodeJS",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nstub.PostSearches(\n    {\n        query: {\n            ands: [\n                {\n                    input: {\n                        data: {\n                            geo: {\n                                geo_point: {\n                                    longitude: -29,\n                                    latitude: 40\n                                },\n                                geo_limit: {\n                                    type: "withinKilometers",\n                                    value: 150.0\n                                }\n                            }\n                        }\n                    }\n                }\n            ]\n        }\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post searches failed, status: " + response.status.description);\n        }\n\n        console.log("Found inputs:");\n        for (const hit of response.hits) {\n            console.log("\\tScore " + hit.score + " for " + hit.input.id);\n        }\n    }\n);\n'))),(0,i.kt)(o.Z,{value:"javascript",label:"Javascript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"app.inputs.search({\n  input: {\n    geo: {\n      longitude: 116.2317,\n      latitude: 39.5427,\n      type: 'withinKilometers',\n      value: 1\n    }\n  }\n}).then(\n  function(response) {\n    // do something with response\n  },\n  function(err) {\n    // there was an error\n  }\n);\n"))),(0,i.kt)(o.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from clarifai.rest import ClarifaiApp, GeoPoint, GeoLimit\napp = ClarifaiApp(api_key='YOUR_API_KEY')\n\ngeo_p = GeoPoint(116.2317, 39.5427)\ngeo_l = GeoLimit(limit_type='kilometer', limit_range=1)\n\nimgs = app.inputs.search_by_geo(geo_point=geo_p, geo_limit=geo_l)\n"))),(0,i.kt)(o.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"client.searchInputs(SearchClause.matchGeo(PointF.at(59F, 29.75F), Radius.of(500, Radius.Unit.KILOMETER)))\n            .getPage(1)\n            .executeSync();\n"))),(0,i.kt)(o.Z,{value:"csharp",label:"C#",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'using System.Threading.Tasks;\nusing Clarifai.API;\nusing Clarifai.DTOs;\nusing Clarifai.DTOs.Searches;\n\nnamespace YourNamespace\n{\n    public class YourClassName\n    {\n        public static async Task Main()\n        {\n            var client = new ClarifaiClient("YOUR_API_KEY");\n\n            await client.SearchInputs(\n                    SearchBy.Geo(\n                        new GeoPoint(59M, 29.75M),\n                        new GeoRadius(500, GeoRadius.RadiusUnit.WithinKilometers)))\n                .Page(1)\n                .ExecuteAsync();\n        }\n    }\n}\n'))),(0,i.kt)(o.Z,{value:"objective-c",label:"Objective-C",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-objectivec"},'ClarifaiLocation *loc = [[ClarifaiLocation alloc] initWithLatitude:116.2317 longitude:39.5427];\nClarifaiGeo *geoFilterKilos = [[ClarifaiGeo alloc] initWithLocation:loc radius:50.0 andRadiusUnit:ClarifaiRadiusUnitKilometers];\nClarifaiSearchTerm *term = [ClarifaiSearchTerm searchInputsWithGeoFilter:geoFilterKilos];\n\n[_app search:@[term] page:@1 perPage:@20 completion:^(NSArray<ClarifaiSearchResult *> *results, NSError *error) {\n  NSLog(@"inputID: %@", results[0].inputID);\n  NSLog(@"URL: %@", results[0].mediaURL);\n  NSLog(@"probability of predicted concept: %@", results[0].score);\n}];\n'))),(0,i.kt)(o.Z,{value:"php",label:"PHP",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},'use Clarifai\\API\\ClarifaiClient;\nuse Clarifai\\DTOs\\GeoPoint;\nuse Clarifai\\DTOs\\GeoRadius;\nuse Clarifai\\DTOs\\GeoRadiusUnit;\nuse Clarifai\\DTOs\\Searches\\SearchBy;\nuse Clarifai\\DTOs\\Searches\\SearchInputsResult;\n\n$client = new ClarifaiClient(\'YOUR_API_KEY\');\n\n$response = $client->searchInputs(\n        SearchBy::geoCircle(\n            new GeoPoint(3, 0),\n            new GeoRadius(500, GeoRadiusUnit::withinKilometers())))\n    ->executeSync();\n\nif ($response->isSuccessful()) {\n    echo "Response is successful.\\n";\n\n    /** @var SearchInputsResult $result */\n    $result = $response->get();\n\n    foreach ($result->searchHits() as $searchHit) {\n        echo $searchHit->input()->id() . \' \' . $searchHit->score() . "\\n";\n    }\n} else {\n    echo "Response is not successful. Reason: \\n";\n    echo $response->status()->description() . "\\n";\n    echo $response->status()->errorDetails() . "\\n";\n    echo "Status code: " . $response->status()->statusCode();\n}\n'))),(0,i.kt)(o.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'\n  {\n    "query": {\n      "ands": [\n        {\n          "input": {\n            "data": {\n              "geo": {\n                "geo_point": {\n                  "longitude": -29.0,\n                  "latitude": 40.0\n                },\n                "geo_limit": {\n                  "type": "withinKilometers",\n                  "value": 150\n                }\n              }\n            }\n          }\n        }\n      ]\n    }\n  }\'\\\n  https://api.clarifai.com/v2/searches\n')))),(0,i.kt)("h3",{id:"perform-a-search-with-two-geo-points"},"Perform a Search With Two Geo Points"),(0,i.kt)(r.Z,{mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"grpc_python",label:"gRPC Python",mdxType:"TabItem"},(0,i.kt)(l.Z,{className:"language-python",mdxType:"CodeBlock"},"#####################################################################################\n# In this section, we set the user authentication, app ID, and details of the points \n# we want to perform a search with. Change these strings to run your own example.\n#####################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to perform your own search\nLONGITUDE_1 = -31.0\nLATITUDE_1 = 42.0\nLONGITUDE_2 = -29.0\nLATITUDE_2 = 39.0\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID) # The userDataObject is required when using a PAT\n\npost_searches_response = stub.PostSearches(\n    service_pb2.PostSearchesRequest(\n        user_app_id=userDataObject,\n        query=resources_pb2.Query(\n            ands=[\n                resources_pb2.And(\n                    input=resources_pb2.Input(\n                        data=resources_pb2.Data(\n                            geo=resources_pb2.Geo(\n                                geo_box=[\n                                    resources_pb2.GeoBoxedPoint(\n                                        geo_point=resources_pb2.GeoPoint(\n                                            longitude=LONGITUDE_1,\n                                            latitude=LATITUDE_1,\n                                        ),\n                                    ),\n                                    resources_pb2.GeoBoxedPoint(\n                                        geo_point=resources_pb2.GeoPoint(\n                                            longitude=LONGITUDE_2,\n                                            latitude=LATITUDE_2,\n                                        ),\n                                    ),\n                                ]\n                            )\n                        )\n                    )\n                )\n            ]\n        )\n    ),\n    metadata=metadata\n)\n\nif post_searches_response.status.code != status_code_pb2.SUCCESS:\n    print(post_searches_response.status)\n    raise Exception(\"Post searches failed, status: \" + post_searches_response.status.description)\n\nprint(\"Found inputs:\")\nfor hit in post_searches_response.hits:\n    print(\"\\tScore %.2f for %s\" % (hit.score, hit.input.id))\n")),(0,i.kt)(o.Z,{value:"grpc_java",label:"gRPC Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nMultiSearchResponse postSearchesResponse = stub.postSearches(\n    PostSearchesRequest.newBuilder().setQuery(\n        Query.newBuilder().addAnds(\n            And.newBuilder().setInput(\n                Input.newBuilder().setData(\n                    Data.newBuilder().setGeo(\n                        Geo.newBuilder()\n                            .addGeoBox(\n                                GeoBoxedPoint.newBuilder().setGeoPoint(\n                                    GeoPoint.newBuilder()\n                                        .setLongitude(-31)\n                                        .setLatitude(42)\n                                )\n                            )\n                            .addGeoBox(\n                                GeoBoxedPoint.newBuilder().setGeoPoint(\n                                    GeoPoint.newBuilder()\n                                        .setLongitude(-29)\n                                        .setLatitude(39)\n                                ).build()\n                            )\n                    )\n                )\n            )\n        )\n    )\n    .build()\n);\n\nif (postSearchesResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n  throw new RuntimeException("Post searches failed, status: " + postSearchesResponse.getStatus());\n}\n\nSystem.out.println("Found inputs " + postSearchesResponse.getHitsCount() + ":");\nfor (Hit hit : postSearchesResponse.getHitsList()) {\n    System.out.printf("\\tScore %.2f for %s\\n", hit.getScore(), hit.getInput().getId());\n}\n'))),(0,i.kt)(o.Z,{value:"grpc_nodejs",label:"gRPC NodeJS",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nstub.PostSearches(\n    {\n        query: {\n            ands: [\n                {\n                    input: {\n                        data: {\n                            geo: {\n                                geo_box: [\n                                    {\n                                        geo_point: {\n                                            longitude: -31,\n                                            latitude: 42\n                                        }\n                                    },\n                                    {\n                                        geo_point: {\n                                            longitude: -29,\n                                            latitude: 39\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                }\n            ]\n        }\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post searches failed, status: " + response.status.description);\n        }\n\n        console.log("Found inputs:");\n        for (const hit of response.hits) {\n            console.log("\\tScore " + hit.score + " for " + hit.input.id);\n        }\n    }\n);\n'))),(0,i.kt)(o.Z,{value:"javascript",label:"Javascript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"app.inputs.search({\n  input: {\n    geo: [{\n      latitude: 116.2316,\n      longitude: 39.5426\n    }, {\n      latitude: 116.2318,\n      longitude: 39.5428\n    }]\n  }\n}).then(\n  function(response) {\n    // do something with response\n  },\n  function(err) {\n    // there was an error\n  }\n);\n"))),(0,i.kt)(o.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from clarifai.rest import ClarifaiApp, GeoBox, GeoPoint\napp = ClarifaiApp(api_key='YOUR_API_KEY')\n\np1 = GeoPoint(116.2316, 39.5426)\np2 = GeoPoint(116.2318, 39.5428)\nbox1 = GeoBox(point1=p1, point2=p2)\n\nimgs = app.inputs.search_by_geo(geo_box=box1)\n"))),(0,i.kt)(o.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"client.searchInputs(SearchClause.matchGeo(PointF.at(3F, 0F), PointF.at(70, 30F)))\n            .getPage(1)\n            .executeSync()\n"))),(0,i.kt)(o.Z,{value:"csharp",label:"C#",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'using System.Threading.Tasks;\nusing Clarifai.API;\nusing Clarifai.DTOs;\nusing Clarifai.DTOs.Searches;\n\nnamespace YourNamespace\n{\n    public class YourClassName\n    {\n        public static async Task Main()\n        {\n            var client = new ClarifaiClient("YOUR_API_KEY");\n\n            await client.SearchInputs(\n                    SearchBy.Geo(\n                        new GeoPoint(3M, 0M),\n                        new GeoPoint(70M, 30M)))\n                .Page(1)\n                .ExecuteAsync();\n        }\n    }\n}\n'))),(0,i.kt)(o.Z,{value:"objective-c",label:"Objective-C",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-objectivec"},'ClarifaiLocation *startLoc = [[ClarifaiLocation alloc] initWithLatitude:50 longitude:58];\nClarifaiLocation *endLoc = [[ClarifaiLocation alloc] initWithLatitude:32 longitude:-30];\nClarifaiGeo *geoBox = [[ClarifaiGeo alloc] initWithGeoBoxFromStartLocation:startLoc toEndLocation:endLoc];\n\n[_app search:@[term] page:@1 perPage:@20 completion:^(NSArray<ClarifaiSearchResult *> *results, NSError *error) {\n  NSLog(@"inputID: %@", results[0].inputID);\n  NSLog(@"URL: %@", results[0].mediaURL);\n  NSLog(@"probability of predicted concept: %@", results[0].score);\n}];\n'))),(0,i.kt)(o.Z,{value:"php",label:"PHP",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},'use Clarifai\\API\\ClarifaiClient;\nuse Clarifai\\DTOs\\GeoPoint;\nuse Clarifai\\DTOs\\Searches\\SearchBy;\nuse Clarifai\\DTOs\\Searches\\SearchInputsResult;\n\n$client = new ClarifaiClient(\'YOUR_API_KEY\');\n\n$response = $client->searchInputs(\n        SearchBy::geoRectangle(new GeoPoint(3, 0), new GeoPoint(70, 30)))\n    ->executeSync();\n\nif ($response->isSuccessful()) {\n    echo "Response is successful.\\n";\n\n    /** @var SearchInputsResult $result */\n    $result = $response->get();\n\n    foreach ($result->searchHits() as $searchHit) {\n        echo $searchHit->input()->id() . \' \' . $searchHit->score() . "\\n";\n    }\n} else {\n    echo "Response is not successful. Reason: \\n";\n    echo $response->status()->description() . "\\n";\n    echo $response->status()->errorDetails() . "\\n";\n    echo "Status code: " . $response->status()->statusCode();\n}\n'))),(0,i.kt)(o.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'\n  {\n    "query": {\n      "ands": [\n        {\n          "input": {\n            "data": {\n              "geo": {\n                "geo_box": [\n                  {\n                    "geo_point": {\n                      "latitude": 42,\n                      "longitude": -31\n                    }\n                  },\n                  {\n                    "geo_point": {\n                      "latitude": 39,\n                      "longitude": -29\n                    }\n                  }\n                ]\n              }\n            }\n          }\n        }\n      ]\n    }\n  }\'\\\n  https://api.clarifai.com/v2/searches\n')))))}g.isMDXComponent=!0}}]);
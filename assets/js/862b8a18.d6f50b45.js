"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[6771],{72482:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>o,default:()=>p,frontMatter:()=>s,metadata:()=>c,toc:()=>d});var a=n(74848),i=n(28453),r=n(11470),l=n(19365);const s={description:"Clarifai API provides clients in the most popular languages."},o="Clarifai API Clients",c={id:"api-guide/api-overview/api-clients/README",title:"Clarifai API Clients",description:"Clarifai API provides clients in the most popular languages.",source:"@site/docs/api-guide/api-overview/api-clients/README.mdx",sourceDirName:"api-guide/api-overview/api-clients",slug:"/api-guide/api-overview/api-clients/",permalink:"/api-guide/api-overview/api-clients/",draft:!1,unlisted:!1,editUrl:"https://github.com/Clarifai/docs/blob/main/docs/api-guide/api-overview/api-clients/README.mdx",tags:[],version:"current",frontMatter:{description:"Clarifai API provides clients in the most popular languages."},sidebar:"tutorialSidebar",previous:{title:"Rate Limits",permalink:"/api-guide/api-overview/rate-limits"},next:{title:"gRPC vs HTTP Channels",permalink:"/api-guide/api-overview/api-clients/grpc-vs-http-channels"}},u={},d=[{value:"Official Clients",id:"official-clients",level:2},{value:"Manually-built Clients (deprecated)",id:"manually-built-clients-deprecated",level:2},{value:"Client Installation Instructions",id:"client-installation-instructions",level:2}];function h(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h1,{id:"clarifai-api-clients",children:"Clarifai API Clients"}),"\n",(0,a.jsx)(t.p,{children:"** Clarifai API provides clients in the most popular languages**"}),"\n",(0,a.jsx)("hr",{}),"\n",(0,a.jsxs)(t.p,{children:["You can access the Clarifai API through clients in many of the most popular programming languages. Our clients are built on ",(0,a.jsx)(t.a,{href:"https://grpc.io/",children:"gRPC"})," and are accessible through HTTP+JSON channels as well as gRPC channels."]}),"\n",(0,a.jsx)(t.h2,{id:"official-clients",children:"Official Clients"}),"\n",(0,a.jsxs)(t.table,{children:[(0,a.jsx)(t.thead,{children:(0,a.jsx)(t.tr,{children:(0,a.jsx)(t.th,{style:{textAlign:"left"},children:"Available Clients"})})}),(0,a.jsxs)(t.tbody,{children:[(0,a.jsx)(t.tr,{children:(0,a.jsx)(t.td,{style:{textAlign:"left"},children:(0,a.jsx)(t.a,{href:"https://github.com/Clarifai/clarifai-python-grpc/",children:"Clarifai Python"})})}),(0,a.jsx)(t.tr,{children:(0,a.jsx)(t.td,{style:{textAlign:"left"},children:(0,a.jsx)(t.a,{href:"https://github.com/Clarifai/clarifai-java-grpc/",children:"Clarifai Java"})})}),(0,a.jsx)(t.tr,{children:(0,a.jsx)(t.td,{style:{textAlign:"left"},children:(0,a.jsx)(t.a,{href:"https://github.com/Clarifai/clarifai-nodejs-grpc",children:"Clarifai NodeJS"})})}),(0,a.jsx)(t.tr,{children:(0,a.jsx)(t.td,{style:{textAlign:"left"},children:(0,a.jsx)(t.a,{href:"https://github.com/Clarifai/clarifai-csharp-grpc/",children:"Clarifai C#"})})}),(0,a.jsx)(t.tr,{children:(0,a.jsx)(t.td,{style:{textAlign:"left"},children:(0,a.jsx)(t.a,{href:"https://github.com/Clarifai/clarifai-php-grpc/",children:"Clarifai PHP"})})}),(0,a.jsx)(t.tr,{children:(0,a.jsx)(t.td,{style:{textAlign:"left"},children:(0,a.jsx)(t.a,{href:"https://github.com/Clarifai/clarifai-swift-grpc",children:"Clarifai Swift"})})}),(0,a.jsx)(t.tr,{children:(0,a.jsx)(t.td,{style:{textAlign:"left"},children:(0,a.jsx)(t.a,{href:"https://github.com/Clarifai/clarifai-rust-grpc",children:"Clarifai Rust"})})}),(0,a.jsx)(t.tr,{children:(0,a.jsx)(t.td,{style:{textAlign:"left"},children:(0,a.jsx)(t.a,{href:"https://github.com/Clarifai/clarifai-go-grpc",children:"Clarifai Go"})})}),(0,a.jsx)(t.tr,{children:(0,a.jsx)(t.td,{style:{textAlign:"left"},children:(0,a.jsx)(t.a,{href:"https://github.com/Clarifai/clarifai-cpp-grpc",children:"Clarifai C++"})})})]})]}),"\n",(0,a.jsx)(t.h2,{id:"manually-built-clients-deprecated",children:"Manually-built Clients (deprecated)"}),"\n",(0,a.jsxs)(t.table,{children:[(0,a.jsx)(t.thead,{children:(0,a.jsx)(t.tr,{children:(0,a.jsx)(t.th,{style:{textAlign:"left"},children:"Deprecated Clients"})})}),(0,a.jsxs)(t.tbody,{children:[(0,a.jsx)(t.tr,{children:(0,a.jsx)(t.td,{style:{textAlign:"left"},children:(0,a.jsx)(t.a,{href:"https://github.com/Clarifai/clarifai-csharp",children:"C#"})})}),(0,a.jsx)(t.tr,{children:(0,a.jsx)(t.td,{style:{textAlign:"left"},children:(0,a.jsx)(t.a,{href:"https://github.com/Clarifai/clarifai-java",children:"Java"})})}),(0,a.jsx)(t.tr,{children:(0,a.jsxs)(t.td,{style:{textAlign:"left"},children:[(0,a.jsx)(t.a,{href:"https://github.com/Clarifai/clarifai-javascript",children:"JavaScript"})," (",(0,a.jsx)(t.a,{href:"https://sdk.clarifai.com/js/latest/index.html",children:"Reference Docs"}),")"]})}),(0,a.jsx)(t.tr,{children:(0,a.jsx)(t.td,{style:{textAlign:"left"},children:(0,a.jsx)(t.a,{href:"https://github.com/Clarifai/clarifai-php",children:"PHP"})})})]})]}),"\n",(0,a.jsx)(t.h2,{id:"client-installation-instructions",children:"Client Installation Instructions"}),"\n",(0,a.jsx)(t.p,{children:"Here are the installation instructions and the initialization code for some of our most commonly used clients."}),"\n",(0,a.jsx)(t.p,{children:"For information on installing our other clients, please follow the links above."}),"\n",(0,a.jsx)(t.admonition,{type:"tip",children:(0,a.jsxs)(t.p,{children:["Learn how to set up authorization with the various API clients ",(0,a.jsx)(t.a,{href:"https://docs.clarifai.com/clarifai-basics/authentication/authorize",children:"here"}),"."]})}),"\n","\n",(0,a.jsxs)(r.A,{children:[(0,a.jsx)(l.A,{value:"python",label:"Python",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"##############################################################################################\n# Installation\n##############################################################################################\n\npython -m pip install clarifai-grpc\n\n##############################################################################################\n# Initialize the gRPC-based client to communicate with the Clarifai platform.\n##############################################################################################\n\n# Import the Clarifai gRPC-based objects needed\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_pb2, status_code_pb2\n\n# Construct the communications channel \nchannel = ClarifaiChannel.get_grpc_channel()\n# Construct the V2Stub object for accessing all the Clarifai API functionality\nstub = service_pb2_grpc.V2Stub(channel)\n\n##############################################################################################\n# This is where you set up the metadata object that's used to authenticate. \n# This authorization will be used by every Clarifai API call.\n# Change the following authorization key to your own credentials\n# Example: metadata = (('authorization', 'Key ' + 'a123457612345678'),)\n##############################################################################################\n \nmetadata = (('authorization', 'Key ' + 'YOUR_CLARIFAI_PAT_HERE'),)\n# Or, if you were to use an API Key:\n# metadata = (('authorization', 'Key ' + 'YOUR_CLARIFAI_API_KEY_HERE'),)\n# Yes, the word 'Key' appears in addition to the alphanumeric PAT or API Key\n\n##############################################################################################\n# A UserAppIDSet object is needed when using a PAT. It contains two pieces of information: \n# user_id (your user id) and app_id (app id that contains the model of interest). \n# Both of them are specified as string values.\n##############################################################################################\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id='YOUR_USER_ID_HERE', app_id='YOUR_APPLICATION_ID_HERE')\n"})})}),(0,a.jsx)(l.A,{value:"nodejs",label:"NodeJS",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-javascript",children:'///////////////////////////////////////////////////////////////////////////////\n// Installation\n///////////////////////////////////////////////////////////////////////////////\n\nnpm install clarifai-nodejs-grpc\n\n/////////////////////////////////////////////////////////////////////////////////////////////\n// Initialize the gRPC-based client to communicate with the Clarifai platform.\n////////////////////////////////////////////////////////////////////////////////////////////\n\n// Import the Clarifai gRPC-based client\nconst {ClarifaiStub, grpc} = require("clarifai-nodejs-grpc");\n\n// Construct the stub object for accessing all the Clarifai API functionality\nconst stub = ClarifaiStub.grpc();\n\n////////////////////////////////////////////////////////////////////////////////////////////\n// This is where you set up the Metadata object that\'s used to authenticate. \n// This authorization will be used by every Clarifai API call.\n// Change the following authorization key to your own credentials\n// Example: metadata.set("authorization", "Key " + "a123457612345678");\n////////////////////////////////////////////////////////////////////////////////////////////\n\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + "YOUR_CLARIFAI_PAT_HERE");\n// Or, if you were to use an API Key:\n// metadata.set("authorization", "Key " + "YOUR_CLARIFAI_API_KEY_HERE");\n// Yes, the word \'Key\' appears in addition to the alphanumeric PAT or API Key\n\n/////////////////////////////////////////////////////////////////////////////////////////////\n// A UserAppIDSet object is needed when using a PAT. It contains two pieces of information: \n// user_id (your user id) and app_id (app id that contains the model of interest). \n// Both of them are specified as string values.\n/////////////////////////////////////////////////////////////////////////////////////////////\n\nuser_app_id: {\n    "user_id": "YOUR_USER_ID_HERE",\n    "app_id": "YOUR_APPLICATION_ID_HERE"\n}\n'})})}),(0,a.jsx)(l.A,{value:"java",label:"Java",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'//////////////////////////////////////////////////////////////////////////////////////////////\n// Installation\n/////////////////////////////////////////////////////////////////////////////////////////////\n\nVia Gradle:\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    implementation \'com.clarifai:clarifai-grpc:LATEST_VERSION_HERE\'\n}\n\nVia Maven:\n\n<repositories>\n    <repository>\n        <id>mavenCentral</id>\n        <name>mavenCentral</name>\n        <url>https://repo1.maven.org/maven2</url>\n    </repository>\n</repositories>\n\n<dependencies>\n    <dependency>\n        <groupId>com.clarifai</groupId>\n        <artifactId>clarifai-grpc</artifactId>\n        <version>LATEST_VERSION_HERE</version>\n    </dependency>\n</dependencies>\n\n/////////////////////////////////////////////////////////////////////////////////////////////\n// Initialize the gRPC-based client to communicate with the Clarifai platform.\n////////////////////////////////////////////////////////////////////////////////////////////\n\n// Import the Clarifai gRPC-based objects needed\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\n\n/////////////////////////////////////////////////////////////////////////////////////////////\n// Construct the communications channel.\n// Construct the stub object for accessing all the Clarifai API functionality.\n// Set up the authorization that will be used by every Clarifai API call.\n/////////////////////////////////////////////////////////////////////////////////////////////\n\nChannel channel = ClarifaiChannel.INSTANCE.getGrpcChannel();\n\nV2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(channel)\n.withCallCredentials(new ClarifaiCallCredentials("YOUR_CLARIFAI_PAT_HERE"));\n\n// Or, if you were to use an API Key:\n//.withCallCredentials(new ClarifaiCallCredentials("YOUR_CLARIFAI_API_KEY_HERE"));\n\n/////////////////////////////////////////////////////////////////////////////////////////////\n// A UserAppIDSet object is needed when using a PAT. It contains two pieces of information: \n// user_id (your user id) and app_id (app id that contains the model of interest). \n// Both of them are specified as string values.\n/////////////////////////////////////////////////////////////////////////////////////////////\n\n.setUserAppId(UserAppIDSet.newBuilder().setUserId("YOUR_USER_ID_HERE").setAppId("YOUR_APPLICATION_ID_HERE"))\n'})})}),(0,a.jsx)(l.A,{value:"php",label:"PHP",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-php",children:"//////////////////////////////////////////////////////////////////////////////\n// Installation     \n//////////////////////////////////////////////////////////////////////////////\n\ncomposer require clarifai/clarifai-php-grpc\n\n// gRPC for PHP extension is required to use the Clarifai gRPC PHP client\n// Check how to add gRPC to your PHP installation here: https://github.com/grpc/grpc/tree/master/src/php\n\n////////////////////////////////////////////////////////////////////////////////\n// Set Clarifai Namespace\n//     - A variety of standard objects are provided in the Clarifai namespace\n//       from the client library. The ones that are necessary depend on the\n//       specific RPC call being made. The namespaces used in the example\n//       code throughout this documentation are included below for reference, \n //      although you likely won't need all of them in your application. \n////////////////////////////////////////////////////////////////////////////////\n\n// Various data structures that are used in the RPC calls to the Clarifai Platform\n// These operate as standardization wrappers for various types of data.\n\n//    Data Types\nuse Clarifai\\Api\\Image;\nuse Clarifai\\Api\\Text;\nuse Clarifai\\Api\\Video;\n\n//    ML Structures\nuse Clarifai\\Api\\Concept;\nuse Clarifai\\Api\\Model;\n\n//    Wrapper Types\nuse Clarifai\\Api\\Data;\nuse Clarifai\\Api\\Input;\n\n// Various Request objects. These specify the structure of the actual RPC request between\n// the client and the platform.\nuse Clarifai\\Api\\PostModelOutputsRequest;\nuse Clarifai\\Api\\PostConceptsSearchesRequest;\n\n\nuse Clarifai\\Api\\ConceptQuery;\n\n// Output configuration objects\nuse Clarifai\\Api\\OutputInfo;\nuse Clarifai\\Api\\OutputConfig;\n\n// The request status code object.  This contains information on the success or failure of\n// the API operation.\nuse Clarifai\\Api\\Status\\StatusCode;\n\n/////////////////////////////////////////////////////////////////////////////////////////////\n// Initialize the gRPC-based client to communicate with the Clarifai platform.\n////////////////////////////////////////////////////////////////////////////////////////////\n\n// The Clarifai PHP Client repository includes an autoload.php helper file that needs to be included\nrequire __DIR__ . '/vendor/autoload.php';\n\n// Enable use of the ClarifaiClient object from the Clarifai namespace\nuse Clarifai\\ClarifaiClient;  \n\n// Construct the initialization object for accessing all the Clarifai API functionality\n$client = ClarifaiClient::grpc();\n\n////////////////////////////////////////////////////////////////////////////////////////////\n// This is where you set up the Metadata object that's used to authenticate. \n// This authorization will be used by every Clarifai API call.\n// Change the following authorization key to your own credentials\n// Example: $metadata = ['Authorization' => ['Key a123457612345678']];\n////////////////////////////////////////////////////////////////////////////////////////////\n\n$metadata = ['Authorization' => ['Key YOUR_CLARIFAI_PAT_HERE']];\n\n// Or, if you were to use an API Key:\n// $metadata = ['Authorization' => ['Key YOUR_CLARIFAI_API_KEY_HERE']];\n// Yes, the word 'Key' appears in addition to the alphanumeric PAT or API Key\n\n/////////////////////////////////////////////////////////////////////////////////////////////\n// A UserAppIDSet object is needed when using a PAT. It contains two pieces of information: \n// user_id (your user id) and app_id (app id that contains the model of interest). \n// Both of them are specified as string values.\n/////////////////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\Api\\UserAppIDSet;\n\n$userDataObject = new UserAppIDSet([\n    'user_id' => 'YOUR_USER_ID_HERE', \n    'app_id' => 'YOUR_APPLICATION_ID_HERE' \n]);\n\n"})})}),(0,a.jsx)(l.A,{value:"csharp",label:"C#",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-csharp",children:'\n///////////////////////////////////////////////////////////////////////////////\n// Installation\n///////////////////////////////////////////////////////////////////////////////\ndotnet add package ClarifaiGrpc\n\n///////////////////////////////////////////////////////////////////////////////\n// Initialize client\n///////////////////////////////////////////////////////////////////////////////\nusing System;\nusing System.Collections.Generic;\nusing Clarifai.Api;\nusing Clarifai.Channels;\nusing Grpc.Core;\nusing StatusCode = Clarifai.Api.Status.StatusCode;\n\nvar client = new V2.V2Client(ClarifaiChannel.Grpc());\n\nvar metadata = new Metadata\n{\n    {"Authorization", "Key {YOUR_PERSONAL_TOKEN}"}\n};\n'})})})]})]})}function p(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},19365:(e,t,n)=>{n.d(t,{A:()=>l});n(96540);var a=n(18215);const i={tabItem:"tabItem_Ymn6"};var r=n(74848);function l(e){let{children:t,hidden:n,className:l}=e;return(0,r.jsx)("div",{role:"tabpanel",className:(0,a.A)(i.tabItem,l),hidden:n,children:t})}},11470:(e,t,n)=>{n.d(t,{A:()=>j});var a=n(96540),i=n(18215),r=n(23104),l=n(56347),s=n(205),o=n(57485),c=n(31682),u=n(70679);function d(e){return a.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:t,children:n}=e;return(0,a.useMemo)((()=>{const e=t??function(e){return d(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:i}}=e;return{value:t,label:n,attributes:a,default:i}}))}(n);return function(e){const t=(0,c.X)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function p(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function f(e){let{queryString:t=!1,groupId:n}=e;const i=(0,l.W6)(),r=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,o.aZ)(r),(0,a.useCallback)((e=>{if(!r)return;const t=new URLSearchParams(i.location.search);t.set(r,e),i.replace({...i.location,search:t.toString()})}),[r,i])]}function m(e){const{defaultValue:t,queryString:n=!1,groupId:i}=e,r=h(e),[l,o]=(0,a.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!p({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:r}))),[c,d]=f({queryString:n,groupId:i}),[m,C]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[i,r]=(0,u.Dv)(n);return[i,(0,a.useCallback)((e=>{n&&r.set(e)}),[n,r])]}({groupId:i}),g=(()=>{const e=c??m;return p({value:e,tabValues:r})?e:null})();(0,s.A)((()=>{g&&o(g)}),[g]);return{selectedValue:l,selectValue:(0,a.useCallback)((e=>{if(!p({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);o(e),d(e),C(e)}),[d,C,r]),tabValues:r}}var C=n(92303);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var b=n(74848);function A(e){let{className:t,block:n,selectedValue:a,selectValue:l,tabValues:s}=e;const o=[],{blockElementScrollPositionUntilNextRender:c}=(0,r.a_)(),u=e=>{const t=e.currentTarget,n=o.indexOf(t),i=s[n].value;i!==a&&(c(t),l(i))},d=e=>{let t=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const n=o.indexOf(e.currentTarget)+1;t=o[n]??o[0];break}case"ArrowLeft":{const n=o.indexOf(e.currentTarget)-1;t=o[n]??o[o.length-1];break}}t?.focus()};return(0,b.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.A)("tabs",{"tabs--block":n},t),children:s.map((e=>{let{value:t,label:n,attributes:r}=e;return(0,b.jsx)("li",{role:"tab",tabIndex:a===t?0:-1,"aria-selected":a===t,ref:e=>o.push(e),onKeyDown:d,onClick:u,...r,className:(0,i.A)("tabs__item",g.tabItem,r?.className,{"tabs__item--active":a===t}),children:n??t},t)}))})}function x(e){let{lazy:t,children:n,selectedValue:i}=e;const r=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=r.find((e=>e.props.value===i));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return(0,b.jsx)("div",{className:"margin-top--md",children:r.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==i})))})}function y(e){const t=m(e);return(0,b.jsxs)("div",{className:(0,i.A)("tabs-container",g.tabList),children:[(0,b.jsx)(A,{...t,...e}),(0,b.jsx)(x,{...t,...e})]})}function j(e){const t=(0,C.A)();return(0,b.jsx)(y,{...e,children:d(e.children)},String(t))}},28453:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>s});var a=n(96540);const i={},r=a.createContext(i);function l(e){const t=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),a.createElement(r.Provider,{value:t},e.children)}}}]);
"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[149],{12987:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/spacetime-bfa0d6ae24419bc14d4f3595c7fe6da6.svg"},34194:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>b,contentTitle:()=>g,default:()=>A,frontMatter:()=>m,metadata:()=>a,toc:()=>I});const a=JSON.parse('{"id":"create-manage/search/api/README","title":"Search via the API","description":"Use vector search to find, sort, and filter what you need in your unstructured data","source":"@site/docs/create-manage/search/api/README.mdx","sourceDirName":"create-manage/search/api","slug":"/create-manage/search/api/","permalink":"/create-manage/search/api/","draft":false,"unlisted":false,"editUrl":"https://github.com/Clarifai/docs/blob/main/docs/create-manage/search/api/README.mdx","tags":[],"version":"current","frontMatter":{"description":"Use vector search to find, sort, and filter what you need in your unstructured data"},"sidebar":"tutorialSidebar","previous":{"title":"Filter","permalink":"/create-manage/search/ui/filter"},"next":{"title":"Filter","permalink":"/create-manage/search/api/filter"}}');var r=t(74848),i=t(28453),s=t(65537),o=t(79329),l=t(58069);const c='# Import necessary modules\nfrom clarifai.client.search import Search\nfrom clarifai.client.user import User\nfrom google.protobuf import struct_pb2\nfrom PIL import Image\nimport requests\nfrom IPython.display import display\n\n# User-specific credentials\nUSER_ID = \'\'  # User ID\nAPP_ID = \'\'   # Application ID\nPAT = \'\'      # Personal Access Token\n\n# Define dataset and image URL\nCREATE_DATASET_ID = "ci_search_dataset"\nDOG_IMG_URL = "https://samples.clarifai.com/dog.tiff"\n\n# Create Clarifai application\napp_obj = User(user_id=USER_ID, pat=PAT).create_app(app_id=APP_ID, base_workflow="General")\n\n# Create a dataset\ndataset_obj = app_obj.create_dataset(CREATE_DATASET_ID)\n\n# Initialize inputs object\ninp_obj = app_obj.inputs()\n\n# Define metadata for the image\nmetadata = struct_pb2.Struct()\nmetadata.update({"Breed": "Saint Bernard"})\n\n# Get input from URL and upload it\ninput_proto = inp_obj.get_input_from_url(\n        dataset_id=CREATE_DATASET_ID,\n        input_id="dog-tiff",\n        image_url=DOG_IMG_URL,\n        labels=["dog"],\n        geo_info=[-30.0, 40.0],  # longitude, latitude\n        metadata=metadata)\ninp_obj.upload_inputs([input_proto])\n\n# Define OR filter\nor_filter = [{  # OR\n              "concepts": [{\n                  "name": "deer",\n                  "value": 1\n              }, {\n                  "name": "dog",\n                  "value": 1\n              }]\n          }]\n\n# Perform search with OR filter\nsearch = app_obj.search()\nres = search.query(ranks=[{"image_url": "https://samples.clarifai.com/dog.tiff"}], filters=or_filter)\n\n# Process search results\nresp = list(res)\nfor r in resp:\n    hit = r.hits[0].input.data.image.url\n    break\n\n# Display the image\nprint(hit)\nhit_img = Image.open(requests.get(hit, stream=True).raw).resize((300,250))\ndisplay(hit_img)',u='import { Input, Search, User } from "clarifai-nodejs";\n\n\nconst appId = "test_app"; // Placeholder for application ID\n\nconst dogImgUrl = "https://samples.clarifai.com/dog.tiff";\n\n// Initialize a User object with your credentials\nconst client = new User({\n  userId: process.env.CLARIFAI_USER_ID,\n  pat: process.env.CLARIFAI_PAT,\n  appId,\n});\n\n// Create an application within Clarifai with the specified ID and base workflow\n// The \'Universal\' workflow is a general-purpose workflow that can handle various types of data\nawait client.createApp({\n  appId,\n  baseWorkflow: "Universal",\n});\n\n// Initialize an Input object to manage input data\nconst input = new Input({\n  authConfig: {\n    userId: process.env.CLARIFAI_USER_ID,\n    pat: process.env.CLARIFAI_PAT,\n    appId,\n  },\n});\n\n// Define metadata for the image\nconst metadata = { Breed: "Saint Bernard" };\n\n// Get input from URL and upload it\nconst inputProto = Input.getInputFromUrl({\n  inputId: "dogTiff",\n  imageUrl: dogImgUrl,\n  labels: ["dog"],\n  geoInfo: { longitude: -30.0, latitude: 40.0 }, // longitude, latitude\n  metadata,\n});\nawait input.uploadInputs({ inputs: [inputProto] });\n\n// Define OR filter\nconst orFilter = [\n  {\n    // OR\n    concepts: [\n      {\n        name: "deer",\n        value: 1,\n      },\n      {\n        name: "dog",\n        value: 1,\n      },\n    ],\n  },\n];\n\n// Perform search with OR filter\nconst search = new Search({\n  authConfig: {\n    userId: process.env.CLARIFAI_USER_ID,\n    pat: process.env.CLARIFAI_PAT,\n    appId,\n  },\n  topK: 2,\n  metric: "euclidean",\n});\nconst res = search.query({\n  ranks: [{ imageUrl: "https://samples.clarifai.com/dog.tiff" }],\n  filters: orFilter, // Filter for images only\n});\n\nlet hit;\n// Process search results\nfor await (const r of res) {\n  hit = r.hitsList?.[0]?.input?.data?.image?.url;\n  break;\n}\n\n// Display the image\nconsole.log(hit);\n',d='# Import necessary modules\nfrom clarifai.client.search import Search\nfrom clarifai.client.user import User\nfrom google.protobuf import struct_pb2\nfrom PIL import Image\nimport requests\nfrom IPython.display import display\n\n# Define user-specific credentials\nUSER_ID=\'\'\nAPP_ID=\'\'\nPAT=\'\'\n\n# Define constants\nCREATE_DATASET_ID = "ci_search_dataset"\nDOG_IMG_URL = "https://samples.clarifai.com/dog.tiff"\n\n# Create a new application\napp_obj = User(user_id=USER_ID, pat=PAT).create_app(app_id=APP_ID, base_workflow="General")\n\n# Create a new dataset\ndataset_obj = app_obj.create_dataset(CREATE_DATASET_ID)\n\n# Initialize Inputs object for uploading data\ninp_obj = app_obj.inputs()\n\n# Define metadata for the input\nmetadata = struct_pb2.Struct()\nmetadata.update({"Breed": "Saint Bernard"})\n\n# Get input from URL and upload it to the dataset\ninput_proto = inp_obj.get_input_from_url(\n        dataset_id=CREATE_DATASET_ID,\n        input_id="dog-tiff",\n        image_url=DOG_IMG_URL,\n        labels=["dog"],\n        geo_info=[-30.0, 40.0],  # longitude, latitude\n        metadata=metadata)\ninp_obj.upload_inputs([input_proto])\n\n# Define an AND filter\nand_filter = [\n              {  # AND\n                  "concepts": [{\n                      "name": "dog",\n                      "value": 1\n                  }]\n              },\n              {\n                  "concepts": [{\n                      "name": "deer",\n                      "value": 1\n                  }]\n              }\n          ]\n\n# Create a search object\nsearch = app_obj.search()\n\n# Perform a search query with the specified rank and AND filter\nres = search.query(ranks=[{"image_url": "https://samples.clarifai.com/dog.tiff"}], filters=and_filter)\n\n# Convert search results to a list\nresp = list(res)\n\n# Print the length of the search results\nprint(len(resp)) # Should be zero',p='import { Input, Search, User } from "clarifai-nodejs";\n\n\nconst appId = "test_app"; // Placeholder for application ID\n\nconst dogImgUrl = "https://samples.clarifai.com/dog.tiff";\n\n// Initialize a User object with your credentials\nconst client = new User({\n  userId: process.env.CLARIFAI_USER_ID,\n  pat: process.env.CLARIFAI_PAT,\n  appId,\n});\n\n// Create an application within Clarifai with the specified ID and base workflow\n// The \'Universal\' workflow is a general-purpose workflow that can handle various types of data\nawait client.createApp({\n  appId,\n  baseWorkflow: "Universal",\n});\n\n// Initialize an Input object to manage input data\nconst input = new Input({\n  authConfig: {\n    userId: process.env.CLARIFAI_USER_ID,\n    pat: process.env.CLARIFAI_PAT,\n    appId,\n  },\n});\n\n// Define metadata for the image\nconst metadata = { Breed: "Saint Bernard" };\n\n// Get input from URL and upload it\nconst inputProto = Input.getInputFromUrl({\n  inputId: "dogTiff",\n  imageUrl: dogImgUrl,\n  labels: ["dog"],\n  geoInfo: { longitude: -30.0, latitude: 40.0 }, // longitude, latitude\n  metadata,\n});\nawait input.uploadInputs({ inputs: [inputProto] });\n\n// Define andFilter\nconst andFilter = [\n  {\n    // AND\n    concepts: [\n      {\n        name: "dog",\n        value: 1,\n      },\n    ],\n  },\n  {\n    concepts: [\n      {\n        name: "deer",\n        value: 1,\n      },\n    ],\n  },\n];\n\n// Perform search with OR filter\nconst search = new Search({\n  authConfig: {\n    userId: process.env.CLARIFAI_USER_ID,\n    pat: process.env.CLARIFAI_PAT,\n    appId,\n  },\n  topK: 2,\n  metric: "euclidean",\n});\nconst res = search.query({\n  ranks: [{ imageUrl: "https://samples.clarifai.com/dog.tiff" }],\n  filters: andFilter, // Filter for images only\n});\n\nlet hit;\n// Process search results\nfor await (const r of res) {\n  hit = r.hitsList?.[0]?.input?.data?.image?.url;\n  break;\n}\n\n// Display the image\nconsole.log(hit);\n';var h=t(99563),f=t(89791);const m={description:"Use vector search to find, sort, and filter what you need in your unstructured data"},g="Search via the API",b={},I=[{value:"OR Search Operation",id:"or-search-operation",level:2},{value:"AND Search Operation",id:"and-search-operation",level:2}];function _(e){const n={h1:"h1",h2:"h2",header:"header",img:"img",p:"p",strong:"strong",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"search-via-the-api",children:"Search via the API"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Use vector search to find, sort, and filter what you need in your unstructured data"})}),"\n",(0,r.jsx)("hr",{}),"\n",(0,r.jsx)(n.p,{children:"The API gives you full access to vector search capabilities, allowing you to programmatically search using AI-generated embeddings. You can retrieve inputs based on semantic similarity, filter results using metadata, and combine multiple conditions for more precise queries."}),"\n",(0,r.jsx)(n.p,{children:"Whether you're working with images, text, or other data types, vector search via the API helps you surface the most relevant results quickly and at scale \u2014 making it ideal for building intelligent, customized search experiences into your own applications."}),"\n",(0,r.jsx)("center",{children:(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:t(12987).A+"",width:"221",height:"278"})})}),"\n","\n","\n","\n",(0,r.jsx)(n.h2,{id:"or-search-operation",children:"OR Search Operation"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.strong,{children:"OR"})," filter lets you expand your search to include results that match any of the specified conditions, rather than requiring all of them to be met."]}),"\n",(0,r.jsxs)(s.A,{children:[(0,r.jsx)(o.A,{value:"python",label:"Python SDK",children:(0,r.jsx)(l.A,{className:"language-python",children:c})}),(0,r.jsx)(o.A,{value:"typescript",label:"Node.js SDK",children:(0,r.jsx)(l.A,{className:"language-typescript",children:u})})]}),"\n",(0,r.jsx)(n.h2,{id:"and-search-operation",children:"AND Search Operation"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.strong,{children:"AND"})," operation enables you to refine search results by specifying multiple conditions that must all be satisfied at the same time."]}),"\n",(0,r.jsx)(n.p,{children:'For example, if a user searches for images containing both the concepts "dog" and "deer," only those images labeled with both concepts will be returned.'}),"\n",(0,r.jsxs)(s.A,{children:[(0,r.jsx)(o.A,{value:"python",label:"Python SDK",children:(0,r.jsx)(l.A,{className:"language-python",children:d})}),(0,r.jsx)(o.A,{value:"typescript",label:"Node.js SDK",children:(0,r.jsx)(l.A,{className:"language-typescript",children:p})})]}),"\n","\n",(0,r.jsx)(h.A,{items:(0,f.$S)().items})]})}function A(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(_,{...e})}):_(e)}},65537:(e,n,t)=>{t.d(n,{A:()=>y});var a=t(96540),r=t(18215),i=t(65627),s=t(56347),o=t(50372),l=t(30604),c=t(11861),u=t(78749);function d(e){return a.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function p(e){const{values:n,children:t}=e;return(0,a.useMemo)((()=>{const e=n??function(e){return d(e).map((e=>{let{props:{value:n,label:t,attributes:a,default:r}}=e;return{value:n,label:t,attributes:a,default:r}}))}(t);return function(e){const n=(0,c.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function h(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function f(e){let{queryString:n=!1,groupId:t}=e;const r=(0,s.W6)(),i=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,l.aZ)(i),(0,a.useCallback)((e=>{if(!i)return;const n=new URLSearchParams(r.location.search);n.set(i,e),r.replace({...r.location,search:n.toString()})}),[i,r])]}function m(e){const{defaultValue:n,queryString:t=!1,groupId:r}=e,i=p(e),[s,l]=(0,a.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!h({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const a=t.find((e=>e.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:i}))),[c,d]=f({queryString:t,groupId:r}),[m,g]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[r,i]=(0,u.Dv)(t);return[r,(0,a.useCallback)((e=>{t&&i.set(e)}),[t,i])]}({groupId:r}),b=(()=>{const e=c??m;return h({value:e,tabValues:i})?e:null})();(0,o.A)((()=>{b&&l(b)}),[b]);return{selectedValue:s,selectValue:(0,a.useCallback)((e=>{if(!h({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);l(e),d(e),g(e)}),[d,g,i]),tabValues:i}}var g=t(9136);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var I=t(74848);function _(e){let{className:n,block:t,selectedValue:a,selectValue:s,tabValues:o}=e;const l=[],{blockElementScrollPositionUntilNextRender:c}=(0,i.a_)(),u=e=>{const n=e.currentTarget,t=l.indexOf(n),r=o[t].value;r!==a&&(c(n),s(r))},d=e=>{let n=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const t=l.indexOf(e.currentTarget)+1;n=l[t]??l[0];break}case"ArrowLeft":{const t=l.indexOf(e.currentTarget)-1;n=l[t]??l[l.length-1];break}}n?.focus()};return(0,I.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":t},n),children:o.map((e=>{let{value:n,label:t,attributes:i}=e;return(0,I.jsx)("li",{role:"tab",tabIndex:a===n?0:-1,"aria-selected":a===n,ref:e=>{l.push(e)},onKeyDown:d,onClick:u,...i,className:(0,r.A)("tabs__item",b.tabItem,i?.className,{"tabs__item--active":a===n}),children:t??n},n)}))})}function A(e){let{lazy:n,children:t,selectedValue:i}=e;const s=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=s.find((e=>e.props.value===i));return e?(0,a.cloneElement)(e,{className:(0,r.A)("margin-top--md",e.props.className)}):null}return(0,I.jsx)("div",{className:"margin-top--md",children:s.map(((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==i})))})}function v(e){const n=m(e);return(0,I.jsxs)("div",{className:(0,r.A)("tabs-container",b.tabList),children:[(0,I.jsx)(_,{...n,...e}),(0,I.jsx)(A,{...n,...e})]})}function y(e){const n=(0,g.A)();return(0,I.jsx)(v,{...e,children:d(e.children)},String(n))}},79329:(e,n,t)=>{t.d(n,{A:()=>s});t(96540);var a=t(18215);const r={tabItem:"tabItem_Ymn6"};var i=t(74848);function s(e){let{children:n,hidden:t,className:s}=e;return(0,i.jsx)("div",{role:"tabpanel",className:(0,a.A)(r.tabItem,s),hidden:t,children:n})}},81430:(e,n,t)=>{t.d(n,{W:()=>c});var a=t(96540),r=t(40797);const i=["zero","one","two","few","many","other"];function s(e){return i.filter((n=>e.includes(n)))}const o={locale:"en",pluralForms:s(["one","other"]),select:e=>1===e?"one":"other"};function l(){const{i18n:{currentLocale:e}}=(0,r.A)();return(0,a.useMemo)((()=>{try{return function(e){const n=new Intl.PluralRules(e);return{locale:e,pluralForms:s(n.resolvedOptions().pluralCategories),select:e=>n.select(e)}}(e)}catch(n){return console.error(`Failed to use Intl.PluralRules for locale "${e}".\nDocusaurus will fallback to the default (English) implementation.\nError: ${n.message}\n`),o}}),[e])}function c(){const e=l();return{selectMessage:(n,t)=>function(e,n,t){const a=e.split("|");if(1===a.length)return a[0];a.length>t.pluralForms.length&&console.error(`For locale=${t.locale}, a maximum of ${t.pluralForms.length} plural forms are expected (${t.pluralForms.join(",")}), but the message contains ${a.length}: ${e}`);const r=t.select(n),i=t.pluralForms.indexOf(r);return a[Math.min(i,a.length-1)]}(t,n,e)}}},89791:(e,n,t)=>{t.d(n,{$S:()=>a});t(40797);function a(){return t(69493).$S(...arguments)}},99563:(e,n,t)=>{t.d(n,{A:()=>I});t(96540);var a=t(18215),r=t(93751),i=t(56289),s=t(81430),o=t(22887),l=t(50539),c=t(9303);const u={cardContainer:"cardContainer_fWXF",cardTitle:"cardTitle_rnsV",cardDescription:"cardDescription_PWke"};var d=t(74848);function p(e){let{href:n,children:t}=e;return(0,d.jsx)(i.A,{href:n,className:(0,a.A)("card padding--lg",u.cardContainer),children:t})}function h(e){let{href:n,icon:t,title:r,description:i}=e;return(0,d.jsxs)(p,{href:n,children:[(0,d.jsxs)(c.A,{as:"h2",className:(0,a.A)("text--truncate",u.cardTitle),title:r,children:[t," ",r]}),i&&(0,d.jsx)("p",{className:(0,a.A)("text--truncate",u.cardDescription),title:i,children:i})]})}function f(e){let{item:n}=e;const t=(0,r.Nr)(n),a=function(){const{selectMessage:e}=(0,s.W)();return n=>e(n,(0,l.T)({message:"1 item|{count} items",id:"theme.docs.DocCard.categoryDescription.plurals",description:"The default description for a category card in the generated index about how many items this category includes"},{count:n}))}();return t?(0,d.jsx)(h,{href:t,icon:"\ud83d\uddc3\ufe0f",title:n.label,description:n.description??a(n.items.length)}):null}function m(e){let{item:n}=e;const t=(0,o.A)(n.href)?"\ud83d\udcc4\ufe0f":"\ud83d\udd17",a=(0,r.cC)(n.docId??void 0);return(0,d.jsx)(h,{href:n.href,icon:t,title:n.label,description:n.description??a?.description})}function g(e){let{item:n}=e;switch(n.type){case"link":return(0,d.jsx)(m,{item:n});case"category":return(0,d.jsx)(f,{item:n});default:throw new Error(`unknown item type ${JSON.stringify(n)}`)}}function b(e){let{className:n}=e;const t=(0,r.$S)();return(0,d.jsx)(I,{items:t.items,className:n})}function I(e){const{items:n,className:t}=e;if(!n)return(0,d.jsx)(b,{...e});const i=(0,r.d1)(n);return(0,d.jsx)("section",{className:(0,a.A)("row",t),children:i.map(((e,n)=>(0,d.jsx)("article",{className:"col col--6 margin-bottom--lg",children:(0,d.jsx)(g,{item:e})},n)))})}}}]);
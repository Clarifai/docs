"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[8552],{82123:(a,e,t)=>{t.r(e),t.d(e,{assets:()=>V,contentTitle:()=>F,default:()=>q,frontMatter:()=>R,metadata:()=>L,toc:()=>O});var n=t(74848),i=t(28453),o=t(11470),s=t(19365),r=t(21432);const l='from clarifai.client.dataset import Dataset\n\n\n# Create a dataset object\ndataset = Dataset(user_id="user_id", app_id="test_app", dataset_id="first_dataset",pat=\u201dYOUR_PAT\u201d)\n#To upload without concepts(labels=False)\n#upload data from folder\ndataset.upload_from_folder(folder_path=\'./images\', input_type=\'image\', labels=True)',d='import { Dataset } from "clarifai-nodejs";\nimport path from "path";\n\n\nconst dataset = new Dataset({\n  datasetId: "first_dataset",\n  authConfig: {\n    pat: process.env.CLARIFAI_PAT,\n    userId: process.env.CLARIFAI_USER_ID,\n    appId: "test_app",\n  },\n});\n\nawait dataset.uploadFromFolder({\n  folderPath: path.resolve(__dirname, "../../assets/voc/images"),\n  inputType: "image",\n  labels: true,\n});\n',p='from clarifai.client.dataset import Dataset\n\n# Create the dataset object\ndataset = Dataset(user_id="user_id", app_id="test_app", dataset_id="first_dataset",pat=\u201dYOUR_PAT\u201d)\n#To upload without concepts(labels=False)\n# upload dataset from folder\ndataset.upload_from_folder(folder_path=\'./data\', input_type=\'text\', labels=True)',u='import { Dataset } from "clarifai-nodejs";\nimport path from "path";\n\n\nconst dataset = new Dataset({\n  datasetId: "first_dataset",\n  authConfig: {\n    pat: process.env.CLARIFAI_PAT,\n    userId: process.env.CLARIFAI_USER_ID,\n    appId: "test_app",\n  },\n});\n\nawait dataset.uploadFromFolder({\n  folderPath: path.resolve(__dirname, "../../assets"),\n  inputType: "text",\n  labels: true,\n});\n',c="from clarifai.client.dataset import Dataset\n\n\n#Create a dataset object\ndataset = Dataset(user_id=\"user_id\", app_id=\"test_app\", dataset_id=\"first_dataset\",pat=\u201dYOUR_PAT\u201d)\n#To upload without concepts(labels=False)\n#Upload data from csv\ndataset.upload_from_csv(csv_path='/Users/adithyansukumar/Desktop/data/test.csv', input_type='audio',csv_type='url', labels=True)",h='import { Dataset } from "clarifai-nodejs";\nimport path from "path";\n\n\nconst dataset = new Dataset({\n  datasetId: "first_dataset",\n  authConfig: {\n    pat: process.env.CLARIFAI_PAT,\n    userId: process.env.CLARIFAI_USER_ID,\n    appId: "test_app",\n  },\n});\n\nawait dataset.uploadFromCSV({\n  csvPath: path.resolve(__dirname, "../../assets/audio.csv"),\n  csvType: "file",\n  labels: true,\n  inputType: "audio",\n});\n',m='import { Dataset } from "clarifai-nodejs";\nimport path from "path";\n\n\nconst dataset = new Dataset({\n  datasetId: "first_dataset",\n  authConfig: {\n    pat: process.env.CLARIFAI_PAT,\n    userId: process.env.CLARIFAI_USER_ID,\n    appId: "test_app",\n  },\n});\n\nawait dataset.uploadFromCSV({\n  csvPath: path.resolve(__dirname, "../../assets/video.csv"),\n  csvType: "file",\n  inputType: "video",\n  labels: true,\n});\n',f='from clarifai.client.input import Inputs\n\n\nurl = "https://samples.clarifai.com/BarackObama.jpg"\n#replace your "user_id", "app_id", "dataset_id".\ninput_object = Inputs(user_id="user_id", app_id="test_app",pat=\u201dYOUR_PAT\u201d)\n\n# Upload image data from a specified URL with a unique input ID "bbox"\ninput_object.upload_from_url(input_id="bbox", image_url=url)\n\n# Define bounding box coordinates for the annotation (left, top, right, bottom)\nbbox_points = [.1, .1, .8, .9]\n\n# Generate a bounding box annotation proto with specified label ("face") and bounding box coordinates\nannotation = input_object.get_bbox_proto(input_id="bbox", label="face", bbox=bbox_points)\n\n# Upload the generated annotation to associate with the previously uploaded image\ninput_object.upload_annotations([annotation])\n',g='import { Input } from "clarifai-nodejs";\n\n\nconst imageUrl = "https://samples.clarifai.com/BarackObama.jpg";\nconst input = new Input({\n  authConfig: {\n    userId: process.env.CLARIFAI_USER_ID,\n    pat: process.env.CLARIFAI_PAT,\n    appId: "test_app",\n  },\n});\nawait input.uploadFromUrl({\n  inputId: "bbox",\n  imageUrl,\n});\nconst bboxPoints = [0.1, 0.1, 0.8, 0.9];\nconst annotation = Input.getBboxProto({\n  inputId: "bbox",\n  label: "face",\n  bbox: bboxPoints,\n});\nawait input.uploadAnnotations({\n  batchAnnot: [annotation],\n});\n',b='from clarifai.client.input import Inputs\n\nurl = "https://samples.clarifai.com/beer.mp4"\n#replace your "user_id", "app_id", "dataset_id".\ninput_object = Inputs(user_id="user_id", app_id="test_app",pat=\u201dYOUR_PAT\u201d)\n\n# Upload an image from a URL with a specified input ID\ninput_object.upload_from_url(input_id="bbox", video_url=url)\n\n# Define bounding box coordinates for annotation\nbbox_points = [.1, .1, .8, .9]\n\n# Create an annotation using the bounding box coordinates\nannotation = input_object.get_bbox_proto(input_id="video_bbox", label="glass", bbox=bbox_points)\n\n# Upload the annotation associated with the image\ninput_object.upload_annotations([annotation])\n',_='import { Input } from "clarifai-nodejs";\n\n\nconst videoUrl = "https://samples.clarifai.com/beer.mp4";\nconst input = new Input({\n  authConfig: {\n    userId: process.env.CLARIFAI_USER_ID,\n    pat: process.env.CLARIFAI_PAT,\n    appId: "test_app",\n  },\n});\nawait input.uploadFromUrl({\n  inputId: "video-bbox",\n  videoUrl,\n});\nconst bboxPoints = [0.1, 0.1, 0.8, 0.9];\nconst annotation = Input.getBboxProto({\n  inputId: "bbox",\n  label: "glass",\n  bbox: bboxPoints,\n});\nawait input.uploadAnnotations({\n  batchAnnot: [annotation],\n});\n',x='from clarifai.client.input import Inputs\n\nurl = "https://samples.clarifai.com/featured-models/Llama2_Conversational-agent.txt"\nconcepts = ["mobile","camera"]\n#replace your "user_id", "app_id", "dataset_id".\ninput_object = Inputs(user_id="user_id", app_id="test_app",pat=\u201dYOUR_PAT\u201d)\n#Upload data from url with annotation\ninput_object.upload_from_url(input_id="text1",text_url=url, labels=concepts)\n',y='import { Input } from "clarifai-nodejs";\n\n\nconst textUrl =\n  "https://samples.clarifai.com/featured-models/Llama2_Conversational-agent.txt";\nconst concepts = ["mobile", "camera"];\nconst input = new Input({\n  authConfig: {\n    userId: process.env.CLARIFAI_USER_ID,\n    pat: process.env.CLARIFAI_PAT,\n    appId: "test_app",\n  },\n});\nawait input.uploadFromUrl({\n  inputId: "text1",\n  textUrl,\n  labels: concepts,\n});\n',j='from clarifai.client.dataset import Dataset\nfrom clarifai.datasets.upload.utils import load_module_dataloader\n\n\n#replace your "user_id", "app_id", "dataset_id".\ndataset = Dataset(user_id="user_id", app_id="test_app", dataset_id="first_dataset")\n#create dataloader object\ncifar_dataloader = load_module_dataloader(\'./image_classification/cifar10\')\n#set get_upload_status=True for showing upload status\ndataset.upload_dataset(dataloader=cifar_dataloader,get_upload_status=True)\n',v='from clarifai.client.input import Inputs\n\n\nurl = "https://samples.clarifai.com/BarackObama.jpg"\n#replace your "user_id", "app_id", "dataset_id".\ninput_object = Inputs(user_id="USER_ID", app_id="APP_ID",pat="YOUR_PAT")\n\n# Upload image data from a specified URL with a unique input ID "mask"\ninput_object.upload_from_url(input_id="mask", image_url=url)\n\n# Define mask points\nmask = [[0.87, 0.66],[0.45 , 1.0], [0.82 ,0.42]]# polygon points\n\nannotation = input_object.get_mask_proto(input_id="mask", label="obama", polygons=mask)\n\n# Upload the generated annotation to associate with the previously uploaded image\ninput_object.upload_annotations([annotation])',A='import { Input, Polygon } from "clarifai-nodejs";\n\n\nconst imageUrl = "https://samples.clarifai.com/BarackObama.jpg";\nconst input = new Input({\n  authConfig: {\n    userId: process.env.CLARIFAI_USER_ID,\n    pat: process.env.CLARIFAI_PAT,\n    appId: process.env.CLARIFAI_APP_ID,\n  },\n});\nawait input.uploadFromUrl({\n  inputId: "mask",\n  imageUrl,\n});\nconst maskPoints:Polygon[] = [[[0.87, 0.66],[0.45 , 1.0], [0.82 ,0.42]]];\nconst annotation = Input.getMaskProto({\n  inputId: "mask",\n  label: "obama",\n  polygons: maskPoints,\n});\nawait input.uploadAnnotations({\n  batchAnnot: [annotation],\n});',I='#importing load_module_dataloader for calling the dataloader object in dataset.py in the local data folder\nfrom clarifai.datasets.upload.utils import load_module_dataloader\nfrom clarifai.client.dataset import Dataset\n\n\n#replace your "user_id", "app_id", "dataset_id".\ndataset = Dataset(user_id="user_id", app_id="app_id", dataset_id="dataset_id")\n\ncifar_dataloader = load_module_dataloader(\'./image_classification/cifar10\')\n\ndataset.retry_upload_from_logs(dataloader=cifar_dataloader, log_file_path=\'path to log file\', retry_duplicates=True, log_warnings=True)',w="Uploading inputs: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:04&lt;00:00,  4.44s/it]",U="Uploading inputs: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:02&lt;00:00,  2.68s/it]",T="Uploading inputs: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:03&lt;00:00,  3.22s/it]",k='2024-01-19 16:16:28 INFO     clarifai.client.input:                                                    input.py:696\n\n                             Annotations Uploaded                                                                  \n\n                             code: SUCCESS                                                                         \n\n                             description: "Ok"                                                                     \n\n                             req_id: "b5ca21ebc19cbbfe0c21706b4c1cd909" ',D='[input_id: "video_bbox"\n\n data {\n\n   regions {\n\n     region_info {\n\n       bounding_box {\n\n         top_row: 0.1\n\n         left_col: 0.1\n\n         bottom_row: 0.9\n\n         right_col: 0.8\n\n       }\n\n     }\n\n     data {\n\n       concepts {\n\n         id: "id-glass"\n\n         name: "glass"\n\n         value: 1\n\n       }\n\n     }\n\n   }\n\n }]',C='2024-01-19 16:23:54 INFO     clarifai.client.input:                                                    input.py:669\n\n                             Inputs Uploaded                                                                       \n\n                             code: SUCCESS                                                                         \n\n                             description: "Ok"                                                                     \n\n                             details: "All inputs successfully added"                                              \n\n                             req_id: "d5baa282c87ac0f91f0ef4083644ea82" ',P="Uploading Dataset: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:17&lt;00:00, 17.99s/it]",N='2024-07-10 08:23:07 INFO     clarifai.client.input:                                                    input.py:760\n                             Annotations Uploaded                                                                  \n                             code: SUCCESS                                                                         \n                             description: "Ok"                                                                     \n                             req_id: "8816febaa1ce4ecab9fb3e3a1614a100"                                            \n                                                                                                                   \nINFO:clarifai.client.input:\nAnnotations Uploaded\ncode: SUCCESS\ndescription: "Ok"\nreq_id: "8816febaa1ce4ecab9fb3e3a1614a100"',S="WARNING:root:Retrying upload for 9 duplicate inputs...\n\nUploading Dataset: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:24<00:00, 24.32s/it]",R={description:"Learn how to upload data to a dataset",sidebar_position:1},F="Uploading Data to Dataset",L={id:"sdk/managing-datasets/upload-data",title:"Uploading Data to Dataset",description:"Learn how to upload data to a dataset",source:"@site/docs/sdk/managing-datasets/upload-data.md",sourceDirName:"sdk/managing-datasets",slug:"/sdk/managing-datasets/upload-data",permalink:"/sdk/managing-datasets/upload-data",draft:!1,unlisted:!1,editUrl:"https://github.com/Clarifai/docs/blob/main/docs/sdk/managing-datasets/upload-data.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{description:"Learn how to upload data to a dataset",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Managing Datasets",permalink:"/sdk/managing-datasets/"},next:{title:"Data Utils",permalink:"/sdk/data-utils/"}},V={},O=[{value:"Upload Image",id:"upload-image",level:2},{value:"Upload Text",id:"upload-text",level:2},{value:"Upload Audio",id:"upload-audio",level:2},{value:"Upload Video",id:"upload-video",level:2},{value:"Upload Image with Annotation",id:"upload-image-with-annotation",level:2},{value:"Upload Image with Mask Annotation",id:"upload-image-with-mask-annotation",level:2},{value:"Upload Video with Annotation",id:"upload-video-with-annotation",level:2},{value:"Upload Text with Annotation",id:"upload-text-with-annotation",level:2},{value:"Batch Upload Image data while tracking status",id:"batch-upload-image-data-while-tracking-status",level:2},{value:"Retry Upload From Log File",id:"retry-upload-from-log-file",level:2}];function E(a){const e={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...a.components},{Details:t}=e;return t||function(a,e){throw new Error("Expected "+(e?"component":"object")+" `"+a+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h1,{id:"uploading-data-to-dataset",children:"Uploading Data to Dataset"}),"\n",(0,n.jsx)(e.p,{children:(0,n.jsx)(e.strong,{children:"Learn how to upload data to a dataset"})}),"\n",(0,n.jsx)("hr",{}),"\n",(0,n.jsx)(e.p,{children:"Uploading data to a dataset in Clarifai is essential for training and evaluating your machine learning models. Whether you're working with images, videos, text, audio, or other data types, Clarifai\u2019s SDKs provide flexible and efficient methods to upload data from various sources."}),"\n",(0,n.jsx)(e.admonition,{type:"tip",children:(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.a,{href:"https://docs.clarifai.com/sdk/api-reference/#dataset",children:"Click here"})," to learn more about the different methods of uploading data to a dataset."]})}),"\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n",(0,n.jsxs)(e.admonition,{title:"Customize Batch Size",type:"note",children:[(0,n.jsxs)(e.p,{children:["When uploading inputs to the Clarifai platform, there are limits on the size and number of inputs per upload, as detailed ",(0,n.jsx)(e.a,{href:"https://docs.clarifai.com/sdk/managing-inputs#api-upload-limits",children:"here"}),". However, by using methods from the ",(0,n.jsx)(e.code,{children:"Dataset"})," class \u2014 such as ",(0,n.jsx)(e.code,{children:"Dataset.upload_from_folder()"}),", ",(0,n.jsx)(e.code,{children:"Dataset.upload_from_url()"}),", or ",(0,n.jsx)(e.code,{children:"Dataset.upload_dataset()"})," \u2014 you can bypass these restrictions and efficiently upload larger volumes of inputs."]}),(0,n.jsx)(e.p,{children:"For example, when uploading images in bulk, such methods incrementally process and upload them in multiple batches, ensuring that each batch contains a maximum of 128 images and does not exceed 128MB in size \u2013 which ensures adherence to the upload restrictions."}),(0,n.jsxs)(e.p,{children:["You can also customize the ",(0,n.jsx)(e.code,{children:"batch_size"})," variable, which allows for concurrent upload of inputs and annotations. For example, if your images folder exceeds 128MB, you can set the variable to ensure that each batch contains an appropriate number of images while staying within the 128MB per batch limit."]}),(0,n.jsxs)(e.p,{children:["The default ",(0,n.jsx)(e.code,{children:"batch_size"})," is set to 32, but you can customize it to any value between 1 (minimum) and 128 (maximum)."]}),(0,n.jsx)(e.p,{children:"Here is an example:"}),(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:"language-text",children:"dataset.upload_from_folder(folder_path='./images', input_type='image', labels=True, batch_size=50)\n"})})]}),"\n",(0,n.jsx)(e.h2,{id:"upload-image",children:"Upload Image"}),"\n",(0,n.jsx)(e.p,{children:"Simplify your image data upload process with the Clarifai API's DataLoader functionality. This versatile feature allows you to effortlessly upload image data in bulk, streamlining your workflow for enhanced efficiency. Whether you prefer uploading images directly from a folder or leveraging the convenience of a CSV format, our DataLoader seamlessly accommodates both methods."}),"\n",(0,n.jsxs)(e.p,{children:["Visit this ",(0,n.jsx)(e.a,{href:"https://docs.clarifai.com/portal-guide/datasets/create-get-update-delete",children:"page"})," for more information."]}),"\n",(0,n.jsxs)(o.A,{children:[(0,n.jsxs)(s.A,{value:"python",label:"Python",children:[(0,n.jsx)(r.A,{className:"language-python",children:l}),(0,n.jsxs)(t,{children:[(0,n.jsx)("summary",{children:"Output"}),(0,n.jsx)(r.A,{className:"language-text",children:w})]})]}),(0,n.jsx)(s.A,{value:"typescript",label:"Typescript",children:(0,n.jsx)(r.A,{className:"language-typescript",children:d})})]}),"\n",(0,n.jsx)(e.h2,{id:"upload-text",children:"Upload Text"}),"\n",(0,n.jsx)(e.p,{children:"Leverage the power of the Clarifai API to seamlessly upload text data with our versatile dataloader. Whether you prefer the convenience of organizing your text data in folders or opt for the structured approach offered by the CSV format, our API accommodates both methods. By utilizing the dataloader, you can effortlessly streamline the process of uploading text data, ensuring a smooth integration into your workflow."}),"\n",(0,n.jsxs)(e.p,{children:["Visit this ",(0,n.jsx)(e.a,{href:"https://docs.clarifai.com/portal-guide/datasets/create-get-update-delete",children:"page"})," for more information."]}),"\n",(0,n.jsxs)(o.A,{children:[(0,n.jsxs)(s.A,{value:"python",label:"Python",children:[(0,n.jsx)(r.A,{className:"language-python",children:p}),(0,n.jsxs)(t,{children:[(0,n.jsx)("summary",{children:"Output"}),(0,n.jsx)(r.A,{className:"language-text",children:U})]})]}),(0,n.jsx)(s.A,{value:"typescript",label:"Typescript",children:(0,n.jsx)(r.A,{className:"language-typescript",children:u})})]}),"\n",(0,n.jsx)(e.h2,{id:"upload-audio",children:"Upload Audio"}),"\n",(0,n.jsx)(e.p,{children:"Seamlessly upload your audio datasets using the versatile dataloader feature, providing you with two convenient options: uploading audio files directly from a folder or utilizing the efficiency of a CSV format. This flexibility in data upload empowers you to effortlessly incorporate diverse audio datasets into your applications, ensuring a smooth and streamlined workflow."}),"\n",(0,n.jsxs)(e.p,{children:["Visit this ",(0,n.jsx)(e.a,{href:"https://docs.clarifai.com/portal-guide/datasets/create-get-update-delete",children:"page"})," for more information."]}),"\n",(0,n.jsxs)(o.A,{children:[(0,n.jsxs)(s.A,{value:"python",label:"Python",children:[(0,n.jsx)(r.A,{className:"language-python",children:c}),(0,n.jsxs)(t,{children:[(0,n.jsx)("summary",{children:"Output"}),(0,n.jsx)(r.A,{className:"language-text",children:T})]})]}),(0,n.jsx)(s.A,{value:"typescript",label:"Typescript",children:(0,n.jsx)(r.A,{className:"language-typescript",children:h})})]}),"\n",(0,n.jsx)(e.h2,{id:"upload-video",children:"Upload Video"}),"\n",(0,n.jsx)(e.p,{children:"Elevate your multimedia analysis capabilities with the Clarifai SDKs, enabling you to effortlessly upload video data using the versatile dataloader. Seamlessly integrate video data into your projects by leveraging the dataloader, which supports uploading videos either directly from a folder or in the convenient CSV format."}),"\n",(0,n.jsxs)(e.p,{children:["Visit this ",(0,n.jsx)(e.a,{href:"https://docs.clarifai.com/portal-guide/datasets/create-get-update-delete",children:"page"})," for more information."]}),"\n",(0,n.jsxs)(o.A,{children:[(0,n.jsxs)(s.A,{value:"python",label:"Python",children:[(0,n.jsx)(r.A,{className:"language-python",children:c}),(0,n.jsxs)(t,{children:[(0,n.jsx)("summary",{children:"Output"}),(0,n.jsx)(r.A,{className:"language-text",children:T})]})]}),(0,n.jsx)(s.A,{value:"typescript",label:"Typescript",children:(0,n.jsx)(r.A,{className:"language-typescript",children:m})})]}),"\n",(0,n.jsx)(e.h2,{id:"upload-image-with-annotation",children:"Upload Image with Annotation"}),"\n",(0,n.jsx)(e.p,{children:"Leverage the full potential of the Clarifai API by seamlessly uploading images with annotations. This advanced functionality allows you to enrich your image data by providing bounding box coordinates along with the image itself. By incorporating annotations, you enhance the depth and context of your visual data."}),"\n",(0,n.jsxs)(e.p,{children:["Visit this ",(0,n.jsx)(e.a,{href:"https://docs.clarifai.com/portal-guide/datasets/create-get-update-delete",children:"page"})," for more information."]}),"\n",(0,n.jsxs)(o.A,{children:[(0,n.jsxs)(s.A,{value:"python",label:"Python",children:[(0,n.jsx)(r.A,{className:"language-python",children:f}),(0,n.jsxs)(t,{children:[(0,n.jsx)("summary",{children:"Output"}),(0,n.jsx)(r.A,{className:"language-text",children:k})]})]}),(0,n.jsx)(s.A,{value:"typescript",label:"Typescript",children:(0,n.jsx)(r.A,{className:"language-typescript",children:g})})]}),"\n",(0,n.jsx)(e.h2,{id:"upload-image-with-mask-annotation",children:"Upload Image with Mask Annotation"}),"\n",(0,n.jsx)(e.p,{children:"This advanced functionality allows you to add mask to image data by providing polygon points as coordinates along with the image itself."}),"\n",(0,n.jsxs)(o.A,{children:[(0,n.jsxs)(s.A,{value:"python",label:"Python",children:[(0,n.jsx)(r.A,{className:"language-python",children:v}),(0,n.jsxs)(t,{children:[(0,n.jsx)("summary",{children:"Output"}),(0,n.jsx)(r.A,{className:"language-text",children:N})]})]}),(0,n.jsx)(s.A,{value:"typescript",label:"Typescript",children:(0,n.jsx)(r.A,{className:"language-typescript",children:A})})]}),"\n",(0,n.jsx)(e.h2,{id:"upload-video-with-annotation",children:"Upload Video with Annotation"}),"\n",(0,n.jsx)(e.p,{children:"Using our API, you have the capability to seamlessly upload videos enriched with annotations. This process involves more than just submitting the video file; you can enhance the contextual understanding by providing bounding box coordinates that precisely define the regions of interest within the video frames. By including this annotation data, you add valuable context to your video content."}),"\n",(0,n.jsxs)(e.p,{children:["Visit this ",(0,n.jsx)(e.a,{href:"https://docs.clarifai.com/portal-guide/datasets/create-get-update-delete",children:"page"})," for more information."]}),"\n",(0,n.jsxs)(o.A,{children:[(0,n.jsxs)(s.A,{value:"python",label:"Python",children:[(0,n.jsx)(r.A,{className:"language-python",children:b}),(0,n.jsxs)(t,{children:[(0,n.jsx)("summary",{children:"Output"}),(0,n.jsx)(r.A,{className:"language-text",children:D})]})]}),(0,n.jsx)(s.A,{value:"typescript",label:"Typescript",children:(0,n.jsx)(r.A,{className:"language-typescript",children:_})})]}),"\n",(0,n.jsx)(e.h2,{id:"upload-text-with-annotation",children:"Upload Text with Annotation"}),"\n",(0,n.jsx)(e.p,{children:"This functionality enables you to provide context and additional information alongside your text, enhancing the understanding and relevance of the uploaded content. Whether you're attaching metadata, categorizing content, or incorporating detailed annotations, the API effortlessly accommodates your specific needs. This feature not only streamlines the process of inputting annotated text but also enriches the dataset, allowing for more nuanced and accurate analysis."}),"\n",(0,n.jsxs)(e.p,{children:["Visit this ",(0,n.jsx)(e.a,{href:"https://docs.clarifai.com/portal-guide/datasets/create-get-update-delete",children:"page"})," for more information."]}),"\n",(0,n.jsxs)(o.A,{children:[(0,n.jsxs)(s.A,{value:"python",label:"Python",children:[(0,n.jsx)(r.A,{className:"language-python",children:x}),(0,n.jsxs)(t,{children:[(0,n.jsx)("summary",{children:"Output"}),(0,n.jsx)(r.A,{className:"language-text",children:C})]})]}),(0,n.jsx)(s.A,{value:"typescript",label:"Typescript",children:(0,n.jsx)(r.A,{className:"language-typescript",children:y})})]}),"\n",(0,n.jsx)(e.h2,{id:"batch-upload-image-data-while-tracking-status",children:"Batch Upload Image data while tracking status"}),"\n",(0,n.jsx)(e.p,{children:"With our robust capabilities, you can actively monitor the status of your dataset upload, ensuring transparency and control throughout the entire operation. This feature provides valuable visibility into the progress of your data transfer, allowing you to track and analyze the status effortlessly."}),"\n",(0,n.jsxs)(e.p,{children:["Visit this ",(0,n.jsx)(e.a,{href:"https://docs.clarifai.com/portal-guide/datasets/create-get-update-delete",children:"page"})," for more information."]}),"\n",(0,n.jsx)(o.A,{children:(0,n.jsx)(s.A,{value:"python",label:"Python",children:(0,n.jsx)(r.A,{className:"language-python",children:j})})}),"\n",(0,n.jsxs)(t,{children:[(0,n.jsx)("summary",{children:"Output"}),(0,n.jsx)(r.A,{className:"language-text",children:P})]}),"\n",(0,n.jsx)(e.h2,{id:"retry-upload-from-log-file",children:"Retry Upload From Log File"}),"\n",(0,n.jsxs)(e.p,{children:["This feature is used to retry upload from logs for failed inputs. When using ",(0,n.jsx)(e.code,{children:"upload_dataset"})," function the failed inputs can be logged into file and later can be used to resume the upload process."]}),"\n",(0,n.jsx)(e.admonition,{type:"info",children:(0,n.jsxs)(e.p,{children:["Set ",(0,n.jsx)(e.code,{children:"retry_duplicates"})," to ",(0,n.jsx)(e.code,{children:"True"})," if you want to retry duplicate with new Input_id in current dataset."]})}),"\n",(0,n.jsx)(o.A,{children:(0,n.jsx)(s.A,{value:"python",label:"Python",children:(0,n.jsx)(r.A,{className:"language-python",children:I})})}),"\n",(0,n.jsxs)(t,{children:[(0,n.jsx)("summary",{children:"Output"}),(0,n.jsx)(r.A,{className:"language-text",children:S})]})]})}function q(a={}){const{wrapper:e}={...(0,i.R)(),...a.components};return e?(0,n.jsx)(e,{...a,children:(0,n.jsx)(E,{...a})}):E(a)}},19365:(a,e,t)=>{t.d(e,{A:()=>s});t(96540);var n=t(18215);const i={tabItem:"tabItem_Ymn6"};var o=t(74848);function s(a){let{children:e,hidden:t,className:s}=a;return(0,o.jsx)("div",{role:"tabpanel",className:(0,n.A)(i.tabItem,s),hidden:t,children:e})}},11470:(a,e,t)=>{t.d(e,{A:()=>v});var n=t(96540),i=t(18215),o=t(23104),s=t(56347),r=t(205),l=t(57485),d=t(31682),p=t(70679);function u(a){return n.Children.toArray(a).filter((a=>"\n"!==a)).map((a=>{if(!a||(0,n.isValidElement)(a)&&function(a){const{props:e}=a;return!!e&&"object"==typeof e&&"value"in e}(a))return a;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof a.type?a.type:a.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function c(a){const{values:e,children:t}=a;return(0,n.useMemo)((()=>{const a=e??function(a){return u(a).map((a=>{let{props:{value:e,label:t,attributes:n,default:i}}=a;return{value:e,label:t,attributes:n,default:i}}))}(t);return function(a){const e=(0,d.X)(a,((a,e)=>a.value===e.value));if(e.length>0)throw new Error(`Docusaurus error: Duplicate values "${e.map((a=>a.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(a),a}),[e,t])}function h(a){let{value:e,tabValues:t}=a;return t.some((a=>a.value===e))}function m(a){let{queryString:e=!1,groupId:t}=a;const i=(0,s.W6)(),o=function(a){let{queryString:e=!1,groupId:t}=a;if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:e,groupId:t});return[(0,l.aZ)(o),(0,n.useCallback)((a=>{if(!o)return;const e=new URLSearchParams(i.location.search);e.set(o,a),i.replace({...i.location,search:e.toString()})}),[o,i])]}function f(a){const{defaultValue:e,queryString:t=!1,groupId:i}=a,o=c(a),[s,l]=(0,n.useState)((()=>function(a){let{defaultValue:e,tabValues:t}=a;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!h({value:e,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${t.map((a=>a.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const n=t.find((a=>a.default))??t[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:e,tabValues:o}))),[d,u]=m({queryString:t,groupId:i}),[f,g]=function(a){let{groupId:e}=a;const t=function(a){return a?`docusaurus.tab.${a}`:null}(e),[i,o]=(0,p.Dv)(t);return[i,(0,n.useCallback)((a=>{t&&o.set(a)}),[t,o])]}({groupId:i}),b=(()=>{const a=d??f;return h({value:a,tabValues:o})?a:null})();(0,r.A)((()=>{b&&l(b)}),[b]);return{selectedValue:s,selectValue:(0,n.useCallback)((a=>{if(!h({value:a,tabValues:o}))throw new Error(`Can't select invalid tab value=${a}`);l(a),u(a),g(a)}),[u,g,o]),tabValues:o}}var g=t(92303);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var _=t(74848);function x(a){let{className:e,block:t,selectedValue:n,selectValue:s,tabValues:r}=a;const l=[],{blockElementScrollPositionUntilNextRender:d}=(0,o.a_)(),p=a=>{const e=a.currentTarget,t=l.indexOf(e),i=r[t].value;i!==n&&(d(e),s(i))},u=a=>{let e=null;switch(a.key){case"Enter":p(a);break;case"ArrowRight":{const t=l.indexOf(a.currentTarget)+1;e=l[t]??l[0];break}case"ArrowLeft":{const t=l.indexOf(a.currentTarget)-1;e=l[t]??l[l.length-1];break}}e?.focus()};return(0,_.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.A)("tabs",{"tabs--block":t},e),children:r.map((a=>{let{value:e,label:t,attributes:o}=a;return(0,_.jsx)("li",{role:"tab",tabIndex:n===e?0:-1,"aria-selected":n===e,ref:a=>l.push(a),onKeyDown:u,onClick:p,...o,className:(0,i.A)("tabs__item",b.tabItem,o?.className,{"tabs__item--active":n===e}),children:t??e},e)}))})}function y(a){let{lazy:e,children:t,selectedValue:i}=a;const o=(Array.isArray(t)?t:[t]).filter(Boolean);if(e){const a=o.find((a=>a.props.value===i));return a?(0,n.cloneElement)(a,{className:"margin-top--md"}):null}return(0,_.jsx)("div",{className:"margin-top--md",children:o.map(((a,e)=>(0,n.cloneElement)(a,{key:e,hidden:a.props.value!==i})))})}function j(a){const e=f(a);return(0,_.jsxs)("div",{className:(0,i.A)("tabs-container",b.tabList),children:[(0,_.jsx)(x,{...e,...a}),(0,_.jsx)(y,{...e,...a})]})}function v(a){const e=(0,g.A)();return(0,_.jsx)(j,{...a,children:u(a.children)},String(e))}}}]);
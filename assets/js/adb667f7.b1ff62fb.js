"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[7753],{3905:function(e,n,t){t.d(n,{Zo:function(){return d},kt:function(){return w}});var o=t(7294);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,s=function(e,n){if(null==e)return{};var t,o,s={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var i=o.createContext({}),c=function(e){var n=o.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},d=function(e){var n=c(e.components);return o.createElement(i.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},u=o.forwardRef((function(e,n){var t=e.components,s=e.mdxType,a=e.originalType,i=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=c(t),w=s,f=u["".concat(i,".").concat(w)]||u[w]||p[w]||a;return t?o.createElement(f,r(r({ref:n},d),{},{components:t})):o.createElement(f,r({ref:n},d))}));function w(e,n){var t=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var a=t.length,r=new Array(a);r[0]=u;var l={};for(var i in n)hasOwnProperty.call(n,i)&&(l[i]=n[i]);l.originalType=e,l.mdxType="string"==typeof e?e:s,r[1]=l;for(var c=2;c<a;c++)r[c]=t[c];return o.createElement.apply(null,r)}return o.createElement.apply(null,t)}u.displayName="MDXCreateElement"},2156:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return l},contentTitle:function(){return i},metadata:function(){return c},toc:function(){return d},default:function(){return m}});var o=t(7462),s=t(3366),a=(t(7294),t(3905)),r=["components"],l={description:"Manage your Mesh Workflows.",sidebar_position:3},i="Setting Up Mesh Workflows",c={unversionedId:"api-guide/workflows/create-get-update-delete",id:"api-guide/workflows/create-get-update-delete",title:"Setting Up Mesh Workflows",description:"Manage your Mesh Workflows.",source:"@site/docs/api-guide/workflows/create-get-update-delete.md",sourceDirName:"api-guide/workflows",slug:"/api-guide/workflows/create-get-update-delete",permalink:"/api-guide/workflows/create-get-update-delete",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/api-guide/workflows/create-get-update-delete.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{description:"Manage your Mesh Workflows.",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Input Nodes",permalink:"/api-guide/workflows/input_nodes"},next:{title:"Common Workflows",permalink:"/api-guide/workflows/common-workflows/"}},d=[{value:"Create",id:"create",children:[],level:2},{value:"Workflow Predict",id:"workflow-predict",children:[],level:2},{value:"Get",id:"get",children:[{value:"Get all workflows in an app",id:"get-all-workflows-in-an-app",children:[],level:3},{value:"Get a workflow by a specific ID",id:"get-a-workflow-by-a-specific-id",children:[],level:3}],level:2},{value:"Update",id:"update",children:[{value:"Patch workflow",id:"patch-workflow",children:[],level:3}],level:2},{value:"Delete",id:"delete",children:[{value:"Delete workflow by ID",id:"delete-workflow-by-id",children:[],level:3},{value:"Delete all workflows",id:"delete-all-workflows",children:[],level:3}],level:2}],p=function(e){return function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",n)}},u=p("Tabs"),w=p("TabItem"),f={toc:d};function m(e){var n=e.components,t=(0,s.Z)(e,r);return(0,a.kt)("wrapper",(0,o.Z)({},f,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"setting-up-mesh-workflows"},"Setting Up Mesh Workflows"),(0,a.kt)("h2",{id:"create"},"Create"),(0,a.kt)("p",null,"To create a new custom workflow, specify a list of model IDs that are to be included in the workflow. Each model ID also requires a specific model version ID, since a model can have several versions."),(0,a.kt)(u,{mdxType:"Tabs"},(0,a.kt)(w,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nMultiWorkflowResponse postWorkflowsResponse = stub.postWorkflows(\n    PostWorkflowsRequest.newBuilder().addWorkflows(\n        Workflow.newBuilder()\n            .setId("my-custom-workflow")\n            .addNodes(\n                WorkflowNode.newBuilder()\n                    .setId("food-concepts")\n                    .setModel(\n                        Model.newBuilder()\n                            .setId("bd367be194cf45149e75f01d59f77ba7")\n                            .setModelVersion(ModelVersion.newBuilder().setId("dfebc169854e429086aceb8368662641"))\n                    )\n            )\n            .addNodes(\n                WorkflowNode.newBuilder()\n                    .setId("general-concepts")\n                    .setModel(\n                        Model.newBuilder()\n                            .setId("aaa03c23b3724a16a56b629203edc62c")\n                            .setModelVersion(ModelVersion.newBuilder().setId("aa9ca48295b37401f8af92ad1af0d91d"))\n                    )\n            )\n    ).build()\n);\n\nif (postWorkflowsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n    throw new RuntimeException("Post workflows failed, status: " + postWorkflowsResponse.getStatus());\n}\n'))),(0,a.kt)(w,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nstub.PostWorkflows(\n    {\n        workflows: [\n            {\n                id: "my-custom-workflow",\n                nodes: [\n                    {\n                        id: "food-concepts",\n                        model: {\n                            id: "bd367be194cf45149e75f01d59f77ba7",\n                            model_version: {\n                                id: "dfebc169854e429086aceb8368662641"\n                            }\n                        }\n                    },\n                    {\n                        id: "general-concepts",\n                        model: {\n                            id: "aaa03c23b3724a16a56b629203edc62c",\n                            model_version: {\n                                id: "aa9ca48295b37401f8af92ad1af0d91d"\n                            }\n                        }\n                    },\n                ]\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post workflows failed, status: " + response.status.description);\n        }\n    }\n);\n'))),(0,a.kt)(w,{value:"python",label:"Python",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'# Insert here the initialization code as outlined on this page:\n# https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\npost_workflows_response = stub.PostWorkflows(\n    service_pb2.PostWorkflowsRequest(\n      user_app_id=userDataObject,  # The userDataObject is created in the overview and is required when using a PAT\n      workflows=[\n        resources_pb2.Workflow(\n          id="my-custom-workflow",\n          nodes=[\n            resources_pb2.WorkflowNode(\n              id="food-concepts",\n              model=resources_pb2.Model(\n                id="bd367be194cf45149e75f01d59f77ba7",\n                model_version=resources_pb2.ModelVersion(\n                  id="dfebc169854e429086aceb8368662641"\n                )\n              )\n            ),\n            resources_pb2.WorkflowNode(\n              id="general-concepts",\n              model=resources_pb2.Model(\n                id="aaa03c23b3724a16a56b629203edc62c",\n                model_version=resources_pb2.ModelVersion(\n                  id="aa9ca48295b37401f8af92ad1af0d91d"\n                )\n              )\n            ),\n          ]\n        )\n      ]\n    ),\n    metadata=metadata\n)\n\nif post_workflows_response.status.code != status_code_pb2.SUCCESS:\n    raise Exception("Post workflows failed, status: " + post_workflows_response.status.description)\n'))),(0,a.kt)(w,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'# The first model is the Clarifai\'s Food model, and the second the Clarifai\'s General model.\n\ncurl -X POST \'https://api.clarifai.com/v2/workflows\' \\\n    -H \'Content-Type: application/json\' \\\n    -H \'Authorization: Key YOUR_API_KEY\' \\\n    --data-raw \'{\n      "workflows": [{\n        "id": "my-custom-workflow",\n        "nodes": [\n          {\n            "id": "food-concepts",\n            "model": {\n              "id": "bd367be194cf45149e75f01d59f77ba7",\n              "model_version": {\n                "id": "dfebc169854e429086aceb8368662641"\n              }\n            }\n          },\n          {\n            "id": "general-concepts",\n            "model": {\n              "id": "aaa03c23b3724a16a56b629203edc62c",\n              "model_version": {\n                "id": "aa9ca48295b37401f8af92ad1af0d91d"\n              }\n            }\n          }\n        ]\n      }]\n    }\'\n'))),(0,a.kt)(w,{value:"js_rest",label:"Javascript (REST)",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'// The first model is the Clarifai\'s Food model, and the second the Clarifai\'s General model.\n\nconst raw = JSON.stringify({\n  "user_app_id": {\n        "user_id": "{YOUR_USER_ID}",\n        "app_id": "{YOUR_APP_ID}"\n    },\n  "workflows": [{\n    "id": "my-custom-workflow",\n    "nodes": [\n      {\n        "id": "food-concepts",\n        "model": {\n          "id": "bd367be194cf45149e75f01d59f77ba7",\n          "model_version": {\n            "id": "dfebc169854e429086aceb8368662641"\n          }\n        }\n      },\n      {\n        "id": "general-concepts",\n        "model": {\n          "id": "aaa03c23b3724a16a56b629203edc62c",\n          "model_version": {\n            "id": "aa9ca48295b37401f8af92ad1af0d91d"\n          }\n        }\n      }\n    ]\n  }]\n});\n\nconst requestOptions = {\n  method: \'POST\',\n  headers: {\n    \'Accept\': \'application/json\',\n    \'Authorization\': \'Key {YOUR_PERSONAL_TOKEN}\'\n  },\n    body: raw\n};\n\nfetch(`https://api.clarifai.com/v2/workflows`, requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log(\'error\', error));\n')))),(0,a.kt)("h2",{id:"workflow-predict"},"Workflow Predict"),(0,a.kt)("p",null,"Predict using a workflow. The response will contain the predictions each model in the workflow returns for the input."),(0,a.kt)(u,{mdxType:"Tabs"},(0,a.kt)(w,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nPostWorkflowResultsResponse postWorkflowResultsResponse = stub.postWorkflowResults(\n    PostWorkflowResultsRequest.newBuilder()\n        .setWorkflowId("{YOUR_WORKFLOW_ID}")\n        .addInputs(\n            Input.newBuilder().setData(\n                Data.newBuilder().setImage(\n                    Image.newBuilder().setUrl(\n                        "https://samples.clarifai.com/metro-north.jpg"\n                    )\n                )\n            )\n        )\n        .build()\n);\n\nif (postWorkflowResultsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n  throw new RuntimeException("Post workflow results failed, status: " + postWorkflowResultsResponse.getStatus());\n}\n\n// We\'ll get one WorkflowResult for each input we used above. Because of one input, we have here\n// one WorkflowResult.\nWorkflowResult results = postWorkflowResultsResponse.getResults(0);\n\n// Each model we have in the workflow will produce one output.\nfor (Output output : results.getOutputsList()) {\n    Model model = output.getModel();\n\n    System.out.println("Predicted concepts for the model `" + model.getName() + "`:");\n    for (Concept concept : output.getData().getConceptsList()) {\n        System.out.printf("\\t%s %.2f%n", concept.getName(), concept.getValue());\n    }\n}\n'))),(0,a.kt)(w,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nstub.PostWorkflowResults(\n    {\n        workflow_id: "{YOUR_WORKFLOW_ID}",\n        inputs: [\n            {data: {image: {url: "https://samples.clarifai.com/metro-north.jpg"}}}\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post workflow results failed, status: " + response.status.description);\n        }\n\n        // We\'ll get one WorkflowResult for each input we used above. Because of one input, we have here\n        // one WorkflowResult.\n        const results = response.results[0];\n\n        // Each model we have in the workflow will produce one output.\n        for (const output of results.outputs) {\n            const model = output.model;\n\n            console.log("Predicted concepts for the model `" + model.name + "`:");\n            for (const concept of output.data.concepts) {\n                console.log("\\t" + concept.name + " " + concept.value);\n            }\n        }\n    }\n);\n'))),(0,a.kt)(w,{value:"python",label:"Python",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'# Insert here the initialization code as outlined on this page:\n# https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\npost_workflow_results_response = stub.PostWorkflowResults(\n    service_pb2.PostWorkflowResultsRequest(\n        user_app_id=userDataObject,  # The userDataObject is created in the overview and is required when using a PAT\n        workflow_id="{YOUR_WORKFLOW_ID}",\n        inputs=[\n            resources_pb2.Input(\n                data=resources_pb2.Data(\n                    image=resources_pb2.Image(\n                        url="https://samples.clarifai.com/metro-north.jpg"\n                    )\n                )\n            )\n        ]\n    ),\n    metadata=metadata\n)\nif post_workflow_results_response.status.code != status_code_pb2.SUCCESS:\n    raise Exception("Post workflow results failed, status: " + post_workflow_results_response.status.description)\n\n# We\'ll get one WorkflowResult for each input we used above. Because of one input, we have here\n# one WorkflowResult.\nresults = post_workflow_results_response.results[0]\n\n# Each model we have in the workflow will produce one output.\nfor output in results.outputs:\n    model = output.model\n\n    print("Predicted concepts for the model `%s`" % model.name)\n    for concept in output.data.concepts:\n        print("\\t%s %.2f" % (concept.name, concept.value))\n'))),(0,a.kt)(w,{value:"csharp",label:"C#",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nvar response = client.PostModelOutputs(\n    new PostModelOutputsRequest()\n    {\n        UserAppId = new UserAppIDSet()\n        { \n            UserId = "excaliburne",\n            AppId = "moderation-test"\n        },\n        ModelId = "aaa03c23b3724a16a56b629203edc62c", // <- This is the general model_id\n        Inputs =\n        {\n            new List<Input>()\n            {\n                new Input()\n                {\n                    Data = new Data()\n                    {\n                        Image = new Image()\n                        {\n                            Url = "https://samples.clarifai.com/dog2.jpeg"\n                        }\n                    }\n                }\n            }\n        }\n    },\n    metadata\n);\n\nif (response.Status.Code != StatusCode.Success)\n    throw new Exception("Request failed, response: " + response);\n\nConsole.WriteLine("Predicted concepts:");\nforeach (var concept in response.Outputs[0].Data.Concepts)\n{\n    Console.WriteLine($"{concept.Name, 15} {concept.Value:0.00}");\n}\n'))),(0,a.kt)(w,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST \\\n  -H \'authorization: Key YOUR_API_KEY\' \\\n  -H \'content-type: application/json\' \\\n  -d \'{\n    "inputs": [\n        {\n          "data": {\n            "image": {\n              "url": "https://samples.clarifai.com/metro-north.jpg"\n          }\n        }\n      }\n    ]\n}\'\\\nhttps://api.clarifai.com/v2/workflows/{YOUR_WORKFLOW_ID}/results\n'))),(0,a.kt)(w,{value:"js_rest",label:"Javascript (REST)",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'const workflowID = \'{YOUR_WORKFLOW_ID}\'\n\nconst raw = JSON.stringify({\n  "user_app_id": {\n        "user_id": "{YOUR_USER_ID}",\n        "app_id": "{YOUR_APP_ID}"\n    },\n  "inputs": [\n      {\n        "data": {\n          "image": {\n            "url": "https://samples.clarifai.com/metro-north.jpg"\n        }\n      }\n    }\n  ]\n});\n\nconst requestOptions = {\n  method: \'POST\',\n  headers: {\n    \'Accept\': \'application/json\',\n    \'Authorization\': \'Key {YOUR_PERSONAL_TOKEN}\'\n  },\n    body: raw\n};\n\nfetch(`https://api.clarifai.com/v2/workflows/${workflowID}/results`, requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log(\'error\', error));\n')))),(0,a.kt)("h2",{id:"get"},"Get"),(0,a.kt)("h3",{id:"get-all-workflows-in-an-app"},"Get all workflows in an app"),(0,a.kt)("p",null,"Return all custom workflows in your app."),(0,a.kt)(u,{mdxType:"Tabs"},(0,a.kt)(w,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nMultiWorkflowResponse listWorkflowsResponse = stub.listWorkflows(ListWorkflowsRequest.newBuilder().build());\n\nif (listWorkflowsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n    throw new RuntimeException("List workflows failed, status: " + listWorkflowsResponse.getStatus());\n}\n\nfor (Workflow workflow : listWorkflowsResponse.getWorkflowsList()) {\n    System.out.println("The workflow " + workflow.getId() + " consists of these models:");\n    for (WorkflowNode workflowNode : workflow.getNodesList()) {\n        Model model = workflowNode.getModel();\n        System.out.println(model.getId());\n    }\n    System.out.println();\n}\n'))),(0,a.kt)(w,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nstub.ListWorkflows(\n    {},\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("List workflows failed, status: " + response.status.description);\n        }\n\n        for (const workflow of response.workflows) {\n            console.log("The workflow " + workflow.id + " consists of these models:");\n            for (const workflowNode of workflow.nodes) {\n                const model = workflowNode.model;\n                console.log(model.id);\n            }\n            console.log();\n        }\n    }\n);\n'))),(0,a.kt)(w,{value:"python",label:"Python",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'# Insert here the initialization code as outlined on this page:\n# https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nlist_workflows_response = stub.ListWorkflows(\n    service_pb2.ListWorkflowsRequest(\n        user_app_id=userDataObject  # The userDataObject is created in the overview and is required when using a PAT\n    ),\n    metadata=metadata\n)\n\nif list_workflows_response.status.code != status_code_pb2.SUCCESS:\n    raise Exception("List workflows failed, status: " + list_workflows_response.status.description)\n\nfor workflow in list_workflows_response.workflows:\n    print(f"The workflow {workflow.id} consists of these models:")\n    for workflow_node in workflow.nodes:\n        model = workflow_node.model\n        print(model.id)\n    print()\n'))),(0,a.kt)(w,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"curl -X GET 'https://api.clarifai.com/v2/workflows' \\\n    -H 'Content-Type: application/json' \\\n    -H 'Authorization: Key YOUR_API_KEY'\n"))),(0,a.kt)(w,{value:"js_rest",label:"Javascript (REST)",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const appId = '{YOUR_APP_ID}'\n\nconst requestOptions = {\n  method: 'GET',\n  headers: {\n    'Accept': 'application/json',\n    'Authorization': 'Key {YOUR_PERSONAL_TOKEN}'\n  }\n};\n\nfetch(`https://api.clarifai.com/v2/users/me/apps/${appId}/workflows`, requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log('error', error));\n")))),(0,a.kt)("h3",{id:"get-a-workflow-by-a-specific-id"},"Get a workflow by a specific ID"),(0,a.kt)("p",null,"Returns information about a specific workflow."),(0,a.kt)(u,{mdxType:"Tabs"},(0,a.kt)(w,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nSingleWorkflowResponse getWorkflowResponse = stub.getWorkflow(\n    GetWorkflowRequest.newBuilder()\n        .setWorkflowId("food-and-general")\n        .build()\n);\n\nif (getWorkflowResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n    throw new RuntimeException("Get workflow failed, status: " + getWorkflowResponse.getStatus());\n}\n\nWorkflow workflow = getWorkflowResponse.getWorkflow();\n\nSystem.out.println("The workflow consists of these models:");\nfor (WorkflowNode workflowNode : workflow.getNodesList()) {\n    Model model = workflowNode.getModel();\n    System.out.println(model.getId());\n}\n'))),(0,a.kt)(w,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nstub.GetWorkflow(\n    {\n        workflow_id: "my-custom-workflow"\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Get workflow failed, status: " + response.status.description);\n        }\n\n        const workflow = response.workflow;\n\n        console.log("The workflow consists of these models:");\n        for (const workflowNode of workflow.nodes) {\n            const model = workflowNode.model;\n            console.log(model.id);\n        }\n    }\n);\n'))),(0,a.kt)(w,{value:"python",label:"Python",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'# Insert here the initialization code as outlined on this page:\n# https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nget_workflow_response = stub.GetWorkflow(\n    service_pb2.GetWorkflowRequest(\n        user_app_id=userDataObject,  # The userDataObject is created in the overview and is required when using a PAT\n        workflow_id="my-custom-workflow"\n    ),\n    metadata=metadata\n)\n\nif get_workflow_response.status.code != status_code_pb2.SUCCESS:\n    raise Exception("Get workflow failed, status: " + get_workflow_response.status.description)\n\nworkflow = get_workflow_response.workflow\nprint(f"The workflow consists of these models:")\nfor workflow_node in workflow.nodes:\n    model = workflow_node.model\n    print(model.id)\n'))),(0,a.kt)(w,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"curl -X GET 'https://api.clarifai.com/v2/workflows/my-custom-workflow' \\\n    -H 'Content-Type: application/json' \\\n    -H 'Authorization: Key YOUR_API_KEY'\n"))),(0,a.kt)(w,{value:"js_rest",label:"Javascript (REST)",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const appId = '{YOUR_APP_ID}'\nconst workflowId = '{YOUR_WORKFLOW_ID}'\n\nconst requestOptions = {\n  method: 'GET',\n  headers: {\n    'Accept': 'application/json',\n    'Authorization': 'Key {YOUR_PERSONAL_TOKEN}'\n  }\n};\n\nfetch(`https://api.clarifai.com/v2/users/me/apps/${appId}/workflows/${workflowId}`, requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log('error', error));\n")))),(0,a.kt)("h2",{id:"update"},"Update"),(0,a.kt)("h3",{id:"patch-workflow"},"Patch workflow"),(0,a.kt)("p",null,"Ability to change the workflow, that is to change the models of which the workflow consists."),(0,a.kt)("p",null,'Possible actions are "overwrite", "merge" and "remove".'),(0,a.kt)(u,{mdxType:"Tabs"},(0,a.kt)(w,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nMultiWorkflowResponse patchWorkflowsResponse = stub.patchWorkflows(\n    PatchWorkflowsRequest.newBuilder()\n        .setAction("overwrite")\n        .addWorkflows(\n            Workflow.newBuilder()\n                .setId("my-custom-workflow")\n                .addNodes(\n                    WorkflowNode.newBuilder()\n                        .setId("travel-concepts")\n                        .setModel(\n                            Model.newBuilder()\n                                .setId("ccc28c313d69466f836ab83287a54ed9")\n                                .setModelVersion(ModelVersion.newBuilder().setId("cce28c313d69466f836ab83287a54ed9"))\n                        )\n                )\n                .addNodes(\n                    WorkflowNode.newBuilder()\n                        .setId("nsfw-concepts")\n                        .setModel(\n                            Model.newBuilder()\n                                .setId("ccc76d86d2004ed1a38ba0cf39ecb4b1")\n                                .setModelVersion(ModelVersion.newBuilder().setId("cc76a92beaeb4d8495a58ba197998158"))\n                        )\n                )\n                .addNodes(\n                    WorkflowNode.newBuilder()\n                        .setId("wedding-concepts")\n                        .setModel(\n                            Model.newBuilder()\n                                .setId("c386b7a870114f4a87477c0824499348")\n                                .setModelVersion(ModelVersion.newBuilder().setId("787cc9a002164250800598d36b072384"))\n                        )\n                )\n        ).build()\n);\n\nif (patchWorkflowsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n    throw new RuntimeException("Patch workflows failed, status: " + patchWorkflowsResponse.getStatus());\n}\n'))),(0,a.kt)(w,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nstub.PatchWorkflows(\n    {\n        action: "overwrite",\n        workflows: [\n            {\n                id: "my-custom-workflow",\n                nodes: [\n                    {\n                        id: "travel-concepts",\n                        model: {\n                            id: "ccc28c313d69466f836ab83287a54ed9",\n                            model_version: {\n                                id: "cce28c313d69466f836ab83287a54ed9"\n                            }\n                        }\n                    },\n                    {\n                        id: "nsfw-concepts",\n                        model: {\n                            id: "ccc76d86d2004ed1a38ba0cf39ecb4b1",\n                            model_version: {\n                                id: "cc76a92beaeb4d8495a58ba197998158"\n                            }\n                        }\n                    },\n                    {\n                        id: "wedding-concepts",\n                        model: {\n                            id: "c386b7a870114f4a87477c0824499348",\n                            model_version: {\n                                id: "787cc9a002164250800598d36b072384"\n                            }\n                        }\n                    },\n                ]\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Patch workflows failed, status: " + response.status.description);\n        }\n    }\n);\n'))),(0,a.kt)(w,{value:"python",label:"Python",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'# Insert here the initialization code as outlined on this page:\n# https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\npatch_workflows_response = stub.PatchWorkflows(\n    service_pb2.PatchWorkflowsRequest(\n      user_app_id=userDataObject,  # The userDataObject is created in the overview and is required when using a PAT\n      action="overwrite",\n      workflows=[\n        resources_pb2.Workflow(\n          id="my-custom-workflow",\n          nodes=[\n            resources_pb2.WorkflowNode(\n              id="travel-concepts",\n              model=resources_pb2.Model(\n                id="ccc28c313d69466f836ab83287a54ed9",\n                model_version=resources_pb2.ModelVersion(\n                  id="cce28c313d69466f836ab83287a54ed9"\n                )\n              )\n            ),\n            resources_pb2.WorkflowNode(\n              id="nsfw-concepts",\n              model=resources_pb2.Model(\n                id="ccc76d86d2004ed1a38ba0cf39ecb4b1",\n                model_version=resources_pb2.ModelVersion(\n                  id="cc76a92beaeb4d8495a58ba197998158"\n                )\n              )\n            ),\n            resources_pb2.WorkflowNode(\n              id="wedding-concepts",\n              model=resources_pb2.Model(\n                id="c386b7a870114f4a87477c0824499348",\n                model_version=resources_pb2.ModelVersion(\n                  id="787cc9a002164250800598d36b072384"\n                )\n              )\n            ),\n          ]\n        )\n      ]\n    ),\n    metadata=metadata\n)\n\nif patch_workflows_response.status.code != status_code_pb2.SUCCESS:\n    raise Exception("Patch workflows failed, status: " + patch_workflows_response.status.description)\n'))),(0,a.kt)(w,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'# Supported actions are: overwrite, merge, remove.\n\ncurl -X PATCH \'https://api.clarifai.com/v2/workflows\' \\\n    -H \'Content-Type: application/json\' \\\n    -H \'Authorization: Key YOUR_API_KEY\' \\\n    --data-raw \'{\n        "action": "overwrite",\n        "workflows": [\n            {\n                "id": "my-custom-workflow",\n                "nodes": [\n                    {\n                        "id": "travel-concepts",\n                        "model": {\n                            "id": "ccc28c313d69466f836ab83287a54ed9",\n                            "model_version": {\n                                "id": "cce28c313d69466f836ab83287a54ed9"\n                            }\n                        }\n                    },\n                    {\n                        "id": "nsfw-concepts",\n                        "model": {\n                            "id": "ccc76d86d2004ed1a38ba0cf39ecb4b1",\n                            "model_version": {\n                                "id": "cc76a92beaeb4d8495a58ba197998158"\n                            }\n                        }\n                    },\n                    {\n                        "id": "wedding-concepts",\n                        "model": {\n                            "id": "c386b7a870114f4a87477c0824499348",\n                            "model_version": {\n                                "id": "787cc9a002164250800598d36b072384"\n                            }\n                        }\n                    }\n                ]\n            }\n        ]\n    }\'\n'))),(0,a.kt)(w,{value:"js_rest",label:"Javascript (REST)",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'\nconst raw = JSON.stringify({\n  "user_app_id": {\n        "user_id": "{YOUR_USER_ID}",\n        "app_id": "{YOUR_APP_ID}"\n    },\n  "action": "overwrite",\n  "workflows": [\n      {\n          "id": "my-custom-workflow",\n          "nodes": [\n              {\n                  "id": "travel-concepts",\n                  "model": {\n                      "id": "ccc28c313d69466f836ab83287a54ed9",\n                      "model_version": {\n                          "id": "cce28c313d69466f836ab83287a54ed9"\n                      }\n                  }\n              },\n              {\n                  "id": "nsfw-concepts",\n                  "model": {\n                      "id": "ccc76d86d2004ed1a38ba0cf39ecb4b1",\n                      "model_version": {\n                          "id": "cc76a92beaeb4d8495a58ba197998158"\n                      }\n                  }\n              },\n              {\n                  "id": "wedding-concepts",\n                  "model": {\n                      "id": "c386b7a870114f4a87477c0824499348",\n                      "model_version": {\n                          "id": "787cc9a002164250800598d36b072384"\n                      }\n                  }\n              }\n          ]\n      }\n  ]\n});\n\nconst requestOptions = {\n  method: \'PATCH\',\n  headers: {\n    \'Accept\': \'application/json\',\n    \'Authorization\': \'Key {YOUR_PERSONAL_TOKEN}\'\n  },\n    body: raw\n};\n\nfetch(`https://api.clarifai.com/v2/workflows`, requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log(\'error\', error));\n')))),(0,a.kt)("h2",{id:"delete"},"Delete"),(0,a.kt)("h3",{id:"delete-workflow-by-id"},"Delete workflow by ID"),(0,a.kt)("p",null,"Delete a specific workflow."),(0,a.kt)(u,{mdxType:"Tabs"},(0,a.kt)(w,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nBaseResponse deleteWorkflowResponse = stub.deleteWorkflow(\n    DeleteWorkflowRequest.newBuilder()\n        .setWorkflowId("my-custom-workflow")\n        .build()\n);\n\nif (deleteWorkflowResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n    throw new RuntimeException("Delete workflow failed, status: " + deleteWorkflowResponse.getStatus());\n}\n'))),(0,a.kt)(w,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nstub.DeleteWorkflow(\n    {\n        workflow_id: "my-custom-workflow",\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Delete workflow failed, status: " + response.status.description);\n        }\n    }\n);\n'))),(0,a.kt)(w,{value:"python",label:"Python",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'# Insert here the initialization code as outlined on this page:\n# https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\ndelete_workflow_response = stub.DeleteWorkflow(\n    service_pb2.DeleteWorkflowRequest(\n      user_app_id=userDataObject,  # The userDataObject is created in the overview and is required when using a PAT\n      workflow_id="my-custom-workflow"\n    ),\n    metadata=metadata\n)\n\nif delete_workflow_response.status.code != status_code_pb2.SUCCESS:\n    raise Exception("Delete workflow failed, status: " + delete_workflow_response.status.description)\n'))),(0,a.kt)(w,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"curl -X DELETE 'https://api.clarifai.com/v2/workflows/my-custom-workflow \\\n    -H 'Content-Type: application/json' \\\n    -H 'Authorization: Key YOUR_API_KEY'\n"))),(0,a.kt)(w,{value:"js_rest",label:"Javascript (REST)",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const appId = '{YOUR_APP_ID}'\nconst workflowId = '{YOUR_WORKFLOW_ID}'\n\nconst requestOptions = {\n  method: 'DELETE',\n  headers: {\n    'Accept': 'application/json',\n    'Authorization': 'Key {YOUR_PERSONAL_TOKEN}'\n  }\n};\n\nfetch(`https://api.clarifai.com/v2/users/me/apps/${appId}/workflows/${workflowId}`, requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log('error', error));\n")))),(0,a.kt)("h3",{id:"delete-all-workflows"},"Delete all workflows"),(0,a.kt)("p",null,"Deletes all custom workflows."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},'Note: instead of "delete',"_","all\" it's possible to specify a list of workflow IDs to be deleted, using the ",(0,a.kt)("inlineCode",{parentName:"p"},"ids")," field.")),(0,a.kt)(u,{mdxType:"Tabs"},(0,a.kt)(w,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nBaseResponse deleteWorkflowsResponse = stub.deleteWorkflows(\n    DeleteWorkflowsRequest.newBuilder()\n        .setDeleteAll(true)\n        .build()\n);\n\nif (deleteWorkflowsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n    throw new RuntimeException("Delete workflows failed, status: " + deleteWorkflowsResponse.getStatus());\n}\n'))),(0,a.kt)(w,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nstub.DeleteWorkflows(\n    {\n        delete_all: true\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Delete workflows failed, status: " + response.status.description);\n        }\n    }\n);\n'))),(0,a.kt)(w,{value:"python",label:"Python",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'# Insert here the initialization code as outlined on this page:\n# https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\ndelete_workflows_response = stub.DeleteWorkflows(\n    service_pb2.DeleteWorkflowsRequest(\n      user_app_id=userDataObject,  # The userDataObject is created in the overview and is required when using a PAT\n      delete_all=True\n    ),\n    metadata=metadata\n)\n\nif delete_workflows_response.status.code != status_code_pb2.SUCCESS:\n    raise Exception("Delete workflows failed, status: " + delete_workflows_response.status.description)\n'))),(0,a.kt)(w,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"curl -X DELETE 'https://api.clarifai.com/v2/workflows' \\\n    -H 'Content-Type: application/json' \\\n    -H 'Authorization: Key YOUR_API_KEY' \\\n    --data-raw '{\n        \"delete_all\": true\n    }'\n"))),(0,a.kt)(w,{value:"js_rest",label:"Javascript (REST)",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const raw = JSON.stringify({\n  \"user_app_id\": {\n        \"user_id\": \"{YOUR_USER_ID}\",\n        \"app_id\": \"{YOUR_APP_ID}\"\n    },\n  \"delete_all\": true\n});\n\nconst requestOptions = {\n  method: 'DELETE',\n  headers: {\n    'Accept': 'application/json',\n    'Authorization': 'Key {YOUR_PERSONAL_TOKEN}'\n  },\n    body: raw\n};\n\nfetch(`https://api.clarifai.com/v2/workflows`, requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log('error', error));\n")))))}m.isMDXComponent=!0}}]);
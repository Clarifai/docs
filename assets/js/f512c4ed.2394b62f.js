"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[2635],{11470:(e,n,r)=>{r.d(n,{A:()=>w});var t=r(96540),o=r(18215),l=r(17559),a=r(23104),s=r(56347),i=r(205),c=r(57485),d=r(31682),u=r(70679);function h(e){return t.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,t.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function p(e){const{values:n,children:r}=e;return(0,t.useMemo)(()=>{const e=n??function(e){return h(e).map(({props:{value:e,label:n,attributes:r,default:t}})=>({value:e,label:n,attributes:r,default:t}))}(r);return function(e){const n=(0,d.XI)(e,(e,n)=>e.value===n.value);if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[n,r])}function m({value:e,tabValues:n}){return n.some(n=>n.value===e)}function f({queryString:e=!1,groupId:n}){const r=(0,s.W6)(),o=function({queryString:e=!1,groupId:n}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,c.aZ)(o),(0,t.useCallback)(e=>{if(!o)return;const n=new URLSearchParams(r.location.search);n.set(o,e),r.replace({...r.location,search:n.toString()})},[o,r])]}function x(e){const{defaultValue:n,queryString:r=!1,groupId:o}=e,l=p(e),[a,s]=(0,t.useState)(()=>function({defaultValue:e,tabValues:n}){if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!m({value:e,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const r=n.find(e=>e.default)??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:n,tabValues:l})),[c,d]=f({queryString:r,groupId:o}),[h,x]=function({groupId:e}){const n=function(e){return e?`docusaurus.tab.${e}`:null}(e),[r,o]=(0,u.Dv)(n);return[r,(0,t.useCallback)(e=>{n&&o.set(e)},[n,o])]}({groupId:o}),y=(()=>{const e=c??h;return m({value:e,tabValues:l})?e:null})();(0,i.A)(()=>{y&&s(y)},[y]);return{selectedValue:a,selectValue:(0,t.useCallback)(e=>{if(!m({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);s(e),d(e),x(e)},[d,x,l]),tabValues:l}}var y=r(92303);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var j=r(74848);function b({className:e,block:n,selectedValue:r,selectValue:t,tabValues:l}){const s=[],{blockElementScrollPositionUntilNextRender:i}=(0,a.a_)(),c=e=>{const n=e.currentTarget,o=s.indexOf(n),a=l[o].value;a!==r&&(i(n),t(a))},d=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const r=s.indexOf(e.currentTarget)+1;n=s[r]??s[0];break}case"ArrowLeft":{const r=s.indexOf(e.currentTarget)-1;n=s[r]??s[s.length-1];break}}n?.focus()};return(0,j.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.A)("tabs",{"tabs--block":n},e),children:l.map(({value:e,label:n,attributes:t})=>(0,j.jsx)("li",{role:"tab",tabIndex:r===e?0:-1,"aria-selected":r===e,ref:e=>{s.push(e)},onKeyDown:d,onClick:c,...t,className:(0,o.A)("tabs__item",g.tabItem,t?.className,{"tabs__item--active":r===e}),children:n??e},e))})}function v({lazy:e,children:n,selectedValue:r}){const l=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){const e=l.find(e=>e.props.value===r);return e?(0,t.cloneElement)(e,{className:(0,o.A)("margin-top--md",e.props.className)}):null}return(0,j.jsx)("div",{className:"margin-top--md",children:l.map((e,n)=>(0,t.cloneElement)(e,{key:n,hidden:e.props.value!==r}))})}function I(e){const n=x(e);return(0,j.jsxs)("div",{className:(0,o.A)(l.G.tabs.container,"tabs-container",g.tabList),children:[(0,j.jsx)(b,{...n,...e}),(0,j.jsx)(v,{...n,...e})]})}function w(e){const n=(0,y.A)();return(0,j.jsx)(I,{...e,children:h(e.children)},String(n))}},19365:(e,n,r)=>{r.d(n,{A:()=>a});r(96540);var t=r(18215);const o={tabItem:"tabItem_Ymn6"};var l=r(74848);function a({children:e,hidden:n,className:r}){return(0,l.jsx)("div",{role:"tabpanel",className:(0,t.A)(o.tabItem,r),hidden:n,children:e})}},45903:(e,n,r)=>{r.d(n,{A:()=>t});const t=r.p+"assets/images/runners-dashboard-c8f62b9cfe4af63f4929919a8cba87f4.png"},67399:(e,n,r)=>{r.d(n,{A:()=>t});const t=r.p+"assets/images/local-runners-298af3177d2174a3805238cc2a99d2cc.png"},77873:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>p,contentTitle:()=>h,default:()=>x,frontMatter:()=>u,metadata:()=>t,toc:()=>m});const t=JSON.parse('{"id":"compute/local-runners/README","title":"Local Runners","description":"Run and test models locally, while exposing them through Clarifai\u2019s enterprise\u2011grade API","source":"@site/docs/compute/local-runners/README.mdx","sourceDirName":"compute/local-runners","slug":"/compute/local-runners/","permalink":"/compute/local-runners/","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"description":"Run and test models locally, while exposing them through Clarifai\u2019s enterprise\u2011grade API"},"sidebar":"tutorialSidebar","previous":{"title":"Input and Output Data Types","permalink":"/compute/upload/data-types"},"next":{"title":"Ollama","permalink":"/compute/local-runners/ollama"}}');var o=r(74848),l=r(28453),a=r(11470),s=r(19365),i=r(88149);const c='clarifai model local-runner\n[INFO] 13:32:33.062920 > Checking local runner requirements... |  thread=8800297152 \n[INFO] 13:32:33.085516 Checking 1 dependencies... |  thread=8800297152 \n[INFO] 13:32:33.085856 \u2705 All 1 dependencies are installed! |  thread=8800297152 \n[INFO] 13:32:33.086091 > Verifying local runner setup... |  thread=8800297152 \n[INFO] 13:32:33.086140 Current context: default |  thread=8800297152 \n[INFO] 13:32:33.086179 Current user_id: alfrick |  thread=8800297152 \n[INFO] 13:32:33.086210 Current PAT: d6570**** |  thread=8800297152 \n[INFO] 13:32:33.088226 Current compute_cluster_id: local-runner-compute-cluster |  thread=8800297152 \n[WARNING] 13:32:34.747258 Failed to get compute cluster with ID \'local-runner-compute-cluster\':\ncode: CONN_DOES_NOT_EXIST\ndescription: "Resource does not exist"\ndetails: "ComputeCluster with ID \\\'local-runner-compute-cluster\\\' not found. Check your request fields."\nreq_id: "sdk-python-11.8.2-941866be231e4602865a64d15e01fa55"\n |  thread=8800297152 \nCompute cluster not found. Do you want to create a new compute cluster alfrick/local-runner-compute-cluster? (y/n): y\n[INFO] 13:32:39.352840 Compute Cluster with ID \'local-runner-compute-cluster\' is created:\ncode: SUCCESS\ndescription: "Ok"\nreq_id: "sdk-python-11.8.2-eae3c965f0cd4cd394ad2590b47a68ab"\n |  thread=8800297152 \n[INFO] 13:32:39.364816 Current nodepool_id: local-runner-nodepool |  thread=8800297152 \n[WARNING] 13:32:42.674651 Failed to get nodepool with ID \'local-runner-nodepool\':\ncode: CONN_DOES_NOT_EXIST\ndescription: "Resource does not exist"\ndetails: "Nodepool not found. Check your request fields."\nreq_id: "sdk-python-11.8.2-436a10af775346878416c84dd6854254"\n |  thread=8800297152 \nNodepool not found. Do you want to create a new nodepool alfrick/local-runner-compute-cluster/local-runner-nodepool? (y/n): y\n[INFO] 13:32:45.824647 Nodepool with ID \'local-runner-nodepool\' is created:\ncode: SUCCESS\ndescription: "Ok"\nreq_id: "sdk-python-11.8.2-0e520dbecfcd42d58fd78b2494c48aa8"\n |  thread=8800297152 \n[INFO] 13:32:45.836876 Current app_id: local-runner-app |  thread=8800297152 \n[INFO] 13:32:46.896228 Current model_id: local-runner-model |  thread=8800297152 \n[WARNING] 13:32:52.596471 Attempting to patch latest version: 9d38bb9398944de4bdef699835f17ec9 |  thread=8800297152 \n[INFO] 13:32:55.120866 Successfully patched version 9d38bb9398944de4bdef699835f17ec9 |  thread=8800297152 \n[INFO] 13:32:55.124102 Current model version 9d38bb9398944de4bdef699835f17ec9 |  thread=8800297152 \n[WARNING] 13:32:56.851018 Failed to get runner with ID \'b3632320627341fb9ea1132d5b77b26f\':\ncode: CONN_DOES_NOT_EXIST\ndescription: "Resource does not exist"\ndetails: "Runner not found. Check your request fields."\nreq_id: "sdk-python-11.8.2-0988ef3bd3144e0196cff79062621406"\n |  thread=8800297152 \n[INFO] 13:32:56.851708 Creating the local runner tying this \'alfrick/local-runner-app/models/local-runner-model\' model (version: 9d38bb9398944de4bdef699835f17ec9) to the \'alfrick/local-runner-compute-cluster/local-runner-nodepool\' nodepool. |  thread=8800297152 \n[INFO] 13:32:57.321664 Runner with ID \'f3c46913186449ba99dedd38123d47a3\' is created:\ncode: SUCCESS\ndescription: "Ok"\nreq_id: "sdk-python-11.8.2-8ec4cb69afdb402cb173e50251420347"\n |  thread=8800297152 \n[INFO] 13:32:57.331723 Current runner_id: f3c46913186449ba99dedd38123d47a3 |  thread=8800297152 \n[WARNING] 13:32:57.624714 Failed to get deployment with ID local-runner-deployment:\ncode: CONN_DOES_NOT_EXIST\ndescription: "Resource does not exist"\ndetails: "Deployment with ID \\\'local-runner-deployment\\\' not found. Check your request fields."\nreq_id: "sdk-python-11.8.2-93d203f6c0c944e5a844967a7f6f3c9b"\n |  thread=8800297152 \nDeployment not found. Do you want to create a new deployment alfrick/local-runner-compute-cluster/local-runner-nodepool/local-runner-deployment? (y/n): y\n[INFO] 13:33:00.896305 Deployment with ID \'local-runner-deployment\' is created:\ncode: SUCCESS\ndescription: "Ok"\nreq_id: "sdk-python-11.8.2-68917fcd0d3c403db684a06a417d804e"\n |  thread=8800297152 \n[INFO] 13:33:00.904547 Current deployment_id: local-runner-deployment |  thread=8800297152 \n[INFO] 13:33:00.907140 Current model section of config.yaml: {\'id\': \'my-uploaded-model\', \'user_id\': \'alfrick\', \'app_id\': \'models1\', \'model_type_id\': \'text-to-text\'} |  thread=8800297152 \nDo you want to backup config.yaml to config.yaml.bk then update the config.yaml with the new model information? (y/n): y\n[INFO] 13:33:03.816163 Checking 1 dependencies... |  thread=8800297152 \n[INFO] 13:33:03.816702 \u2705 All 1 dependencies are installed! |  thread=8800297152 \n[INFO] 13:33:03.816783 \u2705 Starting local runner... |  thread=8800297152 \n[INFO] 13:33:03.816865 No secrets path configured, running without secrets |  thread=8800297152 \n[INFO] 13:33:05.775735 ModelServer initialized successfully |  thread=8800297152 \nException in thread Thread-1 (serve_health):\nTraceback (most recent call last):\n  File "/opt/homebrew/Cellar/python@3.12/3.12.11/Frameworks/Python.framework/Versions/3.12/lib/python3.12/threading.py", line 1075, in _bootstrap_inner\n    self.run()\n  File "/opt/homebrew/Cellar/python@3.12/3.12.11/Frameworks/Python.framework/Versions/3.12/lib/python3.12/threading.py", line 1012, in run\n    self._target(*self._args, **self._kwargs)\n  File "/Users/macbookpro/Desktop/code/venv/lib/python3.12/site-packages/clarifai_protocol/utils/health.py", line 67, in serve_health\n  File "/opt/homebrew/Cellar/python@3.12/3.12.11/Frameworks/Python.framework/Versions/3.12/lib/python3.12/socketserver.py", line 457, in __init__\n    self.server_bind()\n  File "/opt/homebrew/Cellar/python@3.12/3.12.11/Frameworks/Python.framework/Versions/3.12/lib/python3.12/http/server.py", line 136, in server_bind\n    socketserver.TCPServer.server_bind(self)\n  File "/opt/homebrew/Cellar/python@3.12/3.12.11/Frameworks/Python.framework/Versions/3.12/lib/python3.12/socketserver.py", line 478, in server_bind\n    self.socket.bind(self.server_address)\nOSError: [Errno 48] Address already in use\n[INFO] 13:33:05.827501 \u2705 Your model is running locally and is ready for requests from the API...\n |  thread=8800297152 \n[INFO] 13:33:05.827575 > Code Snippet: To call your model via the API, use this code snippet:\n# Clarifai Model Client Script\n# Set the environment variables `CLARIFAI_DEPLOYMENT_ID` and `CLARIFAI_PAT` to run this script.\n# Example usage:\nimport os\n\nfrom clarifai.client import Model\nfrom clarifai.runners.utils import data_types\n\nmodel = Model(\n    "https://clarifai.com/alfrick/local-runner-app/models/local-runner-model",\n    deployment_id=\'local-runner-deployment\',  # Only needed for dedicated deployed models\n    base_url="https://api.clarifai.com",\n)\n\n# Example model prediction from different model methods:\n\nresponse = model.predict(\n    text1="What is the future of AI?",\n)\nprint(response)\n\nresponse = model.generate(\n    text1="What is the future of AI?",\n)\nfor res in response:\n    print(res)\n\nresponse = model.stream(\n    input_iterator=iter([\'What is the future of AI?\']),\n)\n |  thread=8800297152 \n[INFO] 13:33:05.827661 > Playground:   To chat with your model, visit: https://clarifai.com/playground?model=local-runner-model__9d38bb9398944de4bdef699835f17ec9&user_id=alfrick&app_id=local-runner-app\n |  thread=8800297152 \n[INFO] 13:33:05.827704 > API URL:      To call your model via the API, use this model URL: https://clarifai.com/alfrick/local-runner-app/models/local-runner-model\n |  thread=8800297152 \n[INFO] 13:33:05.827724 Press CTRL+C to stop the runner.\n |  thread=8800297152 \n[INFO] 13:33:05.827758 Starting 32 threads... |  thread=8800297152 \n',d='# Clarifai Model Client Script\n# Set the environment variables `CLARIFAI_DEPLOYMENT_ID` and `CLARIFAI_PAT` to run this script.\n# Example usage:\nimport os\n\nfrom clarifai.client import Model\nfrom clarifai.runners.utils import data_types\n\nmodel = Model(\n    "https://clarifai.com/<user-id>/local-runner-app/models/local-runner-model",\n    deployment_id=\'local-runner-deployment\',  # Only needed for dedicated deployed models\n    base_url="https://api.clarifai.com",\n)\n\n# Example model prediction from different model methods:\n\nresponse = model.predict(\n    text1="What is the future of AI?",\n)\nprint(response)\n\nresponse = model.generate(\n    text1="What is the future of AI?",\n)\nfor res in response:\n    print(res)\n\nresponse = model.stream(\n    input_iterator=iter([\'What is the future of AI?\']),\n)\n',u={description:"Run and test models locally, while exposing them through Clarifai\u2019s enterprise\u2011grade API"},h="Local Runners",p={},m=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Sign Up or Log In",id:"sign-up-or-log-in",level:3},{value:"Install Clarifai CLI",id:"install-clarifai-cli",level:3},{value:"Quick Start",id:"quick-start",level:2},{value:"Log in to Clarifai",id:"log-in-to-clarifai",level:3},{value:"Set up a Model",id:"set-up-a-model",level:3},{value:"Start Your Local Runner",id:"start-your-local-runner",level:3},{value:"Use Cases for Local Runners",id:"use-cases-for-local-runners",level:2},{value:"Step 1: Build a Model",id:"step-1-build-a-model",level:2},{value:"Step 2: Create a Context (Optional)",id:"step-2-create-a-context-optional",level:2},{value:"Step 3: Run Your Model",id:"step-3-run-your-model",level:2},{value:"Log in to Clarifai",id:"log-in-to-clarifai-1",level:3},{value:"Start Your Local Runner",id:"start-your-local-runner-1",level:3},{value:"Step 4: Test Your Runner",id:"step-4-test-your-runner",level:2},{value:"Additional Examples",id:"additional-examples",level:2}];function f(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,l.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"local-runners",children:"Local Runners"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Run and test models locally, while exposing them through Clarifai\u2019s enterprise\u2011grade API"})}),"\n",(0,o.jsx)("hr",{}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.a,{href:"https://www.clarifai.com/products/local-runners",children:"Local Runners"})," are a powerful feature that let you securely expose your locally running models or servers via a public URL, allowing you to quickly develop, test, and share any models running on your own hardware."]}),"\n",(0,o.jsx)(n.p,{children:"Instead of running solely in the cloud, you can run your models anywhere that supports Python and has an internet connection \u2014 whether it's your workstation or on-premise server."}),"\n",(0,o.jsx)(n.p,{children:"With Local Runners, you can connect your own models to Clarifai's compute plane. This seamless integration enables you to leverage the Clarifai cloud API, workflows, and other platform capabilities with your custom models."}),"\n",(0,o.jsx)(n.p,{children:"Your model can securely receive and process requests from anywhere, just as it would in a production cloud deployment."}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Note:"})," A runner is the actual running instance of your model. The number of Local Runners you can run on your machine depends on your ",(0,o.jsx)(n.a,{href:"https://www.clarifai.com/pricing",children:"pricing plan"}),"."]}),"\n"]}),"\n","\n","\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:" ",src:r(67399).A+"",width:"1448",height:"903"})}),"\n",(0,o.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,o.jsx)(n.h3,{id:"sign-up-or-log-in",children:"Sign Up or Log In"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.a,{href:"https://clarifai.com/login",children:"Log in to"})," your existing Clarifai account or ",(0,o.jsx)(n.a,{href:"https://clarifai.com/signup",children:"sign up"})," for a new one. Next, retrieve the following credentials required for setup:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"User ID"})," \u2013 In the collapsible left sidebar, select ",(0,o.jsx)(n.strong,{children:"Settings"})," and choose ",(0,o.jsx)(n.strong,{children:"Account"})," from the dropdown list. Then, locate your user ID."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Personal Access Token (PAT)"})," \u2013 From the same ",(0,o.jsx)(n.strong,{children:"Settings"})," option, choose ",(0,o.jsx)(n.strong,{children:"Secrets"})," to generate or copy your ",(0,o.jsx)(n.a,{href:"https://docs.clarifai.com/control/authentication/pat",children:"PAT"}),". This token is used to authenticate your connection with the Clarifai platform."]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"install-clarifai-cli",children:"Install Clarifai CLI"}),"\n",(0,o.jsxs)(n.p,{children:["Install the latest version of the ",(0,o.jsx)(n.a,{href:"https://docs.clarifai.com/sdk/cli",children:"Clarifai CLI"})," (version ",(0,o.jsx)(n.code,{children:"11.6.3"})," or higher) tool. It includes built-in support for Local Runners."]}),"\n",(0,o.jsx)(a.A,{groupId:"code",children:(0,o.jsx)(s.A,{value:"bash",label:"Bash",children:(0,o.jsx)(i.A,{className:"language-bash",children:"pip install --upgrade clarifai"})})}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Note:"})," You'll need ",(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.a,{href:"https://docs.clarifai.com/resources/api-overview/python-sdk#python-requirements",children:"Python 3.11 or 3.12"})})," installed to successfully run the Local Runners."]}),"\n"]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsxs)(n.admonition,{type:"note",children:[(0,o.jsx)(n.h2,{id:"quick-start",children:"Quick Start"}),(0,o.jsx)(n.p,{children:"Once you've completed the prerequisites above, run the following commands and follow the prompts in your terminal to quickly get started with Local Runners."}),(0,o.jsx)(n.h3,{id:"log-in-to-clarifai",children:"Log in to Clarifai"}),(0,o.jsxs)(n.p,{children:["Connect your environment to the Clarifai platform and ",(0,o.jsx)(n.a,{href:"#step-2-create-a-context-optional",children:"create a context"})," profile."]}),(0,o.jsx)(a.A,{groupId:"code",children:(0,o.jsx)(s.A,{value:"bash",label:"CLI",children:(0,o.jsx)(i.A,{className:"language-bash",children:"clarifai login"})})}),(0,o.jsx)(n.h3,{id:"set-up-a-model",children:"Set up a Model"}),(0,o.jsxs)(n.p,{children:["Generate a sample toy ",(0,o.jsx)(n.a,{href:"#step-1-build-a-model",children:"model"})," with the necessary files."]}),(0,o.jsx)(a.A,{groupId:"code",children:(0,o.jsx)(s.A,{value:"bash",label:"CLI",children:(0,o.jsx)(i.A,{className:"language-bash",children:"clarifai model init"})})}),(0,o.jsx)(n.h3,{id:"start-your-local-runner",children:"Start Your Local Runner"}),(0,o.jsxs)(n.p,{children:["Next, you'll connect your model to a public URL using Local Runners. The CLI will guide you through a series of confirmations for key objects on the Clarifai platform, such as compute clusters, nodepools, and deployments \u2014 which are described ",(0,o.jsx)(n.a,{href:"#table",children:"below"}),"."]}),(0,o.jsx)(n.p,{children:"Just review each prompt and confirm to proceed."}),(0,o.jsx)(a.A,{groupId:"code",children:(0,o.jsx)(s.A,{value:"bash",label:"CLI",children:(0,o.jsx)(i.A,{className:"language-bash",children:"clarifai model local-runner"})})}),(0,o.jsxs)(n.p,{children:["Once your runner launches successfully, your model will be running and accessible via a public URL. You can then open a new terminal, copy the sample code provided in the output, and ",(0,o.jsx)(n.a,{href:"#step-4-test-with-snippet",children:"test your model"}),"!"]})]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"use-cases-for-local-runners",children:"Use Cases for Local Runners"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Streamlined model development"})," \u2014 Local Runners make it easy to build and test new models directly within your local environment. You can spin up a runner on your machine, route API calls through our public cloud endpoint, and watch requests hit your model in real time. This allows you to debug, set breakpoints, return results, and validate outputs."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Leverage your own compute resources"})," \u2014 If you have powerful hardware, you can take advantage of that local compute without relying on Clarifai's ",(0,o.jsx)(n.a,{href:"https://docs.clarifai.com/compute/deployments/clusters-nodepools/#step-3-set-node-autoscaling-range",children:"autoscaling"})," infrastructure. Your model remains accessible through our API with full authentication, even though it runs locally."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Locally connect agents"})," \u2014 Because Local Runners execute on your chosen hardware, they can interact with local file systems, make OS-level calls, or access private data stores. With our ",(0,o.jsx)(n.a,{href:"https://docs.clarifai.com/compute/agents/mcp",children:"MCP (Model Context Protocol)"})," model type, you can give your cloud-hosted agents or any MCP-enabled clients authenticated access to your locally controlled information, regardless of their deployment location."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Run models anywhere"})," \u2014 Whether on a ",(0,o.jsx)(n.a,{href:"https://www.clarifai.com/blog/how-to-run-ai-models-locally-2025-tools-setup-tips",children:"local development machine"}),", an on-premises server, or a private cloud cluster, Local Runners seamlessly connect your models to our platform. This enables you to keep sensitive data and custom-built models securely within your own environment."]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"step-1-build-a-model",children:"Step 1: Build a Model"}),"\n",(0,o.jsx)(n.p,{children:"Start by building the model you want to run using Local Runners."}),"\n",(0,o.jsx)(n.p,{children:"You can either create a custom model from scratch or leverage pre-trained models from external sources like Hugging Face."}),"\n",(0,o.jsxs)(n.p,{children:["If you're building your own model, follow our comprehensive ",(0,o.jsx)(n.a,{href:"https://docs.clarifai.com/compute/models/model-upload/",children:"step-by-step"})," guide to get started."]}),"\n",(0,o.jsxs)(n.p,{children:["You can also explore our ",(0,o.jsx)(n.a,{href:"https://github.com/Clarifai/runners-examples",children:"examples repository"})," to see models built for compatibility with the Clarifai platform."]}),"\n",(0,o.jsx)(n.admonition,{title:"tip",type:"note",children:(0,o.jsxs)(n.p,{children:["You can automatically generate a default model by running the ",(0,o.jsx)(n.a,{href:"https://docs.clarifai.com/resources/api-overview/cli#clarifai-model-init",children:(0,o.jsx)(n.code,{children:"clarifai model init"})})," command in the terminal from your current directory. After the model's files are created, you can modify them as needed or go with the default options."]})}),"\n",(0,o.jsx)(n.h2,{id:"step-2-create-a-context-optional",children:"Step 2: Create a Context (Optional)"}),"\n",(0,o.jsxs)(n.p,{children:["Running the local development runner relies on certain variables defined in your current context. The ",(0,o.jsx)(n.em,{children:"context"})," refers to the active environment settings that determine how your commands interact with the Clarifai platform."]}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Note:"})," You can create this context using the provided default values when you run ",(0,o.jsx)(n.code,{children:"clarifai login"})," and ",(0,o.jsx)(n.code,{children:"local-runner"})," commands."]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"Any configurations you create locally \u2014 such as the computer cluster and app \u2014 will also be created on the Clarifai platform, making them reusable whenever you test your model with the local development runner."}),"\n",(0,o.jsx)(n.admonition,{type:"tip",children:(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.a,{href:"https://docs.clarifai.com/resources/api-overview/cli",children:"Click here"})," to learn how to create and manage various aspects of your Clarifai context, including switching contexts and editing your configuration information."]})}),"\n",(0,o.jsx)("a",{id:"table"}),"\n",(0,o.jsx)(n.p,{children:"These are the variables required to create a runner:"}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{children:"Variable"}),(0,o.jsx)(n.th,{children:"Description"})]})}),(0,o.jsxs)(n.tbody,{children:[(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"CLARIFAI_PAT"}),(0,o.jsx)(n.td,{children:"Personal Access Token (PAT) for authentication"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsxs)(n.td,{children:["CLARIFAI_USER_ID (",(0,o.jsx)(n.code,{children:"user_id"}),")"]}),(0,o.jsx)(n.td,{children:"User ID of the account owning the model"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsxs)(n.td,{children:["CLARIFAI_APP_ID (",(0,o.jsx)(n.code,{children:"app_id"}),")"]}),(0,o.jsx)(n.td,{children:"App ID containing the model"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsxs)(n.td,{children:["CLARIFAI_MODEL_ID  (",(0,o.jsx)(n.code,{children:"model_id"}),")"]}),(0,o.jsx)(n.td,{children:"The model ID for the model to be run locally"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsxs)(n.td,{children:["CLARIFAI_COMPUTE_CLUSTER_ID (",(0,o.jsx)(n.code,{children:"compute_cluster_id"}),")"]}),(0,o.jsxs)(n.td,{children:[(0,o.jsx)(n.a,{href:"https://docs.clarifai.com/compute/deployments/clusters-nodepools",children:"Compute cluster"})," where the Local Runner will reside. ",(0,o.jsxs)(n.em,{children:["Note that the ",(0,o.jsx)(n.code,{children:"user_id"})," of the compute cluster must match the ",(0,o.jsx)(n.code,{children:"user_id"})," of the model."]})]})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsxs)(n.td,{children:["CLARIFAI_NODEPOOL_ID (",(0,o.jsx)(n.code,{children:"nodepool_id"}),")"]}),(0,o.jsx)(n.td,{children:"Nodepool within the compute cluster"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsxs)(n.td,{children:["CLARIFAI_DEPLOYMENT (",(0,o.jsx)(n.code,{children:"deployment_id"}),")"]}),(0,o.jsxs)(n.td,{children:[(0,o.jsx)(n.a,{href:"https://docs.clarifai.com/compute/deployments/deploy-model",children:"Deployment"})," for a model into the cluster and nodepool"]})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsxs)(n.td,{children:["CLARIFAI_RUNNER_ID (",(0,o.jsx)(n.code,{children:"runner_id"}),")"]}),(0,o.jsx)(n.td,{children:"Auto-generated unique runner ID, created by the API and stored in the context"})]})]})]}),"\n",(0,o.jsxs)(n.admonition,{title:"important",type:"note",children:[(0,o.jsx)(n.p,{children:"The Clarifai CLI follows a defined order of precedence when launching Local Runners. If a value is set as an environment variable in your terminal, it takes priority and is used first.\nIf no corresponding environment variable is found, the CLI automatically falls back to the value defined in the active context."}),(0,o.jsx)(n.p,{children:"For example, you can override the model ID by setting it as an environment variable before starting the Local Runner:"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"export CLARIFAI_MODEL_ID=new-model-id\n"})}),(0,o.jsxs)(n.p,{children:["In this case, the ",(0,o.jsx)(n.code,{children:"CLARIFAI_MODEL_ID"})," from your terminal session will take precedence over the one stored in your active context."]})]}),"\n",(0,o.jsx)(n.h2,{id:"step-3-run-your-model",children:"Step 3: Run Your Model"}),"\n",(0,o.jsx)(n.p,{children:"To run your model with the local development runner, navigate to the directory where your custom model is located."}),"\n",(0,o.jsx)(n.p,{children:"Then, follow these steps."}),"\n",(0,o.jsx)(n.h3,{id:"log-in-to-clarifai-1",children:"Log in to Clarifai"}),"\n",(0,o.jsx)(n.p,{children:"Run the following command to log in to the Clarifai platform and establish a connection."}),"\n",(0,o.jsx)(a.A,{groupId:"code",children:(0,o.jsx)(s.A,{value:"bash",label:"CLI",children:(0,o.jsx)(i.A,{className:"language-bash",children:"clarifai login"})})}),"\n",(0,o.jsxs)(n.p,{children:["After running the ",(0,o.jsx)(n.code,{children:"login"})," command, you'll be prompted to enter the following details to authenticate your connection:"]}),"\n",(0,o.jsx)(a.A,{groupId:"code",children:(0,o.jsx)(s.A,{value:"bash",label:"CLI",children:(0,o.jsx)(i.A,{className:"language-bash",children:(0,o.jsx)(n.p,{children:'context name (default: "default"):\nuser id:\npersonal access token value (default: "ENVVAR" to get our env var rather than config):'})})})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Context name"}),' \u2014 You can provide a custom name for your Clarifai configuration context, or simply press Enter to use the default name, "default". This helps you manage different configurations if needed.']}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"User ID"})," \u2014  Enter your Clarifai user ID."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"PAT"})," \u2014 Enter your Clarifai ",(0,o.jsx)(n.a,{href:"#get-a-pat-key-and-user-id",children:"PAT"}),". Note that if you press Enter, and you have set the ",(0,o.jsx)(n.code,{children:"CLARIFAI_PAT"})," environment variable, it will use that token automatically."]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"start-your-local-runner-1",children:"Start Your Local Runner"}),"\n",(0,o.jsx)(n.p,{children:"Next, start a local development runner."}),"\n",(0,o.jsx)(a.A,{groupId:"code",children:(0,o.jsx)(s.A,{value:"bash",label:"CLI",children:(0,o.jsx)(i.A,{className:"language-bash",children:"clarifai model local-runner"})})}),"\n",(0,o.jsx)(n.p,{children:"Or:"}),"\n",(0,o.jsx)(a.A,{groupId:"code",children:(0,o.jsx)(s.A,{value:"bash",label:"CLI",children:(0,o.jsx)(i.A,{className:"language-bash",children:"clarifai model local-runner [OPTIONS] [MODEL_PATH]"})})}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"--pool_size"})," is an integer option that sets the number of threads used to handle inference requests (default is 32). Increasing the pool size enables more requests to be processed in parallel, which can speed up testing and throughput. However, on the Community plan, your compute time allocation is consumed faster when you increase the number of threads, since usage is billed in proportion to the thread count."]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"--verbose"})," option enables detailed display of logs for troubleshooting issues, especially when running an ",(0,o.jsx)(n.a,{href:"https://docs.clarifai.com/compute/local-runners/ollama/#step-4-start-your-local-runner",children:"Ollama server"}),"."]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"MODEL_PATH"})," is an optional path to the model directory. If omitted, the current directory is used by default."]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)("br",{}),"\n",(0,o.jsxs)(n.p,{children:["If the runner doesn't detect the necessary ",(0,o.jsx)(n.a,{href:"#step-2-create-a-context-optional",children:"context configurations"})," in your environment, it will prompt you to create them using default values."]}),"\n",(0,o.jsx)(n.p,{children:"This ensures that all essential components required for Local Runners are properly set up or included in your configuration context, including:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"A compute cluster and nodepool configured for Local Runners."}),"\n"]}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Note:"})," This cluster is created exclusively for Local Runners. It is not designed to support other tasks and lacks features like autoscaling to handle variable traffic demands, among other cloud-specific capabilities. You also cannot use other types of clusters for Local Runners \u2014 only the special cluster created for this purpose is supported."]}),"\n"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"An app with a model and model version representing the local runner."}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"A deployment that places the model version into the designated nodepool."}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(t,{children:[(0,o.jsx)("summary",{children:"Example Output"}),(0,o.jsx)(i.A,{className:"language-text",children:c})]}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Note:"})," If the ",(0,o.jsx)(n.a,{href:"https://docs.clarifai.com/compute/models/upload/#step-2-prepare-the-configyaml-file",children:(0,o.jsx)(n.code,{children:"config.yaml"})})," file does not contain model information that matches the ",(0,o.jsx)(n.code,{children:"user_id"}),", ",(0,o.jsx)(n.code,{children:"app_id"}),", and ",(0,o.jsx)(n.code,{children:"model_id"})," defined in your current context, it will be automatically updated to include the new model details. This ensures that the model started by the local development runner is the same one you intend to call via the API. If needed, you can back up the existing ",(0,o.jsx)(n.code,{children:"config.yaml"})," file as ",(0,o.jsx)(n.code,{children:"config.yaml.bk"}),"."]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"step-4-test-your-runner",children:"Step 4: Test Your Runner"}),"\n",(0,o.jsxs)(n.p,{children:["When the local development runner starts in your terminal, it automatically generates an example client code snippet based on the ",(0,o.jsx)(n.a,{href:"https://docs.clarifai.com/compute/inference/#structure-of-prediction-methods",children:"model's signature"}),"."]}),"\n",(0,o.jsx)(n.p,{children:"You can run this snippet in a separate terminal (within the same directory) to receive the model\u2019s response output."}),"\n",(0,o.jsxs)(t,{children:[(0,o.jsx)("summary",{children:"Example Code Snippet"}),(0,o.jsx)(i.A,{className:"language-text",children:d})]}),"\n",(0,o.jsxs)(n.p,{children:["The terminal also displays a link to the ",(0,o.jsx)(n.a,{href:"https://docs.clarifai.com/getting-started/quickstart-playground",children:"AI Playground"}),", which you can copy and use to interact with the model directly."]}),"\n",(0,o.jsxs)(n.p,{children:["Alternatively, while the runner is active in your terminal, you can open the ",(0,o.jsx)(n.a,{href:"https://clarifai.com/compute/runners",children:(0,o.jsx)(n.strong,{children:"Runners"})})," dashboard on the Clarifai platform, find your runner in the table, click the three-dot menu, and select ",(0,o.jsx)(n.strong,{children:"Open in Playground"})," to chat with the model."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{src:r(45903).A+"",width:"4200",height:"1716"})}),"\n",(0,o.jsx)(n.p,{children:"When you\u2019re done testing, simply close the terminal running the local development runner to shut it down."}),"\n",(0,o.jsx)(n.h2,{id:"additional-examples",children:"Additional Examples"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://github.com/Clarifai/runners-examples/tree/main/hello-world",children:"Simple example for running Hello World model locally with Clarifai\u2019s Local Runners"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://www.youtube.com/watch?v=JOdtZDmCFfk",children:"YouTube video on how to build your own local AI agent using Clarifai\u2019s Local Runners"})}),"\n"]})]})}function x(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(f,{...e})}):f(e)}}}]);
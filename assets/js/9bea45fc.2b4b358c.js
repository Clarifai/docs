"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[9047],{58215:function(n,e,t){var a=t(67294);e.Z=function(n){var e=n.children,t=n.hidden,s=n.className;return a.createElement("div",{role:"tabpanel",hidden:t,className:s},e)}},26396:function(n,e,t){t.d(e,{Z:function(){return d}});var a=t(87462),s=t(67294),i=t(72389),o=t(79443);var c=function(){var n=(0,s.useContext)(o.Z);if(null==n)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return n},r=t(63616),p=t(86010),l="tabItem_vU9c";function u(n){var e,t,i,o=n.lazy,u=n.block,d=n.defaultValue,h=n.values,_=n.groupId,m=n.className,E=s.Children.map(n.children,(function(n){if((0,s.isValidElement)(n)&&void 0!==n.props.value)return n;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof n.type?n.type:n.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),C=null!=h?h:E.map((function(n){var e=n.props;return{value:e.value,label:e.label,attributes:e.attributes}})),T=(0,r.lx)(C,(function(n,e){return n.value===e.value}));if(T.length>0)throw new Error('Docusaurus error: Duplicate values "'+T.map((function(n){return n.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var g=null===d?d:null!=(e=null!=d?d:null==(t=E.find((function(n){return n.props.default})))?void 0:t.props.value)?e:null==(i=E[0])?void 0:i.props.value;if(null!==g&&!C.some((function(n){return n.value===g})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+g+'" but none of its children has the corresponding value. Available values are: '+C.map((function(n){return n.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var f=c(),I=f.tabGroupChoices,N=f.setTabGroupChoices,P=(0,s.useState)(g),A=P[0],b=P[1],O=[],v=(0,r.o5)().blockElementScrollPositionUntilNextRender;if(null!=_){var S=I[_];null!=S&&S!==A&&C.some((function(n){return n.value===S}))&&b(S)}var D=function(n){var e=n.currentTarget,t=O.indexOf(e),a=C[t].value;a!==A&&(v(e),b(a),null!=_&&N(_,a))},R=function(n){var e,t=null;switch(n.key){case"ArrowRight":var a=O.indexOf(n.currentTarget)+1;t=O[a]||O[0];break;case"ArrowLeft":var s=O.indexOf(n.currentTarget)-1;t=O[s]||O[O.length-1]}null==(e=t)||e.focus()};return s.createElement("div",{className:"tabs-container"},s.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,p.Z)("tabs",{"tabs--block":u},m)},C.map((function(n){var e=n.value,t=n.label,i=n.attributes;return s.createElement("li",(0,a.Z)({role:"tab",tabIndex:A===e?0:-1,"aria-selected":A===e,key:e,ref:function(n){return O.push(n)},onKeyDown:R,onFocus:D,onClick:D},i,{className:(0,p.Z)("tabs__item",l,null==i?void 0:i.className,{"tabs__item--active":A===e})}),null!=t?t:e)}))),o?(0,s.cloneElement)(E.filter((function(n){return n.props.value===A}))[0],{className:"margin-vert--md"}):s.createElement("div",{className:"margin-vert--md"},E.map((function(n,e){return(0,s.cloneElement)(n,{key:e,hidden:n.props.value!==A})}))))}function d(n){var e=(0,i.Z)();return s.createElement(u,(0,a.Z)({key:String(e)},n))}},91616:function(n,e,t){t.r(e),t.d(e,{contentTitle:function(){return u},default:function(){return m},frontMatter:function(){return l},metadata:function(){return d},toc:function(){return h}});var a=t(87462),s=t(63366),i=(t(67294),t(3905)),o=t(26396),c=t(58215),r=t(19055),p=["components"],l={description:"Manage your concepts.",sidebar_position:1},u="Create, Get, Update, Delete",d={unversionedId:"api-guide/concepts/create-get-update",id:"api-guide/concepts/create-get-update",title:"Create, Get, Update, Delete",description:"Manage your concepts.",source:"@site/docs/api-guide/concepts/create-get-update.md",sourceDirName:"api-guide/concepts",slug:"/api-guide/concepts/create-get-update",permalink:"/api-guide/concepts/create-get-update",tags:[],version:"current",sidebarPosition:1,frontMatter:{description:"Manage your concepts.",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Creating and Managing Concepts",permalink:"/api-guide/concepts/"},next:{title:"Languages",permalink:"/api-guide/concepts/languages"}},h=[{value:"Create",id:"create",children:[{value:"Add Concepts",id:"add-concepts",children:[],level:3}],level:2},{value:"Get",id:"get",children:[{value:"Get Concept by ID",id:"get-concept-by-id",children:[],level:3},{value:"List Concepts",id:"list-concepts",children:[],level:3}],level:2},{value:"Update",id:"update",children:[{value:"Update Concept Name",id:"update-concept-name",children:[],level:3}],level:2}],_={toc:h};function m(n){var e=n.components,t=(0,s.Z)(n,p);return(0,i.kt)("wrapper",(0,a.Z)({},_,t,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"create-get-update-delete"},"Create, Get, Update, Delete"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Manage your concepts")),(0,i.kt)("hr",null),(0,i.kt)("p",null,"Within your app, you can create concepts, modify them after creation, and get them from your app. "),(0,i.kt)("div",{className:"admonition admonition-important alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"important")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"We currently do not support deleting concepts since they have such an integral tie across almost all other data structures in the platform, like inputs, models, searches, etc."))),(0,i.kt)("p",null,"You will find that some of our endpoints have additional information returned from the clarifai/main app, which contains our pre-trained models and a large knowledge graph we've assembled over the years."),(0,i.kt)("h2",{id:"create"},"Create"),(0,i.kt)("h3",{id:"add-concepts"},"Add Concepts"),(0,i.kt)("p",null,"To create a new concept in you app, you POST the concept with an id and name. You can also post more than one concept in the same API by sending a list of concepts."),(0,i.kt)("p",null,"Below is an example of how to add concepts.  "),(0,i.kt)("p",null,"Note that the initialization code used here is outlined in detail on the ",(0,i.kt)("a",{parentName:"p",href:"https://docs.clarifai.com/api-guide/api-overview/api-clients/#client-installation-instructions"},"client installation page.")),(0,i.kt)(o.Z,{mdxType:"Tabs"},(0,i.kt)(c.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,i.kt)(r.Z,{className:"language-python",mdxType:"CodeBlock"},"################################################################################\n# In this section, we set the user authentication, app ID, concept ID and name.\n# Change these strings to run your own example.\n################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to whatever concepts you want to process\nCONCEPT_ID = 'cat'\nCONCEPT_NAME = 'Cat Name'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\npost_concepts_response = stub.PostConcepts(\n    service_pb2.PostConceptsRequest(\n        user_app_id=userDataObject,\n        concepts=[resources_pb2.Concept(id=CONCEPT_ID, name=CONCEPT_NAME)]\n    ),\n    metadata=metadata\n)\n\nif post_concepts_response.status.code != status_code_pb2.SUCCESS:\n    print(post_concepts_response.status)\n    raise Exception(\"Post concept failed, status: \" + post_concepts_response.status.description)\n    \nprint(post_concepts_response)")),(0,i.kt)(c.Z,{value:"js_rest",label:"JavaScript (REST)",mdxType:"TabItem"},(0,i.kt)(r.Z,{className:"language-javascript",mdxType:"CodeBlock"},"\x3c!--index.html file--\x3e\n\n<script>\n    ////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, concept ID and name.\n    // Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = 'YOUR_USER_ID_HERE';\n    // Your PAT (Personal Access Token) can be found in the portal under Authentification\n    const PAT = 'YOUR_PAT_HERE';\n    const APP_ID = 'YOUR_APP_ID_HERE';\n    // Change these to whatever concepts you want to process\n    const CONCEPT_ID = 'cat';\n    const CONCEPT_NAME = 'Cat Name';\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        \"user_app_id\": {\n            \"user_id\": USER_ID,\n            \"app_id\": APP_ID\n        },\n        \"concepts\": [\n            {\n                \"id\": CONCEPT_ID,\n                \"name\": CONCEPT_NAME\n            }\n        ]\n    });\n\n    const requestOptions = {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        },\n        body: raw\n    };\n\n    fetch(\"https://api.clarifai.com/v2/concepts\", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n<\/script>")),(0,i.kt)(c.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,i.kt)(r.Z,{className:"language-javascript",mdxType:"CodeBlock"},'//index.js file\n\n////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, concept ID and name.\n// Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n// Change these to whatever concepts you want to process\nconst CONCEPT_ID = \'cat\';\nconst CONCEPT_NAME = \'Cat Name\';\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PostConcepts(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        concepts: [{ id: CONCEPT_ID, name: CONCEPT_NAME }]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post concepts failed, status: " + response.status.description);\n        }\n    }\n);')),(0,i.kt)(c.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)(r.Z,{className:"language-java",mdxType:"CodeBlock"},'package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\t\n\t///////////////////////////////////////////////////////////////////////////////////\n\t// In this section, we set the user authentication, app ID, concept ID and name.\n\t// Change these strings to run your own example.\n\t///////////////////////////////////////////////////////////////////////////////////\n\t\n        static final String USER_ID = "YOUR_USER_ID_HERE";\n        //Your PAT (Personal Access Token) can be found in the portal under Authentication\n        static final String PAT = "YOUR_PAT_HERE";\n        static final String APP_ID = "YOUR_APP_ID_HERE";\t\n        // Change these to whatever concepts you want to process\n        static final String CONCEPT_ID = "charlie";\n        static final String CONCEPT_NAME = "Charlie Name";\n\xa0 \xa0 \t\t\n\t///////////////////////////////////////////////////////////////////////////////////\n\t// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n\t///////////////////////////////////////////////////////////////////////////////////\t\n\n\tpublic static void main(String[] args) {\n\t\t\n\t\tV2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n\t\t\t \xa0 \xa0.withCallCredentials(new ClarifaiCallCredentials(PAT));\t\n\t\n\t\tMultiConceptResponse postConceptsResponse = stub.postConcepts(\n\t\t \xa0 \xa0PostConceptsRequest.newBuilder()\n\t\t \xa0 \xa0\t.setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n\t\t \xa0 \xa0 \xa0 \xa0.addConcepts(Concept.newBuilder().setId(CONCEPT_ID).setName(CONCEPT_NAME))\n\t\t \xa0 \xa0 \xa0 \xa0.build()\n\t\t);\n\n\t\tif (postConceptsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n\t\t \xa0 \xa0throw new RuntimeException("Post concepts failed, status: " + postConceptsResponse.getStatus());\n\t\t}\t\n\t\n\t}\n\t\n}')),(0,i.kt)(c.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'\n  {\n    "concepts": [\n      {\n        "id": "{concept_id}",\n        "name": "{new_concept_name}"\n      }\n      ]\n  }\'\\\n  https://api.clarifai.com/v2/concepts\n')))),(0,i.kt)("details",null,(0,i.kt)("summary",null,"JSON Output Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'status {\n  code: SUCCESS\n  description: "Ok"\n  req_id: "9852fce206578f4bc5b6bed38f03eed8"\n}\nconcepts {\n  id: "cat"\n  name: "Cat Name"\n  value: 1.0\n  created_at {\n    seconds: 1643890626\n    nanos: 775078265\n  }\n  language: "en"\n  app_id: "a39423543bb941bf9ba2ee95fad11f0a"\n  visibility {\n    gettable: PRIVATE\n  }\n  user_id: "ei2l2oz3s3iz"\n}\n'))),(0,i.kt)("h2",{id:"get"},"Get"),(0,i.kt)("h3",{id:"get-concept-by-id"},"Get Concept by ID"),(0,i.kt)("p",null,"Below is an example of how to get a single concept by its ID."),(0,i.kt)("p",null,"Note that the initialization code used here is outlined in detail on the ",(0,i.kt)("a",{parentName:"p",href:"https://docs.clarifai.com/api-guide/api-overview/api-clients/#client-installation-instructions"},"client installation page.")),(0,i.kt)(o.Z,{mdxType:"Tabs"},(0,i.kt)(c.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,i.kt)(r.Z,{className:"language-python",mdxType:"CodeBlock"},"###########################################################################\n# In this section, we set the user authentication, app ID, and concept ID.\n# Change these strings to run your own example.\n###########################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change this to whatever concept you want to retrieve\nCONCEPT_ID = 'cat'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\nget_concepts_response = stub.GetConcept(\n    service_pb2.GetConceptRequest(\n        user_app_id=userDataObject,\n        concept_id=CONCEPT_ID\n    ),\n    metadata=metadata\n)\n\nif get_concepts_response.status.code != status_code_pb2.SUCCESS:\n    print(get_concepts_response.status)\n    raise Exception(\"Get concept failed, status: \" + get_concepts_response.status.description)\n    \nprint(get_concepts_response)")),(0,i.kt)(c.Z,{value:"js_rest",label:"JavaScript (REST)",mdxType:"TabItem"},(0,i.kt)(r.Z,{className:"language-javascript",mdxType:"CodeBlock"},"\x3c!--index.html file--\x3e\n\n<script>\n    ////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and concept ID.\n    // Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////////////////////\n\n    //Your PAT (Personal Access Token) can be found in the portal under Authentification\n    const PAT = 'YOUR_PAT_HERE';\n    const APP_ID = 'YOUR_APP_ID_HERE';\n    // Change these to whatever concepts you want to process\n    const CONCEPT_ID = 'cat';\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const requestOptions = {\n        method: 'GET',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        },\n    };\n\n    fetch(\"https://api.clarifai.com/v2/users/me/apps/\" + APP_ID + \"/concepts/\" + CONCEPT_ID, requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n<\/script>")),(0,i.kt)(c.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,i.kt)(r.Z,{className:"language-javascript",mdxType:"CodeBlock"},'//index.js file\n\n///////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and concept ID.\n// Change these strings to run your own example.\n///////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n// Change these to whatever concepts you want to process\nconst CONCEPT_ID = \'cat\';\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.GetConcept(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        concept_id: CONCEPT_ID\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Get concepts failed, status: " + response.status.description);\n        }\n\n        const concept = response.concept;\n        console.log(JSON.stringify(concept, null, 2));\n    }\n);')),(0,i.kt)(c.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)(r.Z,{className:"language-java",mdxType:"CodeBlock"},'package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n\t///////////////////////////////////////////////////////////////////////////////////\n\t// In this section, we set the user authentication, app ID, and concept ID.\n\t// Change these strings to run your own example.\n\t///////////////////////////////////////////////////////////////////////////////////\n\t\n        static final String USER_ID = "YOUR_USER_ID_HERE";\n    \xa0 \xa0 //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    \xa0 \xa0 static final String PAT = "YOUR_PAT_HERE";\n    \xa0 \xa0 static final String APP_ID = "YOUR_APP_ID_HERE";\t\n    \xa0 \xa0 // Change this to whatever concept you want to retrieve\n    \xa0 \xa0 static final String CONCEPT_ID = "charlie";\n\xa0 \xa0 \t\t\n\t///////////////////////////////////////////////////////////////////////////////////\n\t// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n\t///////////////////////////////////////////////////////////////////////////////////\t\n\n\tpublic static void main(String[] args) {\n\t\t\n\t\tV2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n\t\t\t \xa0 \xa0.withCallCredentials(new ClarifaiCallCredentials(PAT));\t\n\t\t\n\t\tSingleConceptResponse getConceptResponse = stub.getConcept(\n\t\t \xa0 \xa0GetConceptRequest.newBuilder()\n\t\t \xa0 \xa0 \xa0 \xa0.setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n\t\t \xa0 \xa0 \xa0 \xa0.setConceptId(CONCEPT_ID)\n\t\t \xa0 \xa0 \xa0 \xa0.build()\n\t\t);\n\n\t\tif (getConceptResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n\t\t \xa0 \xa0throw new RuntimeException("Get concepts failed, status: " + getConceptResponse.getStatus());\n\t\t}\n\t\t\n\t\tConcept concept = getConceptResponse.getConcept();\n\xa0 \xa0 \xa0 \xa0 System.out.println(concept);\n\t\n\t}\n\t\n}')),(0,i.kt)(c.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X GET \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  https://api.clarifai.com/v2/concepts/{concept_id}\n')))),(0,i.kt)("details",null,(0,i.kt)("summary",null,"JSON Output Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'status {\n  code: SUCCESS\n  description: "Ok"\n  req_id: "240b8fa082722b0f137c09ec5141cfa3"\n}\nconcept {\n  id: "cat"\n  name: "Cat Name"\n  value: 1.0\n  created_at {\n    seconds: 1643890626\n    nanos: 775078000\n  }\n  language: "en"\n  app_id: "a39423543bb941bf9ba2ee95fad11f0a"\n  visibility {\n    gettable: PRIVATE\n  }\n  user_id: "ei2l2oz3s3iz"\n}\n'))),(0,i.kt)("h3",{id:"list-concepts"},"List Concepts"),(0,i.kt)("p",null,"You can get a list of concepts within your app with a GET call. This call supports ",(0,i.kt)("a",{parentName:"p",href:"https://docs.clarifai.com/api-guide/advanced-topics/pagination/"},"pagination")),(0,i.kt)("p",null,"Below is an example of how to list concepts. "),(0,i.kt)("p",null,"Note that the initialization code used here is outlined in detail on the ",(0,i.kt)("a",{parentName:"p",href:"https://docs.clarifai.com/api-guide/api-overview/api-clients/#client-installation-instructions"},"client installation page.")),(0,i.kt)(o.Z,{mdxType:"Tabs"},(0,i.kt)(c.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,i.kt)(r.Z,{className:"language-python",mdxType:"CodeBlock"},"###########################################################################\n# In this section, we set the user authentication. \n# Change these strings to run your own example.\n###########################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\nlist_concepts_response = stub.ListConcepts(\n    service_pb2.ListConceptsRequest(user_app_id=userDataObject),    \n    metadata=metadata\n)\n\nif list_concepts_response.status.code != status_code_pb2.SUCCESS:\n    print(list_concepts_response.status)\n    raise Exception(\"List concept failed, status: \" + list_concepts_response.status.description)\n    \nprint(list_concepts_response)")),(0,i.kt)(c.Z,{value:"js_rest",label:"JavaScript (REST)",mdxType:"TabItem"},(0,i.kt)(r.Z,{className:"language-javascript",mdxType:"CodeBlock"},"\x3c!--index.html file--\x3e\n\n<script>\n    ////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication. \n    // Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////\n\n    const APP_ID = 'YOUR_APP_ID_HERE';\n    const PAT = 'YOUR_PAT_HERE';\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const requestOptions = {\n        method: 'GET',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        },\n    };\n\n    fetch(\"https://api.clarifai.com/v2/users/me/apps/\" + APP_ID + \"/concepts\", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n<\/script>")),(0,i.kt)(c.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,i.kt)(r.Z,{className:"language-javascript",mdxType:"CodeBlock"},'//index.js file\n\n////////////////////////////////////////////////////////\n// In this section, we set the user authentication. \n// Change these strings to run your own example.\n////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.ListConcepts(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("List concepts failed, status: " + response.status.description);\n        }\n        for (const concepts of response.concepts) {\n            console.log(concepts)\n        }\n    }\n);')),(0,i.kt)(c.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)(r.Z,{className:"language-java",mdxType:"CodeBlock"},'package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n\t///////////////////////////////////////////////////////////\n\t// In this section, we set the user authentication. \n\t// Change these strings to run your own example.\n\t///////////////////////////////////////////////////////////\n\t\n        static final String USER_ID = "YOUR_USER_ID_HERE";\n    \xa0 \xa0 //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    \xa0 \xa0 static final String PAT = "YOUR_PAT_HERE";\n    \xa0 \xa0 static final String APP_ID = "YOUR_APP_ID_HERE";\t\n    \xa0 \xa0 \xa0 \xa0 \t\t\n\t///////////////////////////////////////////////////////////////////////////////////\n\t// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n\t///////////////////////////////////////////////////////////////////////////////////\t\n\n\tpublic static void main(String[] args) {\n\t\t\n\t\tV2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n\t\t\t \xa0 \xa0.withCallCredentials(new ClarifaiCallCredentials(PAT));\t\n\t\t\n\t\tMultiConceptResponse listConceptsResponse = stub.listConcepts(\n\t\t \xa0 \xa0ListConceptsRequest.newBuilder()\n\t\t \xa0 \xa0\t.setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\t\n\t\t \xa0 \xa0 \xa0 \xa0.build()\n\t\t);\n\n\t\tif (listConceptsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n\t\t \xa0 \xa0throw new RuntimeException("List concepts failed, status: " + listConceptsResponse.getStatus());\n\t\t}\n\t\t\n\t\tfor (Concept concept : listConceptsResponse.getConceptsList()) {\n\xa0 \xa0 \xa0 \xa0 \xa0 \xa0         System.out.println(concept);\n\t\t}\n\t\t\n\t}\n\t\n}')),(0,i.kt)(c.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X GET \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  https://api.clarifai.com/v2/concepts\n')))),(0,i.kt)("details",null,(0,i.kt)("summary",null,"JSON Output Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'status {\n  code: SUCCESS\n  description: "Ok"\n  req_id: "1155d18c386559cfdaa22274a0531d9f"\n}\nconcepts {\n  id: "cat"\n  name: "Cat Name"\n  value: 1.0\n  created_at {\n    seconds: 1643890626\n    nanos: 775078000\n  }\n  language: "en"\n  app_id: "a39423543bb941bf9ba2ee95fad11f0a"\n  visibility {\n    gettable: PRIVATE\n  }\n  user_id: "ei2leoz3s3iy"\n}\nconcepts {\n  id: "charlie"\n  name: "Charlie Name"\n  value: 1.0\n  created_at {\n    seconds: 1643865054\n    nanos: 92351000\n  }\n  language: "en"\n  app_id: "a39423543bb941bf9ba2ee95fad11f0a"\n  visibility {\n    gettable: PRIVATE\n  }\n  user_id: "ei2l2oz3s3iz"\n}\n'))),(0,i.kt)("h2",{id:"update"},"Update"),(0,i.kt)("h3",{id:"update-concept-name"},"Update Concept Name"),(0,i.kt)("p",null,'Below is an example of how to update a concept\'s name given its id by using the "overwrite" action. You can also patch multiple concepts by sending a list of concepts.'),(0,i.kt)("p",null,"Note that the initialization code used here is outlined in detail on the ",(0,i.kt)("a",{parentName:"p",href:"https://docs.clarifai.com/api-guide/api-overview/api-clients/#client-installation-instructions"},"client installation page.")),(0,i.kt)(o.Z,{mdxType:"Tabs"},(0,i.kt)(c.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,i.kt)(r.Z,{className:"language-python",mdxType:"CodeBlock"},"################################################################################\n# In this section, we set the user authentication, app ID, concept ID and name.\n# Change these strings to run your own example.\n################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to whatever concept you want to update\nCONCEPT_ID = 'cat'\nCONCEPT_NAME = 'New Cat Name'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\npatch_concepts_response = stub.PatchConcepts(\n    service_pb2.PatchConceptsRequest(\n        user_app_id=userDataObject,\n        action=\"overwrite\",  # The only supported action right now is overwrite\n        concepts=[resources_pb2.Concept(id=CONCEPT_ID, name=CONCEPT_NAME)]\n    ),\n    metadata=metadata\n)\n\nif patch_concepts_response.status.code != status_code_pb2.SUCCESS:\n    print(patch_concepts_response.status)\n    raise Exception(\"Patch concept failed, status: \" + patch_concepts_response.status.description)\n    \nprint(patch_concepts_response)")),(0,i.kt)(c.Z,{value:"js_rest",label:"JavaScript (REST)",mdxType:"TabItem"},(0,i.kt)(r.Z,{className:"language-javascript",mdxType:"CodeBlock"},"\x3c!--index.html file--\x3e\n\n<script>\n    ////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, concept ID and name.\n    // Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = 'YOUR_USER_ID_HERE';\n    // Your PAT (Personal Access Token) can be found in the portal under Authentification\n    const PAT = 'YOUR_PAT_HERE';\n    const APP_ID = 'YOUR_APP_ID_HERE';\n    // Change these to whatever concepts you want to process\n    const CONCEPT_ID = 'charlie';\n    const CONCEPT_NAME = 'Charlie Name';\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        \"user_app_id\": {\n            \"user_id\": USER_ID,\n            \"app_id\": APP_ID\n        },\n        \"concepts\": [\n            {\n                \"id\": CONCEPT_ID,\n                \"name\": CONCEPT_NAME\n            }\n        ],\n        \"action\": \"overwrite\"\n    });\n\n    const requestOptions = {\n        method: 'PATCH',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        },\n        body: raw\n    };\n\n    fetch(\"https://api.clarifai.com/v2/concepts\", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n<\/script>")),(0,i.kt)(c.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,i.kt)(r.Z,{className:"language-javascript",mdxType:"CodeBlock"},'//index.js file\n\n////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, concept ID and name.\n// Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n// Change these to whatever concepts you want to process\nconst CONCEPT_ID = \'charlie\';\nconst CONCEPT_NAME = \'Charlie Name\';\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PatchConcepts(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        action: "overwrite",  // The only supported action right now is overwrite\n        concepts: [{ id: CONCEPT_ID, name: CONCEPT_NAME }]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Patch concepts failed, status: " + response.status.description);\n        }\n    }\n);')),(0,i.kt)(c.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)(r.Z,{className:"language-java",mdxType:"CodeBlock"},'package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n\t///////////////////////////////////////////////////////////////////////////////////\n\t// In this section, we set the user authentication, app ID, concept ID and name.\n\t// Change these strings to run your own example.\n\t//////////////////////////////////////////////////////////////////////////////////\n\t\n        static final String USER_ID = "YOUR_USER_ID_HERE";\n        //Your PAT (Personal Access Token) can be found in the portal under Authentication\n        static final String PAT = "YOUR_PAT_HERE";\n    \xa0 \xa0 static final String APP_ID = "YOUR_APP_ID_HERE";\t\n    \xa0 \xa0 // Change these to whatever concept you want to update\n    \xa0 \xa0 static final String CONCEPT_ID = "charlie";\n        static final String CONCEPT_NAME = "Charlie Name";\n\xa0 \xa0 \xa0 \xa0 \t\t\n\t///////////////////////////////////////////////////////////////////////////////////\n\t// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n\t///////////////////////////////////////////////////////////////////////////////////\t\n\n\tpublic static void main(String[] args) {\n\t\t\n\t\tV2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n\t\t\t \xa0 \xa0.withCallCredentials(new ClarifaiCallCredentials(PAT));\t\n\t\t\n\t\tMultiConceptResponse patchConceptsResponse = stub.patchConcepts(\n\t\t \xa0 \xa0PatchConceptsRequest.newBuilder()\n\t\t \xa0 \xa0\t.setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n\t\t \xa0 \xa0 \xa0 \xa0.setAction("overwrite") \xa0// The only supported action right now is overwrite\n\t\t \xa0 \xa0 \xa0 \xa0.addConcepts(Concept.newBuilder().setId(CONCEPT_ID).setName(CONCEPT_NAME))\n\t\t \xa0 \xa0 \xa0 \xa0.build()\n\t\t);\n\n\t\tif (patchConceptsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n\t\t \xa0 \xa0throw new RuntimeException("Patch concepts failed, status: " + patchConceptsResponse.getStatus());\n\t\t}\n\t\n\t}\n\t\n}')),(0,i.kt)(c.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X PATCH \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'\n  {\n    "concepts": [\n      {\n        "id": "charlie",\n        "name": "Charlie Name"\n      }\n      ],\n    "action": "overwrite"\n  }\'\\\n  https://api.clarifai.com/v2/concepts\n')))),(0,i.kt)("details",null,(0,i.kt)("summary",null,"JSON Output Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'status {\n  code: SUCCESS\n  description: "Ok"\n  req_id: "67ba891f905e081690e4e94522fc21c7"\n}\nconcepts {\n  id: "cat"\n  name: "New Cat Name"\n  value: 1.0\n  created_at {\n    seconds: 1643897414\n    nanos: 497920914\n  }\n  language: "en"\n  app_id: "a39423543bb941bf9ba2ee95fad11f0a"\n  user_id: "ei2l2oz3s3iz"\n}\n'))))}m.isMDXComponent=!0}}]);
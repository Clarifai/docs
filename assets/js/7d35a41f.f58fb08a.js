"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[440],{15680:(n,e,r)=>{r.d(e,{xA:()=>g,yg:()=>d});var t=r(96540);function i(n,e,r){return e in n?Object.defineProperty(n,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):n[e]=r,n}function o(n,e){var r=Object.keys(n);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(n);e&&(t=t.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),r.push.apply(r,t)}return r}function a(n){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?o(Object(r),!0).forEach((function(e){i(n,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(r,e))}))}return n}function s(n,e){if(null==n)return{};var r,t,i=function(n,e){if(null==n)return{};var r,t,i={},o=Object.keys(n);for(t=0;t<o.length;t++)r=o[t],e.indexOf(r)>=0||(i[r]=n[r]);return i}(n,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(t=0;t<o.length;t++)r=o[t],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(n,r)&&(i[r]=n[r])}return i}var c=t.createContext({}),u=function(n){var e=t.useContext(c),r=e;return n&&(r="function"==typeof n?n(e):a(a({},e),n)),r},g=function(n){var e=u(n.components);return t.createElement(c.Provider,{value:e},n.children)},l="mdxType",f={inlineCode:"code",wrapper:function(n){var e=n.children;return t.createElement(t.Fragment,{},e)}},p=t.forwardRef((function(n,e){var r=n.components,i=n.mdxType,o=n.originalType,c=n.parentName,g=s(n,["components","mdxType","originalType","parentName"]),l=u(r),p=i,d=l["".concat(c,".").concat(p)]||l[p]||f[p]||o;return r?t.createElement(d,a(a({ref:e},g),{},{components:r})):t.createElement(d,a({ref:e},g))}));function d(n,e){var r=arguments,i=e&&e.mdxType;if("string"==typeof n||i){var o=r.length,a=new Array(o);a[0]=p;var s={};for(var c in e)hasOwnProperty.call(e,c)&&(s[c]=e[c]);s.originalType=n,s[l]="string"==typeof n?n:i,a[1]=s;for(var u=2;u<o;u++)a[u]=r[u];return t.createElement.apply(null,a)}return t.createElement.apply(null,r)}p.displayName="MDXCreateElement"},85234:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>c,contentTitle:()=>a,default:()=>f,frontMatter:()=>o,metadata:()=>s,toc:()=>u});var t=r(58168),i=(r(96540),r(15680));const o={},a="Data Ingestion Using Unstructured.io",s={unversionedId:"integrations/unstructured/data-ingestion",id:"integrations/unstructured/data-ingestion",title:"Data Ingestion Using Unstructured.io",description:"Learn about the data ingestion process in Unstructured.io",source:"@site/docs/integrations/unstructured/data-ingestion.md",sourceDirName:"integrations/unstructured",slug:"/integrations/unstructured/data-ingestion",permalink:"/integrations/unstructured/data-ingestion",draft:!1,editUrl:"https://github.com/Clarifai/docs/blob/main/docs/integrations/unstructured/data-ingestion.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Integrating Unstructred.io with Clarifai",permalink:"/integrations/unstructured/"},next:{title:"Chat With Dropbox Using Unstructured.io",permalink:"/integrations/unstructured/dropbox"}},c={},u=[{value:"Source Connectors",id:"source-connectors",level:2},{value:"Destination Connector",id:"destination-connector",level:2},{value:"Ingestion Configuration",id:"ingestion-configuration",level:2}],g={toc:u},l="wrapper";function f(n){let{components:e,...r}=n;return(0,i.yg)(l,(0,t.A)({},g,r,{components:e,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"data-ingestion-using-unstructuredio"},"Data Ingestion Using Unstructured.io"),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"Learn about the data ingestion process in Unstructured.io")),(0,i.yg)("hr",null),(0,i.yg)("p",null,"Unstructured.io provides a powerful platform for handling the ingestion of unstructured data. Central to this process are the source and destination connectors, which facilitate the movement of data from its origin to a storage or processing system. "),(0,i.yg)("h2",{id:"source-connectors"},"Source Connectors"),(0,i.yg)("p",null,"Source connectors are designed to interface with various unstructured data sources, allowing you to seamlessly ingest data into the Clarifai platform. Click ",(0,i.yg)("a",{parentName:"p",href:"https://docs.unstructured.io/api-reference/ingest/source-connectors/overview"},"here")," to learn more about source connectors."),(0,i.yg)("p",null,"Below is an example of using S3 as a source connector."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-python"},'# Importing necessary modules from the \'os\' library\nimport os\n\n# Importing necessary configurations and classes from unstructured.ingest.connector.fsspec.s3\nfrom unstructured.ingest.connector.fsspec.s3 import S3AccessConfig, SimpleS3Config\n\n# Importing configuration classes from unstructured.ingest.interfaces\nfrom unstructured.ingest.interfaces import (\n PartitionConfig,\n ProcessorConfig,\n ChunkingConfig,\n ReadConfig,\n)\n\n# Importing the S3Runner class from unstructured.ingest.runner\nfrom unstructured.ingest.runner import S3Runner\n\n# Importing necessary configurations and classes from unstructured.ingest.connector.clarifai\nfrom unstructured.ingest.connector.clarifai import (\n ClarifaiAccessConfig,\n ClarifaiWriteConfig,\n SimpleClarifaiConfig,\n)\n\n# Importing base writer and ClarifaiWriter from unstructured.ingest.runner.writers.clarifai\nfrom unstructured.ingest.runner.writers.base_writer import Writer\nfrom unstructured.ingest.runner.writers.clarifai import (\n ClarifaiWriter,\n)\n\n\nif __name__ == "__main__":\n    # Creating an instance of ClarifaiWriter\n writer = clarifai_writer()\n    \n    # Creating an instance of S3Runner with various configurations\n runner = S3Runner(\n        processor_config=ProcessorConfig(\n            verbose=True,               # Enable verbose output\n            output_dir="s3-output-local",  # Directory to store output locally\n            num_processes=2,            # Number of processes to use\n        ),\n        read_config=ReadConfig(),      # Configuration for reading data\n        partition_config=PartitionConfig(),  # Configuration for partitioning data\n        connector_config=SimpleS3Config(\n            access_config=S3AccessConfig(\n                key=access_key,         # S3 access key\n                secret=secret_access,   # S3 secret access key\n            ),\n            remote_url="s3 URL",  # URL of the S3 bucket\n        ),\n        writer=writer,                 # Writer to use for output\n        writer_kwargs={},              # Additional arguments for the writer\n    )\n    \n    # Running the S3Runner\n runner.run()\n\n\n')),(0,i.yg)("h2",{id:"destination-connector"},"Destination Connector"),(0,i.yg)("p",null,"Destination connectors enable the processed data to be loaded into various storage or processing systems where it can be further analyzed, queried, or used in applications. Click ",(0,i.yg)("a",{parentName:"p",href:"https://docs.unstructured.io/api-reference/ingest/destination-connector/overview"},"here")," to learn more about destination connectors."),(0,i.yg)("p",null,"Below is an example of using Clarifai as a destination connector."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-python"},'import os\n\n# Importing necessary configurations and classes from unstructured.ingest.connector.clarifai\nfrom unstructured.ingest.connector.clarifai import (\n ClarifaiAccessConfig,\n ClarifaiWriteConfig,\n SimpleClarifaiConfig,\n)\n\n# Importing local configuration class from unstructured.ingest.connector.local\nfrom unstructured.ingest.connector.local import SimpleLocalConfig\n\n# Importing configuration classes from unstructured.ingest.interfaces\nfrom unstructured.ingest.interfaces import (\n ChunkingConfig,\n PartitionConfig,\n ProcessorConfig,\n ReadConfig,\n)\n\n# Importing the LocalRunner class from unstructured.ingest.runner\nfrom unstructured.ingest.runner import LocalRunner\n\n# Importing base writer and ClarifaiWriter from unstructured.ingest.runner.writers.clarifai\nfrom unstructured.ingest.runner.writers.base_writer import Writer\nfrom unstructured.ingest.runner.writers.clarifai import (\n ClarifaiWriter,\n)\n\n# Function to create and return a ClarifaiWriter instance\ndef get_writer() -> Writer:\n    return ClarifaiWriter(\n        connector_config=SimpleClarifaiConfig(\n            access_config=ClarifaiAccessConfig(api_key=os.getenv("CLARIFAI_PAT_KEY")),  # Access config using environment variables\n            app_id=os.getenv("CLARIFAI_APP_ID"),  # Clarifai app ID from environment variables\n            user_id=os.getenv("CLARIFAI_USER_ID"),  # Clarifai user ID from environment variables\n        ),\n        write_config=ClarifaiWriteConfig(),  # Write config for Clarifai\n    )\n\n\nif __name__ == "__main__":\n    # Creating a writer instance using the get_writer function\n writer = get_writer()\n    \n    # Creating an instance of LocalRunner with various configurations\n runner = LocalRunner(\n        processor_config=ProcessorConfig(\n            verbose=True,  # Enable verbose output\n            output_dir="local-output-to-clarifai-app",  # Directory to store output locally\n            num_processes=2,  # Number of processes to use\n        ),\n        connector_config=SimpleLocalConfig(\n            input_path="example-docs/book-war-and-peace-1225p.txt",  # Path to the input file\n        ),\n        read_config=ReadConfig(),  # Configuration for reading data\n        partition_config=PartitionConfig(),  # Configuration for partitioning data\n        chunking_config=ChunkingConfig(chunk_elements=True),  # Configuration for chunking data\n        writer=writer,  # Writer to use for output\n        writer_kwargs={},  # Additional arguments for the writer\n    )\n    \n    # Running the LocalRunner\n runner.run()\n\n')),(0,i.yg)("h2",{id:"ingestion-configuration"},"Ingestion Configuration"),(0,i.yg)("p",null,"Ingestion configuration in Unstructured.io allows you to customize the data ingestion process to suit your specific requirements. Key configuration aspects include:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"Batch Size"),": Specifies the number of records to process in each batch, balancing throughput and performance."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"Schedule"),": Defines the frequency of data ingestion, such as hourly, daily, or real-time ingestion."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"Error Handling"),": Configures how the system handles errors during ingestion, including retry policies and logging mechanisms.")),(0,i.yg)("p",null,"Click ",(0,i.yg)("a",{parentName:"p",href:"https://docs.unstructured.io/api-reference/ingest/ingest-configuration/overview"},"here")," to learn more about ingestion configuration."))}f.isMDXComponent=!0}}]);
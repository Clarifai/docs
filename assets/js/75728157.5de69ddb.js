"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[9991],{3905:function(e,n,o){o.d(n,{Zo:function(){return u},kt:function(){return f}});var t=o(67294);function r(e,n,o){return n in e?Object.defineProperty(e,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[n]=o,e}function s(e,n){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),o.push.apply(o,t)}return o}function d(e){for(var n=1;n<arguments.length;n++){var o=null!=arguments[n]?arguments[n]:{};n%2?s(Object(o),!0).forEach((function(n){r(e,n,o[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):s(Object(o)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(o,n))}))}return e}function i(e,n){if(null==e)return{};var o,t,r=function(e,n){if(null==e)return{};var o,t,r={},s=Object.keys(e);for(t=0;t<s.length;t++)o=s[t],n.indexOf(o)>=0||(r[o]=e[o]);return r}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(t=0;t<s.length;t++)o=s[t],n.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(r[o]=e[o])}return r}var a=t.createContext({}),l=function(e){var n=t.useContext(a),o=n;return e&&(o="function"==typeof e?e(n):d(d({},n),e)),o},u=function(e){var n=l(e.components);return t.createElement(a.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},c=t.forwardRef((function(e,n){var o=e.components,r=e.mdxType,s=e.originalType,a=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=l(o),f=r,b=c["".concat(a,".").concat(f)]||c[f]||p[f]||s;return o?t.createElement(b,d(d({ref:n},u),{},{components:o})):t.createElement(b,d({ref:n},u))}));function f(e,n){var o=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var s=o.length,d=new Array(s);d[0]=c;var i={};for(var a in n)hasOwnProperty.call(n,a)&&(i[a]=n[a]);i.originalType=e,i.mdxType="string"==typeof e?e:r,d[1]=i;for(var l=2;l<s;l++)d[l]=o[l];return t.createElement.apply(null,d)}return t.createElement.apply(null,o)}c.displayName="MDXCreateElement"},58215:function(e,n,o){var t=o(67294);n.Z=function(e){var n=e.children,o=e.hidden,r=e.className;return t.createElement("div",{role:"tabpanel",hidden:o,className:r},n)}},26396:function(e,n,o){o.d(n,{Z:function(){return c}});var t=o(87462),r=o(67294),s=o(72389),d=o(79443);var i=function(){var e=(0,r.useContext)(d.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},a=o(53810),l=o(86010),u="tabItem_vU9c";function p(e){var n,o,s,d=e.lazy,p=e.block,c=e.defaultValue,f=e.values,b=e.groupId,m=e.className,_=r.Children.map(e.children,(function(e){if((0,r.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),w=null!=f?f:_.map((function(e){var n=e.props;return{value:n.value,label:n.label,attributes:n.attributes}})),h=(0,a.lx)(w,(function(e,n){return e.value===n.value}));if(h.length>0)throw new Error('Docusaurus error: Duplicate values "'+h.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var k=null===c?c:null!=(n=null!=c?c:null==(o=_.find((function(e){return e.props.default})))?void 0:o.props.value)?n:null==(s=_[0])?void 0:s.props.value;if(null!==k&&!w.some((function(e){return e.value===k})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+k+'" but none of its children has the corresponding value. Available values are: '+w.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var v=i(),g=v.tabGroupChoices,E=v.setTabGroupChoices,N=(0,r.useState)(k),O=N[0],I=N[1],y=[],R=(0,a.o5)().blockElementScrollPositionUntilNextRender;if(null!=b){var M=g[b];null!=M&&M!==O&&w.some((function(e){return e.value===M}))&&I(M)}var T=function(e){var n=e.currentTarget,o=y.indexOf(n),t=w[o].value;t!==O&&(R(n),I(t),null!=b&&E(b,t))},D=function(e){var n,o=null;switch(e.key){case"ArrowRight":var t=y.indexOf(e.currentTarget)+1;o=y[t]||y[0];break;case"ArrowLeft":var r=y.indexOf(e.currentTarget)-1;o=y[r]||y[y.length-1]}null==(n=o)||n.focus()};return r.createElement("div",{className:"tabs-container"},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":p},m)},w.map((function(e){var n=e.value,o=e.label,s=e.attributes;return r.createElement("li",(0,t.Z)({role:"tab",tabIndex:O===n?0:-1,"aria-selected":O===n,key:n,ref:function(e){return y.push(e)},onKeyDown:D,onFocus:T,onClick:T},s,{className:(0,l.Z)("tabs__item",u,null==s?void 0:s.className,{"tabs__item--active":O===n})}),null!=o?o:n)}))),d?(0,r.cloneElement)(_.filter((function(e){return e.props.value===O}))[0],{className:"margin-vert--md"}):r.createElement("div",{className:"margin-vert--md"},_.map((function(e,n){return(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==O})}))))}function c(e){var n=(0,s.Z)();return r.createElement(p,(0,t.Z)({key:String(n)},e))}},43464:function(e,n,o){o.r(n),o.d(n,{frontMatter:function(){return l},contentTitle:function(){return u},metadata:function(){return p},toc:function(){return c},default:function(){return b}});var t=o(87462),r=o(63366),s=(o(67294),o(3905)),d=o(26396),i=o(58215),a=["components"],l={description:"Connect your models together.",sidebar_position:2},u="Input Nodes",p={unversionedId:"api-guide/workflows/input_nodes",id:"api-guide/workflows/input_nodes",title:"Input Nodes",description:"Connect your models together.",source:"@site/docs/api-guide/workflows/input_nodes.md",sourceDirName:"api-guide/workflows",slug:"/api-guide/workflows/input_nodes",permalink:"/docs-new/api-guide/workflows/input_nodes",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/api-guide/workflows/input_nodes.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{description:"Connect your models together.",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Base Workflows",permalink:"/docs-new/api-guide/workflows/base-workflows"},next:{title:"Setting Up Mesh Workflows",permalink:"/docs-new/api-guide/workflows/create-get-update-delete"}},c=[{value:"Supported input and output types",id:"supported-input-and-output-types",children:[{value:"Inputs",id:"inputs",children:[],level:4},{value:"Outputs",id:"outputs",children:[],level:4}],level:2},{value:"The building blocks",id:"the-building-blocks",children:[{value:"Sample workflow with multiple connected nodes",id:"sample-workflow-with-multiple-connected-nodes",children:[],level:3},{value:"Suppressing the output from nodes",id:"suppressing-the-output-from-nodes",children:[],level:3}],level:2}],f={toc:c};function b(e){var n=e.components,o=(0,r.Z)(e,a);return(0,s.kt)("wrapper",(0,t.Z)({},f,o,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"input-nodes"},"Input Nodes"),(0,s.kt)("p",null,"The outputs from one model can be used as the inputs in another model. This allows you to link together the models in a graph. Linking models helps you build sophisticated AI solutions, that can zero-in on a specific use case."),(0,s.kt)("h2",{id:"supported-input-and-output-types"},"Supported input and output types"),(0,s.kt)("p",null,"To view your available models, just open your app and click Model Mode icon on the left hand side of the screen. From here just click the Create a Custom Model button in the top righthand corner of the screen."),(0,s.kt)("p",null,"Different models accept different types of inputs and return different types of outputs. They are named after the fields in the Data object of our API. This object is uses in inputs, annotations, models and workflows. Some examples include:"),(0,s.kt)("h4",{id:"inputs"},"Inputs"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Concepts"),(0,s.kt)("li",{parentName:"ul"},"Embeddings"),(0,s.kt)("li",{parentName:"ul"},"Image"),(0,s.kt)("li",{parentName:"ul"},"Image or video"),(0,s.kt)("li",{parentName:"ul"},"Regions")),(0,s.kt)("h4",{id:"outputs"},"Outputs"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Concepts"),(0,s.kt)("li",{parentName:"ul"},"Clusters"),(0,s.kt)("li",{parentName:"ul"},"Regions")),(0,s.kt)("h2",{id:"the-building-blocks"},"The building blocks"),(0,s.kt)("p",null,"You can create workflows out of any Clarifai Models or custom models that you have created for your app. The inputs and outputs supported by your custom models will depend on the inputs and outputs supported by the Clarifai Models, or model templates that you have used to build them."),(0,s.kt)("h3",{id:"sample-workflow-with-multiple-connected-nodes"},"Sample workflow with multiple connected nodes"),(0,s.kt)("p",null,"The The following is an example of how to build a workflow with multiple connected nodes. Note that model IDs and model version IDs from the public ",(0,s.kt)("inlineCode",{parentName:"p"},"clarifai/main")," application are fixed, so they are already hard-coded in the code examples below. It is possible to use other public model or model version IDs."),(0,s.kt)(d.Z,{mdxType:"Tabs"},(0,s.kt)(i.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'# Insert here the initialization code as outlined on this page:\n# https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\npost_workflows_response = stub.PostWorkflows(\n    service_pb2.PostWorkflowsRequest(\n        user_app_id=userDataObject,  # The userDataObject is created in the overview and is required when using a PAT\n        workflows=[\n            resources_pb2.Workflow(\n                id="auto-annotation-workflow-id",\n                nodes=[\n                    resources_pb2.WorkflowNode(\n                        id="general-embed",\n                        model=resources_pb2.Model(\n                            id="bbb5f41425b8468d9b7a554ff10f8581",\n                            model_version=resources_pb2.ModelVersion(\n                                id="bb186755eda04f9cbb6fe32e816be104"\n                            )\n                        )\n                    ),\n                    resources_pb2.WorkflowNode(\n                        id="general-concept",\n                        model=resources_pb2.Model(\n                            id="aaa03c23b3724a16a56b629203edc62c",\n                            model_version=resources_pb2.ModelVersion(\n                                id="aa7f35c01e0642fda5cf400f543e7c40"\n                            )\n                        )\n                    ),\n                    resources_pb2.WorkflowNode(\n                        id="general-cluster",\n                        model=resources_pb2.Model(\n                            id="cccbe437d6e54e2bb911c6aa292fb072",\n                            model_version=resources_pb2.ModelVersion(\n                                id="cc2074cff6dc4c02b6f4e1b8606dcb54"\n                            )\n                        ),\n                        node_inputs=[\n                            resources_pb2.NodeInput(node_id="general-embed")\n                        ]\n                    ),\n                    resources_pb2.WorkflowNode(\n                        id="mapper",\n                        model=resources_pb2.Model(\n                            id="{YOUR_SYNONYM_MODEL_ID}",\n                            model_version=resources_pb2.ModelVersion(\n                                id="{YOUR_SYNONYM_MODEL_VERSION_ID}"\n                            )\n                        ),\n                        node_inputs=[\n                            resources_pb2.NodeInput(node_id="general-concept")\n                        ]\n                    ),\n                    resources_pb2.WorkflowNode(\n                        id="greater-than",\n                        model=resources_pb2.Model(\n                            id="{YOUR_GREATER_THAN_MODEL_ID}",\n                            model_version=resources_pb2.ModelVersion(\n                                id="{YOUR_GREATER_THAN_MODEL_VERSION_ID}"\n                            )\n                        ),\n                        node_inputs=[\n                            resources_pb2.NodeInput(node_id="mapper")\n                        ]\n                    ),\n                    resources_pb2.WorkflowNode(\n                        id="less-than",\n                        model=resources_pb2.Model(\n                            id="{YOUR_LESS_THAN_MODEL_ID}",\n                            model_version=resources_pb2.ModelVersion(\n                                id="{YOUR_LESS_THAN_MODEL_VERSION_ID}"\n                            )\n                        ),\n                        node_inputs=[\n                            resources_pb2.NodeInput(node_id="mapper")\n                        ]\n                    ),\n                ]\n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif post_workflows_response.status.code != status_code_pb2.SUCCESS:\n    raise Exception("Post workflows failed, status: " + post_workflows_response.status.description)\n'))),(0,s.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nMultiWorkflowResponse postWorkflowsResponse = stub.postWorkflows(\n  PostWorkflowsRequest.newBuilder()\n      .setUserAppId(UserAppIDSet.newBuilder().setAppId("{YOUR_APP_ID}"))\n      .addWorkflows(\n          Workflow.newBuilder()\n              .setId("auto-annotation-workflow-id")\n              .addNodes(\n                  WorkflowNode.newBuilder()\n                      .setId("general-embed")\n                      .setModel(\n                          Model.newBuilder()\n                              .setId("bbb5f41425b8468d9b7a554ff10f8581")\n                              .setModelVersion(\n                                  ModelVersion.newBuilder()\n                                      .setId("bb186755eda04f9cbb6fe32e816be104")\n                              )\n                      )\n              )\n              .addNodes(\n                  WorkflowNode.newBuilder()\n                      .setId("general-concept")\n                      .setModel(\n                          Model.newBuilder()\n                              .setId("aaa03c23b3724a16a56b629203edc62c")\n                              .setModelVersion(\n                                  ModelVersion.newBuilder()\n                                      .setId("aa7f35c01e0642fda5cf400f543e7c40")\n                              )\n                      )\n              )\n              .addNodes(\n                  WorkflowNode.newBuilder()\n                      .setId("general-cluster")\n                      .setModel(\n                          Model.newBuilder()\n                              .setId("cccbe437d6e54e2bb911c6aa292fb072")\n                              .setModelVersion(\n                                  ModelVersion.newBuilder()\n                                      .setId("cc2074cff6dc4c02b6f4e1b8606dcb54")\n                              )\n                      )\n              )\n              .addNodes(\n                  WorkflowNode.newBuilder()\n                      .setId("mapper")\n                      .setModel(\n                          Model.newBuilder()\n                              .setId("synonym-model-id")\n                              .setModelVersion(\n                                  ModelVersion.newBuilder()\n                                      .setId("{YOUR_SYNONYM_MODEL_VERSION_ID}")\n                              )\n                      )\n                      .addNodeInputs(NodeInput.newBuilder().setNodeId("general-concept"))\n              )\n              .addNodes(\n                  WorkflowNode.newBuilder()\n                      .setId("greater-than")\n                      .setModel(\n                          Model.newBuilder()\n                              .setId("greater-than-model-id")\n                              .setModelVersion(\n                                  ModelVersion.newBuilder()\n                                      .setId("{YOUR_GREATER_THAN_MODEL_VERSION_ID}")\n                              )\n                      )\n                      .addNodeInputs(NodeInput.newBuilder().setNodeId("mapper"))\n              )\n              .addNodes(\n                  WorkflowNode.newBuilder()\n                      .setId("less-than")\n                      .setModel(\n                          Model.newBuilder()\n                              .setId("less-than-model-id")\n                              .setModelVersion(\n                                  ModelVersion.newBuilder()\n                                      .setId("{YOUR_LESS_THAN_MODEL_VERSION_ID}")\n                              )\n                      )\n                      .addNodeInputs(NodeInput.newBuilder().setNodeId("mapper"))\n              )\n      )\n      .build()\n);\n\nif (postWorkflowsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n    throw new RuntimeException("Post workflows failed, status: " + postWorkflowsResponse.getStatus());\n}\n'))),(0,s.kt)(i.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nstub.PostWorkflows(\n    {\n        user_app_id: {\n            app_id: "e83440590d104cee97ef84af1856837d"\n        },\n        workflows: [\n            {\n                id: "auto-annotation-workflow-id",\n                nodes: [\n                    {\n                        id: "general-embed",\n                        model: {\n                            id: "bbb5f41425b8468d9b7a554ff10f8581",\n                            model_version: {\n                                id: "bb186755eda04f9cbb6fe32e816be104"\n                            }\n                        }\n                    },\n                    {\n                        id: "general-concept",\n                        model: {\n                            id: "aaa03c23b3724a16a56b629203edc62c",\n                            model_version: {\n                                id: "aa7f35c01e0642fda5cf400f543e7c40"\n                            }\n                        }\n                    },\n                    {\n                        id: "general-cluster",\n                        model: {\n                            id: "cccbe437d6e54e2bb911c6aa292fb072",\n                            model_version: {\n                                id: "cc2074cff6dc4c02b6f4e1b8606dcb54"\n                            }\n                        }\n                    },\n                    {\n                        id: "mapper",\n                        model: {\n                            id: "synonym-model-id",\n                            model_version: {\n                                id: "{YOUR_SYNONYM_MODEL_VERSION_ID}"\n                            }\n                        },\n                        node_inputs: [\n                            {node_id: "general-concept"}\n                        ]\n                    },\n                    {\n                        id: "greater-than",\n                        model: {\n                            id: "greater-than-model-id",\n                            model_version: {\n                                id: "{YOUR_GREATER_THAN_MODEL_VERSION_ID}"\n                            }\n                        },\n                        node_inputs: [\n                            {node_id: "mapper"}\n                        ]\n                    },\n                    {\n                        id: "less-than",\n                        model: {\n                            id: "less-than-model-id",\n                            model_version: {\n                                id: "{YOUR_LESS_THAN_MODEL_VERSION_ID}"\n                            }\n                        },\n                        node_inputs: [\n                            {node_id: "mapper"}\n                        ]\n                    },\n                ]\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            console.log(response.status);\n            throw new Error("Post workflows failed, status: " + response.status.description);\n        }\n    }\n);\n'))),(0,s.kt)(i.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST \'https://api.clarifai.com/v2/users/me/apps/{{app}}/workflows\' \\\n    -H \'Authorization: Key {{PAT}}\' \\\n    -H \'Content-Type: application/json\' \\\n    --data-raw \'{\n        "workflows": [\n            {\n                "id": "auto-annotation-workflow-id",\n                "nodes": [\n                    {\n                        "id": "general-embed",\n                        "model": {\n                            "id": "{YOUR_GENERAL_EMBED_MODEL_ID}",\n                            "model_version": {\n                                "id": "{YOUR_GENERAL_EMBED_MODEL_VERSION_ID}"\n                            }\n                        }\n                    },\n                    {\n                        "id": "general-concept",\n                        "model": {\n                            "id": "{YOUR_GENERAL_CONCEPT_MODEL_ID}",\n                            "model_version": {\n                                "id": "{YOUR_GENERAL_CONCEPT_MODEL_VERSION_ID}"\n                            }\n                        }\n                    },\n                    {\n                        "id": "general-cluster",\n                        "model": {\n                            "id": "{YOUR_GENERAL_CLUSTER_MODEL_ID}",\n                            "model_version": {\n                                "id": "{YOUR_GENERAL_CLUSTER_MODEL_VERSION_ID}"\n                            }\n                        }\n                    },\n                    {\n                        "id": "mapper",\n                        "model": {\n                            "id": "synonym-model-id",\n                            "model_version": {\n                                "id": "{YOUR_MAPPER_MODEL_VERSION_ID}"\n                            }\n                        },\n                        "node_inputs": [\n                            {\n                                "node_id": "general-concept"\n                            }\n                        ]\n                    },\n                    {\n                        "id": "greater-than",\n                        "model": {\n                            "id": "greater-than-model-id",\n                            "model_version": {\n                                "id": "{YOUR_GREATER_THAN_MODEL_VERSION_ID}"\n                            }\n                        },\n                        "node_inputs": [\n                            {\n                                "node_id": "mapper"\n                            }\n                        ]\n                    },\n                    {\n                        "id": "less-than",\n                        "model": {\n                            "id": "less-than-model-id",\n                            "model_version": {\n                                "id": "{YOUR_LESS_THAN_MODEL_VERSION_ID}"\n                            }\n                        },\n                        "node_inputs": [\n                            {\n                                "node_id": "mapper"\n                            }\n                        ]\n                    },\n                ]\n            }\n        ]\n    }\'\n'))),(0,s.kt)(i.Z,{value:"js_rest",label:"Javascript (REST)",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},'const raw = JSON.stringify({\n  "user_app_id": {\n        "user_id": "{YOUR_USER_ID}",\n        "app_id": "{YOUR_APP_ID}"\n    },\n  "workflows": [\n      {\n          "id": "auto-annotation-workflow-id",\n          "nodes": [\n              {\n                  "id": "general-embed",\n                  "model": {\n                      "id": "{YOUR_GENERAL_EMBED_MODEL_ID}",\n                      "model_version": {\n                          "id": "{YOUR_GENERAL_EMBED_MODEL_VERSION_ID}"\n                      }\n                  }\n              },\n              {\n                  "id": "general-concept",\n                  "model": {\n                      "id": "{YOUR_GENERAL_CONCEPT_MODEL_ID}",\n                      "model_version": {\n                          "id": "{YOUR_GENERAL_CONCEPT_MODEL_VERSION_ID}"\n                      }\n                  }\n              },\n              {\n                  "id": "general-cluster",\n                  "model": {\n                      "id": "{YOUR_GENERAL_CLUSTER_MODEL_ID}",\n                      "model_version": {\n                          "id": "{YOUR_GENERAL_CLUSTER_MODEL_VERSION_ID}"\n                      }\n                  }\n              },\n              {\n                  "id": "mapper",\n                  "model": {\n                      "id": "synonym-model-id",\n                      "model_version": {\n                          "id": "{YOUR_MAPPER_MODEL_VERSION_ID}"\n                      }\n                  },\n                  "node_inputs": [\n                      {\n                          "node_id": "general-concept"\n                      }\n                  ]\n              },\n              {\n                  "id": "greater-than",\n                  "model": {\n                      "id": "greater-than-model-id",\n                      "model_version": {\n                          "id": "{YOUR_GREATER_THAN_MODEL_VERSION_ID}"\n                      }\n                  },\n                  "node_inputs": [\n                      {\n                          "node_id": "mapper"\n                      }\n                  ]\n              },\n              {\n                  "id": "less-than",\n                  "model": {\n                      "id": "less-than-model-id",\n                      "model_version": {\n                          "id": "{YOUR_LESS_THAN_MODEL_VERSION_ID}"\n                      }\n                  },\n                  "node_inputs": [\n                      {\n                          "node_id": "mapper"\n                      }\n                  ]\n              },\n          ]\n      }\n  ]\n});\n\nconst requestOptions = {\n  method: \'POST\',\n  headers: {\n    \'Accept\': \'application/json\',\n    \'Authorization\': \'Key {YOUR_PERSONAL_TOKEN}\'\n  },\n    body: raw\n};\n\nfetch(`https://api.clarifai.com/v2/workflows`, requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log(\'error\', error));\n')))),(0,s.kt)("h3",{id:"suppressing-the-output-from-nodes"},"Suppressing the output from nodes"),(0,s.kt)("p",null,"It is possible to turn the outputs from given nodes in your workflow on and off with the ",(0,s.kt)("inlineCode",{parentName:"p"},"suppress_output")," endpoint. This can be helpful when you want to hide outputs for expensive return values like image crops or embedding. By default, this endpoint will be set to false, meaning that we do not suppress any model's output."),(0,s.kt)(d.Z,{mdxType:"Tabs"},(0,s.kt)(i.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'# Insert here the initialization code as outlined on this page:\n# https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\npost_workflows_response = stub.PostWorkflows(\n    service_pb2.PostWorkflowsRequest(\n        user_app_id=userDataObject,  # The userDataObject is created in the overview and is required when using a PAT\n        workflows=[\n            resources_pb2.Workflow(\n                id="predict-cluster-only",\n                nodes=[\n                    resources_pb2.WorkflowNode(\n                        id="general-embed",\n                        model=resources_pb2.Model(\n                            id="bbb5f41425b8468d9b7a554ff10f8581",\n                            model_version=resources_pb2.ModelVersion(\n                                id="bb186755eda04f9cbb6fe32e816be104"\n                            )\n                        ),\n                        suppress_output = True                      \n                    ),\n                    resources_pb2.WorkflowNode(\n                        id="general-cluster",\n                        model=resources_pb2.Model(\n                            id="cccbe437d6e54e2bb911c6aa292fb072",\n                            model_version=resources_pb2.ModelVersion(\n                                id="cc2074cff6dc4c02b6f4e1b8606dcb54"\n                            )\n                        ),\n                        node_inputs=[\n                            resources_pb2.NodeInput(node_id="general-embed")\n                        ]\n                    ),\n                ]\n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif post_workflows_response.status.code != status_code_pb2.SUCCESS:\n    raise Exception("Post workflows failed, status: " + post_workflows_response.status.description)\n'))),(0,s.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nMultiWorkflowResponse postWorkflowsResponse = stub.postWorkflows(\n  PostWorkflowsRequest.newBuilder()\n      .setUserAppId(UserAppIDSet.newBuilder().setAppId("{YOUR_APP_ID}"))\n      .addWorkflows(\n          Workflow.newBuilder()\n              .setId("auto-annotation-workflow-id")\n              .addNodes(\n                  WorkflowNode.newBuilder()\n                      .setId("general-embed")\n                      .setModel(\n                          Model.newBuilder()\n                              .setId("bbb5f41425b8468d9b7a554ff10f8581")\n                              .setModelVersion(\n                                  ModelVersion.newBuilder()\n                                      .setId("bb186755eda04f9cbb6fe32e816be104")\n                              )\n                      )\n              )\n              .addNodes(\n                  WorkflowNode.newBuilder()\n                      .setId("general-cluster")\n                      .setModel(\n                          Model.newBuilder()\n                              .setId("cccbe437d6e54e2bb911c6aa292fb072")\n                              .setModelVersion(\n                                  ModelVersion.newBuilder()\n                                      .setId("cc2074cff6dc4c02b6f4e1b8606dcb54")\n                              )\n                      )\n                      .addNodeInputs(NodeInput.newBuilder().setNodeId("general-cluster"))\n              )\n      )\n      .build()\n);\n\nif (postWorkflowsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n    throw new RuntimeException("Post workflows failed, status: " + postWorkflowsResponse.getStatus());\n}\n'))),(0,s.kt)(i.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nstub.PostWorkflows(\n    {\n        user_app_id: {\n            app_id: "{YOUR_APP_ID}"\n        },\n        workflows: [\n            {\n                id: "predict-cluster-only",\n                nodes: [\n                    {\n                        id: "general-embed",\n                        model: {\n                            id: "bbb5f41425b8468d9b7a554ff10f8581",\n                            model_version: {\n                                id: "bb186755eda04f9cbb6fe32e816be104"\n                            }\n                        }\n                        suppress_output: true;\n                    },                  \n                    {\n                        id: "general-cluster",\n                        model: {\n                            id: "cccbe437d6e54e2bb911c6aa292fb072",\n                            model_version: {\n                                id: "cc2074cff6dc4c02b6f4e1b8606dcb54"\n                            }\n                        },\n                        node_inputs: [\n                            {node_id: "mapper"}\n                        ]\n                    },\n                ]\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            console.log(response.status);\n            throw new Error("Post workflows failed, status: " + response.status.description);\n        }\n    }\n);\n'))),(0,s.kt)(i.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'POST /v2/workflows HTTP/1.1\nHost: https://api-dev.clarifai.com\nContent-Type: application/json\nAuthorization: Key f897095e22b144f482b9a13a2151e5bd\n\n{\n  "workflows": [\n    {\n      "id": "predict-cluster-only",\n      "nodes": [\n        {\n          "id": "general-embed",\n          "model": {\n            "id": "bbb5f41425b8468d9b7a554ff10f8581",\n            "model_version": {\n              "id": "bb186755eda04f9cbb6fe32e816be104"\n            }\n          },\n          "suppress_output": true\n        },\n        {\n          "id": "general-cluster",\n          "node_inputs": [\n            {\n              "node_id": "general-embed"\n            }\n          ],\n          "model": {\n            "id": "cccbe437d6e54e2bb911c6aa292fb072",\n            "model_version": {\n              "id": "cc2074cff6dc4c02b6f4e1b8606dcb54"\n            }\n          }\n        }\n      ]\n    }\n  ]\n}\n'))),(0,s.kt)(i.Z,{value:"js_rest",label:"Javascript (REST)",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},'const raw = JSON.stringify({\n  "user_app_id": {\n        "user_id": "{YOUR_USER_ID}",\n        "app_id": "{YOUR_APP_ID}"\n    },\n  "workflows": [\n    {\n      "id": "predict-cluster-only",\n      "nodes": [\n        {\n          "id": "general-embed",\n          "model": {\n            "id": "bbb5f41425b8468d9b7a554ff10f8581",\n            "model_version": {\n              "id": "bb186755eda04f9cbb6fe32e816be104"\n            }\n          },\n          "suppress_output": true\n        },\n        {\n          "id": "general-cluster",\n          "node_inputs": [\n            {\n              "node_id": "general-embed"\n            }\n          ],\n          "model": {\n            "id": "cccbe437d6e54e2bb911c6aa292fb072",\n            "model_version": {\n              "id": "cc2074cff6dc4c02b6f4e1b8606dcb54"\n            }\n          }\n        }\n      ]\n    }\n  ]\n});\n\nconst requestOptions = {\n  method: \'POST\',\n  headers: {\n    \'Accept\': \'application/json\',\n    \'Authorization\': \'Key {YOUR_PERSONAL_TOKEN}\'\n  },\n    body: raw\n};\n\nfetch(`https://api.clarifai.com/v2/workflows`, requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log(\'error\', error));\n')))))}b.isMDXComponent=!0}}]);
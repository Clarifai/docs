"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[8307],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return m}});var a=t(7294);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,a,s=function(e,n){if(null==e)return{};var t,a,s={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var l=a.createContext({}),p=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,s=e.mdxType,o=e.originalType,l=e.parentName,c=r(e,["components","mdxType","originalType","parentName"]),d=p(t),m=s,f=d["".concat(l,".").concat(m)]||d[m]||u[m]||o;return t?a.createElement(f,i(i({ref:n},c),{},{components:t})):a.createElement(f,i({ref:n},c))}));function m(e,n){var t=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var o=t.length,i=new Array(o);i[0]=d;var r={};for(var l in n)hasOwnProperty.call(n,l)&&(r[l]=n[l]);r.originalType=e,r.mdxType="string"==typeof e?e:s,i[1]=r;for(var p=2;p<o;p++)i[p]=t[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},8215:function(e,n,t){var a=t(7294);n.Z=function(e){var n=e.children,t=e.hidden,s=e.className;return a.createElement("div",{role:"tabpanel",hidden:t,className:s},n)}},6396:function(e,n,t){t.d(n,{Z:function(){return d}});var a=t(7462),s=t(7294),o=t(2389),i=t(9443);var r=function(){var e=(0,s.useContext)(i.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},l=t(3616),p=t(6010),c="tabItem_vU9c";function u(e){var n,t,o,i=e.lazy,u=e.block,d=e.defaultValue,m=e.values,f=e.groupId,h=e.className,g=s.Children.map(e.children,(function(e){if((0,s.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),_=null!=m?m:g.map((function(e){var n=e.props;return{value:n.value,label:n.label,attributes:n.attributes}})),v=(0,l.lx)(_,(function(e,n){return e.value===n.value}));if(v.length>0)throw new Error('Docusaurus error: Duplicate values "'+v.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var b=null===d?d:null!=(n=null!=d?d:null==(t=g.find((function(e){return e.props.default})))?void 0:t.props.value)?n:null==(o=g[0])?void 0:o.props.value;if(null!==b&&!_.some((function(e){return e.value===b})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+b+'" but none of its children has the corresponding value. Available values are: '+_.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var y=r(),k=y.tabGroupChoices,w=y.setTabGroupChoices,I=(0,s.useState)(b),C=I[0],T=I[1],N=[],O=(0,l.o5)().blockElementScrollPositionUntilNextRender;if(null!=f){var S=k[f];null!=S&&S!==C&&_.some((function(e){return e.value===S}))&&T(S)}var P=function(e){var n=e.currentTarget,t=N.indexOf(n),a=_[t].value;a!==C&&(O(n),T(a),null!=f&&w(f,a))},R=function(e){var n,t=null;switch(e.key){case"ArrowRight":var a=N.indexOf(e.currentTarget)+1;t=N[a]||N[0];break;case"ArrowLeft":var s=N.indexOf(e.currentTarget)-1;t=N[s]||N[N.length-1]}null==(n=t)||n.focus()};return s.createElement("div",{className:"tabs-container"},s.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,p.Z)("tabs",{"tabs--block":u},h)},_.map((function(e){var n=e.value,t=e.label,o=e.attributes;return s.createElement("li",(0,a.Z)({role:"tab",tabIndex:C===n?0:-1,"aria-selected":C===n,key:n,ref:function(e){return N.push(e)},onKeyDown:R,onFocus:P,onClick:P},o,{className:(0,p.Z)("tabs__item",c,null==o?void 0:o.className,{"tabs__item--active":C===n})}),null!=t?t:n)}))),i?(0,s.cloneElement)(g.filter((function(e){return e.props.value===C}))[0],{className:"margin-vert--md"}):s.createElement("div",{className:"margin-vert--md"},g.map((function(e,n){return(0,s.cloneElement)(e,{key:n,hidden:e.props.value!==C})}))))}function d(e){var n=(0,o.Z)();return s.createElement(u,(0,a.Z)({key:String(n)},e))}},1021:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return p},contentTitle:function(){return c},metadata:function(){return u},toc:function(){return d},default:function(){return f}});var a=t(7462),s=t(3366),o=(t(7294),t(3905)),i=t(6396),r=t(8215),l=["components"],p={description:"Clarifai makes it easy to customize and repurpose existing models.",sidebar_position:3},c="Custom Models",u={unversionedId:"api-guide/model/custom-model-walkthrough",id:"api-guide/model/custom-model-walkthrough",title:"Custom Models",description:"Clarifai makes it easy to customize and repurpose existing models.",source:"@site/docs/api-guide/model/custom-model-walkthrough.md",sourceDirName:"api-guide/model",slug:"/api-guide/model/custom-model-walkthrough",permalink:"/api-guide/model/custom-model-walkthrough",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/api-guide/model/custom-model-walkthrough.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{description:"Clarifai makes it easy to customize and repurpose existing models.",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Model Types",permalink:"/api-guide/model/model-types"},next:{title:"Custom Text Model",permalink:"/api-guide/model/custom-text-model-walkthrough"}},d=[{value:"Add images with concepts",id:"add-images-with-concepts",children:[],level:2},{value:"Create a model",id:"create-a-model",children:[],level:2},{value:"Train the model",id:"train-the-model",children:[],level:2},{value:"Predict with the model",id:"predict-with-the-model",children:[],level:2}],m={toc:d};function f(e){var n=e.components,p=(0,s.Z)(e,l);return(0,o.kt)("wrapper",(0,a.Z)({},m,p,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"custom-models"},"Custom Models"),(0,o.kt)("p",null,"You do not need many images to get started. We recommend starting with 10 and adding more as needed. Before you train your first model you will have needed to ",(0,o.kt)("a",{parentName:"p",href:"../../clarifai-basics/applications/#create-an-application"},"create an application")," and select a ",(0,o.kt)("a",{parentName:"p",href:"../../clarifai-basics/applications/#base-workflow"},"base workflow"),"."),(0,o.kt)("p",null,(0,o.kt)("img",{src:t(540).Z})),(0,o.kt)("h2",{id:"add-images-with-concepts"},"Add images with concepts"),(0,o.kt)("p",null,"To get started training your own model, you must first add images that already contain the concepts you want your model to see."),(0,o.kt)(i.Z,{mdxType:"Tabs"},(0,o.kt)(r.Z,{value:"grpc_java",label:"gRPC Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nMultiInputResponse postInputsResponse = stub.postInputs(\n    PostInputsRequest.newBuilder()\n        .addInputs(\n            Input.newBuilder()\n                .setData(\n                    Data.newBuilder()\n                        .setImage(\n                            Image.newBuilder()\n                                .setUrl("https://samples.clarifai.com/puppy.jpeg")\n                                .setAllowDuplicateUrl(true)\n                        )\n                        .addConcepts(Concept.newBuilder().setId("charlie").setValue(1))\n                        .addConcepts(Concept.newBuilder().setId("our_wedding").setValue(0))\n                )\n        )\n        .addInputs(\n            Input.newBuilder()\n                .setData(\n                    Data.newBuilder()\n                        .setImage(\n                            Image.newBuilder()\n                                .setUrl("https://samples.clarifai.com/wedding.jpg")\n                                .setAllowDuplicateUrl(true)\n                        )\n                        .addConcepts(Concept.newBuilder().setId("our_wedding").setValue(1))\n                        .addConcepts(Concept.newBuilder().setId("charlie").setValue(0))\n                        .addConcepts(Concept.newBuilder().setId("cat").setValue(0))\n                )\n        )\n        .build()\n);\n\nif (postInputsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n    for (Input input : postInputsResponse.getInputsList()) {\n        System.out.println("Input " + input.getId() + " status: ");\n        System.out.println(input.getStatus() + "\\n");\n    }\n\n    throw new RuntimeException("Post inputs failed, status: " + postInputsResponse.getStatus());\n}\n'))),(0,o.kt)(r.Z,{value:"grpc_nodejs",label:"gRPC NodeJS",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nstub.PostInputs(\n    {\n        inputs: [\n            {\n                data: {\n                    image: {url: "https://samples.clarifai.com/puppy.jpeg", allow_duplicate_url: true},\n                    concepts: [{id: "charlie", value: 1}, {id: "our_wedding", value: 0}]\n                }\n            },\n            {\n                data: {\n                    image: {url: "https://samples.clarifai.com/wedding.jpg", allow_duplicate_url: true},\n                    concepts: [{id: "our_wedding", value: 1}, {id: "charlie", value: 0}, {id: "cat", value: 0}]\n                }\n            },\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            for (const input of response.inputs) {\n                console.log("Input " + input.id + " status: ");\n                console.log(JSON.stringify(input.status, null, 2) + "\\n");\n            }\n\n            throw new Error("Post inputs failed, status: " + response.status.description);\n        }\n    }\n);\n'))),(0,o.kt)(r.Z,{value:"grpc_python",label:"gRPC Python",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'# Insert here the initialization code as outlined on this page:\n# https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\npost_inputs_response = stub.PostInputs(\n    service_pb2.PostInputsRequest(\n        inputs=[\n            resources_pb2.Input(\n                data=resources_pb2.Data(\n                    image=resources_pb2.Image(\n                        url="https://samples.clarifai.com/puppy.jpeg",\n                        allow_duplicate_url=True\n                    ),\n                    concepts=[\n                        resources_pb2.Concept(id="charlie", value=1),\n                        resources_pb2.Concept(id="our_wedding", value=0),\n                    ]\n                )\n            ),\n            resources_pb2.Input(\n                data=resources_pb2.Data(\n                    image=resources_pb2.Image(\n                        url="https://samples.clarifai.com/wedding.jpg",\n                        allow_duplicate_url=True\n                    ),\n                    concepts=[\n                        resources_pb2.Concept(id="our_wedding", value=1),\n                        resources_pb2.Concept(id="charlie", value=0),\n                        resources_pb2.Concept(id="cat", value=0),\n                    ]\n                )\n            ),\n        ]\n    ),\n    metadata=metadata\n)\n\nif post_inputs_response.status.code != status_code_pb2.SUCCESS:\n    print("There was an error with your request!")\n    for input_object in post_inputs_response.inputs:\n        print("Input " + input_object.id + " status:")\n        print(input_object.status)\n\n    print("\\tCode: {}".format(post_inputs_response.outputs[0].status.code))\n    print("\\tDescription: {}".format(post_inputs_response.outputs[0].status.description))\n    print("\\tDetails: {}".format(post_inputs_response.outputs[0].status.details))\n    raise Exception("Post inputs failed, status: " + post_inputs_response.status.description)\n'))),(0,o.kt)(r.Z,{value:"javascript",label:"Javascript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'app.inputs.create({\n  url: "https://samples.clarifai.com/puppy.jpeg",\n  concepts: [\n    {\n      id: "charlie",\n      value: true\n    }\n  ]\n});\n'))),(0,o.kt)(r.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from clarifai.rest import ClarifaiApp\nfrom clarifai.rest import Image as ClImage\n\napp = ClarifaiApp(api_key='YOUR_API_KEY')\n\n# add multiple images with concepts\nimg1 = ClImage(url=\"https://samples.clarifai.com/puppy.jpeg\", concepts=['charlie'], not_concepts=['our_wedding'])\nimg2 = ClImage(url=\"https://samples.clarifai.com/wedding.jpg\", concepts=['our_wedding'], not_concepts=['cat','charlie'])\n\napp.inputs.bulk_create_images([img1, img2])\n"))),(0,o.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'client.addInputs()\n    .plus(\n        ClarifaiInput.forImage("https://samples.clarifai.com/puppy.jpeg")\n            .withConcepts(Concept.forID("charlie"))\n    )\n    .executeSync();\n'))),(0,o.kt)(r.Z,{value:"csharp",label:"C#",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},'using System.Collections.Generic;\nusing System.Threading.Tasks;\nusing Clarifai.API;\nusing Clarifai.DTOs.Inputs;\nusing Clarifai.DTOs.Predictions;\n\nnamespace YourNamespace\n{\n    public class YourClassName\n    {\n        public static async Task Main()\n        {\n            var client = new ClarifaiClient("YOUR_API_KEY");\n\n            await client.AddInputs(\n                    new ClarifaiURLImage(\n                        "https://samples.clarifai.com/puppy.jpeg",\n                        positiveConcepts: new List<Concept> {new Concept(id: "charlie")}))\n                .ExecuteAsync();\n        }\n    }\n}\n'))),(0,o.kt)(r.Z,{value:"objective-c",label:"Objective-C",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-objectivec"},'ClarifaiImage *image = [[ClarifaiImage alloc] initWithURL:@"https://samples.clarifai.com/puppy.jpeg" andConcepts:@"cute puppy"];\n[_app addInputs:@[image] completion:^(NSArray<ClarifaiInput *> *inputs, NSError *error) {\n    NSLog(@"inputs: %@", inputs);\n}];\n'))),(0,o.kt)(r.Z,{value:"php",label:"PHP",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},'use Clarifai\\API\\ClarifaiClient;\nuse Clarifai\\DTOs\\Inputs\\ClarifaiURLImage;\nuse Clarifai\\DTOs\\Predictions\\Concept;\n\n$client = new ClarifaiClient(\'YOUR_API_KEY\');\n\n$response = $client->addInputs(\n        (new ClarifaiURLImage(\'https://samples.clarifai.com/puppy.jpeg\'))\n        ->withAllowDuplicateUrl(true)\n        ->withPositiveConcepts([new Concept(\'charlie\')]))\n    ->executeSync();\n\nif ($response-> isSuccessful()) {\n    echo "Response is successful.\\n";\n} else {\n    echo "Response is not successful. Reason: \\n";\n    echo $response->status()->description() . "\\n";\n    echo $response->status()->errorDetails() . "\\n";\n    echo "Status code: " . $response->status()->statusCode();\n}\n'))),(0,o.kt)(r.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'\n  {\n    "inputs": [\n      {\n        "data": {\n          "image": {\n            "url": "https://samples.clarifai.com/puppy.jpeg",\n            "allow_duplicate_url": true\n          },\n          "concepts":[\n            {\n              "id": "charlie",\n              "value": 1\n            },\n            {\n              "id": "our_wedding",\n              "value": 0\n            }\n          ]\n        }\n      },\n      {\n        "data": {\n          "image": {\n            "url": "https://samples.clarifai.com/wedding.jpg",\n            "allow_duplicate_url": true\n          },\n          "concepts":[\n            {\n              "id": "our_wedding",\n              "value": 1\n            },\n            {\n              "id": "charlie",\n              "value": 0\n            },\n            {\n              "id": "cat",\n              "value": 0\n            }\n          ]\n        }\n      }\n    ]\n  }\'\\\n  https://api.clarifai.com/v2/inputs\n'))),(0,o.kt)(r.Z,{value:"js_rest",label:"Javascript (REST)",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'const raw = JSON.stringify({\n    "user_app_id": {\n        "user_id": "{YOUR_USER_ID}",\n        "app_id": "{YOUR_APP_ID}"\n    },\n  "inputs": [\n    {\n      "data": {\n        "image": {\n          "url": "https://samples.clarifai.com/puppy.jpeg",\n          "allow_duplicate_url": true\n        },\n        "concepts":[\n          {\n            "id": "charlie",\n            "value": 1\n          },\n          {\n            "id": "our_wedding",\n            "value": 0\n          }\n        ]\n      }\n    },\n    {\n      "data": {\n        "image": {\n          "url": "https://samples.clarifai.com/wedding.jpg",\n          "allow_duplicate_url": true\n        },\n        "concepts":[\n          {\n            "id": "our_wedding",\n            "value": 1\n          },\n          {\n            "id": "charlie",\n            "value": 0\n          },\n          {\n            "id": "cat",\n            "value": 0\n          }\n        ]\n      }\n    }\n  ]\n});\n\nconst requestOptions = {\n  method: \'POST\',\n  headers: {\n    \'Accept\': \'application/json\',\n    \'Authorization\': \'Key {YOUR_PERSONAL_TOKEN}\'\n  },\n  body: raw\n};\n\nfetch("https://api.clarifai.com/v2/inputs", requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log(\'error\', error));\n')))),(0,o.kt)(i.Z,{mdxType:"Tabs"},(0,o.kt)(r.Z,{value:"response_json",label:"Response JSON",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'{\n  "status": {\n    "code": 10000,\n    "description": "Ok"\n  },\n  "inputs": [\n    {\n      "id": "e82fd13b11354d808cc48dc8f94ec3a9",\n      "created_at": "2016-11-22T17:16:00Z",\n      "data": {\n        "image": {\n          "url": "https://samples.clarifai.com/puppy.jpeg"\n        },\n        "concepts": [\n          {\n            "id": "charlie",\n            "name": "charlie",\n            "app_id": "f09abb8a57c041cbb94759ebb0cf1b0d",\n            "value": 1\n          }\n        ]\n      },\n      "status": {\n        "code": 30000,\n        "description": "Download complete"\n      }\n    }\n  ]\n}\n')))),(0,o.kt)("h2",{id:"create-a-model"},"Create a model"),(0,o.kt)("p",null,"Once your images with concepts are added, you are now ready to create the model. You'll need a name for the model and you'll also need to provide it with the concepts you added above."),(0,o.kt)("p",null,"Take note of the ",(0,o.kt)("inlineCode",{parentName:"p"},"model id")," that is returned in the response. You'll need that for the next two steps."),(0,o.kt)(i.Z,{mdxType:"Tabs"},(0,o.kt)(r.Z,{value:"grpc_java",label:"gRPC Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nSingleModelResponse postModelsResponse = stub.postModels(\n    PostModelsRequest.newBuilder().addModels(\n        Model.newBuilder()\n            .setId("pets")\n            .setOutputInfo(\n                OutputInfo.newBuilder()\n                    .setData(\n                        Data.newBuilder().addConcepts(Concept.newBuilder().setId("charlie"))\n                    )\n                    .setOutputConfig(\n                        OutputConfig.newBuilder()\n                            .setConceptsMutuallyExclusive(false)\n                            .setClosedEnvironment(false)\n                    )\n            )\n    ).build()\n);\n\nif (postModelsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n    throw new RuntimeException("Post models failed, status: " + postModelsResponse.getStatus());\n}\n'))),(0,o.kt)(r.Z,{value:"grpc_nodejs",label:"gRPC NodeJS",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nstub.PostModels(\n    {\n        models: [\n            {\n                id: "pets",\n                output_info: {\n                    data: {concepts: [{id: "charlie"}]},\n                    output_config: {concepts_mutually_exclusive: false, closed_environment: false}\n                }\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post models failed, status: " + response.status.description);\n        }\n    }\n);\n'))),(0,o.kt)(r.Z,{value:"grpc_python",label:"gRPC Python",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'# Insert here the initialization code as outlined on this page:\n# https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\npost_models_response = stub.PostModels(\n    service_pb2.PostModelsRequest(\n        models=[\n            resources_pb2.Model(\n                id="pets",\n                output_info=resources_pb2.OutputInfo(\n                    data=resources_pb2.Data(\n                        concepts=[resources_pb2.Concept(id="charlie", value=1)]\n                    ),\n                    output_config=resources_pb2.OutputConfig(\n                        concepts_mutually_exclusive=False,\n                        closed_environment=False\n                    )\n                )\n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif post_models_response.status.code != status_code_pb2.SUCCESS:\n    print("There was an error with your request!")\n    print("\\tCode: {}".format(post_models_response.outputs[0].status.code))\n    print("\\tDescription: {}".format(post_models_response.outputs[0].status.description))\n    print("\\tDetails: {}".format(post_models_response.outputs[0].status.details))\n    raise Exception("Post models failed, status: " + post_models_response.status.description)\n'))),(0,o.kt)(r.Z,{value:"javascript",label:"Javascript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'app.models.create(\n  "pets",\n  [\n    { "id": "charlie" }\n  ]\n).then(\n  function(response) {\n    // do something with response\n  },\n  function(err) {\n    // there was an error\n  }\n);\n'))),(0,o.kt)(r.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from clarifai.rest import ClarifaiApp\napp = ClarifaiApp(api_key='YOUR_API_KEY')\n\nmodel = app.models.create('pets', concepts=['charlie'])\n"))),(0,o.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'client.createModel("pets")\n    .withOutputInfo(ConceptOutputInfo.forConcepts(\n        Concept.forID("charlie")\n    ))\n    .executeSync();\n'))),(0,o.kt)(r.Z,{value:"csharp",label:"C#",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},'using System.Collections.Generic;\nusing System.Threading.Tasks;\nusing Clarifai.API;\nusing Clarifai.DTOs.Predictions;\n\nnamespace YourNamespace\n{\n    public class YourClassName\n    {\n        public static async Task Main()\n        {\n            var client = new ClarifaiClient("YOUR_API_KEY");\n\n            await client.CreateModel(\n                    "pets",\n                    concepts: new List<Concept> {new Concept("charlie")})\n                .ExecuteAsync();\n        }\n    }\n}\n'))),(0,o.kt)(r.Z,{value:"objective-c",label:"Objective-C",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-objectivec"},'[app createModel:@[concept] name:modelName conceptsMutuallyExclusive:NO closedEnvironment:NO\n      completion:^(ClarifaiModel *model, NSError *error) {\n        NSLog(@"model: %@", model);\n}];\n'))),(0,o.kt)(r.Z,{value:"php",label:"PHP",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},'use Clarifai\\API\\ClarifaiClient;\nuse Clarifai\\DTOs\\Predictions\\Concept;\n\n$client = new ClarifaiClient(\'YOUR_API_KEY\');\n\n$response = $client->createModel(\'pets\')\n    ->withConcepts([new Concept(\'charlie\')])\n    ->executeSync();\n\nif ($response-> isSuccessful()) {\n    echo "Response is successful.\\n";\n} else {\n    echo "Response is not successful. Reason: \\n";\n    echo $response->status()->description() . "\\n";\n    echo $response->status()->errorDetails() . "\\n";\n    echo "Status code: " . $response->status()->statusCode();\n}\n'))),(0,o.kt)(r.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'\n  {\n    "model": {\n      "id": "pets",\n      "output_info": {\n        "data": {\n          "concepts": [\n            {\n              "id": "charlie"\n            }\n          ]\n        },\n        "output_config": {\n          "concepts_mutually_exclusive": false,\n          "closed_environment":false\n        }\n      }\n    }\n  }\'\\\n  https://api.clarifai.com/v2/models\n'))),(0,o.kt)(r.Z,{value:"js_rest",label:"Javascript (REST)",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'const raw = JSON.stringify({\n    "user_app_id": {\n        "user_id": "{YOUR_USER_ID}",\n        "app_id": "{YOUR_APP_ID}"\n    },\n  "model": {\n    "id": "pets",\n    "output_info": {\n      "data": {\n        "concepts": [\n          {\n            "id": "charlie"\n          }\n        ]\n      },\n      "output_config": {\n        "concepts_mutually_exclusive": false,\n        "closed_environment": false\n      }\n    }\n  }\n});\n\nconst requestOptions = {\n  method: \'POST\',\n  headers: {\n    \'Accept\': \'application/json\',\n    \'Authorization\': \'Key {YOUR_PERSONAL_TOKEN}\'\n  },\n  body: raw\n};\n\nfetch("https://api.clarifai.com/v2/models", requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log(\'error\', error));\n')))),(0,o.kt)(i.Z,{mdxType:"Tabs"},(0,o.kt)(r.Z,{value:"response_json",label:"Response JSON",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'{\n  "status": {\n    "code": 10000,\n    "description": "Ok"\n  },\n  "model": {\n    "name": "pets",\n    "id": "a10f0cf48cf3426cbb8c4805e246c214",\n    "created_at": "2016-11-22T17:17:36Z",\n    "app_id": "f09abb8a57c041cbb94759ebb0cf1b0d",\n    "output_info": {\n      "message": "Show output_info with: GET /models/{model_id}/output_info",\n      "type": "concept",\n      "output_config": {\n        "concepts_mutually_exclusive": false,\n        "closed_environment": false\n      }\n    },\n    "model_version": {\n      "id": "e7bcd534b61b4874a3ab69fba974c012",\n      "created_at": "2016-11-22T17:17:36Z",\n      "status": {\n        "code": 21102,\n        "description": "Model not yet trained"\n      }\n    }\n  }\n}\n')))),(0,o.kt)("h2",{id:"train-the-model"},"Train the model"),(0,o.kt)("p",null,"Now that you've added images with concepts, then created a model with those concepts, the next step is to train the model. When you train a model, you are telling the system to look at all the images with concepts you've provided and learn from them. This train operation is asynchronous. It may take a few seconds for your model to be fully trained and ready."),(0,o.kt)("p",null,"Keep note of the ",(0,o.kt)("inlineCode",{parentName:"p"},"model_version id")," in the response. We'll need that for the next section when we predict with the model."),(0,o.kt)(i.Z,{mdxType:"Tabs"},(0,o.kt)(r.Z,{value:"grpc_java",label:"gRPC Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nSingleModelResponse postModelVersionsResponse = stub.postModelVersions(\n    PostModelVersionsRequest.newBuilder()\n        .setModelId("pets")\n        .build()\n);\n\nif (postModelVersionsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n  throw new RuntimeException("Post model versions failed, status: " + postModelVersionsResponse.getStatus());\n}\n\nString modelVersionId = postModelVersionsResponse.getModel().getModelVersion().getId();\nSystem.out.println("New model version ID: " + modelVersionId);\n'))),(0,o.kt)(r.Z,{value:"grpc_nodejs",label:"gRPC NodeJS",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nstub.PostModelVersions(\n    {model_id: "pets"},\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post model versions failed, status: " + response.status.description);\n        }\n    }\n);\n'))),(0,o.kt)(r.Z,{value:"grpc_python",label:"gRPC Python",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'# Insert here the initialization code as outlined on this page:\n# https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\npost_model_versions = stub.PostModelVersions(\n    service_pb2.PostModelVersionsRequest(\n        model_id="pets"\n    ),\n    metadata=metadata\n)\n\nif post_model_versions.status.code != status_code_pb2.SUCCESS:\n    print("There was an error with your request!")\n    print("\\tCode: {}".format(post_model_versions.outputs[0].status.code))\n    print("\\tDescription: {}".format(post_model_versions.outputs[0].status.description))\n    print("\\tDetails: {}".format(post_model_versions.outputs[0].status.details))\n    raise Exception("Post model versions failed, status: " + post_model_versions.status.description)\n'))),(0,o.kt)(r.Z,{value:"javascript",label:"Javascript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'app.models.train("{model_id}").then(\n  function(response) {\n    // do something with response\n  },\n  function(err) {\n    // there was an error\n  }\n);\n\n// or if you have an instance of a model\n\nmodel.train().then(\n  function(response) {\n    // do something with response\n  },\n  function(err) {\n    // there was an error\n  }\n);\n'))),(0,o.kt)(r.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from clarifai.rest import ClarifaiApp\n\napp = ClarifaiApp(api_key='YOUR_API_KEY')\n\nmodel = app.models.get('{model_id}')\nmodel.train()\n"))),(0,o.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'client.trainModel("{model_id}").executeSync();\n'))),(0,o.kt)(r.Z,{value:"csharp",label:"C#",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},'using System.Threading.Tasks;\nusing Clarifai.API;\nusing Clarifai.DTOs.Predictions;\n\nnamespace YourNamespace\n{\n    public class YourClassName\n    {\n        public static async Task Main()\n        {\n            var client = new ClarifaiClient("YOUR_API_KEY");\n\n            await client.TrainModel<Concept>("{model_id}")\n                .ExecuteAsync();\n        }\n    }\n}\n'))),(0,o.kt)(r.Z,{value:"objective-c",label:"Objective-C",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-objectivec"},'ClarifaiImage *image = [[ClarifaiImage alloc] initWithURL:@"https://samples.clarifai.com/puppy.jpeg"]\n[app getModel:@"{id}" completion:^(ClarifaiModel *model, NSError *error) {\n    [model train:^(ClarifaiModel *model, NSError *error) {\n        NSLog(@"model: %@", model);\n    }];\n}];\n'))),(0,o.kt)(r.Z,{value:"php",label:"PHP",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},'use Clarifai\\API\\ClarifaiClient;\nuse Clarifai\\DTOs\\Models\\ModelType;\n\n$client = new ClarifaiClient(\'YOUR_API_KEY\');\n\n$response = $client->trainModel(ModelType::concept(), \'MODEL_ID\')\n    ->executeSync();\n\nif ($response-> isSuccessful()) {\n    echo "Response is successful.\\n";\n} else {\n    echo "Response is not successful. Reason: \\n";\n    echo $response->status()->description() . "\\n";\n    echo $response->status()->errorDetails() . "\\n";\n    echo "Status code: " . $response->status()->statusCode();\n}\n'))),(0,o.kt)(r.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  https://api.clarifai.com/v2/models/pets/versions\n'))),(0,o.kt)(r.Z,{value:"js_rest",label:"Javascript (REST)",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const appId = '{YOUR_APP_ID}'\n\nconst requestOptions = {\n  method: 'POST',\n  headers: {\n    'Accept': 'application/json',\n    'Authorization': 'Key {YOUR_PERSONAL_TOKEN}'\n  }\n};\n\nfetch(`https://api.clarifai.com/v2/users/me/apps/${appId}/models/pets/versions`, requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log('error', error));\n")))),(0,o.kt)(i.Z,{mdxType:"Tabs"},(0,o.kt)(r.Z,{value:"response_json",label:"Response JSON",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'{\n  "status": {\n    "code": 10000,\n    "description": "Ok"\n  },\n  "model": {\n    "name": "pets",\n    "id": "a10f0cf48cf3426cbb8c4805e246c214",\n    "created_at": "2016-11-22T17:17:36Z",\n    "app_id": "f09abb8a57c041cbb94759ebb0cf1b0d",\n    "output_info": {\n      "message": "Show output_info with: GET /models/{model_id}/output_info",\n      "type": "concept",\n      "output_config": {\n        "concepts_mutually_exclusive": false,\n        "closed_environment": false\n      }\n    },\n    "model_version": {\n      "id": "d1b38fd2251148d08675c5542ef00c7b",\n      "created_at": "2016-11-22T17:21:13Z",\n      "status": {\n        "code": 21103,\n        "description": "Custom model is currently in queue for training, waiting on inputs to process."\n      }\n    }\n  }\n}\n')))),(0,o.kt)("h2",{id:"predict-with-the-model"},"Predict with the model"),(0,o.kt)("p",null,"Now that we have a trained model we can start making predictions with it. In our predict call we specify three items. The ",(0,o.kt)("inlineCode",{parentName:"p"},"model id"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"model version id")," ","(","optional, defaults to the latest trained version",")"," and the ",(0,o.kt)("inlineCode",{parentName:"p"},"input")," we want a prediction for."),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Note: you can repeat the above steps as often as you like. By adding more images with concepts and training, you can get the model to predict exactly how you want it to.")),(0,o.kt)(i.Z,{mdxType:"Tabs"},(0,o.kt)(r.Z,{value:"grpc_java",label:"gRPC Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nMultiOutputResponse postModelOutputsResponse = stub.postModelOutputs(\n    PostModelOutputsRequest.newBuilder()\n        .setModelId("pets")\n        .setVersionId("{YOUR_MODEL_VERSION_ID}")  // This is optional. Defaults to the latest model version.\n        .addInputs(\n            Input.newBuilder().setData(\n                Data.newBuilder().setImage(\n                    Image.newBuilder().setUrl("https://samples.clarifai.com/metro-north.jpg")\n                )\n            )\n        )\n        .build()\n);\n\nif (postModelOutputsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n  throw new RuntimeException("Post model outputs failed, status: " + postModelOutputsResponse.getStatus());\n}\n\n// Since we have one input, one output will exist here.\nOutput output = postModelOutputsResponse.getOutputs(0);\n\nSystem.out.println("Predicted concepts:");\nfor (Concept concept : output.getData().getConceptsList()) {\n    System.out.printf("%s %.2f%n", concept.getName(), concept.getValue());\n}\n'))),(0,o.kt)(r.Z,{value:"grpc_nodejs",label:"gRPC NodeJS",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nstub.PostModelOutputs(\n    {\n        model_id: "pets",\n        version_id: "{YOUR_MODEL_VERSION_ID}",  // This is optional. Defaults to the latest model version.\n        inputs: [\n            {data: {image: {url: "https://samples.clarifai.com/metro-north.jpg"}}}\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post model outputs failed, status: " + response.status.description);\n        }\n\n        // Since we have one input, one output will exist here.\n        const output = response.outputs[0];\n\n        console.log("Predicted concepts:");\n        for (const concept of output.data.concepts) {\n            console.log(concept.name + " " + concept.value);\n        }\n    }\n);\n'))),(0,o.kt)(r.Z,{value:"grpc_python",label:"gRPC Python",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'# Insert here the initialization code as outlined on this page:\n# https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\npost_model_outputs_response = stub.PostModelOutputs(\n    service_pb2.PostModelOutputsRequest(\n        model_id="pets",\n        version_id="{YOUR_MODEL_VERSION_ID}",  # This is optional. Defaults to the latest model version.\n        inputs=[\n            resources_pb2.Input(\n                data=resources_pb2.Data(\n                    image=resources_pb2.Image(\n                        url="https://samples.clarifai.com/metro-north.jpg"\n                    )\n                )\n            )\n        ]\n    ),\n    metadata=metadata\n)\nif post_model_outputs_response.status.code != status_code_pb2.SUCCESS:\n    print("There was an error with your request!")\n    print("\\tCode: {}".format(post_model_outputs_response.outputs[0].status.code))\n    print("\\tDescription: {}".format(post_model_outputs_response.outputs[0].status.description))\n    print("\\tDetails: {}".format(post_model_outputs_response.outputs[0].status.details))\n    raise Exception("Post model outputs failed, status: " + post_model_outputs_response.status.description)\n\n# Since we have one input, one output will exist here.\noutput = post_model_outputs_response.outputs[0]\n\nprint("Predicted concepts:")\nfor concept in output.data.concepts:\n    print("%s %.2f" % (concept.name, concept.value))\n'))),(0,o.kt)(r.Z,{value:"javascript",label:"Javascript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"let app = new Clarifai.App({apiKey: 'YOUR_API_KEY'});\n\napp.models.predict({id:'MODEL_ID', version:'MODEL_VERSION_ID'}, \"https://samples.clarifai.com/metro-north.jpg\").then(\n  function(response) {\n    // do something with response\n  },\n  function(err) {\n    // there was an error\n  }\n);\n"))),(0,o.kt)(r.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from clarifai.rest import ClarifaiApp\napp = ClarifaiApp(api_key='YOUR_API_KEY')\n\nmodel = app.models.get('MODEL_ID')\nmodel.model_version = 'MODEL_VERSION_ID'  # This is optional. Defaults to the latest model version.\n\nresponse = model.predict_by_url('https://samples.clarifai.com/metro-north.jpg')\n"))),(0,o.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'ModelVersion modelVersion = client.getModelVersionByID("MODEL_ID", "MODEL_VERSION_ID")\n        .executeSync()\n        .get();\n\n    client.predict("MODEL_ID")\n        .withVersion(modelVersion)\n        .withInputs(ClarifaiInput.forImage("https://samples.clarifai.com/metro-north.jpg"))\n        .executeSync();\n'))),(0,o.kt)(r.Z,{value:"csharp",label:"C#",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},'using System.Threading.Tasks;\nusing Clarifai.API;\nusing Clarifai.DTOs.Inputs;\nusing Clarifai.DTOs.Predictions;\n\nnamespace YourNamespace\n{\n    public class YourClassName\n    {\n        public static async Task Main()\n        {\n            var client = new ClarifaiClient("YOUR_API_KEY");\n\n                 var response = await Client.Predict<Concept>(\n                    "YOUR_MODEL_ID",\n                    new ClarifaiURLImage("https://samples.clarifai.com/metro-north.jpg"),\n                    modelVersionID: "MODEL_VERSION_ID")\n                  .ExecuteAsync();\n        }\n    }\n}\n'))),(0,o.kt)(r.Z,{value:"objective-c",label:"Objective-C",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-objectivec"},'ClarifaiImage *image = [[ClarifaiImage alloc] initWithURL:@"https://samples.clarifai.com/puppy.jpeg"]\n[app getModel:@"{id}" completion:^(ClarifaiModel *model, NSError *error) {\n    [model predictOnImages:@[image]\n                completion:^(NSArray<ClarifaiSearchResult *> *outputs, NSError *error) {\n                    NSLog(@"outputs: %@", outputs);\n                }];\n}];\n'))),(0,o.kt)(r.Z,{value:"php",label:"PHP",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},'use Clarifai\\API\\ClarifaiClient;\nuse Clarifai\\DTOs\\Inputs\\ClarifaiURLImage;\nuse Clarifai\\DTOs\\Models\\ModelType;\nuse Clarifai\\DTOs\\Outputs\\ClarifaiOutput;\nuse Clarifai\\DTOs\\Predictions\\Concept;\n\n$client = new ClarifaiClient(\'YOUR_API_KEY\');\n\n$response = $client->predict(ModelType::concept(), \'MODEL_ID,\n        new ClarifaiURLImage(\'https://samples.clarifai.com/puppy.jpeg\'))\n    ->executeSync();\n\nif ($response-> isSuccessful()) {\n    /** @var ClarifaiOutput $output */\n    $output = $response->get();\n\n    echo "Predicted concepts:\\n";\n    /** @var Concept $concept */\n    foreach ($output->data() as $concept) {\n        echo $concept->name() . \': \' . $concept->value() . "\\n";\n    }\n} else {\n    echo "Response is not successful. Reason: \\n";\n    echo $response->status()->description() . "\\n";\n    echo $response->status()->errorDetails() . "\\n";\n    echo "Status code: " . $response->status()->statusCode();\n}\n'))),(0,o.kt)(r.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'\n  {\n    "inputs": [\n      {\n        "data": {\n          "image": {\n            "url": "https://samples.clarifai.com/metro-north.jpg"\n          }\n        }\n      }\n    ]\n  }\'\\\n  https://api.clarifai.com/v2/models/pets/versions/{YOUR_MODEL_VERSION_ID}/outputs\n'))),(0,o.kt)(r.Z,{value:"js_rest",label:"Javascript (REST)",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'const appId = \'{YOUR_APP_ID}\'\n\nconst raw = JSON.stringify({\n  "user_app_id": {\n        "user_id": "{YOUR_USER_ID}",\n        "app_id": "{YOUR_APP_ID}"\n    },\n  "inputs": [\n    {\n      "data": {\n        "image": {\n          "url": "https://samples.clarifai.com/metro-north.jpg"\n        }\n      }\n    }\n  ]\n});\n\nconst requestOptions = {\n  method: \'POST\',\n  headers: {\n    \'Accept\': \'application/json\',\n    \'Authorization\': \'Key {YOUR_PERSONAL_TOKEN}\'\n  },\n  body: raw\n};\n\nfetch(`https://api.clarifai.com/v2/models/pets/versions/{YOUR_MODEL_VERSION_ID}/outputs`, requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(results))\n  .catch(error => console.log(\'error\', error));\n')))),(0,o.kt)(i.Z,{mdxType:"Tabs"},(0,o.kt)(r.Z,{value:"response_json",label:"Response JSON",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'{\n  "status": {\n    "code": 10000,\n    "description": "Ok"\n  },\n  "outputs": [\n    {\n      "id": "e8b6eb27de764f3fa8d4f7752a3a2dfc",\n      "status": {\n        "code": 10000,\n        "description": "Ok"\n      },\n      "created_at": "2016-11-22T17:22:23Z",\n      "model": {\n        "name": "pets",\n        "id": "a10f0cf48cf3426cbb8c4805e246c214",\n        "created_at": "2016-11-22T17:17:36Z",\n        "app_id": "f09abb8a57c041cbb94759ebb0cf1b0d",\n        "output_info": {\n          "message": "Show output_info with: GET /models/{model_id}/output_info",\n          "type": "concept",\n          "output_config": {\n            "concepts_mutually_exclusive": false,\n            "closed_environment": false\n          }\n        },\n        "model_version": {\n          "id": "d1b38fd2251148d08675c5542ef00c7b",\n          "created_at": "2016-11-22T17:21:13Z",\n          "status": {\n            "code": 21100,\n            "description": "Model trained successfully"\n          }\n        }\n      },\n      "input": {\n        "id": "e8b6eb27de764f3fa8d4f7752a3a2dfc",\n        "data": {\n          "image": {\n            "url": "https://samples.clarifai.com/puppy.jpeg"\n          }\n        }\n      },\n      "data": {\n        "concepts": [\n          {\n            "id": "charlie",\n            "name": "charlie",\n            "app_id": "f09abb8a57c041cbb94759ebb0cf1b0d",\n            "value": 0.98308545\n          }\n        ]\n      }\n    }\n  ]\n}\n')))))}f.isMDXComponent=!0},540:function(e,n,t){n.Z=t.p+"assets/images/illustration-training-22112a4ec017ebaf5f8c40832742148d.png"}}]);
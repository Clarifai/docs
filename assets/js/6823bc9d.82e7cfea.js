"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[1718],{49256:(n,e,t)=>{t.d(e,{A:()=>a});const a=t.p+"assets/images/illustration-training-22112a4ec017ebaf5f8c40832742148d.png"},65537:(n,e,t)=>{t.d(e,{A:()=>A});var a=t(96540),s=t(18215),i=t(65627),o=t(56347),r=t(50372),l=t(30604),c=t(11861),u=t(78749);function p(n){return a.Children.toArray(n).filter((n=>"\n"!==n)).map((n=>{if(!n||(0,a.isValidElement)(n)&&function(n){const{props:e}=n;return!!e&&"object"==typeof e&&"value"in e}(n))return n;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof n.type?n.type:n.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function d(n){const{values:e,children:t}=n;return(0,a.useMemo)((()=>{const n=e??function(n){return p(n).map((n=>{let{props:{value:e,label:t,attributes:a,default:s}}=n;return{value:e,label:t,attributes:a,default:s}}))}(t);return function(n){const e=(0,c.XI)(n,((n,e)=>n.value===e.value));if(e.length>0)throw new Error(`Docusaurus error: Duplicate values "${e.map((n=>n.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(n),n}),[e,t])}function _(n){let{value:e,tabValues:t}=n;return t.some((n=>n.value===e))}function h(n){let{queryString:e=!1,groupId:t}=n;const s=(0,o.W6)(),i=function(n){let{queryString:e=!1,groupId:t}=n;if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:e,groupId:t});return[(0,l.aZ)(i),(0,a.useCallback)((n=>{if(!i)return;const e=new URLSearchParams(s.location.search);e.set(i,n),s.replace({...s.location,search:e.toString()})}),[i,s])]}function m(n){const{defaultValue:e,queryString:t=!1,groupId:s}=n,i=d(n),[o,l]=(0,a.useState)((()=>function(n){let{defaultValue:e,tabValues:t}=n;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!_({value:e,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${t.map((n=>n.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const a=t.find((n=>n.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:e,tabValues:i}))),[c,p]=h({queryString:t,groupId:s}),[m,E]=function(n){let{groupId:e}=n;const t=function(n){return n?`docusaurus.tab.${n}`:null}(e),[s,i]=(0,u.Dv)(t);return[s,(0,a.useCallback)((n=>{t&&i.set(n)}),[t,i])]}({groupId:s}),I=(()=>{const n=c??m;return _({value:n,tabValues:i})?n:null})();(0,r.A)((()=>{I&&l(I)}),[I]);return{selectedValue:o,selectValue:(0,a.useCallback)((n=>{if(!_({value:n,tabValues:i}))throw new Error(`Can't select invalid tab value=${n}`);l(n),p(n),E(n)}),[p,E,i]),tabValues:i}}var E=t(9136);const I={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var g=t(74848);function f(n){let{className:e,block:t,selectedValue:a,selectValue:o,tabValues:r}=n;const l=[],{blockElementScrollPositionUntilNextRender:c}=(0,i.a_)(),u=n=>{const e=n.currentTarget,t=l.indexOf(e),s=r[t].value;s!==a&&(c(e),o(s))},p=n=>{let e=null;switch(n.key){case"Enter":u(n);break;case"ArrowRight":{const t=l.indexOf(n.currentTarget)+1;e=l[t]??l[0];break}case"ArrowLeft":{const t=l.indexOf(n.currentTarget)-1;e=l[t]??l[l.length-1];break}}e?.focus()};return(0,g.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":t},e),children:r.map((n=>{let{value:e,label:t,attributes:i}=n;return(0,g.jsx)("li",{role:"tab",tabIndex:a===e?0:-1,"aria-selected":a===e,ref:n=>{l.push(n)},onKeyDown:p,onClick:u,...i,className:(0,s.A)("tabs__item",I.tabItem,i?.className,{"tabs__item--active":a===e}),children:t??e},e)}))})}function C(n){let{lazy:e,children:t,selectedValue:i}=n;const o=(Array.isArray(t)?t:[t]).filter(Boolean);if(e){const n=o.find((n=>n.props.value===i));return n?(0,a.cloneElement)(n,{className:(0,s.A)("margin-top--md",n.props.className)}):null}return(0,g.jsx)("div",{className:"margin-top--md",children:o.map(((n,e)=>(0,a.cloneElement)(n,{key:e,hidden:n.props.value!==i})))})}function D(n){const e=m(n);return(0,g.jsxs)("div",{className:(0,s.A)("tabs-container",I.tabList),children:[(0,g.jsx)(f,{...e,...n}),(0,g.jsx)(C,{...e,...n})]})}function A(n){const e=(0,E.A)();return(0,g.jsx)(D,{...n,children:p(n.children)},String(e))}},70988:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>$,contentTitle:()=>Y,default:()=>V,frontMatter:()=>L,metadata:()=>a,toc:()=>k});const a=JSON.parse('{"id":"api-guide/model/custom-model-walkthrough","title":"Custom Transfer Learning Models","description":"Develop your own custom models using transfer learning","source":"@site/docs/api-guide/model/custom-model-walkthrough.md","sourceDirName":"api-guide/model","slug":"/api-guide/model/custom-model-walkthrough","permalink":"/api-guide/model/custom-model-walkthrough","draft":false,"unlisted":false,"editUrl":"https://github.com/Clarifai/docs/blob/main/docs/api-guide/model/custom-model-walkthrough.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"description":"Develop your own custom models using transfer learning","sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Model Types","permalink":"/api-guide/model/model-types"},"next":{"title":"Custom Transfer Learning Text Model","permalink":"/api-guide/model/custom-text-model-walkthrough"}}');var s=t(74848),i=t(28453),o=t(65537),r=t(79329),l=t(58069);const c="##############################################################################\n# In this section, we set the user authentication, app ID, and the images and \n# concepts we want to add. Change these strings to run your own example.\n##############################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to add your own images with concepts\nIMAGE_URL_1 = 'https://samples.clarifai.com/puppy.jpeg'\nIMAGE_URL_2 = 'https://samples.clarifai.com/wedding.jpg'\nCONCEPT_ID_1 = 'charlie'\nCONCEPT_ID_2 = 'our_wedding'\nCONCEPT_ID_3 = 'our_wedding'\nCONCEPT_ID_4 = 'charlie'\nCONCEPT_ID_5 = 'cat'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\npost_inputs_response = stub.PostInputs(\n    service_pb2.PostInputsRequest(\n        user_app_id=userDataObject,\n        inputs=[\n            resources_pb2.Input(\n                data=resources_pb2.Data(\n                    image=resources_pb2.Image(\n                        url=IMAGE_URL_1,\n                        allow_duplicate_url=True\n                    ),\n                    concepts=[\n                        resources_pb2.Concept(id=CONCEPT_ID_1, value=1),\n                        resources_pb2.Concept(id=CONCEPT_ID_2, value=0),\n                    ]\n                )\n            ),\n            resources_pb2.Input(\n                data=resources_pb2.Data(\n                    image=resources_pb2.Image(\n                        url=IMAGE_URL_2,\n                        allow_duplicate_url=True\n                    ),\n                    concepts=[\n                        resources_pb2.Concept(id=CONCEPT_ID_3, value=1),\n                        resources_pb2.Concept(id=CONCEPT_ID_4, value=0),\n                        resources_pb2.Concept(id=CONCEPT_ID_5, value=0),\n                    ]\n                )\n            ),\n        ]\n    ),\n    metadata=metadata\n)\n\nif post_inputs_response.status.code != status_code_pb2.SUCCESS:\n    print(\"There was an error with your request!\")\n    for input_object in post_inputs_response.inputs:\n        print(\"Input \" + input_object.id + \" status:\")\n        print(input_object.status)\n   \n    print(post_inputs_response.status)\n    raise Exception(\"Post inputs failed, status: \" + post_inputs_response.status.description)\n\nprint(post_inputs_response)\n",u="##############################################################################\n# In this section, we set the user authentication, app ID, and model ID.\n# Change these strings to run your own example.\n##############################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change this to create your own model\nMODEL_ID = 'my-pets'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\npost_models_response = stub.PostModels(\n    service_pb2.PostModelsRequest(\n        user_app_id=userDataObject,\n        models=[\n            resources_pb2.Model(\n                id=MODEL_ID                            \n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif post_models_response.status.code != status_code_pb2.SUCCESS:\n    print(post_models_response.status)\n    raise Exception(\"Post models failed, status: \" + post_models_response.status.description)\n\n",p="########################################################################################\n# In this section, we set the user authentication, app ID, model ID, and concept IDs.\n# Change these strings to run your own example.\n########################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to train your own model\nMODEL_ID = 'my-pets'\nCONCEPT_ID_1 = 'charlie'\nCONCEPT_ID_2 = 'our_wedding'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\npost_model_versions = stub.PostModelVersions(\n    service_pb2.PostModelVersionsRequest(\n        user_app_id=userDataObject,\n        model_id=MODEL_ID,\n        model_versions=[\n            resources_pb2.ModelVersion(\n                output_info=resources_pb2.OutputInfo(\n                    data=resources_pb2.Data(\n                        concepts=[\n                            resources_pb2.Concept(id=CONCEPT_ID_1, value=1), # 1 means true, this concept is present\n                            resources_pb2.Concept(id=CONCEPT_ID_2, value=1)\n                            ] \n                        ),\n                )\n            )]\n    ),\n    metadata=metadata\n)\n\nif post_model_versions.status.code != status_code_pb2.SUCCESS:\n    print(post_model_versions.status)\n    raise Exception(\"Post models versions failed, status: \" + post_model_versions.status.description)\n",d="####################################################################################\n# In this section, we set the user authentication, app ID, model ID, model version, \n# and image URL. Change these strings to run your own example.\n####################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to make your own predictions\nMODEL_ID = 'my-pets'\nMODEL_VERSION = '8eb21f63ba9d40c7b84ecfd664ac603d'\nIMAGE_URL = 'https://samples.clarifai.com/puppy.jpeg'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\npost_model_outputs_response = stub.PostModelOutputs(\n    service_pb2.PostModelOutputsRequest(\n        user_app_id=userDataObject,\n        model_id=MODEL_ID,\n        version_id=MODEL_VERSION,  # This is optional. Defaults to the latest model version.\n        inputs=[\n            resources_pb2.Input(\n                data=resources_pb2.Data(\n                    image=resources_pb2.Image(\n                        url=IMAGE_URL\n                    )\n                )\n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif post_model_outputs_response.status.code != status_code_pb2.SUCCESS:\n    print(post_model_outputs_response.status)\n    raise Exception(\"Post model outputs failed, status: \" + post_model_outputs_response.status.description)\n\n# Since we have one input, one output will exist here.\noutput = post_model_outputs_response.outputs[0]\n\nprint(\"Predicted concepts:\")\nfor concept in output.data.concepts:\n    print(\"%s %.2f\" % (concept.name, concept.value))\n\n# Uncomment this line to print the raw output\n#print(post_model_outputs_response)",_='\x3c!--index.html file--\x3e\n\n<script>\n    //////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the images and \n    // concepts we want to add. Change these strings to run your own example.\n    /////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = \'YOUR_USER_ID_HERE\';\n    // Your PAT (Personal Access Token) can be found in the Account\'s Security section\n    const PAT = \'YOUR_PAT_HERE\';\n    const APP_ID = \'YOUR_APP_ID_HERE\';\n    // Change these to add your own images with concepts\n    const IMAGE_URL_1 = \'https://samples.clarifai.com/puppy.jpeg\';\n    const IMAGE_URL_2 = \'https://samples.clarifai.com/wedding.jpg\';\n    const CONCEPT_ID_1 = \'charlie\';\n    const CONCEPT_ID_2 = \'our_wedding\';\n    const CONCEPT_ID_3 = \'our_wedding\';\n    const CONCEPT_ID_4 = \'charlie\';\n    const CONCEPT_ID_5 = \'cat\';\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        "user_app_id": {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        "inputs": [\n            {\n                "data": {\n                    "image": {\n                        "url": IMAGE_URL_1,\n                        "allow_duplicate_url": true\n                    },\n                    "concepts": [\n                        {\n                            "id": CONCEPT_ID_1,\n                            "value": 1\n                        },\n                        {\n                            "id": CONCEPT_ID_2,\n                            "value": 0\n                        }\n                    ]\n                }\n            },\n            {\n                "data": {\n                    "image": {\n                        "url": IMAGE_URL_2,\n                        "allow_duplicate_url": true\n                    },\n                    "concepts": [\n                        {\n                            "id": CONCEPT_ID_3,\n                            "value": 1\n                        },\n                        {\n                            "id": CONCEPT_ID_4,\n                            "value": 0\n                        },\n                        {\n                            "id": CONCEPT_ID_5,\n                            "value": 0\n                        }\n                    ]\n                }\n            }\n        ]\n    });\n\n    const requestOptions = {\n        method: \'POST\',\n        headers: {\n            \'Accept\': \'application/json\',\n            \'Authorization\': \'Key \' + PAT\n        },\n        body: raw\n    };\n\n    fetch("https://api.clarifai.com/v2/inputs", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log(\'error\', error));\n\n<\/script>',h="\x3c!--index.html file--\x3e\n\n<script>\n    //////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and model ID.\n    // Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = 'YOUR_USER_ID_HERE';\n    // Your PAT (Personal Access Token) can be found in the Account's Security section\n    const PAT = 'YOUR_PAT_HERE';\n    const APP_ID = 'YOUR_APP_ID_HERE';\n    // Change this to create your own model\n    const MODEL_ID = 'my-pets';\n        \n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        \"user_app_id\": {\n            \"user_id\": USER_ID,\n            \"app_id\": APP_ID\n        },\n        \"model\": {\n            \"id\": MODEL_ID       \n        }\n    });\n\n    const requestOptions = {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        },\n        body: raw\n    };\n\n    fetch(\"https://api.clarifai.com/v2/models\", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n\n<\/script>",m="\x3c!--index.html file--\x3e\n\n<script>\n  ////////////////////////////////////////////////////////////////////////////////////////\n  // In this section, we set the user authentication, app ID, model ID, and concept IDs. \n  // Change these strings to run your own example.\n  ///////////////////////////////////////////////////////////////////////////////////////\n\n  const USER_ID = 'YOUR_USER_ID_HERE';\n  // Your PAT (Personal Access Token) can be found in the Account's Security section\n  const PAT = 'YOUR_PAT_HERE';\n  const APP_ID = 'YOUR_APP_ID_HERE';\n  // Change these to train your own model\n  const MODEL_ID = 'my-pets';  \n  const CONCEPT_ID_1 = 'charlie';\n  const CONCEPT_ID_2 = 'our_wedding';\n\n  ///////////////////////////////////////////////////////////////////////////////////\n  // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n  ///////////////////////////////////////////////////////////////////////////////////\n\n  const raw = JSON.stringify({\n      \"user_app_id\": {\n          \"user_id\": USER_ID,\n          \"app_id\": APP_ID\n      },         \n      \"model_versions\":[{\n          \"output_info\": {\n              \"data\":{\n                  \"concepts\":[\n                          {\n                              \"id\": CONCEPT_ID_1,\n                              \"value\": 1\n                          },\n                          {\n                              \"id\": CONCEPT_ID_2,\n                              \"value\": 1\n                          },\n                      ]\n                  }\n              }\n          }]              \n \n  });\n\n  const requestOptions = {\n      method: 'POST',\n      headers: {\n          'Content-Type': 'application/json',\n          'Authorization': 'Key ' + PAT\n      },\n      body: raw\n  };\n\n  fetch(`https://api.clarifai.com/v2/models/${MODEL_ID}/versions`, requestOptions)\n      .then(response => response.text())\n      .then(result => console.log(result))\n      .catch(error => console.log('error', error));\n\n<\/script>",E="\x3c!--index.html file--\x3e\n\n<script>\n    //////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, model ID, model version, \n    // and image URL. Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = 'YOUR_USER_ID_HERE';\n    // Your PAT (Personal Access Token) can be found in the Account's Security section\n    const PAT = 'YOUR_PAT_HERE';\n    const APP_ID = 'YOUR_APP_ID_HERE';\n    // Change these to make your own predictions\n    const MODEL_ID = 'my-pets';\n    const MODEL_VERSION = '6f2c3e043b3e49bdafd38851fb5675d5';\n    const IMAGE_URL = 'https://samples.clarifai.com/metro-north.jpg';\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        \"user_app_id\": {\n            \"user_id\": USER_ID,\n            \"app_id\": APP_ID\n        },\n        \"inputs\": [\n            {\n                \"data\": {\n                    \"image\": {\n                        \"url\": IMAGE_URL\n                    }\n                }\n            }\n        ]\n    });\n\n    const requestOptions = {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        },\n        body: raw\n    };\n\n    // NOTE: MODEL_VERSION_ID is optional, you can also call prediction with the MODEL_ID only\n    // https://api.clarifai.com/v2/models/{YOUR_MODEL_ID}/outputs\n    // this will default to the latest version_id\n\n    fetch(`https://api.clarifai.com/v2/models/${MODEL_ID}/versions/${MODEL_VERSION}/outputs`, requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n\n<\/script>",I="//index.js file\n\n//////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the images and \n// concepts we want to add. Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = 'YOUR_USER_ID_HERE';\n// Your PAT (Personal Access Token) can be found in the Account's Security section\nconst PAT = 'YOUR_PAT_HERE';\nconst APP_ID = 'YOUR_APP_ID_HERE';\n// Change these to add your own images with concepts\nconst IMAGE_URL_1 = 'https://samples.clarifai.com/puppy.jpeg';\nconst IMAGE_URL_2 = 'https://samples.clarifai.com/wedding.jpg';\nconst CONCEPT_ID_1 = 'charlie';\nconst CONCEPT_ID_2 = 'our_wedding';\nconst CONCEPT_ID_3 = 'our_wedding';\nconst CONCEPT_ID_4 = 'charlie';\nconst CONCEPT_ID_5 = 'cat';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require(\"clarifai-nodejs-grpc\");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set(\"authorization\", \"Key \" + PAT);\n\nstub.PostInputs(\n    {\n        user_app_id: {\n            \"user_id\": USER_ID,\n            \"app_id\": APP_ID\n        },\n        inputs: [\n            {\n                data: {\n                    image: { url: IMAGE_URL_1, allow_duplicate_url: true },\n                    concepts: [{ id: CONCEPT_ID_1, value: 1 }, { id: CONCEPT_ID_2, value: 0 }]\n                }\n            },\n            {\n                data: {\n                    image: { url: IMAGE_URL_2, allow_duplicate_url: true },\n                    concepts: [{ id: CONCEPT_ID_3, value: 1 }, { id: CONCEPT_ID_4, value: 0 }, { id: CONCEPT_ID_5, value: 0 }]\n                }\n            },\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            for (const input of response.inputs) {\n                console.log(\"Input \" + input.id + \" status: \");\n                console.log(JSON.stringify(input.status, null, 2) + \"\\n\");\n            }\n\n            throw new Error(\"Post inputs failed, status: \" + response.status.description);\n        }\n    }\n);",g='//index.js file\n\n///////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and model ID.\n// Change these strings to run your own example.\n///////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n// Change this to create your own model\nconst MODEL_ID = \'my-pets\';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PostModels(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        models: [\n            {\n                id: MODEL_ID                              \n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post models failed, status: " + response.status.description);\n        }\n    }\n);',f="//index.js file\n\n////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, model ID, and concept IDs.\n// Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = 'YOUR_USER_ID_HERE';\n// Your PAT (Personal Access Token) can be found in the Account's Security section\nconst PAT = 'YOUR_PAT_HERE';\nconst APP_ID = 'YOUR_APP_ID_HERE';\n// Change these to train your own model\nconst MODEL_ID = 'my-pets';\nconst CONCEPT_ID_1 = 'charlie';\nconst CONCEPT_ID_2 = 'our_wedding';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require(\"clarifai-nodejs-grpc\");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set(\"authorization\", \"Key \" + PAT);\n\nstub.PostModelVersions(\n    {\n        user_app_id: {\n            \"user_id\": USER_ID,\n            \"app_id\": APP_ID\n        },\n        model_id: MODEL_ID,\n        model_versions: [{\n            output_info: {\n                data: { concepts: [{ id: CONCEPT_ID_1, value: 1 }, { id: CONCEPT_ID_2, value: 1 }] },\n            }\n        }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error(\"Post models failed, status: \" + response.status.description);\n        }\n    }\n);",C='//index.js file\n\n//////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, model ID, model version, \n// and image URL. Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n// Change these to make your own predictions\nconst MODEL_ID = \'my-pets\';\nconst MODEL_VERSION = \'6f2c3e043b3e49bdafd38851fb5675d5\';\nconst IMAGE_URL = \'https://samples.clarifai.com/metro-north.jpg\';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PostModelOutputs(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        model_id: MODEL_ID,\n        version_id: MODEL_VERSION,  // This is optional. Defaults to the latest model version\n        inputs: [\n            { data: { image: { url: IMAGE_URL } } }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post model outputs failed, status: " + response.status.description);\n        }\n\n        // Since we have one input, one output will exist here.\n        const output = response.outputs[0];\n\n        console.log("Predicted concepts:");\n        for (const concept of output.data.concepts) {\n            console.log(concept.name + " " + concept.value);\n        }\n    }\n);',D='package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    //////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the images and \n    // concepts we want to add. Change these strings to run your own example.\n    /////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to add your own images with concepts\n    static final String IMAGE_URL_1 = "https://samples.clarifai.com/puppy.jpeg";\n    static final String IMAGE_URL_2 = "https://samples.clarifai.com/wedding.jpg";\n    static final String CONCEPT_ID_1 = "charlie";\n    static final String CONCEPT_ID_2 = "our_wedding";\n    static final String CONCEPT_ID_3 = "our_wedding";\n    static final String CONCEPT_ID_4 = "charlie";\n    static final String CONCEPT_ID_5 = "cat";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\t\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiInputResponse postInputsResponse = stub.postInputs(\n            PostInputsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .addInputs(\n                Input.newBuilder()\n                .setData(\n                    Data.newBuilder()\n                    .setImage(\n                        Image.newBuilder()\n                        .setUrl(IMAGE_URL_1)\n                        .setAllowDuplicateUrl(true)\n                    )\n                    .addConcepts(Concept.newBuilder().setId(CONCEPT_ID_1).setValue(1))\n                    .addConcepts(Concept.newBuilder().setId(CONCEPT_ID_2).setValue(0))\n                )\n            )\n            .addInputs(\n                Input.newBuilder()\n                .setData(\n                    Data.newBuilder()\n                    .setImage(\n                        Image.newBuilder()\n                        .setUrl(IMAGE_URL_2)\n                        .setAllowDuplicateUrl(true)\n                    )\n                    .addConcepts(Concept.newBuilder().setId(CONCEPT_ID_3).setValue(1))\n                    .addConcepts(Concept.newBuilder().setId(CONCEPT_ID_4).setValue(0))\n                    .addConcepts(Concept.newBuilder().setId(CONCEPT_ID_5).setValue(0))\n                )\n            )\n            .build()\n        );\n\n        if (postInputsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            for (Input input: postInputsResponse.getInputsList()) {\n                System.out.println("Input " + input.getId() + " status: ");\n                System.out.println(input.getStatus() + "\\n");\n            }\n\n            throw new RuntimeException("Post inputs failed, status: " + postInputsResponse.getStatus());\n        }\n\n    }\n\n}',A='package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    ////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, model ID, and model type ID.\n    // Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change this to create your own model    \n    static final String MODEL_ID = "my-pets";\n       \n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\t\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        SingleModelResponse postModelsResponse = stub.postModels(\n            PostModelsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .addModels(\n                Model.newBuilder()\n                .setId(MODEL_ID)                            \n            ).build()\n        );\n\n        if (postModelsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post models failed, status: " + postModelsResponse.getStatus());\n        }\n\n    }\n\n}',P='package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    /////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, model ID, and concept IDs.\n    // Change these strings to run your own example.\n    /////////////////////////////////////////////////////////////////////////////////////////////\n    \n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    // Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to train your own model\n    static final String MODEL_ID = "my-pets";\n    static final String CONCEPT_ID_1 = "charlie";\n    static final String CONCEPT_ID_2 = "our_wedding";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\t\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n                .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        SingleModelResponse postModelVersionsResponse = stub.postModelVersions(\n                PostModelVersionsRequest.newBuilder()\n                        .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n                        .setModelId(MODEL_ID)\n                        .addModelVersions(ModelVersion.newBuilder()\n                                .setOutputInfo(OutputInfo.newBuilder()\n                                        .setData(Data.newBuilder()\n                                                .addConcepts(Concept.newBuilder()\n                                                        .setId(CONCEPT_ID_1)\n                                                        .setValue(1)\n                                                )\n                                                .addConcepts(Concept.newBuilder()\n                                                        .setId(CONCEPT_ID_2)\n                                                        .setValue(1)\n                                                )\n                                        )\n                                )\n                        )\n                        .build()\n        );\n\n        if (postModelVersionsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post model outputs failed, status: " + postModelVersionsResponse.getStatus());\n        }\n\n    }\n}\n',O='package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    //////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, model ID, model version, \n    // and image URL. Change these strings to run your own example\n    /////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\t\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to make your own predictions\n    static final String MODEL_ID = "my-pets";\n    static final String MODEL_VERSION = "6f2c3e043b3e49bdafd38851fb5675d5";\n    static final String IMAGE_URL = "https://samples.clarifai.com/metro-north.jpg";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\t\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiOutputResponse postModelOutputsResponse = stub.postModelOutputs(\n            PostModelOutputsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .setModelId(MODEL_ID)\n            .setVersionId(MODEL_VERSION) // This is optional. Defaults to the latest model version \n            .addInputs(\n                Input.newBuilder().setData(\n                    Data.newBuilder().setImage(\n                        Image.newBuilder().setUrl(IMAGE_URL)\n                    )\n                )\n            )\n            .build()\n        );\n\n        if (postModelOutputsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post model outputs failed, status: " + postModelOutputsResponse.getStatus());\n        }\n\n        // Since we have one input, one output will exist here.\n        Output output = postModelOutputsResponse.getOutputs(0);\n\n        System.out.println("Predicted concepts:");\n        for (Concept concept: output.getData().getConceptsList()) {\n            System.out.printf("%s %.2f%n", concept.getName(), concept.getValue());\n        }\n\n    }\n\n}',w='curl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/inputs" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "inputs": [\n      {\n        "data": {\n          "image": {\n            "url": "https://samples.clarifai.com/puppy.jpeg",\n            "allow_duplicate_url": true\n          },\n          "concepts":[\n            {\n              "id": "charlie",\n              "value": 1\n            },\n            {\n              "id": "our_wedding",\n              "value": 0\n            }\n          ]\n        }\n      },\n      {\n        "data": {\n          "image": {\n            "url": "https://samples.clarifai.com/wedding.jpg",\n            "allow_duplicate_url": true\n          },\n          "concepts":[\n            {\n              "id": "our_wedding",\n              "value": 1\n            },\n            {\n              "id": "charlie",\n              "value": 0\n            },\n            {\n              "id": "cat",\n              "value": 0\n            }\n          ]\n        }\n      }\n    ]\n  }\'',T='curl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/models" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "model": {\n      "id": "my-pets"      \n    }\n  }\'',R='curl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/models/YOUR_MODEL_ID_HERE/versions" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "model_versions":[{\n        "output_info": {\n            "data":{\n                "concepts":[\n                        {\n                          "id": "charlie",\n                          "value": 1\n                        },\n                        {\n                          "id": "our_wedding",\n                          "value": 1\n                        }\n                    ]\n                }\n            }\n        }]  \n  }\'',b='curl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/models/YOUR_MODEL_ID_HERE/versions/YOUR_MODEL_VERSION_ID_HERE/outputs" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "inputs": [\n      {\n        "data": {\n          "image": {\n            "url": "https://samples.clarifai.com/metro-north.jpg"\n          }\n        }\n      }\n    ]\n  }\'\n  ',S='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the images and \n// concepts we want to add. Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change these to add your own images with concepts\n$IMAGE_URL_1 = "https://samples.clarifai.com/puppy.jpeg";\n$IMAGE_URL_2 = "https://samples.clarifai.com/wedding.jpg";\n$CONCEPT_ID_1 = "charlie";\n$CONCEPT_ID_2 = "our_wedding";\n$CONCEPT_ID_3 = "our_wedding";\n$CONCEPT_ID_4 = "charlie";\n$CONCEPT_ID_5 = "cat";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\Api\\Concept;\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\Data;\nuse Clarifai\\Api\\Image;\nuse Clarifai\\Api\\Input;\nuse Clarifai\\Api\\PostInputsRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PostInputs(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new PostInputsRequest([\n        "user_app_id" => $userDataObject,\n        "inputs" => [\n            new Input([\n                // The Input object wraps the Data object in order to meet the API specification                    \n                "data" => new Data([\n                    // The Data object is constructed around the Image object. It offers a container that has additional image independent\n                    // metadata. In this particular use case, no other metadata is needed to be specified\n                    "image" => new Image([\n                        // In the Clarifai platform, an image is defined by a special Image object\n                        "url" => $IMAGE_URL_1,\n                        "allow_duplicate_url" => true\n                    ]),\n                    "concepts" => [\n                        new Concept([\n                            "id" => $CONCEPT_ID_1,\n                            "value" => 1\n                        ]),\n                        new Concept([\n                            "id" => $CONCEPT_ID_2,\n                            "value" => 0\n                        ])\n                    ]\n                ])\n            ]),\n            new Input([\n                "data" => new Data([\n                    "image" => new Image([\n                        "url" => $IMAGE_URL_2,\n                        "allow_duplicate_url" => true\n                    ]),\n                    "concepts" => [\n                        new Concept([\n                            "id" => $CONCEPT_ID_3,\n                            "value" => 1\n                        ]),\n                        new Concept([\n                            "id" => $CONCEPT_ID_4,\n                            "value" => 0\n                        ]),\n                        new Concept([\n                            "id" => $CONCEPT_ID_5,\n                            "value" => 0\n                        ])\n                    ]\n                ])\n            ])\n        ]\n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\necho $response->serializeToJsonString();\n',N='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n/////////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and model ID.\n// Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change these to create your own model\n$MODEL_ID = "my-pets";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\Model;\nuse Clarifai\\Api\\PostModelsRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID,\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PostModels(\n        // The request object carries the request along with the request status and other metadata related to the request itself\n        new PostModelsRequest([\n            "user_app_id" => $userDataObject,\n            "models" => [\n                new Model([                    \n                    "id" => $MODEL_ID                    \n                ]),\n            ],\n        ]),\n        $metadata\n    )->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure\n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription() . " " . $response->getStatus()->getDetails());\n}\n\n?>\n',U='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n/////////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, model ID, and concept ID. \n// Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change these to create your own model\n$MODEL_ID = "my-pets";\n$CONCEPT_ID_1 = "charlie";\n$CONCEPT_ID_2 = "our_wedding";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\PostModelVersionsRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\nuse Clarifai\\Api\\ModelVersion;\nuse Clarifai\\Api\\OutputInfo;\nuse Clarifai\\Api\\Data;\nuse Clarifai\\Api\\Concept;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID,\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PostModelVersions(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new PostModelVersionsRequest([\n        "user_app_id" => $userDataObject,\n        "model_id" => $MODEL_ID,\n        "model_versions" => [\n            new ModelVersion([\n                "output_info" => new OutputInfo([\n                    "data" => new Data([\n                        "concepts" => [\n                            new Concept([\n                                "id" => $CONCEPT_ID_1,\n                                "value" => 1,\n                            ]),\n                            new Concept([\n                                "id" => $CONCEPT_ID_2,\n                                "value" => 1,\n                            ]),\n                        ],\n                    ]),\n                ]),\n            ]),\n        ],\n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure\n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription() . " " . $response->getStatus()->getDetails());\n}\n',y='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n//////////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, model ID, model version,\n// and image URL. Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change these to whatever model and image URL you want to use\n$MODEL_ID = "my-pets";\n$MODEL_VERSION_ID = "8eb21f63ba9d40c7b84ecfd664ac603d";\n$IMAGE_URL = "https://samples.clarifai.com/puppy.jpeg";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\Data;\nuse Clarifai\\Api\\Image;\nuse Clarifai\\Api\\Input;\nuse Clarifai\\Api\\PostModelOutputsRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID,\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PostModelOutputs(\n        // The request object carries the request along with the request status and other metadata related to the request itself\n        new PostModelOutputsRequest([\n            "user_app_id" => $userDataObject,\n            "model_id" => $MODEL_ID,\n            "version_id" => $MODEL_VERSION_ID, // This is optional. Defaults to the latest model version\n            "inputs" => [\n                new Input([\n                    // The Input object wraps the Data object in order to meet the API specification\n                    "data" => new Data([\n                        // The Data object is constructed around the Image object. It offers a container that has additional image independent\n                        // metadata. In this particular use case, no other metadata is needed to be specified\n                        "image" => new Image([\n                            // In the Clarifai platform, an image is defined by a special Image object\n                            "url" => $IMAGE_URL,\n                        ]),\n                    ]),\n                ]),\n            ],\n        ]),\n        $metadata\n    )\n    ->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure\n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription() . " " . $response->getStatus()->getDetails());\n}\n\n// The output of a successful call can be used in many ways. In this example, we loop through all of the predicted concepts\n// and print them out along with their numerical prediction value (confidence)\necho "Predicted concepts: </br>";\nforeach ($response->getOutputs()[0]->getData()->getConcepts() as $concept) {\n    echo $concept->getName() . ": " . number_format($concept->getValue(), 2) . "</br>";\n}\n\n?>\n',v='status {\n  code: SUCCESS\n  description: "Ok"\n  req_id: "7ff42b88ef477bb9b9ecab0b61d051ca"\n}\ninputs {\n  id: "7b708ee204284ed0a914dc37a7def8be"\n  data {\n    image {\n      url: "https://samples.clarifai.com/puppy.jpeg"\n      image_info {\n        format: "UnknownImageFormat"\n        color_mode: "UnknownColorMode"\n      }\n    }\n    concepts {\n      id: "charlie"\n      name: "charlie"\n      value: 1.0\n      app_id: "test-app"\n    }\n    concepts {\n      id: "our_wedding"\n      name: "our_wedding"\n      app_id: "test-app"\n    }\n  }\n  created_at {\n    seconds: 1646288847\n    nanos: 89138802\n  }\n  modified_at {\n    seconds: 1646288847\n    nanos: 89138802\n  }\n  status {\n    code: INPUT_DOWNLOAD_PENDING\n    description: "Download pending"\n  }\n}\ninputs {\n  id: "5571376e9d42447dafb76711669f6731"\n  data {\n    image {\n      url: "https://samples.clarifai.com/wedding.jpg"\n      image_info {\n        format: "UnknownImageFormat"\n        color_mode: "UnknownColorMode"\n      }\n    }\n    concepts {\n      id: "our_wedding"\n      name: "our_wedding"\n      value: 1.0\n      app_id: "test-app"\n    }\n    concepts {\n      id: "charlie"\n      name: "charlie"\n      app_id: "test-app"\n    }\n    concepts {\n      id: "cat"\n      name: "cat"\n      app_id: "test-app"\n    }\n  }\n  created_at {\n    seconds: 1646288847\n    nanos: 89138802\n  }\n  modified_at {\n    seconds: 1646288847\n    nanos: 89138802\n  }\n  status {\n    code: INPUT_DOWNLOAD_PENDING\n    description: "Download pending"\n  }\n}\n',j='status {\n  code: SUCCESS\n  description: "Ok"\n  req_id: "c179a31bea659b27214213ee137215f8"\n}\nmodel {\n  id: "my-pets"\n  name: "my-pets"\n  created_at {\n    seconds: 1693506608\n    nanos: 652910264\n  }\n  app_id: "items-app"\n  user_id: "my-user-id"\n  model_type_id: "embedding-classifier"\n  visibility {\n    gettable: PRIVATE\n  }\n  metadata {\n  }\n  modified_at {\n    seconds: 1693506608\n    nanos: 652910264\n  }\n  presets {\n  }\n  workflow_recommended {\n  }\n}\n',x='status {\n  code: SUCCESS\n  description: "Ok"\n  req_id: "c2b73a383ff73d57ce10eb92d4ceeca3"\n}\nmodel {\n  id: "my-pets"\n  name: "my-pets"\n  created_at {\n    seconds: 1693501169\n    nanos: 811818000\n  }\n  app_id: "items-app"\n  model_version {\n    id: "adbd648acc8146f788520dad0376411e"\n    created_at {\n      seconds: 1693558909\n      nanos: 61554817\n    }\n    status {\n      code: MODEL_QUEUED_FOR_TRAINING\n      description: "Model is currently in queue for training."\n    }\n    active_concept_count: 2\n    visibility {\n      gettable: PRIVATE\n    }\n    app_id: "items-app"\n    user_id: "alfrick"\n    metadata {\n    }\n    output_info {\n      output_config {\n      }\n      message: "Show output_info with: GET /models/{model_id}/output_info"\n      params {\n        fields {\n          key: "max_concepts"\n          value {\n            number_value: 20.0\n          }\n        }\n        fields {\n          key: "min_value"\n          value {\n            number_value: 0.0\n          }\n        }\n        fields {\n          key: "select_concepts"\n          value {\n            list_value {\n            }\n          }\n        }\n      }\n    }\n    input_info {\n      params {\n      }\n      base_embed_model {\n        id: "general-image-embedding"\n        app_id: "main"\n        model_version {\n          id: "bb186755eda04f9cbb6fe32e816be104"\n        }\n        user_id: "clarifai"\n        model_type_id: "visual-embedder"\n      }\n    }\n    train_info {\n      params {\n        fields {\n          key: "dataset_id"\n          value {\n            string_value: ""\n          }\n        }\n        fields {\n          key: "dataset_version_id"\n          value {\n            string_value: ""\n          }\n        }\n        fields {\n          key: "enrich_dataset"\n          value {\n            string_value: "Automatic"\n          }\n        }\n      }\n    }\n    import_info {\n    }\n  }\n  user_id: "alfrick"\n  model_type_id: "embedding-classifier"\n  visibility {\n    gettable: PRIVATE\n  }\n  metadata {\n  }\n  modified_at {\n    seconds: 1693501169\n    nanos: 811818000\n  }\n  presets {\n  }\n  workflow_recommended {\n  }\n}',M='status {\n    code: SUCCESS\n    description: "Ok"\n    req_id: "db4cf89c13303aa9889a89f2ae0a91f4"\n  }\n  outputs {\n    id: "20ed3f59dc5b4b1e9082a7e91ff29f48"\n    status {\n      code: SUCCESS\n      description: "Ok"\n    }\n    created_at {\n      seconds: 1646333543\n      nanos: 352417324\n    }\n    model {\n      id: "my-pets"\n      name: "my-pets"\n      created_at {\n        seconds: 1646291711\n        nanos: 640607000\n      }\n      app_id: "test-app"\n      output_info {\n        output_config {\n        }\n        message: "Show output_info with: GET /models/{model_id}/output_info"\n        params {\n          fields {\n            key: "max_concepts"\n            value {\n              number_value: 20.0\n            }\n          }\n          fields {\n            key: "min_value"\n            value {\n              number_value: 0.0\n            }\n          }\n          fields {\n            key: "select_concepts"\n            value {\n              list_value {\n              }\n            }\n          }\n        }\n      }\n      model_version {\n        id: "8eb21f63ba9d40c7b84ecfd664ac603d"\n        created_at {\n          seconds: 1646330065\n          nanos: 537080000\n        }\n        status {\n          code: MODEL_TRAINED\n          description: "Model is trained and ready"\n        }\n        total_input_count: 14\n        completed_at {\n          seconds: 1646330068\n          nanos: 100250000\n        }\n        visibility {\n          gettable: PRIVATE\n        }\n        app_id: "test-app"\n        user_id: "ei2leoz3s3iy"\n        metadata {\n        }\n      }\n      user_id: "ei2leoz3s3iy"\n      input_info {\n      }\n      train_info {\n      }\n      model_type_id: "embedding-classifier"\n      visibility {\n        gettable: PRIVATE\n      }\n      modified_at {\n        seconds: 1646291711\n        nanos: 640607000\n      }\n      import_info {\n      }\n    }\n    input {\n      id: "f1ce5584c5e54653b722ac3ef163a077"\n      data {\n        image {\n          url: "https://samples.clarifai.com/puppy.jpeg"\n        }\n      }\n    }\n    data {\n      concepts {\n        id: "charlie"\n        name: "charlie"\n        value: 0.9998574256896973\n        app_id: "test-app"\n      }\n    }\n  }\n  ',H="Predicted concepts:\ncharlie 1.00",L={description:"Develop your own custom models using transfer learning",sidebar_position:3},Y="Custom Transfer Learning Models",$={},k=[{value:"Add Images With Concepts",id:"add-images-with-concepts",level:2},{value:"Create a Model",id:"create-a-model",level:2},{value:"Train the Model",id:"train-the-model",level:2},{value:"Predict With the Model",id:"predict-with-the-model",level:2}];function G(n){const e={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",img:"img",p:"p",strong:"strong",...(0,i.R)(),...n.components},{Details:a}=e;return a||function(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"custom-transfer-learning-models",children:"Custom Transfer Learning Models"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Develop your own custom models using transfer learning"})}),"\n",(0,s.jsx)("hr",{}),"\n",(0,s.jsxs)(e.p,{children:["You do not need many images to get started creating a custom model using our world-class ",(0,s.jsx)(e.a,{href:"https://docs.clarifai.com/portal-guide/model/model-types/transfer-learning/",children:"transfer learning"})," technology. We recommend starting with 10 and adding more as needed."]}),"\n",(0,s.jsxs)(e.p,{children:["Before you create and train your first model, you need to ",(0,s.jsx)(e.a,{href:"https://docs.clarifai.com/clarifai-basics/applications/#create-an-application",children:"create an application"})," and select ",(0,s.jsx)(e.strong,{children:"Image/Video"})," as the primary input type. The Base Workflow will be automatically selected for you."]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.img,{src:t(49256).A+"",width:"700",height:"440"})}),"\n",(0,s.jsx)(e.admonition,{type:"info",children:(0,s.jsxs)(e.p,{children:["The initialization code used in the following examples is outlined in detail on the ",(0,s.jsx)(e.a,{href:"https://docs.clarifai.com/api-guide/api-overview/api-clients/#client-installation-instructions",children:"client installation page."})]})}),"\n","\n","\n","\n","\n","\n","\n","\n","\n",(0,s.jsx)(e.h2,{id:"add-images-with-concepts",children:"Add Images With Concepts"}),"\n",(0,s.jsx)(e.admonition,{type:"tip",children:(0,s.jsxs)(e.p,{children:["This walkthrough example assumes that you've selected a Classification Base Workflow. If you choose a Detection Base Workflow, then this ",(0,s.jsx)(e.strong,{children:"Add Images With Concepts"})," example could throw an error message, such as ",(0,s.jsx)(e.code,{children:"Adding/patching inputs with pre-tagged concepts is not allowed for apps with a detection model in their base workflow. Please use Post or Patch Annotations instead."})," If you get such an error, you should first upload the inputs without any concepts attached and then use the ",(0,s.jsx)(e.a,{href:"https://docs.clarifai.com/api-guide/annotate/annotations/#add-annotations",children:"Annotations endpoint"})," to label the inputs."]})}),"\n",(0,s.jsx)(e.p,{children:"To get started training your own model, you need to first add images that already contain the concepts you want your model to see."}),"\n",(0,s.jsxs)(o.A,{children:[(0,s.jsx)(r.A,{value:"grpc_python",label:"gRPC Python",children:(0,s.jsx)(l.A,{className:"language-python",children:c})}),(0,s.jsx)(r.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(l.A,{className:"language-javascript",children:_})}),(0,s.jsx)(r.A,{value:"grpc_nodejs",label:"gRPC NodeJS",children:(0,s.jsx)(l.A,{className:"language-javascript",children:I})}),(0,s.jsx)(r.A,{value:"grpc_java",label:"gRPC Java",children:(0,s.jsx)(l.A,{className:"language-java",children:D})}),(0,s.jsx)(r.A,{value:"php",label:"PHP",children:(0,s.jsx)(l.A,{className:"language-php",children:S})}),(0,s.jsx)(r.A,{value:"curl",label:"cURL",children:(0,s.jsx)(l.A,{className:"language-bash",children:w})})]}),"\n",(0,s.jsxs)(a,{children:[(0,s.jsx)("summary",{children:"Raw Output Example"}),(0,s.jsx)(l.A,{className:"language-js",children:v})]}),"\n",(0,s.jsx)(e.h2,{id:"create-a-model",children:"Create a Model"}),"\n",(0,s.jsx)(e.p,{children:'After adding images with concepts, you are now ready to create a custom transfer learning model (also called an "embedding-classifier"). You need to provide an ID for the model.'}),"\n",(0,s.jsx)(e.admonition,{type:"tip",children:(0,s.jsxs)(e.p,{children:["If you want to ",(0,s.jsx)(e.a,{href:"https://docs.clarifai.com/api-guide/model/create-get-update-and-delete#create-a-model",children:"create another type of model"})," you could use the ",(0,s.jsx)(e.code,{children:"model_type_id"}),' parameter to specify it. Otherwise, the "embedding-classifier" model type will be created by default.']})}),"\n",(0,s.jsxs)(e.p,{children:["Take note of the ",(0,s.jsx)(e.code,{children:"model id"}),", as we'll need that for the next steps."]}),"\n",(0,s.jsxs)(o.A,{children:[(0,s.jsx)(r.A,{value:"grpc_python",label:"gRPC Python",children:(0,s.jsx)(l.A,{className:"language-python",children:u})}),(0,s.jsx)(r.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(l.A,{className:"language-javascript",children:h})}),(0,s.jsx)(r.A,{value:"grpc_nodejs",label:"gRPC NodeJS",children:(0,s.jsx)(l.A,{className:"language-javascript",children:g})}),(0,s.jsx)(r.A,{value:"grpc_java",label:"gRPC Java",children:(0,s.jsx)(l.A,{className:"language-java",children:A})}),(0,s.jsx)(r.A,{value:"php",label:"PHP",children:(0,s.jsx)(l.A,{className:"language-php",children:N})}),(0,s.jsx)(r.A,{value:"curl",label:"cURL",children:(0,s.jsx)(l.A,{className:"language-bash",children:T})})]}),"\n",(0,s.jsxs)(a,{children:[(0,s.jsx)("summary",{children:"Raw Output Example"}),(0,s.jsx)(l.A,{className:"language-js",children:j})]}),"\n",(0,s.jsx)(e.h2,{id:"train-the-model",children:"Train the Model"}),"\n",(0,s.jsx)(e.p,{children:"Now that you've added images with concepts, then created a model, the next step is to train the model. When you train a model, you are telling the system to look at all the images with concepts you've provided and learn from them."}),"\n",(0,s.jsx)(e.p,{children:"This train operation is asynchronous. It may take a few seconds for your model to be fully trained and ready."}),"\n",(0,s.jsxs)(e.p,{children:["Take note of the ",(0,s.jsx)(e.code,{children:"model_version id"})," in the response. We'll need that for the next section when we predict with the model."]}),"\n",(0,s.jsxs)(o.A,{children:[(0,s.jsx)(r.A,{value:"grpc_python",label:"gRPC Python",children:(0,s.jsx)(l.A,{className:"language-python",children:p})}),(0,s.jsx)(r.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(l.A,{className:"language-javascript",children:m})}),(0,s.jsx)(r.A,{value:"grpc_nodejs",label:"gRPC NodeJS",children:(0,s.jsx)(l.A,{className:"language-javascript",children:f})}),(0,s.jsx)(r.A,{value:"grpc_java",label:"gRPC Java",children:(0,s.jsx)(l.A,{className:"language-java",children:P})}),(0,s.jsx)(r.A,{value:"php",label:"PHP",children:(0,s.jsx)(l.A,{className:"language-php",children:U})}),(0,s.jsx)(r.A,{value:"curl",label:"cURL",children:(0,s.jsx)(l.A,{className:"language-bash",children:R})})]}),"\n",(0,s.jsxs)(a,{children:[(0,s.jsx)("summary",{children:"Raw Output Example"}),(0,s.jsx)(l.A,{className:"language-js",children:x})]}),"\n",(0,s.jsx)(e.h2,{id:"predict-with-the-model",children:"Predict With the Model"}),"\n",(0,s.jsxs)(e.p,{children:["Now that we have trained the model, we can start making predictions with it. In our predict call, we specify three items: the ",(0,s.jsx)(e.code,{children:"model id"}),", ",(0,s.jsx)(e.code,{children:"model version id"})," (optional, defaults to the latest trained version if omitted), and the ",(0,s.jsx)(e.code,{children:"input"})," we want a prediction for."]}),"\n",(0,s.jsx)(e.admonition,{type:"tip",children:(0,s.jsx)(e.p,{children:"You can repeat the above steps as often as you like. By adding more images with concepts and training, you can get the model to predict exactly how you want it to."})}),"\n",(0,s.jsxs)(o.A,{children:[(0,s.jsx)(r.A,{value:"grpc_python",label:"gRPC Python",children:(0,s.jsx)(l.A,{className:"language-python",children:d})}),(0,s.jsx)(r.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(l.A,{className:"language-javascript",children:E})}),(0,s.jsx)(r.A,{value:"grpc_nodejs",label:"gRPC NodeJS",children:(0,s.jsx)(l.A,{className:"language-javascript",children:C})}),(0,s.jsx)(r.A,{value:"grpc_java",label:"gRPC Java",children:(0,s.jsx)(l.A,{className:"language-java",children:O})}),(0,s.jsx)(r.A,{value:"php",label:"PHP",children:(0,s.jsx)(l.A,{className:"language-php",children:y})}),(0,s.jsx)(r.A,{value:"curl",label:"cURL",children:(0,s.jsx)(l.A,{className:"language-bash",children:b})})]}),"\n",(0,s.jsxs)(a,{children:[(0,s.jsx)("summary",{children:"Text Output Example"}),(0,s.jsx)(l.A,{className:"language-js",children:H})]}),"\n",(0,s.jsxs)(a,{children:[(0,s.jsx)("summary",{children:"Raw Output Example"}),(0,s.jsx)(l.A,{className:"language-js",children:M})]})]})}function V(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(G,{...n})}):G(n)}},79329:(n,e,t)=>{t.d(e,{A:()=>o});t(96540);var a=t(18215);const s={tabItem:"tabItem_Ymn6"};var i=t(74848);function o(n){let{children:e,hidden:t,className:o}=n;return(0,i.jsx)("div",{role:"tabpanel",className:(0,a.A)(s.tabItem,o),hidden:t,children:e})}}}]);
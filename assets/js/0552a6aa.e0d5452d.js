"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[4896],{45095:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>B,contentTitle:()=>G,default:()=>X,frontMatter:()=>V,metadata:()=>k,toc:()=>Y});var a=t(74848),i=t(28453),s=t(11470),o=t(19365),r=t(21432);const c="#######################################################################################################\n# In this section, we set the user authentication, user and app ID, model ID, model version ID, and\n# URL of the image we want as an input. Change these strings to run your own example.\n#######################################################################################################\n\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\n# Specify the correct user_id/app_id pairings\n# Since you're making inferences outside your app's scope\nUSER_ID = 'clarifai'\nAPP_ID = 'main'\n# Change these to whatever you want to process\nMODEL_ID = 'general-image-recognition'\nMODEL_VERSION_ID = 'aa7f35c01e0642fda5cf400f543e7c40'\nIMAGE_URL = 'https://samples.clarifai.com/metro-north.jpg'\n\n############################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n############################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\npost_model_outputs_response = stub.PostModelOutputs(\n    service_pb2.PostModelOutputsRequest(\n        user_app_id=userDataObject,  # The userDataObject is created in the overview and is required when using a PAT\n        model_id=MODEL_ID,\n        version_id=MODEL_VERSION_ID,  \n        inputs=[\n            \n            resources_pb2.Input(\n                data=resources_pb2.Data(\n                    image=resources_pb2.Image(\n                        url=IMAGE_URL\n                    )\n                )\n            )\n        ]\n    ),\n    metadata=metadata\n)\nif post_model_outputs_response.status.code != status_code_pb2.SUCCESS:\n    print(post_model_outputs_response.status)\n    raise Exception(\"Post model outputs failed, status: \" + post_model_outputs_response.status.description)\n\n# Since we have one input, one output will exist here\noutput = post_model_outputs_response.outputs[0]\n\nprint(\"Predicted concepts:\")\nfor concept in output.data.concepts:\n    print(\"%s %.2f\" % (concept.name, concept.value))\n\n# Uncomment this line to print the raw output\n#print(output)",u="#######################################################################################################\n# In this section, we set the user authentication, user and app ID, model details, URL of the image\n# we want as an input, and max concepts. Change these strings to run your own example.\n#######################################################################################################\n\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\n# Specify the correct user_id/app_id pairings\n# Since you're making inferences outside your app's scope\nUSER_ID = 'clarifai'\nAPP_ID = 'main'\n# Change these to whatever you want to process\nMODEL_ID = 'general-image-recognition'\nMODEL_VERSION_ID = 'aa7f35c01e0642fda5cf400f543e7c40'\nIMAGE_URL = 'https://samples.clarifai.com/metro-north.jpg'\nMAX_CONCEPTS = 3\n\n############################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n############################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\npost_model_outputs_response = stub.PostModelOutputs(\n    service_pb2.PostModelOutputsRequest(\n        user_app_id=userDataObject,  # The userDataObject is created in the overview and is required when using a PAT\n        model_id=MODEL_ID,\n        version_id=MODEL_VERSION_ID,  # This is optional. Defaults to the latest model version  \n        inputs=[\n            resources_pb2.Input(\n                data=resources_pb2.Data(\n                    image=resources_pb2.Image(\n                        url=IMAGE_URL\n                    )\n                )\n            )\n        ],\n        model=resources_pb2.Model(\n            output_info=resources_pb2.OutputInfo(\n                output_config=resources_pb2.OutputConfig(\n                    max_concepts=MAX_CONCEPTS\n                )\n            )\n        )\n    ),\n    metadata=metadata\n)\nif post_model_outputs_response.status.code != status_code_pb2.SUCCESS:\n    print(post_model_outputs_response.status)\n    raise Exception(\"Post model outputs failed, status: \" + post_model_outputs_response.status.description)\n\n# Since we have one input, one output will exist here.\noutput = post_model_outputs_response.outputs[0]\n\nprint(\"Predicted concepts:\")\nfor concept in output.data.concepts:\n    print(\"%s %.2f\" % (concept.name, concept.value))\n\n# Uncomment this line to print the raw output\n#print(output)",p="#########################################################################################################\n# In this section, we set the user authentication, user and app ID, model details, URL of the image\n# we want as an input, and minimum value. Change these strings to run your own example.\n#########################################################################################################\n\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\n# Specify the correct user_id/app_id pairings\n# Since you're making inferences outside your app's scope\nUSER_ID = 'clarifai'\nAPP_ID = 'main'\n# Change these to whatever you want to process\nMODEL_ID = 'general-image-recognition'\nMODEL_VERSION_ID = 'aa7f35c01e0642fda5cf400f543e7c40'\nIMAGE_URL = 'https://samples.clarifai.com/metro-north.jpg'\nMINIMUM_VALUE = 0.95\n\n############################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n############################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\npost_model_outputs_response = stub.PostModelOutputs(\n    service_pb2.PostModelOutputsRequest(\n        user_app_id=userDataObject,  # The userDataObject is created in the overview and is required when using a PAT\n        model_id=MODEL_ID,  \n        version_id=MODEL_VERSION_ID,  # This is optional. Defaults to the latest model version\n        inputs=[\n            resources_pb2.Input(\n                data=resources_pb2.Data(\n                    image=resources_pb2.Image(\n                        url=IMAGE_URL\n                    )\n                )\n            )\n        ],\n        model=resources_pb2.Model(\n            output_info=resources_pb2.OutputInfo(\n                output_config=resources_pb2.OutputConfig(\n                    min_value=MINIMUM_VALUE\n                )\n            )\n        )\n    ),\n    metadata=metadata\n)\nif post_model_outputs_response.status.code != status_code_pb2.SUCCESS:\n    print(post_model_outputs_response.status)\n    raise Exception(\"Post model outputs failed, status: \" + post_model_outputs_response.status.description)\n\n# Since we have one input, one output will exist here.\noutput = post_model_outputs_response.outputs[0]\n\nprint(\"Predicted concepts:\")\nfor concept in output.data.concepts:\n    print(\"%s %.2f\" % (concept.name, concept.value))\n\n# Uncomment this line to print the raw output\n#print(output)",l="#########################################################################################################\n# In this section, we set the user authentication, user and app ID, model details, URL of the image\n# we want as an input, and concept name and ID. Change these strings to run your own example.\n########################################################################################################\n\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\n# Specify the correct user_id/app_id pairings\n# Since you're making inferences outside your app's scope\nUSER_ID = 'clarifai'\nAPP_ID = 'main'\n# Change these to whatever you want to process\nMODEL_ID = 'general-image-recognition'\nMODEL_VERSION_ID = 'aa7f35c01e0642fda5cf400f543e7c40'\nIMAGE_URL = 'https://samples.clarifai.com/metro-north.jpg'\nCONCEPT_NAME = \"train\"\nCONCEPT_ID = \"ai_6kTjGfF6\"\n\n############################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n############################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\npost_model_outputs_response = stub.PostModelOutputs(\n    service_pb2.PostModelOutputsRequest(\n        user_app_id=userDataObject,  # The userDataObject is created in the overview and is required when using a PAT\n        model_id=MODEL_ID,  \n        version_id=MODEL_VERSION_ID,  # This is optional. Defaults to the latest model version\n        inputs=[\n            resources_pb2.Input(\n                data=resources_pb2.Data(\n                    image=resources_pb2.Image(\n                        url=IMAGE_URL\n                    )\n                )\n            )\n        ],\n        model=resources_pb2.Model(\n            output_info=resources_pb2.OutputInfo(\n                output_config=resources_pb2.OutputConfig(\n                    select_concepts=[\n                        # When selecting concepts, value is ignored, so no need to specify it\n                        resources_pb2.Concept(name=CONCEPT_NAME),\n                        resources_pb2.Concept(id=CONCEPT_ID)\n                    ]\n                )\n            )\n        )\n    ),\n    metadata=metadata\n)\nif post_model_outputs_response.status.code != status_code_pb2.SUCCESS:\n    print(post_model_outputs_response.status)\n    raise Exception(\"Post model outputs failed, status: \" + post_model_outputs_response.status.description)\n\n# Since we have one input, one output will exist here.\noutput = post_model_outputs_response.outputs[0]\n\nprint(\"Predicted concepts:\")\nfor concept in output.data.concepts:\n    print(\"%s %.2f\" % (concept.name, concept.value))\n\n# Uncomment this line to print the raw output\n#print(output)",d="\x3c!--index.html file--\x3e\n\n<script>\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, user and app ID, model ID, model version ID, and\n    // URL of the image we want as an input. Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    // Your PAT (Personal Access Token) can be found in the Account's Security section\n    const PAT = 'YOUR_PAT_HERE';\n    // Specify the correct user_id/app_id pairings\n    // Since you're making inferences outside your app's scope\n    const USER_ID = 'clarifai';    \n    const APP_ID = 'main';\n    // Change these to whatever you want to process\n    const MODEL_ID = 'general-image-recognition';\n    const MODEL_VERSION_ID = 'aa7f35c01e0642fda5cf400f543e7c40';\n    const IMAGE_URL = 'https://samples.clarifai.com/metro-north.jpg';    \n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        \"user_app_id\": {\n            \"user_id\": USER_ID,\n            \"app_id\": APP_ID\n        },\n        \"inputs\": [\n            {\n                \"data\": {\n                    \"image\": {\n                        \"url\": IMAGE_URL\n                    }\n                }\n            }\n        ]\n    });\n\n    const requestOptions = {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        },\n        body: raw\n    };\n\n    // NOTE: MODEL_VERSION_ID is optional, you can also call prediction with the MODEL_ID only\n    // https://api.clarifai.com/v2/models/{YOUR_MODEL_ID}/outputs\n    // this will default to the latest version_id\n\n    fetch(\"https://api.clarifai.com/v2/models/\" + MODEL_ID + \"/versions/\" + MODEL_VERSION_ID + \"/outputs\", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n<\/script>",m='\x3c!--index.html file--\x3e\n\n<script>\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, user and app ID, model details, URL of the image\n    // we want as an input, and max concepts. Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    // Your PAT (Personal Access Token) can be found in the Account\'s Security section\n    const PAT = \'YOUR_PAT_HERE\';\n    // Specify the correct user_id/app_id pairings\n    // Since you\'re making inferences outside your app\'s scope\n    const USER_ID = \'clarifai\';    \n    const APP_ID = \'main\';\n    // Change these to whatever you want to process\n    const MODEL_ID = \'general-image-recognition\';\n    const MODEL_VERSION_ID = \'aa7f35c01e0642fda5cf400f543e7c40\';\n    const IMAGE_URL = \'https://samples.clarifai.com/metro-north.jpg\';\n    const MAX_CONCEPTS = 3;\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        "user_app_id": {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        "inputs": [\n            {\n                "data": {\n                    "image": {\n                        "url": IMAGE_URL\n                    }\n                }\n            }\n        ],\n        "model": {\n            "output_info": {\n                "output_config": {\n                    "max_concepts": MAX_CONCEPTS\n                }\n            }\n        }\n    });\n\n    const requestOptions = {\n        method: \'POST\',\n        headers: {\n            \'Accept\': \'application/json\',\n            \'Authorization\': \'Key \' + PAT\n        },\n        body: raw\n    };\n\n    // NOTE: MODEL_VERSION_ID is optional, you can also call prediction with the MODEL_ID only\n    // https://api.clarifai.com/v2/models/{YOUR_MODEL_ID}/outputs\n    // this will default to the latest version_id\n\n    fetch("https://api.clarifai.com/v2/models/" + MODEL_ID + "/versions/" + MODEL_VERSION_ID + "/outputs", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log(\'error\', error));\n<\/script>',h='\x3c!--index.html file--\x3e\n\n<script>\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, user and app ID, model details, URL of the image\n    // we want as an input, and minimum value. Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    // Your PAT (Personal Access Token) can be found in the Account\'s Security section\n    const PAT = \'YOUR_PAT_HERE\';\n    // Specify the correct user_id/app_id pairings\n    // Since you\'re making inferences outside your app\'s scope\n    const USER_ID = \'clarifai\';    \n    const APP_ID = \'main\';\n    // Change these to whatever you want to process\n    const MODEL_ID = \'general-image-recognition\';   \n    const MODEL_VERSION_ID = \'aa7f35c01e0642fda5cf400f543e7c40\';\n    const IMAGE_URL = \'https://samples.clarifai.com/metro-north.jpg\';\n    const MINIMUM_VALUE = 0.95;\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        "user_app_id": {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        "inputs": [\n            {\n                "data": {\n                    "image": {\n                        "url": IMAGE_URL\n                    }\n                }\n            }\n        ],\n        "model": {\n            "output_info": {\n                "output_config": {\n                    "min_value": MINIMUM_VALUE\n                }\n            }\n        }\n    });\n\n    const requestOptions = {\n        method: \'POST\',\n        headers: {\n            \'Accept\': \'application/json\',\n            \'Authorization\': \'Key \' + PAT\n        },\n        body: raw\n    };\n\n    // NOTE: MODEL_VERSION_ID is optional, you can also call prediction with the MODEL_ID only\n    // https://api.clarifai.com/v2/models/{YOUR_MODEL_ID}/outputs\n    // this will default to the latest version_id\n\n    fetch("https://api.clarifai.com/v2/models/" + MODEL_ID + "/versions/" + MODEL_VERSION_ID + "/outputs", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log(\'error\', error));\n<\/script>',f='\x3c!--index.html file--\x3e\n\n<script>\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, user and app ID, model details, URL of the image\n    // we want as an input, and concept name and ID. Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    // Your PAT (Personal Access Token) can be found in the Account\'s Security section\n    const PAT = \'YOUR_PAT_HERE\';\n    // Specify the correct user_id/app_id pairings\n    // Since you\'re making inferences outside your app\'s scope\n    const USER_ID = \'clarifai\';    \n    const APP_ID = \'main\';\n    // Change these to whatever you want to process\n    const MODEL_ID = \'general-image-recognition\';   \n    const MODEL_VERSION_ID = \'aa7f35c01e0642fda5cf400f543e7c40\'; \n    const IMAGE_URL = \'https://samples.clarifai.com/metro-north.jpg\';\n    const CONCEPT_NAME = "train";\n    const CONCEPT_ID = "ai_6kTjGfF6";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        "user_app_id": {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        "inputs": [\n            {\n                "data": {\n                    "image": {\n                        "url": IMAGE_URL\n                    }\n                }\n            }\n        ],\n        "model": {\n            "output_info": {\n                "output_config": {\n                    "select_concepts": [\n                        { "name": CONCEPT_NAME },\n                        { "id": CONCEPT_ID }\n                    ]\n                }\n            }\n        }\n    });\n\n    const requestOptions = {\n        method: \'POST\',\n        headers: {\n            \'Accept\': \'application/json\',\n            \'Authorization\': \'Key \' + PAT\n        },\n        body: raw\n    };\n\n    // NOTE: MODEL_VERSION_ID is optional, you can also call prediction with the MODEL_ID only\n    // https://api.clarifai.com/v2/models/{YOUR_MODEL_ID}/outputs\n    // this will default to the latest version_id\n\n    fetch("https://api.clarifai.com/v2/models/" + MODEL_ID + "/versions/" + MODEL_VERSION_ID + "/outputs", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log(\'error\', error));\n<\/script>',_='//index.js file\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, user and app ID, model ID, model version ID, and \n// URL of the image we want as an input. Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = \'YOUR_PAT_HERE\';\n// Specify the correct user_id/app_id pairings\n// Since you\'re making inferences outside your app\'s scope\nconst USER_ID = \'clarifai\';\nconst APP_ID = \'main\';\n// Change these to whatever you want to process\nconst MODEL_ID = \'general-image-recognition\';\nconst MODEL_VERSION_ID = \'aa7f35c01e0642fda5cf400f543e7c40\';\nconst IMAGE_URL = \'https://samples.clarifai.com/metro-north.jpg\';\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PostModelOutputs(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        model_id: MODEL_ID, \n        version_id: MODEL_VERSION_ID,\n        inputs: [\n            { data: { image: { url: IMAGE_URL, allow_duplicate_url: true } } }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post model outputs failed, status: " + response.status.description);\n        }\n\n        // Since we have one input, one output will exist here.\n        const output = response.outputs[0];\n\n        console.log("Predicted concepts:");\n        for (const concept of output.data.concepts) {\n            console.log(concept.name + " " + concept.value);\n        }\n    }\n\n);',g='//index.js file\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, user and app ID, model details, URL of the image\n// we want as an input, and max concepts. Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = \'YOUR_PAT_HERE\';\n// Specify the correct user_id/app_id pairings\n// Since you\'re making inferences outside your app\'s scope\nconst USER_ID = \'clarifai\';\nconst APP_ID = \'main\';\n// Change these to whatever you want to process\nconst MODEL_ID = \'general-image-recognition\';\nconst MODEL_VERSION_ID = \'aa7f35c01e0642fda5cf400f543e7c40\'; \nconst IMAGE_URL = \'https://samples.clarifai.com/metro-north.jpg\';\nconst MAX_CONCEPTS = 3;\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PostModelOutputs(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        model_id: MODEL_ID, \n        version_id: MODEL_VERSION_ID, // This is optional. Defaults to the latest model version\n        inputs: [\n            { data: { image: { url: IMAGE_URL, allow_duplicate_url: true } } }\n        ],\n        model: { output_info: { output_config: { max_concepts: MAX_CONCEPTS } } }\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post model outputs failed, status: " + response.status.description);\n        }\n\n        // Since we have one input, one output will exist here.\n        const output = response.outputs[0];\n\n        console.log("Predicted concepts:");\n        for (const concept of output.data.concepts) {\n            console.log(concept.name + " " + concept.value);\n        }\n    }\n\n);',I='//index.js file\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, user and app ID, model details, URL of the image\n// we want as an input, and minimum value. Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = \'YOUR_PAT_HERE\';\n// Specify the correct user_id/app_id pairings\n// Since you\'re making inferences outside your app\'s scope\nconst USER_ID = \'clarifai\';\nconst APP_ID = \'main\';\n// Change these to whatever you want to process\nconst MODEL_ID = \'general-image-recognition\';\nconst MODEL_VERSION_ID = \'aa7f35c01e0642fda5cf400f543e7c40\'; \nconst IMAGE_URL = \'https://samples.clarifai.com/metro-north.jpg\';\nconst MINIMUM_VALUE = 0.95;\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PostModelOutputs(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        model_id: MODEL_ID, \n        version_id: MODEL_VERSION_ID, // This is optional. Defaults to the latest model version\n        inputs: [\n            { data: { image: { url: IMAGE_URL, allow_duplicate_url: true } } }\n        ],\n        model: { output_info: { output_config: { min_value: MINIMUM_VALUE } } }\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post model outputs failed, status: " + response.status.description);\n        }\n\n        // Since we have one input, one output will exist here.\n        const output = response.outputs[0];\n\n        console.log("Predicted concepts:");\n        for (const concept of output.data.concepts) {\n            console.log(concept.name + " " + concept.value);\n        }\n    }\n\n);',E='//index.js file\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, user and app ID, model details, URL of the image\n// we want as an input, and concept name and ID. Change these strings to run your own example.\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = \'YOUR_PAT_HERE\';\n// Specify the correct user_id/app_id pairings\n// Since you\'re making inferences outside your app\'s scope\nconst USER_ID = \'clarifai\';\nconst APP_ID = \'main\';\n// Change these to whatever you want to process\nconst MODEL_ID = \'general-image-recognition\';\nconst MODEL_VERSION_ID = \'aa7f35c01e0642fda5cf400f543e7c40\'; \nconst IMAGE_URL = \'https://samples.clarifai.com/metro-north.jpg\';\nconst CONCEPT_NAME = "train";\nconst CONCEPT_ID = "ai_6kTjGfF6";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PostModelOutputs(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        model_id: MODEL_ID, \n        version_id: MODEL_VERSION_ID, // This is optional. Defaults to the latest model version\n        inputs: [\n            { data: { image: { url: IMAGE_URL, allow_duplicate_url: true } } }\n        ],\n        // When selecting concepts, value is ignored, so no need to specify it.\n        model: { output_info: { output_config: { select_concepts: [{ name: CONCEPT_NAME }, { id: CONCEPT_ID }] } } }\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post model outputs failed, status: " + response.status.description);\n        }\n\n        // Since we have one input, one output will exist here.\n        const output = response.outputs[0];\n\n        console.log("Predicted concepts:");\n        for (const concept of output.data.concepts) {\n            console.log(concept.name + " " + concept.value);\n        }\n    }\n\n);',O='package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, user and app ID, model ID, model version ID, and\n    // URL of the image we want as an input. Change these strings to run your own example.\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    // Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    // Specify the correct user_id/app_id pairings\n    // Since you\'re making inferences outside your app\'s scope\n    static final String USER_ID = "clarifai";   \n    static final String APP_ID = "main";\n    // Change these to whatever you want to process\n    static final String MODEL_ID = "general-image-recognition";\n    static final String MODEL_VERSION_ID = "aa7f35c01e0642fda5cf400f543e7c40";\n    static final String IMAGE_URL = "https://samples.clarifai.com/metro-north.jpg";\n    \n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\t\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiOutputResponse postModelOutputsResponse = stub.postModelOutputs(\n            PostModelOutputsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .setModelId(MODEL_ID) \n            .setVersionId(MODEL_VERSION_ID) // This is optional. Defaults to the latest model version\n            .addInputs(\n                Input.newBuilder().setData(\n                    Data.newBuilder().setImage(\n                        Image.newBuilder().setUrl(IMAGE_URL)\n                    )\n                )\n            )\n            .build()\n        );\n\n        if (postModelOutputsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post model outputs failed, status: " + postModelOutputsResponse.getStatus());\n        }\n\n        // Since we have one input, one output will exist here.\n        Output output = postModelOutputsResponse.getOutputs(0);\n\n        System.out.println("Predicted concepts:");\n        for (Concept concept: output.getData().getConceptsList()) {\n            System.out.printf("%s %.2f%n", concept.getName(), concept.getValue());\n        }\n\n    }\n\n}',D='package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, user and app ID, model details, URL of the image\n    // we want as an input, and max concepts. Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    // Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    // Specify the correct user_id/app_id pairings\n    // Since you\'re making inferences outside your app\'s scope\n    static final String USER_ID = "clarifai";    \n    static final String APP_ID = "main";\n    // Change these to whatever you want to process\n    static final String MODEL_ID = "general-image-recognition";\n    static final String MODEL_VERSION_ID = "aa7f35c01e0642fda5cf400f543e7c40";\n    static final String IMAGE_URL = "https://samples.clarifai.com/metro-north.jpg";\n    static final int MAX_CONCEPTS = 3;\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\t\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiOutputResponse postModelOutputsResponse = stub.postModelOutputs(\n            PostModelOutputsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .setModelId(MODEL_ID)\n            .setVersionId(MODEL_VERSION_ID)  // This is optional. Defaults to the latest model version\n            .addInputs(\n                Input.newBuilder().setData(\n                    Data.newBuilder().setImage(\n                        Image.newBuilder().setUrl(IMAGE_URL)\n                    )\n                )\n            )\n            .setModel(\n                Model.newBuilder().setOutputInfo(\n                    OutputInfo.newBuilder().setOutputConfig(\n                        OutputConfig.newBuilder().setMaxConcepts(MAX_CONCEPTS)\n                    )\n                )\n            )\n            .build()\n        );\n\n        if (postModelOutputsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post model outputs failed, status: " + postModelOutputsResponse.getStatus());\n        }\n\n        // Since we have one input, one output will exist here\n        Output output = postModelOutputsResponse.getOutputs(0);\n\n        System.out.println("Predicted concepts:");\n        for (Concept concept: output.getData().getConceptsList()) {\n            System.out.printf("%s %.2f%n", concept.getName(), concept.getValue());\n        }\n\n    }\n\n}',A='package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, user and app ID, model details, URL of the image\n    // we want as an input, and minimum value. Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    // Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    // Specify the correct user_id/app_id pairings\n    // Since you\'re making inferences outside your app\'s scope\n    static final String USER_ID = "clarifai";    \n    static final String APP_ID = "main";\n    // Change these to whatever you want to process\n    static final String MODEL_ID = "general-image-recognition";\n    static final String MODEL_VERSION_ID = "aa7f35c01e0642fda5cf400f543e7c40";\n    static final String IMAGE_URL = "https://samples.clarifai.com/metro-north.jpg";\n    static final float MINIMUM_VALUE = 0.95f;\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\t\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiOutputResponse postModelOutputsResponse = stub.postModelOutputs(\n            PostModelOutputsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .setModelId(MODEL_ID) \n            .setVersionId(MODEL_VERSION_ID)  // This is optional. Defaults to the latest model version\n            .addInputs(\n                Input.newBuilder().setData(\n                    Data.newBuilder().setImage(\n                        Image.newBuilder().setUrl(IMAGE_URL)\n                    )\n                )\n            )\n            .setModel(\n                Model.newBuilder().setOutputInfo(\n                    OutputInfo.newBuilder().setOutputConfig(\n                        OutputConfig.newBuilder().setMinValue(MINIMUM_VALUE)\n                    )\n                )\n            )\n            .build()\n        );\n\n        if (postModelOutputsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post model outputs failed, status: " + postModelOutputsResponse.getStatus());\n        }\n\n        // Since we have one input, one output will exist here\n        Output output = postModelOutputsResponse.getOutputs(0);\n\n        System.out.println("Predicted concepts:");\n        for (Concept concept: output.getData().getConceptsList()) {\n            System.out.printf("%s %.2f%n", concept.getName(), concept.getValue());\n        }\n\n    }\n\n}',w='package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, user and app ID, model details, URL of the image\n    // we want as an input, and concept name and ID. Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    // Specify the correct user_id/app_id pairings\n    // Since you\'re making inferences outside your app\'s scope\n    static final String USER_ID = "clarifai";    \n    static final String APP_ID = "main";\n    // Change these to whatever you want to process\n    static final String MODEL_ID = "general-image-recognition";\n    static final String MODEL_VERSION_ID = "aa7f35c01e0642fda5cf400f543e7c40";\n    static final String IMAGE_URL = "https://samples.clarifai.com/metro-north.jpg";\n    static final String CONCEPT_NAME = "train";\n    static final String CONCEPT_ID = "ai_6kTjGfF6";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\t\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiOutputResponse postModelOutputsResponse = stub.postModelOutputs(\n            PostModelOutputsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .setModelId(MODEL_ID) \n            .setVersionId(MODEL_VERSION_ID)  // This is optional. Defaults to the latest model version\n            .addInputs(\n                Input.newBuilder().setData(\n                    Data.newBuilder().setImage(\n                        Image.newBuilder().setUrl(IMAGE_URL)\n                    )\n                )\n            )\n            .setModel(\n                Model.newBuilder().setOutputInfo(\n                    OutputInfo.newBuilder().setOutputConfig(\n                        OutputConfig.newBuilder()\n                        // When selecting concepts, value is ignored, so no need to specify it\n                        .addSelectConcepts(Concept.newBuilder().setName(CONCEPT_NAME))\n                        .addSelectConcepts(Concept.newBuilder().setId(CONCEPT_ID))\n                    )\n                )\n            )\n            .build()\n        );\n\n        if (postModelOutputsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post model outputs failed, status: " + postModelOutputsResponse.getStatus());\n        }\n\n        // Since we have one input, one output will exist here\n        Output output = postModelOutputsResponse.getOutputs(0);\n\n        System.out.println("Predicted concepts:");\n        for (Concept concept: output.getData().getConceptsList()) {\n            System.out.printf("%s %.2f%n", concept.getName(), concept.getValue());\n        }\n\n    }\n\n}',C="<?php\n\nrequire __DIR__ . '/vendor/autoload.php';\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, user and app ID, model ID, model version ID, and \n// URL of the image we want as an input. Change these strings to run your own example.\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n\n// Your PAT (Personal Access Token) can be found in the Account's Security section\n$PAT = 'YOUR_PAT_HERE';\n// Specify the correct user_id/app_id pairings\n// Since you're making inferences outside your app's scope\n$USER_ID = 'clarifai';\n$APP_ID = 'main';\n// Change these to whatever you want to process\n$MODEL_ID = 'general-image-recognition';\n$MODEL_VERSION_ID = 'aa7f35c01e0642fda5cf400f543e7c40';\n$IMAGE_URL = 'https://samples.clarifai.com/metro-north.jpg';\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\Data;\nuse Clarifai\\Api\\Image;\nuse Clarifai\\Api\\Input;\nuse Clarifai\\Api\\PostModelOutputsRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ['Authorization' => ['Key ' . $PAT ]];\n\n$userDataObject = new UserAppIDSet([\n    'user_id' => $USER_ID, \n    'app_id' => $APP_ID \n]);\n\n// Let's make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PostModelOutputs(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new PostModelOutputsRequest([\n        'user_app_id' => $userDataObject,\n        'model_id' => $MODEL_ID, \n        'version_id' => $MODEL_VERSION_ID,\n        'inputs' => [\n            new Input([ // The Input object wraps the Data object in order to meet the API specification                \n                'data' => new Data([ // The Data object is constructed around the Image object. It offers a container that has additional image independent\n                                    // metadata. In this particular use case, no other metadata is needed to be specified\n                    'image' => new Image([ // In the Clarifai platform, an image is defined by a special Image object\n                        'url' => $IMAGE_URL\n                    ])\n                ])\n            ])\n        ]       \n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception(\"Error: {$status->details}\");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    throw new Exception(\"Failure response: \" . $response->getStatus()->getDescription() . \" \" .\n        $response->getStatus()->getDetails());\n}\n\n// The output of a successful call can be used in many ways. In this example, we loop through all of the predicted concepts \n// and print them out along with their numerical prediction value (confidence)\necho \"Predicted concepts: </br>\";\nforeach ($response->getOutputs()[0]->getData()->getConcepts() as $concept) {\n    echo $concept->getName() . \": \" . number_format($concept->getValue(), 2) . \"</br>\";\n}\n\n?>",b="<?php\n\nrequire __DIR__ . '/vendor/autoload.php';\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, user and app ID, model details, URL of the image\n// we want as an input, and max concepts. Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n\n// Your PAT (Personal Access Token) can be found in the Account's Security section\n$PAT = \"YOUR_PAT_HERE\";\n// Specify the correct user_id/app_id pairings\n// Since you're making inferences outside your app's scope\n$USER_ID = \"clarifai\";\n$APP_ID = \"main\";\n// Change these to whatever you want to process\n$MODEL_ID = 'general-image-recognition';\n$MODEL_VERSION_ID = 'aa7f35c01e0642fda5cf400f543e7c40';  \n$IMAGE_URL = 'https://samples.clarifai.com/metro-north.jpg';\n$MAX_CONCEPTS = 3;\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\Data;\nuse Clarifai\\Api\\Image;\nuse Clarifai\\Api\\Input;\nuse Clarifai\\Api\\Model;\nuse Clarifai\\Api\\OutputInfo;\nuse Clarifai\\Api\\OutputConfig;\nuse Clarifai\\Api\\PostModelOutputsRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ['Authorization' => ['Key ' . $PAT ]];\n\n$userDataObject = new UserAppIDSet([\n    'user_id' => $USER_ID, \n    'app_id' => $APP_ID \n]);\n\n// Let's make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PostModelOutputs(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new PostModelOutputsRequest([\n        'user_app_id' => $userDataObject,\n        'model_id' => $MODEL_ID, \n        'version_id' => $MODEL_VERSION_ID, // This is optional. Defaults to the latest model version\n        'inputs' => [\n            new Input([ // The Input object wraps the Data object in order to meet the API specification                \n                'data' => new Data([ // The Data object is constructed around the Image object. It offers a container that has additional image independent\n                                    // metadata. In this particular use case, no other metadata is needed to be specified\n                    'image' => new Image([ // In the Clarifai platform, an image is defined by a special Image object\n                        'url' => $IMAGE_URL\n                    ])\n                ])\n            ])\n        ],\n        // The model object is a wrapper around the OutputInfo object\n        \"model\" => new Model([\n            //The OutputInfo object is a wrapper around the OutputConfig object\n            \"output_info\" => new OutputInfo([\n                // Output configuration can be specified by the OutputConfig object. Here we specify the max number of concepts \n                // to return at 3.\n                \"output_config\" => new OutputConfig([\n                   \"max_concepts\" => $MAX_CONCEPTS\n                ])\n            ])\n        ])\n\n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception(\"Error: {$status->details}\");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    throw new Exception(\"Failure response: \" . $response->getStatus()->getDescription() . \" \" .\n        $response->getStatus()->getDetails());\n}\n\n// The output of a successful call can be used in many ways. In this example, we loop through all of the predicted concepts \n// and print them out along with their numerical prediction value (confidence)\necho \"Predicted concepts: </br>\";\nforeach ($response->getOutputs()[0]->getData()->getConcepts() as $concept) {\n    echo $concept->getName() . \": \" . number_format($concept->getValue(), 2) . \"</br>\";\n}\n\n?>",S="<?php\n\nrequire __DIR__ . '/vendor/autoload.php';\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, user and app ID, model details, URL of the image\n// we want as an input, and minimum value. Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n// Your PAT (Personal Access Token) can be found in the Account's Security section\n$PAT = \"YOUR_PAT_HERE\";\n// Specify the correct user_id/app_id pairings\n// Since you're making inferences outside your app's scope\n$USER_ID = \"clarifai\";\n$APP_ID = \"main\";\n// Change these to whatever you want to process\n$MODEL_ID = 'general-image-recognition';\n$MODEL_VERSION_ID = 'aa7f35c01e0642fda5cf400f543e7c40';\n$IMAGE_URL = 'https://samples.clarifai.com/metro-north.jpg';\n$MINIMUM_VALUE = 0.95;\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\Data;\nuse Clarifai\\Api\\Image;\nuse Clarifai\\Api\\Input;\nuse Clarifai\\Api\\Model;\nuse Clarifai\\Api\\OutputInfo;\nuse Clarifai\\Api\\OutputConfig;\nuse Clarifai\\Api\\PostModelOutputsRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ['Authorization' => ['Key ' . $PAT ]];\n\n$userDataObject = new UserAppIDSet([\n    'user_id' => $USER_ID, \n    'app_id' => $APP_ID \n]);\n\n// Let's make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PostModelOutputs(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new PostModelOutputsRequest([\n        'user_app_id' => $userDataObject,\n        'model_id' => $MODEL_ID, \n        'version_id' => $MODEL_VERSION_ID, // This is optional. Defaults to the latest model version\n        'inputs' => [\n            new Input([ // The Input object wraps the Data object in order to meet the API specification                \n                'data' => new Data([ // The Data object is constructed around the Image object. It offers a container that has additional image independent\n                                    // metadata. In this particular use case, no other metadata is needed to be specified\n                    'image' => new Image([ // In the Clarifai platform, an image is defined by a special Image object\n                        'url' => $IMAGE_URL\n                    ])\n                ])\n            ])\n        ],\n        // The model object is a wrapper around the OutputInfo object\n        \"model\" => new Model([\n            //The OutputInfo object is a wrapper around the OutputConfig object\n            \"output_info\" => new OutputInfo([\n                // Output configuration can be specified by the OutputConfig object. Here we specify the minimum \n                // threshold value to 0.95.\n                \"output_config\" => new OutputConfig([\n                   \"min_value\" => $MINIMUM_VALUE\n                ])\n            ])\n        ])\n\n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception(\"Error: {$status->details}\");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    throw new Exception(\"Failure response: \" . $response->getStatus()->getDescription() . \" \" .\n        $response->getStatus()->getDetails());\n}\n\n// The output of a successful call can be used in many ways. In this example, we loop through all of the predicted concepts \n// and print them out along with their numerical prediction value (confidence)\necho \"Predicted concepts: </br>\";\nforeach ($response->getOutputs()[0]->getData()->getConcepts() as $concept) {\n    echo $concept->getName() . \": \" . number_format($concept->getValue(), 2) . \"</br>\";\n}\n\n?>",T="<?php\n\nrequire __DIR__ . '/vendor/autoload.php';\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, user and app ID, model details, URL of the image\n// we want as an input, and concept name and ID. Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////////////////////////////////////\n\n// Your PAT (Personal Access Token) can be found in the Account's Security section\n$PAT = \"YOUR_PAT_HERE\";\n// Specify the correct user_id/app_id pairings\n// Since you're making inferences outside your app's scope\n$USER_ID = \"clarifai\";\n$APP_ID = \"main\";\n// Change these to whatever you want to process\n$MODEL_ID = 'general-image-recognition'; \n$MODEL_VERSION_ID = 'aa7f35c01e0642fda5cf400f543e7c40';   \n$IMAGE_URL = 'https://samples.clarifai.com/metro-north.jpg';\n$CONCEPT_NAME = \"train\";\n$CONCEPT_ID = \"ai_6kTjGfF6\";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\Api\\Concept;\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\Data;\nuse Clarifai\\Api\\Image;\nuse Clarifai\\Api\\Input;\nuse Clarifai\\Api\\Model;\nuse Clarifai\\Api\\OutputInfo;\nuse Clarifai\\Api\\OutputConfig;\nuse Clarifai\\Api\\PostModelOutputsRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ['Authorization' => ['Key ' . $PAT ]];\n\n$userDataObject = new UserAppIDSet([\n    'user_id' => $USER_ID, \n    'app_id' => $APP_ID \n]);\n\n// Let's make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PostModelOutputs(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new PostModelOutputsRequest([\n        'user_app_id' => $userDataObject,\n        'model_id' => $MODEL_ID, \n        'version_id' => $MODEL_VERSION_ID, // This is optional. Defaults to the latest model version\n        'inputs' => [\n            new Input([ // The Input object wraps the Data object in order to meet the API specification                \n                'data' => new Data([ // The Data object is constructed around the Image object. It offers a container that has additional image independent\n                                    // metadata. In this particular use case, no other metadata is needed to be specified\n                    'image' => new Image([ // In the Clarifai platform, an image is defined by a special Image object\n                        'url' => $IMAGE_URL\n                    ])\n                ])\n            ])\n        ],\n        // The model object is a wrapper around the OutputInfo object\n        \"model\" => new Model([\n            //The OutputInfo object is a wrapper around the OutputConfig object\n            \"output_info\" => new OutputInfo([\n                // Output configuration can be specified by the OutputConfig object. Here we specify a concept by both the name and the id \n                // for what we want to narrow down to in the results.\n                \"output_config\" => new OutputConfig([\n                    \"select_concepts\" => [\n                        // When selecting concepts, value is ignored, so no need to specify it\n                        new Concept([\n                            \"name\" => $CONCEPT_NAME\n                        ]),\n                        new Concept([\n                            \"id\" => $CONCEPT_ID\n                        ])\n                    ]\n                ])\n            ])\n        ])\n\n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception(\"Error: {$status->details}\");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    throw new Exception(\"Failure response: \" . $response->getStatus()->getDescription() . \" \" .\n        $response->getStatus()->getDetails());\n}\n\n// The output of a successful call can be used in many ways. In this example, we loop through all of the predicted concepts \n// and print them out along with their numerical prediction value (confidence)\necho \"Predicted concepts: </br>\";\nforeach ($response->getOutputs()[0]->getData()->getConcepts() as $concept) {\n    echo $concept->getName() . \": \" . number_format($concept->getValue(), 2) . \"</br>\";\n}\n\n?>",P='# Version ID is optional. It defaults to the latest model version, if omitted.\n\ncurl -X POST "https://api.clarifai.com/v2/users/clarifai/apps/main/models/general-image-recognition/versions/aa7f35c01e0642fda5cf400f543e7c40/outputs" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "inputs": [\n      {\n        "data": {\n          "image": {\n            "url": "https://samples.clarifai.com/metro-north.jpg"\n          }\n        }\n      }\n    ]\n  }\'\n  \n',v='curl -X POST "https://api.clarifai.com/v2/users/clarifai/apps/main/models/general-image-recognition/outputs" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "inputs": [\n      {\n        "data": {\n          "image": {\n            "url": "https://samples.clarifai.com/metro-north.jpg"\n          }\n        }\n      }\n    ],\n    "model":{\n      "output_info":{\n        "output_config":{\n          "max_concepts": 3\n        }\n      }\n    }\n  }\'',y='curl -X POST "https://api.clarifai.com/v2/users/clarifai/apps/main/models/general-image-recognition/outputs" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "inputs": [\n      {\n        "data": {\n          "image": {\n            "url": "https://samples.clarifai.com/metro-north.jpg"\n          }\n        }\n      }\n    ],\n    "model":{\n      "output_info":{\n        "output_config":{\n          "min_value": 0.95\n        }\n      }\n    }\n  }\'',N='curl -X POST "https://api.clarifai.com/v2/users/clarifai/apps/main/models/general-image-recognition/outputs" \\\n  -H "authorization: Key YOUR_PAT_HERE" \\\n  -H "content-Type: application/json" \\\n  -d \'{\n  "inputs": [\n    {\n      "data": {\n        "image": {\n          "url": "https://samples.clarifai.com/metro-north.jpg"\n        }\n      }\n    }\n  ],\n  "model": {\n    "output_info": {\n      "output_config": {\n        "select_concepts": [\n          {"name": "train"},\n          {"id": "ai_6kTjGfF6"}\n        ]\n      }\n    }\n  }\n}\'\n\n',R="Predicted concepts:\ntrain 1.00\nstation 1.00",M='id: "81acc269d03e4ea7bc0299f4f8287d58"\nstatus {\n  code: SUCCESS\n  description: "Ok"\n}\ncreated_at {\n  seconds: 1701798941\n  nanos: 10825132\n}\nmodel {\n  id: "general-image-recognition"\n  name: "Image Recognition"\n  created_at {\n    seconds: 1457543499\n    nanos: 608845000\n  }\n  app_id: "main"\n  model_version {\n    id: "aa7f35c01e0642fda5cf400f543e7c40"\n    created_at {\n      seconds: 1520370624\n      nanos: 454834000\n    }\n    status {\n      code: MODEL_TRAINED\n      description: "Model is trained and ready"\n    }\n    visibility {\n      gettable: PUBLIC\n    }\n    app_id: "main"\n    user_id: "clarifai"\n    metadata {\n    }\n  }\n  user_id: "clarifai"\n  model_type_id: "visual-classifier"\n  visibility {\n    gettable: PUBLIC\n  }\n  modified_at {\n    seconds: 1694180313\n    nanos: 148401000\n  }\n  workflow_recommended {\n  }\n}\ninput {\n  id: "509694bf26544b03b1b3d30d72688aaa"\n  data {\n    image {\n      url: "https://samples.clarifai.com/metro-north.jpg"\n    }\n  }\n}\ndata {\n  concepts {\n    id: "ai_HLmqFqBf"\n    name: "train"\n    value: 0.9996053576469421\n    app_id: "main"\n  }\n  concepts {\n    id: "ai_6kTjGfF6"\n    name: "station"\n    value: 0.9980133771896362\n    app_id: "main"\n  }\n}\n',j="Predicted concepts:\ntrain 1.00\nrailway 1.00\nsubway system 1.00",x='id: "51ba22c23b0e4724bfbe7600370e4072"\nstatus {\n  code: SUCCESS\n  description: "Ok"\n}\ncreated_at {\n  seconds: 1701799066\n  nanos: 783913374\n}\nmodel {\n  id: "general-image-recognition"\n  name: "Image Recognition"\n  created_at {\n    seconds: 1457543499\n    nanos: 608845000\n  }\n  app_id: "main"\n  model_version {\n    id: "aa7f35c01e0642fda5cf400f543e7c40"\n    created_at {\n      seconds: 1520370624\n      nanos: 454834000\n    }\n    status {\n      code: MODEL_TRAINED\n      description: "Model is trained and ready"\n    }\n    visibility {\n      gettable: PUBLIC\n    }\n    app_id: "main"\n    user_id: "clarifai"\n    metadata {\n    }\n  }\n  user_id: "clarifai"\n  model_type_id: "visual-classifier"\n  visibility {\n    gettable: PUBLIC\n  }\n  modified_at {\n    seconds: 1694180313\n    nanos: 148401000\n  }\n  workflow_recommended {\n  }\n}\ninput {\n  id: "7fd5d408a38a4a15964d9ff7b191ea0a"\n  data {\n    image {\n      url: "https://samples.clarifai.com/metro-north.jpg"\n    }\n  }\n}\ndata {\n  concepts {\n    id: "ai_HLmqFqBf"\n    name: "train"\n    value: 0.9996053576469421\n    app_id: "main"\n  }\n  concepts {\n    id: "ai_fvlBqXZR"\n    name: "railway"\n    value: 0.9992986917495728\n    app_id: "main"\n  }\n  concepts {\n    id: "ai_SHNDcmJ3"\n    name: "subway system"\n    value: 0.9982585310935974\n    app_id: "main"\n  }\n}\n\n',L="Predicted concepts:\ntrain 1.00\nrailway 1.00\nsubway system 1.00\nstation 1.00\nlocomotive 1.00\ntransportation system 1.00\ntravel 0.99\ncommuter 0.98\nplatform 0.98\nlight 0.97\ntrain station 0.97\nblur 0.97\ncity 0.96\nroad 0.96\nurban 0.96\ntraffic 0.96",U='id: "5b7931cce8d84be6be71edaf8d5691ae"\nstatus {\n  code: SUCCESS\n  description: "Ok"\n}\ncreated_at {\n  seconds: 1701799220\n  nanos: 689214282\n}\nmodel {\n  id: "general-image-recognition"\n  name: "Image Recognition"\n  created_at {\n    seconds: 1457543499\n    nanos: 608845000\n  }\n  app_id: "main"\n  model_version {\n    id: "aa7f35c01e0642fda5cf400f543e7c40"\n    created_at {\n      seconds: 1520370624\n      nanos: 454834000\n    }\n    status {\n      code: MODEL_TRAINED\n      description: "Model is trained and ready"\n    }\n    visibility {\n      gettable: PUBLIC\n    }\n    app_id: "main"\n    user_id: "clarifai"\n    metadata {\n    }\n  }\n  user_id: "clarifai"\n  model_type_id: "visual-classifier"\n  visibility {\n    gettable: PUBLIC\n  }\n  modified_at {\n    seconds: 1694180313\n    nanos: 148401000\n  }\n  workflow_recommended {\n  }\n}\ninput {\n  id: "cdc6a6628de7435597f09c4ed920c753"\n  data {\n    image {\n      url: "https://samples.clarifai.com/metro-north.jpg"\n    }\n  }\n}\ndata {\n  concepts {\n    id: "ai_HLmqFqBf"\n    name: "train"\n    value: 0.9996053576469421\n    app_id: "main"\n  }\n  concepts {\n    id: "ai_fvlBqXZR"\n    name: "railway"\n    value: 0.9992986917495728\n    app_id: "main"\n  }\n  concepts {\n    id: "ai_SHNDcmJ3"\n    name: "subway system"\n    value: 0.9982585310935974\n    app_id: "main"\n  }\n  concepts {\n    id: "ai_6kTjGfF6"\n    name: "station"\n    value: 0.9980133771896362\n    app_id: "main"\n  }\n  concepts {\n    id: "ai_RRXLczch"\n    name: "locomotive"\n    value: 0.9972604513168335\n    app_id: "main"\n  }\n  concepts {\n    id: "ai_Xxjc3MhT"\n    name: "transportation system"\n    value: 0.9969792366027832\n    app_id: "main"\n  }\n  concepts {\n    id: "ai_VRmbGVWh"\n    name: "travel"\n    value: 0.9889689683914185\n    app_id: "main"\n  }\n  concepts {\n    id: "ai_jlb9q33b"\n    name: "commuter"\n    value: 0.9809139370918274\n    app_id: "main"\n  }\n  concepts {\n    id: "ai_2gkfMDsM"\n    name: "platform"\n    value: 0.9806650876998901\n    app_id: "main"\n  }\n  concepts {\n    id: "ai_n9vjC1jB"\n    name: "light"\n    value: 0.9741945266723633\n    app_id: "main"\n  }\n  concepts {\n    id: "ai_sQQj52KZ"\n    name: "train station"\n    value: 0.9688410758972168\n    app_id: "main"\n  }\n  concepts {\n    id: "ai_l4WckcJN"\n    name: "blur"\n    value: 0.9673133492469788\n    app_id: "main"\n  }\n  concepts {\n    id: "ai_WBQfVV0p"\n    name: "city"\n    value: 0.9615091681480408\n    app_id: "main"\n  }\n  concepts {\n    id: "ai_TZ3C79C6"\n    name: "road"\n    value: 0.9613693356513977\n    app_id: "main"\n  }\n  concepts {\n    id: "ai_CpFBRWzD"\n    name: "urban"\n    value: 0.960391640663147\n    app_id: "main"\n  }\n  concepts {\n    id: "ai_tr0MBp64"\n    name: "traffic"\n    value: 0.9599775075912476\n    app_id: "main"\n  }\n}\n',$="Predicted concepts:\ntrain 1.00\nrailway 1.00\nsubway system 1.00\nstation 1.00\nlocomotive 1.00\ntransportation system 1.00\ntravel 0.99\ncommuter 0.98\nplatform 0.98\nlight 0.97\ntrain station 0.97\nblur 0.97\ncity 0.96\nroad 0.96\nurban 0.96\ntraffic 0.96\nstreet 0.95\npublic 0.93\ntramway 0.93\nbusiness 0.93",H='id: "7601649459f6458e80eb6e44f6d3dfe0" \nstatus {\n  code: SUCCESS\n  description: "Ok"\n}\ncreated_at {\n  seconds: 1701799352\n  nanos: 145163726\n}\nmodel {\n  id: "general-image-recognition"\n  name: "Image Recognition"\n  created_at {\n    seconds: 1457543499\n    nanos: 608845000\n  }\n  app_id: "main"\n  model_version {\n    id: "aa7f35c01e0642fda5cf400f543e7c40"\n    created_at {\n      seconds: 1520370624\n      nanos: 454834000\n    }\n    status {\n      code: MODEL_TRAINED\n      description: "Model is trained and ready"\n    }\n    visibility {\n      gettable: PUBLIC\n    }\n    app_id: "main"\n    user_id: "clarifai"\n    metadata {\n    }\n  }\n  user_id: "clarifai"\n  model_type_id: "visual-classifier"\n  visibility {\n    gettable: PUBLIC\n  }\n  modified_at {\n    seconds: 1694180313\n    nanos: 148401000\n  }\n  workflow_recommended {\n  }\n}\ninput {\n  id: "256fa5839e9d425db43553ce9ff38d03"\n  data {\n    image {\n      url: "https://samples.clarifai.com/metro-north.jpg"\n    }\n  }\n}\ndata {\n  concepts {\n    id: "ai_HLmqFqBf"\n    name: "train"\n    value: 0.9996053576469421\n    app_id: "main"\n  }\n  concepts {\n    id: "ai_fvlBqXZR"\n    name: "railway"\n    value: 0.9992986917495728\n    app_id: "main"\n  }\n  concepts {\n    id: "ai_SHNDcmJ3"\n    name: "subway system"\n    value: 0.9982585310935974\n    app_id: "main"\n  }\n  concepts {\n    id: "ai_6kTjGfF6"\n    name: "station"\n    value: 0.9980133771896362\n    app_id: "main"\n  }\n  concepts {\n    id: "ai_RRXLczch"\n    name: "locomotive"\n    value: 0.9972604513168335\n    app_id: "main"\n  }\n  concepts {\n    id: "ai_Xxjc3MhT"\n    name: "transportation system"\n    value: 0.9969792366027832\n    app_id: "main"\n  }\n  concepts {\n    id: "ai_VRmbGVWh"\n    name: "travel"\n    value: 0.9889689683914185\n    app_id: "main"\n  }\n  concepts {\n    id: "ai_jlb9q33b"\n    name: "commuter"\n    value: 0.9809139370918274\n    app_id: "main"\n  }\n  concepts {\n    id: "ai_2gkfMDsM"\n    name: "platform"\n    value: 0.9806650876998901\n    app_id: "main"\n  }\n  concepts {\n    id: "ai_n9vjC1jB"\n    name: "light"\n    value: 0.9741945266723633\n    app_id: "main"\n  }\n  concepts {\n    id: "ai_sQQj52KZ"\n    name: "train station"\n    value: 0.9688410758972168\n    app_id: "main"\n  }\n  concepts {\n    id: "ai_l4WckcJN"\n    name: "blur"\n    value: 0.9673133492469788\n    app_id: "main"\n  }\n  concepts {\n    id: "ai_WBQfVV0p"\n    name: "city"\n    value: 0.9615091681480408\n    app_id: "main"\n  }\n  concepts {\n    id: "ai_TZ3C79C6"\n    name: "road"\n    value: 0.9613693356513977\n    app_id: "main"\n  }\n  concepts {\n    id: "ai_CpFBRWzD"\n    name: "urban"\n    value: 0.960391640663147\n    app_id: "main"\n  }\n  concepts {\n    id: "ai_tr0MBp64"\n    name: "traffic"\n    value: 0.9599775075912476\n    app_id: "main"\n  }\n  concepts {\n    id: "ai_GjVpxXrs"\n    name: "street"\n    value: 0.9475197196006775\n    app_id: "main"\n  }\n  concepts {\n    id: "ai_mcSHVRfS"\n    name: "public"\n    value: 0.934360921382904\n    app_id: "main"\n  }\n  concepts {\n    id: "ai_J6d1kV8t"\n    name: "tramway"\n    value: 0.9320586323738098\n    app_id: "main"\n  }\n  concepts {\n    id: "ai_6lhccv44"\n    name: "business"\n    value: 0.9294787645339966\n    app_id: "main"\n  }\n}\n\n',V={description:"Learn about model prediction parameters.",sidebar_position:8},G="Prediction Parameters",k={id:"api-guide/predict/prediction-parameters",title:"Prediction Parameters",description:"Learn about model prediction parameters.",source:"@site/docs/api-guide/predict/prediction-parameters.md",sourceDirName:"api-guide/predict",slug:"/api-guide/predict/prediction-parameters",permalink:"/api-guide/predict/prediction-parameters",draft:!1,unlisted:!1,editUrl:"https://github.com/Clarifai/docs/blob/main/docs/api-guide/predict/prediction-parameters.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{description:"Learn about model prediction parameters.",sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"Embeddings",permalink:"/api-guide/predict/embeddings"},next:{title:"Multilingual Classification",permalink:"/api-guide/predict/multilingual-classification"}},B={},Y=[{value:"Select Concepts",id:"select-concepts",level:2},{value:"Maximum Concepts",id:"maximum-concepts",level:2},{value:"Minimum Prediction Value",id:"minimum-prediction-value",level:2},{value:"By Model Version ID",id:"by-model-version-id",level:2}];function q(n){const e={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",strong:"strong",...(0,i.R)(),...n.components},{Details:t}=e;return t||function(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.h1,{id:"prediction-parameters",children:"Prediction Parameters"}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"Learn about model prediction parameters"})}),"\n",(0,a.jsx)("hr",{}),"\n",(0,a.jsx)(e.p,{children:"You can set additional parameters to gain flexibility in the predict operation."}),"\n",(0,a.jsx)(e.h2,{id:"select-concepts",children:"Select Concepts"}),"\n",(0,a.jsxs)(e.p,{children:["By putting this additional parameter on your predict calls, you can receive predict value(s) for ",(0,a.jsx)(e.strong,{children:"only"})," the concepts that you want to. You can specify particular concepts by either their id and/or their name."]}),"\n",(0,a.jsx)(e.p,{children:"The concept names and ids are case sensitive; and so, these must be exact matches."}),"\n",(0,a.jsx)(e.admonition,{type:"tip",children:(0,a.jsxs)(e.p,{children:["To retrieve an entire list of concepts from a given model, and get their ids and names, use the ",(0,a.jsx)(e.a,{href:"https://docs.clarifai.com/api-guide/model/create-get-update-and-delete#get-model-output-info-by-id",children:(0,a.jsx)(e.code,{children:"GetModelOutputInfo"})})," endpoint."]})}),"\n",(0,a.jsx)(e.admonition,{type:"caution",children:(0,a.jsx)(e.p,{children:"If you submit a request with not an exact match of the concept id or name, you will receive an invalid model argument error. However, if one or more matches while one or more do not, the API will respond with a Mixed Success."})}),"\n",(0,a.jsxs)(e.p,{children:["Below is an example of how you would select concepts and receive predictions from Clarifai's ",(0,a.jsx)(e.a,{href:"https://clarifai.com/clarifai/main/models/general-image-recognition",children:(0,a.jsx)(e.code,{children:"general-image-recognition"})})," model."]}),"\n",(0,a.jsx)(e.admonition,{type:"info",children:(0,a.jsxs)(e.p,{children:["The initialization code used in the following examples is outlined in detail on the ",(0,a.jsx)(e.a,{href:"https://docs.clarifai.com/api-guide/api-overview/api-clients/#client-installation-instructions",children:"client installation page."})]})}),"\n","\n","\n","\n","\n","\n","\n","\n",(0,a.jsxs)(s.A,{children:[(0,a.jsx)(o.A,{value:"python",label:"Python",children:(0,a.jsx)(r.A,{className:"language-python",children:l})}),(0,a.jsx)(o.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,a.jsx)(r.A,{className:"language-javascript",children:f})}),(0,a.jsx)(o.A,{value:"nodejs",label:"NodeJS",children:(0,a.jsx)(r.A,{className:"language-javascript",children:E})}),(0,a.jsx)(o.A,{value:"java",label:"Java",children:(0,a.jsx)(r.A,{className:"language-java",children:w})}),(0,a.jsx)(o.A,{value:"php",label:"PHP",children:(0,a.jsx)(r.A,{className:"language-php",children:T})}),(0,a.jsx)(o.A,{value:"curl",label:"cURL",children:(0,a.jsx)(r.A,{className:"language-bash",children:N})})]}),"\n",(0,a.jsxs)(t,{children:[(0,a.jsx)("summary",{children:"Text Output Example"}),(0,a.jsx)(r.A,{className:"language-text",children:R})]}),"\n",(0,a.jsxs)(t,{children:[(0,a.jsx)("summary",{children:"Raw Output Example"}),(0,a.jsx)(r.A,{className:"language-javascript",children:M})]}),"\n",(0,a.jsx)(e.h2,{id:"maximum-concepts",children:"Maximum Concepts"}),"\n",(0,a.jsxs)(e.p,{children:["Setting the ",(0,a.jsx)(e.code,{children:"max_concepts"})," parameter will customize how many concepts and their corresponding probability scores the predict endpoint will return. If not specified, the predict endpoint will return the top 20 concepts."]}),"\n",(0,a.jsx)(e.p,{children:"You can currently set the max concepts parameter to any number in the range of [1-200]."}),"\n",(0,a.jsxs)(e.p,{children:["If your use case requires more concepts, please contact our ",(0,a.jsx)(e.a,{href:"mailto:support@clarifai.com",children:"support team"}),"."]}),"\n",(0,a.jsxs)(e.p,{children:["Below is an example of how you would set maximum concepts and receive predictions from Clarifai's ",(0,a.jsx)(e.a,{href:"https://clarifai.com/clarifai/main/models/general-image-recognition",children:(0,a.jsx)(e.code,{children:"general-image-recognition"})})," model."]}),"\n",(0,a.jsxs)(s.A,{children:[(0,a.jsx)(o.A,{value:"python",label:"Python",children:(0,a.jsx)(r.A,{className:"language-python",children:u})}),(0,a.jsx)(o.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,a.jsx)(r.A,{className:"language-javascript",children:m})}),(0,a.jsx)(o.A,{value:"nodejs",label:"NodeJS",children:(0,a.jsx)(r.A,{className:"language-javascript",children:g})}),(0,a.jsx)(o.A,{value:"java",label:"Java",children:(0,a.jsx)(r.A,{className:"language-java",children:D})}),(0,a.jsx)(o.A,{value:"php",label:"PHP",children:(0,a.jsx)(r.A,{className:"language-php",children:b})}),(0,a.jsx)(o.A,{value:"curl",label:"cURL",children:(0,a.jsx)(r.A,{className:"language-bash",children:v})})]}),"\n",(0,a.jsxs)(t,{children:[(0,a.jsx)("summary",{children:"Text Output Example"}),(0,a.jsx)(r.A,{className:"language-text",children:j})]}),"\n",(0,a.jsxs)(t,{children:[(0,a.jsx)("summary",{children:"Raw Output Example"}),(0,a.jsx)(r.A,{className:"language-javascript",children:x})]}),"\n",(0,a.jsx)(e.h2,{id:"minimum-prediction-value",children:"Minimum Prediction Value"}),"\n",(0,a.jsx)(e.p,{children:"This parameter lets you set a minimum probability threshold for the outputs you want to view for the Predict operation."}),"\n",(0,a.jsx)(e.p,{children:"For example if you want to see all concepts with a probability score of .95 or higher, this parameter will allow you to accomplish that."}),"\n",(0,a.jsxs)(e.p,{children:["Also note that if you don't specify the number of ",(0,a.jsx)(e.code,{children:"max_concepts"}),", you will only see the top 20. If your result can contain more values you will have to increase the number of maximum concepts as well."]}),"\n",(0,a.jsxs)(e.p,{children:["Below is an example of how you would set a minimum probability threshold and receive predictions from Clarifai's ",(0,a.jsx)(e.a,{href:"https://clarifai.com/clarifai/main/models/general-image-recognition",children:(0,a.jsx)(e.code,{children:"general-image-recognition"})})," model."]}),"\n",(0,a.jsxs)(s.A,{children:[(0,a.jsx)(o.A,{value:"python",label:"Python",children:(0,a.jsx)(r.A,{className:"language-python",children:p})}),(0,a.jsx)(o.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,a.jsx)(r.A,{className:"language-javascript",children:h})}),(0,a.jsx)(o.A,{value:"nodejs",label:"NodeJS",children:(0,a.jsx)(r.A,{className:"language-javascript",children:I})}),(0,a.jsx)(o.A,{value:"java",label:"Java",children:(0,a.jsx)(r.A,{className:"language-java",children:A})}),(0,a.jsx)(o.A,{value:"php",label:"PHP",children:(0,a.jsx)(r.A,{className:"language-php",children:S})}),(0,a.jsx)(o.A,{value:"curl",label:"cURL",children:(0,a.jsx)(r.A,{className:"language-bash",children:y})})]}),"\n",(0,a.jsxs)(t,{children:[(0,a.jsx)("summary",{children:"Text Output Example"}),(0,a.jsx)(r.A,{className:"language-text",children:L})]}),"\n",(0,a.jsxs)(t,{children:[(0,a.jsx)("summary",{children:"Raw Output Example"}),(0,a.jsx)(r.A,{className:"language-javascript",children:U})]}),"\n",(0,a.jsx)(e.h2,{id:"by-model-version-id",children:"By Model Version ID"}),"\n",(0,a.jsxs)(e.p,{children:["Every time you train a custom model, it creates a new model version. By specifying ",(0,a.jsx)(e.code,{children:"version_id"})," in your predict call, you can continue to predict on a previous version, for consistent prediction results. Clarifai also updates its pre-built models on a regular basis."]}),"\n",(0,a.jsxs)(e.p,{children:["If you are looking for consistent results from your predict calls, use ",(0,a.jsx)(e.code,{children:"version_id"}),". If the model ",(0,a.jsx)(e.code,{children:"version_id"})," is not specified, predict will default to the most current model."]}),"\n",(0,a.jsxs)(e.p,{children:["Below is an example of how you would set a model version ID and receive predictions from Clarifai's ",(0,a.jsx)(e.a,{href:"https://clarifai.com/clarifai/main/models/general-image-recognition",children:(0,a.jsx)(e.code,{children:"general-image-recognition"})})," model."]}),"\n",(0,a.jsxs)(s.A,{children:[(0,a.jsx)(o.A,{value:"python",label:"Python",children:(0,a.jsx)(r.A,{className:"language-python",children:c})}),(0,a.jsx)(o.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,a.jsx)(r.A,{className:"language-javascript",children:d})}),(0,a.jsx)(o.A,{value:"nodejs",label:"NodeJS",children:(0,a.jsx)(r.A,{className:"language-javascript",children:_})}),(0,a.jsx)(o.A,{value:"java",label:"Java",children:(0,a.jsx)(r.A,{className:"language-java",children:O})}),(0,a.jsx)(o.A,{value:"php",label:"PHP",children:(0,a.jsx)(r.A,{className:"language-php",children:C})}),(0,a.jsx)(o.A,{value:"curl",label:"cURL",children:(0,a.jsx)(r.A,{className:"language-bash",children:P})})]}),"\n",(0,a.jsxs)(t,{children:[(0,a.jsx)("summary",{children:"Text Output Example"}),(0,a.jsx)(r.A,{className:"language-text",children:$})]}),"\n",(0,a.jsxs)(t,{children:[(0,a.jsx)("summary",{children:"Raw Output Example"}),(0,a.jsx)(r.A,{className:"language-javascript",children:H})]})]})}function X(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(q,{...n})}):q(n)}},19365:(n,e,t)=>{t.d(e,{A:()=>o});t(96540);var a=t(18215);const i={tabItem:"tabItem_Ymn6"};var s=t(74848);function o(n){let{children:e,hidden:t,className:o}=n;return(0,s.jsx)("div",{role:"tabpanel",className:(0,a.A)(i.tabItem,o),hidden:t,children:e})}},11470:(n,e,t)=>{t.d(e,{A:()=>A});var a=t(96540),i=t(18215),s=t(23104),o=t(56347),r=t(205),c=t(57485),u=t(31682),p=t(70679);function l(n){return a.Children.toArray(n).filter((n=>"\n"!==n)).map((n=>{if(!n||(0,a.isValidElement)(n)&&function(n){const{props:e}=n;return!!e&&"object"==typeof e&&"value"in e}(n))return n;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof n.type?n.type:n.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function d(n){const{values:e,children:t}=n;return(0,a.useMemo)((()=>{const n=e??function(n){return l(n).map((n=>{let{props:{value:e,label:t,attributes:a,default:i}}=n;return{value:e,label:t,attributes:a,default:i}}))}(t);return function(n){const e=(0,u.X)(n,((n,e)=>n.value===e.value));if(e.length>0)throw new Error(`Docusaurus error: Duplicate values "${e.map((n=>n.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(n),n}),[e,t])}function m(n){let{value:e,tabValues:t}=n;return t.some((n=>n.value===e))}function h(n){let{queryString:e=!1,groupId:t}=n;const i=(0,o.W6)(),s=function(n){let{queryString:e=!1,groupId:t}=n;if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:e,groupId:t});return[(0,c.aZ)(s),(0,a.useCallback)((n=>{if(!s)return;const e=new URLSearchParams(i.location.search);e.set(s,n),i.replace({...i.location,search:e.toString()})}),[s,i])]}function f(n){const{defaultValue:e,queryString:t=!1,groupId:i}=n,s=d(n),[o,c]=(0,a.useState)((()=>function(n){let{defaultValue:e,tabValues:t}=n;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!m({value:e,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${t.map((n=>n.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const a=t.find((n=>n.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:e,tabValues:s}))),[u,l]=h({queryString:t,groupId:i}),[f,_]=function(n){let{groupId:e}=n;const t=function(n){return n?`docusaurus.tab.${n}`:null}(e),[i,s]=(0,p.Dv)(t);return[i,(0,a.useCallback)((n=>{t&&s.set(n)}),[t,s])]}({groupId:i}),g=(()=>{const n=u??f;return m({value:n,tabValues:s})?n:null})();(0,r.A)((()=>{g&&c(g)}),[g]);return{selectedValue:o,selectValue:(0,a.useCallback)((n=>{if(!m({value:n,tabValues:s}))throw new Error(`Can't select invalid tab value=${n}`);c(n),l(n),_(n)}),[l,_,s]),tabValues:s}}var _=t(92303);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var I=t(74848);function E(n){let{className:e,block:t,selectedValue:a,selectValue:o,tabValues:r}=n;const c=[],{blockElementScrollPositionUntilNextRender:u}=(0,s.a_)(),p=n=>{const e=n.currentTarget,t=c.indexOf(e),i=r[t].value;i!==a&&(u(e),o(i))},l=n=>{let e=null;switch(n.key){case"Enter":p(n);break;case"ArrowRight":{const t=c.indexOf(n.currentTarget)+1;e=c[t]??c[0];break}case"ArrowLeft":{const t=c.indexOf(n.currentTarget)-1;e=c[t]??c[c.length-1];break}}e?.focus()};return(0,I.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.A)("tabs",{"tabs--block":t},e),children:r.map((n=>{let{value:e,label:t,attributes:s}=n;return(0,I.jsx)("li",{role:"tab",tabIndex:a===e?0:-1,"aria-selected":a===e,ref:n=>c.push(n),onKeyDown:l,onClick:p,...s,className:(0,i.A)("tabs__item",g.tabItem,s?.className,{"tabs__item--active":a===e}),children:t??e},e)}))})}function O(n){let{lazy:e,children:t,selectedValue:i}=n;const s=(Array.isArray(t)?t:[t]).filter(Boolean);if(e){const n=s.find((n=>n.props.value===i));return n?(0,a.cloneElement)(n,{className:"margin-top--md"}):null}return(0,I.jsx)("div",{className:"margin-top--md",children:s.map(((n,e)=>(0,a.cloneElement)(n,{key:e,hidden:n.props.value!==i})))})}function D(n){const e=f(n);return(0,I.jsxs)("div",{className:(0,i.A)("tabs-container",g.tabList),children:[(0,I.jsx)(E,{...e,...n}),(0,I.jsx)(O,{...e,...n})]})}function A(n){const e=(0,_.A)();return(0,I.jsx)(D,{...n,children:l(n.children)},String(e))}}}]);
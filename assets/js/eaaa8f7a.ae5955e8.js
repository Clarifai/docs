"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[2757],{65537:(e,n,o)=>{o.d(n,{A:()=>w});var t=o(96540),r=o(18215),i=o(65627),l=o(56347),a=o(50372),s=o(30604),d=o(11861),c=o(78749);function h(e){return t.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,t.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function u(e){const{values:n,children:o}=e;return(0,t.useMemo)((()=>{const e=n??function(e){return h(e).map((e=>{let{props:{value:n,label:o,attributes:t,default:r}}=e;return{value:n,label:o,attributes:t,default:r}}))}(o);return function(e){const n=(0,d.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,o])}function p(e){let{value:n,tabValues:o}=e;return o.some((e=>e.value===n))}function m(e){let{queryString:n=!1,groupId:o}=e;const r=(0,l.W6)(),i=function(e){let{queryString:n=!1,groupId:o}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!o)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return o??null}({queryString:n,groupId:o});return[(0,s.aZ)(i),(0,t.useCallback)((e=>{if(!i)return;const n=new URLSearchParams(r.location.search);n.set(i,e),r.replace({...r.location,search:n.toString()})}),[i,r])]}function f(e){const{defaultValue:n,queryString:o=!1,groupId:r}=e,i=u(e),[l,s]=(0,t.useState)((()=>function(e){let{defaultValue:n,tabValues:o}=e;if(0===o.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:o}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${o.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const t=o.find((e=>e.default))??o[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:i}))),[d,h]=m({queryString:o,groupId:r}),[f,x]=function(e){let{groupId:n}=e;const o=function(e){return e?`docusaurus.tab.${e}`:null}(n),[r,i]=(0,c.Dv)(o);return[r,(0,t.useCallback)((e=>{o&&i.set(e)}),[o,i])]}({groupId:r}),g=(()=>{const e=d??f;return p({value:e,tabValues:i})?e:null})();(0,a.A)((()=>{g&&s(g)}),[g]);return{selectedValue:l,selectValue:(0,t.useCallback)((e=>{if(!p({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);s(e),h(e),x(e)}),[h,x,i]),tabValues:i}}var x=o(9136);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var y=o(74848);function j(e){let{className:n,block:o,selectedValue:t,selectValue:l,tabValues:a}=e;const s=[],{blockElementScrollPositionUntilNextRender:d}=(0,i.a_)(),c=e=>{const n=e.currentTarget,o=s.indexOf(n),r=a[o].value;r!==t&&(d(n),l(r))},h=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const o=s.indexOf(e.currentTarget)+1;n=s[o]??s[0];break}case"ArrowLeft":{const o=s.indexOf(e.currentTarget)-1;n=s[o]??s[s.length-1];break}}n?.focus()};return(0,y.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":o},n),children:a.map((e=>{let{value:n,label:o,attributes:i}=e;return(0,y.jsx)("li",{role:"tab",tabIndex:t===n?0:-1,"aria-selected":t===n,ref:e=>{s.push(e)},onKeyDown:h,onClick:c,...i,className:(0,r.A)("tabs__item",g.tabItem,i?.className,{"tabs__item--active":t===n}),children:o??n},n)}))})}function b(e){let{lazy:n,children:o,selectedValue:i}=e;const l=(Array.isArray(o)?o:[o]).filter(Boolean);if(n){const e=l.find((e=>e.props.value===i));return e?(0,t.cloneElement)(e,{className:(0,r.A)("margin-top--md",e.props.className)}):null}return(0,y.jsx)("div",{className:"margin-top--md",children:l.map(((e,n)=>(0,t.cloneElement)(e,{key:n,hidden:e.props.value!==i})))})}function v(e){const n=f(e);return(0,y.jsxs)("div",{className:(0,r.A)("tabs-container",g.tabList),children:[(0,y.jsx)(j,{...n,...e}),(0,y.jsx)(b,{...n,...e})]})}function w(e){const n=(0,x.A)();return(0,y.jsx)(v,{...e,children:h(e.children)},String(n))}},79329:(e,n,o)=>{o.d(n,{A:()=>l});o(96540);var t=o(18215);const r={tabItem:"tabItem_Ymn6"};var i=o(74848);function l(e){let{children:n,hidden:o,className:l}=e;return(0,i.jsx)("div",{role:"tabpanel",className:(0,t.A)(r.tabItem,l),hidden:o,children:n})}},79490:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>w,contentTitle:()=>v,default:()=>A,frontMatter:()=>b,metadata:()=>t,toc:()=>I});const t=JSON.parse('{"id":"compute/models/upload/README","title":"Build and Upload Models","description":"Build and import models, including from external sources like Hugging Face","source":"@site/docs/compute/models/upload/README.mdx","sourceDirName":"compute/models/upload","slug":"/compute/models/upload/","permalink":"/compute/models/upload/","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"description":"Build and import models, including from external sources like Hugging Face","toc_min_heading_level":2,"toc_max_heading_level":5},"sidebar":"tutorialSidebar","previous":{"title":"Inference via UI","permalink":"/compute/models/inference/ui"},"next":{"title":"Run Models Locally","permalink":"/compute/models/upload/run-locally"}}');var r=o(74848),i=o(28453),l=o(65537),a=o(79329),s=o(58069);const d='from clarifai.runners.models.model_class import ModelClass\nfrom typing import Iterator\n\n\nclass MyModel(ModelClass):\n  """A custom runner that adds "Hello World" to the end of the text."""\n\n  def load_model(self):\n    """Load the model here."""\n\n  @ModelClass.method\n  def predict(self, text1: str = "") -> str:\n    """This is the method that will be called when the runner is run. It takes in an input and\n    returns an output.\n    """\n\n    output_text = text1 + " Hello World!"\n\n    return output_text\n\n  @ModelClass.method\n  def generate(self, text1: str = "") -> Iterator[str]:\n    """Example yielding a whole batch of streamed stuff back."""\n\n    for i in range(10):  # fake something iterating generating 10 times.\n      output_text = text1 + f"Generate Hello World {i}"\n      yield output_text\n\n  @ModelClass.method\n  def stream(self, input_iterator: Iterator[str]) -> Iterator[str]:\n    """Example yielding a whole batch of streamed stuff back."""\n\n    for i, input in enumerate(input_iterator):\n      output_text = input + f"Stream Hello World {i}"\n      yield output_text',c='model:\n  id: "my-uploaded-model"\n  user_id: "YOUR_USER_ID_HERE"\n  app_id: "YOUR_APP_ID_HERE"\n  model_type_id: "text-to-text"\n\nbuild_info:\n  python_version: "3.11"\n\ninference_compute_info:\n  cpu_limit: "1"\n  cpu_memory: "13Gi"\n  num_accelerators: 1\n  accelerator_type: ["NVIDIA-*"]\n  accelerator_memory: "15Gi"',h='checkpoints:\n  type: "huggingface"\n  repo_id: "meta-llama/Meta-Llama-3-8B-Instruct"\n  when: "runtime"\n  hf_token: "your_hf_token" # Required for private models',u="concepts:\n  - id: '0'\n    name: bus\n  - id: '1'\n    name: person\n  - id: '2'\n    name: bicycle\n  - id: '3'\n    name: car",p='clarifai model upload\n[INFO] 16:53:31.153832 No checkpoints specified in the config file |  thread=2540\n[INFO] 16:53:31.169705 Setup: Using Python version 3.11 from the config file to build the Dockerfile |  thread=2540\n[INFO] 16:53:31.179960 Setup: Validating requirements.txt file at C:\\Users\\Alfrick\\Desktop\\upload-model\\new2\\requirements.txt using uv pip compile |  thread=2540\n[INFO] 16:53:32.919408 Setup: Requirements.txt file validated successfully |  thread=2540\n[INFO] 16:53:32.932616 Setup: Linting Python files: [\'C:\\\\Users\\\\Alfrick\\\\Desktop\\\\upload-model\\\\new2\\\\1\\\\model.py\'] |  thread=2540\n[INFO] 16:53:33.054929 Setup: Python code linted successfully, no errors found. |  thread=2540\n[INFO] 16:53:33.056731 Setup: Using NVIDIA base image to build the Docker image and upload the model |  thread=2540\n[INFO] 16:53:33.343749 New model will be created at https://clarifai.com/alfrick/upload-models-2/models/new2 with it\'s first version. |  thread=2540\nPress Enter to continue...\n[INFO] 16:53:36.893686 Uploading file... |  thread=22676\n[INFO] 16:53:36.897061 Upload complete! |  thread=22676\nStatus: Upload in progress, Progress: 0% - Starting upload.  request_id: sdk-python-11.5.4-8151d7189a23425da945528977ea9Status: Upload done, Progress: 0% - Completed upload of files, initiating model version image build..  request_id: sdk-pStatus: Model image is currently being built., Progress: 0% - Model version image is being built.  request_id: sdk-pytho[INFO] 16:53:37.541441 Created Model Version ID: cd24a0369c4443e1b494ddddc3b42ef9 |  thread=2540\n[INFO] 16:53:37.541441 Full url to that version is: https://clarifai.com/alfrick/upload-models-2/models/new2 |  thread=2540\n[INFO] 16:53:43.222157 2025-06-27 13:53:36.865379 INFO: Downloading uploaded model from storage... |  thread=2540\n[INFO] 16:53:48.357261 2025-06-27 13:53:42.654003 INFO: Done downloading model\n2025-06-27 13:53:42.657878 INFO: Extracting upload...\n2025-06-27 13:53:42.662686 INFO: Done extracting upload\n2025-06-27 13:53:42.665555 INFO: Parsing requirements file for model version ID ****ddddc3b42ef9\n2025-06-27 13:53:42.691445 INFO: Dockerfile found at /shared/context/Dockerfile\ncat: /shared/context/downloader/hf_token: No such file or directory\n2025-06-27 13:53:43.397865 INFO: Setting up credentials\namazon-ecr-credential-helper\nVersion:    0.8.0\nGit commit: ********\n2025-06-27 13:53:43.402700 INFO: Building image...\n#1 \\[internal] load build definition from Dockerfile\n#1 transferring dockerfile: 2.72kB done\n#1 DONE 0.0s\n\n#2 resolve image config for docker-image://docker.io/docker/dockerfile:1.13-labs\n#2 DONE 0.1s\n\n#3 docker-image://docker.io/docker/dockerfile:1.13-labs@sha256:************18b8\n#3 resolve docker.io/docker/dockerfile:1.13-labs@sha256:************18b8 done\n#3 CACHED\n\n#4 \\[internal] load metadata for public.ecr.aws/clarifai-models/python-base:3.11-********\n#4 DONE 0.1s\n\n#5 \\[internal] load .dockerignore\n#5 transferring context: 2B done\n#5 DONE 0.0s\n\n#6 \\[final 1/8] FROM public.ecr.aws/clarifai-models/python-base:3.11-********@sha256:************0579\n#6 resolve public.ecr.aws/clarifai-models/python-base:3.11-********@sha256:************0579 done\n#6 DONE 0.0s\n\n#7 \\[internal] load build context\n#7 transferring context: 2.73kB done\n#7 DONE 0.0s\n\n#8 \\[final 5/8] COPY --chown=nonroot:nonroot downloader/unused.yaml /home/nonroot/main/1/checkpoints/.cache/unused.yaml\n#8 CACHED\n\n#9 \\[final 4/8] RUN ["uv", "pip", "show", "--no-cache-dir", "clarifai"]\n#9 CACHED\n\n#10 \\[final 2/8] COPY --link requirements.txt /home/nonroot/requirements.txt\n#10 CACHED\n\n#11 \\[final 3/8] RUN ["uv", "pip", "install", "--no-cache-dir", "-r", "/home/nonroot/requirements.txt"]\n#11 CACHED\n\n#12 \\[final 6/8] RUN  ["python", "-m", "clarifai.cli", "model", "download-checkpoints", "/home/nonroot/main", "--out_path", "/home/nonroot/main/1/checkpoints", "--stage", "build"]\n#12 CACHED\n\n#13 \\[final 7/8] COPY --link=true 1 /home/nonroot/main/1\n#13 DONE 0.0s\n\n#14 \\[final 8/8] COPY --link=true requirements.txt config.yaml /home/nonroot/main/\n#14 DONE 0.0s\n\n#15 exporting to image\n#15 exporting layers done\n#15 exporting manifest sha256:************2afa done\n#15 exporting config sha256:************79d5 done\n#15 pushing layers\n#15 ...\n\n#16 \\[auth] sharing credentials for 891377382885.dkr.ecr.us-east-1.amazonaws.com\n#16 DONE 0.0s\n\n#15 exporting to image\n#15 pushing layers 1.1s done\n#15 pushing manifest for ****/prod/pytorch:****ddddc3b42ef9@sha256:************2afa\n#15 pushing manifest for ****/prod/pytorch:****ddddc3b42ef9@sha256:************2afa 0.4s done\n#15 DONE 1.5s\n2025-06-27 13:53:45.299206 INFO: Done building image!!! |  thread=2540\n[INFO] 16:53:50.090215 Model build complete! |  thread=2540\n[INFO] 16:53:50.096221 Build time elapsed 12.6s) |  thread=2540\n[INFO] 16:53:50.096221 Check out the model at https://clarifai.com/alfrick/upload-models-2/models/new2 version: cd24a0369c4443e1b494ddddc3b42ef9 |  thread=2540\n[INFO] 16:53:50.106292\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n# Here is a code snippet to use this model:\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n                 |  thread=2540\n[INFO] 16:53:50.108847\n# Clarifai Model Client Script\n# Set the environment variables `CLARIFAI_DEPLOYMENT_ID` and `CLARIFAI_PAT` to run this script.\n# Example usage:\nimport os\n\nfrom clarifai.client import Model\nfrom clarifai.runners.utils import data_types\n\nmodel = Model("https://clarifai.com/alfrick/upload-models-2/models/new2",\n    deployment_id = os.environ[\'CLARIFAI_DEPLOYMENT_ID\'], # Only needed for dedicated deployed models\n )\n\n\n# Example model prediction from different model methods:\n\nresponse = model.predict(text1="What is the future of AI?")\nprint(response)\n\nresponse = model.generate(text1="What is the future of AI?")\nfor res in response:\n    print(res)\n\nresponse = model.stream(input_iterator=iter([What is the future of AI?]))\n\n |  thread=2540\nDo you want to deploy the model? (y/n): y\n[INFO] 16:53:59.722256 Checking for available compute clusters... |  thread=2540\n[INFO] 16:54:01.175314 Available compute clusters: |  thread=2540\n[INFO] 16:54:01.175314 1. new-cluster () |  thread=2540\n[INFO] 16:54:01.175314 2. local-dev-compute-cluster (Default Local Dev Compute Cluster) |  thread=2540\nChoose a compute cluster (1-2) or \'n\' to create a new one: n\n[INFO] 16:54:23.170187 Please create a new compute cluster by visiting: https://clarifai.com/settings/compute/new |  thread=2540\nDo you want to open the compute cluster creation page in your browser? (y/n): y\nAfter creating the compute cluster, press Enter to continue...\n[INFO] 16:56:17.225197 Re-checking for available compute clusters... |  thread=2540\n[INFO] 16:58:37.998573 Available compute clusters: |  thread=2540\n[INFO] 16:58:38.002603 1. new-cluster2 () |  thread=2540\n[INFO] 16:58:38.002603 2. new-cluster () |  thread=2540\n[INFO] 16:58:38.002603 3. local-dev-compute-cluster (Default Local Dev Compute Cluster) |  thread=2540\nChoose a compute cluster (1-3): 1\n[INFO] 16:58:52.048631 Checking for available nodepools in compute cluster \'new-cluster2\'... |  thread=2540\n[INFO] 16:58:53.611561 Available nodepools: |  thread=2540\n[INFO] 16:58:53.613665 1. new-nodepool2 () |  thread=2540\nChoose a nodepool (1-1) or \'n\' to create a new one: n\n[INFO] 16:58:59.948120 Please create a new nodepool by visiting: https://clarifai.com/settings/compute/new-cluster2/nodepools/new |  thread=2540\nDo you want to open the nodepool creation page in your browser? (y/n): y\nAfter creating the nodepool, press Enter to continue...\n[INFO] 17:00:27.299095 Re-checking for available nodepools in compute cluster \'new-cluster2\'... |  thread=2540\n[INFO] 17:00:28.105393 Available nodepools: |  thread=2540\n[INFO] 17:00:28.110061 1. new-nodepool3 () |  thread=2540\n[INFO] 17:00:28.112077 2. new-nodepool2 () |  thread=2540\nChoose a nodepool (1-2): 1\n[INFO] 17:00:33.084285 Please create a new deployment by visiting: https://clarifai.com/settings/compute/deployments/new?computeClusterId=new-cluster2&nodePoolId=new-nodepool3 |  thread=2540\nDo you want to open the deployment creation page in your browser? (y/n): y\n[INFO] 17:00:38.341840 After creating the deployment, your model will be ready for inference! |  thread=2540\n[INFO] 17:00:38.343856 You can always return to view your deployments at: https://clarifai.com/settings/compute/deployments/new?computeClusterId=new-cluster2&nodePoolId=new-nodepool3 |  thread=2540\n',m='import os\nfrom clarifai.client import Model\n\n# Set your Personal Access Token (PAT)\nos.environ["CLARIFAI_PAT"] = "YOUR_PAT_HERE"\n\n# Initialize with model URL\nmodel = Model(url="https://clarifai.com/alfrick/docs-demos/models/my-uploaded-model")\n\nresponse = model.predict("Yes, I uploaded it!")\n\nprint(response)',f='import os\nfrom clarifai.client import Model\n\n# Set your Personal Access Token (PAT)\nos.environ["CLARIFAI_PAT"] = "YOUR_PAT_HERE"\n\n# Initialize with model URL\nmodel = Model(url="https://clarifai.com/alfrick/docs-demos/models/my-uploaded-model")\n\nfor response in model.generate("Yes, I uploaded it! "):\n    print(response.text)',x='import os\nfrom clarifai.client import Model\nfrom clarifai.runners.utils.data_types import Text\n\n# Set your Personal Access Token (PAT)\nos.environ["CLARIFAI_PAT"] = "YOUR_PAT_HERE"\n\n# Initialize with model URL\nmodel = Model(url="https://clarifai.com/alfrick/docs-demos/models/my-uploaded-model", deployment_id="YOUR_DEPLOYMENT_ID_HERE")\n\n# Create a list of input Texts to simulate a stream\ninput_texts = iter([\n    Text(text="First input."),\n    Text(text="Second input."),\n    Text(text="Third input.")\n])\n\n# Call the stream method and process outputs\nresponse_iterator = model.stream(input_texts)\n\n# Print streamed results\nprint("Streaming output:\\n")\nfor response in response_iterator:\n    print(response.text)\n',g="Text(text='Yes, I uploaded it! Hello World!', url=None)",y="Yes, I uploaded it! Generate Hello World 0\nYes, I uploaded it! Generate Hello World 1\nYes, I uploaded it! Generate Hello World 2\nYes, I uploaded it! Generate Hello World 3\nYes, I uploaded it! Generate Hello World 4\nYes, I uploaded it! Generate Hello World 5\nYes, I uploaded it! Generate Hello World 6\nYes, I uploaded it! Generate Hello World 7\nYes, I uploaded it! Generate Hello World 8\nYes, I uploaded it! Generate Hello World 9",j="Streaming output:\n\nFirst input.Stream Hello World 0\nSecond input.Stream Hello World 1\nThird input.Stream Hello World 2",b={description:"Build and import models, including from external sources like Hugging Face",toc_min_heading_level:2,toc_max_heading_level:5},v="Build and Upload Models",w={},I=[{value:"Step 1: Perform Prerequisites",id:"step-1-perform-prerequisites",level:2},{value:"Set up Docker or a Virtual Environment",id:"set-up-docker-or-a-virtual-environment",level:3},{value:"Install Clarifai Package",id:"install-clarifai-package",level:3},{value:"Set a PAT Key",id:"set-a-pat-key",level:3},{value:"Create Project Directory",id:"create-project-directory",level:3},{value:"Step 2: Build a Model",id:"step-2-build-a-model",level:2},{value:"Prepare <code>model.py</code>",id:"prepare-modelpy",level:3},{value:"a. <code>load_model</code> Method",id:"a-load_model-method",level:4},{value:"b. Prediction Methods",id:"b-prediction-methods",level:4},{value:"Prepare <code>config.yaml</code>",id:"prepare-configyaml",level:3},{value:"Model Info",id:"model-info",level:4},{value:"Build Info",id:"build-info",level:4},{value:"Compute Resources",id:"compute-resources",level:4},{value:"Hugging Face Model Checkpoints",id:"hugging-face-model-checkpoints",level:4},{value:"Model Concepts or Labels",id:"model-concepts-or-labels",level:4},{value:"Prepare <code>requirements.txt</code>",id:"prepare-requirementstxt",level:3},{value:"Step 3: Test the Model Locally",id:"step-3-test-the-model-locally",level:2},{value:"Step 4: Upload the Model to Clarifai",id:"step-4-upload-the-model-to-clarifai",level:2},{value:"Step 5: Deploy the Model",id:"step-5-deploy-the-model",level:2},{value:"Step 6: Predict With Model",id:"step-6-predict-with-model",level:2},{value:"Unary-Unary Predict Call",id:"unary-unary-predict-call",level:3},{value:"Unary-Stream Predict Call",id:"unary-stream-predict-call",level:3},{value:"Stream-Stream Predict Call",id:"stream-stream-predict-call",level:3},{value:"Additional Examples",id:"additional-examples",level:2}];function k(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components},{Details:o}=n;return o||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"build-and-upload-models",children:"Build and Upload Models"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Build and import models, including from sources like Hugging Face"})}),"\n",(0,r.jsx)("hr",{}),"\n",(0,r.jsx)("div",{style:{position:"relative",width:"100%",overflow:"hidden","padding-top":"56.25%"},children:(0,r.jsx)("iframe",{width:"900",height:"500",style:{position:"absolute",top:"0",left:"0",bottom:"0",right:"0",width:"100%",height:"100%"},src:"https://www.youtube.com/embed/SpIDmDtf7UE",title:"Upload Custom Models to Clarifai Platform Using Python SDK",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share",allowfullscreen:!0})}),"\n",(0,r.jsx)("br",{}),"\n",(0,r.jsx)("br",{}),"\n",(0,r.jsx)(n.p,{children:"The Clarifai Python SDK allows you to upload custom models easily. Whether you're working with a pre-trained model from an external source like Hugging Face, or one you've built from scratch, Clarifai allows seamless integration of your models, enabling you to take advantage of the platform\u2019s powerful capabilities."}),"\n",(0,r.jsx)(n.p,{children:"Once imported to our platform, your model can be utilized alongside Clarifai's vast suite of AI tools. It will be automatically deployed and ready to be evaluated, combined with other models and agent operators in a workflow, or used to serve inference requests as it is."}),"\n",(0,r.jsx)(n.admonition,{title:"Objective",type:"info",children:(0,r.jsxs)(n.p,{children:["Let\u2019s walk through how to build and upload a custom model to the Clarifai platform. This example model appends the phrase ",(0,r.jsx)(n.code,{children:"Hello World"})," to any input text and also supports streaming responses.\nYou can test the already uploaded model ",(0,r.jsx)(n.a,{href:"https://clarifai.com/alfrick/docs-demos/models/my-uploaded-model",children:"here"}),"."]})}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsxs)(n.p,{children:["You can explore ",(0,r.jsx)(n.a,{href:"https://github.com/Clarifai/runners-examples",children:"this repository"})," for examples on uploading different model types."]})}),"\n","\n","\n","\n","\n","\n",(0,r.jsx)(n.h2,{id:"step-1-perform-prerequisites",children:"Step 1: Perform Prerequisites"}),"\n",(0,r.jsx)(n.h3,{id:"set-up-docker-or-a-virtual-environment",children:"Set up Docker or a Virtual Environment"}),"\n",(0,r.jsx)(n.p,{children:"To test, run, and upload your model, you need to set up either a Docker container or a Python virtual environment. This ensures proper dependency management and prevents conflicts in your project."}),"\n",(0,r.jsxs)(n.p,{children:["Both options allow you to work with different Python versions. For example, you can use Python 3.11 for uploading one model and Python 3.12 for another \u2014 configured via the ",(0,r.jsx)(n.a,{href:"#build-info",children:(0,r.jsx)(n.code,{children:"config.yaml"})})," file."]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"If Docker is installed on your system, it is highly recommended to use it for running the model. Docker provides better isolation and a fully portable environment, including for Python and system libraries."}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["You should ensure your local environment has sufficient memory and compute resources to handle model loading and execution, especially during ",(0,r.jsx)(n.a,{href:"https://docs.clarifai.com/sdk/compute-orchestration/test-models-locally",children:"testing"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"install-clarifai-package",children:"Install Clarifai Package"}),"\n",(0,r.jsxs)(n.p,{children:["Install the latest version of the ",(0,r.jsx)(n.code,{children:"clarifai"})," Python package. This will also install the Clarifai ",(0,r.jsx)(n.a,{href:"https://docs.clarifai.com/additional-resources/api-overview/cli/",children:"Command Line Interface"})," (CLI), which we'll use for testing and uploading the model."]}),"\n",(0,r.jsx)(l.A,{groupId:"code",children:(0,r.jsx)(a.A,{value:"bash",label:"Bash",children:(0,r.jsx)(s.A,{className:"language-bash",children:" pip install --upgrade clarifai "})})}),"\n",(0,r.jsx)(n.h3,{id:"set-a-pat-key",children:"Set a PAT Key"}),"\n",(0,r.jsxs)(n.p,{children:["You need to set the ",(0,r.jsx)(n.code,{children:"CLARIFAI_PAT"})," (Personal Access Token) as an environment variable. You can generate the PAT key in your personal settings page by navigating to the ",(0,r.jsx)(n.a,{href:"https://clarifai.com/settings/security",children:"Security section"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"This token is essential for authenticating your connection to the Clarifai platform."}),"\n",(0,r.jsxs)(l.A,{groupId:"code",children:[(0,r.jsx)(a.A,{value:"bash",label:"Unix-Like Systems",children:(0,r.jsx)(s.A,{className:"language-bash",children:" export CLARIFAI_PAT=YOUR_PERSONAL_ACCESS_TOKEN_HERE "})}),(0,r.jsx)(a.A,{value:"bash2",label:"Windows",children:(0,r.jsx)(s.A,{className:"language-bash",children:" set CLARIFAI_PAT=YOUR_PERSONAL_ACCESS_TOKEN_HERE "})})]}),"\n",(0,r.jsx)(n.admonition,{title:"tip",type:"note",children:(0,r.jsxs)(n.p,{children:["On Windows, the Clarifai Python SDK expects a ",(0,r.jsx)(n.code,{children:"HOME"})," environment variable, which isn\u2019t set by default. To ensure compatibility with file paths used by the SDK, set ",(0,r.jsx)(n.code,{children:"HOME"})," to the value of your ",(0,r.jsx)(n.code,{children:"USERPROFILE"}),". You can set it in your Command Prompt this way: ",(0,r.jsx)(n.code,{children:"set HOME=%USERPROFILE%"}),"."]})}),"\n",(0,r.jsx)(n.h3,{id:"create-project-directory",children:"Create Project Directory"}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsxs)(n.p,{children:["You can automatically generate the required files by running the ",(0,r.jsx)(n.a,{href:"https://docs.clarifai.com/resources/api-overview/cli#clarifai-model-init",children:(0,r.jsx)(n.code,{children:"clarifai model init"})})," command in the terminal from your current directory. After the files are created, you can modify them as needed."]})}),"\n",(0,r.jsx)(n.p,{children:"Create a project directory and organize your files as indicated below to fit the requirements of uploading models to the Clarifai platform."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"your_model_directory/\n\u251c\u2500\u2500 1/\n\u2502   \u2514\u2500\u2500 model.py\n\u251c\u2500\u2500 requirements.txt\n\u2514\u2500\u2500 config.yaml\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"your_model_directory/"})," \u2013 The root directory containing all files related to your custom model.","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"1/"})," \u2013 A subdirectory that holds the model file (",(0,r.jsxs)(n.em,{children:["Note that the folder is named as ",(0,r.jsx)(n.strong,{children:"1"})]}),").","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"model.py"})," \u2013 Contains the code that defines your model, including loading the model and running inference."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"requirements.txt"})," \u2013 Lists the Python dependencies required to run your model."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"config.yaml"})," \u2013 Contains model metadata and configuration details necessary for building the model, defining compute resources, and more."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"step-2-build-a-model",children:"Step 2: Build a Model"}),"\n",(0,r.jsx)(n.p,{children:"Let's talk about the general steps you'd follow to upload any type of model to the Clarifai platform."}),"\n",(0,r.jsxs)(n.h3,{id:"prepare-modelpy",children:["Prepare ",(0,r.jsx)(n.code,{children:"model.py"})]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"model.py"})," file contains the core logic for your model, including how the model is loaded and how predictions are made. This file must define a custom class that inherits from ",(0,r.jsx)(n.code,{children:"ModelClass"})," and implements the required methods."]}),"\n",(0,r.jsxs)(n.p,{children:["This is the ",(0,r.jsx)(n.code,{children:"model.py"})," file for the custom model we want to upload:"]}),"\n",(0,r.jsx)(l.A,{groupId:"code",children:(0,r.jsx)(a.A,{value:"python",label:"Python",children:(0,r.jsx)(s.A,{className:"language-python",children:d})})}),"\n",(0,r.jsx)(n.p,{children:"Let\u2019s break down what each part of the file does."}),"\n",(0,r.jsxs)(n.h4,{id:"a-load_model-method",children:["a. ",(0,r.jsx)(n.code,{children:"load_model"})," Method"]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"load_model"})," method is optional but recommended, as it prepares the model for inference by handling resource-heavy initializations. It is particularly useful for:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"One-time setup of heavy resources, such as loading trained models or initializing data transformations."}),"\n",(0,r.jsx)(n.li,{children:"Executing tasks during model container startup to reduce runtime latency."}),"\n",(0,r.jsx)(n.li,{children:"Loading essential components like tokenizers, pipelines, and other model-related assets."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Here is an example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'def load_model(self):\n  self.tokenizer = AutoTokenizer.from_pretrained("model/")\n  self.pipeline = transformers.pipeline(...)\n'})}),"\n",(0,r.jsx)(n.h4,{id:"b-prediction-methods",children:"b. Prediction Methods"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"model.py"})," file must include at least one method decorated with ",(0,r.jsx)(n.code,{children:"@ModelClass.method"})," to define the prediction endpoints."]}),"\n",(0,r.jsxs)(n.p,{children:["In the example model we want to upload, we defined a method that appends the phrase ",(0,r.jsx)(n.code,{children:"Hello World"})," to any input text and added support for different types of ",(0,r.jsx)(n.a,{href:"#step-6-predict-with-model",children:"streaming responses"}),"."]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Note:"})," The structure of prediction methods on the client side directly mirrors the method signatures defined in your ",(0,r.jsx)(n.code,{children:"model.py"})," file. This one-to-one mapping provides flexibility in defining prediction methods with varying names and arguments."]}),"\n"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"Here are some examples of method mapping:"}),"\n"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsxs)(n.th,{children:[(0,r.jsx)(n.code,{children:"model.py"})," Model Implementation"]}),(0,r.jsx)(n.th,{children:"Client-Side Usage Pattern"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"@ModelClass.method def predict(...)"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"model.predict(...)"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"@ModelClass.method def generate(...)"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"model.generate(...)"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"@ModelClass.method def stream(...)"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"model.stream(...)"})})]})]})]}),"\n"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["You can learn more about the structure of prediction methods ",(0,r.jsx)(n.a,{href:"https://docs.clarifai.com/compute/models/inference/#structure-of-prediction-methods",children:"here"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.admonition,{type:"warning",children:[(0,r.jsx)(n.mdxAdmonitionTitle,{children:(0,r.jsx)(n.a,{href:"https://docs.clarifai.com/compute/models/model-upload/data-types/",children:"Supported Input and Output Data Types"})}),(0,r.jsxs)(n.p,{children:["Each parameter in the class methods must be annotated with a type, and the return type must also be specified. Clarifai's model framework supports rich data typing for both inputs and outputs. Supported types include ",(0,r.jsx)(n.code,{children:"Text"}),", ",(0,r.jsx)(n.code,{children:"Image"}),", ",(0,r.jsx)(n.code,{children:"Audio"}),", ",(0,r.jsx)(n.code,{children:"Video"}),", and more."]})]}),"\n",(0,r.jsxs)(n.h3,{id:"prepare-configyaml",children:["Prepare ",(0,r.jsx)(n.code,{children:"config.yaml"})]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"config.yaml"})," file is essential for specifying the model\u2019s metadata, compute resource requirements, and model checkpoints."]}),"\n",(0,r.jsxs)(n.p,{children:["This is the ",(0,r.jsx)(n.code,{children:"config.yaml"})," file for the custom model we want to upload:"]}),"\n",(0,r.jsx)(l.A,{groupId:"code",children:(0,r.jsx)(a.A,{value:"yaml",label:"YAML",children:(0,r.jsx)(s.A,{className:"language-yaml",children:c})})}),"\n",(0,r.jsx)(n.p,{children:"Let\u2019s break down what each part of the file does."}),"\n",(0,r.jsx)(n.h4,{id:"model-info",children:"Model Info"}),"\n",(0,r.jsx)(n.p,{children:"This section defines your model ID, Clarifai user ID, and Clarifai app ID, which will determine where the model is uploaded on the Clarifai platform."}),"\n",(0,r.jsx)(n.h4,{id:"build-info",children:"Build Info"}),"\n",(0,r.jsxs)(n.p,{children:["This section specifies details about the environment used to build or run the model. You can include the ",(0,r.jsx)(n.code,{children:"python_version"}),", which is useful for ensuring compatibility between the model and its runtime environment, as different Python versions may have varying dependencies, library support, and performance characteristics."]}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsx)(n.p,{children:"We currently support Python 3.11 and Python 3.12 (default)."})}),"\n",(0,r.jsx)(n.h4,{id:"compute-resources",children:"Compute Resources"}),"\n",(0,r.jsx)(n.p,{children:"You must define the minimum compute resources required for running your model, including CPU, memory, and optional GPU specifications."}),"\n",(0,r.jsx)(n.p,{children:"These are some parameters you can define:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"cpu_limit"})}),' \u2013 Number of CPUs allocated for the model (follows Kubernetes notation, e.g., "1", "2").']}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"cpu_memory"})}),' \u2013 Minimum memory required for the CPU (uses Kubernetes notation, e.g., "1Gi", "1500Mi", "3Gi").']}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"num_accelerators"})})," \u2013 Number of GPUs or TPUs to use for inference."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"accelerator_type"})})," \u2013 Specifies the type of hardware ",(0,r.jsx)(n.a,{href:"https://docs.clarifai.com/compute/deployments/cloud-instances/",children:"accelerators"}),' (e.g., GPU or TPU) supported by the model (e.g., "NVIDIA-A10G"). ',(0,r.jsxs)(n.em,{children:["Note that instead of specifying an exact accelerator type, you can use a wildcard ",(0,r.jsx)(n.code,{children:"(*)"})," to automatically match all available accelerators that fit your use case. For example, using ",(0,r.jsx)(n.code,{children:'["NVIDIA-*"]'})," will enable the system to choose from all NVIDIA options compatible with your model."]})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"accelerator_memory"})})," \u2013 Minimum memory required for the GPU or TPU."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"hugging-face-model-checkpoints",children:"Hugging Face Model Checkpoints"}),"\n",(0,r.jsx)(n.p,{children:"If you're using a model from Hugging Face, you can automatically download its checkpoints by specifying the appropriate configuration in this section."}),"\n",(0,r.jsxs)(n.p,{children:["For private or restricted Hugging Face repositories, make sure to include an access token. Learn how to generate one ",(0,r.jsx)(n.a,{href:"https://huggingface.co/docs/hub/en/security-tokens",children:"here"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["See the ",(0,r.jsx)(n.a,{href:"#additional-examples",children:"additional examples"})," below for how to define Hugging Face checkpoints."]}),"\n",(0,r.jsx)(l.A,{groupId:"code",children:(0,r.jsx)(a.A,{value:"yaml",label:"YAML",children:(0,r.jsx)(s.A,{className:"language-yaml",children:h})})}),"\n",(0,r.jsxs)(n.admonition,{type:"note",children:[(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"when"})," parameter in the ",(0,r.jsx)(n.code,{children:"checkpoints"})," section determines when model checkpoints should be downloaded and stored. It must be set to one of the following options:"]}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"runtime"})," (",(0,r.jsx)(n.em,{children:"default"}),") \u2013 Downloads checkpoints when loading the model in the ",(0,r.jsx)(n.code,{children:"load_model"})," method."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"build"})," \u2013 Downloads checkpoints during the image build process."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"upload"})," \u2013 Downloads checkpoints before uploading the model."]}),"\n"]}),(0,r.jsxs)(n.p,{children:["For larger models, we highly recommend downloading checkpoints at ",(0,r.jsx)(n.code,{children:"runtime"}),". Doing so prevents unnecessary increases in Docker image size, which has some advantages:"]}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Smaller image sizes"}),"\n",(0,r.jsx)(n.li,{children:"Faster build times"}),"\n",(0,r.jsx)(n.li,{children:"Quicker uploads and inference on the Clarifai platform"}),"\n"]}),(0,r.jsxs)(n.p,{children:["Downloading checkpoints at ",(0,r.jsx)(n.code,{children:"build"})," or ",(0,r.jsx)(n.code,{children:"upload"})," time can significantly increase image size, resulting in longer upload times and increased cold start latency."]})]}),"\n",(0,r.jsx)(n.h4,{id:"model-concepts-or-labels",children:"Model Concepts or Labels"}),"\n",(0,r.jsxs)(n.p,{children:["This section is required if your model outputs concepts or labels and is not being directly loaded from Hugging Face. So, you must define a ",(0,r.jsx)(n.code,{children:"concepts"})," section in the ",(0,r.jsx)(n.code,{children:"config.yaml"})," file."]}),"\n",(0,r.jsx)(n.p,{children:"The following model types output concepts or labels:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"visual-classifier"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"visual-detector"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"visual-segmenter"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"text-classifier"})}),"\n"]}),"\n",(0,r.jsx)(l.A,{groupId:"code",children:(0,r.jsx)(a.A,{value:"yaml",label:"YAML",children:(0,r.jsx)(s.A,{className:"language-yaml",children:u})})}),"\n",(0,r.jsxs)(n.admonition,{type:"note",children:[(0,r.jsx)(n.mdxAdmonitionTitle,{}),(0,r.jsxs)(n.p,{children:["If you're using a model from Hugging Face and the ",(0,r.jsx)(n.code,{children:"checkpoints"})," section is defined, the Clarifai platform will automatically infer concepts. In this case, you don\u2019t need to manually specify them."]})]}),"\n",(0,r.jsxs)(n.h3,{id:"prepare-requirementstxt",children:["Prepare ",(0,r.jsx)(n.code,{children:"requirements.txt"})]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"requirements.txt"})," file lists all the Python dependencies your model needs."]}),"\n",(0,r.jsxs)(n.p,{children:["This is the ",(0,r.jsx)(n.code,{children:"requirements.txt"})," file for the custom model we want to upload:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"clarifai>=11.3.0\n"})}),"\n",(0,r.jsx)(n.p,{children:"If your model requires Torch, we provide optimized pre-built Torch images as the base for machine learning and inference tasks."}),"\n",(0,r.jsx)(n.p,{children:"These images include all necessary dependencies, ensuring efficient execution. The available pre-built Torch images are:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"2.4.1-py3.11-cuda124"})," \u2014 Based on PyTorch 2.4.1, Python 3.11, and CUDA 12.4."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"2.5.1-py3.11-cuda124"})," \u2014 Based on PyTorch 2.5.1, Python 3.11, and CUDA 12.4."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"2.4.1-py3.12-cuda124"})," \u2014 Based on PyTorch 2.4.1, Python 3.12, and CUDA 12.4."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"2.5.1-py3.12-cuda124"})," \u2014 Based on PyTorch 2.5.1, Python 3.12, and CUDA 12.4."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"To use a specific Torch version, define it in your requirements.txt file like this:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"torch==2.5.1\n"})}),"\n",(0,r.jsx)(n.p,{children:"This ensures the correct pre-built image is pulled from Clarifai's container registry, ensuring the correct environment is used. This minimizes cold start times and speeds up model uploads and runtime execution \u2014 avoiding the overhead of building images from scratch or pulling and configuring them from external sources."}),"\n",(0,r.jsxs)(n.p,{children:["We recommend using either ",(0,r.jsx)(n.code,{children:"torch==2.5.1"})," or ",(0,r.jsx)(n.code,{children:"torch==2.4.1"}),". If your model requires a different Torch version, you can specify it in requirements.txt, but this may slightly increase the model upload time."]}),"\n",(0,r.jsx)(n.h2,{id:"step-3-test-the-model-locally",children:"Step 3: Test the Model Locally"}),"\n",(0,r.jsx)(n.p,{children:"Before uploading your model to the Clarifai platform, it's important to test it locally to catch any typos or misconfigurations in the code."}),"\n",(0,r.jsxs)(n.p,{children:["Learn how to  run and test your models locally ",(0,r.jsx)(n.a,{href:"https://docs.clarifai.com/compute/models/upload/run-locally",children:"here"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"step-4-upload-the-model-to-clarifai",children:"Step 4: Upload the Model to Clarifai"}),"\n",(0,r.jsx)(n.p,{children:"Once your model is ready, you can upload it to the platform using Clarifai CLI."}),"\n",(0,r.jsx)(n.p,{children:"To upload your model, run the following command in your terminal:"}),"\n",(0,r.jsx)(l.A,{groupId:"code",children:(0,r.jsx)(a.A,{value:"bash",label:"Bash",children:(0,r.jsx)(s.A,{className:"language-bash",children:" clarifai model upload ./your/model/path/here "})})}),"\n",(0,r.jsx)(n.p,{children:"Alternatively, navigate to the directory containing your custom model and run the command without specifying the directory path:"}),"\n",(0,r.jsx)(l.A,{groupId:"code",children:(0,r.jsx)(a.A,{value:"bash",label:"Bash",children:(0,r.jsx)(s.A,{className:"language-bash",children:" clarifai model upload "})})}),"\n",(0,r.jsx)(n.p,{children:"This command builds the model\u2019s Docker image using the defined compute resources and uploads it to Clarifai, where it can be served in production.\nThe build logs will be displayed in your terminal, which helps you troubleshoot any upload issues."}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Note"}),": If you make any changes to your model and upload it again to the Clarifai platform, a new version of the model will be created automatically."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"step-5-deploy-the-model",children:"Step 5: Deploy the Model"}),"\n",(0,r.jsx)(n.p,{children:"After you've successfully uploaded your model to the Clarifai platform, the terminal will guide you through the deployment process, getting your model ready for inference."}),"\n",(0,r.jsx)(n.p,{children:"You can follow the prompts to:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"https://docs.clarifai.com/compute/deployments/clusters-nodepools",children:"Set up a cluster"})})," \u2013 This serves as the overarching computational environment."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Create a nodepool"})," \u2013 A nodepool is a group of compute nodes within your cluster that provides the resources needed to run your model."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"https://docs.clarifai.com/compute/deployments/deploy-model",children:"Deploy your model"})})," \u2013 Once your nodepool is set up, you can deploy your model, making it available to process prediction requests."]}),"\n"]}),"\n",(0,r.jsxs)(o,{children:[(0,r.jsx)("summary",{children:"Build Logs Example"}),(0,r.jsx)(s.A,{className:"language-text",children:p})]}),"\n",(0,r.jsx)(n.h2,{id:"step-6-predict-with-model",children:"Step 6: Predict With Model"}),"\n",(0,r.jsx)(n.p,{children:"Once the model is successfully deployed, you can start making predictions with it."}),"\n",(0,r.jsx)(n.h3,{id:"unary-unary-predict-call",children:"Unary-Unary Predict Call"}),"\n",(0,r.jsxs)(n.p,{children:["You can make a ",(0,r.jsx)(n.a,{href:"https://docs.clarifai.com/compute/models/inference/api/#unary-unary-predict-call",children:"unary-unary"})," predict call using the model."]}),"\n",(0,r.jsx)(l.A,{groupId:"code",children:(0,r.jsx)(a.A,{value:"python",label:"Python",children:(0,r.jsx)(s.A,{className:"language-python",children:m})})}),"\n",(0,r.jsxs)(o,{children:[(0,r.jsx)("summary",{children:"Example Output"}),(0,r.jsx)(s.A,{className:"language-text",children:g})]}),"\n",(0,r.jsx)(n.h3,{id:"unary-stream-predict-call",children:"Unary-Stream Predict Call"}),"\n",(0,r.jsxs)(n.p,{children:["You can make a ",(0,r.jsx)(n.a,{href:"https://docs.clarifai.com/compute/models/inference/api/#unary-stream-predict-call",children:"unary-stream"})," predict call using the model."]}),"\n",(0,r.jsx)(l.A,{groupId:"code",children:(0,r.jsx)(a.A,{value:"python",label:"Python",children:(0,r.jsx)(s.A,{className:"language-python",children:f})})}),"\n",(0,r.jsxs)(o,{children:[(0,r.jsx)("summary",{children:"Example Output"}),(0,r.jsx)(s.A,{className:"language-text",children:y})]}),"\n",(0,r.jsx)(n.h3,{id:"stream-stream-predict-call",children:"Stream-Stream Predict Call"}),"\n",(0,r.jsxs)(n.p,{children:["You can make a ",(0,r.jsx)(n.a,{href:"https://docs.clarifai.com/compute/models/inference/api/#stream-stream-predict-call",children:"stream-stream"})," predict call using the model."]}),"\n",(0,r.jsx)(l.A,{groupId:"code",children:(0,r.jsx)(a.A,{value:"python",label:"Python",children:(0,r.jsx)(s.A,{className:"language-python",children:x})})}),"\n",(0,r.jsxs)(o,{children:[(0,r.jsx)("summary",{children:"Example Output"}),(0,r.jsx)(s.A,{className:"language-text",children:j})]}),"\n",(0,r.jsx)(n.h2,{id:"additional-examples",children:"Additional Examples"}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsxs)(n.p,{children:["You can find various up-to-date model upload examples ",(0,r.jsx)(n.a,{href:"https://github.com/Clarifai/runners-examples",children:"here"}),", which demonstrate different use cases and optimizations."]})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://github.com/Clarifai/runners-examples/tree/main/llm/hf-llama-3_2-1b-instruct",children:"Llama-3.2-1B-Instruct"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://github.com/Clarifai/runners-examples/tree/main/image-classifier/nsfw-image-classifier",children:"NSFW Image Classifier"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://github.com/Clarifai/runners-examples/tree/main/image-detector/detr-resnet-image-detection",children:"DETR Resnet Image Detector"})}),"\n"]})]})}function A(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(k,{...e})}):k(e)}}}]);
"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[8601],{85162:(e,n,t)=>{t.d(n,{Z:()=>o});var a=t(67294),s=t(86010);const r={tabItem:"tabItem_Ymn6"};function o(e){let{children:n,hidden:t,className:o}=e;return a.createElement("div",{role:"tabpanel",className:(0,s.Z)(r.tabItem,o),hidden:t},n)}},74866:(e,n,t)=>{t.d(n,{Z:()=>A});var a=t(87462),s=t(67294),r=t(86010),o=t(12466),c=t(16550),i=t(91980),l=t(67392),u=t(50012);function p(e){return function(e){return s.Children.map(e,(e=>{if(!e||(0,s.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:n,label:t,attributes:a,default:s}}=e;return{value:n,label:t,attributes:a,default:s}}))}function d(e){const{values:n,children:t}=e;return(0,s.useMemo)((()=>{const e=n??p(t);return function(e){const n=(0,l.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function h(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function m(e){let{queryString:n=!1,groupId:t}=e;const a=(0,c.k6)(),r=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,i._X)(r),(0,s.useCallback)((e=>{if(!r)return;const n=new URLSearchParams(a.location.search);n.set(r,e),a.replace({...a.location,search:n.toString()})}),[r,a])]}function _(e){const{defaultValue:n,queryString:t=!1,groupId:a}=e,r=d(e),[o,c]=(0,s.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!h({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const a=t.find((e=>e.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:r}))),[i,l]=m({queryString:t,groupId:a}),[p,_]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[a,r]=(0,u.Nk)(t);return[a,(0,s.useCallback)((e=>{t&&r.set(e)}),[t,r])]}({groupId:a}),f=(()=>{const e=i??p;return h({value:e,tabValues:r})?e:null})();(0,s.useLayoutEffect)((()=>{f&&c(f)}),[f]);return{selectedValue:o,selectValue:(0,s.useCallback)((e=>{if(!h({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);c(e),l(e),_(e)}),[l,_,r]),tabValues:r}}var f=t(72389);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function E(e){let{className:n,block:t,selectedValue:c,selectValue:i,tabValues:l}=e;const u=[],{blockElementScrollPositionUntilNextRender:p}=(0,o.o5)(),d=e=>{const n=e.currentTarget,t=u.indexOf(n),a=l[t].value;a!==c&&(p(n),i(a))},h=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const t=u.indexOf(e.currentTarget)+1;n=u[t]??u[0];break}case"ArrowLeft":{const t=u.indexOf(e.currentTarget)-1;n=u[t]??u[u.length-1];break}}n?.focus()};return s.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":t},n)},l.map((e=>{let{value:n,label:t,attributes:o}=e;return s.createElement("li",(0,a.Z)({role:"tab",tabIndex:c===n?0:-1,"aria-selected":c===n,key:n,ref:e=>u.push(e),onKeyDown:h,onClick:d},o,{className:(0,r.Z)("tabs__item",g.tabItem,o?.className,{"tabs__item--active":c===n})}),t??n)})))}function b(e){let{lazy:n,children:t,selectedValue:a}=e;const r=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=r.find((e=>e.props.value===a));return e?(0,s.cloneElement)(e,{className:"margin-top--md"}):null}return s.createElement("div",{className:"margin-top--md"},r.map(((e,n)=>(0,s.cloneElement)(e,{key:n,hidden:e.props.value!==a}))))}function C(e){const n=_(e);return s.createElement("div",{className:(0,r.Z)("tabs-container",g.tabList)},s.createElement(E,(0,a.Z)({},e,n)),s.createElement(b,(0,a.Z)({},e,n)))}function A(e){const n=(0,f.Z)();return s.createElement(C,(0,a.Z)({key:String(n)},e))}},70595:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>b,contentTitle:()=>g,default:()=>I,frontMatter:()=>f,metadata:()=>E,toc:()=>C});var a=t(87462),s=(t(67294),t(3905)),r=t(74866),o=t(85162),c=t(90814);const i="##########################################################################################\n# In this section, we set the user authentication, app ID, search name, and language ID.\n# Change these strings to run your own example.\n##########################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to whatever concept you want to search for\nSEARCH_NAME = \"\u4eba\"\nLANGUAGE_ID = \"ja\"\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\npost_concepts_searches_response = stub.PostConceptsSearches(\n    service_pb2.PostConceptsSearchesRequest(\n        user_app_id=userDataObject,\n        concept_query=resources_pb2.ConceptQuery(\n            name=SEARCH_NAME,\n            language=LANGUAGE_ID\n        )\n    ),\n    metadata=metadata\n)\n\nif post_concepts_searches_response.status.code != status_code_pb2.SUCCESS:\n    print(post_concepts_searches_response.status)\n    raise Exception(\"Post concepts searches failed, status: \" + post_concepts_searches_response.status.description)\n    \nprint(\"Found concepts:\")\nfor concept in post_concepts_searches_response.concepts:\n    print(\"\\t%s %.2f\" % (concept.name, concept.value))\n\n# Uncomment this line to print the full Response JSON\n#print(post_concepts_searches_response)",l="\x3c!--index.html file--\x3e\n\n<script>\n    ////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, search name, and language ID.\n    // Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = 'YOUR_USER_ID_HERE';\n    // Your PAT (Personal Access Token) can be found in the portal under Authentification\n    const PAT = 'YOUR_PAT_HERE';\n    const APP_ID = 'YOUR_APP_ID_HERE';\n    // Change these to whatever concept you want to search for\n    const SEARCH_NAME = \"\u4eba\";\n    const LANGUAGE_ID = \"ja\";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        \"user_app_id\": {\n            \"user_id\": USER_ID,\n            \"app_id\": APP_ID\n        },\n        \"concept_query\": [\n            {\n                \"name\": SEARCH_NAME,\n                \"id\": LANGUAGE_ID\n            }\n        ]\n    });\n\n    const requestOptions = {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        },\n        body: raw\n    };\n\n    fetch(\"https://api.clarifai.com/v2/concepts/searches\", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n<\/script>",u='//index.js file\n\n////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, search name, and language ID.\n// Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n// Change these to whatever concept you want to search for\nconst SEARCH_NAME = "\u4eba";\nconst LANGUAGE_ID = "ja";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PostConceptsSearches(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        concept_query: { name: SEARCH_NAME, language: LANGUAGE_ID }\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post concepts searches failed, status: " + response.status.description);\n        }\n\n        console.log("Found concepts:");\n        for (const concept of response.concepts) {\n            console.log("\\t" + concept.name + " " + concept.value);\n        }\n    }\n);',p='package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.status.StatusCode;\n\npublic class ClarifaiExample {\n\n    ///////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, search name, and language ID.\n    // Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\t\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to whatever concept you want to search for\n    static final String SEARCH_NAME = "\u4eba";\n    static final String LANGUAGE_ID = "ja";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\t\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiConceptResponse postConceptsSearchesResponse = stub.postConceptsSearches(\n            PostConceptsSearchesRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .setConceptQuery(\n                ConceptQuery.newBuilder()\n                .setName(SEARCH_NAME)\n                .setLanguage(LANGUAGE_ID))\n            .build()\n        );\n\n        if (postConceptsSearchesResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post concepts searches failed, status: " + postConceptsSearchesResponse.getStatus());\n        }\n\n        System.out.println("Found concepts:");\n        for (Concept concept: postConceptsSearchesResponse.getConceptsList()) {\n            System.out.printf("\\t%s %.2f%n", concept.getName(), concept.getValue());\n        }\n\n    }\n\n}',d='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, search name, and language ID.\n// Change these strings to run your own example.\n///////////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change these to whatever concept you want to search for\n$SEARCH_NAME = "\u4eba";\n$LANGUAGE_ID = "ja";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\PostConceptsSearchesRequest;\nuse Clarifai\\Api\\ConceptQuery;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PostConceptsSearches(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new PostConceptsSearchesRequest([\n        "user_app_id" => $userDataObject,        \n        "concept_query" => new ConceptQuery([\n            "name" => $SEARCH_NAME,\n            "language" => $LANGUAGE_ID\n        ])\n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\necho "Found concepts: </br>";\nforeach ($response->getConcepts() as $concept) {\n    echo $concept->getName() . ": " . number_format($concept->getValue(), 2) . "</br>";\n}\n\n?>',h='curl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/concepts/searches" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "concept_query": {\n      "name":"\u4eba",\n      "language": "ja"\n    }\n  }\'',m="Found concepts:\n    \u4eba 1.00\n    \u4eba 1.00",_='status {\n    code: SUCCESS\n    description: "Ok"\n    req_id: "6e24dbc1e4977bd6f4092d0c72169a68"\n  }\n  concepts {\n    id: "ai_ZKJ48TFz"\n    name: "\\344\\272\\272"\n    value: 1.0\n    created_at {\n      seconds: 1458214981\n      nanos: 223962000\n    }\n    language: "ja"\n    app_id: "main"\n    visibility {\n      gettable: PUBLIC\n    }\n    user_id: "clarifai"\n  }\n  concepts {\n    id: "ai_l8TKp2h5"\n    name: "\\344\\272\\272"\n    value: 1.0\n    created_at {\n      seconds: 1458214981\n      nanos: 223962000\n    }\n    language: "ja"\n    app_id: "main"\n    visibility {\n      gettable: PUBLIC\n    }\n    user_id: "clarifai"\n  }\n  ',f={description:"Search based on specific words.",sidebar_position:3,title:"Search by Concept"},g="Search by Concept",E={unversionedId:"api-guide/concepts/search-by-concept",id:"api-guide/concepts/search-by-concept",title:"Search by Concept",description:"Search based on specific words.",source:"@site/docs/api-guide/concepts/search-by-concept.md",sourceDirName:"api-guide/concepts",slug:"/api-guide/concepts/search-by-concept",permalink:"/api-guide/concepts/search-by-concept",draft:!1,editUrl:"https://github.com/Clarifai/docs/blob/main/docs/api-guide/concepts/search-by-concept.md",tags:[],version:"current",lastUpdatedAt:1698924850,formattedLastUpdatedAt:"Nov 2, 2023",sidebarPosition:3,frontMatter:{description:"Search based on specific words.",sidebar_position:3,title:"Search by Concept"},sidebar:"tutorialSidebar",previous:{title:"Languages",permalink:"/api-guide/concepts/languages"},next:{title:"Knowledge Graph",permalink:"/api-guide/concepts/knowledge_graph"}},b={},C=[],A={toc:C},S="wrapper";function I(e){let{components:n,...t}=e;return(0,s.kt)(S,(0,a.Z)({},A,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"search-by-concept"},"Search by Concept"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Search based on specific words")),(0,s.kt)("hr",null),(0,s.kt)("p",null,"You can search for concepts by ",(0,s.kt)("inlineCode",{parentName:"p"},"name"),", even in a different ",(0,s.kt)("inlineCode",{parentName:"p"},"language"),", using the ",(0,s.kt)("inlineCode",{parentName:"p"},"ConceptSearches")," endpoint."),(0,s.kt)("p",null,"Below is an example of how to search for concepts."),(0,s.kt)("admonition",{type:"info"},(0,s.kt)("p",{parentName:"admonition"},"The initialization code used in the following example is outlined in detail on the ",(0,s.kt)("a",{parentName:"p",href:"https://docs.clarifai.com/api-guide/api-overview/api-clients/#client-installation-instructions"},"client installation page."))),(0,s.kt)(r.Z,{mdxType:"Tabs"},(0,s.kt)(o.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,s.kt)(c.Z,{className:"language-python",mdxType:"CodeBlock"},i)),(0,s.kt)(o.Z,{value:"js_rest",label:"JavaScript (REST)",mdxType:"TabItem"},(0,s.kt)(c.Z,{className:"language-javascript",mdxType:"CodeBlock"},l)),(0,s.kt)(o.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,s.kt)(c.Z,{className:"language-javascript",mdxType:"CodeBlock"},u)),(0,s.kt)(o.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,s.kt)(c.Z,{className:"language-java",mdxType:"CodeBlock"},p)),(0,s.kt)(o.Z,{value:"php",label:"PHP",mdxType:"TabItem"},(0,s.kt)(c.Z,{className:"language-php",mdxType:"CodeBlock"},d)),(0,s.kt)(o.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,s.kt)(c.Z,{className:"language-bash",mdxType:"CodeBlock"},h))),(0,s.kt)("details",null,(0,s.kt)("summary",null,"Code Output Example"),(0,s.kt)(c.Z,{className:"language-js",mdxType:"CodeBlock"},m)),(0,s.kt)("details",null,(0,s.kt)("summary",null,"JSON Output Example"),(0,s.kt)(c.Z,{className:"language-js",mdxType:"CodeBlock"},_)))}I.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[9308],{6289:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>I,contentTitle:()=>v,default:()=>_,frontMatter:()=>b,metadata:()=>a,toc:()=>j});const a=JSON.parse('{"id":"compute/models/inference/open-ai","title":"OpenAI Inferences","description":"Generate predictions using your deployed models","source":"@site/docs/compute/models/inference/open-ai.md","sourceDirName":"compute/models/inference","slug":"/compute/models/inference/open-ai","permalink":"/compute/models/inference/open-ai","draft":false,"unlisted":false,"editUrl":"https://github.com/Clarifai/docs/blob/main/docs/compute/models/inference/open-ai.md","tags":[],"version":"current","sidebarPosition":1.1,"frontMatter":{"description":"Generate predictions using your deployed models","sidebar_position":1.1,"toc_max_heading_level":4},"sidebar":"tutorialSidebar","previous":{"title":"Inference via API","permalink":"/compute/models/inference/api"},"next":{"title":"Legacy Inference via API","permalink":"/compute/models/inference/api-legacy/"}}');var o=t(74848),i=t(28453),l=t(65537),s=t(79329),r=t(58069);const c='from openai import OpenAI\n\n# Initialize the OpenAI client, pointing to Clarifai\'s API\nclient = OpenAI(\n    api_key="YOUR_CLARIFAI_PAT_KEY_HERE",  \n    base_url="https://api.clarifai.com/v2/ext/openai/v1"  # Clarifai\'s OpenAI-compatible API endpoint\n)\n\n# Make a chat completion request to a Clarifai-hosted model\nresponse = client.chat.completions.create(\n    model="anthropic/completion/models/claude-sonnet-4",  # Clarifai model name\n    messages=[\n        {"role": "system", "content": "You are a helpful assistant."},\n        {"role": "user", "content": "Who are you?"}\n    ],\n    # You can also add other OpenAI-compatible parameters like temperature, max_tokens, etc.\n    max_completion_tokens=100,  # Limits the response length\n    temperature=0.7,  # Controls randomness of the output\n    stream=True  # Enables streaming the response token by token\n)\n\nprint("Assistant\'s Response:")\nfor chunk in response:\n    # Safely check if choices, delta, and content exist before accessing\n    if chunk.choices and \\\n       chunk.choices[0].delta and \\\n       chunk.choices[0].delta.content is not None:\n        print(chunk.choices[0].delta.content, end=\'\')\nprint("\\n")  ',p='import OpenAI from "openai";\n\nconst client = new OpenAI({\n  baseURL: "https://api.clarifai.com/v2/ext/openai/v1",\n  apiKey: process.env.CLARIFAI_PAT,\n});\n\nconst response = await client.chat.completions.create({\n  model: "https://clarifai.com/anthropic/completion/models/claude-sonnet-4",\n  messages: [\n    { role: "system", content: "You are a helpful assistant." },\n    { role: "user", content: "Who are you?" },\n  ],\n});\n\nconsole.log(response.choices?.[0]?.message.content);',u='from openai import OpenAI\n\n# Initialize the OpenAI-compatible client for Clarifai\nclient = OpenAI(\n    api_key="YOUR_CLARIFAI_PAT_KEY_HERE",\n    base_url="https://api.clarifai.com/v2/ext/openai/v1"   \n)\n\n# Define the external tools (functions) that the LLM can call.\n# In this example, it\'s a \'get_weather\' function.\ntools = [\n    {\n        "type": "function",\n        "function": {\n            "name": "get_weather",\n            "description": "Returns the current temperature for a given location.",\n            "parameters": {\n                "type": "object",\n                "properties": {\n                    "location": {\n                        "type": "string",\n                        "description": "City and country, e.g., \'Bogot\xe1, Colombia\'"\n                    }\n                },\n                "required": ["location"],\n                "additionalProperties": False # Ensures no extra parameters are passed\n            }\n        }\n    }\n]\n\n# Create a chat completion request with tool-calling enabled\nresponse = client.chat.completions.create(\n    model="anthropic/completion/models/claude-sonnet-4",  # Clarifai-compatible OpenAI model name\n    messages=[\n        {"role": "user", "content": "What is the weather like in New York today?"}\n    ],\n    tools=tools,\n    tool_choice=\'auto\' # Let the LLM decide if it needs to use a tool\n)\n\n# Print the tool call proposed by the model, if any\ntool_calls = response.choices[0].message.tool_calls\nprint("Tool calls:", tool_calls)\n',d='import OpenAI from "openai";\nimport type { ChatCompletionTool } from "openai/resources";\n\nconst client = new OpenAI({\n  baseURL: "https://api.clarifai.com/v2/ext/openai/v1",\n  apiKey: process.env.CLARIFAI_PAT,\n});\n\nconst tools: ChatCompletionTool[] = [\n  {\n    type: "function",\n    function: {\n      name: "get_weather",\n      description: "Get current temperature for a given location.",\n      parameters: {\n        type: "object",\n        properties: {\n          location: {\n            type: "string",\n            description: "City and country e.g. Bogot\xe1, Colombia",\n          },\n        },\n        required: ["location"],\n        additionalProperties: false,\n      },\n      strict: true,\n    },\n  },\n];\n\nconst toolCompletion = await client.chat.completions.create({\n  model: "https://clarifai.com/anthropic/completion/models/claude-sonnet-4",\n  messages: [\n    { role: "system", content: "You are a helpful assistant." },\n    { role: "user", content: "What is the weather in New York?" },\n  ],\n  tools,\n});\n\nconsole.log(toolCompletion.choices?.[0]?.message.tool_calls);\n',h='import json\nfrom openai import OpenAI\n\n# Initialize the OpenAI client, pointing to Clarifai\'s OpenAI-compatible API endpoint\nclient = OpenAI(\n    base_url="https://api.clarifai.com/v2/ext/openai/v1",\n    api_key="c02f72c90a884d2aa25be93c75a0e6d0",\n)\n\n# Define the external tools (functions) that the LLM can call.\n# In this example, it\'s a \'get_weather\' function.\ntools = [{\n    "type": "function",\n    "function": {\n        "name": "get_weather",\n        "description": "Get current temperature for a given location.",\n        "parameters": {\n            "type": "object",\n            "properties": {\n                "location": {\n                    "type": "string",\n                    "description": "City and country, e.g., \'Bogot\xe1, Colombia\'"\n                }\n            },\n            "required": ["location"],\n            "additionalProperties": False # Ensures no extra parameters are passed\n        },\n        "strict": True # Enforces strict adherence to parameter schema\n    }\n}]\n\n## Simulate Tool Execution (for demonstration)\n\n# This function simulates calling an external weather API.\n# In a real application, this would make an actual API request.\ndef get_weather(location: str):\n    """Simulates fetching weather for a given location."""\n    # Placeholder data for demonstration\n    if "New York" in location:\n        return {"location": "New York", "temperature": "20\xb0C", "conditions": "Partly cloudy"}\n    elif "London" in location:\n        return {"location": "London", "temperature": "15\xb0C", "conditions": "Rainy"}\n    else:\n        return {"location": location, "temperature": "N/A", "conditions": "Unknown"}\n\n## LLM Call with Tooling\n\n# First API call: The LLM decides if a tool needs to be called.\nprint("--- Initial LLM Call (Tool Recommendation) ---")\nfirst_response = client.chat.completions.create(\n    model="anthropic/completion/models/claude-sonnet-4", # Ensure this model supports tool calling on Clarifai\'s platform\n    messages=[\n        {"role": "user", "content": "What is the weather like in New York today?"}\n    ],\n    tools=tools, # Provide the list of available tools\n    tool_choice="auto", # Let the LLM decide if it needs to use a tool\n)\n\n\n## Process LLM\'s Response and Execute Tool (if recommended)\n\n# Check if the LLM decided to call a tool\nif first_response.choices[0].message.tool_calls:\n    tool_calls = first_response.choices[0].message.tool_calls\n    print(f"\\nLLM recommended tool calls: {tool_calls}")\n\n    # Execute each recommended tool call\n    available_functions = {\n        "get_weather": get_weather, # Map function name to actual Python function\n    }\n\n    messages = [\n        {"role": "user", "content": "What is the weather like in New York today?"}\n    ]\n    messages.append(first_response.choices[0].message) # Add LLM\'s tool call suggestion to messages\n\n    for tool_call in tool_calls:\n        function_name = tool_call.function.name\n        function_to_call = available_functions[function_name]\n        function_args = json.loads(tool_call.function.arguments)\n\n        # Call the actual Python function\n        function_response = function_to_call(**function_args)\n        print(f"\\nExecuting tool: {function_name}({function_args}) -> {function_response}")\n\n        # Add the tool\'s output to the conversation for the LLM to process\n        messages.append(\n            {\n                "tool_call_id": tool_call.id,\n                "role": "tool",\n                "name": function_name,\n                "content": json.dumps(function_response),\n            }\n        )\n\n    # ---\n    ## Second LLM Call (Summarize Tool Output)\n    \n\n    # Now, send the tool\'s output back to the LLM to get a natural language response\n    print("\\n--- Second LLM Call (Summarizing Tool Output) ---")\n    second_response = client.chat.completions.create(\n        model="anthropic/completion/models/claude-sonnet-4",\n        messages=messages, # Continue the conversation with tool output\n    )\n\n    print("\\nFinal Assistant\'s Response:")\n    print(second_response.choices[0].message.content)\n\nelse:\n    print("\\nLLM did not recommend any tool calls.")\n    print("Assistant\'s direct response:")\n    print(first_response.choices[0].message.content)',m="--- Initial LLM Call (Tool Recommendation) ---\n\nLLM recommended tool calls: [ChatCompletionMessageToolCall(id='toolu_01Mhqb1c7ne4GPKWY9eZtgxd', function=Function(arguments='{\"location\": \"New York, United States\"}', name='get_weather'), type='function')]\n\nExecuting tool: get_weather({'location': 'New York, United States'}) -> {'location': 'New York', 'temperature': '20\xb0C', 'conditions': 'Partly cloudy'}\n\n--- Second LLM Call (Summarizing Tool Output) ---\n\nFinal Assistant's Response:\nThe weather in New York today is:\n- **Temperature:** 20\xb0C (68\xb0F)\n- **Conditions:** Partly cloudy\n\nIt's a pleasant day with mild temperatures and partly cloudy skies!",f='import litellm\n\n# Call litellm.completion or litellm.chat_completion to send requests\nfor chunk in litellm.completion(\n    model="openai/https://clarifai.com/openai/chat-completion/models/o4-mini",\n    api_key="CLARIFAI_PAT",\n    api_base="https://api.clarifai.com/v2/ext/openai/v1",\n    # Message formatting is consistent with OpenAI\'s schema ({"role": ..., "content": ...}).\n    messages=[\n        {"role": "user", "content": "Tell me a fun fact about space."}\n    ],\n    stream=True, # Supports streaming responses\n):\n    print(chunk.choices[0].delta)\n',g='import litellm\n\ntools = [{\n    "type": "function",\n    "function": {\n        "name": "get_weather",\n        "description": "Get current temperature for a given location.",\n        "parameters": {\n            "type": "object",\n            "properties": {\n                "location": {\n                    "type": "string",\n                    "description": "City and country e.g. Tokyo, Japan"\n                }\n            },\n            "required": ["location"],\n            "additionalProperties": False\n        },\n    }\n}]\n\nresponse = litellm.completion(\n    model="openai/https://clarifai.com/openai/chat-completion/models/o4-mini",\n    api_key="CLARIFAI_PAT",\n    api_base="https://api.clarifai.com/v2/ext/openai/v1",\n    messages=[{"role": "user", "content": "What is the weather in Paris today?"}],\n    tools=tools,\n)\n\nprint(response.choices[0].message.tool_calls)\n',y='import { createOpenAI } from "@ai-sdk/openai";\nimport { generateText } from "ai";\n\nconst openai = createOpenAI({\n  baseURL: "https://api.clarifai.com/v2/ext/openai/v1",\n  apiKey: process.env.CLARIFAI_PAT,\n});\n\nconst model = openai(\n  "https://clarifai.com/anthropic/completion/models/claude-sonnet-4",\n);\n\nconst { text } = await generateText({\n  model,\n  messages: [\n    { role: "system", content: "You are a helpful assistant." },\n    { role: "user", content: "What is photosynthesis?" },\n  ],\n});\n\nconsole.log(text);\n',x='import { createOpenAI } from "@ai-sdk/openai";\nimport { streamText } from "ai";\n\nconst openai = createOpenAI({\n  baseURL: "https://api.clarifai.com/v2/ext/openai/v1",\n  apiKey: process.env.CLARIFAI_PAT,\n});\n\nconst model = openai(\n  "https://clarifai.com/anthropic/completion/models/claude-sonnet-4",\n);\n\nconst stream = streamText({\n  model,\n  messages: [\n    { role: "system", content: "You are a helpful assistant." },\n    { role: "user", content: "What is photosynthesis?" },\n  ],\n});\n\nfor await (const part of stream.textStream) {\n  console.log(part);\n}\n',A='import { createOpenAI } from "@ai-sdk/openai";\nimport { generateText, tool } from "ai";\nimport { z } from "zod";\n\nconst openai = createOpenAI({\n  baseURL: "https://api.clarifai.com/v2/ext/openai/v1",\n  apiKey: process.env.CLARIFAI_PAT,\n});\n\nconst model = openai(\n  "https://clarifai.com/anthropic/completion/models/claude-sonnet-4",\n);\n\nconst result = await generateText({\n  model,\n  tools: {\n    weather: tool({\n      description: "Get the weather in a location",\n      parameters: z.object({\n        location: z.string().describe("The location to get the weather for"),\n      }),\n      execute: async ({ location }) => ({\n        location,\n        temperature: 72 + Math.floor(Math.random() * 21) - 10,\n      }),\n    }),\n    cityAttractions: tool({\n      parameters: z.object({ city: z.string() }),\n    }),\n  },\n  prompt:\n    "What is the weather in San Francisco and what attractions should I visit?",\n});\n\nconsole.log(result.toolResults);\n',b={description:"Generate predictions using your deployed models",sidebar_position:1.1,toc_max_heading_level:4},v="OpenAI Inferences",I={},j=[{value:"OpenAI",id:"openai",level:2},{value:"Prerequisites",id:"prerequisites",level:3},{value:"Install Clarifai Package",id:"install-clarifai-package",level:3},{value:"Get a PAT Key",id:"get-a-pat-key",level:4},{value:"Install Openai Package",id:"install-openai-package",level:4},{value:"Example",id:"example",level:3},{value:"Tool Calling",id:"tool-calling",level:3},{value:"Vercel AI SDK",id:"vercel-ai-sdk",level:2},{value:"Example",id:"example-1",level:3},{value:"LiteLLM",id:"litellm",level:2},{value:"Example",id:"example-2",level:3},{value:"Tool Calling",id:"tool-calling-1",level:3}];function w(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,i.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"openai-inferences",children:"OpenAI Inferences"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Make inferences with Clarifai using an OpenAI-compatible format"})}),"\n",(0,o.jsx)("hr",{}),"\n",(0,o.jsx)(n.p,{children:"Clarifai provides an OpenAI-compatible API endpoint, which allows you to leverage your existing OpenAI API code and workflows to make inferences with Clarifai models, including those that integrate or wrap OpenAI models."}),"\n",(0,o.jsx)(n.p,{children:"The built-in compatibility layer converts your OpenAI calls directly into Clarifai API requests, letting you harness Clarifai's diverse models as custom tools in your OpenAI projects."}),"\n",(0,o.jsx)(n.p,{children:"This simplifies the integration process, as you don't need to rewrite your code specifically for Clarifai's native API structure if you're already familiar with OpenAI's."}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Note"})," Usage-based billing is handled directly through Clarifai \u2014 not through OpenAI or any other external tool. Also, while most OpenAI parameters are supported, certain advanced features may be unavailable depending on the specific model or endpoint."]}),"\n"]}),"\n","\n","\n","\n","\n",(0,o.jsx)(n.h2,{id:"openai",children:"OpenAI"}),"\n",(0,o.jsx)(n.h3,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,o.jsx)(n.h3,{id:"install-clarifai-package",children:"Install Clarifai Package"}),"\n",(0,o.jsxs)(n.p,{children:["Install the latest version of the Clarifai ",(0,o.jsx)(n.a,{href:"https://github.com/Clarifai/clarifai-python/",children:"Python"})," SDK package:"]}),"\n",(0,o.jsx)(l.A,{children:(0,o.jsx)(s.A,{value:"bash",label:"Bash",children:(0,o.jsx)(r.A,{className:"language-bash",children:" pip install --upgrade clarifai "})})}),"\n",(0,o.jsx)(n.h4,{id:"get-a-pat-key",children:"Get a PAT Key"}),"\n",(0,o.jsxs)(n.p,{children:["You need a PAT (Personal Access Token) key to authenticate your connection to the Clarifai platform. You can generate the PAT key in your personal settings page by navigating to the ",(0,o.jsx)(n.a,{href:"https://clarifai.com/settings/security",children:"Security section"}),"."]}),"\n",(0,o.jsx)(n.h4,{id:"install-openai-package",children:"Install Openai Package"}),"\n",(0,o.jsxs)(n.p,{children:["Install the ",(0,o.jsx)(n.code,{children:"openai"})," package:"]}),"\n",(0,o.jsxs)(l.A,{children:[(0,o.jsx)(s.A,{value:"python",label:"Python",children:(0,o.jsx)(r.A,{className:"language-bash",children:" pip install openai "})}),(0,o.jsx)(s.A,{value:"node.js",label:"Node.js",children:(0,o.jsx)(r.A,{className:"language-bash",children:" npm install openai "})})]}),"\n",(0,o.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,o.jsx)(n.p,{children:"Here is an example that uses the OpenAI Python client library to interact with a Clarifai model via Clarifai's OpenAI-compatible API endpoint."}),"\n",(0,o.jsxs)(l.A,{children:[(0,o.jsx)(s.A,{value:"python",label:"Python SDK",children:(0,o.jsx)(r.A,{className:"language-python",children:c})}),(0,o.jsx)(s.A,{value:"typescript",label:"TypeScript",children:(0,o.jsx)(r.A,{className:"language-typescript",children:p})})]}),"\n",(0,o.jsxs)(t,{children:[(0,o.jsx)("summary",{children:"Example Output"}),(0,o.jsx)(r.A,{className:"language-text",children:"Assistant's Response:\nI'm Claude, an AI assistant created by Anthropic. I'm here to help with a wide variety of tasks like answering questions, helping with analysis and research, creative projects, math and coding, and having conversations. Is there something specific I can help you with today?"})]}),"\n",(0,o.jsx)(n.h3,{id:"tool-calling",children:"Tool Calling"}),"\n",(0,o.jsx)(n.p,{children:"Tool calling (formerly known as function calling) enables large language models (LLMs) to autonomously decide when and how to invoke external tools \u2014 such as APIs or custom functions \u2014 based on user input."}),"\n",(0,o.jsx)(n.p,{children:"With Clarifai\u2019s support for OpenAI-compatible APIs, you can seamlessly integrate tool-calling capabilities using your existing OpenAI workflows, while leveraging Clarifai-hosted or custom models."}),"\n",(0,o.jsx)(n.p,{children:'Here is an example code that sets up a basic tool-calling interaction. It simulates a weather API and shows how the LLM would "call" that tool when asked about the weather.'}),"\n",(0,o.jsxs)(l.A,{children:[(0,o.jsx)(s.A,{value:"python",label:"Python SDK",children:(0,o.jsx)(r.A,{className:"language-python",children:u})}),(0,o.jsx)(s.A,{value:"typescript",label:"TypeScript",children:(0,o.jsx)(r.A,{className:"language-typescript",children:d})})]}),"\n",(0,o.jsxs)(t,{children:[(0,o.jsx)("summary",{children:"Tool Calling Implementation Example"}),(0,o.jsx)(r.A,{className:"language-python",children:h}),(0,o.jsx)(r.A,{className:"language-text",children:m})]}),"\n",(0,o.jsx)(n.h2,{id:"vercel-ai-sdk",children:"Vercel AI SDK"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.a,{href:"https://vercel.com/docs/ai-sdk",children:"Vercel AI SDK"})," provides a convenient way to interact with Clarifai's OpenAI-compatible API. You can leverage the ",(0,o.jsx)(n.a,{href:"https://ai-sdk.dev/providers/ai-sdk-providers/openai",children:"OpenAI provider"})," to interact with Clarifai models."]}),"\n",(0,o.jsx)(n.h3,{id:"example-1",children:"Example"}),"\n",(0,o.jsxs)(l.A,{children:[(0,o.jsx)(s.A,{value:"text-response",label:"Text Response",children:(0,o.jsx)(r.A,{className:"language-typescript",children:y})}),(0,o.jsx)(s.A,{value:"streaming",label:"Streaming",children:(0,o.jsx)(r.A,{className:"language-typescript",children:x})}),(0,o.jsx)(s.A,{value:"tool-calling",label:"Tool Calling",children:(0,o.jsx)(r.A,{className:"language-typescript",children:A})})]}),"\n",(0,o.jsx)(n.h2,{id:"litellm",children:"LiteLLM"}),"\n",(0,o.jsxs)(n.p,{children:["You can use the ",(0,o.jsx)(n.a,{href:"https://github.com/BerriAI/litellm",children:"LiteLLM Python SDK"})," to directly route inference requests to their Clarifai-hosted models. This provides a lightweight, OpenAI-compatible interface for interacting with Clarifai's powerful LLMs using a single, unified API."]}),"\n",(0,o.jsx)(n.p,{children:"To use Clarifai models via LiteLLM, you'll need to:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Install the Clarifai package and get a PAT key as mentioned earlier."}),"\n",(0,o.jsxs)(n.li,{children:["Install LiteLLM by running ",(0,o.jsx)(n.code,{children:"pip install litellm"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:["Specify Clarifai models by using the model path prefixed with ",(0,o.jsx)(n.code,{children:"openai/"})," followed by the Clarifai model URL (e.g., ",(0,o.jsx)(n.code,{children:"openai/https://clarifai.com/..."}),")."]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"example-2",children:"Example"}),"\n",(0,o.jsx)(l.A,{children:(0,o.jsx)(s.A,{value:"python",label:"Python SDK",children:(0,o.jsx)(r.A,{className:"language-python",children:f})})}),"\n",(0,o.jsx)(n.h3,{id:"tool-calling-1",children:"Tool Calling"}),"\n",(0,o.jsx)(n.p,{children:"Clarifai models accessed via LiteLLM also support tool calling."}),"\n",(0,o.jsx)(l.A,{children:(0,o.jsx)(s.A,{value:"python",label:"Python SDK",children:(0,o.jsx)(r.A,{className:"language-python",children:g})})})]})}function _(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(w,{...e})}):w(e)}},65537:(e,n,t)=>{t.d(n,{A:()=>I});var a=t(96540),o=t(18215),i=t(65627),l=t(56347),s=t(50372),r=t(30604),c=t(11861),p=t(78749);function u(e){return a.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function d(e){const{values:n,children:t}=e;return(0,a.useMemo)((()=>{const e=n??function(e){return u(e).map((e=>{let{props:{value:n,label:t,attributes:a,default:o}}=e;return{value:n,label:t,attributes:a,default:o}}))}(t);return function(e){const n=(0,c.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function h(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function m(e){let{queryString:n=!1,groupId:t}=e;const o=(0,l.W6)(),i=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,r.aZ)(i),(0,a.useCallback)((e=>{if(!i)return;const n=new URLSearchParams(o.location.search);n.set(i,e),o.replace({...o.location,search:n.toString()})}),[i,o])]}function f(e){const{defaultValue:n,queryString:t=!1,groupId:o}=e,i=d(e),[l,r]=(0,a.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!h({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const a=t.find((e=>e.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:i}))),[c,u]=m({queryString:t,groupId:o}),[f,g]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[o,i]=(0,p.Dv)(t);return[o,(0,a.useCallback)((e=>{t&&i.set(e)}),[t,i])]}({groupId:o}),y=(()=>{const e=c??f;return h({value:e,tabValues:i})?e:null})();(0,s.A)((()=>{y&&r(y)}),[y]);return{selectedValue:l,selectValue:(0,a.useCallback)((e=>{if(!h({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);r(e),u(e),g(e)}),[u,g,i]),tabValues:i}}var g=t(9136);const y={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var x=t(74848);function A(e){let{className:n,block:t,selectedValue:a,selectValue:l,tabValues:s}=e;const r=[],{blockElementScrollPositionUntilNextRender:c}=(0,i.a_)(),p=e=>{const n=e.currentTarget,t=r.indexOf(n),o=s[t].value;o!==a&&(c(n),l(o))},u=e=>{let n=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const t=r.indexOf(e.currentTarget)+1;n=r[t]??r[0];break}case"ArrowLeft":{const t=r.indexOf(e.currentTarget)-1;n=r[t]??r[r.length-1];break}}n?.focus()};return(0,x.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.A)("tabs",{"tabs--block":t},n),children:s.map((e=>{let{value:n,label:t,attributes:i}=e;return(0,x.jsx)("li",{role:"tab",tabIndex:a===n?0:-1,"aria-selected":a===n,ref:e=>{r.push(e)},onKeyDown:u,onClick:p,...i,className:(0,o.A)("tabs__item",y.tabItem,i?.className,{"tabs__item--active":a===n}),children:t??n},n)}))})}function b(e){let{lazy:n,children:t,selectedValue:i}=e;const l=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=l.find((e=>e.props.value===i));return e?(0,a.cloneElement)(e,{className:(0,o.A)("margin-top--md",e.props.className)}):null}return(0,x.jsx)("div",{className:"margin-top--md",children:l.map(((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==i})))})}function v(e){const n=f(e);return(0,x.jsxs)("div",{className:(0,o.A)("tabs-container",y.tabList),children:[(0,x.jsx)(A,{...n,...e}),(0,x.jsx)(b,{...n,...e})]})}function I(e){const n=(0,g.A)();return(0,x.jsx)(v,{...e,children:u(e.children)},String(n))}},79329:(e,n,t)=>{t.d(n,{A:()=>l});t(96540);var a=t(18215);const o={tabItem:"tabItem_Ymn6"};var i=t(74848);function l(e){let{children:n,hidden:t,className:l}=e;return(0,i.jsx)("div",{role:"tabpanel",className:(0,a.A)(o.tabItem,l),hidden:t,children:n})}}}]);
"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[8253],{33435:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>b,contentTitle:()=>_,default:()=>x,frontMatter:()=>f,metadata:()=>g,toc:()=>E});var o=t(74848),r=t(28453),c=t(11470),v=t(19365),a=t(21432);const s='#################################################################################################################\n# In this section, we set the user authentication, user and app ID, model details, and the text we want\n# to provide as an input. Change these strings to run your own example.\n#################################################################################################################\n\n# Your PAT (Personal Access Token) can be found in the Account\'s Security section\nPAT = "YOUR_PAT_HERE"\n# Specify the correct user_id/app_id pairings\n# Since you\'re making inferences outside your app\'s scope\nUSER_ID = "cohere"\nAPP_ID = "embed"\n# Change these to whatever model and text URL you want to use\nMODEL_ID = "cohere-embed-english-v3_0"\nMODEL_VERSION_ID = "e2dd848faf454fbda85c26cf89c4926e"\nRAW_TEXT = "Give me an exotic yet tasty recipe for some noodle dish"\n# To use a hosted text file, assign the URL variable\n# TEXT_FILE_URL = "https://samples.clarifai.com/negative_sentence_12.txt"\n# Or, to use a local text file, assign the location variable\n# TEXT_FILE_LOCATION = "YOUR_TEXT_FILE_LOCATION_HERE"\n\n############################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n############################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\nfrom google.protobuf.struct_pb2 import Struct\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nparams = Struct()\nparams.update(\n    {\n        "input_type": "search_query" \n    }\n)\n\nmetadata = (("authorization", "Key " + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\n# To use a local text file, uncomment the following lines\n# with open(TEXT_FILE_LOCATION, "rb") as f:\n#    file_bytes = f.read()\n\npost_model_outputs_response = stub.PostModelOutputs(\n    service_pb2.PostModelOutputsRequest(\n        user_app_id=userDataObject,  # The userDataObject is created in the overview and is required when using a PAT\n        model_id=MODEL_ID,\n        version_id=MODEL_VERSION_ID,  # This is optional. Defaults to the latest model version\n        inputs=[\n            resources_pb2.Input(\n                data=resources_pb2.Data(\n                    text=resources_pb2.Text(\n                        raw=RAW_TEXT\n                        # url=TEXT_FILE_URL\n                        # raw=file_bytes\n                    )\n                )\n            )\n        ],\n        model=resources_pb2.Model(\n            model_version=resources_pb2.ModelVersion(\n                output_info=resources_pb2.OutputInfo(params=params)\n            )\n        ),\n    ),\n    metadata=metadata,\n)\nif post_model_outputs_response.status.code != status_code_pb2.SUCCESS:\n    print(post_model_outputs_response.status)\n    raise Exception("Post model outputs failed, status: " + post_model_outputs_response.status.description )\n\n# Uncomment this line to print the full Response JSON\n# print(post_model_outputs_response)\n\n# Since we have one input, one output will exist here\noutput = post_model_outputs_response.outputs[0].data.embeddings\nprint(output)\n',i='\x3c!--index.html file--\x3e\n\n<script>\n    //////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, user and app ID, model details, and the text we want\n    // to provide as an input. Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  \n    // Your PAT (Personal Access Token) can be found in the Account\'s Security section\n    const PAT = "YOUR_PAT_HERE";    \n    // Specify the correct user_id/app_id pairings\n    // Since you\'re making inferences outside your app\'s scope\n    const USER_ID = "cohere";\n    const APP_ID = "embed";\n    // Change these to whatever model and text you want to use\n    const MODEL_ID = "cohere-embed-english-v3_0";\n    const MODEL_VERSION_ID = "e2dd848faf454fbda85c26cf89c4926e";\n    const RAW_TEXT = "Give me an exotic yet tasty recipe for some noodle dish";\n    // To use a hosted text file, assign the URL variable\n    // const TEXT_FILE_URL = \'https://samples.clarifai.com/negative_sentence_12.txt\'\n    \n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n  \n    const raw = JSON.stringify({  \n        "inputs": [\n        {\n            "data": {\n              "text": {\n                   "raw": RAW_TEXT\n                  // "url": TEXT_FILE_URL\n               }\n            }\n        }\n    ],  \n      "model": {\n          "model_version": {\n              "output_info": {\n                  "params": {\n                      "input_type": "search_query"   \n                  }\n              }\n          }\n      }\n    });\n  \n    const requestOptions = {\n        method: "POST",\n        headers: {\n            "Accept": "application/json",\n            "Authorization": "Key " + PAT\n        },\n        body: raw\n    };\n  \n    fetch(`https://api.clarifai.com/v2/users/${USER_ID}/apps/${APP_ID}/models/${MODEL_ID}/versions/${MODEL_VERSION_ID}/outputs`, requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))    \n        .catch(error => console.log("error", error));\n  \n  <\/script>',l='//index.js file\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, user and app ID, model details, and the text we want\n// to provide as an input. Change these strings to run your own example.\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////// \n\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = "YOUR_PAT_HERE";\n// Specify the correct user_id/app_id pairings\n// Since you\'re making inferences outside your app\'s scope\nconst USER_ID = "cohere";\nconst APP_ID = "embed";\n// Change these to whatever model and text you want to use\nconst MODEL_ID = "cohere-embed-english-v3_0";\nconst MODEL_VERSION_ID = "e2dd848faf454fbda85c26cf89c4926e";\nconst RAW_TEXT = "Give me an exotic yet tasty recipe for some noodle dish";\n// To use a hosted text file, assign the URL variable\n// const TEXT_FILE_URL = "https://samples.clarifai.com/negative_sentence_12.txt"\n// Or, to use a local text file, assign the location variable\n// TEXT_FILE_LOCATION = "YOUR_TEXT_FILE_LOCATION_HERE"\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\n// To use a local text file, uncomment the following lines\n// const fs = require("fs");\n// const fileBytes = fs.readFileSync(TEXT_FILE_LOCATION);\n\nstub.PostModelOutputs(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        model_id: MODEL_ID,\n        version_id: MODEL_VERSION_ID,  // This is optional. Defaults to the latest model version\n        inputs: [\n            {\n                "data": {\n                    "text": {\n                        "raw": RAW_TEXT\n                        // url: TEXT_FILE_URL\n                        // raw: fileBytes\n                    }\n                }\n            }\n        ],\n        "model": {\n            "model_version": {\n                "output_info": {\n                    "params": {\n                        "input_type": "search_query"   \n                    }\n                }\n            }\n        }\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post models failed, status: " + response.status.description);\n        }\n        // Since we have one input, one output will exist here.\n        const output = response.outputs[0].data.embeddings;\n\n        console.log(output);\n\n    }\n);',u='package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.status.StatusCode;\nimport com.google.protobuf.Struct;\nimport com.google.protobuf.Value;\n\nimport com.google.protobuf.ByteString;\nimport java.io.File;\nimport java.io.IOException;\nimport java.nio.file.Files;\n\npublic class ClarifaiExample {\n\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, user and app ID, model details, and the text we want\n    // to provide as an input. Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    // Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    // Specify the correct user_id/app_id pairings\n    // Since you\'re making inferences outside your app\'s scope\n    static final String USER_ID = "cohere";\n    static final String APP_ID = "embed";\n    // Change these to whatever model you want to use\n    static final String MODEL_ID = "cohere-embed-english-v3_0";\n    static final String MODEL_VERSION_ID = "e2dd848faf454fbda85c26cf89c4926e";\n    static final String RAW_TEXT = "Give me an exotic yet tasty recipe for some noodle dish";\n    // To use a hosted text file, assign the URL variable\n    // static final String TEXT_FILE_URL = "https://samples.clarifai.com/negative_sentence_12.txt";\n    // Or, to use a local text file, assign the location variable\n    // static final String TEXT_FILE_LOCATION = "YOUR_TEXT_FILE_LOCATION_HERE";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\t\n\n    public static void main(String[] args) throws IOException {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n                .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        Struct.Builder params = Struct.newBuilder()\n                .putFields("input_type", Value.newBuilder().setStringValue("search_query").build());\n\n        MultiOutputResponse postModelOutputsResponse = stub.postModelOutputs(\n                PostModelOutputsRequest.newBuilder()\n                        .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n                        .setModelId(MODEL_ID)\n                        .setVersionId(MODEL_VERSION_ID) // This is optional. Defaults to the latest model version.\n                        .addInputs(\n                                Input.newBuilder().setData(\n                                        Data.newBuilder().setText(\n                                                Text.newBuilder().setRaw(RAW_TEXT)\n                                        // Text.newBuilder().setUrl(TEXT_FILE_URL)\n                                        // Text.newBuilder().setRawBytes(ByteString.copyFrom(Files.readAllBytes(\n                                        // new File(TEXT_FILE_LOCATION).toPath()\n                                        // )))\n                                        )\n                                )\n                        )\n                        .setModel(Model.newBuilder()\n                                .setModelVersion(ModelVersion.newBuilder()\n                                        .setOutputInfo(OutputInfo.newBuilder().setParams(params))\n                                )\n                        )\n                        .build()\n        );\n\n        if (postModelOutputsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post model outputs failed, status: " + postModelOutputsResponse.getStatus());\n        }\n\n        // Since we have one input, one output will exist here\n        Output output = postModelOutputsResponse.getOutputs(0);\n\n        System.out.println(output.getData().getEmbeddingsList());\n\n    }\n}\n',d='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, user and app ID, model details, and the text we want\n// to provide as an input. Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n// Specify the correct user_id/app_id pairings\n// Since you\'re making inferences outside your app\'s scope\n$USER_ID = "cohere";\n$APP_ID = "embed";\n// Change these to whatever model and image URL you want to use\n$MODEL_ID = "cohere-embed-english-v3_0";\n$MODEL_VERSION_ID = "e2dd848faf454fbda85c26cf89c4926e";\n$RAW_TEXT = "Give me an exotic yet tasty recipe for some noodle dish!";\n# To use a hosted text file, assign the URL variable\n# $TEXT_FILE_URL = "https://samples.clarifai.com/negative_sentence_12.txt";\n# Or, to use a local text file, assign the location variable\n# $TEXT_FILE_LOCATION = "YOUR_TEXT_FILE_LOCATION_HERE";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\Data;\nuse Clarifai\\Api\\Text;\nuse Clarifai\\Api\\Input;\nuse Clarifai\\Api\\Model;\nuse Clarifai\\Api\\ModelVersion;\nuse Clarifai\\Api\\OutputInfo;\nuse Clarifai\\Api\\PostModelOutputsRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\nuse Google\\Protobuf\\Struct;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID,\n]);\n\n// create Struct instance\n$params = new Struct();\n$params->input_type = "search_query";\n\n//$textData = file_get_contents($TEXT_FILE_LOCATION); // Get the text bytes data from the location\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PostModelOutputs(\n        // The request object carries the request along with the request status and other metadata related to the request itself\n        new PostModelOutputsRequest([\n            "user_app_id" => $userDataObject,\n            "model_id" => $MODEL_ID,\n            "version_id" => $MODEL_VERSION_ID, // This is optional. Defaults to the latest model version\n            "inputs" => [\n                new Input([\n                    // The Input object wraps the Data object in order to meet the API specification\n                    "data" => new Data([\n                        // The Data object is constructed around the Text object. It offers a container that has additional text independent\n                        // metadata. In this particular use case, no other metadata is needed to be specified\n                        "text" => new Text([\n                            // In the Clarifai platform, a text is defined by a special Text object\n                            "raw" => $RAW_TEXT,\n                            // "url" => $TEXT_FILE_URL\n                            // "raw" => $textData\n                        ]),\n                    ]),\n                ]),\n            ],\n            "model" => new Model([\n                "model_version" => new ModelVersion([\n                    "output_info" => new OutputInfo(["params" => $params]),\n                ]),\n            ]),\n        ]),\n        $metadata\n    )\n    ->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure\n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription() . " " . $response->getStatus()->getDetails());\n}\n\n// Since we have one input, one output will exist here\n$output = $response->getOutputs()[0]->getData()->getEmbeddings();\n\nprint_r($output);\n\n?>\n',p='curl -X POST "https://api.clarifai.com/v2/users/cohere/apps/embed/models/cohere-embed-english-v3_0/versions/e2dd848faf454fbda85c26cf89c4926e/outputs" \\\n    -H "Authorization: Key YOUR_PAT_HERE" \\\n    -H "Content-Type: application/json" \\\n    -d \'{\n    "inputs": [\n        {\n            "data": {\n                "text": {\n                    "raw": "Give me an exotic yet tasty recipe for some noodle dish"\n                }\n            }\n        }\n    ],\n    "model": {\n        "model_version": {\n            "output_info": {\n                "params": {\n                    "input_type":"search_query"\n                }\n            }\n        }\n    }\n}\'\n',h="[vector: 0.025470778346061707\nvector: 0.027972102165222168\nvector: -0.01801256835460663\nvector: -0.025394519791007042\nvector: 0.007034968119114637\nvector: -0.0002650028618518263\nvector: -0.0037653285544365644\nvector: -0.0023831194266676903\nvector: -0.03773335739970207\nvector: 0.05649327486753464\nvector: 0.01828710362315178\nvector: 0.00324104237370193\nvector: -0.015084192156791687\nvector: -0.0007111228187568486\nvector: -0.009479095228016376\nvector: -0.016197584569454193\nvector: 0.01801256835460663\nvector: 0.017738033086061478\nvector: 0.027041731402277946\nvector: 0.005357252433896065\nvector: 0.0050331479869782925\nvector: 0.028963478282094002\nvector: -0.012285456992685795\nvector: -0.035171028226614\nvector: 0.041058287024497986\nvector: -0.030442919582128525\nvector: -0.0278653372079134\nvector: -0.00623805308714509\nvector: 0.011621995829045773\nvector: 0.001777807017788291\nvector: -0.005467828828841448\nvector: 0.01667039655148983\nvector: 0.05164314806461334\nvector: 0.018698906525969505\nvector: -0.07211128622293472\nvector: -0.030061621218919754\nvector: 0.0001396507868776098\nvector: -0.01699068769812584\nvector: -0.06198398023843765\nvector: 0.05929963290691376\nvector: 0.037702854722738266\nvector: -0.020605402067303658\nvector: -0.06363119184970856\nvector: -0.004384939558804035\nvector: -0.051002565771341324\nvector: -0.021947575733065605\nvector: 0.02457091398537159\nvector: 0.006009273696690798\nvector: 0.00549452006816864\nvector: 0.008258937858045101\nvector: 0.018912434577941895\nvector: -0.005502145737409592\nvector: 0.01715845987200737\nvector: 0.009242690168321133\nvector: -0.020818930119276047\nvector: -0.009837516583502293\nvector: 0.01894293911755085\nvector: 0.005456389859318733\nvector: 0.038556963205337524\nvector: -0.041485339403152466\nvector: -0.0633261501789093\nvector: -0.012338838540017605\nvector: 0.05271078646183014\nvector: -0.00013786344788968563\nvector: 0.010684000328183174\nvector: 0.0098756467923522\nvector: 0.001827375846914947\nvector: 0.014962175861001015\nvector: -0.006932017393410206\nvector: 0.01074500847607851\nvector: 0.0010018633911386132\nvector: -0.01212531141936779\nvector: 0.018043072894215584\nvector: -0.09224387258291245\nvector: -0.013825904577970505\nvector: 0.057499904185533524\nvector: 0.023579536005854607\nvector: -0.02873469889163971\nvector: -0.011759264394640923\nvector: -0.03297474607825279\nvector: -0.0017129861516878009\nvector: 0.020147843286395073\nvector: 0.020803678780794144\nvector: -0.0855330154299736\nvector: 0.013986051082611084\nvector: -0.09023061394691467\nvector: -0.004651848692446947\nvector: 0.0305801872164011\nvector: 0.007992029190063477\nvector: 0.049172330647706985\nvector: 0.0025413583498448133\nvector: -0.022039087489247322\nvector: -0.0013612377224490047\nvector: 0.052253227680921555\nvector: 0.03312726318836212\nvector: -0.008724123239517212\nvector: -0.01790580525994301\nvector: -0.08461789786815643\nvector: 0.04252247512340546\nvector: 0.041271813213825226\nvector: 0.07009802758693695\nvector: -0.08187253773212433\nvector: 0.11414569616317749\nvector: -0.01561801042407751\nvector: -0.0036909752525389194\nvector: 0.03285272791981697\nvector: 0.03279172256588936\nvector: 0.015030810609459877\nvector: -0.007652672939002514\nvector: -0.015251963399350643\nvector: -0.00938758347183466\nvector: 0.015938302502036095\nvector: 0.0018321421230211854\nvector: -0.003012262750416994\nvector: -0.028658440336585045\nvector: 0.00906729232519865\nvector: -0.017082199454307556\nvector: -0.019308986142277718\nvector: 0.003138091415166855\nvector: -0.007309503387659788\nvector: 0.02739252708852291\nvector: 0.023366007953882217\nvector: 0.005769055336713791\nvector: 0.016090821474790573\nvector: -0.042674995958805084\nvector: -0.023823566734790802\nvector: -0.030778462067246437\nvector: -0.022908449172973633\nvector: 0.0362691693007946\nvector: -0.012399846687912941\nvector: -0.06302111595869064\nvector: 0.007019716314971447\nvector: 0.08419083803892136\nvector: 0.02656892128288746\nvector: 0.02446414902806282\nvector: -0.016853420063853264\nvector: 0.03079371526837349\nvector: -0.010554359294474125\nvector: -0.0035651465877890587\nvector: -0.0048844413831830025\nvector: 0.029954856261610985\nvector: -0.028871966525912285\nvector: 0.005776681005954742\nvector: 0.023625291883945465\nvector: -0.02289319783449173\nvector: 0.02571481093764305\nvector: 0.014779152348637581\nvector: -0.011530484072864056\nvector: -0.01561801042407751\nvector: -0.004785303492099047\nvector: -0.03663521632552147\nvector: -0.023228740319609642\nvector: 0.018927687779068947\nvector: -0.01635010540485382\nvector: -0.031968116760253906\nvector: 0.007694615516811609\nvector: -0.03880099579691887\nvector: 0.019827552139759064\nvector: -0.02527250349521637\nvector: 0.011812645941972733\nvector: -0.06326514482498169\nvector: -0.019308986142277718\nvector: -0.00752303097397089\nvector: -0.012155815027654171\nvector: 0.0037081337068229914\nvector: 0.005418260116130114\nvector: 0.057011839002370834\nvector: 0.03416439890861511\nvector: 0.013025176711380482\nvector: 0.006039777770638466\nvector: 0.040295686572790146\nvector: -0.02879570797085762\nvector: -0.052802298218011856\nvector: -0.02136800065636635\nvector: 0.0009060619631782174\nvector: -0.003061831695958972\nvector: 0.026507912203669548\nvector: 0.005151350516825914\nvector: -0.020757922902703285\nvector: 0.047494616359472275\nvector: 0.012110059149563313\nvector: -0.0232744961977005\nvector: 0.0005414446932263672\nvector: -0.002543264999985695\nvector: -0.016380608081817627\nvector: 0.009097795933485031\nvector: -0.01482490822672844\nvector: 0.04380363970994949\nvector: 0.005200919695198536\nvector: 0.0028940599877387285\nvector: -0.0064058247953653336\nvector: 0.0072713736444711685\nvector: -0.05149063095450401\nvector: 0.03614715486764908\nvector: 0.03712327778339386\nvector: -0.014977428130805492\nvector: -0.01872941106557846\nvector: 0.001053338753990829\nvector: 0.0007606917060911655\nvector: -0.059238627552986145\nvector: -0.005036960821598768\nvector: -0.01607557013630867\nvector: 0.010348456911742687\nvector: 0.011629622429609299\nvector: 0.007809005212038755\nvector: -0.014115692116320133\nvector: 0.002140994416549802\nvector: 0.007141732145100832\nvector: 0.05255826562643051\nvector: 0.01502318400889635\nvector: -0.022542402148246765\nvector: 0.015724774450063705\nvector: 0.0014441702514886856\nvector: -0.060001224279403687\nvector: -0.03718428686261177\nvector: 0.04481026902794838\nvector: -0.040936268866062164\nvector: 0.031098753213882446\nvector: 0.021825559437274933\nvector: -0.021245986223220825\nvector: 0.023823566734790802\nvector: 0.01682291552424431\nvector: 0.028963478282094002\nvector: -0.015434986911714077\nvector: 0.057072848081588745\nvector: 0.0012211103457957506\nvector: -0.012514236383140087\nvector: -0.02132224477827549\nvector: 0.013436979614198208\nvector: 0.050087448209524155\nvector: -0.11438972502946854\nvector: -0.0063753207214176655\nvector: -0.03620816022157669\nvector: -0.03599463403224945\nvector: -0.054144471883773804\nvector: 0.004487890284508467\nvector: -0.037641845643520355\nvector: 0.006680360063910484\nvector: -0.004091339185833931\nvector: 0.012895535677671432\nvector: 0.016045065596699715\nvector: 0.01856163889169693\nvector: -0.04160735756158829\nvector: -0.010973787866532803\nvector: 0.0026481221430003643\nvector: -0.049385856837034225\nvector: -0.009509599767625332\nvector: 0.017082199454307556\nvector: -0.030381912365555763\nvector: -0.06680360436439514\nvector: 0.026157118380069733\nvector: -0.014733396470546722\nvector: 0.04807418957352638\nvector: -0.04676252231001854\nvector: 0.016594136133790016\nvector: 0.043925654143095016\nvector: 0.028856715187430382\nvector: 0.028826210647821426\nvector: -0.018744662404060364\nvector: 0.049233339726924896\nvector: -0.036238666623830795\nvector: 0.13226503133773804\nvector: 0.04627445712685585\nvector: 0.055181603878736496\nvector: -0.030000612139701843\nvector: -0.013208200223743916\nvector: 0.005608909763395786\nvector: 0.004198103211820126\nvector: -0.023243991658091545\nvector: -0.005879632197320461\nvector: 0.025897834450006485\nvector: 0.062380529940128326\nvector: -4.426644227351062e-05\nvector: -0.04334608092904091\nvector: -0.03126652538776398\nvector: -0.044901780784130096\nvector: -0.02603510208427906\nvector: 0.059116609394550323\nvector: -0.030763210728764534\nvector: -0.047220081090927124\nvector: -0.0023507089354097843\nvector: 0.06906089186668396\nvector: 0.04133282229304314\nvector: -0.01889718323945999\nvector: -0.03151055797934532\nvector: -0.026858707889914513\nvector: 0.005913949105888605\nvector: -0.01618233323097229\nvector: -0.018058324232697487\nvector: 0.018317608162760735\nvector: 0.028078865259885788\nvector: 0.039472080767154694\nvector: 0.02624863013625145\nvector: -0.013513240031898022\nvector: 0.016685647889971733\nvector: 0.006081720348447561\nvector: 0.0822385847568512\nvector: 0.03928905725479126\nvector: -0.0267824474722147\nvector: -0.0018464408349245787\nvector: 0.010432342998683453\nvector: -0.0047624255530536175\nvector: 0.01790580525994301\nvector: -0.05124659836292267\nvector: 0.004022705368697643\nvector: 0.03437792509794235\nvector: -0.010165433399379253\nvector: 0.023305000737309456\nvector: -0.0026385898236185312\nvector: -0.003769141621887684\nvector: -0.017997317016124725\nvector: -0.0025947403628379107\nvector: 0.034286413341760635\nvector: 0.05670680105686188\nvector: -0.02348802424967289\nvector: -0.0087927570566535\nvector: -0.0006062655593268573\nvector: 0.03306625783443451\nvector: -0.012392220087349415\nvector: -0.06079432740807533\nvector: 0.033035751432180405\nvector: 0.10035791993141174\nvector: 0.016761908307671547\nvector: 0.014489365741610527\nvector: 0.052954819053411484\nvector: -0.05207020416855812\nvector: -0.010455220937728882\nvector: -0.008922399021685123\nvector: 0.015663767233490944\nvector: 0.015427361242473125\nvector: 0.00767173757776618\nvector: 0.03629967197775841\nvector: -0.024220118299126625\nvector: 0.04850124567747116\nvector: 0.0027262885123491287\nvector: -0.014054684899747372\nvector: 0.0007297111442312598\nvector: -0.009913776069879532\nvector: -0.025287754833698273\nvector: -0.006924391258507967\nvector: -0.004388752393424511\nvector: -0.013536117970943451\nvector: 0.01981230080127716\nvector: -0.0557306744158268\nvector: -0.02007158473134041\nvector: -0.03036665916442871\nvector: -0.026431653648614883\nvector: -0.012171067297458649\nvector: -0.01309381052851677\nvector: -0.016151828691363335\nvector: 0.023945583030581474\nvector: 0.01531297154724598\nvector: 0.013742019422352314\nvector: 0.030183635652065277\nvector: 0.022115347906947136\nvector: -0.05640176311135292\nvector: -0.018927687779068947\nvector: 0.06350917369127274\nvector: -0.027514541521668434\nvector: -0.010577237233519554\nvector: -0.011797393672168255\nvector: -0.012819275259971619\nvector: -0.03202912211418152\nvector: 0.06375321000814438\nvector: 0.019614025950431824\nvector: -0.018363364040851593\nvector: 0.0067032380029559135\nvector: -0.002081893151625991\nvector: 0.005021709017455578\nvector: 0.051338110119104385\nvector: 0.03776386380195618\nvector: 0.03181559592485428\nvector: -0.0481657013297081\nvector: -0.03376784920692444\nvector: -0.043651118874549866\nvector: -0.025730062276124954\nvector: 0.07998129725456238\nvector: 0.0036814427003264427\nvector: -0.03132753446698189\nvector: 0.027407778427004814\nvector: 0.01563326269388199\nvector: -0.01106529962271452\nvector: 0.0085258474573493\nvector: -0.06058080121874809\nvector: 0.04298003390431404\nvector: -0.011927035637199879\nvector: -0.027895841747522354\nvector: 0.018866678699851036\nvector: 0.04206491634249687\nvector: 0.023228740319609642\nvector: 0.01298704743385315\nvector: -0.00411421712487936\nvector: -0.029787084087729454\nvector: -0.05069752782583237\nvector: -0.04420018941164017\nvector: 0.011103429831564426\nvector: 0.019247978925704956\nvector: -0.01574002578854561\nvector: 0.059452153742313385\nvector: -0.024433646351099014\nvector: -0.041271813213825226\nvector: 0.012110059149563313\nvector: -5.707570744561963e-05\nvector: -0.018088828772306442\nvector: -0.008167426101863384\nvector: -0.051338110119104385\nvector: -0.03199861943721771\nvector: -0.029344778507947922\nvector: 0.022054338827729225\nvector: 0.04929434508085251\nvector: -0.030976738780736923\nvector: -0.009700248949229717\nvector: -0.029909100383520126\nvector: -0.019034450873732567\nvector: -0.013414101675152779\nvector: 0.017036443576216698\nvector: 0.027789078652858734\nvector: 0.004705230705440044\nvector: -0.023289747536182404\nvector: -0.036116648465394974\nvector: 0.05240574851632118\nvector: -0.04990442469716072\nvector: 0.01839386858046055\nvector: -0.019308986142277718\nvector: -0.03739781305193901\nvector: -0.04667101055383682\nvector: -0.02251189760863781\nvector: 0.040448207408189774\nvector: -0.06857282668352127\nvector: 0.0005109407939016819\nvector: -0.019507260993123055\nvector: -0.008762253448367119\nvector: -0.03880099579691887\nvector: -0.031358037143945694\nvector: 0.016441617161035538\nvector: 0.03999064862728119\nvector: -0.028826210647821426\nvector: 0.014580877497792244\nvector: -0.03581161051988602\nvector: 0.0018454876262694597\nvector: -0.06106886267662048\nvector: -0.027621306478977203\nvector: -0.020849434658885002\nvector: 0.02121548168361187\nvector: -0.0335543192923069\nvector: -0.0012849778868258\nvector: -0.029619313776493073\nvector: -0.052253227680921555\nvector: 0.014657136984169483\nvector: 0.04020417481660843\nvector: 0.01953776553273201\nvector: -0.010905154049396515\nvector: 0.02240513451397419\nvector: 0.0024307817220687866\nvector: -0.023243991658091545\nvector: -0.021337497979402542\nvector: 0.007317129522562027\nvector: -0.013131940737366676\nvector: 0.03745882213115692\nvector: 0.038068901747465134\nvector: 0.024387890473008156\nvector: 0.044078174978494644\nvector: -0.04447472468018532\nvector: -0.01586204208433628\nvector: -0.03751983121037483\nvector: 0.02115447446703911\nvector: 0.004945449065417051\nvector: 0.015923049300909042\nvector: -0.035171028226614\nvector: 0.014611381106078625\nvector: 0.015099444426596165\nvector: 0.01452749501913786\nvector: 0.021795056760311127\nvector: 0.0136657590046525\nvector: 0.006360068917274475\nvector: -0.027240006253123283\nvector: 0.010668748989701271\nvector: 0.03642169013619423\nvector: -0.05149063095450401\nvector: -0.029741328209638596\nvector: -0.006867196410894394\nvector: 0.01845487579703331\nvector: -0.021184977144002914\nvector: 0.024006590247154236\nvector: 0.008449587970972061\nvector: 0.00022699210967402905\nvector: 0.010051043704152107\nvector: 0.012239701114594936\nvector: -0.023152479901909828\nvector: -0.008426710031926632\nvector: -0.025257252156734467\nvector: 0.023518528789281845\nvector: 0.049812912940979004\nvector: -0.05570017173886299\nvector: 0.008129296824336052\nvector: -0.010859398171305656\nvector: -0.017875300720334053\nvector: 0.05426648631691933\nvector: 0.023137228563427925\nvector: 0.019400497898459435\nvector: -0.033157769590616226\nvector: -0.0289482269436121\nvector: -0.004945449065417051\nvector: -0.027743322774767876\nvector: -0.03718428686261177\nvector: -0.03562858700752258\nvector: 0.051978692412376404\nvector: 0.0008274190477095544\nvector: 0.03935006633400917\nvector: 0.023030465468764305\nvector: 0.03181559592485428\nvector: -0.004903506487607956\nvector: 0.024052346125245094\nvector: 0.011736386455595493\nvector: -0.02917700633406639\nvector: -0.023198235780000687\nvector: 0.0406007282435894\nvector: 0.001571905449964106\nvector: -0.007286625448614359\nvector: 0.004083713050931692\nvector: -0.013299711979925632\nvector: 0.014169074594974518\nvector: 0.015282467938959599\nvector: 0.03327978402376175\nvector: -0.020330866798758507\nvector: 0.009669745340943336\nvector: 0.016533128917217255\nvector: 0.028490668162703514\nvector: -0.012933664955198765\nvector: 0.0085258474573493\nvector: 0.028002604842185974\nvector: 0.009097795933485031\nvector: -0.01969028450548649\nvector: -0.026828203350305557\nvector: -0.023610040545463562\nvector: -0.020529143512248993\nvector: -0.006360068917274475\nvector: -0.014062310568988323\nvector: 0.032395169138908386\nvector: 0.07229430973529816\nvector: -0.015923049300909042\nvector: -0.019553016871213913\nvector: 0.021200230345129967\nvector: 0.05762191861867905\nvector: 0.005067464895546436\nvector: -0.02679770067334175\nvector: -0.024540409445762634\nvector: 0.02115447446703911\nvector: -0.043651118874549866\nvector: 0.029192257672548294\nvector: -0.03873998671770096\nvector: -0.019827552139759064\nvector: -0.03633017838001251\nvector: -0.03489649295806885\nvector: -0.03819091618061066\nvector: -0.004217167850583792\nvector: -0.026706188917160034\nvector: 0.03559808433055878\nvector: -0.0070387814193964005\nvector: -0.009379957802593708\nvector: -0.02127648890018463\nvector: 0.007839509285986423\nvector: -0.003302050055935979\nvector: 0.0213832538574934\nvector: -0.01130933128297329\nvector: 0.026767196133732796\nvector: 0.028322895988821983\nvector: -0.0036070893984287977\nvector: -0.034926995635032654\nvector: 0.02457091398537159\nvector: -0.02267966978251934\nvector: -0.013421728275716305\nvector: 0.07693090289831161\nvector: 0.021078214049339294\nvector: -0.03062594309449196\nvector: -0.05454102158546448\nvector: 0.007549722213298082\nvector: 0.014184325933456421\nvector: 0.010561984963715076\nvector: -0.02246614173054695\nvector: -0.0033687774557620287\nvector: -0.008731748908758163\nvector: -0.016914427280426025\nvector: -0.024372637271881104\nvector: -0.016853420063853264\nvector: 0.021352749317884445\nvector: -0.020712167024612427\nvector: -0.030503926798701286\nvector: -0.01824134774506092\nvector: 0.030336156487464905\nvector: 0.03257819265127182\nvector: 0.00938758347183466\nvector: -0.014702892862260342\nvector: -0.05261927470564842\nvector: 0.014756274409592152\nvector: -0.005456389859318733\nvector: -0.022267866879701614\nvector: 0.02824663743376732\nvector: 0.03263920173048973\nvector: 0.012788771651685238\nvector: 0.0015414016088470817\nvector: 0.02240513451397419\nvector: 0.012559992261230946\nvector: -0.027102738618850708\nvector: -0.006752806715667248\nvector: 0.020468134433031082\nvector: -0.01569426991045475\nvector: 0.011027169413864613\nvector: -0.026584172621369362\nvector: -0.028612684458494186\nvector: 0.01731097884476185\nvector: 0.004621345084160566\nvector: -0.011812645941972733\nvector: -0.016914427280426025\nvector: -0.01699068769812584\nvector: -0.005414447281509638\nvector: -0.04618294537067413\nvector: 0.004270549863576889\nvector: 0.006264743860810995\nvector: 0.021581528708338737\nvector: 0.018912434577941895\nvector: -0.008274190127849579\nvector: 0.011111055500805378\nvector: 0.005036960821598768\nvector: -0.00726374750956893\nvector: -0.03819091618061066\nvector: 0.017509253695607185\nvector: -0.06213650107383728\nvector: -0.03459145501255989\nvector: 0.03529304265975952\nvector: -0.08907146751880646\nvector: 0.02457091398537159\nvector: -0.0443832129240036\nvector: -0.017631269991397858\nvector: -0.004362061619758606\nvector: 0.017677025869488716\nvector: -0.02862793579697609\nvector: -0.0014746742090210319\nvector: 0.0019284201553091407\nvector: -0.04041770473122597\nvector: 0.0016014561988413334\nvector: 0.0009384723962284625\nvector: -0.043498601764440536\nvector: 0.05191768333315849\nvector: 0.009501973167061806\nvector: -0.007557347882539034\nvector: 0.022222111001610756\nvector: -0.016151828691363335\nvector: -0.022969456389546394\nvector: 0.004907319322228432\nvector: 0.0368182398378849\nvector: 0.0010685906745493412\nvector: 0.018378615379333496\nvector: -0.053930941969156265\nvector: 0.010935657657682896\nvector: -0.03941107541322708\nvector: -0.01417670026421547\nvector: 0.03349331393837929\nvector: -0.04712856933474541\nvector: -0.02045288309454918\nvector: 0.008091166615486145\nvector: 0.008312320336699486\nvector: 0.006718489807099104\nvector: -0.0023659609723836184\nvector: 0.023503275588154793\nvector: 0.010394212789833546\nvector: 0.054419007152318954\nvector: 0.016212837770581245\nvector: -0.004255298059433699\nvector: -0.019675033167004585\nvector: -0.042674995958805084\nvector: -0.0016310068313032389\nvector: 0.060916341841220856\nvector: -0.013414101675152779\nvector: -0.025257252156734467\nvector: 0.008457213640213013\nvector: 0.05097206309437752\nvector: -0.0319376103579998\nvector: 0.04563387483358383\nvector: -0.002089519053697586\nvector: 2.931236849690322e-05\nvector: -0.032334163784980774\nvector: -0.015999309718608856\nvector: 0.0053610652685165405\nvector: -0.013063306920230389\nvector: 0.022984709590673447\nvector: -0.0335543192923069\nvector: -0.002072360599413514\nvector: -0.018790418282151222\nvector: 0.06838980317115784\nvector: -0.048958804458379745\nvector: -0.012285456992685795\nvector: 0.019400497898459435\nvector: -0.018149835988879204\nvector: -0.027362022548913956\nvector: -0.03294423967599869\nvector: -0.05810998007655144\nvector: 0.0029264704789966345\nvector: 0.030869973823428154\nvector: 0.0026614677626639605\nvector: -0.00990615040063858\nvector: 0.008693619631230831\nvector: -0.019736040383577347\nvector: -0.03294423967599869\nvector: -0.026599423959851265\nvector: -0.03660471364855766\nvector: -0.003843494923785329\nvector: 0.020361371338367462\nvector: 0.01662464067339897\nvector: 0.00324104237370193\nvector: 0.010028165765106678\nvector: -0.004903506487607956\nvector: 0.014840160496532917\nvector: -0.018195591866970062\nvector: 0.022496646270155907\nvector: 0.0031876603607088327\nvector: 0.10054094344377518\nvector: -0.016167081892490387\nvector: 0.004255298059433699\nvector: 0.02066641114652157\nvector: -0.03648269549012184\nvector: 0.025516534224152565\nvector: 0.03294423967599869\nvector: -0.06832879781723022\nvector: -0.008434335701167583\nvector: 0.037580836564302444\nvector: -0.03349331393837929\nvector: 0.01851588301360607\nvector: 0.02278643287718296\nvector: 0.02701122686266899\nvector: 0.03684874251484871\nvector: -0.028719447553157806\nvector: -0.031632572412490845\nvector: 0.02110871858894825\nvector: 0.037367310374975204\nvector: -0.029466792941093445\nvector: -0.0346524603664875\nvector: -0.010012914426624775\nvector: -0.029909100383520126\nvector: -0.04901980981230736\nvector: -0.07162322103977203\nvector: 0.008014907129108906\nvector: -0.007694615516811609\nvector: 0.01792105659842491\nvector: 0.004270549863576889\nvector: 0.013574247248470783\nvector: 0.00938758347183466\nvector: -0.030320903286337852\nvector: 0.021078214049339294\nvector: 0.0006405824678950012\nvector: 0.03935006633400917\nvector: -0.031907107681035995\nvector: -0.011866027489304543\nvector: 0.006760432850569487\nvector: 0.021139221265912056\nvector: 0.001777807017788291\nvector: -0.005864379927515984\nvector: -0.004552711267024279\nvector: -0.01139321643859148\nvector: 0.010867023840546608\nvector: -0.0357200987637043\nvector: 0.00023068595328368247\nvector: -0.01949200965464115\nvector: -0.004407817497849464\nvector: 0.0034736348316073418\nvector: 0.00722561776638031\nvector: 0.03852646052837372\nvector: 0.03068695031106472\nvector: 0.03718428686261177\nvector: -0.017570262774825096\nvector: -0.03015313297510147\nvector: -0.014352098107337952\nvector: 0.0019493915606290102\nvector: 0.029405785724520683\nvector: 0.0330052487552166\nvector: 0.023838819935917854\nvector: -0.025501282885670662\nvector: 0.03042766824364662\nvector: 0.010577237233519554\nvector: 0.03642169013619423\nvector: -0.04160735756158829\nvector: 0.06899988651275635\nvector: -0.020696913823485374\nvector: -0.020483387634158134\nvector: 0.059238627552986145\nvector: -0.009105422534048557\nvector: 0.01569426991045475\nvector: -0.048958804458379745\nvector: 0.04252247512340546\nvector: 0.002129555447027087\nvector: -0.02582157403230667\nvector: 0.0012716324999928474\nvector: 0.0002445080317556858\nvector: -0.026995975524187088\nvector: 0.0019560642540454865\nvector: -0.021627284586429596\nvector: -0.052588772028684616\nvector: 0.0020971449557691813\nvector: -0.022877944633364677\nvector: -0.03349331393837929\nvector: -0.028978731483221054\nvector: -0.0213832538574934\nvector: -0.021825559437274933\nvector: 0.006722303107380867\nvector: 0.004995018243789673\nvector: 0.0020952385384589434\nvector: 0.0027758574578911066\nvector: 0.017738033086061478\nvector: -0.05313784256577492\nvector: 0.011919409967958927\nvector: -0.010684000328183174\nvector: -0.03306625783443451\nvector: 0.02261866256594658\nvector: -0.061404407024383545\nvector: 0.028170377016067505\nvector: -0.04752511903643608\nvector: -0.037306301295757294\nvector: 0.01731097884476185\nvector: -0.03370684012770653\nvector: -0.04420018941164017\nvector: 0.03074795939028263\nvector: 0.02533351071178913\nvector: -0.002106677507981658\nvector: 0.007008277345448732\nvector: -0.030595438554883003\nvector: 0.02905499003827572\nvector: 0.0011419907677918673\nvector: -0.061831459403038025\nvector: 0.0248912051320076\nvector: 0.05402245372533798\nvector: 0.03053443133831024\nvector: 0.021413756534457207\nvector: 0.008602107875049114\nvector: -0.012727763503789902\nvector: -0.03074795939028263\nvector: 0.03773335739970207\nvector: -0.009951906278729439\nvector: 0.0784561038017273\nvector: -0.05118558928370476\nvector: 0.039045028388500214\nvector: 0.0284144077450037\nvector: 0.038556963205337524\nvector: -0.00828181579709053\nvector: 0.04017367213964462\nvector: -0.03629967197775841\nvector: 0.024204866960644722\nvector: 0.006123663391917944\nvector: -0.029299022629857063\nvector: 0.08815634995698929\nvector: 0.013002298772335052\nvector: 0.03297474607825279\nvector: -0.04950787499547005\nvector: -0.07613780349493027\nvector: 0.02142900973558426\nvector: 0.01439785398542881\nvector: 0.03928905725479126\nvector: -0.07430756837129593\nvector: -0.02993960492312908\nvector: -0.033096760511398315\nvector: 0.04813519865274429\nvector: 0.020986702293157578\nvector: -0.024479402229189873\nvector: -0.022801686078310013\nvector: -0.03459145501255989\nvector: 0.026263881474733353\nvector: -0.024555660784244537\nvector: -0.01694493182003498\nvector: -0.0032029123976826668\nvector: -0.04380363970994949\nvector: 0.005471642129123211\nvector: 0.029512548819184303\nvector: -0.022816937416791916\nvector: 0.011499980464577675\nvector: -0.022328874096274376\nvector: -0.007713680621236563\nvector: 0.0346219576895237\nvector: 0.011278826743364334\nvector: 0.004754799883812666\nvector: 0.005517398007214069\nvector: 0.0011629621731117368\nvector: 0.014725770801305771\nvector: -0.07558873295783997\nvector: -0.005849128123372793\nvector: -0.0752226859331131\nvector: -0.03489649295806885\nvector: -0.030168384313583374\nvector: 0.040021151304244995\nvector: 0.01947675831615925\nvector: 0.02370155230164528\nvector: -0.019522514194250107\nvector: 0.02393033169209957\nvector: -0.019949568435549736\nvector: 0.001818796619772911\nvector: 0.021032458171248436\nvector: -0.01830235682427883\nvector: -0.021718796342611313\nvector: -0.022969456389546394\nvector: 0.018820922821760178\nvector: 0.0009418087429367006\nvector: -0.012674381956458092\nvector: -0.04447472468018532\nvector: 0.016700901091098785\nvector: 0.02993960492312908\nvector: 0.011683003976941109\nvector: 0.0039045026060193777\nvector: 0.006569783203303814\nvector: 0.05069752782583237\nvector: -0.004750986583530903\nvector: 0.012659129686653614\nvector: -0.007381950505077839\nvector: -0.007488714065402746\nvector: 0.004022705368697643\nvector: -0.04227844253182411\nvector: 0.022176355123519897\nvector: 0.017982065677642822\nvector: -0.07510066777467728\nvector: -0.03489649295806885\nvector: -0.03773335739970207\nvector: 0.012537114322185516\nvector: -0.06686460971832275\nvector: -0.0029264704789966345\nvector: 0.02873469889163971\nvector: 0.01420720387250185\nvector: -0.061892468482255936\nvector: -0.06430228054523468\nvector: 0.023686299100518227\nvector: -0.06533940881490707\nvector: -0.04334608092904091\nvector: -0.04398666322231293\nvector: 0.025150487199425697\nvector: 0.017387239262461662\nvector: -0.013597125187516212\nvector: -0.015709523111581802\nvector: -0.0019941942300647497\nvector: -0.01361237745732069\nvector: -0.024235369637608528\nvector: -0.027789078652858734\nvector: 0.03556757792830467\nvector: 0.01212531141936779\nvector: 0.0067680589854717255\nvector: -0.00424767192453146\nvector: -0.03148005157709122\nvector: -0.012079555541276932\nvector: -0.011484728194773197\nvector: -0.011568614281713963\nvector: 0.03660471364855766\nvector: -0.012903161346912384\nvector: 0.023854071274399757\nvector: -0.04359011352062225\nvector: 0.0085258474573493\nvector: -0.01845487579703331\nvector: -0.019461505115032196\nvector: 0.0046442230232059956\nvector: -0.033859360963106155\nvector: 0.04020417481660843\nvector: 0.052466753870248795\nvector: -0.021688291803002357\nvector: -0.032883234322071075\nvector: -0.003811084432527423\nvector: -0.02890247106552124\nvector: -0.02321348898112774\nvector: 0.004754799883812666\nvector: -0.039045028388500214\nvector: -0.0005995928077027202\nvector: 0.0018092641839757562\nvector: 0.1076788604259491\nvector: -0.022588158026337624\nvector: -0.03009212389588356\nvector: 0.034988004714250565\nvector: 0.006653669290244579\nvector: -0.034988004714250565\nvector: -0.0497824102640152\nvector: 0.009753630496561527\nvector: -0.006596474442631006\nvector: -0.013505613431334496\nvector: -0.05325985699892044\nvector: 0.0013393131084740162\nvector: -0.03102249465882778\nvector: 0.0319376103579998\nvector: -0.01214818935841322\nvector: 0.000670609762892127\nvector: 0.028277140110731125\nvector: -0.02365579642355442\nvector: -0.0010552452877163887\nvector: -0.02603510208427906\nvector: 0.07717493921518326\nvector: -0.017555009573698044\nvector: 0.024647172540426254\nvector: -0.007366698235273361\nvector: 0.021566277369856834\nvector: 0.05527311563491821\nvector: -0.024692928418517113\nvector: 0.006489710416644812\nvector: -0.0665595680475235\nvector: 0.07217229157686234\nvector: 0.05164314806461334\nvector: 0.038678981363773346\nvector: -0.007385763339698315\nvector: 0.04682352766394615\nvector: -0.028399156406521797\nvector: -0.009471469558775425\nvector: 0.022176355123519897\nvector: 0.024204866960644722\nvector: 0.04038719832897186\nvector: -0.0197512935847044\nvector: 0.05933013930916786\nvector: 0.03816041350364685\nvector: -0.0017844797112047672\nvector: -0.01601456105709076\nvector: -0.09480620920658112\nvector: -0.05152113363146782\nvector: 0.006890074349939823\nvector: -0.027453534305095673\nvector: 0.0032791721168905497\nvector: 0.016639892011880875\nvector: -0.02397608757019043\nvector: 0.0022344125900417566\nvector: -0.0023488022852689028\nvector: -0.04615244269371033\nvector: -0.004907319322228432\nvector: -0.027621306478977203\nvector: 0.04740310460329056\nvector: -0.024692928418517113\nvector: 0.0025909272953867912\nnum_dimensions: 1024\n]",m='status {\n  code: SUCCESS\n  description: "Ok"\n  req_id: "d03748f58ba35a376266f4935132521b"\n}\noutputs {\n  id: "a52203d9a2114428ac6ed23139e1afa9"\n  status {\n    code: SUCCESS\n    description: "Ok"\n  }\n  created_at {\n    seconds: 1702460385\n    nanos: 732703311\n  }\n  model {\n    id: "cohere-embed-english-v3_0"\n    name: "embed-english-v3_0"\n    created_at {\n      seconds: 1699267051\n      nanos: 239483000\n    }\n    app_id: "embed"\n    model_version {\n      id: "e2dd848faf454fbda85c26cf89c4926e"\n      created_at {\n        seconds: 1699269295\n        nanos: 601056000\n      }\n      status {\n        code: MODEL_TRAINED\n        description: "Model is trained and ready"\n      }\n      completed_at {\n        seconds: 1699269521\n        nanos: 395913000\n      }\n      visibility {\n        gettable: PUBLIC\n      }\n      app_id: "embed"\n      user_id: "cohere"\n      metadata {\n      }\n    }\n    user_id: "cohere"\n    model_type_id: "text-embedder"\n    visibility {\n      gettable: PUBLIC\n    }\n    modified_at {\n      seconds: 1701248637\n      nanos: 454591000\n    }\n    workflow_recommended {\n    }\n  }\n  input {\n    id: "3ce817f59bbe422d89d68b16dcd0b98b"\n    data {\n      text {\n        raw: "Give me an exotic yet tasty recipe for some noodle dish"\n        url: "https://samples.clarifai.com/placeholder.gif"\n      }\n    }\n  }\n  data {\n    embeddings {\n      vector: 0.025470778346061707\n      vector: 0.027972102165222168\n      vector: -0.01801256835460663\n      vector: -0.025394519791007042\n      vector: 0.007034968119114637\n      vector: -0.0002650028618518263\n      vector: -0.0037653285544365644\n      vector: -0.0023831194266676903\n      vector: -0.03773335739970207\n      vector: 0.05649327486753464\n      vector: 0.01828710362315178\n      vector: 0.00324104237370193\n      vector: -0.015084192156791687\n      vector: -0.0007111228187568486\n      vector: -0.009479095228016376\n      vector: -0.016197584569454193\n      vector: 0.01801256835460663\n      vector: 0.017738033086061478\n      vector: 0.027041731402277946\n      vector: 0.005357252433896065\n      vector: 0.0050331479869782925\n      vector: 0.028963478282094002\n      vector: -0.012285456992685795\n      vector: -0.035171028226614\n      vector: 0.041058287024497986\n      vector: -0.030442919582128525\n      vector: -0.0278653372079134\n      vector: -0.00623805308714509\n      vector: 0.011621995829045773\n      vector: 0.001777807017788291\n      vector: -0.005467828828841448\n      vector: 0.01667039655148983\n      vector: 0.05164314806461334\n      vector: 0.018698906525969505\n      vector: -0.07211128622293472\n      vector: -0.030061621218919754\n      vector: 0.0001396507868776098\n      vector: -0.01699068769812584\n      vector: -0.06198398023843765\n      vector: 0.05929963290691376\n      vector: 0.037702854722738266\n      vector: -0.020605402067303658\n      vector: -0.06363119184970856\n      vector: -0.004384939558804035\n      vector: -0.051002565771341324\n      vector: -0.021947575733065605\n      vector: 0.02457091398537159\n      vector: 0.006009273696690798\n      vector: 0.00549452006816864\n      vector: 0.008258937858045101\n      vector: 0.018912434577941895\n      vector: -0.005502145737409592\n      vector: 0.01715845987200737\n      vector: 0.009242690168321133\n      vector: -0.020818930119276047\n      vector: -0.009837516583502293\n      vector: 0.01894293911755085\n      vector: 0.005456389859318733\n      vector: 0.038556963205337524\n      vector: -0.041485339403152466\n      vector: -0.0633261501789093\n      vector: -0.012338838540017605\n      vector: 0.05271078646183014\n      vector: -0.00013786344788968563\n      vector: 0.010684000328183174\n      vector: 0.0098756467923522\n      vector: 0.001827375846914947\n      vector: 0.014962175861001015\n      vector: -0.006932017393410206\n      vector: 0.01074500847607851\n      vector: 0.0010018633911386132\n      vector: -0.01212531141936779\n      vector: 0.018043072894215584\n      vector: -0.09224387258291245\n      vector: -0.013825904577970505\n      vector: 0.057499904185533524\n      vector: 0.023579536005854607\n      vector: -0.02873469889163971\n      vector: -0.011759264394640923\n      vector: -0.03297474607825279\n      vector: -0.0017129861516878009\n      vector: 0.020147843286395073\n      vector: 0.020803678780794144\n      vector: -0.0855330154299736\n      vector: 0.013986051082611084\n      vector: -0.09023061394691467\n      vector: -0.004651848692446947\n      vector: 0.0305801872164011\n      vector: 0.007992029190063477\n      vector: 0.049172330647706985\n      vector: 0.0025413583498448133\n      vector: -0.022039087489247322\n      vector: -0.0013612377224490047\n      vector: 0.052253227680921555\n      vector: 0.03312726318836212\n      vector: -0.008724123239517212\n      vector: -0.01790580525994301\n      vector: -0.08461789786815643\n      vector: 0.04252247512340546\n      vector: 0.041271813213825226\n      vector: 0.07009802758693695\n      vector: -0.08187253773212433\n      vector: 0.11414569616317749\n      vector: -0.01561801042407751\n      vector: -0.0036909752525389194\n      vector: 0.03285272791981697\n      vector: 0.03279172256588936\n      vector: 0.015030810609459877\n      vector: -0.007652672939002514\n      vector: -0.015251963399350643\n      vector: -0.00938758347183466\n      vector: 0.015938302502036095\n      vector: 0.0018321421230211854\n      vector: -0.003012262750416994\n      vector: -0.028658440336585045\n      vector: 0.00906729232519865\n      vector: -0.017082199454307556\n      vector: -0.019308986142277718\n      vector: 0.003138091415166855\n      vector: -0.007309503387659788\n      vector: 0.02739252708852291\n      vector: 0.023366007953882217\n      vector: 0.005769055336713791\n      vector: 0.016090821474790573\n      vector: -0.042674995958805084\n      vector: -0.023823566734790802\n      vector: -0.030778462067246437\n      vector: -0.022908449172973633\n      vector: 0.0362691693007946\n      vector: -0.012399846687912941\n      vector: -0.06302111595869064\n      vector: 0.007019716314971447\n      vector: 0.08419083803892136\n      vector: 0.02656892128288746\n      vector: 0.02446414902806282\n      vector: -0.016853420063853264\n      vector: 0.03079371526837349\n      vector: -0.010554359294474125\n      vector: -0.0035651465877890587\n      vector: -0.0048844413831830025\n      vector: 0.029954856261610985\n      vector: -0.028871966525912285\n      vector: 0.005776681005954742\n      vector: 0.023625291883945465\n      vector: -0.02289319783449173\n      vector: 0.02571481093764305\n      vector: 0.014779152348637581\n      vector: -0.011530484072864056\n      vector: -0.01561801042407751\n      vector: -0.004785303492099047\n      vector: -0.03663521632552147\n      vector: -0.023228740319609642\n      vector: 0.018927687779068947\n      vector: -0.01635010540485382\n      vector: -0.031968116760253906\n      vector: 0.007694615516811609\n      vector: -0.03880099579691887\n      vector: 0.019827552139759064\n      vector: -0.02527250349521637\n      vector: 0.011812645941972733\n      vector: -0.06326514482498169\n      vector: -0.019308986142277718\n      vector: -0.00752303097397089\n      vector: -0.012155815027654171\n      vector: 0.0037081337068229914\n      vector: 0.005418260116130114\n      vector: 0.057011839002370834\n      vector: 0.03416439890861511\n      vector: 0.013025176711380482\n      vector: 0.006039777770638466\n      vector: 0.040295686572790146\n      vector: -0.02879570797085762\n      vector: -0.052802298218011856\n      vector: -0.02136800065636635\n      vector: 0.0009060619631782174\n      vector: -0.003061831695958972\n      vector: 0.026507912203669548\n      vector: 0.005151350516825914\n      vector: -0.020757922902703285\n      vector: 0.047494616359472275\n      vector: 0.012110059149563313\n      vector: -0.0232744961977005\n      vector: 0.0005414446932263672\n      vector: -0.002543264999985695\n      vector: -0.016380608081817627\n      vector: 0.009097795933485031\n      vector: -0.01482490822672844\n      vector: 0.04380363970994949\n      vector: 0.005200919695198536\n      vector: 0.0028940599877387285\n      vector: -0.0064058247953653336\n      vector: 0.0072713736444711685\n      vector: -0.05149063095450401\n      vector: 0.03614715486764908\n      vector: 0.03712327778339386\n      vector: -0.014977428130805492\n      vector: -0.01872941106557846\n      vector: 0.001053338753990829\n      vector: 0.0007606917060911655\n      vector: -0.059238627552986145\n      vector: -0.005036960821598768\n      vector: -0.01607557013630867\n      vector: 0.010348456911742687\n      vector: 0.011629622429609299\n      vector: 0.007809005212038755\n      vector: -0.014115692116320133\n      vector: 0.002140994416549802\n      vector: 0.007141732145100832\n      vector: 0.05255826562643051\n      vector: 0.01502318400889635\n      vector: -0.022542402148246765\n      vector: 0.015724774450063705\n      vector: 0.0014441702514886856\n      vector: -0.060001224279403687\n      vector: -0.03718428686261177\n      vector: 0.04481026902794838\n      vector: -0.040936268866062164\n      vector: 0.031098753213882446\n      vector: 0.021825559437274933\n      vector: -0.021245986223220825\n      vector: 0.023823566734790802\n      vector: 0.01682291552424431\n      vector: 0.028963478282094002\n      vector: -0.015434986911714077\n      vector: 0.057072848081588745\n      vector: 0.0012211103457957506\n      vector: -0.012514236383140087\n      vector: -0.02132224477827549\n      vector: 0.013436979614198208\n      vector: 0.050087448209524155\n      vector: -0.11438972502946854\n      vector: -0.0063753207214176655\n      vector: -0.03620816022157669\n      vector: -0.03599463403224945\n      vector: -0.054144471883773804\n      vector: 0.004487890284508467\n      vector: -0.037641845643520355\n      vector: 0.006680360063910484\n      vector: -0.004091339185833931\n      vector: 0.012895535677671432\n      vector: 0.016045065596699715\n      vector: 0.01856163889169693\n      vector: -0.04160735756158829\n      vector: -0.010973787866532803\n      vector: 0.0026481221430003643\n      vector: -0.049385856837034225\n      vector: -0.009509599767625332\n      vector: 0.017082199454307556\n      vector: -0.030381912365555763\n      vector: -0.06680360436439514\n      vector: 0.026157118380069733\n      vector: -0.014733396470546722\n      vector: 0.04807418957352638\n      vector: -0.04676252231001854\n      vector: 0.016594136133790016\n      vector: 0.043925654143095016\n      vector: 0.028856715187430382\n      vector: 0.028826210647821426\n      vector: -0.018744662404060364\n      vector: 0.049233339726924896\n      vector: -0.036238666623830795\n      vector: 0.13226503133773804\n      vector: 0.04627445712685585\n      vector: 0.055181603878736496\n      vector: -0.030000612139701843\n      vector: -0.013208200223743916\n      vector: 0.005608909763395786\n      vector: 0.004198103211820126\n      vector: -0.023243991658091545\n      vector: -0.005879632197320461\n      vector: 0.025897834450006485\n      vector: 0.062380529940128326\n      vector: -4.426644227351062e-05\n      vector: -0.04334608092904091\n      vector: -0.03126652538776398\n      vector: -0.044901780784130096\n      vector: -0.02603510208427906\n      vector: 0.059116609394550323\n      vector: -0.030763210728764534\n      vector: -0.047220081090927124\n      vector: -0.0023507089354097843\n      vector: 0.06906089186668396\n      vector: 0.04133282229304314\n      vector: -0.01889718323945999\n      vector: -0.03151055797934532\n      vector: -0.026858707889914513\n      vector: 0.005913949105888605\n      vector: -0.01618233323097229\n      vector: -0.018058324232697487\n      vector: 0.018317608162760735\n      vector: 0.028078865259885788\n      vector: 0.039472080767154694\n      vector: 0.02624863013625145\n      vector: -0.013513240031898022\n      vector: 0.016685647889971733\n      vector: 0.006081720348447561\n      vector: 0.0822385847568512\n      vector: 0.03928905725479126\n      vector: -0.0267824474722147\n      vector: -0.0018464408349245787\n      vector: 0.010432342998683453\n      vector: -0.0047624255530536175\n      vector: 0.01790580525994301\n      vector: -0.05124659836292267\n      vector: 0.004022705368697643\n      vector: 0.03437792509794235\n      vector: -0.010165433399379253\n      vector: 0.023305000737309456\n      vector: -0.0026385898236185312\n      vector: -0.003769141621887684\n      vector: -0.017997317016124725\n      vector: -0.0025947403628379107\n      vector: 0.034286413341760635\n      vector: 0.05670680105686188\n      vector: -0.02348802424967289\n      vector: -0.0087927570566535\n      vector: -0.0006062655593268573\n      vector: 0.03306625783443451\n      vector: -0.012392220087349415\n      vector: -0.06079432740807533\n      vector: 0.033035751432180405\n      vector: 0.10035791993141174\n      vector: 0.016761908307671547\n      vector: 0.014489365741610527\n      vector: 0.052954819053411484\n      vector: -0.05207020416855812\n      vector: -0.010455220937728882\n      vector: -0.008922399021685123\n      vector: 0.015663767233490944\n      vector: 0.015427361242473125\n      vector: 0.00767173757776618\n      vector: 0.03629967197775841\n      vector: -0.024220118299126625\n      vector: 0.04850124567747116\n      vector: 0.0027262885123491287\n      vector: -0.014054684899747372\n      vector: 0.0007297111442312598\n      vector: -0.009913776069879532\n      vector: -0.025287754833698273\n      vector: -0.006924391258507967\n      vector: -0.004388752393424511\n      vector: -0.013536117970943451\n      vector: 0.01981230080127716\n      vector: -0.0557306744158268\n      vector: -0.02007158473134041\n      vector: -0.03036665916442871\n      vector: -0.026431653648614883\n      vector: -0.012171067297458649\n      vector: -0.01309381052851677\n      vector: -0.016151828691363335\n      vector: 0.023945583030581474\n      vector: 0.01531297154724598\n      vector: 0.013742019422352314\n      vector: 0.030183635652065277\n      vector: 0.022115347906947136\n      vector: -0.05640176311135292\n      vector: -0.018927687779068947\n      vector: 0.06350917369127274\n      vector: -0.027514541521668434\n      vector: -0.010577237233519554\n      vector: -0.011797393672168255\n      vector: -0.012819275259971619\n      vector: -0.03202912211418152\n      vector: 0.06375321000814438\n      vector: 0.019614025950431824\n      vector: -0.018363364040851593\n      vector: 0.0067032380029559135\n      vector: -0.002081893151625991\n      vector: 0.005021709017455578\n      vector: 0.051338110119104385\n      vector: 0.03776386380195618\n      vector: 0.03181559592485428\n      vector: -0.0481657013297081\n      vector: -0.03376784920692444\n      vector: -0.043651118874549866\n      vector: -0.025730062276124954\n      vector: 0.07998129725456238\n      vector: 0.0036814427003264427\n      vector: -0.03132753446698189\n      vector: 0.027407778427004814\n      vector: 0.01563326269388199\n      vector: -0.01106529962271452\n      vector: 0.0085258474573493\n      vector: -0.06058080121874809\n      vector: 0.04298003390431404\n      vector: -0.011927035637199879\n      vector: -0.027895841747522354\n      vector: 0.018866678699851036\n      vector: 0.04206491634249687\n      vector: 0.023228740319609642\n      vector: 0.01298704743385315\n      vector: -0.00411421712487936\n      vector: -0.029787084087729454\n      vector: -0.05069752782583237\n      vector: -0.04420018941164017\n      vector: 0.011103429831564426\n      vector: 0.019247978925704956\n      vector: -0.01574002578854561\n      vector: 0.059452153742313385\n      vector: -0.024433646351099014\n      vector: -0.041271813213825226\n      vector: 0.012110059149563313\n      vector: -5.707570744561963e-05\n      vector: -0.018088828772306442\n      vector: -0.008167426101863384\n      vector: -0.051338110119104385\n      vector: -0.03199861943721771\n      vector: -0.029344778507947922\n      vector: 0.022054338827729225\n      vector: 0.04929434508085251\n      vector: -0.030976738780736923\n      vector: -0.009700248949229717\n      vector: -0.029909100383520126\n      vector: -0.019034450873732567\n      vector: -0.013414101675152779\n      vector: 0.017036443576216698\n      vector: 0.027789078652858734\n      vector: 0.004705230705440044\n      vector: -0.023289747536182404\n      vector: -0.036116648465394974\n      vector: 0.05240574851632118\n      vector: -0.04990442469716072\n      vector: 0.01839386858046055\n      vector: -0.019308986142277718\n      vector: -0.03739781305193901\n      vector: -0.04667101055383682\n      vector: -0.02251189760863781\n      vector: 0.040448207408189774\n      vector: -0.06857282668352127\n      vector: 0.0005109407939016819\n      vector: -0.019507260993123055\n      vector: -0.008762253448367119\n      vector: -0.03880099579691887\n      vector: -0.031358037143945694\n      vector: 0.016441617161035538\n      vector: 0.03999064862728119\n      vector: -0.028826210647821426\n      vector: 0.014580877497792244\n      vector: -0.03581161051988602\n      vector: 0.0018454876262694597\n      vector: -0.06106886267662048\n      vector: -0.027621306478977203\n      vector: -0.020849434658885002\n      vector: 0.02121548168361187\n      vector: -0.0335543192923069\n      vector: -0.0012849778868258\n      vector: -0.029619313776493073\n      vector: -0.052253227680921555\n      vector: 0.014657136984169483\n      vector: 0.04020417481660843\n      vector: 0.01953776553273201\n      vector: -0.010905154049396515\n      vector: 0.02240513451397419\n      vector: 0.0024307817220687866\n      vector: -0.023243991658091545\n      vector: -0.021337497979402542\n      vector: 0.007317129522562027\n      vector: -0.013131940737366676\n      vector: 0.03745882213115692\n      vector: 0.038068901747465134\n      vector: 0.024387890473008156\n      vector: 0.044078174978494644\n      vector: -0.04447472468018532\n      vector: -0.01586204208433628\n      vector: -0.03751983121037483\n      vector: 0.02115447446703911\n      vector: 0.004945449065417051\n      vector: 0.015923049300909042\n      vector: -0.035171028226614\n      vector: 0.014611381106078625\n      vector: 0.015099444426596165\n      vector: 0.01452749501913786\n      vector: 0.021795056760311127\n      vector: 0.0136657590046525\n      vector: 0.006360068917274475\n      vector: -0.027240006253123283\n      vector: 0.010668748989701271\n      vector: 0.03642169013619423\n      vector: -0.05149063095450401\n      vector: -0.029741328209638596\n      vector: -0.006867196410894394\n      vector: 0.01845487579703331\n      vector: -0.021184977144002914\n      vector: 0.024006590247154236\n      vector: 0.008449587970972061\n      vector: 0.00022699210967402905\n      vector: 0.010051043704152107\n      vector: 0.012239701114594936\n      vector: -0.023152479901909828\n      vector: -0.008426710031926632\n      vector: -0.025257252156734467\n      vector: 0.023518528789281845\n      vector: 0.049812912940979004\n      vector: -0.05570017173886299\n      vector: 0.008129296824336052\n      vector: -0.010859398171305656\n      vector: -0.017875300720334053\n      vector: 0.05426648631691933\n      vector: 0.023137228563427925\n      vector: 0.019400497898459435\n      vector: -0.033157769590616226\n      vector: -0.0289482269436121\n      vector: -0.004945449065417051\n      vector: -0.027743322774767876\n      vector: -0.03718428686261177\n      vector: -0.03562858700752258\n      vector: 0.051978692412376404\n      vector: 0.0008274190477095544\n      vector: 0.03935006633400917\n      vector: 0.023030465468764305\n      vector: 0.03181559592485428\n      vector: -0.004903506487607956\n      vector: 0.024052346125245094\n      vector: 0.011736386455595493\n      vector: -0.02917700633406639\n      vector: -0.023198235780000687\n      vector: 0.0406007282435894\n      vector: 0.001571905449964106\n      vector: -0.007286625448614359\n      vector: 0.004083713050931692\n      vector: -0.013299711979925632\n      vector: 0.014169074594974518\n      vector: 0.015282467938959599\n      vector: 0.03327978402376175\n      vector: -0.020330866798758507\n      vector: 0.009669745340943336\n      vector: 0.016533128917217255\n      vector: 0.028490668162703514\n      vector: -0.012933664955198765\n      vector: 0.0085258474573493\n      vector: 0.028002604842185974\n      vector: 0.009097795933485031\n      vector: -0.01969028450548649\n      vector: -0.026828203350305557\n      vector: -0.023610040545463562\n      vector: -0.020529143512248993\n      vector: -0.006360068917274475\n      vector: -0.014062310568988323\n      vector: 0.032395169138908386\n      vector: 0.07229430973529816\n      vector: -0.015923049300909042\n      vector: -0.019553016871213913\n      vector: 0.021200230345129967\n      vector: 0.05762191861867905\n      vector: 0.005067464895546436\n      vector: -0.02679770067334175\n      vector: -0.024540409445762634\n      vector: 0.02115447446703911\n      vector: -0.043651118874549866\n      vector: 0.029192257672548294\n      vector: -0.03873998671770096\n      vector: -0.019827552139759064\n      vector: -0.03633017838001251\n      vector: -0.03489649295806885\n      vector: -0.03819091618061066\n      vector: -0.004217167850583792\n      vector: -0.026706188917160034\n      vector: 0.03559808433055878\n      vector: -0.0070387814193964005\n      vector: -0.009379957802593708\n      vector: -0.02127648890018463\n      vector: 0.007839509285986423\n      vector: -0.003302050055935979\n      vector: 0.0213832538574934\n      vector: -0.01130933128297329\n      vector: 0.026767196133732796\n      vector: 0.028322895988821983\n      vector: -0.0036070893984287977\n      vector: -0.034926995635032654\n      vector: 0.02457091398537159\n      vector: -0.02267966978251934\n      vector: -0.013421728275716305\n      vector: 0.07693090289831161\n      vector: 0.021078214049339294\n      vector: -0.03062594309449196\n      vector: -0.05454102158546448\n      vector: 0.007549722213298082\n      vector: 0.014184325933456421\n      vector: 0.010561984963715076\n      vector: -0.02246614173054695\n      vector: -0.0033687774557620287\n      vector: -0.008731748908758163\n      vector: -0.016914427280426025\n      vector: -0.024372637271881104\n      vector: -0.016853420063853264\n      vector: 0.021352749317884445\n      vector: -0.020712167024612427\n      vector: -0.030503926798701286\n      vector: -0.01824134774506092\n      vector: 0.030336156487464905\n      vector: 0.03257819265127182\n      vector: 0.00938758347183466\n      vector: -0.014702892862260342\n      vector: -0.05261927470564842\n      vector: 0.014756274409592152\n      vector: -0.005456389859318733\n      vector: -0.022267866879701614\n      vector: 0.02824663743376732\n      vector: 0.03263920173048973\n      vector: 0.012788771651685238\n      vector: 0.0015414016088470817\n      vector: 0.02240513451397419\n      vector: 0.012559992261230946\n      vector: -0.027102738618850708\n      vector: -0.006752806715667248\n      vector: 0.020468134433031082\n      vector: -0.01569426991045475\n      vector: 0.011027169413864613\n      vector: -0.026584172621369362\n      vector: -0.028612684458494186\n      vector: 0.01731097884476185\n      vector: 0.004621345084160566\n      vector: -0.011812645941972733\n      vector: -0.016914427280426025\n      vector: -0.01699068769812584\n      vector: -0.005414447281509638\n      vector: -0.04618294537067413\n      vector: 0.004270549863576889\n      vector: 0.006264743860810995\n      vector: 0.021581528708338737\n      vector: 0.018912434577941895\n      vector: -0.008274190127849579\n      vector: 0.011111055500805378\n      vector: 0.005036960821598768\n      vector: -0.00726374750956893\n      vector: -0.03819091618061066\n      vector: 0.017509253695607185\n      vector: -0.06213650107383728\n      vector: -0.03459145501255989\n      vector: 0.03529304265975952\n      vector: -0.08907146751880646\n      vector: 0.02457091398537159\n      vector: -0.0443832129240036\n      vector: -0.017631269991397858\n      vector: -0.004362061619758606\n      vector: 0.017677025869488716\n      vector: -0.02862793579697609\n      vector: -0.0014746742090210319\n      vector: 0.0019284201553091407\n      vector: -0.04041770473122597\n      vector: 0.0016014561988413334\n      vector: 0.0009384723962284625\n      vector: -0.043498601764440536\n      vector: 0.05191768333315849\n      vector: 0.009501973167061806\n      vector: -0.007557347882539034\n      vector: 0.022222111001610756\n      vector: -0.016151828691363335\n      vector: -0.022969456389546394\n      vector: 0.004907319322228432\n      vector: 0.0368182398378849\n      vector: 0.0010685906745493412\n      vector: 0.018378615379333496\n      vector: -0.053930941969156265\n      vector: 0.010935657657682896\n      vector: -0.03941107541322708\n      vector: -0.01417670026421547\n      vector: 0.03349331393837929\n      vector: -0.04712856933474541\n      vector: -0.02045288309454918\n      vector: 0.008091166615486145\n      vector: 0.008312320336699486\n      vector: 0.006718489807099104\n      vector: -0.0023659609723836184\n      vector: 0.023503275588154793\n      vector: 0.010394212789833546\n      vector: 0.054419007152318954\n      vector: 0.016212837770581245\n      vector: -0.004255298059433699\n      vector: -0.019675033167004585\n      vector: -0.042674995958805084\n      vector: -0.0016310068313032389\n      vector: 0.060916341841220856\n      vector: -0.013414101675152779\n      vector: -0.025257252156734467\n      vector: 0.008457213640213013\n      vector: 0.05097206309437752\n      vector: -0.0319376103579998\n      vector: 0.04563387483358383\n      vector: -0.002089519053697586\n      vector: 2.931236849690322e-05\n      vector: -0.032334163784980774\n      vector: -0.015999309718608856\n      vector: 0.0053610652685165405\n      vector: -0.013063306920230389\n      vector: 0.022984709590673447\n      vector: -0.0335543192923069\n      vector: -0.002072360599413514\n      vector: -0.018790418282151222\n      vector: 0.06838980317115784\n      vector: -0.048958804458379745\n      vector: -0.012285456992685795\n      vector: 0.019400497898459435\n      vector: -0.018149835988879204\n      vector: -0.027362022548913956\n      vector: -0.03294423967599869\n      vector: -0.05810998007655144\n      vector: 0.0029264704789966345\n      vector: 0.030869973823428154\n      vector: 0.0026614677626639605\n      vector: -0.00990615040063858\n      vector: 0.008693619631230831\n      vector: -0.019736040383577347\n      vector: -0.03294423967599869\n      vector: -0.026599423959851265\n      vector: -0.03660471364855766\n      vector: -0.003843494923785329\n      vector: 0.020361371338367462\n      vector: 0.01662464067339897\n      vector: 0.00324104237370193\n      vector: 0.010028165765106678\n      vector: -0.004903506487607956\n      vector: 0.014840160496532917\n      vector: -0.018195591866970062\n      vector: 0.022496646270155907\n      vector: 0.0031876603607088327\n      vector: 0.10054094344377518\n      vector: -0.016167081892490387\n      vector: 0.004255298059433699\n      vector: 0.02066641114652157\n      vector: -0.03648269549012184\n      vector: 0.025516534224152565\n      vector: 0.03294423967599869\n      vector: -0.06832879781723022\n      vector: -0.008434335701167583\n      vector: 0.037580836564302444\n      vector: -0.03349331393837929\n      vector: 0.01851588301360607\n      vector: 0.02278643287718296\n      vector: 0.02701122686266899\n      vector: 0.03684874251484871\n      vector: -0.028719447553157806\n      vector: -0.031632572412490845\n      vector: 0.02110871858894825\n      vector: 0.037367310374975204\n      vector: -0.029466792941093445\n      vector: -0.0346524603664875\n      vector: -0.010012914426624775\n      vector: -0.029909100383520126\n      vector: -0.04901980981230736\n      vector: -0.07162322103977203\n      vector: 0.008014907129108906\n      vector: -0.007694615516811609\n      vector: 0.01792105659842491\n      vector: 0.004270549863576889\n      vector: 0.013574247248470783\n      vector: 0.00938758347183466\n      vector: -0.030320903286337852\n      vector: 0.021078214049339294\n      vector: 0.0006405824678950012\n      vector: 0.03935006633400917\n      vector: -0.031907107681035995\n      vector: -0.011866027489304543\n      vector: 0.006760432850569487\n      vector: 0.021139221265912056\n      vector: 0.001777807017788291\n      vector: -0.005864379927515984\n      vector: -0.004552711267024279\n      vector: -0.01139321643859148\n      vector: 0.010867023840546608\n      vector: -0.0357200987637043\n      vector: 0.00023068595328368247\n      vector: -0.01949200965464115\n      vector: -0.004407817497849464\n      vector: 0.0034736348316073418\n      vector: 0.00722561776638031\n      vector: 0.03852646052837372\n      vector: 0.03068695031106472\n      vector: 0.03718428686261177\n      vector: -0.017570262774825096\n      vector: -0.03015313297510147\n      vector: -0.014352098107337952\n      vector: 0.0019493915606290102\n      vector: 0.029405785724520683\n      vector: 0.0330052487552166\n      vector: 0.023838819935917854\n      vector: -0.025501282885670662\n      vector: 0.03042766824364662\n      vector: 0.010577237233519554\n      vector: 0.03642169013619423\n      vector: -0.04160735756158829\n      vector: 0.06899988651275635\n      vector: -0.020696913823485374\n      vector: -0.020483387634158134\n      vector: 0.059238627552986145\n      vector: -0.009105422534048557\n      vector: 0.01569426991045475\n      vector: -0.048958804458379745\n      vector: 0.04252247512340546\n      vector: 0.002129555447027087\n      vector: -0.02582157403230667\n      vector: 0.0012716324999928474\n      vector: 0.0002445080317556858\n      vector: -0.026995975524187088\n      vector: 0.0019560642540454865\n      vector: -0.021627284586429596\n      vector: -0.052588772028684616\n      vector: 0.0020971449557691813\n      vector: -0.022877944633364677\n      vector: -0.03349331393837929\n      vector: -0.028978731483221054\n      vector: -0.0213832538574934\n      vector: -0.021825559437274933\n      vector: 0.006722303107380867\n      vector: 0.004995018243789673\n      vector: 0.0020952385384589434\n      vector: 0.0027758574578911066\n      vector: 0.017738033086061478\n      vector: -0.05313784256577492\n      vector: 0.011919409967958927\n      vector: -0.010684000328183174\n      vector: -0.03306625783443451\n      vector: 0.02261866256594658\n      vector: -0.061404407024383545\n      vector: 0.028170377016067505\n      vector: -0.04752511903643608\n      vector: -0.037306301295757294\n      vector: 0.01731097884476185\n      vector: -0.03370684012770653\n      vector: -0.04420018941164017\n      vector: 0.03074795939028263\n      vector: 0.02533351071178913\n      vector: -0.002106677507981658\n      vector: 0.007008277345448732\n      vector: -0.030595438554883003\n      vector: 0.02905499003827572\n      vector: 0.0011419907677918673\n      vector: -0.061831459403038025\n      vector: 0.0248912051320076\n      vector: 0.05402245372533798\n      vector: 0.03053443133831024\n      vector: 0.021413756534457207\n      vector: 0.008602107875049114\n      vector: -0.012727763503789902\n      vector: -0.03074795939028263\n      vector: 0.03773335739970207\n      vector: -0.009951906278729439\n      vector: 0.0784561038017273\n      vector: -0.05118558928370476\n      vector: 0.039045028388500214\n      vector: 0.0284144077450037\n      vector: 0.038556963205337524\n      vector: -0.00828181579709053\n      vector: 0.04017367213964462\n      vector: -0.03629967197775841\n      vector: 0.024204866960644722\n      vector: 0.006123663391917944\n      vector: -0.029299022629857063\n      vector: 0.08815634995698929\n      vector: 0.013002298772335052\n      vector: 0.03297474607825279\n      vector: -0.04950787499547005\n      vector: -0.07613780349493027\n      vector: 0.02142900973558426\n      vector: 0.01439785398542881\n      vector: 0.03928905725479126\n      vector: -0.07430756837129593\n      vector: -0.02993960492312908\n      vector: -0.033096760511398315\n      vector: 0.04813519865274429\n      vector: 0.020986702293157578\n      vector: -0.024479402229189873\n      vector: -0.022801686078310013\n      vector: -0.03459145501255989\n      vector: 0.026263881474733353\n      vector: -0.024555660784244537\n      vector: -0.01694493182003498\n      vector: -0.0032029123976826668\n      vector: -0.04380363970994949\n      vector: 0.005471642129123211\n      vector: 0.029512548819184303\n      vector: -0.022816937416791916\n      vector: 0.011499980464577675\n      vector: -0.022328874096274376\n      vector: -0.007713680621236563\n      vector: 0.0346219576895237\n      vector: 0.011278826743364334\n      vector: 0.004754799883812666\n      vector: 0.005517398007214069\n      vector: 0.0011629621731117368\n      vector: 0.014725770801305771\n      vector: -0.07558873295783997\n      vector: -0.005849128123372793\n      vector: -0.0752226859331131\n      vector: -0.03489649295806885\n      vector: -0.030168384313583374\n      vector: 0.040021151304244995\n      vector: 0.01947675831615925\n      vector: 0.02370155230164528\n      vector: -0.019522514194250107\n      vector: 0.02393033169209957\n      vector: -0.019949568435549736\n      vector: 0.001818796619772911\n      vector: 0.021032458171248436\n      vector: -0.01830235682427883\n      vector: -0.021718796342611313\n      vector: -0.022969456389546394\n      vector: 0.018820922821760178\n      vector: 0.0009418087429367006\n      vector: -0.012674381956458092\n      vector: -0.04447472468018532\n      vector: 0.016700901091098785\n      vector: 0.02993960492312908\n      vector: 0.011683003976941109\n      vector: 0.0039045026060193777\n      vector: 0.006569783203303814\n      vector: 0.05069752782583237\n      vector: -0.004750986583530903\n      vector: 0.012659129686653614\n      vector: -0.007381950505077839\n      vector: -0.007488714065402746\n      vector: 0.004022705368697643\n      vector: -0.04227844253182411\n      vector: 0.022176355123519897\n      vector: 0.017982065677642822\n      vector: -0.07510066777467728\n      vector: -0.03489649295806885\n      vector: -0.03773335739970207\n      vector: 0.012537114322185516\n      vector: -0.06686460971832275\n      vector: -0.0029264704789966345\n      vector: 0.02873469889163971\n      vector: 0.01420720387250185\n      vector: -0.061892468482255936\n      vector: -0.06430228054523468\n      vector: 0.023686299100518227\n      vector: -0.06533940881490707\n      vector: -0.04334608092904091\n      vector: -0.04398666322231293\n      vector: 0.025150487199425697\n      vector: 0.017387239262461662\n      vector: -0.013597125187516212\n      vector: -0.015709523111581802\n      vector: -0.0019941942300647497\n      vector: -0.01361237745732069\n      vector: -0.024235369637608528\n      vector: -0.027789078652858734\n      vector: 0.03556757792830467\n      vector: 0.01212531141936779\n      vector: 0.0067680589854717255\n      vector: -0.00424767192453146\n      vector: -0.03148005157709122\n      vector: -0.012079555541276932\n      vector: -0.011484728194773197\n      vector: -0.011568614281713963\n      vector: 0.03660471364855766\n      vector: -0.012903161346912384\n      vector: 0.023854071274399757\n      vector: -0.04359011352062225\n      vector: 0.0085258474573493\n      vector: -0.01845487579703331\n      vector: -0.019461505115032196\n      vector: 0.0046442230232059956\n      vector: -0.033859360963106155\n      vector: 0.04020417481660843\n      vector: 0.052466753870248795\n      vector: -0.021688291803002357\n      vector: -0.032883234322071075\n      vector: -0.003811084432527423\n      vector: -0.02890247106552124\n      vector: -0.02321348898112774\n      vector: 0.004754799883812666\n      vector: -0.039045028388500214\n      vector: -0.0005995928077027202\n      vector: 0.0018092641839757562\n      vector: 0.1076788604259491\n      vector: -0.022588158026337624\n      vector: -0.03009212389588356\n      vector: 0.034988004714250565\n      vector: 0.006653669290244579\n      vector: -0.034988004714250565\n      vector: -0.0497824102640152\n      vector: 0.009753630496561527\n      vector: -0.006596474442631006\n      vector: -0.013505613431334496\n      vector: -0.05325985699892044\n      vector: 0.0013393131084740162\n      vector: -0.03102249465882778\n      vector: 0.0319376103579998\n      vector: -0.01214818935841322\n      vector: 0.000670609762892127\n      vector: 0.028277140110731125\n      vector: -0.02365579642355442\n      vector: -0.0010552452877163887\n      vector: -0.02603510208427906\n      vector: 0.07717493921518326\n      vector: -0.017555009573698044\n      vector: 0.024647172540426254\n      vector: -0.007366698235273361\n      vector: 0.021566277369856834\n      vector: 0.05527311563491821\n      vector: -0.024692928418517113\n      vector: 0.006489710416644812\n      vector: -0.0665595680475235\n      vector: 0.07217229157686234\n      vector: 0.05164314806461334\n      vector: 0.038678981363773346\n      vector: -0.007385763339698315\n      vector: 0.04682352766394615\n      vector: -0.028399156406521797\n      vector: -0.009471469558775425\n      vector: 0.022176355123519897\n      vector: 0.024204866960644722\n      vector: 0.04038719832897186\n      vector: -0.0197512935847044\n      vector: 0.05933013930916786\n      vector: 0.03816041350364685\n      vector: -0.0017844797112047672\n      vector: -0.01601456105709076\n      vector: -0.09480620920658112\n      vector: -0.05152113363146782\n      vector: 0.006890074349939823\n      vector: -0.027453534305095673\n      vector: 0.0032791721168905497\n      vector: 0.016639892011880875\n      vector: -0.02397608757019043\n      vector: 0.0022344125900417566\n      vector: -0.0023488022852689028\n      vector: -0.04615244269371033\n      vector: -0.004907319322228432\n      vector: -0.027621306478977203\n      vector: 0.04740310460329056\n      vector: -0.024692928418517113\n      vector: 0.0025909272953867912\n      num_dimensions: 1024\n    }\n  }\n}\n',f={description:"Translate complex data into numerical vector representations",sidebar_position:7},_="Embeddings",g={id:"api-guide/predict/embeddings",title:"Embeddings",description:"Translate complex data into numerical vector representations",source:"@site/docs/api-guide/predict/embeddings.md",sourceDirName:"api-guide/predict",slug:"/api-guide/predict/embeddings",permalink:"/api-guide/predict/embeddings",draft:!1,unlisted:!1,editUrl:"https://github.com/Clarifai/docs/blob/main/docs/api-guide/predict/embeddings.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{description:"Translate complex data into numerical vector representations",sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"Multimodal-to-Text",permalink:"/api-guide/predict/multimodal-to-text"},next:{title:"Prediction Parameters",permalink:"/api-guide/predict/prediction-parameters"}},b={},E=[{value:"Text Embeddings",id:"text-embeddings",level:2}];function T(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"embeddings",children:"Embeddings"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Translate complex data into numerical vector representations"})}),"\n",(0,o.jsx)("hr",{}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Input"}),": Text, images, or audio"]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Output"}),": Embeddings"]}),"\n",(0,o.jsx)(n.p,{children:"Embedding models, often referred to as embeddings or embedding vectors, allow you to convert complex data into vectors while preserving meaningful relationships between them."}),"\n",(0,o.jsx)(n.p,{children:"Embeddings are a powerful tool in the world of machine learning, acting as a bridge between complex data and the mathematical world that machine learning models operate in."}),"\n",(0,o.jsx)(n.p,{children:"Data lives in its own world. For example, text is a sequence of words, images are a grid of pixels, and audio is a wave of sound. These are all very different from the numbers that machine learning models use."}),"\n",(0,o.jsx)(n.p,{children:"Embedding models take these complex data types and transform them into numerical vectors. These vectors are like condensed summaries of the data, capturing its important aspects in a way that the model can understand."}),"\n",(0,o.jsx)(n.p,{children:"By using these vectors, machine learning models can now reason about the data, compare different pieces of information, and perform tasks like classification, similarity search, and prediction."}),"\n",(0,o.jsx)(n.admonition,{type:"info",children:(0,o.jsxs)(n.p,{children:["The initialization code used in the following examples is outlined in detail on the ",(0,o.jsx)(n.a,{href:"https://docs.clarifai.com/api-guide/api-overview/api-clients/#client-installation-instructions",children:"client installation page."})]})}),"\n","\n","\n","\n",(0,o.jsx)(n.h2,{id:"text-embeddings",children:"Text Embeddings"}),"\n",(0,o.jsxs)(n.p,{children:["Below is an example of how you would create text embeddings using the ",(0,o.jsx)(n.a,{href:"https://clarifai.com/cohere/embed/models/cohere-embed-english-v3_0",children:"Cohere Embed-v3"})," model."]}),"\n",(0,o.jsxs)(n.p,{children:["The Cohere Embed-v3 model requires an ",(0,o.jsx)(n.code,{children:"input_type"})," parameter to be specified, which can be set using one of the following values:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"search_document"})," (default): For texts (documents) intended to be stored in a vector database."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"search_query"}),": For search queries to find the most relevant documents in a vector database."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"classification"}),": If the embeddings are used as input for a classification system."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"clustering"}),": If the embeddings are used for text clustering."]}),"\n"]}),"\n",(0,o.jsxs)(c.A,{children:[(0,o.jsx)(v.A,{value:"python",label:"Python",children:(0,o.jsx)(a.A,{className:"language-python",children:s})}),(0,o.jsx)(v.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,o.jsx)(a.A,{className:"language-javascript",children:i})}),(0,o.jsx)(v.A,{value:"nodejs",label:"NodeJS",children:(0,o.jsx)(a.A,{className:"language-javascript",children:l})}),(0,o.jsx)(v.A,{value:"java",label:"Java",children:(0,o.jsx)(a.A,{className:"language-java",children:u})}),(0,o.jsx)(v.A,{value:"php",label:"PHP",children:(0,o.jsx)(a.A,{className:"language-php",children:d})}),(0,o.jsx)(v.A,{value:"curl",label:"cURL",children:(0,o.jsx)(a.A,{className:"language-bash",children:p})})]}),"\n",(0,o.jsxs)(t,{children:[(0,o.jsx)("summary",{children:"Text Output Example"}),(0,o.jsx)(a.A,{className:"language-text",children:h})]}),"\n",(0,o.jsxs)(t,{children:[(0,o.jsx)("summary",{children:"JSON Output Example"}),(0,o.jsx)(a.A,{className:"language-text",children:m})]})]})}function x(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(T,{...e})}):T(e)}},19365:(e,n,t)=>{t.d(n,{A:()=>v});t(96540);var o=t(18215);const r={tabItem:"tabItem_Ymn6"};var c=t(74848);function v(e){let{children:n,hidden:t,className:v}=e;return(0,c.jsx)("div",{role:"tabpanel",className:(0,o.A)(r.tabItem,v),hidden:t,children:n})}},11470:(e,n,t)=>{t.d(n,{A:()=>x});var o=t(96540),r=t(18215),c=t(23104),v=t(56347),a=t(205),s=t(57485),i=t(31682),l=t(70679);function u(e){return o.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,o.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function d(e){const{values:n,children:t}=e;return(0,o.useMemo)((()=>{const e=n??function(e){return u(e).map((e=>{let{props:{value:n,label:t,attributes:o,default:r}}=e;return{value:n,label:t,attributes:o,default:r}}))}(t);return function(e){const n=(0,i.X)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function p(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function h(e){let{queryString:n=!1,groupId:t}=e;const r=(0,v.W6)(),c=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,s.aZ)(c),(0,o.useCallback)((e=>{if(!c)return;const n=new URLSearchParams(r.location.search);n.set(c,e),r.replace({...r.location,search:n.toString()})}),[c,r])]}function m(e){const{defaultValue:n,queryString:t=!1,groupId:r}=e,c=d(e),[v,s]=(0,o.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const o=t.find((e=>e.default))??t[0];if(!o)throw new Error("Unexpected error: 0 tabValues");return o.value}({defaultValue:n,tabValues:c}))),[i,u]=h({queryString:t,groupId:r}),[m,f]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[r,c]=(0,l.Dv)(t);return[r,(0,o.useCallback)((e=>{t&&c.set(e)}),[t,c])]}({groupId:r}),_=(()=>{const e=i??m;return p({value:e,tabValues:c})?e:null})();(0,a.A)((()=>{_&&s(_)}),[_]);return{selectedValue:v,selectValue:(0,o.useCallback)((e=>{if(!p({value:e,tabValues:c}))throw new Error(`Can't select invalid tab value=${e}`);s(e),u(e),f(e)}),[u,f,c]),tabValues:c}}var f=t(92303);const _={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var g=t(74848);function b(e){let{className:n,block:t,selectedValue:o,selectValue:v,tabValues:a}=e;const s=[],{blockElementScrollPositionUntilNextRender:i}=(0,c.a_)(),l=e=>{const n=e.currentTarget,t=s.indexOf(n),r=a[t].value;r!==o&&(i(n),v(r))},u=e=>{let n=null;switch(e.key){case"Enter":l(e);break;case"ArrowRight":{const t=s.indexOf(e.currentTarget)+1;n=s[t]??s[0];break}case"ArrowLeft":{const t=s.indexOf(e.currentTarget)-1;n=s[t]??s[s.length-1];break}}n?.focus()};return(0,g.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":t},n),children:a.map((e=>{let{value:n,label:t,attributes:c}=e;return(0,g.jsx)("li",{role:"tab",tabIndex:o===n?0:-1,"aria-selected":o===n,ref:e=>s.push(e),onKeyDown:u,onClick:l,...c,className:(0,r.A)("tabs__item",_.tabItem,c?.className,{"tabs__item--active":o===n}),children:t??n},n)}))})}function E(e){let{lazy:n,children:t,selectedValue:r}=e;const c=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=c.find((e=>e.props.value===r));return e?(0,o.cloneElement)(e,{className:"margin-top--md"}):null}return(0,g.jsx)("div",{className:"margin-top--md",children:c.map(((e,n)=>(0,o.cloneElement)(e,{key:n,hidden:e.props.value!==r})))})}function T(e){const n=m(e);return(0,g.jsxs)("div",{className:(0,r.A)("tabs-container",_.tabList),children:[(0,g.jsx)(b,{...n,...e}),(0,g.jsx)(E,{...n,...e})]})}function x(e){const n=(0,f.A)();return(0,g.jsx)(T,{...e,children:u(e.children)},String(n))}}}]);
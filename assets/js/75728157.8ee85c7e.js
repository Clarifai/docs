"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[9991],{8215:function(e,n,o){var t=o(7294);n.Z=function(e){var n=e.children,o=e.hidden,s=e.className;return t.createElement("div",{role:"tabpanel",hidden:o,className:s},n)}},6396:function(e,n,o){o.d(n,{Z:function(){return c}});var t=o(7462),s=o(7294),r=o(2389),a=o(9443);var d=function(){var e=(0,s.useContext)(a.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},i=o(3616),l=o(6010),u="tabItem_vU9c";function p(e){var n,o,r,a=e.lazy,p=e.block,c=e.defaultValue,_=e.values,f=e.groupId,b=e.className,m=s.Children.map(e.children,(function(e){if((0,s.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),E=null!=_?_:m.map((function(e){var n=e.props;return{value:n.value,label:n.label,attributes:n.attributes}})),w=(0,i.lx)(E,(function(e,n){return e.value===n.value}));if(w.length>0)throw new Error('Docusaurus error: Duplicate values "'+w.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var h=null===c?c:null!=(n=null!=c?c:null==(o=m.find((function(e){return e.props.default})))?void 0:o.props.value)?n:null==(r=m[0])?void 0:r.props.value;if(null!==h&&!E.some((function(e){return e.value===h})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+h+'" but none of its children has the corresponding value. Available values are: '+E.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var I=d(),N=I.tabGroupChoices,O=I.setTabGroupChoices,D=(0,s.useState)(h),k=D[0],g=D[1],v=[],R=(0,i.o5)().blockElementScrollPositionUntilNextRender;if(null!=f){var M=N[f];null!=M&&M!==k&&E.some((function(e){return e.value===M}))&&g(M)}var T=function(e){var n=e.currentTarget,o=v.indexOf(n),t=E[o].value;t!==k&&(R(n),g(t),null!=f&&O(f,t))},S=function(e){var n,o=null;switch(e.key){case"ArrowRight":var t=v.indexOf(e.currentTarget)+1;o=v[t]||v[0];break;case"ArrowLeft":var s=v.indexOf(e.currentTarget)-1;o=v[s]||v[v.length-1]}null==(n=o)||n.focus()};return s.createElement("div",{className:"tabs-container"},s.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":p},b)},E.map((function(e){var n=e.value,o=e.label,r=e.attributes;return s.createElement("li",(0,t.Z)({role:"tab",tabIndex:k===n?0:-1,"aria-selected":k===n,key:n,ref:function(e){return v.push(e)},onKeyDown:S,onFocus:T,onClick:T},r,{className:(0,l.Z)("tabs__item",u,null==r?void 0:r.className,{"tabs__item--active":k===n})}),null!=o?o:n)}))),a?(0,s.cloneElement)(m.filter((function(e){return e.props.value===k}))[0],{className:"margin-vert--md"}):s.createElement("div",{className:"margin-vert--md"},m.map((function(e,n){return(0,s.cloneElement)(e,{key:n,hidden:e.props.value!==k})}))))}function c(e){var n=(0,r.Z)();return s.createElement(p,(0,t.Z)({key:String(n)},e))}},6314:function(e,n,o){o.r(n),o.d(n,{contentTitle:function(){return p},default:function(){return b},frontMatter:function(){return u},metadata:function(){return c},toc:function(){return _}});var t=o(7462),s=o(3366),r=(o(7294),o(3905)),a=o(6396),d=o(8215),i=o(9055),l=["components"],u={description:"Connect your models together.",sidebar_position:2},p="Input Nodes",c={unversionedId:"api-guide/workflows/input_nodes",id:"api-guide/workflows/input_nodes",title:"Input Nodes",description:"Connect your models together.",source:"@site/docs/api-guide/workflows/input_nodes.md",sourceDirName:"api-guide/workflows",slug:"/api-guide/workflows/input_nodes",permalink:"/docs-new/api-guide/workflows/input_nodes",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/api-guide/workflows/input_nodes.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{description:"Connect your models together.",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Base Workflows",permalink:"/docs-new/api-guide/workflows/base-workflows"},next:{title:"Setting Up Mesh Workflows",permalink:"/docs-new/api-guide/workflows/create-get-update-delete"}},_=[{value:"Supported Input and Output Types",id:"supported-input-and-output-types",children:[{value:"Inputs",id:"inputs",children:[],level:4},{value:"Outputs",id:"outputs",children:[],level:4}],level:2},{value:"The Building Blocks",id:"the-building-blocks",children:[{value:"Sample Workflow With Multiple Connected Nodes",id:"sample-workflow-with-multiple-connected-nodes",children:[],level:3},{value:"Suppressing the Output From Nodes",id:"suppressing-the-output-from-nodes",children:[],level:3}],level:2}],f={toc:_};function b(e){var n=e.components,o=(0,s.Z)(e,l);return(0,r.kt)("wrapper",(0,t.Z)({},f,o,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"input-nodes"},"Input Nodes"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Connect your models together")),(0,r.kt)("hr",null),(0,r.kt)("p",null,"The outputs from one model can be used as inputs for another model. This allows you to link together the models in a graph. Linking models helps you build sophisticated AI solutions that can zero-in on a specific use case."),(0,r.kt)("h2",{id:"supported-input-and-output-types"},"Supported Input and Output Types"),(0,r.kt)("p",null,"To view your available models, just open your application and click the ",(0,r.kt)("strong",{parentName:"p"},"Model Mode")," icon on the left-hand side of the screen. From here, just click the ",(0,r.kt)("strong",{parentName:"p"},"Create a Custom Model")," button on the top right-hand corner of the screen."),(0,r.kt)("p",null,"Different models accept different types of inputs and return different types of outputs. They are named after the fields in the Data object of our API. This object uses inputs, annotations, models, and workflows. "),(0,r.kt)("p",null,"Some examples include:"),(0,r.kt)("h4",{id:"inputs"},"Inputs"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Concepts"),(0,r.kt)("li",{parentName:"ul"},"Embeddings"),(0,r.kt)("li",{parentName:"ul"},"Image"),(0,r.kt)("li",{parentName:"ul"},"Image or video"),(0,r.kt)("li",{parentName:"ul"},"Regions")),(0,r.kt)("h4",{id:"outputs"},"Outputs"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Concepts"),(0,r.kt)("li",{parentName:"ul"},"Clusters"),(0,r.kt)("li",{parentName:"ul"},"Regions")),(0,r.kt)("h2",{id:"the-building-blocks"},"The Building Blocks"),(0,r.kt)("p",null,"You can create workflows out of any Clarifai Models or custom models that you have created for your app. The inputs and outputs supported by your custom models will depend on the inputs and outputs supported by the Clarifai Models, or model templates that you have used to build them."),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"The initialization code used in the following examples is outlined in detail on the ",(0,r.kt)("a",{parentName:"p",href:"../api-overview/api-clients#client-installation-instructions"},"client installation page.")))),(0,r.kt)("h3",{id:"sample-workflow-with-multiple-connected-nodes"},"Sample Workflow With Multiple Connected Nodes"),(0,r.kt)("p",null,"The following is an example of how to build a workflow with multiple connected nodes. Note that model IDs and model version IDs from the public ",(0,r.kt)("inlineCode",{parentName:"p"},"clarifai/main")," application are fixed, so they are already hard-coded in the code examples below. It is possible to use other public model or model version IDs."),(0,r.kt)(a.Z,{mdxType:"Tabs"},(0,r.kt)(d.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,r.kt)(i.Z,{className:"language-python",mdxType:"CodeBlock"},"###################################################################################\n# In this section, we set the user authentication, app ID, and the details of the \n# workflow we want to build. Change these strings to run your own example.\n##################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to build your own workflow with multiple connected nodes\n# Note that we've also added as comments the values of most of these variables against their names in the code below\n\nWORKFLOW_ID = 'auto-annotation-workflow-id'\nNODE_ID_1 = 'general-embed'\nMODEL_ID_1 = 'bbb5f41425b8468d9b7a554ff10f8581'\nMODEL_VERSION_ID_1 = 'bb186755eda04f9cbb6fe32e816be104'\n\nNODE_ID_2 = 'general-concept'\nMODEL_ID_2 = 'aaa03c23b3724a16a56b629203edc62c'\nMODEL_VERSION_ID_2 = 'aa7f35c01e0642fda5cf400f543e7c40'\n\nNODE_ID_3 = 'general-cluster'\nMODEL_ID_3 = 'cccbe437d6e54e2bb911c6aa292fb072'\nMODEL_VERSION_ID_3 = 'cc2074cff6dc4c02b6f4e1b8606dcb54'\n\nNODE_ID_4 = 'mapper'\nSYNONYM_MODEL_ID = 'YOUR_SYNONYM_MODEL_ID'\nSYNONYM_MODEL_VERSION_ID = 'YOUR_SYNONYM_MODEL_VERSION_ID'\n\nNODE_ID_5 = 'greater-than'\nGREATER_THAN_MODEL_ID = 'YOUR_GREATER_THAN_MODEL_ID'\nGREATER_THAN_MODEL_VERSION_ID = 'YOUR_GREATER_THAN_MODEL_VERSION_ID'\n\nNODE_ID_6 = 'less-than'\nLESS_THAN_MODEL_ID = 'YOUR_LESS_THAN_MODEL_ID'\nLESS_THAN_MODEL_VERSION_ID = 'YOUR_LESS_THAN_MODEL_VERSION_ID'\n\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID) # The userDataObject is required when using a PAT\n\npost_workflows_response = stub.PostWorkflows(\n    service_pb2.PostWorkflowsRequest(\n        user_app_id=userDataObject,  \n        workflows=[\n            resources_pb2.Workflow(\n                id=WORKFLOW_ID, # auto-annotation-workflow-id\n                nodes=[\n                    resources_pb2.WorkflowNode(\n                        id=NODE_ID_1, # general-embed\n                        model=resources_pb2.Model(\n                            id=MODEL_ID_1, # bbb5f41425b8468d9b7a554ff10f8581\n                            model_version=resources_pb2.ModelVersion(\n                                id=MODEL_VERSION_ID_1 # bb186755eda04f9cbb6fe32e816be104\n                            )\n                        )\n                    ),\n                    resources_pb2.WorkflowNode(\n                        id=NODE_ID_2, # general-concept\n                        model=resources_pb2.Model(\n                            id=MODEL_ID_2, # aaa03c23b3724a16a56b629203edc62c\n                            model_version=resources_pb2.ModelVersion(\n                                id=MODEL_VERSION_ID_2 # aa7f35c01e0642fda5cf400f543e7c40\n                            )\n                        )\n                    ),\n                    resources_pb2.WorkflowNode(\n                        id=NODE_ID_3, # general-cluster\n                        model=resources_pb2.Model(\n                            id=MODEL_ID_3, # cccbe437d6e54e2bb911c6aa292fb072\n                            model_version=resources_pb2.ModelVersion(\n                                id=MODEL_VERSION_ID_3 # cc2074cff6dc4c02b6f4e1b8606dcb54\n                            )\n                        ),\n                        node_inputs=[\n                            resources_pb2.NodeInput(node_id=NODE_ID_1) # general-embed\n                        ]\n                    ),\n                    resources_pb2.WorkflowNode(\n                        id=NODE_ID_4, # mapper\n                        model=resources_pb2.Model(\n                            id=SYNONYM_MODEL_ID,\n                            model_version=resources_pb2.ModelVersion(\n                                id=SYNONYM_MODEL_VERSION_ID\n                            )\n                        ),\n                        node_inputs=[\n                            resources_pb2.NodeInput(node_id=NODE_ID_2) # general-concept\n                        ]\n                    ),\n                    resources_pb2.WorkflowNode(\n                        id=NODE_ID_5, # greater-than\n                        model=resources_pb2.Model(\n                            id=GREATER_THAN_MODEL_ID,\n                            model_version=resources_pb2.ModelVersion(\n                                id=GREATER_THAN_MODEL_VERSION_ID\n                            )\n                        ),\n                        node_inputs=[\n                            resources_pb2.NodeInput(node_id=NODE_ID_4) # mapper\n                        ]\n                    ),\n                    resources_pb2.WorkflowNode(\n                        id=NODE_ID_6, # less-than\n                        model=resources_pb2.Model(\n                            id=LESS_THAN_MODEL_ID,\n                            model_version=resources_pb2.ModelVersion(\n                                id=LESS_THAN_MODEL_VERSION_ID\n                            )\n                        ),\n                        node_inputs=[\n                            resources_pb2.NodeInput(node_id=NODE_ID_4) # mapper\n                        ]\n                    ),\n                ]\n            )\n        ]\n    ),\n    metadata=metadata\n)       \n\nif post_workflows_response.status.code != status_code_pb2.SUCCESS:\n    print(post_workflows_response.status)\n    raise Exception(\"Post workflows failed, status: \" + post_workflows_response.status.description) \n")),(0,r.kt)(d.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nMultiWorkflowResponse postWorkflowsResponse = stub.postWorkflows(\n  PostWorkflowsRequest.newBuilder()\n      .setUserAppId(UserAppIDSet.newBuilder().setAppId("{YOUR_APP_ID}"))\n      .addWorkflows(\n          Workflow.newBuilder()\n              .setId("auto-annotation-workflow-id")\n              .addNodes(\n                  WorkflowNode.newBuilder()\n                      .setId("general-embed")\n                      .setModel(\n                          Model.newBuilder()\n                              .setId("bbb5f41425b8468d9b7a554ff10f8581")\n                              .setModelVersion(\n                                  ModelVersion.newBuilder()\n                                      .setId("bb186755eda04f9cbb6fe32e816be104")\n                              )\n                      )\n              )\n              .addNodes(\n                  WorkflowNode.newBuilder()\n                      .setId("general-concept")\n                      .setModel(\n                          Model.newBuilder()\n                              .setId("aaa03c23b3724a16a56b629203edc62c")\n                              .setModelVersion(\n                                  ModelVersion.newBuilder()\n                                      .setId("aa7f35c01e0642fda5cf400f543e7c40")\n                              )\n                      )\n              )\n              .addNodes(\n                  WorkflowNode.newBuilder()\n                      .setId("general-cluster")\n                      .setModel(\n                          Model.newBuilder()\n                              .setId("cccbe437d6e54e2bb911c6aa292fb072")\n                              .setModelVersion(\n                                  ModelVersion.newBuilder()\n                                      .setId("cc2074cff6dc4c02b6f4e1b8606dcb54")\n                              )\n                      )\n              )\n              .addNodes(\n                  WorkflowNode.newBuilder()\n                      .setId("mapper")\n                      .setModel(\n                          Model.newBuilder()\n                              .setId("synonym-model-id")\n                              .setModelVersion(\n                                  ModelVersion.newBuilder()\n                                      .setId("{YOUR_SYNONYM_MODEL_VERSION_ID}")\n                              )\n                      )\n                      .addNodeInputs(NodeInput.newBuilder().setNodeId("general-concept"))\n              )\n              .addNodes(\n                  WorkflowNode.newBuilder()\n                      .setId("greater-than")\n                      .setModel(\n                          Model.newBuilder()\n                              .setId("greater-than-model-id")\n                              .setModelVersion(\n                                  ModelVersion.newBuilder()\n                                      .setId("{YOUR_GREATER_THAN_MODEL_VERSION_ID}")\n                              )\n                      )\n                      .addNodeInputs(NodeInput.newBuilder().setNodeId("mapper"))\n              )\n              .addNodes(\n                  WorkflowNode.newBuilder()\n                      .setId("less-than")\n                      .setModel(\n                          Model.newBuilder()\n                              .setId("less-than-model-id")\n                              .setModelVersion(\n                                  ModelVersion.newBuilder()\n                                      .setId("{YOUR_LESS_THAN_MODEL_VERSION_ID}")\n                              )\n                      )\n                      .addNodeInputs(NodeInput.newBuilder().setNodeId("mapper"))\n              )\n      )\n      .build()\n);\n\nif (postWorkflowsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n    throw new RuntimeException("Post workflows failed, status: " + postWorkflowsResponse.getStatus());\n}\n'))),(0,r.kt)(d.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nstub.PostWorkflows(\n    {\n        user_app_id: {\n            app_id: "e83440590d104cee97ef84af1856837d"\n        },\n        workflows: [\n            {\n                id: "auto-annotation-workflow-id",\n                nodes: [\n                    {\n                        id: "general-embed",\n                        model: {\n                            id: "bbb5f41425b8468d9b7a554ff10f8581",\n                            model_version: {\n                                id: "bb186755eda04f9cbb6fe32e816be104"\n                            }\n                        }\n                    },\n                    {\n                        id: "general-concept",\n                        model: {\n                            id: "aaa03c23b3724a16a56b629203edc62c",\n                            model_version: {\n                                id: "aa7f35c01e0642fda5cf400f543e7c40"\n                            }\n                        }\n                    },\n                    {\n                        id: "general-cluster",\n                        model: {\n                            id: "cccbe437d6e54e2bb911c6aa292fb072",\n                            model_version: {\n                                id: "cc2074cff6dc4c02b6f4e1b8606dcb54"\n                            }\n                        }\n                    },\n                    {\n                        id: "mapper",\n                        model: {\n                            id: "synonym-model-id",\n                            model_version: {\n                                id: "{YOUR_SYNONYM_MODEL_VERSION_ID}"\n                            }\n                        },\n                        node_inputs: [\n                            {node_id: "general-concept"}\n                        ]\n                    },\n                    {\n                        id: "greater-than",\n                        model: {\n                            id: "greater-than-model-id",\n                            model_version: {\n                                id: "{YOUR_GREATER_THAN_MODEL_VERSION_ID}"\n                            }\n                        },\n                        node_inputs: [\n                            {node_id: "mapper"}\n                        ]\n                    },\n                    {\n                        id: "less-than",\n                        model: {\n                            id: "less-than-model-id",\n                            model_version: {\n                                id: "{YOUR_LESS_THAN_MODEL_VERSION_ID}"\n                            }\n                        },\n                        node_inputs: [\n                            {node_id: "mapper"}\n                        ]\n                    },\n                ]\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            console.log(response.status);\n            throw new Error("Post workflows failed, status: " + response.status.description);\n        }\n    }\n);\n'))),(0,r.kt)(d.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST \'https://api.clarifai.com/v2/users/me/apps/{{app}}/workflows\' \\\n    -H \'Authorization: Key {{PAT}}\' \\\n    -H \'Content-Type: application/json\' \\\n    --data-raw \'{\n        "workflows": [\n            {\n                "id": "auto-annotation-workflow-id",\n                "nodes": [\n                    {\n                        "id": "general-embed",\n                        "model": {\n                            "id": "{YOUR_GENERAL_EMBED_MODEL_ID}",\n                            "model_version": {\n                                "id": "{YOUR_GENERAL_EMBED_MODEL_VERSION_ID}"\n                            }\n                        }\n                    },\n                    {\n                        "id": "general-concept",\n                        "model": {\n                            "id": "{YOUR_GENERAL_CONCEPT_MODEL_ID}",\n                            "model_version": {\n                                "id": "{YOUR_GENERAL_CONCEPT_MODEL_VERSION_ID}"\n                            }\n                        }\n                    },\n                    {\n                        "id": "general-cluster",\n                        "model": {\n                            "id": "{YOUR_GENERAL_CLUSTER_MODEL_ID}",\n                            "model_version": {\n                                "id": "{YOUR_GENERAL_CLUSTER_MODEL_VERSION_ID}"\n                            }\n                        }\n                    },\n                    {\n                        "id": "mapper",\n                        "model": {\n                            "id": "synonym-model-id",\n                            "model_version": {\n                                "id": "{YOUR_MAPPER_MODEL_VERSION_ID}"\n                            }\n                        },\n                        "node_inputs": [\n                            {\n                                "node_id": "general-concept"\n                            }\n                        ]\n                    },\n                    {\n                        "id": "greater-than",\n                        "model": {\n                            "id": "greater-than-model-id",\n                            "model_version": {\n                                "id": "{YOUR_GREATER_THAN_MODEL_VERSION_ID}"\n                            }\n                        },\n                        "node_inputs": [\n                            {\n                                "node_id": "mapper"\n                            }\n                        ]\n                    },\n                    {\n                        "id": "less-than",\n                        "model": {\n                            "id": "less-than-model-id",\n                            "model_version": {\n                                "id": "{YOUR_LESS_THAN_MODEL_VERSION_ID}"\n                            }\n                        },\n                        "node_inputs": [\n                            {\n                                "node_id": "mapper"\n                            }\n                        ]\n                    },\n                ]\n            }\n        ]\n    }\'\n'))),(0,r.kt)(d.Z,{value:"js_rest",label:"Javascript (REST)",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'const raw = JSON.stringify({\n  "user_app_id": {\n        "user_id": "{YOUR_USER_ID}",\n        "app_id": "{YOUR_APP_ID}"\n    },\n  "workflows": [\n      {\n          "id": "auto-annotation-workflow-id",\n          "nodes": [\n              {\n                  "id": "general-embed",\n                  "model": {\n                      "id": "{YOUR_GENERAL_EMBED_MODEL_ID}",\n                      "model_version": {\n                          "id": "{YOUR_GENERAL_EMBED_MODEL_VERSION_ID}"\n                      }\n                  }\n              },\n              {\n                  "id": "general-concept",\n                  "model": {\n                      "id": "{YOUR_GENERAL_CONCEPT_MODEL_ID}",\n                      "model_version": {\n                          "id": "{YOUR_GENERAL_CONCEPT_MODEL_VERSION_ID}"\n                      }\n                  }\n              },\n              {\n                  "id": "general-cluster",\n                  "model": {\n                      "id": "{YOUR_GENERAL_CLUSTER_MODEL_ID}",\n                      "model_version": {\n                          "id": "{YOUR_GENERAL_CLUSTER_MODEL_VERSION_ID}"\n                      }\n                  }\n              },\n              {\n                  "id": "mapper",\n                  "model": {\n                      "id": "synonym-model-id",\n                      "model_version": {\n                          "id": "{YOUR_MAPPER_MODEL_VERSION_ID}"\n                      }\n                  },\n                  "node_inputs": [\n                      {\n                          "node_id": "general-concept"\n                      }\n                  ]\n              },\n              {\n                  "id": "greater-than",\n                  "model": {\n                      "id": "greater-than-model-id",\n                      "model_version": {\n                          "id": "{YOUR_GREATER_THAN_MODEL_VERSION_ID}"\n                      }\n                  },\n                  "node_inputs": [\n                      {\n                          "node_id": "mapper"\n                      }\n                  ]\n              },\n              {\n                  "id": "less-than",\n                  "model": {\n                      "id": "less-than-model-id",\n                      "model_version": {\n                          "id": "{YOUR_LESS_THAN_MODEL_VERSION_ID}"\n                      }\n                  },\n                  "node_inputs": [\n                      {\n                          "node_id": "mapper"\n                      }\n                  ]\n              },\n          ]\n      }\n  ]\n});\n\nconst requestOptions = {\n  method: \'POST\',\n  headers: {\n    \'Accept\': \'application/json\',\n    \'Authorization\': \'Key {YOUR_PERSONAL_TOKEN}\'\n  },\n    body: raw\n};\n\nfetch(`https://api.clarifai.com/v2/workflows`, requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log(\'error\', error));\n')))),(0,r.kt)("h3",{id:"suppressing-the-output-from-nodes"},"Suppressing the Output From Nodes"),(0,r.kt)("p",null,"It is possible to turn the outputs from given nodes in your workflow on and off with the ",(0,r.kt)("inlineCode",{parentName:"p"},"suppress_output")," endpoint. This can be helpful when you want to hide outputs for expensive return values like image crops or embedding."),(0,r.kt)("p",null,"By default, this endpoint will be set to false, meaning that we do not suppress any model's output."),(0,r.kt)(a.Z,{mdxType:"Tabs"},(0,r.kt)(d.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,r.kt)(i.Z,{className:"language-python",mdxType:"CodeBlock"},"###################################################################################\n# In this section, we set the user authentication, app ID, and the details of the \n# nodes to suppress their outputs. Change these strings to run your own example.\n##################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to suppress the outputs of your own nodes\nWORKFLOW_ID = 'predict-cluster-only'\nNODE_ID_1 = 'general-embed'\nMODEL_ID_1 = 'bbb5f41425b8468d9b7a554ff10f8581'\nMODEL_VERSION_ID_1 = 'bb186755eda04f9cbb6fe32e816be104'\n\nNODE_ID_2 = 'general-cluster'\nMODEL_ID_2 = 'cccbe437d6e54e2bb911c6aa292fb072'\nMODEL_VERSION_ID_2 = 'cc2074cff6dc4c02b6f4e1b8606dcb54'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID) # The userDataObject is required when using a PAT\n\npost_workflows_response = stub.PostWorkflows(\n    service_pb2.PostWorkflowsRequest(\n        user_app_id=userDataObject,  \n        workflows=[\n            resources_pb2.Workflow(\n                id=WORKFLOW_ID,\n                nodes=[\n                    resources_pb2.WorkflowNode(\n                        id=NODE_ID_1,\n                        model=resources_pb2.Model(\n                            id=MODEL_ID_1,\n                            model_version=resources_pb2.ModelVersion(\n                                id=MODEL_VERSION_ID_1\n                            )\n                        ),\n                        suppress_output = True                      \n                    ),\n                    resources_pb2.WorkflowNode(\n                        id=NODE_ID_2,\n                        model=resources_pb2.Model(\n                            id=MODEL_ID_2,\n                            model_version=resources_pb2.ModelVersion(\n                                id=MODEL_VERSION_ID_2\n                            )\n                        ),\n                        node_inputs=[\n                            resources_pb2.NodeInput(node_id=NODE_ID_1)\n                        ]\n                    ),\n                ]\n            )\n        ]\n    ),\n    metadata=metadata\n)\n                         \n\nif post_workflows_response.status.code != status_code_pb2.SUCCESS:\n    print(post_workflows_response.status)\n    raise Exception(\"Post workflows failed, status: \" + post_workflows_response.status.description) \n")),(0,r.kt)(d.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nMultiWorkflowResponse postWorkflowsResponse = stub.postWorkflows(\n  PostWorkflowsRequest.newBuilder()\n      .setUserAppId(UserAppIDSet.newBuilder().setAppId("{YOUR_APP_ID}"))\n      .addWorkflows(\n          Workflow.newBuilder()\n              .setId("auto-annotation-workflow-id")\n              .addNodes(\n                  WorkflowNode.newBuilder()\n                      .setId("general-embed")\n                      .setModel(\n                          Model.newBuilder()\n                              .setId("bbb5f41425b8468d9b7a554ff10f8581")\n                              .setModelVersion(\n                                  ModelVersion.newBuilder()\n                                      .setId("bb186755eda04f9cbb6fe32e816be104")\n                              )\n                      )\n              )\n              .addNodes(\n                  WorkflowNode.newBuilder()\n                      .setId("general-cluster")\n                      .setModel(\n                          Model.newBuilder()\n                              .setId("cccbe437d6e54e2bb911c6aa292fb072")\n                              .setModelVersion(\n                                  ModelVersion.newBuilder()\n                                      .setId("cc2074cff6dc4c02b6f4e1b8606dcb54")\n                              )\n                      )\n                      .addNodeInputs(NodeInput.newBuilder().setNodeId("general-cluster"))\n              )\n      )\n      .build()\n);\n\nif (postWorkflowsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n    throw new RuntimeException("Post workflows failed, status: " + postWorkflowsResponse.getStatus());\n}\n'))),(0,r.kt)(d.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nstub.PostWorkflows(\n    {\n        user_app_id: {\n            app_id: "{YOUR_APP_ID}"\n        },\n        workflows: [\n            {\n                id: "predict-cluster-only",\n                nodes: [\n                    {\n                        id: "general-embed",\n                        model: {\n                            id: "bbb5f41425b8468d9b7a554ff10f8581",\n                            model_version: {\n                                id: "bb186755eda04f9cbb6fe32e816be104"\n                            }\n                        }\n                        suppress_output: true;\n                    },                  \n                    {\n                        id: "general-cluster",\n                        model: {\n                            id: "cccbe437d6e54e2bb911c6aa292fb072",\n                            model_version: {\n                                id: "cc2074cff6dc4c02b6f4e1b8606dcb54"\n                            }\n                        },\n                        node_inputs: [\n                            {node_id: "mapper"}\n                        ]\n                    },\n                ]\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            console.log(response.status);\n            throw new Error("Post workflows failed, status: " + response.status.description);\n        }\n    }\n);\n'))),(0,r.kt)(d.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'POST /v2/workflows HTTP/1.1\nHost: https://api-dev.clarifai.com\nContent-Type: application/json\nAuthorization: Key f897095e22b144f482b9a13a2151e5bd\n\n{\n  "workflows": [\n    {\n      "id": "predict-cluster-only",\n      "nodes": [\n        {\n          "id": "general-embed",\n          "model": {\n            "id": "bbb5f41425b8468d9b7a554ff10f8581",\n            "model_version": {\n              "id": "bb186755eda04f9cbb6fe32e816be104"\n            }\n          },\n          "suppress_output": true\n        },\n        {\n          "id": "general-cluster",\n          "node_inputs": [\n            {\n              "node_id": "general-embed"\n            }\n          ],\n          "model": {\n            "id": "cccbe437d6e54e2bb911c6aa292fb072",\n            "model_version": {\n              "id": "cc2074cff6dc4c02b6f4e1b8606dcb54"\n            }\n          }\n        }\n      ]\n    }\n  ]\n}\n'))),(0,r.kt)(d.Z,{value:"js_rest",label:"Javascript (REST)",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'const raw = JSON.stringify({\n  "user_app_id": {\n        "user_id": "{YOUR_USER_ID}",\n        "app_id": "{YOUR_APP_ID}"\n    },\n  "workflows": [\n    {\n      "id": "predict-cluster-only",\n      "nodes": [\n        {\n          "id": "general-embed",\n          "model": {\n            "id": "bbb5f41425b8468d9b7a554ff10f8581",\n            "model_version": {\n              "id": "bb186755eda04f9cbb6fe32e816be104"\n            }\n          },\n          "suppress_output": true\n        },\n        {\n          "id": "general-cluster",\n          "node_inputs": [\n            {\n              "node_id": "general-embed"\n            }\n          ],\n          "model": {\n            "id": "cccbe437d6e54e2bb911c6aa292fb072",\n            "model_version": {\n              "id": "cc2074cff6dc4c02b6f4e1b8606dcb54"\n            }\n          }\n        }\n      ]\n    }\n  ]\n});\n\nconst requestOptions = {\n  method: \'POST\',\n  headers: {\n    \'Accept\': \'application/json\',\n    \'Authorization\': \'Key {YOUR_PERSONAL_TOKEN}\'\n  },\n    body: raw\n};\n\nfetch(`https://api.clarifai.com/v2/workflows`, requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log(\'error\', error));\n')))))}b.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[3780],{3905:function(n,e,t){t.d(e,{Zo:function(){return u},kt:function(){return d}});var a=t(7294);function s(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function o(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,a)}return t}function r(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?o(Object(t),!0).forEach((function(e){s(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function i(n,e){if(null==n)return{};var t,a,s=function(n,e){if(null==n)return{};var t,a,s={},o=Object.keys(n);for(a=0;a<o.length;a++)t=o[a],e.indexOf(t)>=0||(s[t]=n[t]);return s}(n,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(a=0;a<o.length;a++)t=o[a],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(s[t]=n[t])}return s}var c=a.createContext({}),p=function(n){var e=a.useContext(c),t=e;return n&&(t="function"==typeof n?n(e):r(r({},e),n)),t},u=function(n){var e=p(n.components);return a.createElement(c.Provider,{value:e},n.children)},l={inlineCode:"code",wrapper:function(n){var e=n.children;return a.createElement(a.Fragment,{},e)}},h=a.forwardRef((function(n,e){var t=n.components,s=n.mdxType,o=n.originalType,c=n.parentName,u=i(n,["components","mdxType","originalType","parentName"]),h=p(t),d=s,m=h["".concat(c,".").concat(d)]||h[d]||l[d]||o;return t?a.createElement(m,r(r({ref:e},u),{},{components:t})):a.createElement(m,r({ref:e},u))}));function d(n,e){var t=arguments,s=e&&e.mdxType;if("string"==typeof n||s){var o=t.length,r=new Array(o);r[0]=h;var i={};for(var c in e)hasOwnProperty.call(e,c)&&(i[c]=e[c]);i.originalType=n,i.mdxType="string"==typeof n?n:s,r[1]=i;for(var p=2;p<o;p++)r[p]=t[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}h.displayName="MDXCreateElement"},8215:function(n,e,t){var a=t(7294);e.Z=function(n){var e=n.children,t=n.hidden,s=n.className;return a.createElement("div",{role:"tabpanel",hidden:t,className:s},e)}},6396:function(n,e,t){t.d(e,{Z:function(){return h}});var a=t(7462),s=t(7294),o=t(2389),r=t(9443);var i=function(){var n=(0,s.useContext)(r.Z);if(null==n)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return n},c=t(3616),p=t(6010),u="tabItem_vU9c";function l(n){var e,t,o,r=n.lazy,l=n.block,h=n.defaultValue,d=n.values,m=n.groupId,f=n.className,g=s.Children.map(n.children,(function(n){if((0,s.isValidElement)(n)&&void 0!==n.props.value)return n;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof n.type?n.type:n.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),_=null!=d?d:g.map((function(n){var e=n.props;return{value:e.value,label:e.label,attributes:e.attributes}})),b=(0,c.lx)(_,(function(n,e){return n.value===e.value}));if(b.length>0)throw new Error('Docusaurus error: Duplicate values "'+b.map((function(n){return n.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var y=null===h?h:null!=(e=null!=h?h:null==(t=g.find((function(n){return n.props.default})))?void 0:t.props.value)?e:null==(o=g[0])?void 0:o.props.value;if(null!==y&&!_.some((function(n){return n.value===y})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+y+'" but none of its children has the corresponding value. Available values are: '+_.map((function(n){return n.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var v=i(),S=v.tabGroupChoices,w=v.setTabGroupChoices,k=(0,s.useState)(y),R=k[0],A=k[1],T=[],I=(0,c.o5)().blockElementScrollPositionUntilNextRender;if(null!=m){var N=S[m];null!=N&&N!==R&&_.some((function(n){return n.value===N}))&&A(N)}var O=function(n){var e=n.currentTarget,t=T.indexOf(e),a=_[t].value;a!==R&&(I(e),A(a),null!=m&&w(m,a))},P=function(n){var e,t=null;switch(n.key){case"ArrowRight":var a=T.indexOf(n.currentTarget)+1;t=T[a]||T[0];break;case"ArrowLeft":var s=T.indexOf(n.currentTarget)-1;t=T[s]||T[T.length-1]}null==(e=t)||e.focus()};return s.createElement("div",{className:"tabs-container"},s.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,p.Z)("tabs",{"tabs--block":l},f)},_.map((function(n){var e=n.value,t=n.label,o=n.attributes;return s.createElement("li",(0,a.Z)({role:"tab",tabIndex:R===e?0:-1,"aria-selected":R===e,key:e,ref:function(n){return T.push(n)},onKeyDown:P,onFocus:O,onClick:O},o,{className:(0,p.Z)("tabs__item",u,null==o?void 0:o.className,{"tabs__item--active":R===e})}),null!=t?t:e)}))),r?(0,s.cloneElement)(g.filter((function(n){return n.props.value===R}))[0],{className:"margin-vert--md"}):s.createElement("div",{className:"margin-vert--md"},g.map((function(n,e){return(0,s.cloneElement)(n,{key:e,hidden:n.props.value!==R})}))))}function h(n){var e=(0,o.Z)();return s.createElement(l,(0,a.Z)({key:String(e)},n))}},9333:function(n,e,t){t.r(e),t.d(e,{frontMatter:function(){return p},contentTitle:function(){return u},metadata:function(){return l},toc:function(){return h},default:function(){return m}});var a=t(7462),s=t(3366),o=(t(7294),t(3905)),r=t(6396),i=t(8215),c=["components"],p={description:"Search your data based on concepts or visual similarity",sidebar_position:4},u="Rank",l={unversionedId:"api-guide/search/rank",id:"api-guide/search/rank",title:"Rank",description:"Search your data based on concepts or visual similarity",source:"@site/docs/api-guide/search/rank.md",sourceDirName:"api-guide/search",slug:"/api-guide/search/rank",permalink:"/api-guide/search/rank",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/api-guide/search/rank.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{description:"Search your data based on concepts or visual similarity",sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Filter",permalink:"/api-guide/search/filter"},next:{title:"Index Images for Search",permalink:"/api-guide/search/index-images-for-search"}},h=[{value:"Search By Concepts",id:"search-by-concepts",children:[{value:"By clarifai/main App Concepts",id:"by-clarifaimain-app-concepts",children:[],level:3},{value:"By Custom Concepts",id:"by-custom-concepts",children:[],level:3},{value:"By clarifai/main and custom concepts",id:"by-clarifaimain-and-custom-concepts",children:[],level:3},{value:"By concept in another language",id:"by-concept-in-another-language",children:[],level:3}],level:2},{value:"Search by visual similarity",id:"search-by-visual-similarity",children:[{value:"Search by image URL",id:"search-by-image-url",children:[],level:3},{value:"Search by image Bytes",id:"search-by-image-bytes",children:[],level:3},{value:"By Input ID",id:"by-input-id",children:[],level:3}],level:2}],d={toc:h};function m(n){var e=n.components,t=(0,s.Z)(n,c);return(0,o.kt)("wrapper",(0,a.Z)({},d,t,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"rank"},"Rank"),(0,o.kt)("p",null,"Rank Order your search results with the intuitive insights of AI. Your model can identify concepts in your data and rank your search results by how confident it is that a given concept is present. You can even rank search results by how similar one input is to another input or region of the input model detected. The search results will return the input but also the annotation which includes the region."),(0,o.kt)("h2",{id:"search-by-concepts"},"Search By Concepts"),(0,o.kt)("p",null,"Once your images are indexed, you can search for them by concept."),(0,o.kt)("h3",{id:"by-clarifaimain-app-concepts"},"By clarifai/main App Concepts"),(0,o.kt)("p",null,"When you add an input, it automatically gets predictions from the models in your base workflow which are typically models from the clarifai/main app such as the general model. You can search by those predictions."),(0,o.kt)(r.Z,{mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview\n\nMultiSearchResponse postAnnotationsSearchesResponse = stub.postAnnotationsSearches(\n    PostAnnotationsSearchesRequest.newBuilder().addSearches(\n        Search.newBuilder().setQuery(\n            Query.newBuilder().addRanks(\n                Rank.newBuilder().setAnnotation(\n                    Annotation.newBuilder().setData(\n                            Data.newBuilder().addConcepts(  // You can search by multiple concepts.\n                            Concept.newBuilder()\n                                .setId("people")  // You could search by concept Name as well.\n                                .setValue(1f)  // Value of 0 will search for images that don\'t have the concept.\n                        )\n                    )\n                )\n            )\n        )    \n    )\n    .build()\n);\n\nif (postAnnotationsSearchesResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n  throw new RuntimeException("Post annotations searches failed, status: " + postAnnotationsSearchesResponse.getStatus());\n}\n\nSystem.out.println("Found inputs " + postAnnotationsSearchesResponse.getHitsCount() + ":");\nfor (Hit hit : postAnnotationsSearchesResponse.getHitsList()) {\n    System.out.printf("\\tScore %.2f for annotation % of input %s\\n", hit.getScore(), hit.getAnnotation().getId(), hit.getInput().getId())\n}\n'))),(0,o.kt)(i.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview\n\nstub.PostAnnotationsSearches(\n    {\n        searches: [\n            {\n                query: {\n                    ranks: [\n                        {\n                            annotation: {\n                                data: {\n                                    concepts: [  // You can search by multiple concepts.\n                                        {\n                                            id: "people",  // You could search by concept Name as well.\n                                            value: 1  // Value of 0 will search for images that don\'t have the concept\n                                        }\n                                    ]\n                                }\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post annotations searches failed, status: " + response.status.description);\n        }\n\n        console.log("Search result:");\n        for (const hit of response.hits) {\n            console.log("\\tScore " + hit.score + " for annotation: " + hit.annotation.id + " of input: ", hit.input.id);\n        }\n    }\n);\n'))),(0,o.kt)(i.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from clarifai_grpc.grpc.api import service_pb2, resources_pb2\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\n# Insert here the initialization code as outlined on this page:\n# https://docs.clarifai.com/api-guide/api-overview\n\npost_annotations_searches_response = stub.PostAnnotationsSearches(\n    service_pb2.PostAnnotationsSearchesRequest(\n        searches = [\n            resources_pb2.Search(\n                query=resources_pb2.Query(\n                    ranks=[\n                        resources_pb2.Rank(\n                            annotation=resources_pb2.Annotation(\n                                data=resources_pb2.Data(\n                                    concepts=[  # You can search by multiple concepts.\n                                        resources_pb2.Concept(\n                                            id="people",  # You could search by concept Name as well.\n                                            value=1  # Value of 0 will search for images that don\'t have the concept.\n                                        )\n                                    ]\n                                )\n                            )\n                        )\n                    ]\n                )\n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif post_annotations_searches_response.status.code != status_code_pb2.SUCCESS:\n    print("There was an error with your request!")\n    print("\\tCode: {}".format(post_annotations_searches_response.outputs[0].status.code))\n    print("\\tDescription: {}".format(post_annotations_searches_response.outputs[0].status.description))\n    print("\\tDetails: {}".format(post_annotations_searches_response.outputs[0].status.details))\n    raise Exception("Post searches failed, status: " + post_annotations_searches_response.status.description)\n\nprint("Search result:")\nfor hit in post_annotations_searches_response.hits:\n    print("\\tScore %.2f for annotation: %s off input: %s" % (hit.score, hit.annotation.id, hit.input.id))\n'))),(0,o.kt)(i.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'#\n# Value of 0 will search for images that don\'t have the concept.\n#\n# Instead of "id" you can search by "name" as well.\n\ncurl -X POST \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'\n  {\n    "searches": [\n      {\n        "query": {\n        "ranks": [\n            {\n            "annotation": {\n                "data": {\n                "concepts": [\n                    {\n                    "id":"people",\n                    "value": 1\n                    }\n                ]\n                }\n            }\n            }\n        ]\n        }\n      }\n    ]\n  }\'\\\n  https://api.clarifai.com/v2/annnotations/searches\n'))),(0,o.kt)(i.Z,{value:"js_rest",label:"Javascript (REST)",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'const raw = JSON.stringify({\n  "user_app_id": {\n        "user_id": "{YOUR_USER_ID}",\n        "app_id": "{YOUR_APP_ID}"\n    },\n  "searches": [\n    {\n      "query": {\n      "ranks": [\n          {\n          "annotation": {\n              "data": {\n              "concepts": [\n                  {\n                  "id":"people",\n                  "value": 1\n                  }\n              ]\n              }\n          }\n          }\n      ]\n      }\n    }\n  ]\n});\n\nconst requestOptions = {\n  method: \'POST\',\n  headers: {\n    \'Accept\': \'application/json\',\n    \'Authorization\': \'Key {YOUR_PERSONAL_TOKEN}\'\n  },\n    body: raw\n};\n\nfetch(`https://api.clarifai.com/v2/annnotations/searches`, requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log(\'error\', error));\n')))),(0,o.kt)("h3",{id:"by-custom-concepts"},"By Custom Concepts"),(0,o.kt)("p",null,"After you have ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/Clarifai/docs/tree/1c1d25cdd43190c38a2edb313297c0d566b3a0e3/api-guide/search/data-management/inputs.md#add-inputs-with-concepts"},"added inputs"),", ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/Clarifai/docs/tree/1c1d25cdd43190c38a2edb313297c0d566b3a0e3/api-guide/search/data-management/annotations.md#add-annotations"},"annotation the inputs"),", and try a custom model, you can search by those concepts."),(0,o.kt)(r.Z,{mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview\n\nMultiSearchResponse postAnnotationsSearchesResponse = stub.postAnnotationsSearches(\n    PostAnnotationsSearchesRequest.newBuilder().addSearches(\n        Search.newBuilder().setQuery(\n            Query.newBuilder().addRanks(\n                Rank.newBuilder().setAnnotation(\n                    Annotation.newBuilder().setData(\n                            Data.newBuilder().addConcepts(  // You can search by multiple concepts.\n                            Concept.newBuilder()\n                                .setId("people")  // You could search by concept Name as well.\n                                .setValue(1f)  // Value of 0 will search for images that don\'t have the concept.\n                        )\n                    )\n                )\n            )\n        )    \n    )\n    .build()\n);\n\nif (postAnnotationsSearchesResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n  throw new RuntimeException("Post annotations searches failed, status: " + postAnnotationsSearchesResponse.getStatus());\n}\n\nSystem.out.println("Found inputs " + postAnnotationsSearchesResponse.getHitsCount() + ":");\nfor (Hit hit : postAnnotationsSearchesResponse.getHitsList()) {\n    System.out.printf("\\tScore %.2f for annotation % of input %s\\n", hit.getScore(), hit.getAnnotation().getId(), hit.getInput().getId())\n}\n'))),(0,o.kt)(i.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview\n\nstub.PostAnnotationsSearches(\n    {\n        searches: [\n            {\n                query: {\n                    ranks: [\n                        {\n                            annotation: {\n                                data: {\n                                    concepts: [  // You can search by multiple concepts.\n                                        {\n                                            id: "people",  // You could search by concept Name as well.\n                                            value: 1  // Value of 0 will search for images that don\'t have the concept\n                                        }\n                                    ]\n                                }\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post annotations searches failed, status: " + response.status.description);\n        }\n\n        console.log("Search result:");\n        for (const hit of response.hits) {\n            console.log("\\tScore " + hit.score + " for annotation: " + hit.annotation.id + " of input: ", hit.input.id);\n        }\n    }\n);\n'))),(0,o.kt)(i.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from clarifai_grpc.grpc.api import service_pb2, resources_pb2\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\n# Insert here the initialization code as outlined on this page:\n# https://docs.clarifai.com/api-guide/api-overview\n\npost_annotations_searches_response = stub.PostAnnotationsSearches(\n    service_pb2.PostAnnotationsSearchesRequest(\n        searches = [\n            resources_pb2.Search(\n                query=resources_pb2.Query(\n                    ranks=[\n                        resources_pb2.Rank(\n                            annotation=resources_pb2.Annotation(\n                                data=resources_pb2.Data(\n                                    concepts=[  # You can search by multiple concepts.\n                                        resources_pb2.Concept(\n                                            id="people",  # You could search by concept Name as well.\n                                            value=1  # Value of 0 will search for images that don\'t have the concept.\n                                        )\n                                    ]\n                                )\n                            )\n                        )\n                    ]\n                )\n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif post_annotations_searches_response.status.code != status_code_pb2.SUCCESS:\n    print("There was an error with your request!")\n    print("\\tCode: {}".format(post_annotations_searches_response.outputs[0].status.code))\n    print("\\tDescription: {}".format(post_annotations_searches_response.outputs[0].status.description))\n    print("\\tDetails: {}".format(post_annotations_searches_response.outputs[0].status.details))\n    raise Exception("Post searches failed, status: " + post_annotations_searches_response.status.description)\n\nprint("Search result:")\nfor hit in post_annotations_searches_response.hits:\n    print("\\tScore %.2f for annotation: %s off input: %s" % (hit.score, hit.annotation.id, hit.input.id))\n'))),(0,o.kt)(i.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},'#\n# Value of 0 will search for images that don\'t have the concept.\n#\n# Instead of "id" you can search by "name" as well.\n\ncurl -X POST \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'\n  {\n    "searches": [\n      {\n        "query": {\n        "ranks": [\n            {\n            "annotation": {\n                "data": {\n                "concepts": [\n                    {\n                    "id":"people",\n                    "value": 1\n                    }\n                ]\n                }\n            }\n            }\n        ]\n        }\n      }\n    ]\n  }\'\\\n  https://api.clarifai.com/v2/annnotations/searches\n'))),(0,o.kt)(i.Z,{value:"js_rest",label:"Javascript (REST)",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'const raw = JSON.stringify({\n  "user_app_id": {\n        "user_id": "{YOUR_USER_ID}",\n        "app_id": "{YOUR_APP_ID}"\n    },\n  "searches": [\n    {\n      "query": {\n      "ranks": [\n          {\n          "annotation": {\n              "data": {\n              "concepts": [\n                  {\n                  "id":"people",\n                  "value": 1\n                  }\n              ]\n              }\n          }\n          }\n      ]\n      }\n    }\n  ]\n});\n\nconst requestOptions = {\n  method: \'POST\',\n  headers: {\n    \'Accept\': \'application/json\',\n    \'Authorization\': \'Key {YOUR_PERSONAL_TOKEN}\'\n  },\n    body: raw\n};\n\nfetch(`https://api.clarifai.com/v2/annnotations/searches`, requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log(\'error\', error));\n')))),(0,o.kt)("h3",{id:"by-clarifaimain-and-custom-concepts"},"By clarifai/main and custom concepts"),(0,o.kt)("p",null,"You can combine a search to find inputs that have concepts you have supplied as well as predictions from your model."),(0,o.kt)(r.Z,{mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview\n\n// Here we search for images which we labeled with "cat" and for which the General prediction model does not find\n// a "dog" concept.\nMultiSearchResponse postAnnotationsSearchesResponse = stub.postAnnotationsSearches(\n    PostAnnotationsSearchesRequest.newBuilder().addSearches(\n        Search.newBuilder().setQuery(\n            Query.newBuilder().addRanks(\n                Rank.newBuilder().setAnnotation(\n                    Annotation.newBuilder().setData(\n                            Data.newBuilder().addConcepts(  // You can search by multiple concepts.\n                            Concept.newBuilder()\n                                .setId("cat")  // You could search by concept Name as well.\n                                .setValue(1f)  // Value of 0 will search for images that don\'t have the concept.\n                        )\n                    )\n                )\n            )\n            .addRanks(\n                Rank.newBuilder().setAnnotation(\n                    Annotation.newBuilder().setData(\n                            Data.newBuilder().addConcepts(  // You can search by multiple concepts.\n                            Concept.newBuilder()\n                                .setId("dog")  // You could search by concept Name as well.\n                                .setValue(0f)  // Value of 0 will search for images that don\'t have the concept.\n                        )\n                    )\n                )\n            )\n        )    \n    )\n    .build()\n);\n\nif (postAnnotationsSearchesResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n  throw new RuntimeException("Post annotations searches failed, status: " + postAnnotationsSearchesResponse.getStatus());\n}\n\nSystem.out.println("Found inputs " + postAnnotationsSearchesResponse.getHitsCount() + ":");\nfor (Hit hit : postAnnotationsSearchesResponse.getHitsList()) {\n    System.out.printf("\\tScore %.2f for annotation % of input %s\\n", hit.getScore(), hit.getAnnotation().getId(), hit.getInput().getId())\n}\n'))),(0,o.kt)(i.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview\n\n// Here we search for images which we labeled with "cat" and for which the General prediction model does not find\n// a "dog" concept.\n\nstub.PostAnnotationsSearches(\n    {\n        searches: [\n            {\n                query: {\n                    ranks: [\n                        {\n                            annotation: {\n                                data: {\n                                    concepts: [  // You can search by multiple concepts.\n                                        {\n                                            id: "cat",  // You could search by concept Name as well.\n                                            value: 1  // Value of 0 will search for images that don\'t have the concept\n                                        }\n                                    ]\n                                }\n                            }\n                        }, {\n                            annotation: {\n                                data: {\n                                    concepts: [  // You can search by multiple concepts.\n                                        {\n                                            id: "dog",  // You could search by concept Name as well.\n                                            value: 0  // Value of 0 will search for images that don\'t have the concept\n                                        }\n                                    ]\n                                }\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post annotations searches failed, status: " + response.status.description);\n        }\n\n        console.log("Search result:");\n        for (const hit of response.hits) {\n            console.log("\\tScore " + hit.score + " for annotation: " + hit.annotation.id + " of input: ", hit.input.id);\n        }\n    }\n);\n'))),(0,o.kt)(i.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from clarifai_grpc.grpc.api import service_pb2, resources_pb2\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\n# Insert here the initialization code as outlined on this page:\n# https://docs.clarifai.com/api-guide/api-overview\n\n# Here we search for images which we labeled with "cat" and for which the General prediction model does not find\n# a "dog" concept.\n\npost_annotations_searches_response = stub.PostAnnotationsSearches(\n    service_pb2.PostAnnotationsSearchesRequest(\n        searches = [\n            resources_pb2.Search(\n                query=resources_pb2.Query(\n                    ranks=[\n                        resources_pb2.Rank(\n                            annotation=resources_pb2.Annotation(\n                                data=resources_pb2.Data(\n                                    concepts=[  # You can search by multiple concepts.\n                                        resources_pb2.Concept(\n                                            id="cat",  # You could search by concept Name as well.\n                                            value=1  # Value of 0 will search for images that don\'t have the concept.\n                                        )\n                                    ]\n                                )\n                            )\n                        ),\n                        resources_pb2.Rank(\n                            annotation=resources_pb2.Annotation(\n                                data=resources_pb2.Data(\n                                    concepts=[  # You can search by multiple concepts.\n                                        resources_pb2.Concept(\n                                            id="dog",  # You could search by concept Name as well.\n                                            value=0  # Value of 0 will search for images that don\'t have the concept.\n                                        )\n                                    ]\n                                )\n                            )\n                        )\n                    ]\n                )\n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif post_annotations_searches_response.status.code != status_code_pb2.SUCCESS:\n    print("There was an error with your request!")\n    print("\\tCode: {}".format(post_annotations_searches_response.outputs[0].status.code))\n    print("\\tDescription: {}".format(post_annotations_searches_response.outputs[0].status.description))\n    print("\\tDetails: {}".format(post_annotations_searches_response.outputs[0].status.details))\n    raise Exception("Post searches failed, status: " + post_annotations_searches_response.status.description)\n\nprint("Search result:")\nfor hit in post_annotations_searches_response.hits:\n    print("\\tScore %.2f for annotation: %s off input: %s" % (hit.score, hit.annotation.id, hit.input.id))\n'))),(0,o.kt)(i.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'#\n# Value of 0 will search for images that don\'t have the concept.\n#\n# Instead of "id" you can search by "name" as well.\n\n# Here we search for images which we labeled with "cat" and for which the General prediction model does not find\n# a "dog" concept.\n\ncurl -X POST \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'\n  {\n    "searches": [\n      {\n        "query": {\n        "ranks": [\n            {\n            "annotation": {\n                "data": {\n                "concepts": [\n                    {\n                    "id":"cat",\n                    "value": 1\n                    }\n                ]\n                }\n            }\n            }, {   \n            "annotation": {\n                "data": {\n                "concepts": [\n                    {\n                    "id":"dog",\n                    "value": 0\n                    }\n                ]\n                }\n            }\n            }\n        ]\n        }\n      }\n    ]\n  }\'\\\n  https://api.clarifai.com/v2/annnotations/searches\n'))),(0,o.kt)(i.Z,{value:"js_rest",label:"Javascript (REST)",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'const raw = JSON.stringify({\n  "user_app_id": {\n        "user_id": "{YOUR_USER_ID}",\n        "app_id": "{YOUR_APP_ID}"\n    },\n  "searches": [\n    {\n      "query": {\n      "ranks": [\n          {\n          "annotation": {\n              "data": {\n              "concepts": [\n                  {\n                  "id":"cat",\n                  "value": 1\n                  }\n              ]\n              }\n          }\n          }, {   \n          "annotation": {\n              "data": {\n              "concepts": [\n                  {\n                  "id":"dog",\n                  "value": 0\n                  }\n              ]\n              }\n          }\n          }\n      ]\n      }\n    }\n  ]\n});\n\nconst requestOptions = {\n  method: \'POST\',\n  headers: {\n    \'Accept\': \'application/json\',\n    \'Authorization\': \'Key {YOUR_PERSONAL_TOKEN}\'\n  },\n    body: raw\n};\n\nfetch(`https://api.clarifai.com/v2/annnotations/searches`, requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log(\'error\', error));\n')))),(0,o.kt)("h3",{id:"by-concept-in-another-language"},"By concept in another language"),(0,o.kt)("p",null,'Concepts that have a translation into another language can be searched for in that language, even without having the default language for your app being in that language. This uses Clarifai\'s knowledge graph to lookup the translation and then perform the search. For example, if you app is in english and you want to search for "dog" in Japanese, then you could search with ',(0,o.kt)("inlineCode",{parentName:"p"},'language="ja"')," and ",(0,o.kt)("inlineCode",{parentName:"p"},'name="\u72ac"'),"."),(0,o.kt)(r.Z,{mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview\n\nMultiSearchResponse postAnnotationsSearchesResponse = stub.postAnnotationsSearches(\n    PostAnnotationsSearchesRequest.newBuilder().addSearches(\n        Search.newBuilder().setQuery(\n            Query.newBuilder().addRanks(\n                Rank.newBuilder().setAnnotation(\n                    Annotation.newBuilder().setData(\n                            Data.newBuilder().addConcepts(  // You can search by multiple concepts.\n                            Concept.newBuilder()\n                                .setName("\u72ac")  // You could search by concept ID as well.\n                                .setLanguage("ja") // japanese\n                                .setValue(1f)  // Value of 0 will search for images that don\'t have the concept.\n                        )\n                    )\n                )\n            )\n        )    \n    )\n    .build()\n);\n\nif (postAnnotationsSearchesResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n  throw new RuntimeException("Post annotations searches failed, status: " + postAnnotationsSearchesResponse.getStatus());\n}\n\nSystem.out.println("Found inputs " + postAnnotationsSearchesResponse.getHitsCount() + ":");\nfor (Hit hit : postAnnotationsSearchesResponse.getHitsList()) {\n    System.out.printf("\\tScore %.2f for annotation % of input %s\\n", hit.getScore(), hit.getAnnotation().getId(), hit.getInput().getId())\n}\n'))),(0,o.kt)(i.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview\n\nstub.PostAnnotationsSearches(\n    {\n        searches: [\n            {\n                query: {\n                    ranks: [\n                        {\n                            annotation: {\n                                data: {\n                                    concepts: [  // You can search by multiple concepts.\n                                        {\n                                            name: "\u72ac",  // You could search by concept Id as well.\n                                            language: "ja", // japanese\n                                            value: 1  // Value of 0 will search for images that don\'t have the concept\n                                        }\n                                    ]\n                                }\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post annotations searches failed, status: " + response.status.description);\n        }\n\n        console.log("Search result:");\n        for (const hit of response.hits) {\n            console.log("\\tScore " + hit.score + " for annotation: " + hit.annotation.id + " of input: ", hit.input.id);\n        }\n    }\n);\n'))),(0,o.kt)(i.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from clarifai_grpc.grpc.api import service_pb2, resources_pb2\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\n# Insert here the initialization code as outlined on this page:\n# https://docs.clarifai.com/api-guide/api-overview\n\npost_annotations_searches_response = stub.PostAnnotationsSearches(\n    service_pb2.PostAnnotationsSearchesRequest(\n        searches = [\n            resources_pb2.Search(\n                query=resources_pb2.Query(\n                    ranks=[\n                        resources_pb2.Rank(\n                            annotation=resources_pb2.Annotation(\n                                data=resources_pb2.Data(\n                                    concepts=[  # You can search by multiple concepts.\n                                        resources_pb2.Concept(\n                                            name="\u72ac",  # You could search by concept ID as well.\n                                            language="ja", # japanese\n                                            value=1  # Value of 0 will search for images that don\'t have the concept.\n                                        )\n                                    ]\n                                )\n                            )\n                        )\n                    ]\n                )\n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif post_annotations_searches_response.status.code != status_code_pb2.SUCCESS:\n    print("There was an error with your request!")\n    print("\\tCode: {}".format(post_annotations_searches_response.outputs[0].status.code))\n    print("\\tDescription: {}".format(post_annotations_searches_response.outputs[0].status.description))\n    print("\\tDetails: {}".format(post_annotations_searches_response.outputs[0].status.details))\n    raise Exception("Post searches failed, status: " + post_annotations_searches_response.status.description)\n\nprint("Search result:")\nfor hit in post_annotations_searches_response.hits:\n    print("\\tScore %.2f for annotation: %s off input: %s" % (hit.score, hit.annotation.id, hit.input.id))\n'))),(0,o.kt)(i.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'#\n# Value of 0 will search for images that don\'t have the concept.\n#\n# Instead of "name" you can search by "id" as well.\n\ncurl -X POST \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'\n  {\n    "searches": [\n      {\n        "query": {\n        "ranks": [\n            {\n            "annotation": {\n                "data": {\n                "concepts": [\n                    {\n                    "name":"\u72ac",\n                    "language": "ja",\n                    "value": 1\n                    }\n                ]\n                }\n            }\n            }\n        ]\n        }\n      }\n    ]\n  }\'\\\n  https://api.clarifai.com/v2/annnotations/searches\n'))),(0,o.kt)(i.Z,{value:"js_rest",label:"Javascript (REST)",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'const raw = JSON.stringify({\n  "user_app_id": {\n        "user_id": "{YOUR_USER_ID}",\n        "app_id": "{YOUR_APP_ID}"\n    },\n  "searches": [\n    {\n      "query": {\n      "ranks": [\n          {\n          "annotation": {\n              "data": {\n              "concepts": [\n                  {\n                      "name":"\u72ac",\n                      "language": "ja",\n                      "value": 1\n                  }\n              ]\n              }\n          }\n          }\n      ]\n      }\n    }\n  ]\n});\n\nconst requestOptions = {\n  method: \'POST\',\n  headers: {\n    \'Accept\': \'application/json\',\n    \'Authorization\': \'Key {YOUR_PERSONAL_TOKEN}\'\n  },\n    body: raw\n};\n\nfetch(`https://api.clarifai.com/v2/annnotations/searches`, requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log(\'error\', error));\n')))),(0,o.kt)("h2",{id:"search-by-visual-similarity"},"Search by visual similarity"),(0,o.kt)("p",null,"You can use images to search through your collection. The API will return ranked results based on how similar the results are to the image you provided in your query."),(0,o.kt)("h3",{id:"search-by-image-url"},"Search by image URL"),(0,o.kt)(r.Z,{mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview\n\nMultiSearchResponse postAnnotationsSearchesResponse = stub.postAnnotationsSearches(\n    PostAnnotationsSearchesRequest.newBuilder().addSearches(\n        Search.newBuilder().setQuery(\n            Query.newBuilder().addRanks(\n                Rank.newBuilder().setAnnotation(\n                    Annotation.newBuilder().setData(\n                        Data.newBuilder().setImage(\n                            Image.newBuilder()\n                                .setUrl("{YOUR_IMAGE_URL}")\n                        )\n                    )\n                )\n            )\n        )    \n    )\n    .build()\n);\n\nif (postAnnotationsSearchesResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n  throw new RuntimeException("Post annotations searches failed, status: " + postAnnotationsSearchesResponse.getStatus());\n}\n\nSystem.out.println("Found inputs " + postAnnotationsSearchesResponse.getHitsCount() + ":");\nfor (Hit hit : postAnnotationsSearchesResponse.getHitsList()) {\n    System.out.printf("\\tScore %.2f for annotation % of input %s\\n", hit.getScore(), hit.getAnnotation().getId(), hit.getInput().getId())\n}\n'))),(0,o.kt)(i.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview\n\nstub.PostAnnotationsSearches(\n    {\n        searches: [\n            {\n            query: {\n                ranks: [\n                    {\n                        annotation: {\n                            data: {\n                                image: {\n                                    url: "{YOUR_IMAGE_URL}"\n                                }\n                            }\n                        }\n                    }\n                ]\n            }\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post annotations searches failed, status: " + response.status.description);\n        }\n\n        console.log("Search result:");\n        for (const hit of response.hits) {\n            console.log("\\tScore " + hit.score + " for annotation: " + hit.annotation.id + " of input: ", hit.input.id);\n        }\n    }\n);\n'))),(0,o.kt)(i.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from clarifai_grpc.grpc.api import service_pb2, resources_pb2\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\n# Insert here the initialization code as outlined on this page:\n# https://docs.clarifai.com/api-guide/api-overview\n\npost_annotations_searches_response = stub.PostAnnotationsSearches(\n    service_pb2.PostAnnotationsSearchesRequest(\n        searches = [\n            resources_pb2.Search(\n                query=resources_pb2.Query(\n                    ranks=[\n                        resources_pb2.Rank(\n                            annotation=resources_pb2.Annotation(\n                                data=resources_pb2.Data(\n                                    image=resources_pb2.Image(\n                                        url="{YOUR_IMAGE_URL}"\n                                    )\n                                )\n                            )\n                        )\n                    ]\n                )\n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif post_annotations_searches_response.status.code != status_code_pb2.SUCCESS:\n    print("There was an error with your request!")\n    print("\\tCode: {}".format(post_annotations_searches_response.outputs[0].status.code))\n    print("\\tDescription: {}".format(post_annotations_searches_response.outputs[0].status.description))\n    print("\\tDetails: {}".format(post_annotations_searches_response.outputs[0].status.details))\n    raise Exception("Post searches failed, status: " + post_annotations_searches_response.status.description)\n\nprint("Search result:")\nfor hit in post_annotations_searches_response.hits:\n    print("\\tScore %.2f for annotation: %s off input: %s" % (hit.score, hit.annotation.id, hit.input.id))\n'))),(0,o.kt)(i.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'\n  {\n    "searches": [\n      {\n        "query": {\n        "ranks": [\n            {\n            "annotation": {\n                "data": {\n                "image": {\n                    "url": "{YOUR_IMAGE_URL}"\n                }\n                }\n            }\n            }\n        ]\n        }\n      }\n    ]\n  }\'\\\n  https://api.clarifai.com/v2/annnotations/searches\n'))),(0,o.kt)(i.Z,{value:"js_rest",label:"Javascript (REST)",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'const raw = JSON.stringify({\n  "user_app_id": {\n        "user_id": "{YOUR_USER_ID}",\n        "app_id": "{YOUR_APP_ID}"\n    },\n  "searches": [\n    {\n      "query": {\n      "ranks": [\n          {\n          "annotation": {\n              "data": {\n              "image": {\n                  "url": "{YOUR_IMAGE_URL}"\n              }\n              }\n          }\n          }\n      ]\n      }\n    }\n  ]\n});\n\nconst requestOptions = {\n  method: \'POST\',\n  headers: {\n    \'Accept\': \'application/json\',\n    \'Authorization\': \'Key {YOUR_PERSONAL_TOKEN}\'\n  },\n    body: raw\n};\n\nfetch(`https://api.clarifai.com/v2/annnotations/searches`, requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log(\'error\', error));\n')))),(0,o.kt)("h3",{id:"search-by-image-bytes"},"Search by image Bytes"),(0,o.kt)("p",null,"You can also search for an input by URL."),(0,o.kt)(r.Z,{mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\nimport com.google.protobuf.ByteString;\nimport java.io.File;\nimport java.nio.file.Files;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview\n\nMultiSearchResponse postAnnotationsSearchesResponse = stub.postAnnotationsSearches(\n    PostAnnotationsSearchesRequest.newBuilder().addSearches(\n        Search.newBuilder().setQuery(\n            Query.newBuilder().addRanks(\n                Rank.newBuilder().setAnnotation(\n                    Annotation.newBuilder().setData(\n                        Data.newBuilder().setImage(\n                            Image.newBuilder()\n                                .setBase64(ByteString.copyFrom(Files.readAllBytes(\n                                    new File("{YOUR_IMAGE_LOCATION}").toPath()\n                                ))\n                            )\n                        )\n                    )\n                )\n            )\n        )    \n    )\n    .build()\n);\n\nif (postAnnotationsSearchesResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n  throw new RuntimeException("Post annotations searches failed, status: " + postAnnotationsSearchesResponse.getStatus());\n}\n\nSystem.out.println("Found inputs " + postAnnotationsSearchesResponse.getHitsCount() + ":");\nfor (Hit hit : postAnnotationsSearchesResponse.getHitsList()) {\n    System.out.printf("\\tScore %.2f for annotation % of input %s\\n", hit.getScore(), hit.getAnnotation().getId(), hit.getInput().getId())\n}\n'))),(0,o.kt)(i.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview\n\nconst fs = require("fs");\nconst imageBytes = fs.readFileSync("{YOUR_IMAGE_LOCATION}");\n\nstub.PostAnnotationsSearches(\n    {\n        searches: [\n            {\n                query: {\n                    ranks: [\n                        {\n                            annotation: {\n                                data: {\n                                    image: {\n                                        base64: imageBytess\n                                    }\n                                }\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post annotations searches failed, status: " + response.status.description);\n        }\n\n        console.log("Search result:");\n        for (const hit of response.hits) {\n            console.log("\\tScore " + hit.score + " for annotation: " + hit.annotation.id + " of input: ", hit.input.id);\n        }\n    }\n);\n'))),(0,o.kt)(i.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from clarifai_grpc.grpc.api import service_pb2, resources_pb2\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\n# Insert here the initialization code as outlined on this page:\n# https://docs.clarifai.com/api-guide/api-overview\n\nwith open("{YOUR_IMAGE_LOCATION}", "rb") as f:\n    file_bytes = f.read()\n\npost_annotations_searches_response = stub.PostAnnotationsSearches(\n    service_pb2.PostAnnotationsSearchesRequest(\n        searches = [\n            resources_pb2.Search(\n                query=resources_pb2.Query(\n                    ranks=[\n                        resources_pb2.Rank(\n                            annotation=resources_pb2.Annotation(\n                                data=resources_pb2.Data(\n                                    image=resources_pb2.Image(\n                                        base64=file_bytes\n                                    )\n                                )\n                            )\n                        )\n                    ]\n                )\n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif post_annotations_searches_response.status.code != status_code_pb2.SUCCESS:\n    print("There was an error with your request!")\n    print("\\tCode: {}".format(post_annotations_searches_response.outputs[0].status.code))\n    print("\\tDescription: {}".format(post_annotations_searches_response.outputs[0].status.description))\n    print("\\tDetails: {}".format(post_annotations_searches_response.outputs[0].status.details))\n    raise Exception("Post searches failed, status: " + post_annotations_searches_response.status.description)\n\nprint("Search result:")\nfor hit in post_annotations_searches_response.hits:\n    print("\\tScore %.2f for annotation: %s off input: %s" % (hit.score, hit.annotation.id, hit.input.id))\n'))),(0,o.kt)(i.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'\n  {\n    "searches": [\n      {\n        "query": {\n        "ranks": [\n            {\n            "annotation": {\n                "data": {\n                "image": {\n                    "base64": \'"`base64 /home/user/image.jpeg`"\'"\n                }\n                }\n            }\n            }\n        ]\n        }\n      }\n    ]\n  }\'\\\n  https://api.clarifai.com/v2/annnotations/searches\n'))),(0,o.kt)(i.Z,{value:"js_rest",label:"Javascript (REST)",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'const raw = JSON.stringify({\n  "user_app_id": {\n        "user_id": "{YOUR_USER_ID}",\n        "app_id": "{YOUR_APP_ID}"\n    },\n  "searches": [\n    {\n      "query": {\n      "ranks": [\n          {\n          "annotation": {\n              "data": {\n              "image": {\n                "base64": \'"`base64 /home/user/image.jpeg`"\'"\n              }\n            }\n          }\n        }\n      ]\n      }\n    }\n  ]\n});\n\nconst requestOptions = {\n  method: \'POST\',\n  headers: {\n    \'Accept\': \'application/json\',\n    \'Authorization\': \'Key {YOUR_PERSONAL_TOKEN}\'\n  },\n    body: raw\n};\n\nfetch(`https://api.clarifai.com/v2/annnotations/searches`, requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log(\'error\', error));\n')))),(0,o.kt)("h3",{id:"by-input-id"},"By Input ID"),(0,o.kt)("p",null,"If the input has been indexed, we can use the input ID. If there are multiple embeddings ","(","for example multiple regions",")",", we will average the embeddings."),(0,o.kt)(r.Z,{mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview\n\nMultiSearchResponse postAnnotationsSearchesResponse = stub.postAnnotationsSearches(\n    PostAnnotationsSearchesRequest.newBuilder().addSearches(\n        Search.newBuilder().setQuery(\n            Query.newBuilder().addRanks(\n                Rank.newBuilder().setAnnotation(\n                    Annotation.newBuilder().setInputId("{input_id}")    \n                )\n            )\n        )    \n    )\n    .build()\n);\n\nif (postAnnotationsSearchesResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n  throw new RuntimeException("Post annotations searches failed, status: " + postAnnotationsSearchesResponse.getStatus());\n}\n\nSystem.out.println("Found inputs " + postAnnotationsSearchesResponse.getHitsCount() + ":");\nfor (Hit hit : postAnnotationsSearchesResponse.getHitsList()) {\n    System.out.printf("\\tScore %.2f for annotation % of input %s\\n", hit.getScore(), hit.getAnnotation().getId(), hit.getInput().getId())\n}\n'))),(0,o.kt)(i.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview\n\nstub.PostAnnotationsSearches(\n    {\n        searches: [\n            {\n                query: {\n                    ranks: [\n                        {\n                            annotation: {\n                                input_id: "{input_ids}"\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post annotations searches failed, status: " + response.status.description);\n        }\n\n        console.log("Search result:");\n        for (const hit of response.hits) {\n            console.log("\\tScore " + hit.score + " for annotation: " + hit.annotation.id + " of input: ", hit.input.id);\n        }\n    }\n);\n'))),(0,o.kt)(i.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from clarifai_grpc.grpc.api import service_pb2, resources_pb2\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\n# Insert here the initialization code as outlined on this page:\n# https://docs.clarifai.com/api-guide/api-overview\n\npost_annotations_searches_response = stub.PostAnnotationsSearches(\n    service_pb2.PostAnnotationsSearchesRequest(\n        searches = [\n            resources_pb2.Search(\n                query=resources_pb2.Query(\n                    ranks=[\n                        resources_pb2.Rank(\n                            annotation=resources_pb2.Annotation(\n                                data=resources_pb2.Data(\n                                    image=resources_pb2.Image(\n                                        input_id="{input_ids}"\n                                    )\n                                )\n                            )\n                        )\n                    ]\n                )\n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif post_annotations_searches_response.status.code != status_code_pb2.SUCCESS:\n    print("There was an error with your request!")\n    print("\\tCode: {}".format(post_annotations_searches_response.outputs[0].status.code))\n    print("\\tDescription: {}".format(post_annotations_searches_response.outputs[0].status.description))\n    print("\\tDetails: {}".format(post_annotations_searches_response.outputs[0].status.details))\n    raise Exception("Post searches failed, status: " + post_annotations_searches_response.status.description)\n\nprint("Search result:")\nfor hit in post_annotations_searches_response.hits:\n    print("\\tScore %.2f for annotation: %s off input: %s" % (hit.score, hit.annotation.id, hit.input.id))\n'))),(0,o.kt)(i.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'\n  {\n    "searches": [\n      {\n        "query": {\n          "ranks": [\n            {\n              "annotation": {\n                "data": {\n                  "image": {\n                    "url": "{YOUR_IMAGE_URL}"\n                  }\n                }\n              }\n            }\n          ]\n        }\n      }\n    ]\n  }\'\\\n  https://api.clarifai.com/v2/annnotations/searches\n'))),(0,o.kt)(i.Z,{value:"js_rest",label:"Javascript (REST)",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'const raw = JSON.stringify({\n  "user_app_id": {\n        "user_id": "{YOUR_USER_ID}",\n        "app_id": "{YOUR_APP_ID}"\n    },\n  "searches": [\n    {\n      "query": {\n        "ranks": [\n          {\n            "annotation": {\n              "data": {\n                "image": {\n                  "url": "{YOUR_IMAGE_URL}"\n                }\n              }\n            }\n          }\n        ]\n      }\n    }\n  ]\n});\n\nconst requestOptions = {\n  method: \'POST\',\n  headers: {\n    \'Accept\': \'application/json\',\n    \'Authorization\': \'Key {YOUR_PERSONAL_TOKEN}\'\n  },\n    body: raw\n};\n\nfetch(`https://api.clarifai.com/v2/annnotations/searches`, requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log(\'error\', error));\n')))))}m.isMDXComponent=!0}}]);
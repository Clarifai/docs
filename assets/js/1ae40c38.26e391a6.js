"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[4341],{58215:function(e,t,n){var o=n(67294);t.Z=function(e){var t=e.children,n=e.hidden,a=e.className;return o.createElement("div",{role:"tabpanel",hidden:n,className:a},t)}},26396:function(e,t,n){n.d(t,{Z:function(){return _}});var o=n(87462),a=n(67294),r=n(72389),l=n(79443);var s=function(){var e=(0,a.useContext)(l.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},i=n(63616),c=n(86010),u="tabItem_vU9c";function p(e){var t,n,r,l=e.lazy,p=e.block,_=e.defaultValue,d=e.values,E=e.groupId,O=e.className,h=a.Children.map(e.children,(function(e){if((0,a.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),I=null!=d?d:h.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),R=(0,i.lx)(I,(function(e,t){return e.value===t.value}));if(R.length>0)throw new Error('Docusaurus error: Duplicate values "'+R.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var m=null===_?_:null!=(t=null!=_?_:null==(n=h.find((function(e){return e.props.default})))?void 0:n.props.value)?t:null==(r=h[0])?void 0:r.props.value;if(null!==m&&!I.some((function(e){return e.value===m})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+m+'" but none of its children has the corresponding value. Available values are: '+I.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var C=s(),D=C.tabGroupChoices,T=C.setTabGroupChoices,f=(0,a.useState)(m),g=f[0],P=f[1],b=[],U=(0,i.o5)().blockElementScrollPositionUntilNextRender;if(null!=E){var w=D[E];null!=w&&w!==g&&I.some((function(e){return e.value===w}))&&P(w)}var L=function(e){var t=e.currentTarget,n=b.indexOf(t),o=I[n].value;o!==g&&(U(t),P(o),null!=E&&T(E,o))},S=function(e){var t,n=null;switch(e.key){case"ArrowRight":var o=b.indexOf(e.currentTarget)+1;n=b[o]||b[0];break;case"ArrowLeft":var a=b.indexOf(e.currentTarget)-1;n=b[a]||b[b.length-1]}null==(t=n)||t.focus()};return a.createElement("div",{className:"tabs-container"},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,c.Z)("tabs",{"tabs--block":p},O)},I.map((function(e){var t=e.value,n=e.label,r=e.attributes;return a.createElement("li",(0,o.Z)({role:"tab",tabIndex:g===t?0:-1,"aria-selected":g===t,key:t,ref:function(e){return b.push(e)},onKeyDown:S,onFocus:L,onClick:L},r,{className:(0,c.Z)("tabs__item",u,null==r?void 0:r.className,{"tabs__item--active":g===t})}),null!=n?n:t)}))),l?(0,a.cloneElement)(h.filter((function(e){return e.props.value===g}))[0],{className:"margin-vert--md"}):a.createElement("div",{className:"margin-vert--md"},h.map((function(e,t){return(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==g})}))))}function _(e){var t=(0,r.Z)();return a.createElement(p,(0,o.Z)({key:String(t)},e))}},93599:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return p},default:function(){return O},frontMatter:function(){return u},metadata:function(){return _},toc:function(){return d}});var o=n(87462),a=n(63366),r=(n(67294),n(3905)),l=n(26396),s=n(58215),i=n(19055),c=["components"],u={description:"Capture data for your application.",sidebar_position:4},p="Collectors",_={unversionedId:"api-guide/data/collectors",id:"api-guide/data/collectors",title:"Collectors",description:"Capture data for your application.",source:"@site/docs/api-guide/data/collectors.md",sourceDirName:"api-guide/data",slug:"/api-guide/data/collectors",permalink:"/api-guide/data/collectors",tags:[],version:"current",sidebarPosition:4,frontMatter:{description:"Capture data for your application.",sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Adding and Removing Data",permalink:"/api-guide/data/create-get-update-delete"},next:{title:"Making Predictions",permalink:"/api-guide/predict/"}},d=[{value:"Collector Parameters",id:"collector-parameters",children:[{value:"Collector ID",id:"collector-id",children:[],level:3},{value:"Description",id:"description",children:[],level:3},{value:"Pre-queue workflow",id:"pre-queue-workflow",children:[],level:3},{value:"Post Inputs key",id:"post-inputs-key",children:[],level:3},{value:"Source",id:"source",children:[],level:3}],level:2},{value:"Add Collector",id:"add-collector",children:[],level:2},{value:"Update Collector",id:"update-collector",children:[],level:2},{value:"List Collectors",id:"list-collectors",children:[],level:2},{value:"Get Collector",id:"get-collector",children:[],level:2},{value:"Delete Collector",id:"delete-collector",children:[],level:2}],E={toc:d};function O(e){var t=e.components,n=(0,a.Z)(e,c);return(0,r.kt)("wrapper",(0,o.Z)({},E,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"collectors"},"Collectors"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Capture data for your application")),(0,r.kt)("hr",null),(0,r.kt)("p",null,"Collectors capture input data for your app. They enable you to pipe in data from production models automatically, and are the key to unlocking many platform training capabilities like active learning. "),(0,r.kt)("p",null,"Collectors are available with Essential and Enterprise plans to help you manage data ingestion at scale."),(0,r.kt)("p",null,"You can create app-level collectors to monitor specific models and specify sampling rules for triggering data ingestion. Collectors can only collect data from apps where you are the app owner."),(0,r.kt)("h2",{id:"collector-parameters"},"Collector Parameters"),(0,r.kt)("h3",{id:"collector-id"},"Collector ID"),(0,r.kt)("p",null,"Give your collector a useful and descriptive name."),(0,r.kt)("h3",{id:"description"},"Description"),(0,r.kt)("p",null,"Provide additional details about your collector."),(0,r.kt)("h3",{id:"pre-queue-workflow"},"Pre-queue workflow"),(0,r.kt)("p",null,"In many scenarios, you will only want to ingest a sample, or subset of a given data source into your app. Pre-queue workflows allow you to pre-process your inputs so that you can sample and filter your new data before it is ever added to your app. Pre-queue workflows allow you to specify sampling rules for triggering data ingestion. "),(0,r.kt)("p",null,"Common pre-queue workflows are designed to:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Randomly sample inputs"),(0,r.kt)("li",{parentName:"ul"},"Filter inputs by metadata"),(0,r.kt)("li",{parentName:"ul"},"Filter inputs with a maximum probability below a given threshold"),(0,r.kt)("li",{parentName:"ul"},"Filter inputs with a minimum probability above a given threshold"),(0,r.kt)("li",{parentName:"ul"},"Filter specific concept probabilities above a given threshold"),(0,r.kt)("li",{parentName:"ul"},"Knowledge graph mapping from public General model concepts to a custom model")),(0,r.kt)("p",null,"At least one ","(","pre-queue or post-queue",")"," workflow ID is required. The input to this workflow is going to be the OUTPUT of the model. We recommend that you use fast and light-weight models in it as it will effect the speed of the predictions being made."),(0,r.kt)("h3",{id:"post-inputs-key"},"Post Inputs key"),(0,r.kt)("p",null,"Select the API key that you would like to use to allow new inputs to be posted to your app. This is the post-queue workflow ID of the workflow to run to after the collector is processing the queued input. This API key must have the PostInputs scope, since it grants the collector the authority to POST inputs to your app."),(0,r.kt)("p",null,"This workflow uses the original input to the model as input to the workflow so that you can run additional models as well on that input to decide whether to queue the model or not. If the workflow output has any field that is non-empty, then it will be passed on to POST /inputs to the destination app. At least one ","(","pre-queue or post-queue",")"," workflow ID is required."),(0,r.kt)("h3",{id:"source"},"Source"),(0,r.kt)("p",null,"Select the model that you would like to collect data from, and the collector will automatically post the new inputs to your app. Simply enter your model name, or model ID number. When the user predicts an input against this model, the input is going to be collected."),(0,r.kt)("p",null,"You need to specify the app ID and user ID where the model is located. If using a publicly available model, the model's user and app ID should be ",(0,r.kt)("inlineCode",{parentName:"p"},"clarifai")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"main"),", respectively. Otherwise, the IDs should belong to the user who created the model. You also need to specify an API key ID where the inputs are going to be added."),(0,r.kt)("p",null,"See also ",(0,r.kt)("a",{parentName:"p",href:"https://docs.clarifai.com/api-guide/workflows/common-workflows/auto-annotation-walkthrough/"},"Auto Annotation walkthrough"),"."),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"The initialization code used in the following examples is outlined in detail on the ",(0,r.kt)("a",{parentName:"p",href:"https://docs.clarifai.com/api-guide/api-overview/api-clients/#client-installation-instructions"},"client installation page.")))),(0,r.kt)("h2",{id:"add-collector"},"Add Collector"),(0,r.kt)("p",null,"Add a new collector to your application."),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,r.kt)(i.Z,{className:"language-python",mdxType:"CodeBlock"},"###############################################################################\n# In this section, we set the user authentication, app ID, and details of the\n# collector we want to add. Change these strings to run your own example.\n###############################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to add your own collector\nCOLLECTOR_ID = 'YOUR_COLLECTOR_ID_HERE'\nCOLLECTOR_DESCRIPTION = 'YOUR_COLLECTOR_DESCRIPTION_HERE'\nPRE_QUEUE_WORKFLOW_ID = 'YOUR_PRE_WORKFLOW_ID_HERE'\nPOST_QUEUE_WORKFLOW_ID = 'YOUR_POST_WORKFLOW_ID_HERE'\nMODEL_ID = 'YOUR_MODEL_ID_HERE'\nMODEL_VERSION_ID = 'YOUR_MODEL_VERSION_ID_HERE' \nPOST_INPUTS_KEY_ID = 'YOUR_KEY_ID_HERE'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID) # The userDataObject is required when using a PAT\n\npost_collectors_response = stub.PostCollectors(\n    service_pb2.PostCollectorsRequest(\n        user_app_id=userDataObject,\n        collectors=[\n            resources_pb2.Collector(\n                id=COLLECTOR_ID,\n                description=COLLECTOR_DESCRIPTION,\n                pre_queue_workflow_id=PRE_QUEUE_WORKFLOW_ID,\n                post_queue_workflow_id=POST_QUEUE_WORKFLOW_ID,\n                collector_source=resources_pb2.CollectorSource(\n                    api_post_model_outputs_collector_source=resources_pb2.APIPostModelOutputsCollectorSource(\n                        model_user_id=USER_ID,\n                        model_app_id=APP_ID,\n                        model_id=MODEL_ID,\n                        model_version_id=MODEL_VERSION_ID,\n                        post_inputs_key_id=POST_INPUTS_KEY_ID\n                    )\n                )\n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif post_collectors_response.status.code != status_code_pb2.SUCCESS:\n    print(post_collectors_response.status)   \n    raise Exception(\"Post collectors failed, status: \" + post_collectors_response.status.description)\n\n")),(0,r.kt)(s.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,r.kt)(i.Z,{className:"language-javascript",mdxType:"CodeBlock"},"//index.js file\n\n////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and details of the\n// collector we want to add. Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = 'YOUR_USER_ID_HERE';\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\nconst PAT = 'YOUR_PAT_HERE';\nconst APP_ID = 'YOUR_APP_ID_HERE';\n// Change these to add your own collector\nconst COLLECTOR_ID = 'YOUR_COLLECTOR_ID_HERE';\nconst COLLECTOR_DESCRIPTION = 'YOUR_COLLECTOR_DESCRIPTION_HERE';\nconst PRE_QUEUE_WORKFLOW_ID = 'YOUR_PRE_WORKFLOW_ID_HERE';\nconst POST_QUEUE_WORKFLOW_ID = 'YOUR_POST_WORKFLOW_ID_HERE';\nconst MODEL_ID = 'YOUR_MODEL_ID_HERE';\nconst MODEL_VERSION_ID = 'YOUR_MODEL_VERSION_ID_HERE';\nconst POST_INPUTS_KEY_ID = 'YOUR_API_KEY_HERE';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require(\"clarifai-nodejs-grpc\");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set(\"authorization\", \"Key \" + PAT);\n\nstub.PostCollectors(\n    {\n        user_app_id: {\n            \"user_id\": USER_ID,\n            \"app_id\": APP_ID\n        },\n        collectors: [\n            {\n                id: COLLECTOR_ID,\n                description: COLLECTOR_DESCRIPTION,\n                pre_queue_workflow_id: PRE_QUEUE_WORKFLOW_ID,\n                post_queue_workflow_id: POST_QUEUE_WORKFLOW_ID,\n                collector_source: {\n                    api_post_model_outputs_collector_source: {\n                        model_user_id: USER_ID,\n                        model_app_id: APP_ID,\n                        model_id: MODEL_ID,\n                        model_version_id: MODEL_VERSION_ID,\n                        post_inputs_key_id: POST_INPUTS_KEY_ID\n                    }\n                }\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            console.log(response.status);\n            throw new Error(\"Post collectors failed, status: \" + response.status.description);\n        }\n    }\n);")),(0,r.kt)(s.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview\n\nMultiCollectorResponse postCollectorsResponse = stub.postCollectors(\n    PostCollectorsRequest.newBuilder()\n        .addCollectors(\n            Collector.newBuilder()\n                .setId("{YOUR_COLLECTOR_ID}")\n                .setDescription("{YOUR_COLLECTOR_DESCRIPTION}")\n                .setPreQueueWorkflowId("{YOUR_PRE_QUEUE_WORKFLOW_ID}")\n                .setPostQueueWorkflowId("{YOUR_POST_QUEUE_WORKFLOW_ID}")\n                .setCollectorSource(\n                    CollectorSource.newBuilder()\n                        .setApiPostModelOutputsCollectorSource(\n                            APIPostModelOutputsCollectorSource.newBuilder()\n                                .setModelUserId("{YOUR_MODEL_USER_ID}")\n                                .setModelAppId("{YOUR_MODEL_APP_ID}")\n                                .setModelId("{YOUR_MODEL_ID}")\n                                .setModelVersionId("{YOUR_MODEL_VERSION_ID}")\n                                .setPostInputsKeyId("{YOUR_API_KEY}")\n                        )\n                )\n        )\n        .build()\n);\n\nif (postCollectorsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n    throw new RuntimeException("Post collectors failed, status: " + postCollectorsResponse.getStatus());\n}\n'))),(0,r.kt)(s.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST \'https://api.clarifai.com/v2/collectors\' \\\n  -H \'Authorization: Key YOUR_API_KEY\' \\\n  -H \'Content-Type: application/json\' \\\n  --data-raw \'{\n    "collectors": [\n        {\n            "id": "{YOUR_COLLECTOR_ID}",\n            "description": "{YOUR_COLLECTOR_DESCRIPTION}",\n            "pre_queue_workflow_id": "{YOUR_PRE_QUEUE_WORKFLOW_ID}",\n            "post_queue_workflow_id": "{YOUR_POST_QUEUE_WORKFLOW_ID}",\n            "collector_source": {\n                "api_post_model_outputs_collector_source": {\n                    "model_user_id": "{YOUR_MODEL_USER_ID]",\n                    "model_app_id": "{YOUR_MODEL_APP_ID}",\n                    "model_id": "{YOUR_MODEL_ID}",\n                    "model_version_id": "{YOUR_MODEL_VERSION_ID}",\n                    "post_inputs_key_id": "{YOUR_API_KEY}"\n                }\n            }\n       }\n    ]\n}\'\n')))),(0,r.kt)("h2",{id:"update-collector"},"Update Collector"),(0,r.kt)("p",null,"Update an existing collector."),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,r.kt)(i.Z,{className:"language-python",mdxType:"CodeBlock"},"###############################################################################\n# In this section, we set the user authentication, app ID, and details of the\n# collector we want to update. Change these strings to run your own example.\n###############################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to update your own collector\nCOLLECTOR_ID = 'YOUR_COLLECTOR_ID_HERE'\nCOLLECTOR_DESCRIPTION = 'YOUR_COLLECTOR_DESCRIPTION_HERE'\nPRE_QUEUE_WORKFLOW_ID = 'YOUR_PRE_WORKFLOW_ID_HERE'\nPOST_QUEUE_WORKFLOW_ID = 'YOUR_POST_WORKFLOW_ID_HERE'\nMODEL_ID = 'YOUR_MODEL_ID_HERE'\nMODEL_VERSION_ID = 'YOUR_MODEL_VERSION_ID_HERE' \nPOST_INPUTS_KEY_ID = 'YOUR_KEY_ID_HERE'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID) # The userDataObject is required when using a PAT\n\npatch_collectors_response = stub.PatchCollectors(\n    service_pb2.PatchCollectorsRequest(\n        user_app_id=userDataObject,\n        action = 'overwrite',\n        collectors=[\n            resources_pb2.Collector(\n                id=COLLECTOR_ID,\n                description=COLLECTOR_DESCRIPTION,\n                pre_queue_workflow_id=PRE_QUEUE_WORKFLOW_ID,\n                post_queue_workflow_id=POST_QUEUE_WORKFLOW_ID,\n                collector_source=resources_pb2.CollectorSource(\n                    api_post_model_outputs_collector_source=resources_pb2.APIPostModelOutputsCollectorSource(\n                        model_user_id=USER_ID,\n                        model_app_id=APP_ID,\n                        model_id=MODEL_ID,\n                        model_version_id=MODEL_VERSION_ID,\n                        post_inputs_key_id=POST_INPUTS_KEY_ID\n                    )\n                )\n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif patch_collectors_response.status.code != status_code_pb2.SUCCESS:\n    print(patch_collectors_response.status)  \n    raise Exception(\"Patch collectors failed, status: \" + patch_collectors_response.status.description)\n    ")),(0,r.kt)(s.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,r.kt)(i.Z,{className:"language-javascript",mdxType:"CodeBlock"},"//index.js file\n\n////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and details of the\n// collector we want to update. Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = 'YOUR_USER_ID_HERE';\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\nconst PAT = 'YOUR_PAT_HERE';\nconst APP_ID = 'YOUR_APP_ID_HERE';\n// Change these to update your own collector\nconst COLLECTOR_ID = 'YOUR_COLLECTOR_ID_HERE';\nconst COLLECTOR_DESCRIPTION = 'YOUR_NEW_COLLECTOR_DESCRIPTION_HERE';\nconst PRE_QUEUE_WORKFLOW_ID = 'YOUR_NEW_PRE_WORKFLOW_ID';\nconst POST_QUEUE_WORKFLOW_ID = 'YOUR_NEW_POST_WORKFLOW_ID';\nconst MODEL_ID = 'YOUR_NEW_MODEL_ID_HERE';\nconst MODEL_VERSION_ID = 'YOUR_NEW_MODEL_VERSION_ID_HERE';\nconst POST_INPUTS_KEY_ID = 'YOUR_API_KEY_HERE';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require(\"clarifai-nodejs-grpc\");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set(\"authorization\", \"Key \" + PAT);\n\nstub.PatchCollectors(\n    {\n        user_app_id: {\n            \"user_id\": USER_ID,\n            \"app_id\": APP_ID\n        },\n        action: \"overwrite\",\n        collectors: [\n            {\n                id: COLLECTOR_ID,\n                description: COLLECTOR_DESCRIPTION,\n                pre_queue_workflow_id: PRE_QUEUE_WORKFLOW_ID,\n                post_queue_workflow_id: POST_QUEUE_WORKFLOW_ID,\n                collector_source: {\n                    api_post_model_outputs_collector_source: {\n                        model_user_id: USER_ID,\n                        model_app_id: APP_ID,\n                        model_id: MODEL_ID,\n                        model_version_id: MODEL_VERSION_ID,\n                        post_inputs_key_id: POST_INPUTS_KEY_ID\n                    }\n                }\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            console.log(response.status);\n            throw new Error(\"Patch collectors failed, status: \" + response.status.description);\n        }\n    }\n);")),(0,r.kt)(s.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview\n\nMultiCollectorResponse patchCollectorsResponse = stub.patchCollectors(\n    PatchCollectorsRequest.newBuilder()\n        .addCollectors(\n            Collector.newBuilder()\n                .setId("{YOUR_COLLECTOR_ID}")\n                .setDescription("{A_NEW_DESCRIPTION}")\n                .setPreQueueWorkflowId("{A_NEW_WORKFLOW_ID}")\n        )\n        .build()\n);\n\nif (patchCollectorsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n    throw new RuntimeException("Patch collectors failed, status: " + patchCollectorsResponse.getStatus());\n}\n'))),(0,r.kt)(s.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X PATCH \'https://api-dev.clarifai.com/v2/collectors\' \\\n  -H \'Authorization: Key YOUR_API_KEY\' \\\n  -H \'Content-Type: application/json\' \\\n  --data-raw \'{\n    "action": "overwrite",\n    "collectors": [\n        {\n            "id": "{YOUR_COLLECTOR_ID}",\n            "description": "{A_NEW_DESCRIPTION}",\n            "pre_queue_workflow_id": "{A_NEW_WORKFLOW_ID}"\n       }\n    ]\n}\'\n')))),(0,r.kt)("h2",{id:"list-collectors"},"List Collectors"),(0,r.kt)("p",null,"List all the collectors. See ",(0,r.kt)("a",{parentName:"p",href:"https://docs.clarifai.com/api-guide/advanced-topics/pagination/"},"Pagination")," on how to control which page gets displayed."),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,r.kt)(i.Z,{className:"language-python",mdxType:"CodeBlock"},"##################################################################\n# In this section, we set the user authentication and app ID.\n# Change these strings to run your own example.\n##################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID) # The userDataObject is required when using a PAT\n\nlist_collectors_response = stub.ListCollectors(\n    service_pb2.ListCollectorsRequest(user_app_id=userDataObject),\n    metadata=metadata\n)\n\nif list_collectors_response.status.code != status_code_pb2.SUCCESS:\n    print(list_collectors_response.status)\n    raise Exception(\"List collectors failed, status: \" + list_collectors_response.status.description)\n\nfor collector in list_collectors_response.collectors:\n    print(collector)\n    \nprint(list_collectors_response.collectors)")),(0,r.kt)(s.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,r.kt)(i.Z,{className:"language-javascript",mdxType:"CodeBlock"},'//index.js file\n\n//////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication and app ID.\n// Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.ListCollectors(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        }\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            console.log(response.status);\n            throw new Error("List collectors failed, status: " + response.status.description);\n        }\n\n        for (const collector of response.collectors) {\n            console.log(collector);\n        }\n    }\n);')),(0,r.kt)(s.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview\n\nMultiCollectorResponse listCollectorsResponse = stub.listCollectors(\n    ListCollectorsRequest.newBuilder()\n        .build()\n);\n\nif (listCollectorsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n    throw new RuntimeException("List collectors failed, status: " + listCollectorsResponse.getStatus());\n}\n\nfor (Collector collector : listCollectorsResponse.getCollectorsList()) {\n    System.out.println(collector);\n}\n'))),(0,r.kt)(s.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"curl -X GET 'https://api.clarifai.com/v2/collectors' \\\n  -H 'Authorization: Key YOUR_API_KEY' \\\n  -H 'Content-Type: application/json'\n")))),(0,r.kt)("h2",{id:"get-collector"},"Get Collector"),(0,r.kt)("p",null,"Return details of a certain collector."),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,r.kt)(i.Z,{className:"language-python",mdxType:"CodeBlock"},"#####################################################################################\n# In this section, we set the user authentication, app ID, and ID of the collector\n# we want its details. Change these strings to run your own example.\n#####################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change this to get your own collector\nCOLLECTOR_ID = 'YOUR_COLLECTOR_ID_HERE'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID) # The userDataObject is required when using a PAT\n\nget_collector_response = stub.GetCollector(\n    service_pb2.GetCollectorRequest(\n        user_app_id=userDataObject,\n        collector_id=COLLECTOR_ID\n    ),\n    metadata=metadata\n)\n\nif get_collector_response.status.code != status_code_pb2.SUCCESS:\n    print(get_collector_response.status)\n    raise Exception(\"Get collector failed, status: \" + get_collector_response.status.description)\n\nprint(get_collector_response.collector)")),(0,r.kt)(s.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,r.kt)(i.Z,{className:"language-javascript",mdxType:"CodeBlock"},'//index.js file\n\n//////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and ID of the collector\n// we want its details. Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n// Change this to get your own collector\nconst COLLECTOR_ID = \'YOUR_COLLECTOR_ID_HERE\';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.GetCollector(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        collector_id: COLLECTOR_ID\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            console.log(response.status);\n            throw new Error("Get collector failed, status: " + response.status.description);\n        }\n\n        console.log(response.collector);\n    }\n);')),(0,r.kt)(s.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview\n\nSingleCollectorResponse getCollectorResponse = stub.getCollector(\n    GetCollectorRequest.newBuilder()\n        .setCollectorId("{YOUR_COLLECTOR_ID}")\n        .build()\n);\n\nif (getCollectorResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n    throw new RuntimeException("Get collector failed, status: " + getCollectorResponse.getStatus());\n}\n\nSystem.out.println(getCollectorResponse.getCollector());\n'))),(0,r.kt)(s.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"curl -X GET 'https://api.clarifai.com/v2/collectors/{YOUR_COLLECTOR_ID}' \\\n  -H 'Authorization: Key YOUR_API_KEY' \\\n  -H 'Content-Type: application/json'\n")))),(0,r.kt)("h2",{id:"delete-collector"},"Delete Collector"),(0,r.kt)("p",null,"Delete a collector."),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,r.kt)(i.Z,{className:"language-python",mdxType:"CodeBlock"},"######################################################################################\n# In this section, we set the user authentication, app ID, and IDs of the collectors\n# we want to delete. Change these strings to run your own example.\n######################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to delete your own collectors\nCOLLECTOR_ID_1 = 'YOUR_COLLECTOR_ID_HERE'\nCOLLECTOR_ID_2 = 'YOUR_COLLECTOR_ID_HERE'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\ndelete_collectors_response = stub.DeleteCollectors(\n    service_pb2.DeleteCollectorsRequest(\n        user_app_id=userDataObject,\n        ids=[COLLECTOR_ID_1, COLLECTOR_ID_2],\n        #delete_all=True #Uncomment to delete all your collectors\n    ),\n    metadata=metadata\n)\n\nif delete_collectors_response.status.code != status_code_pb2.SUCCESS:\n    print(delete_collectors_response.status)\n    raise Exception(\"Delete collectors failed, status: \" + delete_collectors_response.status.description)\n")),(0,r.kt)(s.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,r.kt)(i.Z,{className:"language-javascript",mdxType:"CodeBlock"},'//index.js file\n\n///////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and IDs of the collectors\n// we want to delete. Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n// Change these to delete your own collectors\nconst COLLECTOR_ID_1 = \'YOUR_COLLECTOR_ID_HERE\';\nconst COLLECTOR_ID_2 = \'YOUR_COLLECTOR_ID_HERE\';\n\n/////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n/////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.DeleteCollectors(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        ids: [COLLECTOR_ID_1, COLLECTOR_ID_2],\n        //delete_all: true //Uncomment to delete all your collectors\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            console.log(response.status);\n            throw new Error("Delete collectors failed, status: " + response.status.description);\n        }\n\n        console.log(response.collector);\n    }\n);')),(0,r.kt)(s.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview\n\nBaseResponse deleteCollectorsResponse = stub.deleteCollectors(\n    DeleteCollectorsRequest.newBuilder()\n        .addIds("{YOUR_COLLECTOR_ID}")\n        .build()\n);\n\nif (deleteCollectorsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n    throw new RuntimeException("Delete collectors failed, status: " + deleteCollectorsResponse.getStatus());\n}\n')))))}O.isMDXComponent=!0}}]);
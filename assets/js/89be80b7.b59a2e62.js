"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[5579],{58215:function(e,n,t){var a=t(67294);n.Z=function(e){var n=e.children,t=e.hidden,o=e.className;return a.createElement("div",{role:"tabpanel",hidden:t,className:o},n)}},26396:function(e,n,t){t.d(n,{Z:function(){return d}});var a=t(87462),o=t(67294),i=t(72389),s=t(79443);var r=function(){var e=(0,o.useContext)(s.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},p=t(63616),l=t(86010),c="tabItem_vU9c";function u(e){var n,t,i,s=e.lazy,u=e.block,d=e.defaultValue,_=e.values,h=e.groupId,m=e.className,b=o.Children.map(e.children,(function(e){if((0,o.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),f=null!=_?_:b.map((function(e){var n=e.props;return{value:n.value,label:n.label,attributes:n.attributes}})),g=(0,p.lx)(f,(function(e,n){return e.value===n.value}));if(g.length>0)throw new Error('Docusaurus error: Duplicate values "'+g.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var C=null===d?d:null!=(n=null!=d?d:null==(t=b.find((function(e){return e.props.default})))?void 0:t.props.value)?n:null==(i=b[0])?void 0:i.props.value;if(null!==C&&!f.some((function(e){return e.value===C})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+C+'" but none of its children has the corresponding value. Available values are: '+f.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var E=r(),T=E.tabGroupChoices,y=E.setTabGroupChoices,I=(0,o.useState)(C),R=I[0],v=I[1],O=[],N=(0,p.o5)().blockElementScrollPositionUntilNextRender;if(null!=h){var k=T[h];null!=k&&k!==R&&f.some((function(e){return e.value===k}))&&v(k)}var P=function(e){var n=e.currentTarget,t=O.indexOf(n),a=f[t].value;a!==R&&(N(n),v(a),null!=h&&y(h,a))},w=function(e){var n,t=null;switch(e.key){case"ArrowRight":var a=O.indexOf(e.currentTarget)+1;t=O[a]||O[0];break;case"ArrowLeft":var o=O.indexOf(e.currentTarget)-1;t=O[o]||O[O.length-1]}null==(n=t)||n.focus()};return o.createElement("div",{className:"tabs-container"},o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":u},m)},f.map((function(e){var n=e.value,t=e.label,i=e.attributes;return o.createElement("li",(0,a.Z)({role:"tab",tabIndex:R===n?0:-1,"aria-selected":R===n,key:n,ref:function(e){return O.push(e)},onKeyDown:w,onFocus:P,onClick:P},i,{className:(0,l.Z)("tabs__item",c,null==i?void 0:i.className,{"tabs__item--active":R===n})}),null!=t?t:n)}))),s?(0,o.cloneElement)(b.filter((function(e){return e.props.value===R}))[0],{className:"margin-vert--md"}):o.createElement("div",{className:"margin-vert--md"},b.map((function(e,n){return(0,o.cloneElement)(e,{key:n,hidden:e.props.value!==R})}))))}function d(e){var n=(0,i.Z)();return o.createElement(u,(0,a.Z)({key:String(n)},e))}},49866:function(e,n,t){t.r(n),t.d(n,{contentTitle:function(){return u},default:function(){return m},frontMatter:function(){return c},metadata:function(){return d},toc:function(){return _}});var a=t(87462),o=t(63366),i=(t(67294),t(3905)),s=t(26396),r=t(58215),p=t(19055),l=["components"],c={description:"Connect the knowledge gained by different models.",sidebar_position:4},u="Knowledge Graph",d={unversionedId:"api-guide/concepts/knowledge_graph",id:"api-guide/concepts/knowledge_graph",title:"Knowledge Graph",description:"Connect the knowledge gained by different models.",source:"@site/docs/api-guide/concepts/knowledge_graph.md",sourceDirName:"api-guide/concepts",slug:"/api-guide/concepts/knowledge_graph",permalink:"/api-guide/concepts/knowledge_graph",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/api-guide/concepts/knowledge_graph.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{description:"Connect the knowledge gained by different models.",sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Search by Concept",permalink:"/api-guide/concepts/search-by-concept"},next:{title:"Labeling Your Data",permalink:"/api-guide/annotate/"}},_=[{value:"Create Relations",id:"create-relations",children:[],level:2},{value:"List Existing Relations",id:"list-existing-relations",children:[],level:2},{value:"Delete Relations",id:"delete-relations",children:[],level:2}],h={toc:_};function m(e){var n=e.components,c=(0,o.Z)(e,l);return(0,i.kt)("wrapper",(0,a.Z)({},h,c,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"knowledge-graph"},"Knowledge Graph"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Connect the knowledge gained by different models")),(0,i.kt)("hr",null),(0,i.kt)("p",null,(0,i.kt)("img",{src:t(62140).Z})),(0,i.kt)("p",null,"The Knowledge Graph uses Clarifai's concept mapping model to establish a hierarchical relationship between your concepts."),(0,i.kt)("p",null,"It uses three different ",(0,i.kt)("em",{parentName:"p"},"predicates")," to organize your concepts: hypernyms, hyponyms, and synonyms."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Hyponym")," \u2014 represents an 'is a kind of' relation. For example, the relationship described as 'honey' ","(","subject",")",", 'hyponym' ","(","predicate",")",", 'food' ","(","object",")"," is more easily read as 'honey' 'is a kind of' 'food'."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Hypernym")," \u2014 is the opposite of 'hyponym'. When you add the relationship, the opposite will automatically appear in your queries. An 'hypernym' can be read as 'is a parent of'. For example, 'food' ","(","subject",")",", 'hypernym' ","(","predicate",")",", 'honey' ","(","object",")"," is more easily read as 'food' is a parent of 'honey'."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Synonym"),' \u2014 defines two concepts that essentially mean the same thing. This is more like an "is" relationship. For example, a \'synonym\' relationship could be "puppy" is "pup". The reverse is also true if the former is added; so, "pup" is "puppy" will appear in queries as well.'),(0,i.kt)("h2",{id:"create-relations"},"Create Relations"),(0,i.kt)("p",null,"To create a relation between two concepts, you first have to create them in your custom model. See ",(0,i.kt)("a",{parentName:"p",href:"/api-guide/concepts/create-get-update"},"the Concepts page")," on how to do that programatically."),(0,i.kt)("p",null,"Each relation should have a specified predicate, which can be ",(0,i.kt)("em",{parentName:"p"},"hyponym"),", ",(0,i.kt)("em",{parentName:"p"},"hypernym"),", or ",(0,i.kt)("em",{parentName:"p"},"synonym"),"."),(0,i.kt)("p",null,"Below is an example of how to create a relation between two concepts. "),(0,i.kt)("p",null,"Note that the initialization code used here is outlined in detail on the ",(0,i.kt)("a",{parentName:"p",href:"../api-overview/api-clients#client-installation-instructions"},"client installation page.")),(0,i.kt)(s.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,i.kt)(p.Z,{className:"language-python",mdxType:"CodeBlock"},"###################################################################################\n# In this section, we set the user authentication, app ID, subject concept ID, \n# object concept ID, and predicate. Change these strings to run your own example.\n###################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to whatever relation you want to create\nSUBJECT_CONCEPT_ID = 'honey'\nOBJECT_CONCEPT_ID = 'food'\nPREDICATE = \"hypernym\" # This can be hypernym, hyponym, or synonym\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\npost_concept_relation_response = stub.PostConceptRelations(\n    service_pb2.PostConceptRelationsRequest(\n        user_app_id=resources_pb2.UserAppIDSet(\n            user_id=USER_ID,\n            app_id=APP_ID\n        ),\n        concept_id=SUBJECT_CONCEPT_ID,\n        concept_relations=[\n            resources_pb2.ConceptRelation(\n                object_concept=resources_pb2.Concept(id=OBJECT_CONCEPT_ID),\n                predicate=PREDICATE\n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif post_concept_relation_response.status.code != status_code_pb2.SUCCESS:\n    print(post_concept_relation_response.status)\n    raise Exception(\"Post concept relation failed, status: \" + post_concept_relation_response.status.description)\n    \nprint(post_concept_relation_response)")),(0,i.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nMultiConceptRelationResponse postConceptRelationsResponse = stub.postConceptRelations(\n    PostConceptRelationsRequest.newBuilder()\n        .setUserAppId(\n            UserAppIDSet.newBuilder()\n                .setAppId("{YOUR_APP_ID}")\n                .build()\n        )\n        .setConceptId("{YOUR_SUBJECT_CONCEPT_ID}")\n        .addConceptRelations(\n            ConceptRelation.newBuilder()\n                .setObjectConcept(Concept.newBuilder().setId("{YOUR_OBJECT_CONCEPT_ID}").build())\n                .setPredicate("hypernym").build()) // This can be hypernym, hypnonym, or synonym.\n        .build()\n);\n\nif (postConceptRelationsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n    throw new RuntimeException("Post concept relations failed, status: " + postConceptRelationsResponse.getStatus());\n}\n'))),(0,i.kt)(r.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nstub.PostConceptRelations(\n    {\n        user_app_id: {\n            app_id: "{YOUR_APP_ID}"\n        },\n        concept_id: "{YOUR_SUBJECT_CONCEPT_ID}",\n        concept_relations: [\n            {\n                object_concept: {\n                    id: "{YOUR_OBJECT_CONCEPT_ID}",\n                },\n                predicate: "hypernym" // This can be hypernym, hyponym, or synonym.\n            }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Create concept relations failed, status: " + response.status.description);\n        }\n    }\n);\n'))),(0,i.kt)(r.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST \'https://api.clarifai.com/v2/users/me/apps/{YOUR_APP_ID}/concepts/{YOUR_SUBJECT_CONCEPT_ID}/relations\' \\\n    -H \'Authorization: Key {YOUR_PERSONAL_ACCESS_TOKEN}\' \\\n    -H \'Content-Type: application/json\' \\\n    --data-raw \'{\n        "concept_relations": [\n            {\n                "object_concept": {\n                    "id": "{YOUR_OBJECT_CONCEPT_ID}"\n                },\n                "predicate": "hypernym"\n            }\n        ]\n    }\'\n'))),(0,i.kt)(r.Z,{value:"js_rest",label:"Javascript (REST)",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'const appId = \'{YOUR_APP_ID}\'\nconst subjectConceptId = \'{YOUR_SUBJECT_CONCEPT_ID}\'\n\nconst raw = JSON.stringify({\n    "user_app_id": {\n        "user_id": "{YOUR_USER_ID}",\n        "app_id": "{YOUR_APP_ID}"\n    },\n  "concept_relations": [\n      {\n          "object_concept": {\n              "id": "{YOUR_OBJECT_CONCEPT_ID}"\n          },\n          "predicate": "hypernym"\n      }\n  ]\n});\n\nconst requestOptions = {\n  method: \'POST\',\n  headers: {\n    \'Accept\': \'application/json\',\n    \'Authorization\': \'Key {YOUR_PERSONAL_TOKEN}\'\n  },\n  body: raw\n};\n\nfetch(`https://api.clarifai.com/v2/users/me/apps/${appId}/concepts/${subjectConceptId}/relations`, requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log(\'error\', error));\n')))),(0,i.kt)("details",null,(0,i.kt)("summary",null,"JSON Output Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'status {\n  code: SUCCESS\n  description: "Ok"\n  req_id: "0d0a5ec5df14d62a7d660f392ce26727"\n}\nconcept_relations {\n  id: "2d794e5ede534500b4ac7da44ef570ee"\n  subject_concept {\n    id: "honey"\n    name: "honey"\n    value: 1.0\n    created_at {\n      seconds: 1643976334\n      nanos: 237961000\n    }\n    language: "en"\n    app_id: "a39423543bb941bf9ba2ee95fad11f0a"\n    visibility {\n      gettable: PRIVATE\n    }\n    user_id: "e5y2lteoz3s3iy"\n  }\n  object_concept {\n    id: "food"\n    name: "food"\n    value: 1.0\n    created_at {\n      seconds: 1643976326\n      nanos: 123719000\n    }\n    language: "en"\n    app_id: "a39423543bb941bf9ba2ee95fad11f0a"\n    visibility {\n      gettable: PRIVATE\n    }\n    user_id: "ei2leoz3s3iy"\n  }\n  predicate: "hypernym"\n  visibility {\n    gettable: PRIVATE\n  }\n}\n'))),(0,i.kt)("h2",{id:"list-existing-relations"},"List Existing Relations"),(0,i.kt)("p",null,"Below is an example of how to list existing relations between concepts. "),(0,i.kt)("p",null,"Note that the initialization code used here is outlined in detail on the ",(0,i.kt)("a",{parentName:"p",href:"../api-overview/api-clients#client-installation-instructions"},"client installation page.")),(0,i.kt)(s.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,i.kt)(p.Z,{className:"language-python",mdxType:"CodeBlock"},"######################################################################################\n# In this section, we set the user authentication, app ID, concept ID, and predicate. \n# Change these strings to run your own example.\n######################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to whatever concept you want to list its relations\nCONCEPT_ID = 'honey'\nPREDICATE = \"hypernym\" # This is optional. If skipped, all concept's relations will be returned\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nlist_concept_relation_response = stub.ListConceptRelations(\n    service_pb2.ListConceptRelationsRequest(\n        user_app_id=resources_pb2.UserAppIDSet(\n            user_id=USER_ID,\n            app_id=APP_ID\n        ),\n        concept_id=CONCEPT_ID,\n        predicate=PREDICATE  \n    ),\n    metadata=metadata\n)\n\nif list_concept_relation_response.status.code != status_code_pb2.SUCCESS:\n    print(list_concept_relation_response.status)\n    raise Exception(\"List concept relation failed, status: \" + list_concept_relation_response.status.description)\n\nfor relation in list_concept_relation_response.concept_relations:\n    print(relation) \n")),(0,i.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nMultiConceptRelationResponse listConceptRelationsResponse = stub.listConceptRelations(\n    ListConceptRelationsRequest.newBuilder()\n        .setUserAppId(\n            UserAppIDSet.newBuilder()\n                .setAppId("{YOUR_APP_ID}")\n                .build()\n        )\n        .setConceptId("{YOUR_CONCEPT_ID}")\n        .setPredicate("hypernym")  // This is optional. If skipped, all concept\'s relations will be returned.\n        .build()\n);\n\n\nif (listConceptRelationsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n    throw new RuntimeException("List concept relations failed, status: " + listConceptRelationsResponse.getStatus());\n}\n\nfor (ConceptRelation relation : listConceptRelationsResponse.getConceptRelationsList()) {\n    System.out.println(relation);\n}\n'))),(0,i.kt)(r.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nstub.ListConceptRelations(\n    {\n        user_app_id: {\n            app_id: "{YOUR_APP_ID}"\n        },\n        concept_id: "{YOUR_CONCEPT_ID}",\n        predicate: "hypernym" // This is optional. If skipped, all concept\'s relations will be returned.\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("List concept relations failed, status: " + response.status.description);\n        }\n\n        for (const relation of response.concept_relations) {\n            console.log(relation);\n        }\n    }\n);\n'))),(0,i.kt)(r.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"# Setting the predicate GET parameter is optional. If skipped, all concept's relations will be returned.\ncurl -X GET 'https://api.clarifai.com/v2/users/me/apps/{YOUR_APP_ID}/concepts/{YOUR_CONCEPT_ID}/relations?predicate=hypernym' \\\n    -H 'Authorization: Key {YOUR_PERSONAL_ACCESS_TOKEN}' \\\n    -H 'Content-Type: application/json'\n"))),(0,i.kt)(r.Z,{value:"js_rest",label:"Javascript (REST)",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const appId = '{YOUR_APP_ID}'\nconst conceptId = '{YOUR_CONCEPT_ID}'\n\nconst requestOptions = {\n  method: 'GET',\n  headers: {\n    'Accept': 'application/json',\n    'Authorization': 'Key {YOUR_PERSONAL_TOKEN}'\n  }\n};\n\n// Setting the predicate GET parameter is optional. If skipped, all concept's relations will be returned\nfetch(`https://api.clarifai.com/v2/users/me/apps/${appId}/concepts/${conceptId}/relations?predicate=hypernym`, requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log('error', error));\n")))),(0,i.kt)("details",null,(0,i.kt)("summary",null,"JSON Output Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'id: "2d794e5ede534500b4ac7da44ef570ee"\nsubject_concept {\n  id: "honey"\n  name: "honey"\n  value: 1.0\n  created_at {\n    seconds: 1643976334\n    nanos: 237961000\n  }\n  language: "en"\n  app_id: "a39423543bb941bf9ba2ee95fad11f0a"\n  visibility {\n    gettable: PRIVATE\n  }\n  user_id: "ei2leoz3s3iy"\n}\nobject_concept {\n  id: "food"\n  name: "food"\n  value: 1.0\n  created_at {\n    seconds: 1643976326\n    nanos: 123719000\n  }\n  language: "en"\n  app_id: "a39423543bb941bf9ba2ee95fad11f0a"\n  visibility {\n    gettable: PRIVATE\n  }\n  user_id: "ei2leoz3s3iy"\n}\npredicate: "hypernym"\nvisibility {\n  gettable: PRIVATE\n}\n'))),(0,i.kt)("h2",{id:"delete-relations"},"Delete Relations"),(0,i.kt)("p",null,"Below is an example of how to delete relations between concepts. "),(0,i.kt)("p",null,"Note that the initialization code used here is outlined in detail on the ",(0,i.kt)("a",{parentName:"p",href:"../api-overview/api-clients#client-installation-instructions"},"client installation page.")),(0,i.kt)(s.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,i.kt)(p.Z,{className:"language-python",mdxType:"CodeBlock"},"###################################################################################\n# In this section, we set the user authentication, app ID, object concept ID, and\n# concept relation IDs. Change these strings to run your own example.\n####################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the portal under Authentification\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to whatever relations you want to delete\nOBJECT_CONCEPT_ID = 'YOUR_OBJECT_CONCEPT_ID_HERE'\nCONCEPT_RELATION_IDs = ['YOUR_CONCEPT_RELATION_IDs_HERE']\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\ndelete_concept_relation_response = stub.DeleteConceptRelations(\n    service_pb2.DeleteConceptRelationsRequest(\n        user_app_id=resources_pb2.UserAppIDSet(\n            user_id=USER_ID,\n            app_id=APP_ID\n        ),\n        concept_id=OBJECT_CONCEPT_ID,\n        ids=CONCEPT_RELATION_IDs\n    ),\n    metadata=metadata\n)\n\nif delete_concept_relation_response.status.code != status_code_pb2.SUCCESS:\n    print(delete_concept_relation_response.status)\n    raise Exception(\"Delete concept relation failed, status: \" + delete_concept_relation_response.status.description)\n\n")),(0,i.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nBaseResponse deleteConceptRelationsResponse = stub.deleteConceptRelations(\n    DeleteConceptRelationsRequest.newBuilder()\n        .setUserAppId(\n            UserAppIDSet.newBuilder().setAppId("{YOUR_APP_ID}").build()\n        )\n        .addIds("{YOUR_CONCEPT_RELATION_ID}")\n        .setConceptId("{YOUR_OBJECT_CONCEPT_ID}")\n        .build()\n);\n\nif (deleteConceptRelationsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n    throw new RuntimeException("Delete concept relations failed, status: " + deleteConceptRelationsResponse.getStatus());\n}\n'))),(0,i.kt)(r.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nstub.DeleteConceptRelations(\n    {\n        user_app_id: {\n            app_id: "{YOUR_APP_ID}"\n        },\n        concept_id: "{YOUR_OBJECT_CONCEPT_ID}",\n        ids: [\n            "{YOUR_CONCEPT_RELATION_ID}"\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Delete concept relations failed, status: " + response.status.description);\n        }\n    }\n);\n'))),(0,i.kt)(r.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"curl -X DELETE 'https://api.clarifai.com/v2/users/me/apps/{YOUR_APP_ID}/concepts/{YOUR_OBJECT_CONCEPT_ID}/relations' \\\n    -H 'Authorization: Key {YOUR_PERSONAL_ACCESS_TOKEN}' \\\n    -H 'Content-Type: application/json' \\\n    --data-raw '{\n        \"ids\": [\n            \"{YOUR_CONCEPT_RELATION_ID}\"\n        ]\n    }'\n"))),(0,i.kt)(r.Z,{value:"js_rest",label:"Javascript (REST)",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const appId = '{YOUR_APP_ID}'\nconst conceptId = '{YOUR_CONCEPT_ID}'\n\nconst raw = JSON.stringify({\n    \"ids\": [\n      \"{YOUR_CONCEPT_RELATION_ID}\"\n  ]\n})\n\nconst requestOptions = {\n  method: 'DELETE',\n  headers: {\n    'Accept': 'application/json',\n    'Authorization': 'Key {YOUR_PERSONAL_TOKEN}'\n  }\n};\n\nfetch(`https://api.clarifai.com/v2/users/me/apps/${appId}/concepts/${conceptId}/relations`, requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log('error', error));\n")))))}m.isMDXComponent=!0},62140:function(e,n,t){n.Z=t.p+"assets/images/kg6-845a036f5276eb9b39c7349452d1f495.png"}}]);
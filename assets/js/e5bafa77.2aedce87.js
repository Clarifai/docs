"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[9353],{3905:function(n,e,a){a.d(e,{Zo:function(){return l},kt:function(){return c}});var i=a(7294);function t(n,e,a){return e in n?Object.defineProperty(n,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):n[e]=a,n}function o(n,e){var a=Object.keys(n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),a.push.apply(a,i)}return a}function p(n){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?o(Object(a),!0).forEach((function(e){t(n,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(a,e))}))}return n}function s(n,e){if(null==n)return{};var a,i,t=function(n,e){if(null==n)return{};var a,i,t={},o=Object.keys(n);for(i=0;i<o.length;i++)a=o[i],e.indexOf(a)>=0||(t[a]=n[a]);return t}(n,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(i=0;i<o.length;i++)a=o[i],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(n,a)&&(t[a]=n[a])}return t}var d=i.createContext({}),r=function(n){var e=i.useContext(d),a=e;return n&&(a="function"==typeof n?n(e):p(p({},e),n)),a},l=function(n){var e=r(n.components);return i.createElement(d.Provider,{value:e},n.children)},u={inlineCode:"code",wrapper:function(n){var e=n.children;return i.createElement(i.Fragment,{},e)}},m=i.forwardRef((function(n,e){var a=n.components,t=n.mdxType,o=n.originalType,d=n.parentName,l=s(n,["components","mdxType","originalType","parentName"]),m=r(a),c=t,_=m["".concat(d,".").concat(c)]||m[c]||u[c]||o;return a?i.createElement(_,p(p({ref:e},l),{},{components:a})):i.createElement(_,p({ref:e},l))}));function c(n,e){var a=arguments,t=e&&e.mdxType;if("string"==typeof n||t){var o=a.length,p=new Array(o);p[0]=m;var s={};for(var d in e)hasOwnProperty.call(e,d)&&(s[d]=e[d]);s.originalType=n,s.mdxType="string"==typeof n?n:t,p[1]=s;for(var r=2;r<o;r++)p[r]=a[r];return i.createElement.apply(null,p)}return i.createElement.apply(null,a)}m.displayName="MDXCreateElement"},8215:function(n,e,a){var i=a(7294);e.Z=function(n){var e=n.children,a=n.hidden,t=n.className;return i.createElement("div",{role:"tabpanel",hidden:a,className:t},e)}},6396:function(n,e,a){a.d(e,{Z:function(){return m}});var i=a(7462),t=a(7294),o=a(2389),p=a(9443);var s=function(){var n=(0,t.useContext)(p.Z);if(null==n)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return n},d=a(3616),r=a(6010),l="tabItem_vU9c";function u(n){var e,a,o,p=n.lazy,u=n.block,m=n.defaultValue,c=n.values,_=n.groupId,f=n.className,v=t.Children.map(n.children,(function(n){if((0,t.isValidElement)(n)&&void 0!==n.props.value)return n;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof n.type?n.type:n.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),h=null!=c?c:v.map((function(n){var e=n.props;return{value:e.value,label:e.label,attributes:e.attributes}})),b=(0,d.lx)(h,(function(n,e){return n.value===e.value}));if(b.length>0)throw new Error('Docusaurus error: Duplicate values "'+b.map((function(n){return n.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var g=null===m?m:null!=(e=null!=m?m:null==(a=v.find((function(n){return n.props.default})))?void 0:a.props.value)?e:null==(o=v[0])?void 0:o.props.value;if(null!==g&&!h.some((function(n){return n.value===g})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+g+'" but none of its children has the corresponding value. Available values are: '+h.map((function(n){return n.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var w=s(),D=w.tabGroupChoices,O=w.setTabGroupChoices,y=(0,t.useState)(g),T=y[0],k=y[1],I=[],N=(0,d.o5)().blockElementScrollPositionUntilNextRender;if(null!=_){var R=D[_];null!=R&&R!==T&&h.some((function(n){return n.value===R}))&&k(R)}var x=function(n){var e=n.currentTarget,a=I.indexOf(e),i=h[a].value;i!==T&&(N(e),k(i),null!=_&&O(_,i))},P=function(n){var e,a=null;switch(n.key){case"ArrowRight":var i=I.indexOf(n.currentTarget)+1;a=I[i]||I[0];break;case"ArrowLeft":var t=I.indexOf(n.currentTarget)-1;a=I[t]||I[I.length-1]}null==(e=a)||e.focus()};return t.createElement("div",{className:"tabs-container"},t.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":u},f)},h.map((function(n){var e=n.value,a=n.label,o=n.attributes;return t.createElement("li",(0,i.Z)({role:"tab",tabIndex:T===e?0:-1,"aria-selected":T===e,key:e,ref:function(n){return I.push(n)},onKeyDown:P,onFocus:x,onClick:x},o,{className:(0,r.Z)("tabs__item",l,null==o?void 0:o.className,{"tabs__item--active":T===e})}),null!=a?a:e)}))),p?(0,t.cloneElement)(v.filter((function(n){return n.props.value===T}))[0],{className:"margin-vert--md"}):t.createElement("div",{className:"margin-vert--md"},v.map((function(n,e){return(0,t.cloneElement)(n,{key:e,hidden:n.props.value!==T})}))))}function m(n){var e=(0,o.Z)();return t.createElement(u,(0,i.Z)({key:String(e)},n))}},7839:function(n,e,a){a.r(e),a.d(e,{frontMatter:function(){return r},contentTitle:function(){return l},metadata:function(){return u},toc:function(){return m},default:function(){return _}});var i=a(7462),t=a(3366),o=(a(7294),a(3905)),p=a(6396),s=a(8215),d=["components"],r={description:"Make predictions on video inputs",sidebar_position:2},l="Video",u={unversionedId:"api-guide/predict/video",id:"api-guide/predict/video",title:"Video",description:"Make predictions on video inputs",source:"@site/docs/api-guide/predict/video.md",sourceDirName:"api-guide/predict",slug:"/api-guide/predict/video",permalink:"/api-guide/predict/video",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/api-guide/predict/video.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{description:"Make predictions on video inputs",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Images",permalink:"/api-guide/predict/images"},next:{title:"Text",permalink:"/api-guide/predict/text"}},m=[],c={toc:m};function _(n){var e=n.components,a=(0,t.Z)(n,d);return(0,o.kt)("wrapper",(0,i.Z)({},c,a,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"video"},"Video"),(0,o.kt)("p",null,"With a video input, the Predict API response will return a list of predicted concepts for every frame of a video. By default, video is processed at 1 frame per second ","(","but this is configurable in the predict request",")",". This means you will receive a list of concepts for every second of your video."),(0,o.kt)("p",null,"You can run Predict on your video using a select number of ",(0,o.kt)("a",{parentName:"p",href:"https://www.clarifai.com/models"},"Clarifai Models"),". The models that are currently supported are: Apparel, Food, General, NSFW, Travel, and Wedding. You make an API call by providing the ",(0,o.kt)("inlineCode",{parentName:"p"},"{model-id}")," parameter and your data parameter is ",(0,o.kt)("inlineCode",{parentName:"p"},"video")," instead of ",(0,o.kt)("inlineCode",{parentName:"p"},"image"),"."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Video limits")),(0,o.kt)("p",null,"The Predict API has limits to the length and size it can support. A video, uploaded through URL, can be anywhere up to 80MB in size or 10mins in length. When a video is sent through by bytes, the Predict API can support 10MB in size."),(0,o.kt)("p",null,"If your video exceeds the limits, please follow our ",(0,o.kt)("a",{parentName:"p",href:"https://www.clarifai.com/blog/splitting-video-into-smaller-pieces"},"tutorial")," on how to break up a large video into smaller components, and send those into the Video API. Otherwise, the processing will time out and you will receive an error response."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Via URL")),(0,o.kt)("p",null,"Below is an example of how you would send video URLs and receive back predictions from the ",(0,o.kt)("inlineCode",{parentName:"p"},"general")," model."),(0,o.kt)(p.Z,{mdxType:"Tabs"},(0,o.kt)(s.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'# Insert here the initialization code as outlined on this page:\n# https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\npost_model_outputs_response = stub.PostModelOutputs(\n    service_pb2.PostModelOutputsRequest(\n        user_app_id=userDataObject,  # The userDataObject is created in the overview and is required when using a PAT\n        model_id="{THE_MODEL_ID}",\n        version_id="{THE_MODEL_VERSION_ID}",  # This is optional. Defaults to the latest model version.\n        inputs=[\n            resources_pb2.Input(\n                data=resources_pb2.Data(\n                    video=resources_pb2.Video(\n                        url="https://samples.clarifai.com/beer.mp4"\n                    )\n                )\n            )\n        ]\n    ),\n    metadata=metadata\n)\nif post_model_outputs_response.status.code != status_code_pb2.SUCCESS:\n    print(post_model_outputs_response.status)\n    raise Exception("Post model outputs failed, status: " + post_model_outputs_response.status.description)\n\n# Since we have one input, one output will exist here.\noutput = post_model_outputs_response.outputs[0]\n\n# A separate prediction is available for each "frame".\nfor frame in output.data.frames:\n    print("Predicted concepts on frame " + str(frame.frame_info.time) + ":")\n    for concept in frame.data.concepts:\n        print("\\t%s %.2f" % (concept.name, concept.value))\n'))),(0,o.kt)(s.Z,{value:"php",label:"PHP",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n# Insert here the initialization code as outlined on this page:\n# https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\n///////////////////////////////////////////////////////////////////////////////\n// Specifying the Request Data\n///////////////////////////////////////////////////////////////////////////////\n//\n// In the Clarifai platform a video is defined by a special Video object.\n// There are several ways in which an Video object can be populated including\n// by url and video bytes (base64).\n//\n$video = new Video([\n    'url' => 'https://samples.clarifai.com/beer.mp4'\n]);\n\n//\n// After a Video object is created, a Data object is constructed around it.\n// The Data object offers a container that contains additional video independent\n// metadata.  In this particular use case, no other metadata is needed to be\n// specified.\n//\n$data = new Data([\n    'video' => $video\n]);\n\n//\n// The Data object is then wrapped in an Input object in order to meet the\n// API specification.  Additional fields are available to populate in the Input\n// object, but for the purposes of this example we can send in just the\n// Data object.\n//\n$input = new Input([\n    'data' => $data\n]);\n\n///////////////////////////////////////////////////////////////////////////////\n// Creating the request object \n///////////////////////////////////////////////////////////////////////////////\n//\n// Finally, the request object itself is created.  This object carries the request\n// along with the request status and other metadata related to the request itself.\n// In this example we populate:\n//    - the `user_app_id` field with the UserAppIDSet constructed above\n//    - the `model_id` field with the ID of the model we are referencing\n//    - the `inputs` field with an array of input objects constructed above \n//\n$request = new PostModelOutputsRequest([\n    'user_app_id' => $userDataObject, // This is defined above\n    'model_id' => 'aaa03c23b3724a16a56b629203edc62c',  // This is the ID of the publicly available General model.\n    'inputs' => [$input]\n]);\n\n///////////////////////////////////////////////////////////////////////////////\n// Making the RPC call\n///////////////////////////////////////////////////////////////////////////////\n//\n// Once the request object is constructed, we can call the actual request to the\n// Clarifai platform.  This uses the opened gRPC client channel to communicate the\n// request and then wait for the response.\n//\n[$response, $status] = $client->PostModelOutputs(\n    $request,\n    $metadata\n)->wait();\n\n///////////////////////////////////////////////////////////////////////////////\n// Handling the Response\n///////////////////////////////////////////////////////////////////////////////\n//\n// The response is returned and the first thing we do is check the status of it.\n// A successful response will have a status code of 0, otherwise there is some \n// reported error.\n//\nif ($status->code !== 0) throw new Exception(\"Error: {$status->details}\");\n\n//\n// In addition to the RPC response status, there is a Clarifai API status that\n// reports if the operationo was a success or failure (not just that the commuunication)\n// was successful.\n//\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    throw new Exception(\"Failure response: \" . $response->getStatus()->getDescription() . \" \" .\n        $response->getStatus()->getDetails());\n}\n\n//\n// The output of a successful call can be used in many ways.  In this example,\n// we loop through all of the frames of the video and print out the predicted \n// concepts for each along with their numerical prediction value (confidence).\n//\nforeach ($output->getData()->getFrames() as $frame) {\n    echo \"Predicted concepts on frame \" . $frame->getFrameInfo()->getTime() . \":\";\n    foreach ($frame->getData()->getConcepts() as $concept) {\n        echo \"   \" . $concept->getName() . \": \" . number_format($concept->getValue(), 2) . \"\\n\";\n    }\n}\n?>\n"))),(0,o.kt)(s.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nMultiOutputResponse postModelOutputsResponse = stub.postModelOutputs(\n    PostModelOutputsRequest.newBuilder()\n        .setModelId("{THE_MODEL_ID}")\n        .setVersionId("{THE_MODEL_VERSION_ID")  // This is optional. Defaults to the latest model version.\n        .addInputs(\n            Input.newBuilder().setData(\n                Data.newBuilder().setVideo(\n                    Video.newBuilder().setUrl("https://samples.clarifai.com/beer.mp4")\n                )\n            )\n        )\n        .build()\n);\n\nif (postModelOutputsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n  throw new RuntimeException("Post model outputs failed, status: " + postModelOutputsResponse.getStatus());\n}\n\n// Since we have one input, one output will exist here.\nOutput output = postModelOutputsResponse.getOutputs(0);\n\n// A separate prediction is available for each "frame".\nfor (Frame frame : output.getData().getFramesList()) {\n    System.out.println("Predicted concepts on frame " + frame.getFrameInfo().getTime() + ":");\n    for (Concept concept : frame.getData().getConceptsList()) {\n        System.out.printf("\\t%s %.2f%n", concept.getName(), concept.getValue());\n    }\n}\n'))),(0,o.kt)(s.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nstub.PostModelOutputs(\n    {\n        model_id: "{THE_MODEL_ID}",\n        version_id: "{THE_MODEL_VERSION_ID}",  // This is optional. Defaults to the latest model version.\n        inputs: [\n            {data: {video: {url: "https://samples.clarifai.com/beer.mp4"}}}\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post model outputs failed, status: " + response.status.description);\n        }\n\n        // Since we have one input, one output will exist here.\n        const output = response.outputs[0]\n\n        // A separate prediction is available for each "frame".\n        for (const frame of output.data.frames) {\n            console.log("Predicted concepts on frame " + frame.frame_info.time + ":");\n            for (const concept of frame.data.concepts) {\n                console.log("\\t" + concept.name + " " + concept.value);\n            }\n        }\n    }\n);\n'))),(0,o.kt)(s.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'\n  {\n    "inputs": [\n      {\n        "data": {\n          "video": {\n            "url": "https://samples.clarifai.com/beer.mp4"\n          }\n        }\n      }\n    ]\n  }\'\\\n  https://api.clarifai.com/v2/models/{THE_MODEL_ID}/versions/{THE_MODEL_VERSION_ID}/outputs\n\n# Model version ID is optional. It defaults to the latest model version.\n'))),(0,o.kt)(s.Z,{value:"js_rest",label:"Javascript (REST)",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'const raw = JSON.stringify({\n    "user_app_id": {\n        "user_id": "{YOUR_USER_ID}",\n        "app_id": "{YOUR_APP_ID}"\n    },\n  "inputs": [\n    {\n      "data": {\n        "video": {\n          "url": "https://samples.clarifai.com/beer.mp4"\n        }\n      }\n    }\n  ]\n});\n\nconst requestOptions = {\n  method: \'POST\',\n  headers: {\n    \'Accept\': \'application/json\',\n    \'Authorization\': \'Key {YOUR_PERSONAL_TOKEN}\'\n  },\n  body: raw\n};\n\n// NOTE: MODEL_VERSION_ID is optional, you can also call prediction with the MODEL_ID only\n// https://api.clarifai.com/v2/models/{YOUR_MODEL_ID}/outputs\n// this will default to the latest version_id\n\nfetch("https://api.clarifai.com/v2/models/{YOUR_MODEL_ID}/versions/{MODEL_VERSION_ID}/outputs", requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log(\'error\', error));\n')))),(0,o.kt)(p.Z,{mdxType:"Tabs"},(0,o.kt)(s.Z,{value:"response_json",label:"Response JSON",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'{\n  "status": {\n    "code": 10000,\n    "description": "Ok"\n  },\n  "outputs": [\n    {\n      "id": "d8234da5d1f04ca8a2e13e34d51f9b85",\n      "status": {\n        "code": 10000,\n        "description": "Ok"\n      },\n      "created_at": "2017-06-28T14:58:41.835370141Z",\n      "model": {\n        "id": "aaa03c23b3724a16a56b629203edc62c",\n        "name": "general-v1.3",\n        "created_at": "2016-03-09T17:11:39.608845Z",\n        "app_id": "main",\n        "output_info": {\n          "message": "Show output_info with: GET /models/{model_id}/output_info",\n          "type": "concept",\n          "type_ext": "concept"\n        },\n        "model_version": {\n          "id": "aa9ca48295b37401f8af92ad1af0d91d",\n          "created_at": "2016-07-13T01:19:12.147644Z",\n          "status": {\n            "code": 21100,\n            "description": "Model trained successfully"\n          }\n        }\n      },\n      "input": {\n        "id": "f0fc1a005f124d389da4d80823a3125b",\n        "data": {\n          "video": {\n            "url": "https://samples.clarifai.com/beer.mp4"\n          }\n        }\n      },\n      "data": {\n        "frames": [\n          {\n            "frame_info": {\n              "index": 0,\n              "time": 0\n            },\n            "data": {\n              "concepts": [\n                {\n                  "id": "ai_zJx6RbxW",\n                  "name": "drink",\n                  "value": 0.98658466,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_mCpQg89c",\n                  "name": "glass",\n                  "value": 0.97975093,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_drK6ClJR",\n                  "name": "alcohol",\n                  "value": 0.9783862,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_8XGJjH7R",\n                  "name": "foam",\n                  "value": 0.97157896,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_TBlp0Pt3",\n                  "name": "beer",\n                  "value": 0.969543,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_SsmKLB4z",\n                  "name": "bar",\n                  "value": 0.96628696,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_5VHsZr8N",\n                  "name": "liquid",\n                  "value": 0.95581007,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_Lq00FggW",\n                  "name": "desktop",\n                  "value": 0.92861253,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_7vR9zv7l",\n                  "name": "bubble",\n                  "value": 0.9082134,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_B3MXt5Ng",\n                  "name": "refreshment",\n                  "value": 0.9020835,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_7Xg5SQRW",\n                  "name": "luxury",\n                  "value": 0.8990605,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_786Zr311",\n                  "name": "no person",\n                  "value": 0.89708906,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_3R5pJ6hB",\n                  "name": "lager",\n                  "value": 0.8938055,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_7qwGxLch",\n                  "name": "gold",\n                  "value": 0.8892093,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_wmbvr5TG",\n                  "name": "celebration",\n                  "value": 0.88606626,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_4lvjn8qv",\n                  "name": "closeup",\n                  "value": 0.881963,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_pkvDRSJ1",\n                  "name": "mug",\n                  "value": 0.8674431,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_12dz73B9",\n                  "name": "bottle",\n                  "value": 0.86288416,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_zFnPQdgB",\n                  "name": "wood",\n                  "value": 0.86252767,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_8LWlDfFD",\n                  "name": "table",\n                  "value": 0.86069393,\n                  "app_id": "main"\n                }\n              ]\n            }\n          },\n          {\n            "frame_info": {\n              "index": 1,\n              "time": 1000\n            },\n            "data": {\n              "concepts": [\n                {\n                  "id": "ai_zJx6RbxW",\n                  "name": "drink",\n                  "value": 0.98658466,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_mCpQg89c",\n                  "name": "glass",\n                  "value": 0.97975093,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_drK6ClJR",\n                  "name": "alcohol",\n                  "value": 0.9783862,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_8XGJjH7R",\n                  "name": "foam",\n                  "value": 0.97157896,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_TBlp0Pt3",\n                  "name": "beer",\n                  "value": 0.969543,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_SsmKLB4z",\n                  "name": "bar",\n                  "value": 0.96628696,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_5VHsZr8N",\n                  "name": "liquid",\n                  "value": 0.95581007,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_7vR9zv7l",\n                  "name": "bubble",\n                  "value": 0.9082134,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_B3MXt5Ng",\n                  "name": "refreshment",\n                  "value": 0.9020835,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_786Zr311",\n                  "name": "no person",\n                  "value": 0.89708906,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_3R5pJ6hB",\n                  "name": "lager",\n                  "value": 0.8938055,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_7qwGxLch",\n                  "name": "gold",\n                  "value": 0.8834515,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_pkvDRSJ1",\n                  "name": "mug",\n                  "value": 0.8674431,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_b01mhdxB",\n                  "name": "party",\n                  "value": 0.8603341,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_XNmzgDnF",\n                  "name": "pub",\n                  "value": 0.85809004,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_2gmKZLxp",\n                  "name": "cold",\n                  "value": 0.85319245,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_Lq00FggW",\n                  "name": "desktop",\n                  "value": 0.8506696,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_54zxXFGL",\n                  "name": "full",\n                  "value": 0.84634554,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_zFnPQdgB",\n                  "name": "wood",\n                  "value": 0.8446485,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_wmbvr5TG",\n                  "name": "celebration",\n                  "value": 0.8383831,\n                  "app_id": "main"\n                }\n              ]\n            }\n          },\n          {\n            "frame_info": {\n              "index": 2,\n              "time": 2000\n            },\n            "data": {\n              "concepts": [\n                {\n                  "id": "ai_zJx6RbxW",\n                  "name": "drink",\n                  "value": 0.9856042,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_mCpQg89c",\n                  "name": "glass",\n                  "value": 0.97975093,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_8XGJjH7R",\n                  "name": "foam",\n                  "value": 0.9755833,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_786Zr311",\n                  "name": "no person",\n                  "value": 0.9733174,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_TBlp0Pt3",\n                  "name": "beer",\n                  "value": 0.969543,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_SsmKLB4z",\n                  "name": "bar",\n                  "value": 0.94170487,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_5VHsZr8N",\n                  "name": "liquid",\n                  "value": 0.92778283,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_2gmKZLxp",\n                  "name": "cold",\n                  "value": 0.9227257,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_3PlgVmlN",\n                  "name": "food",\n                  "value": 0.9179274,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_drK6ClJR",\n                  "name": "alcohol",\n                  "value": 0.90887475,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_B3MXt5Ng",\n                  "name": "refreshment",\n                  "value": 0.9045203,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_3R5pJ6hB",\n                  "name": "lager",\n                  "value": 0.8938055,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_WbwL0pPL",\n                  "name": "breakfast",\n                  "value": 0.87420183,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_54zxXFGL",\n                  "name": "full",\n                  "value": 0.8699659,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_pkvDRSJ1",\n                  "name": "mug",\n                  "value": 0.8674431,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_XNmzgDnF",\n                  "name": "pub",\n                  "value": 0.85809004,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_Lq00FggW",\n                  "name": "desktop",\n                  "value": 0.8506696,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_zFnPQdgB",\n                  "name": "wood",\n                  "value": 0.8446485,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_qNxqNBWN",\n                  "name": "cream",\n                  "value": 0.844169,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_7D0mdp1W",\n                  "name": "delicious",\n                  "value": 0.8397074,\n                  "app_id": "main"\n                }\n              ]\n            }\n          },\n          {\n            "frame_info": {\n              "index": 3,\n              "time": 3000\n            },\n            "data": {\n              "concepts": [\n                {\n                  "id": "ai_8XGJjH7R",\n                  "name": "foam",\n                  "value": 0.996614,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_zJx6RbxW",\n                  "name": "drink",\n                  "value": 0.9794438,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_786Zr311",\n                  "name": "no person",\n                  "value": 0.9733174,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_TBlp0Pt3",\n                  "name": "beer",\n                  "value": 0.9645849,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_mCpQg89c",\n                  "name": "glass",\n                  "value": 0.94761443,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_pkvDRSJ1",\n                  "name": "mug",\n                  "value": 0.92864025,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_2gmKZLxp",\n                  "name": "cold",\n                  "value": 0.9227257,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_5VHsZr8N",\n                  "name": "liquid",\n                  "value": 0.91797745,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_3PlgVmlN",\n                  "name": "food",\n                  "value": 0.9179274,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_WbwL0pPL",\n                  "name": "breakfast",\n                  "value": 0.904904,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_B3MXt5Ng",\n                  "name": "refreshment",\n                  "value": 0.9045203,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_54zxXFGL",\n                  "name": "full",\n                  "value": 0.889248,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_BrnHNkt0",\n                  "name": "coffee",\n                  "value": 0.8689867,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_7D0mdp1W",\n                  "name": "delicious",\n                  "value": 0.86591685,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_SsmKLB4z",\n                  "name": "bar",\n                  "value": 0.8546975,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_mZ2tl6cW",\n                  "name": "health",\n                  "value": 0.8544879,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_cHsR7RS8",\n                  "name": "milk",\n                  "value": 0.852397,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_zFnPQdgB",\n                  "name": "wood",\n                  "value": 0.8446485,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_qNxqNBWN",\n                  "name": "cream",\n                  "value": 0.844169,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_8LWlDfFD",\n                  "name": "table",\n                  "value": 0.837438,\n                  "app_id": "main"\n                }\n              ]\n            }\n          },\n          {\n            "frame_info": {\n              "index": 4,\n              "time": 4000\n            },\n            "data": {\n              "concepts": [\n                {\n                  "id": "ai_8XGJjH7R",\n                  "name": "foam",\n                  "value": 0.996614,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_786Zr311",\n                  "name": "no person",\n                  "value": 0.9748836,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_TBlp0Pt3",\n                  "name": "beer",\n                  "value": 0.9645849,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_zJx6RbxW",\n                  "name": "drink",\n                  "value": 0.96217895,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_3PlgVmlN",\n                  "name": "food",\n                  "value": 0.9179274,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_WbwL0pPL",\n                  "name": "breakfast",\n                  "value": 0.904904,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_B3MXt5Ng",\n                  "name": "refreshment",\n                  "value": 0.9045203,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_2gmKZLxp",\n                  "name": "cold",\n                  "value": 0.9030821,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_mCpQg89c",\n                  "name": "glass",\n                  "value": 0.8983356,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_pkvDRSJ1",\n                  "name": "mug",\n                  "value": 0.894987,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_7D0mdp1W",\n                  "name": "delicious",\n                  "value": 0.894392,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_54zxXFGL",\n                  "name": "full",\n                  "value": 0.889248,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_mZ2tl6cW",\n                  "name": "health",\n                  "value": 0.8860091,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_4sJLn6nX",\n                  "name": "dark",\n                  "value": 0.8837219,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_zFnPQdgB",\n                  "name": "wood",\n                  "value": 0.8712319,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_BrnHNkt0",\n                  "name": "coffee",\n                  "value": 0.8695712,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_8LWlDfFD",\n                  "name": "table",\n                  "value": 0.8664293,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_SsmKLB4z",\n                  "name": "bar",\n                  "value": 0.8546975,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_cHsR7RS8",\n                  "name": "milk",\n                  "value": 0.852397,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_qNxqNBWN",\n                  "name": "cream",\n                  "value": 0.844169,\n                  "app_id": "main"\n                }\n              ]\n            }\n          },\n          {\n            "frame_info": {\n              "index": 5,\n              "time": 5000\n            },\n            "data": {\n              "concepts": [\n                {\n                  "id": "ai_8XGJjH7R",\n                  "name": "foam",\n                  "value": 0.997158,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_TBlp0Pt3",\n                  "name": "beer",\n                  "value": 0.97719705,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_786Zr311",\n                  "name": "no person",\n                  "value": 0.9748836,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_zJx6RbxW",\n                  "name": "drink",\n                  "value": 0.96217895,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_pkvDRSJ1",\n                  "name": "mug",\n                  "value": 0.9210669,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_3PlgVmlN",\n                  "name": "food",\n                  "value": 0.9124408,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_54zxXFGL",\n                  "name": "full",\n                  "value": 0.90667903,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_WbwL0pPL",\n                  "name": "breakfast",\n                  "value": 0.904904,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_B3MXt5Ng",\n                  "name": "refreshment",\n                  "value": 0.9046865,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_2gmKZLxp",\n                  "name": "cold",\n                  "value": 0.9030821,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_BrnHNkt0",\n                  "name": "coffee",\n                  "value": 0.90262496,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_mCpQg89c",\n                  "name": "glass",\n                  "value": 0.8983356,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_4sJLn6nX",\n                  "name": "dark",\n                  "value": 0.8947689,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_7D0mdp1W",\n                  "name": "delicious",\n                  "value": 0.894392,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_SsmKLB4z",\n                  "name": "bar",\n                  "value": 0.8852426,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_3R5pJ6hB",\n                  "name": "lager",\n                  "value": 0.8789175,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_8LWlDfFD",\n                  "name": "table",\n                  "value": 0.8762902,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_zFnPQdgB",\n                  "name": "wood",\n                  "value": 0.87279737,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_mZ2tl6cW",\n                  "name": "health",\n                  "value": 0.8544879,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_cHsR7RS8",\n                  "name": "milk",\n                  "value": 0.849733,\n                  "app_id": "main"\n                }\n              ]\n            }\n          },\n          {\n            "frame_info": {\n              "index": 6,\n              "time": 6000\n            },\n            "data": {\n              "concepts": [\n                {\n                  "id": "ai_8XGJjH7R",\n                  "name": "foam",\n                  "value": 0.99790645,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_TBlp0Pt3",\n                  "name": "beer",\n                  "value": 0.97817445,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_786Zr311",\n                  "name": "no person",\n                  "value": 0.97463626,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_zJx6RbxW",\n                  "name": "drink",\n                  "value": 0.9659773,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_pkvDRSJ1",\n                  "name": "mug",\n                  "value": 0.9273318,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_4sJLn6nX",\n                  "name": "dark",\n                  "value": 0.9219268,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_B3MXt5Ng",\n                  "name": "refreshment",\n                  "value": 0.9185593,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_2gmKZLxp",\n                  "name": "cold",\n                  "value": 0.91295856,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_3PlgVmlN",\n                  "name": "food",\n                  "value": 0.9119204,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_54zxXFGL",\n                  "name": "full",\n                  "value": 0.91089505,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_SsmKLB4z",\n                  "name": "bar",\n                  "value": 0.9056676,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_BrnHNkt0",\n                  "name": "coffee",\n                  "value": 0.90262496,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_mCpQg89c",\n                  "name": "glass",\n                  "value": 0.89882934,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_WbwL0pPL",\n                  "name": "breakfast",\n                  "value": 0.8932399,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_7D0mdp1W",\n                  "name": "delicious",\n                  "value": 0.892028,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_zFnPQdgB",\n                  "name": "wood",\n                  "value": 0.88797945,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_3R5pJ6hB",\n                  "name": "lager",\n                  "value": 0.88745904,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_8LWlDfFD",\n                  "name": "table",\n                  "value": 0.87949455,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_MmRdqDFp",\n                  "name": "soap",\n                  "value": 0.87376094,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_5VHsZr8N",\n                  "name": "liquid",\n                  "value": 0.8715329,\n                  "app_id": "main"\n                }\n              ]\n            }\n          },\n          {\n            "frame_info": {\n              "index": 7,\n              "time": 7000\n            },\n            "data": {\n              "concepts": [\n                {\n                  "id": "ai_8XGJjH7R",\n                  "name": "foam",\n                  "value": 0.99790645,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_TBlp0Pt3",\n                  "name": "beer",\n                  "value": 0.97817445,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_786Zr311",\n                  "name": "no person",\n                  "value": 0.97463626,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_zJx6RbxW",\n                  "name": "drink",\n                  "value": 0.9659773,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_pkvDRSJ1",\n                  "name": "mug",\n                  "value": 0.9273318,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_4sJLn6nX",\n                  "name": "dark",\n                  "value": 0.9219268,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_B3MXt5Ng",\n                  "name": "refreshment",\n                  "value": 0.9185593,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_2gmKZLxp",\n                  "name": "cold",\n                  "value": 0.91295856,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_3PlgVmlN",\n                  "name": "food",\n                  "value": 0.9119204,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_54zxXFGL",\n                  "name": "full",\n                  "value": 0.91089505,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_SsmKLB4z",\n                  "name": "bar",\n                  "value": 0.9056676,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_BrnHNkt0",\n                  "name": "coffee",\n                  "value": 0.90262496,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_mCpQg89c",\n                  "name": "glass",\n                  "value": 0.89882934,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_WbwL0pPL",\n                  "name": "breakfast",\n                  "value": 0.8932399,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_7D0mdp1W",\n                  "name": "delicious",\n                  "value": 0.892028,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_zFnPQdgB",\n                  "name": "wood",\n                  "value": 0.8913312,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_3R5pJ6hB",\n                  "name": "lager",\n                  "value": 0.88745904,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_8LWlDfFD",\n                  "name": "table",\n                  "value": 0.87949455,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_MmRdqDFp",\n                  "name": "soap",\n                  "value": 0.87376094,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_5VHsZr8N",\n                  "name": "liquid",\n                  "value": 0.8715329,\n                  "app_id": "main"\n                }\n              ]\n            }\n          },\n          {\n            "frame_info": {\n              "index": 8,\n              "time": 8000\n            },\n            "data": {\n              "concepts": [\n                {\n                  "id": "ai_8XGJjH7R",\n                  "name": "foam",\n                  "value": 0.99790645,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_TBlp0Pt3",\n                  "name": "beer",\n                  "value": 0.97817445,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_786Zr311",\n                  "name": "no person",\n                  "value": 0.97463626,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_zJx6RbxW",\n                  "name": "drink",\n                  "value": 0.9659773,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_4sJLn6nX",\n                  "name": "dark",\n                  "value": 0.9219268,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_pkvDRSJ1",\n                  "name": "mug",\n                  "value": 0.9210669,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_B3MXt5Ng",\n                  "name": "refreshment",\n                  "value": 0.9185593,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_2gmKZLxp",\n                  "name": "cold",\n                  "value": 0.91295856,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_3PlgVmlN",\n                  "name": "food",\n                  "value": 0.9119204,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_54zxXFGL",\n                  "name": "full",\n                  "value": 0.91089505,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_SsmKLB4z",\n                  "name": "bar",\n                  "value": 0.9056676,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_BrnHNkt0",\n                  "name": "coffee",\n                  "value": 0.90262496,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_mCpQg89c",\n                  "name": "glass",\n                  "value": 0.89882934,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_7D0mdp1W",\n                  "name": "delicious",\n                  "value": 0.894392,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_WbwL0pPL",\n                  "name": "breakfast",\n                  "value": 0.8932399,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_zFnPQdgB",\n                  "name": "wood",\n                  "value": 0.88797945,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_3R5pJ6hB",\n                  "name": "lager",\n                  "value": 0.88745904,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_8LWlDfFD",\n                  "name": "table",\n                  "value": 0.87949455,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_MmRdqDFp",\n                  "name": "soap",\n                  "value": 0.87376094,\n                  "app_id": "main"\n                },\n                {\n                  "id": "ai_5VHsZr8N",\n                  "name": "liquid",\n                  "value": 0.8715329,\n                  "app_id": "main"\n                }\n              ]\n            }\n          }\n        ]\n      }\n    }\n  ]\n}\n')))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Via bytes")),(0,o.kt)("p",null,"Below is an example of how you would send the bytes of a video and receive back predictions from the general model."),(0,o.kt)(p.Z,{mdxType:"Tabs"},(0,o.kt)(s.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'# Insert here the initialization code as outlined on this page:\n# https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nwith open("{YOUR_VIDEO_FILE_LOCATION}", "rb") as f:\n    file_bytes = f.read()\n\npost_model_outputs_response = stub.PostModelOutputs(\n    service_pb2.PostModelOutputsRequest(\n        user_app_id=userDataObject,  # The userDataObject is created in the overview and is required when using a PAT\n        model_id="{THE_MODEL_ID}",\n        version_id="{THE_MODEL_VERSION_ID}",  # This is optional. Defaults to the latest model version.\n        inputs=[\n            resources_pb2.Input(\n                data=resources_pb2.Data(\n                    video=resources_pb2.Video(\n                        base64=file_bytes\n                    )\n                )\n            )\n        ]\n    ),\n    metadata=metadata\n)\nif post_model_outputs_response.status.code != status_code_pb2.SUCCESS:\n    print(post_model_outputs_response.status)\n    raise Exception("Post model outputs failed, status: " + post_model_outputs_response.status.description)\n\n# Since we have one input, one output will exist here.\noutput = post_model_outputs_response.outputs[0]\n\n# A separate prediction is available for each "frame".\nfor frame in output.data.frames:\n    print("Predicted concepts on frame " + str(frame.frame_info.time) + ":")\n    for concept in frame.data.concepts:\n        print("\\t%s %.2f" % (concept.name, concept.value))\n'))),(0,o.kt)(s.Z,{value:"php",label:"PHP",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},'<?php\n# Insert here the initialization code as outlined on this page:\n# https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\n//\n// For this example, the bytes of a video are needed and can be read in\n// using PHP provided functions.\n//\nvideo = "https://samples.clarifai.com/beer.mp4";\n$videoData = file_get_contents($image); // Get the video data from the URL\n\n///////////////////////////////////////////////////////////////////////////////\n// Specifying the Request Data\n///////////////////////////////////////////////////////////////////////////////\n//\n// In the Clarifai platform a video is defined by a special Video object.\n// There are several ways in which an Video object can be populated including\n// by url and video bytes (base64).\n//\n$video = new Video([\n    \'base64\' => $videoData\n]);\n\n//\n// After a Video object is created, a Data object is constructed around it.\n// The Data object offers a container that contains additional image independent\n// metadata.  In this particular use case, no other metadata is needed to be\n// specified.\n//\n$data = new Data([\n    \'video\' => $video\n]);\n\n//\n// The Data object is then wrapped in a Video object in order to meet the\n// API specification.  Additional fields are available to populate in the Input\n// object, but for the purposes of this example we can send in just the\n// Data object.\n//\n$input = new Input([\n    \'data\' => $data\n]);\n\n///////////////////////////////////////////////////////////////////////////////\n// Creating the request object \n///////////////////////////////////////////////////////////////////////////////\n//\n// Finally, the request object itself is created.  This object carries the request\n// along with the request status and other metadata related to the request itself.\n// In this example we populate:\n//    - the `user_app_id` field with the UserAppIDSet constructed above\n//    - the `model_id` field with the ID of the model we are referencing\n//    - the `inputs` field with an array of input objects constructed above \n//\n$request = new PostModelOutputsRequest([\n    \'user_app_id\' => $userDataObject, // This is defined above\n    \'model_id\' => \'aaa03c23b3724a16a56b629203edc62c\',  // This is the ID of the publicly available General model.\n    \'inputs\' => [$input]\n]);\n\n///////////////////////////////////////////////////////////////////////////////\n// Making the RPC call\n///////////////////////////////////////////////////////////////////////////////\n//\n// Once the request object is constructed, we can call the actual request to the\n// Clarifai platform.  This uses the opened gRPC client channel to communicate the\n// request and then wait for the response.\n//\n[$response, $status] = $client->PostModelOutputs(\n    $request,\n    $metadata\n)->wait();\n\n///////////////////////////////////////////////////////////////////////////////\n// Handling the Response\n///////////////////////////////////////////////////////////////////////////////\n//\n// The response is returned and the first thing we do is check the status of it.\n// A successful response will have a status code of 0, otherwise there is some \n// reported error.\n//\nif ($status->code !== 0) throw new Exception("Error: {$status->details}");\n\n//\n// In addition to the RPC response status, there is a Clarifai API status that\n// reports if the operationo was a success or failure (not just that the commuunication)\n// was successful.\n//\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription() . " " .\n        $response->getStatus()->getDetails());\n}\n\n//\n// The output of a successful call can be used in many ways.  In this example,\n// we loop through all of the frames of the video and print out the predicted \n// concepts for each along with their numerical prediction value (confidence).\n//\nforeach ($output->getData()->getFrames() as $frame) {\n    echo "Predicted concepts on frame " . $frame->getFrameInfo()->getTime() . ":";\n    foreach ($frame->getData()->getConcepts() as $concept) {\n        echo "   " . $concept->getName() . ": " . number_format($concept->getValue(), 2) . "\\n";\n    }\n}\n?>\n'))),(0,o.kt)(s.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'import com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nMultiOutputResponse postModelOutputsResponse = stub.postModelOutputs(\n    PostModelOutputsRequest.newBuilder()\n        .setModelId("{THE_MODEL_ID}")\n        .setVersionId("{THE_MODEL_VERSION_ID")  // This is optional. Defaults to the latest model version.\n        .addInputs(\n            Input.newBuilder().setData(\n                Data.newBuilder().setVideo(\n                    Video.newBuilder()\n                        .setBase64(ByteString.copyFrom(Files.readAllBytes(\n                            new File("{YOUR_VIDEO_FILE_LOCATION}").toPath()\n                        )))\n                )\n            )\n        )\n        .build()\n);\n\nif (postModelOutputsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n  throw new RuntimeException("Post model outputs failed, status: " + postModelOutputsResponse.getStatus());\n}\n\n// Since we have one input, one output will exist here.\nOutput output = postModelOutputsResponse.getOutputs(0);\n\n// A separate prediction is available for each "frame".\nfor (Frame frame : output.getData().getFramesList()) {\n    System.out.println("Predicted concepts on frame " + frame.getFrameInfo().getTime() + ":");\n    for (Concept concept : frame.getData().getConceptsList()) {\n        System.out.printf("\\t%s %.2f%n", concept.getName(), concept.getValue());\n    }\n}\n'))),(0,o.kt)(s.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'// Insert here the initialization code as outlined on this page:\n// https://docs.clarifai.com/api-guide/api-overview/api-clients#client-installation-instructions\n\nconst fs = require("fs");\nconst videoBytes = fs.readFileSync("{YOUR_VIDEO_FILE_LOCATION}");\n\nstub.PostModelOutputs(\n    {\n        model_id: "{THE_MODEL_ID}",\n        version_id: "{YOUR_MODEL_VERSION_ID}",  // This is optional. Defaults to the latest model version.\n        inputs: [\n            {data: {video: {base64: videoBytes}}}\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post model outputs failed, status: " + response.status.description);\n        }\n\n        // Since we have one input, one output will exist here.\n        const output = response.outputs[0]\n\n        // A separate prediction is available for each "frame".\n        for (const frame of output.data.frames) {\n            console.log("Predicted concepts on frame " + frame.frame_info.time + ":");\n            for (const concept of frame.data.concepts) {\n                console.log("\\t" + concept.name + " " + concept.value);\n            }\n        }\n    }\n);\n'))),(0,o.kt)(s.Z,{value:"curl",label:"cURL",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST \\\n  -H "Authorization: Key YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'\n  {\n    "inputs": [\n      {\n        "data": {\n          "video": {\n            "base64": "\'"$(base64 video_file_path.mp4)"\'"\n          }\n        }\n      }\n    ]\n  }\'\\\n  https://api.clarifai.com/v2/models/{THE_MODEL_ID}/versions/{THE_MODEL_VERSION_ID}/outputs\n\n# The model version ID is optional. It defaults to the latest model version.\n'))),(0,o.kt)(s.Z,{value:"js_rest",label:"Javascript (REST)",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'const raw = JSON.stringify({\n    "user_app_id": {\n        "user_id": "{YOUR_USER_ID}",\n        "app_id": "{YOUR_APP_ID}"\n    },\n  "inputs": [\n    {\n      "data": {\n        "video": {\n          "base64": "{YOUR_BYTES_STRING}"\n        }\n      }\n    }\n  ]\n});\n\nconst requestOptions = {\n  method: \'POST\',\n  headers: {\n    \'Accept\': \'application/json\',\n    \'Authorization\': \'Key {YOUR_PERSONAL_TOKEN}\'\n  },\n  body: raw\n};\n\n// NOTE: MODEL_VERSION_ID is optional, you can also call prediction with the MODEL_ID only\n// https://api.clarifai.com/v2/models/{YOUR_MODEL_ID}/outputs\n// this will default to the latest version_id\n\nfetch("https://api.clarifai.com/v2/models/{YOUR_MODEL_ID}/versions/{MODEL_VERSION_ID}/outputs", requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log(\'error\', error));\n')))),(0,o.kt)(p.Z,{mdxType:"Tabs"},(0,o.kt)(s.Z,{value:"response_json",label:"Response JSON",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'{\n    "status": {\n        "code": 10000,\n        "description": "Ok"\n    },\n    "outputs": [\n        {\n            "id": "f6f9e1b007d742fb9d777f35cf3bffd0",\n            "status": {\n                "code": 10000,\n                "description": "Ok"\n            },\n            "created_at": "2017-06-28T16:00:51.258194418Z",\n            "model": {\n                "id": "aaa03c23b3724a16a56b629203edc62c",\n                "name": "general-v1.3",\n                "created_at": "2016-03-09T17:11:39.608845Z",\n                "app_id": "main",\n                "output_info": {\n                    "message": "Show output_info with: GET /models/{model_id}/output_info",\n                    "type": "concept",\n                    "type_ext": "concept"\n                },\n                "model_version": {\n                    "id": "aa9ca48295b37401f8af92ad1af0d91d",\n                    "created_at": "2016-07-13T01:19:12.147644Z",\n                    "status": {\n                        "code": 21100,\n                        "description": "Model trained successfully"\n                    }\n                }\n            },\n            "input": {\n                "id": "b17d29ad1b714869a8c729e510ab22d0",\n                "data": {\n                    "video": {\n                        "url": "https://s3.amazonaws.com/clarifai-api/vid/prod/ib81c84d5b2341858b86da18a2bd21d2/e86fbf516521425098081dd42e157a12",\n                        "base64": "true"\n                    }\n                }\n            },\n            "data": {\n                "frames": [\n                    {\n                        "frame_info": {\n                            "index": 0,\n                            "time": 0\n                        },\n                        "data": {\n                            "concepts": [\n                                {\n                                    "id": "ai_VTlCx2f2",\n                                    "name": "window",\n                                    "value": 0.99909437,\n                                    "app_id": "main"\n                                },\n                                {\n                                    "id": "ai_l8TKp2h5",\n                                    "name": "people",\n                                    "value": 0.99610686,\n                                    "app_id": "main"\n                                },\n                                {\n                                    "id": "ai_VPmHr5bm",\n                                    "name": "adult",\n                                    "value": 0.9958472,\n                                    "app_id": "main"\n                                },\n                                {\n                                    "id": "ai_SVshtN54",\n                                    "name": "one",\n                                    "value": 0.9937376,\n                                    "app_id": "main"\n                                },\n                                {\n                                    "id": "ai_TJ9wFfK5",\n                                    "name": "portrait",\n                                    "value": 0.9899301,\n                                    "app_id": "main"\n                                },\n                                {\n                                    "id": "ai_ZrPNDjxN",\n                                    "name": "daylight",\n                                    "value": 0.9885398,\n                                    "app_id": "main"\n                                },\n                                {\n                                    "id": "ai_dxSG2s86",\n                                    "name": "man",\n                                    "value": 0.9833108,\n                                    "app_id": "main"\n                                },\n                                {\n                                    "id": "ai_86sS08Pw",\n                                    "name": "wear",\n                                    "value": 0.9807093,\n                                    "app_id": "main"\n                                },\n                                {\n                                    "id": "ai_GxSDhQ34",\n                                    "name": "facial expression",\n                                    "value": 0.9769263,\n                                    "app_id": "main"\n                                },\n                                {\n                                    "id": "ai_Pf2b7clG",\n                                    "name": "indoors",\n                                    "value": 0.96838474,\n                                    "app_id": "main"\n                                },\n                                {\n                                    "id": "ai_VRmbGVWh",\n                                    "name": "travel",\n                                    "value": 0.96641624,\n                                    "app_id": "main"\n                                },\n                                {\n                                    "id": "ai_XNzGRk0F",\n                                    "name": "side view",\n                                    "value": 0.9603646,\n                                    "app_id": "main"\n                                },\n                                {\n                                    "id": "ai_Zmhsv0Ch",\n                                    "name": "outdoors",\n                                    "value": 0.9434113,\n                                    "app_id": "main"\n                                },\n                                {\n                                    "id": "ai_n9vjC1jB",\n                                    "name": "light",\n                                    "value": 0.94182396,\n                                    "app_id": "main"\n                                },\n                                {\n                                    "id": "ai_WcnFrjw1",\n                                    "name": "backlit",\n                                    "value": 0.9347838,\n                                    "app_id": "main"\n                                },\n                                {\n                                    "id": "ai_QKqjh1CM",\n                                    "name": "vehicle window",\n                                    "value": 0.92699903,\n                                    "app_id": "main"\n                                },\n                                {\n                                    "id": "ai_mlrv94tv",\n                                    "name": "reflection",\n                                    "value": 0.90993655,\n                                    "app_id": "main"\n                                },\n                                {\n                                    "id": "ai_41s912fX",\n                                    "name": "fair weather",\n                                    "value": 0.90100014,\n                                    "app_id": "main"\n                                },\n                                {\n                                    "id": "ai_rsX6XWc2",\n                                    "name": "building",\n                                    "value": 0.88111985,\n                                    "app_id": "main"\n                                },\n                                {\n                                    "id": "ai_L83krFdq",\n                                    "name": "veil",\n                                    "value": 0.8785704,\n                                    "app_id": "main"\n                                }\n                            ]\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}\n')))))}_.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[6257],{43209:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>y,contentTitle:()=>g,default:()=>v,frontMatter:()=>f,metadata:()=>o,toc:()=>x});const o=JSON.parse('{"id":"getting-started/upload-model","title":"Upload Your First Model","description":"Upload a custom model to the Clarifai platform","source":"@site/docs/getting-started/upload-model.md","sourceDirName":"getting-started","slug":"/getting-started/upload-model","permalink":"/getting-started/upload-model","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"description":"Upload a custom model to the Clarifai platform","sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Deploy Your First Model","permalink":"/getting-started/first-deployment"},"next":{"title":"Compute Orchestration","permalink":"/compute/overview"}}');var r=t(74848),l=t(28453),a=t(65537),i=t(79329),s=t(58069);const d='from clarifai.runners.models.model_class import ModelClass\n\n\nclass MyFirstModel(ModelClass):\n    """A custom model that adds \'Hello World\' to the end of a text."""\n\n    @ModelClass.method\n    def predict(self, text1: str = "") -> str:\n        """\n        This is the method that will be called when the model is run.\n        It takes in an input and returns an output.\n        """\n        output_text = text1 + " Hello World"\n        return output_text',c='model:\n  id: "my-first-model"\n  user_id: "YOUR_USER_ID_HERE"\n  app_id: "YOUR_APP_ID_HERE"\n  model_type_id: "text-to-text"\n\nbuild_info:\n  python_version: "3.11"\n\ninference_compute_info:\n  cpu_limit: "1"\n  cpu_memory: "5Gi"\n  num_accelerators: 0',u="clarifai>=11.3.0",p='import os\nfrom clarifai.client import Model\n\n# Set your Personal Access Token (PAT)\nos.environ["CLARIFAI_PAT"] = "YOUR_PAT_HERE"\n\n# Initialize with model URL\nmodel = Model(url="https://clarifai.com/alfrick/docs-demos/models/my-first-model")\n\nresponse = model.predict("Yes, I uploaded it!")\n\nprint(response)',h='import { Model } from "clarifai-nodejs";\n\nconst model = new Model({\n  url: "https://clarifai.com/alfrick/docs-demos/models/my-first-model",\n  authConfig: {\n    pat: process.env.CLARIFAI_PAT,\n  },\n});\n\nconst response = await model.predict({\n  // see available methodNames using model.availableMethods()\n  methodName: "predict",\n  text1: "Yes, I uploaded it!",\n});\n\nconsole.log(JSON.stringify(response));\n\n// get response data from the response object\nModel.getOutputDataFromModelResponse(response);',m='clarifai model upload\n[INFO] 14:10:21.295509 No checkpoints specified in the config file |  thread=21092\n[INFO] 14:10:21.306110 Setup: Using Python version 3.11 from the config file to build the Dockerfile |  thread=21092\n[INFO] 14:10:21.313102 Setup: Validating requirements.txt file at C:\\Users\\Alfrick\\Desktop\\upload-model\\new1\\requirements.txt using uv pip compile |  thread=21092\n[INFO] 14:10:27.021075 Setup: Requirements.txt file validated successfully |  thread=21092\n[INFO] 14:10:27.043079 Setup: Linting Python files: [\'C:\\\\Users\\\\Alfrick\\\\Desktop\\\\upload-model\\\\new1\\\\1\\\\model.py\'] |  thread=21092\n[INFO] 14:10:27.183777 Setup: Python code linted successfully, no errors found. |  thread=21092\n[INFO] 14:10:27.475527 New model will be created at https://clarifai.com/alfrick/upload-models-2/models/my-new1 with it\'s first version. |  thread=21092\nPress Enter to continue...\n[INFO] 14:10:35.884498 Uploading file... |  thread=16512\n[INFO] 14:10:35.886430 Upload complete! |  thread=16512\nStatus: Upload in progress, Progress: 0% - Starting upload.  request_id: sdk-python-11.5.4-b4a7ae57c854497e9dc66cd06c92bStatus: Upload done, Progress: 0% - Completed upload of files, initiating model version image build..  request_id: sdk-pStatus: Model image is currently being built., Progress: 0% - Model version image is being built.  request_id: sdk-pytho[INFO] 14:10:36.541215 Created Model Version ID: 44e470e310484daaaf98df96b9f20d0f |  thread=21092\n[INFO] 14:10:36.541215 Full url to that version is: https://clarifai.com/alfrick/upload-models-2/models/my-new1 |  thread=21092\n[INFO] 14:10:42.075543 2025-06-27 11:10:35.933343 INFO: Downloading uploaded model from storage... |  thread=21092\n[INFO] 14:10:47.022986 2025-06-27 11:10:41.738352 INFO: Done downloading model\n2025-06-27 11:10:41.741974 INFO: Extracting upload...\n2025-06-27 11:10:41.747170 INFO: Done extracting upload\n2025-06-27 11:10:41.749617 INFO: Parsing requirements file for model version ID ****df96b9f20d0f\n2025-06-27 11:10:41.775586 INFO: Dockerfile found at /shared/context/Dockerfile\ncat: /shared/context/downloader/hf_token: No such file or directory\n2025-06-27 11:10:42.482697 INFO: Setting up credentials\namazon-ecr-credential-helper\nVersion:    0.8.0\nGit commit: ********\n2025-06-27 11:10:42.487124 INFO: Building image...\n#1 \\[internal] load build definition from Dockerfile\n#1 transferring dockerfile: 2.72kB done\n#1 DONE 0.0s\n\n#2 resolve image config for docker-image://docker.io/docker/dockerfile:1.13-labs\n#2 DONE 0.1s\n\n#3 docker-image://docker.io/docker/dockerfile:1.13-labs@sha256:************18b8\n#3 resolve docker.io/docker/dockerfile:1.13-labs@sha256:************18b8 done\n#3 CACHED\n\n#4 \\[internal] load metadata for public.ecr.aws/clarifai-models/python-base:3.11-********\n#4 DONE 0.1s\n\n#5 \\[internal] load .dockerignore\n#5 transferring context: 2B done\n#5 DONE 0.0s\n\n#6 \\[internal] load build context\n#6 transferring context: 2.02kB done\n#6 DONE 0.0s\n\n#7 \\[final 1/8] FROM public.ecr.aws/clarifai-models/python-base:3.11-********@sha256:************0579\n#7 resolve public.ecr.aws/clarifai-models/python-base:3.11-********@sha256:************0579 done\n#7 CACHED\n\n#8 \\[final 2/8] COPY --link requirements.txt /home/nonroot/requirements.txt\n#8 merging done\n#8 DONE 0.0s\n\n#9 \\[final 3/8] RUN ["uv", "pip", "install", "--no-cache-dir", "-r", "/home/nonroot/requirements.txt"]\n#9 0.084 Using Python 3.11.13 environment at: /venv\n#9 0.508 Resolved 30 packages in 421ms\n#9 0.515 Downloading grpcio (5.8MiB)\n#9 0.516 Downloading pillow (4.4MiB)\n#9 0.517 Downloading aiohttp (1.6MiB)\n#9 0.517 Downloading numpy (16.1MiB)\n#9 0.520 Downloading ruff (10.8MiB)\n#9 0.779  Downloading aiohttp\n#9 0.779  Downloading ruff\n#9 0.803  Downloading grpcio\n#9 0.818  Downloading pillow\n#9 1.009  Downloading numpy\n#9 1.010 Prepared 21 packages in 501ms\n#9 1.028 Installed 21 packages in 17ms\n#9 1.028  + aiohappyeyeballs==2.6.1\n#9 1.028  + aiohttp==3.12.13\n#9 1.028  + aiosignal==1.3.2\n#9 1.028  + attrs==25.3.0\n#9 1.028  + clarifai==11.5.4\n#9 1.028  + clarifai-grpc==11.5.5\n#9 1.028  + clarifai-protocol==0.0.24\n#9 1.028  + click==8.2.1\n#9 1.028  + contextlib2==21.6.0\n#9 1.028  + frozenlist==1.7.0\n#9 1.028  + googleapis-common-protos==1.70.0\n#9 1.028  + grpcio==1.73.1\n#9 1.028  + multidict==6.6.0\n#9 1.028  + numpy==2.3.1\n#9 1.028  + pillow==11.2.1\n#9 1.028  + propcache==0.3.2\n#9 1.028  + protobuf==6.31.1\n#9 1.028  + ruff==0.11.4\n#9 1.028  + schema==0.7.5\n#9 1.028  + tabulate==0.9.0\n#9 1.028  + yarl==1.20.1\n#9 DONE 1.1s\n\n#10 \\[final 4/8] RUN ["uv", "pip", "show", "--no-cache-dir", "clarifai"]\n#10 0.075 Using Python 3.11.13 environment at: /venv\n#10 0.077 Name: clarifai\n#10 0.077 Version: 11.5.4\n#10 0.077 Location: /venv/lib/python3.11/site-packages\n#10 0.077 Requires: aiohttp, clarifai-grpc, clarifai-protocol, click, fsspec, numpy, pillow, pyyaml, requests, ruff, schema, tabulate, tqdm, uv\n#10 0.077 Required-by: clarifai-protocol\n#10 DONE 0.1s\n\n#11 \\[final 5/8] COPY --chown=nonroot:nonroot downloader/unused.yaml /home/nonroot/main/1/checkpoints/.cache/unused.yaml\n#11 DONE 0.0s\n\n#12 \\[final 6/8] RUN  ["python", "-m", "clarifai.cli", "model", "download-checkpoints", "/home/nonroot/main", "--out_path", "/home/nonroot/main/1/checkpoints", "--stage", "build"]\n#12 0.850 [INFO] 11:10:44.893856 No checkpoints specified in the config file |  thread=140360215559744\n#12 DONE 0.9s\n\n#13 \\[final 7/8] COPY --link=true 1 /home/nonroot/main/1\n#13 DONE 0.0s\n\n#14 \\[final 8/8] COPY --link=true requirements.txt config.yaml /home/nonroot/main/\n#14 DONE 0.0s\n\n#15 exporting to image\n#15 exporting layers |  thread=21092\n[INFO] 14:10:53.115042 #12 DONE 0.9s\n\n#13 \\[final 7/8] COPY --link=true 1 /home/nonroot/main/1\n#13 DONE 0.0s\n\n#14 \\[final 8/8] COPY --link=true requirements.txt config.yaml /home/nonroot/main/\n#14 DONE 0.0s\n\n#15 exporting to image\n#15 exporting layers\n#15 exporting layers 4.1s done\n#15 exporting manifest sha256:************89bf done\n#15 exporting config sha256:************2f89 done\n#15 pushing layers\n#15 ...\n\n#16 \\[auth] sharing credentials for 891377382885.dkr.ecr.us-east-1.amazonaws.com\n#16 DONE 0.0s\n\n#15 exporting to image |  thread=21092\n[INFO] 14:10:57.018544 #15 pushing layers 2.6s done\n#15 pushing manifest for ****/prod/pytorch:****df96b9f20d0f@sha256:************89bf\n#15 pushing manifest for ****/prod/pytorch:****df96b9f20d0f@sha256:************89bf 0.4s done\n#15 DONE 7.0s\n2025-06-27 11:10:52.020948 INFO: Done building image!!! |  thread=21092\n[INFO] 14:10:57.019540 Model build complete! |  thread=21092\n[INFO] 14:10:57.019540 Build time elapsed 20.5s) |  thread=21092\n[INFO] 14:10:57.019540 Check out the model at https://clarifai.com/alfrick/upload-models-2/models/my-new1 version: 44e470e310484daaaf98df96b9f20d0f |  thread=21092\n[INFO] 14:10:57.027747\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n# Here is a code snippet to use this model:\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n                 |  thread=21092\n[INFO] 14:10:57.027747\n# Clarifai Model Client Script\n# Set the environment variables `CLARIFAI_DEPLOYMENT_ID` and `CLARIFAI_PAT` to run this script.\n# Example usage:\nimport os\n\nfrom clarifai.client import Model\nfrom clarifai.runners.utils import data_types\n\nmodel = Model("https://clarifai.com/alfrick/upload-models-2/models/my-new1",\n    deployment_id = os.environ[\'CLARIFAI_DEPLOYMENT_ID\'], # Only needed for dedicated deployed models\n )\n\n\n# Example model prediction from different model methods:\n\nresponse = model.predict(text1="What is the future of AI?")\nprint(response)\n\n |  thread=21092\nDo you want to deploy the model? (y/n): y\n[INFO] 14:12:22.988696 Checking for available compute clusters... |  thread=21092\n[INFO] 14:12:24.793067 Available compute clusters: |  thread=21092\n[INFO] 14:12:24.794064 1. local-dev-compute-cluster (Default Local Dev Compute Cluster) |  thread=21092\nChoose a compute cluster (1-1) or \'n\' to create a new one: n\n[INFO] 14:12:42.729645 Please create a new compute cluster by visiting: https://clarifai.com/settings/compute/new |  thread=21092\nDo you want to open the compute cluster creation page in your browser? (y/n): y\nAfter creating the compute cluster, press Enter to continue...\n[INFO] 14:14:14.758749 Re-checking for available compute clusters... |  thread=21092\n[INFO] 14:14:15.348357 Available compute clusters: |  thread=21092\n[INFO] 14:14:15.349357 1. new-cluster () |  thread=21092\n[INFO] 14:14:15.349357 2. local-dev-compute-cluster (Default Local Dev Compute Cluster) |  thread=21092\nChoose a compute cluster (1-2): 1\n[INFO] 14:14:28.311012 Checking for available nodepools in compute cluster \'new-cluster\'... |  thread=21092\n[INFO] 14:14:30.277793 Available nodepools: |  thread=21092\n[INFO] 14:14:30.278676 1. new-nodepool () |  thread=21092\nChoose a nodepool (1-1) or \'n\' to create a new one: 1\n[INFO] 14:14:45.306485 Please create a new deployment by visiting: https://clarifai.com/settings/compute/deployments/new?computeClusterId=new-cluster&nodePoolId=new-nodepool |  thread=21092\nDo you want to open the deployment creation page in your browser? (y/n): y\n[INFO] 14:14:49.806321 After creating the deployment, your model will be ready for inference! |  thread=21092\n[INFO] 14:14:49.807324 You can always return to view your deployments at: https://clarifai.com/settings/compute/deployments/new?computeClusterId=new-cluster&nodePoolId=new-nodepool |  thread=21092\n',f={description:"Upload a custom model to the Clarifai platform",sidebar_position:3},g="Upload Your First Model",y={},x=[{value:"Step 1: Perform Prerequisites",id:"step-1-perform-prerequisites",level:2},{value:"Install Clarifai Package",id:"install-clarifai-package",level:3},{value:"Set a PAT Key",id:"set-a-pat-key",level:3},{value:"Step 2: Create Files",id:"step-2-create-files",level:2},{value:"<code>model.py</code>",id:"modelpy",level:3},{value:"<code>requirements.txt</code>",id:"requirementstxt",level:3},{value:"<code>config.yaml</code>",id:"configyaml",level:3},{value:"Step 3: Upload the Model",id:"step-3-upload-the-model",level:2},{value:"Step 4: Deploy the Model",id:"step-4-deploy-the-model",level:2},{value:"Step 5: Predict With Model",id:"step-5-predict-with-model",level:2}];function b(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"upload-your-first-model",children:"Upload Your First Model"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Upload a custom model to the Clarifai platform"})}),"\n",(0,r.jsx)("hr",{}),"\n",(0,r.jsx)(n.p,{children:"The Clarifai platform allows you to upload custom models for a wide range of use cases. With just a few simple steps, you can get your models up and running and leverage the platform\u2019s powerful capabilities."}),"\n",(0,r.jsxs)(n.p,{children:["Let\u2019s walk through how to upload a simple custom model that appends the phrase ",(0,r.jsx)(n.code,{children:"Hello World"})," to any input text."]}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsxs)(n.p,{children:["To learn more about how to upload different types of models, check out ",(0,r.jsx)(n.a,{href:"https://docs.clarifai.com/compute/models/upload/",children:"this comprehensive guide"}),"."]})}),"\n","\n","\n",(0,r.jsx)(n.h2,{id:"step-1-perform-prerequisites",children:"Step 1: Perform Prerequisites"}),"\n",(0,r.jsx)(n.h3,{id:"install-clarifai-package",children:"Install Clarifai Package"}),"\n",(0,r.jsxs)(n.p,{children:["Install the latest version of the ",(0,r.jsx)(n.code,{children:"clarifai"})," Python SDK. This also installs the Clarifai ",(0,r.jsx)(n.a,{href:"https://docs.clarifai.com/additional-resources/api-overview/cli",children:"Command Line Interface (CLI)"}),", which we'll use for uploading the model."]}),"\n",(0,r.jsx)(a.A,{groupId:"code",children:(0,r.jsx)(i.A,{value:"bash",label:"Bash",children:(0,r.jsx)(s.A,{className:"language-bash",children:" pip install --upgrade clarifai "})})}),"\n",(0,r.jsx)(n.h3,{id:"set-a-pat-key",children:"Set a PAT Key"}),"\n",(0,r.jsxs)(n.p,{children:["You need to set the ",(0,r.jsx)(n.code,{children:"CLARIFAI_PAT"})," (Personal Access Token) as an environment variable. You can generate the PAT key in your personal settings page by navigating to the ",(0,r.jsx)(n.a,{href:"https://clarifai.com/settings/security",children:"Security section"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"This token is essential for authenticating your connection to the Clarifai platform."}),"\n",(0,r.jsxs)(a.A,{groupId:"code",children:[(0,r.jsx)(i.A,{value:"bash",label:"Unix-Like Systems",children:(0,r.jsx)(s.A,{className:"language-bash",children:" export CLARIFAI_PAT=YOUR_PERSONAL_ACCESS_TOKEN_HERE "})}),(0,r.jsx)(i.A,{value:"bash2",label:"Windows",children:(0,r.jsx)(s.A,{className:"language-bash",children:" set CLARIFAI_PAT=YOUR_PERSONAL_ACCESS_TOKEN_HERE "})})]}),"\n",(0,r.jsx)(n.admonition,{title:"tip",type:"note",children:(0,r.jsxs)(n.p,{children:["On Windows, the Clarifai Python SDK expects a ",(0,r.jsx)(n.code,{children:"HOME"})," environment variable, which isn\u2019t set by default. To ensure compatibility with file paths used by the SDK, set ",(0,r.jsx)(n.code,{children:"HOME"})," to the value of your ",(0,r.jsx)(n.code,{children:"USERPROFILE"}),". You can set it in your Command Prompt this way: ",(0,r.jsx)(n.code,{children:"set HOME=%USERPROFILE%"}),"."]})}),"\n",(0,r.jsx)(n.h2,{id:"step-2-create-files",children:"Step 2: Create Files"}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsxs)(n.p,{children:["You can automatically generate the required files by running the ",(0,r.jsx)(n.a,{href:"https://docs.clarifai.com/resources/api-overview/cli#clarifai-model-init",children:(0,r.jsx)(n.code,{children:"clarifai model init"})})," command in the terminal from your current directory. After the files are created, you can modify them as needed."]})}),"\n",(0,r.jsx)(n.p,{children:"Create a project directory and organize your files as indicated below to fit the requirements of uploading models to the Clarifai platform."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"your_model_directory/\n\u251c\u2500\u2500 1/\n\u2502   \u2514\u2500\u2500 model.py\n\u251c\u2500\u2500 requirements.txt\n\u2514\u2500\u2500 config.yaml\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"your_model_directory/"})," \u2013 The root directory containing all files related to your custom model.","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"1/"})," \u2013 A subdirectory that holds the model file (",(0,r.jsxs)(n.em,{children:["Note that the folder is named as ",(0,r.jsx)(n.strong,{children:"1"})]}),").","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"model.py"})," \u2013 Contains the code that defines your model, including running inference."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"requirements.txt"})," \u2013 Lists the Python dependencies required to run your model."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"config.yaml"})," \u2013 Contains metadata and configuration settings, such as compute requirements, needed for uploading the model to Clarifai."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Add the following snippets to each of the respective files."}),"\n",(0,r.jsx)(n.h3,{id:"modelpy",children:(0,r.jsx)(n.code,{children:"model.py"})}),"\n",(0,r.jsx)(a.A,{groupId:"code",children:(0,r.jsx)(i.A,{value:"python",label:"Python",children:(0,r.jsx)(s.A,{className:"language-python",children:d})})}),"\n",(0,r.jsx)(n.h3,{id:"requirementstxt",children:(0,r.jsx)(n.code,{children:"requirements.txt"})}),"\n",(0,r.jsx)(a.A,{groupId:"code",children:(0,r.jsx)(i.A,{value:"text",label:"Text",children:(0,r.jsx)(s.A,{className:"language-text",children:u})})}),"\n",(0,r.jsx)(n.h3,{id:"configyaml",children:(0,r.jsx)(n.code,{children:"config.yaml"})}),"\n",(0,r.jsx)(n.admonition,{title:"important",type:"info",children:(0,r.jsxs)(n.p,{children:["In the ",(0,r.jsx)(n.code,{children:"model"})," section of the ",(0,r.jsx)(n.code,{children:"config.yaml"})," file, specify your model ID, Clarifai user ID, and Clarifai app ID. These will define where your model will be uploaded on the Clarifai platform."]})}),"\n",(0,r.jsx)(a.A,{groupId:"code",children:(0,r.jsx)(i.A,{value:"yaml",label:"YAML",children:(0,r.jsx)(s.A,{className:"language-yaml",children:c})})}),"\n",(0,r.jsx)(n.h2,{id:"step-3-upload-the-model",children:"Step 3: Upload the Model"}),"\n",(0,r.jsx)(n.p,{children:"Once your custom model is ready, upload it to the Clarifai platform by navigating to the directory containing the model and running the following command:"}),"\n",(0,r.jsx)(a.A,{groupId:"code",children:(0,r.jsx)(i.A,{value:"bash",label:"CLI",children:(0,r.jsx)(s.A,{className:"language-bash",children:" clarifai model upload "})})}),"\n",(0,r.jsx)(n.h2,{id:"step-4-deploy-the-model",children:"Step 4: Deploy the Model"}),"\n",(0,r.jsx)(n.p,{children:"After successfully uploading your model to the Clarifai platform, the terminal will prompt you to proceed with deployment and set up your model for inference."}),"\n",(0,r.jsx)(n.p,{children:"Follow the prompts to:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"https://docs.clarifai.com/compute/deployments/clusters-nodepools",children:"Set up a cluster"})})," \u2013 This serves as the foundation of your compute environment."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Create a nodepool"})," \u2013 A nodepool is a group of compute nodes within your cluster that provides the resources needed to run your model."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"https://docs.clarifai.com/compute/deployments/deploy-model",children:"Deploy your model"})})," \u2013 Once the nodepool is ready, deploy your model to make it available for inference."]}),"\n"]}),"\n",(0,r.jsxs)(t,{children:[(0,r.jsx)("summary",{children:"Build Logs Example"}),(0,r.jsx)(s.A,{className:"language-text",children:m})]}),"\n",(0,r.jsx)(n.h2,{id:"step-5-predict-with-model",children:"Step 5: Predict With Model"}),"\n",(0,r.jsx)(n.p,{children:"Once your model is successfully deployed, you can start making predictions with it."}),"\n",(0,r.jsxs)(a.A,{groupId:"code",children:[(0,r.jsx)(i.A,{value:"python",label:"Python",children:(0,r.jsx)(s.A,{className:"language-python",children:p})}),(0,r.jsx)(i.A,{value:"node.js",label:"Node.js SDK",children:(0,r.jsx)(s.A,{className:"language-javascript",children:h})})]}),"\n",(0,r.jsxs)(t,{children:[(0,r.jsx)("summary",{children:"Output Example"}),(0,r.jsx)(s.A,{className:"language-text",children:"Yes, I uploaded it! Hello World"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Congratulations!"})}),"\n",(0,r.jsx)(n.p,{children:"You've successfully uploaded your first model to the Clarifai platform and run inference with it!"})]})}function v(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(b,{...e})}):b(e)}},65537:(e,n,t)=>{t.d(n,{A:()=>w});var o=t(96540),r=t(18215),l=t(65627),a=t(56347),i=t(50372),s=t(30604),d=t(11861),c=t(78749);function u(e){return o.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,o.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function p(e){const{values:n,children:t}=e;return(0,o.useMemo)((()=>{const e=n??function(e){return u(e).map((e=>{let{props:{value:n,label:t,attributes:o,default:r}}=e;return{value:n,label:t,attributes:o,default:r}}))}(t);return function(e){const n=(0,d.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function h(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function m(e){let{queryString:n=!1,groupId:t}=e;const r=(0,a.W6)(),l=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,s.aZ)(l),(0,o.useCallback)((e=>{if(!l)return;const n=new URLSearchParams(r.location.search);n.set(l,e),r.replace({...r.location,search:n.toString()})}),[l,r])]}function f(e){const{defaultValue:n,queryString:t=!1,groupId:r}=e,l=p(e),[a,s]=(0,o.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!h({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const o=t.find((e=>e.default))??t[0];if(!o)throw new Error("Unexpected error: 0 tabValues");return o.value}({defaultValue:n,tabValues:l}))),[d,u]=m({queryString:t,groupId:r}),[f,g]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[r,l]=(0,c.Dv)(t);return[r,(0,o.useCallback)((e=>{t&&l.set(e)}),[t,l])]}({groupId:r}),y=(()=>{const e=d??f;return h({value:e,tabValues:l})?e:null})();(0,i.A)((()=>{y&&s(y)}),[y]);return{selectedValue:a,selectValue:(0,o.useCallback)((e=>{if(!h({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);s(e),u(e),g(e)}),[u,g,l]),tabValues:l}}var g=t(9136);const y={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var x=t(74848);function b(e){let{className:n,block:t,selectedValue:o,selectValue:a,tabValues:i}=e;const s=[],{blockElementScrollPositionUntilNextRender:d}=(0,l.a_)(),c=e=>{const n=e.currentTarget,t=s.indexOf(n),r=i[t].value;r!==o&&(d(n),a(r))},u=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const t=s.indexOf(e.currentTarget)+1;n=s[t]??s[0];break}case"ArrowLeft":{const t=s.indexOf(e.currentTarget)-1;n=s[t]??s[s.length-1];break}}n?.focus()};return(0,x.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":t},n),children:i.map((e=>{let{value:n,label:t,attributes:l}=e;return(0,x.jsx)("li",{role:"tab",tabIndex:o===n?0:-1,"aria-selected":o===n,ref:e=>{s.push(e)},onKeyDown:u,onClick:c,...l,className:(0,r.A)("tabs__item",y.tabItem,l?.className,{"tabs__item--active":o===n}),children:t??n},n)}))})}function v(e){let{lazy:n,children:t,selectedValue:l}=e;const a=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=a.find((e=>e.props.value===l));return e?(0,o.cloneElement)(e,{className:(0,r.A)("margin-top--md",e.props.className)}):null}return(0,x.jsx)("div",{className:"margin-top--md",children:a.map(((e,n)=>(0,o.cloneElement)(e,{key:n,hidden:e.props.value!==l})))})}function j(e){const n=f(e);return(0,x.jsxs)("div",{className:(0,r.A)("tabs-container",y.tabList),children:[(0,x.jsx)(b,{...n,...e}),(0,x.jsx)(v,{...n,...e})]})}function w(e){const n=(0,g.A)();return(0,x.jsx)(j,{...e,children:u(e.children)},String(n))}},79329:(e,n,t)=>{t.d(n,{A:()=>a});t(96540);var o=t(18215);const r={tabItem:"tabItem_Ymn6"};var l=t(74848);function a(e){let{children:n,hidden:t,className:a}=e;return(0,l.jsx)("div",{role:"tabpanel",className:(0,o.A)(r.tabItem,a),hidden:t,children:n})}}}]);
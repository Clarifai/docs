"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[5370],{11470:(n,e,t)=>{t.d(e,{A:()=>P});var a=t(96540),s=t(18215),i=t(23104),o=t(56347),r=t(205),c=t(57485),p=t(31682),u=t(70679);function l(n){return a.Children.toArray(n).filter(n=>"\n"!==n).map(n=>{if(!n||(0,a.isValidElement)(n)&&function(n){const{props:e}=n;return!!e&&"object"==typeof e&&"value"in e}(n))return n;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof n.type?n.type:n.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function d(n){const{values:e,children:t}=n;return(0,a.useMemo)(()=>{const n=e??function(n){return l(n).map(({props:{value:n,label:e,attributes:t,default:a}})=>({value:n,label:e,attributes:t,default:a}))}(t);return function(n){const e=(0,p.XI)(n,(n,e)=>n.value===e.value);if(e.length>0)throw new Error(`Docusaurus error: Duplicate values "${e.map(n=>n.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(n),n},[e,t])}function _({value:n,tabValues:e}){return e.some(e=>e.value===n)}function h({queryString:n=!1,groupId:e}){const t=(0,o.W6)(),s=function({queryString:n=!1,groupId:e}){if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!e)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return e??null}({queryString:n,groupId:e});return[(0,c.aZ)(s),(0,a.useCallback)(n=>{if(!s)return;const e=new URLSearchParams(t.location.search);e.set(s,n),t.replace({...t.location,search:e.toString()})},[s,t])]}function A(n){const{defaultValue:e,queryString:t=!1,groupId:s}=n,i=d(n),[o,c]=(0,a.useState)(()=>function({defaultValue:n,tabValues:e}){if(0===e.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!_({value:n,tabValues:e}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${e.map(n=>n.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const t=e.find(n=>n.default)??e[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:e,tabValues:i})),[p,l]=h({queryString:t,groupId:s}),[A,I]=function({groupId:n}){const e=function(n){return n?`docusaurus.tab.${n}`:null}(n),[t,s]=(0,u.Dv)(e);return[t,(0,a.useCallback)(n=>{e&&s.set(n)},[e,s])]}({groupId:s}),m=(()=>{const n=p??A;return _({value:n,tabValues:i})?n:null})();(0,r.A)(()=>{m&&c(m)},[m]);return{selectedValue:o,selectValue:(0,a.useCallback)(n=>{if(!_({value:n,tabValues:i}))throw new Error(`Can't select invalid tab value=${n}`);c(n),l(n),I(n)},[l,I,i]),tabValues:i}}var I=t(92303);const m={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var E=t(74848);function f({className:n,block:e,selectedValue:t,selectValue:a,tabValues:o}){const r=[],{blockElementScrollPositionUntilNextRender:c}=(0,i.a_)(),p=n=>{const e=n.currentTarget,s=r.indexOf(e),i=o[s].value;i!==t&&(c(e),a(i))},u=n=>{let e=null;switch(n.key){case"Enter":p(n);break;case"ArrowRight":{const t=r.indexOf(n.currentTarget)+1;e=r[t]??r[0];break}case"ArrowLeft":{const t=r.indexOf(n.currentTarget)-1;e=r[t]??r[r.length-1];break}}e?.focus()};return(0,E.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":e},n),children:o.map(({value:n,label:e,attributes:a})=>(0,E.jsx)("li",{role:"tab",tabIndex:t===n?0:-1,"aria-selected":t===n,ref:n=>{r.push(n)},onKeyDown:u,onClick:p,...a,className:(0,s.A)("tabs__item",m.tabItem,a?.className,{"tabs__item--active":t===n}),children:e??n},n))})}function g({lazy:n,children:e,selectedValue:t}){const i=(Array.isArray(e)?e:[e]).filter(Boolean);if(n){const n=i.find(n=>n.props.value===t);return n?(0,a.cloneElement)(n,{className:(0,s.A)("margin-top--md",n.props.className)}):null}return(0,E.jsx)("div",{className:"margin-top--md",children:i.map((n,e)=>(0,a.cloneElement)(n,{key:e,hidden:n.props.value!==t}))})}function R(n){const e=A(n);return(0,E.jsxs)("div",{className:(0,s.A)("tabs-container",m.tabList),children:[(0,E.jsx)(f,{...e,...n}),(0,E.jsx)(g,{...e,...n})]})}function P(n){const e=(0,I.A)();return(0,E.jsx)(R,{...n,children:l(n.children)},String(e))}},19365:(n,e,t)=>{t.d(e,{A:()=>o});t(96540);var a=t(18215);const s={tabItem:"tabItem_Ymn6"};var i=t(74848);function o({children:n,hidden:e,className:t}){return(0,i.jsx)("div",{role:"tabpanel",className:(0,a.A)(s.tabItem,t),hidden:e,children:n})}},33300:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>ae,contentTitle:()=>te,default:()=>oe,frontMatter:()=>ee,metadata:()=>a,toc:()=>se});const a=JSON.parse('{"id":"create/inputs/upload/api","title":"Upload via API","description":"Add data to the Clarifai platform via the API","source":"@site/docs/create/inputs/upload/api.md","sourceDirName":"create/inputs/upload","slug":"/create/inputs/upload/api","permalink":"/create/inputs/upload/api","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"description":"Add data to the Clarifai platform via the API","sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Upload Inputs","permalink":"/create/inputs/upload/"},"next":{"title":"Upload via UI","permalink":"/create/inputs/upload/ui"}}');var s=t(74848),i=t(28453),o=t(11470),r=t(19365),c=t(73748);const p='from clarifai.client.input import Inputs\n\nimg_url = "https://samples.clarifai.com/metro-north.jpg"\ninput_obj = Inputs(user_id="user_id", app_id="test_app", pat="YOUR_PAT")\n# You can also upload data through Bytes and Filepath,\n\n# Upload from file\n# input_obj.upload_from_file(input_id=\'demo\', image_file=\u2019image_filepath\')\n\n# Upload from bytes\n# input_obj.upload_from_bytes(input_id=\'demo\', image_bytes=image)\n\ninput_obj.upload_from_url(input_id="demo", image_url=img_url)\n',u='import { Input } from "clarifai-nodejs";\n\n\nconst imageUrl = "https://samples.clarifai.com/metro-north.jpg";\nconst input = new Input({\n  authConfig: {\n    userId: process.env.CLARIFAI_USER_ID,\n    pat: process.env.CLARIFAI_PAT,\n    appId: "test_app",\n  },\n});\nawait input.uploadFromUrl({\n  inputId: "demo",\n  imageUrl,\n});\n',l='from clarifai.client.input import Inputs\n\ninput_text = b"Write a tweet on future of AI"\ninput_obj = Inputs(user_id="user_id", app_id="test_app", pat="YOUR_PAT")\n\n# You can also upload data through URLand Filepath,\n\n# Upload from file\n# input_obj.upload_from_file(input_id=\'text_dat\', text_file=\u2019text_filepath\')\n\n# Upload from url\n# input_obj.upload_from_url(input_id=\'text,text_url=\u201dtext_url\u201d)\n\ninput_obj.upload_from_bytes(input_id="text_data", text_bytes=input_text)',d='import { Input } from "clarifai-nodejs";\n\n\nconst inputText = "Write a tweet on future of AI";\nconst input = new Input({\n  authConfig: {\n    userId: process.env.CLARIFAI_USER_ID,\n    pat: process.env.CLARIFAI_PAT,\n    appId: "test_app",\n  },\n});\ninput.uploadText({\n  inputId: "text_data",\n  rawText: inputText,\n});\n',_='from clarifai.client.input import Inputs\n\naudio_url = "https://s3.amazonaws.com/samples.clarifai.com/GoodMorning.wav"\ninput_obj = Inputs(user_id="user_id", app_id="test_app", pat="YOUR_PAT")\n\n# You can also upload data through Bytes and Filepath,\n\n# Upload from file\n# input_obj.upload_from_file(input_id=\'audio_data\', audio_file=\u2019audio_filepath\')\n\n# Upload from bytes\n# input_obj.upload_from_bytes(input_id=\'audio_data\u2019, audio_bytes=audio)\n\ninput_obj.upload_from_url(\n    input_id="audio_data",\n    audio_url=audio_url,\n)',h='import { Input } from "clarifai-nodejs";\n\n\nconst audioUrl =\n  "https://s3.amazonaws.com/samples.clarifai.com/GoodMorning.wav";\nconst input = new Input({\n  authConfig: {\n    userId: process.env.CLARIFAI_USER_ID,\n    pat: process.env.CLARIFAI_PAT,\n    appId: "test_app",\n  },\n});\ninput.uploadFromUrl({\n  inputId: "audio_data",\n  audioUrl,\n});\n',A='from clarifai.client.input import Inputs\nvideo_url = "https://samples.clarifai.com/beer.mp4"\ninput_obj = Inputs(user_id="user_id", app_id="test_app", pat="YOUR_PAT")\n\n# You can also upload data through Bytes and Filepath,\n\n# Upload from file\n# input_obj.upload_from_file(input_id=\'video_data\', video_file=\u2019video_filepath\')\n\n# Upload from bytes\n# input_obj.upload_from_bytes(input_id=\'video_data\u2019, video_bytes=video)\n\ninput_obj.upload_from_url(\n    input_id="video_data", video_url= video_url\n)',I='import { Input } from "clarifai-nodejs";\n\n\nconst videoUrl = "https://samples.clarifai.com/beer.mp4";\nconst input = new Input({\n  authConfig: {\n    userId: process.env.CLARIFAI_USER_ID,\n    pat: process.env.CLARIFAI_PAT,\n    appId: "test_app",\n  },\n});\nawait input.uploadFromUrl({\n  inputId: "video_data",\n  videoUrl,\n});\n',m='from clarifai.client.input import Inputs\n\ninput_obj = Inputs(user_id="user_id", app_id="test_app", pat="YOUR_PAT")\n\n# initialize inputs of different type\nprompt = "What time of day is it?"\nimage_url = "https://samples.clarifai.com/metro-north.jpg"\n\n# Here you can give the value for different types of inputs\ninput_obj.get_multimodal_input(\n    input_id="multimodal_data", image_url=image_url, raw_text=prompt\n)',E='import { Input } from "clarifai-nodejs";\n\n\nconst prompt = "What time of day is it?";\nconst imageUrl = "https://samples.clarifai.com/metro-north.jpg";\nconst multimodalInput = Input.getMultimodalInput({\n  inputId: "multimodal_data",\n  imageUrl,\n  rawText: prompt,\n});\nconsole.log(multimodalInput);\n',f='# Import necessary modules\nfrom google.protobuf.struct_pb2 import Struct\nfrom clarifai.client.input import Inputs\n\n# Create an Inputs object with user_id and app_id\ninput_object = Inputs(user_id="user_id", app_id="app_id", pat="YOUR_PAT")\n\n# Create a Struct object for metadata\nmetadata = Struct()\n\n# Update metadata with filename and split information\nmetadata.update({"filename": "XiJinping.jpg", "split": "train"})\n\n# URL of the image to upload\nurl = "https://samples.clarifai.com/XiJinping.jpg"\n\n# Upload the image from the URL with associated metadata\ninput_object.upload_from_url(input_id="metadata", image_url=url, metadata=metadata)',g='import { Input } from "clarifai-nodejs";\n\n\nconst input = new Input({\n  authConfig: {\n    userId: process.env.CLARIFAI_USER_ID,\n    pat: process.env.CLARIFAI_PAT,\n    appId: "test_app",\n  },\n});\nconst metadata = {\n  filename: "XiJinping.jpg",\n  split: "train",\n};\nconst imageUrl = "https://samples.clarifai.com/XiJinping.jpg";\nawait input.uploadFromUrl({\n  inputId: "image_with_metadata",\n  imageUrl,\n  metadata,\n});\n',R='from google.protobuf.struct_pb2 import Struct\nfrom clarifai.client.input import Inputs\n\n# Initialize an Inputs object with specified user_id and app_id\ninput_object = Inputs(user_id="user_id", app_id="app_id", pat="YOUR_PAT")\n\n# Define the URL of the video to upload\nvideo_url = "https://samples.clarifai.com/beer.mp4"\n\n# Create a Struct object to hold metadata\nmetadata = Struct()\n\n# Update the metadata with filename and split information\nmetadata.update({"filename": "drinks.jpg", "split": "train"})\n\n# Upload the video from the specified URL with the provided metadata\ninput_object.upload_from_url(\n    input_id="video_data_metadata", video_url=video_url, metadata=metadata\n)\n',P='import { Input } from "clarifai-nodejs";\n\n\nconst input = new Input({\n  authConfig: {\n    userId: process.env.CLARIFAI_USER_ID,\n    pat: process.env.CLARIFAI_PAT,\n    appId: "test_app",\n  },\n});\nconst metadata = {\n  filename: "beer.mp4",\n  split: "train",\n};\nconst videoUrl = "https://samples.clarifai.com/beer.mp4";\nawait input.uploadFromUrl({\n  inputId: "video_data_metadata",\n  videoUrl,\n  metadata,\n});\n',D='# Import necessary modules\nfrom google.protobuf.struct_pb2 import Struct\nfrom clarifai.client.input import Inputs\n\n# Define the input object with user_id and app_id\ninput_object = Inputs(user_id="user_id", app_id="app_id", pat="YOUR_PAT")\n\n# Define the input text\ninput_text = b"Write a tweet on future of AI"\n\n# Create a Struct object for metadata\nmetadata = Struct()\n\n# Update metadata with filename and split information\nmetadata.update({"filename": "tweet.txt", "split": "train"})\n\n# Upload the input from bytes with custom metadata\ninput_object.upload_from_bytes(input_id="text_data_metadata", text_bytes=input_text, metadata=metadata)\n',T='import { Input } from "clarifai-nodejs";\n\n\nconst input = new Input({\n  authConfig: {\n    userId: process.env.CLARIFAI_USER_ID,\n    pat: process.env.CLARIFAI_PAT,\n    appId: "test_app",\n  },\n});\nconst textBytes = Buffer.from("Write a tweet on future of AI");\nconst metadata = {\n  filename: "tweet.txt",\n  split: "train",\n};\nawait input.uploadFromBytes({\n  inputId: "text_with_metadata",\n  textBytes,\n  metadata,\n});\n',S='# Import necessary modules\nfrom clarifai.client.input import Inputs\nfrom google.protobuf.struct_pb2 import Struct\n\n\n# Define the input object with user_id and app_id\ninput_object = Inputs(user_id="user_id", app_id="app_id", pat="YOUR_PAT")\n\n# Define the URL of the audio file\naudio_url = "https://s3.amazonaws.com/samples.clarifai.com/GoodMorning.wav"\n\n# Create a new Struct to hold metadata\nmetadata = Struct()\n\n# Update the metadata with filename and split information\nmetadata.update({"filename": "goodmorning.wav", "split": "test"})\n\n# Upload the input from the specified URL with metadata\ninput_object.upload_from_url(\n    input_id="audio_data_metadata",  # Specify an ID for the input\n    audio_url=audio_url,  # URL of the audio file\n    metadata=metadata  # Custom metadata associated with the input\n)\n',C='import { Input } from "clarifai-nodejs";\n\n\nconst input = new Input({\n  authConfig: {\n    userId: process.env.CLARIFAI_USER_ID,\n    pat: process.env.CLARIFAI_PAT,\n    appId: "test_app",\n  },\n});\nconst metadata = {\n  filename: "goodmorning.wav",\n  split: "test",\n};\nconst audioUrl =\n  "https://s3.amazonaws.com/samples.clarifai.com/GoodMorning.wav";\nawait input.uploadFromUrl({\n  inputId: "audio_data_metadata",\n  audioUrl,\n  metadata,\n});\n',b='from clarifai.client.input import Inputs\n\n# URL of the image to upload\nimage_url = "https://samples.clarifai.com/Ferrari.jpg"\n\n# Provide the Geoinfo to be added to the input\n# geo_info=[longitude, latitude]\ngeo_points = [102,73]\n\n# Create an Inputs object with user_id and app_id\ninput_object = Inputs(user_id="YOUR_USER_ID_HERE", app_id="YOUR_APP_ID_HERE", pat="YOUR_PAT_HERE")\n\n# Upload the image from the URL with associated GeoInfo\ninput_object.upload_from_url(input_id="geo_info", image_url=image_url, geo_info=geo_points)\n',U='# Start by uploading the image with a specific input ID as described earlier\n# For example, you can upload this image: https://samples.clarifai.com/BarackObama.jpg\n# Then, after successfully uploading it, apply the bounding box annotations\n\nfrom clarifai.client.input import Inputs\n\n# Initialize the Inputs object with user and app IDs\ninput_object = Inputs(user_id="YOUR_USER_ID_HERE", app_id="YOUR_APP_ID_HERE", pat="YOUR_PAT_HERE")\n\n# Upload bounding box annotations\nbbox_points = [.1, .1, .8, .9]  # Coordinates of the bounding box\nannotation = input_object.get_bbox_proto(input_id="bbox", label="face", bbox=bbox_points, label_id="id-face", annot_id="demo")\ninput_object.upload_annotations([annotation])\n',O='# Start by uploading the image with a specific input ID as described earlier\n# For example, you can upload this image: https://samples.clarifai.com/airplane.jpeg\n# Then, after successfully uploading it, apply the polygon annotations\n\nfrom clarifai.client.input import Inputs\n\n# Initialize the Inputs object with user and app IDs\ninput_object = Inputs(user_id="YOUR_USER_ID_HERE", app_id="YOUR_APP_ID_HERE", pat="YOUR_PAT_HERE")\n\n# Upload polygon annotations\n#polygons=[[[x,y],...,[x,y]],...]\npolygon_pts = [[.15,.24],[.4,.78],[.77,.62],[.65,.15]]\nannotation = input_object.get_mask_proto(input_id="mask", label="airplane", polygons=polygon_pts)\ninput_object.upload_annotations([annotation])\n',w='from clarifai.client.input import Inputs\n\nurl = "https://samples.clarifai.com/featured-models/Llama2_Conversational-agent.txt"\n\n# Change this depending on the type of input you want to annotate\nconcepts = ["mobile","camera"]\n\n# Initialize the Inputs object with user and app IDs\ninput_object = Inputs(user_id="YOUR_USER_ID_HERE", app_id="YOUR_APP_ID_HERE", pat="YOUR_PAT_HERE")\n                      \n# Upload text data with concepts\ninput_object.upload_from_url(input_id="text1", text_url=url, labels=concepts)\n\n# Upload image data with concepts\n#input_object.upload_from_url(input_id="image1", image_url="ADD_URL_HERE", labels=concepts)\n\n# Upload video data with concepts\n#input_object.upload_from_url(input_id="video1", video_url="ADD_URL_HERE", labels=concepts)\n\n# Upload audio data with concepts\n#input_object.upload_from_url(input_id="audio1", audio_url="ADD_URL_HERE", labels=concepts)',j='\n2024-01-15 16:38:49 INFO     clarifai.client.input:                                                    input.py:669\n\n                             Inputs Uploaded                                                                       \n\n                             code: SUCCESS                                                                         \n\n                             description: "Ok"                                                                     \n\n                             details: "All inputs successfully added"                                              \n\n                             req_id: "a14eda72951b06cd25561381d70ced74"    ',x='2024-01-16 14:14:41 INFO     clarifai.client.input:                                                    input.py:669\n\n                             Inputs Uploaded                                                                       \n\n                             code: SUCCESS                                                                         \n\n                             description: "Ok"                                                                     \n\n                             details: "All inputs successfully added"                                              \n\n                             req_id: "80d2454a1dea0411e20fb03b2fe0c8b1"',N='from clarifai.client.input import Inputs\n\n# Initialize the Inputs object with user and app IDs\ninput_object = Inputs(user_id="YOUR_USER_ID_HERE", app_id="YOUR_APP_ID_HERE", pat="YOUR_PAT_HERE")\n\n# Remove unicode from text \ndef remove_unicode_and_upload(input_id, text):\n    string_encode = text.encode("ascii", "ignore")\n    string_decode = string_encode.decode()\n    input_object.upload_text(input_id=input_id,raw_text=string_decode)\n\nremove_unicode_and_upload(input_id=\'test\', text="This is a test \\u200c example. ")\n',y='\n2024-01-16 14:18:58 INFO     clarifai.client.input:                                                    input.py:669\n\n                             Inputs Uploaded                                                                       \n\n                             code: SUCCESS                                                                         \n\n                             description: "Ok"                                                                     \n\n                             details: "All inputs successfully added"                                              \n\n                             req_id: "c16d3dd066d7ee48d038744daacef6e8" ',v='2024-01-16 14:25:26 INFO     clarifai.client.input:                                                    input.py:669\n\n                             Inputs Uploaded                                                                       \n\n                             code: SUCCESS                                                                         \n\n                             description: "Ok"                                                                     \n\n                             details: "All inputs successfully added"                                              \n\n                             req_id: "00576d040a6254019942ab4eceb306ad" ',H='id: "multimodal_data"\ndata {\n  image {\n    url: "https://samples.clarifai.com/metro-north.jpg"\n  }\n  text {\n    raw: "What time of day is it?"\n  }\n}\n',Y='2024-04-05 13:03:24 INFO     clarifai.client.input:                                                    input.py:674\n                             Inputs Uploaded                                                                       \n                             code: SUCCESS                                                                         \n                             description: "Ok"                                                                     \n                             details: "All inputs successfully added"                                              \n                             req_id: "951a64b950cccf05c8d274c8acc1f0f6"                                            \n                                                                                                                   \nINFO:clarifai.client.input:\nInputs Uploaded\ncode: SUCCESS\ndescription: "Ok"\ndetails: "All inputs successfully added"\nreq_id: "951a64b950cccf05c8d274c8acc1f0f6"\n\n(\'8557e0f57f464c22b3483de76757fb4f\',\n status {\n   code: SUCCESS\n   description: "Ok"\n   details: "All inputs successfully added"\n   req_id: "951a64b950cccf05c8d274c8acc1f0f6"\n }\n inputs {\n   id: "metadata"\n   data {\n     image {\n       url: "https://samples.clarifai.com/XiJinping.jpg"\n       image_info {\n         format: "UnknownImageFormat"\n         color_mode: "UnknownColorMode"\n       }\n     }\n     metadata {\n       fields {\n         key: "filename"\n         value {\n           string_value: "XiJinping.jpg"\n         }\n       }\n       fields {\n         key: "split"\n         value {\n           string_value: "train"\n         }\n       }\n     }\n   }\n   created_at {\n     seconds: 1712322204\n     nanos: 737881425\n   }\n   modified_at {\n     seconds: 1712322204\n     nanos: 737881425\n   }\n   status {\n     code: INPUT_DOWNLOAD_PENDING\n     description: "Download pending"\n   }\n }\n inputs_add_job {\n   id: "8557e0f57f464c22b3483de76757fb4f"\n   progress {\n     pending_count: 1\n   }\n   created_at {\n     seconds: 1712322204\n     nanos: 714751000\n   }\n   modified_at {\n     seconds: 1712322204\n     nanos: 714751000\n   }\n   status {\n     code: JOB_QUEUED\n     description: "Job is queued to be ran."\n   }\n })',L='2024-04-05 13:05:49 INFO     clarifai.client.input:                                                    input.py:674\n                             Inputs Uploaded                                                                       \n                             code: SUCCESS                                                                         \n                             description: "Ok"                                                                     \n                             details: "All inputs successfully added"                                              \n                             req_id: "72c9820d805efb9f3ee7f0508778c1f3"                                            \n                                                                                                                   \nINFO:clarifai.client.input:\nInputs Uploaded\ncode: SUCCESS\ndescription: "Ok"\ndetails: "All inputs successfully added"\nreq_id: "72c9820d805efb9f3ee7f0508778c1f3"\n\n(\'7fdc30b9c2a24f31b6a41b32bd9fea02\',\n status {\n   code: SUCCESS\n   description: "Ok"\n   details: "All inputs successfully added"\n   req_id: "72c9820d805efb9f3ee7f0508778c1f3"\n }\n inputs {\n   id: "video_data_metadata"\n   data {\n     video {\n       url: "https://samples.clarifai.com/beer.mp4"\n       video_info {\n         video_format: "UnknownVideoFormat"\n       }\n     }\n     metadata {\n       fields {\n         key: "filename"\n         value {\n           string_value: "drinks.jpg"\n         }\n       }\n       fields {\n         key: "split"\n         value {\n           string_value: "train"\n         }\n       }\n     }\n   }\n   created_at {\n     seconds: 1712322349\n     nanos: 628288634\n   }\n   modified_at {\n     seconds: 1712322349\n     nanos: 628288634\n   }\n   status {\n     code: INPUT_DOWNLOAD_PENDING\n     description: "Download pending"\n   }\n }\n inputs_add_job {\n   id: "7fdc30b9c2a24f31b6a41b32bd9fea02"\n   progress {\n     pending_count: 1\n   }\n   created_at {\n     seconds: 1712322349\n     nanos: 602487000\n   }\n   modified_at {\n     seconds: 1712322349\n     nanos: 602487000\n   }\n   status {\n     code: JOB_QUEUED\n     description: "Job is queued to be ran."\n   }\n })',B='2024-04-05 13:07:04 INFO     clarifai.client.input:                                                    input.py:674\n                             Inputs Uploaded                                                                       \n                             code: SUCCESS                                                                         \n                             description: "Ok"                                                                     \n                             details: "All inputs successfully added"                                              \n                             req_id: "835f6c736f032947d1f4067e39c10b72"                                            \n                                                                                                                   \nINFO:clarifai.client.input:\nInputs Uploaded\ncode: SUCCESS\ndescription: "Ok"\ndetails: "All inputs successfully added"\nreq_id: "835f6c736f032947d1f4067e39c10b72"\n\n(\'e3de274f644a4e98a488e7c85f94c0d1\',\n status {\n   code: SUCCESS\n   description: "Ok"\n   details: "All inputs successfully added"\n   req_id: "835f6c736f032947d1f4067e39c10b72"\n }\n inputs {\n   id: "text_data_metadata"\n   data {\n     metadata {\n       fields {\n         key: "filename"\n         value {\n           string_value: "tweet.txt"\n         }\n       }\n       fields {\n         key: "split"\n         value {\n           string_value: "train"\n         }\n       }\n     }\n     text {\n       url: "https://data.clarifai.com/orig/users/8tzpjy1a841y/apps/visual_classifier_eval/inputs/text/c439598b04d8112867eec70097aa00c2"\n       text_info {\n         encoding: "UnknownTextEnc"\n       }\n     }\n   }\n   created_at {\n     seconds: 1712322424\n     nanos: 56818659\n   }\n   modified_at {\n     seconds: 1712322424\n     nanos: 56818659\n   }\n   status {\n     code: INPUT_DOWNLOAD_PENDING\n     description: "Download pending"\n   }\n }\n inputs_add_job {\n   id: "e3de274f644a4e98a488e7c85f94c0d1"\n   progress {\n     pending_count: 1\n   }\n   created_at {\n     seconds: 1712322423\n     nanos: 941401000\n   }\n   modified_at {\n     seconds: 1712322423\n     nanos: 941401000\n   }\n   status {\n     code: JOB_QUEUED\n     description: "Job is queued to be ran."\n   }\n })',G='2024-04-08 06:39:32 INFO     clarifai.client.input:                                                    input.py:674\n                             Inputs Uploaded                                                                       \n                             code: SUCCESS                                                                         \n                             description: "Ok"                                                                     \n                             details: "All inputs successfully added"                                              \n                             req_id: "4c96e4167170c174838c7987101f3478"                                            \n                                                                                                                   \nINFO:clarifai.client.input:\nInputs Uploaded\ncode: SUCCESS\ndescription: "Ok"\ndetails: "All inputs successfully added"\nreq_id: "4c96e4167170c174838c7987101f3478"\n\n(\'109349aa790a404db39f6324415a47a5\',\n status {\n   code: SUCCESS\n   description: "Ok"\n   details: "All inputs successfully added"\n   req_id: "4c96e4167170c174838c7987101f3478"\n }\n inputs {\n   id: "audio_data_metadata"\n   data {\n     metadata {\n       fields {\n         key: "filename"\n         value {\n           string_value: "goodmorning.wav"\n         }\n       }\n       fields {\n         key: "split"\n         value {\n           string_value: "test"\n         }\n       }\n     }\n     audio {\n       url: "https://s3.amazonaws.com/samples.clarifai.com/GoodMorning.wav"\n       audio_info {\n         audio_format: "UnknownAudioFormat"\n       }\n     }\n   }\n   created_at {\n     seconds: 1712558372\n     nanos: 764691920\n   }\n   modified_at {\n     seconds: 1712558372\n     nanos: 764691920\n   }\n   status {\n     code: INPUT_DOWNLOAD_PENDING\n     description: "Download pending"\n   }\n }\n inputs_add_job {\n   id: "109349aa790a404db39f6324415a47a5"\n   progress {\n     pending_count: 1\n   }\n   created_at {\n     seconds: 1712558372\n     nanos: 751997000\n   }\n   modified_at {\n     seconds: 1712558372\n     nanos: 751997000\n   }\n   status {\n     code: JOB_QUEUED\n     description: "Job is queued to be ran."\n   }\n })',M="##########################################################################\n# In this section, we set the user authentication, app ID, and input URL. \n# Change these strings to run your own example.\n##########################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change this to whatever image input you want to add\nIMAGE_URL = 'https://samples.clarifai.com/metro-north.jpg'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\npost_inputs_response = stub.PostInputs(\n    service_pb2.PostInputsRequest(\n        user_app_id=userDataObject,\n        inputs=[\n            resources_pb2.Input(\n                data=resources_pb2.Data(\n                    image=resources_pb2.Image(\n                        url=IMAGE_URL,\n                        allow_duplicate_url=True\n                    )\n                )\n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif post_inputs_response.status.code != status_code_pb2.SUCCESS:\n    print(post_inputs_response.status)\n    raise Exception(\"Post inputs failed, status: \" + post_inputs_response.status.description)\n",k="##################################################################################\n# In this section, we set the user authentication, app ID, and the location\n# of the image we want as an input. Change these strings to run your own example.\n##################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change this to whatever image input you want to add\nIMAGE_FILE_LOCATION = 'YOUR_IMAGE_FILE_LOCATION'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\nwith open(IMAGE_FILE_LOCATION, \"rb\") as f:\n    file_bytes = f.read()\n\npost_inputs_response = stub.PostInputs(\n    service_pb2.PostInputsRequest(\n        user_app_id=userDataObject,\n        inputs=[\n            resources_pb2.Input(\n                data=resources_pb2.Data(\n                    image=resources_pb2.Image(\n                        base64=file_bytes\n                    )\n                )\n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif post_inputs_response.status.code != status_code_pb2.SUCCESS:\n    print(post_inputs_response.status)\n    raise Exception(\"Post inputs failed, status: \" + post_inputs_response.status.description)\n\n",$="##################################################################################\n# In this section, we set the user authentication, app ID, and the URLs and IDs \n# of the images we want as inputs. Change these strings to run your own example.\n##################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to whatever inputs you want to add\nIMAGE_URL_1 = 'https://samples.clarifai.com/metro-north.jpg'\nIMAGE_URL_2 = 'https://samples.clarifai.com/puppy.jpeg'\nINPUT_ID_1 = 'mytrain'\nINPUT_ID_2 = 'mypuppy'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\npost_inputs_response = stub.PostInputs(\n    service_pb2.PostInputsRequest(\n        user_app_id=userDataObject,\n        inputs=[\n            resources_pb2.Input(\n                id=INPUT_ID_1,\n                data=resources_pb2.Data(\n                    image=resources_pb2.Image(\n                        url=IMAGE_URL_1,\n                        allow_duplicate_url=True\n                    )\n                )\n            ),\n            resources_pb2.Input(\n                id=INPUT_ID_2,\n                data=resources_pb2.Data(\n                    image=resources_pb2.Image(\n                        url=IMAGE_URL_2,\n                        allow_duplicate_url=True\n                    )\n                )\n            ),\n        ]\n    ),\n    metadata=metadata\n)\n\nif post_inputs_response.status.code != status_code_pb2.SUCCESS:\n    print(\"There was an error with your request!\")\n    for input_object in post_inputs_response.inputs:\n        print(\"Input \" + input_object.id + \" status:\")\n        print(input_object.status)    \n    raise Exception(\"Post inputs failed, status: \" + post_inputs_response.status.description)\n",J="##################################################################################\n# In this section, we set the user authentication, app ID, and the input to add\n# with concept. Change these strings to run your own example.\n##################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to whatever input and concept you want to add\nIMAGE_URL = 'https://samples.clarifai.com/puppy.jpeg'\nCONCEPT_ID = 'charlie'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\npost_inputs_response = stub.PostInputs(\n    service_pb2.PostInputsRequest(\n        user_app_id=userDataObject,\n        inputs=[\n            resources_pb2.Input(\n                data=resources_pb2.Data(\n                    image=resources_pb2.Image(\n                        url=IMAGE_URL,\n                        allow_duplicate_url=True\n                    ),\n                    concepts=[resources_pb2.Concept(id=CONCEPT_ID, value=1.)]\n                )\n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif post_inputs_response.status.code != status_code_pb2.SUCCESS:\n    print(post_inputs_response.status)\n    raise Exception(\"Post inputs failed, status: \" + post_inputs_response.status.description)\n",q="##################################################################################\n# In this section, we set the user authentication, app ID, and the input to add\n# with concepts. Change these strings to run your own example.\n##################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to whatever input and concepts you want to add\nIMAGE_URL = 'https://samples.clarifai.com/puppy.jpeg'\nCONCEPT_IDS_LIST = ['one', 'two', 'three', 'four', 'five', 'six']\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\npost_inputs_response = stub.PostInputs(\n    service_pb2.PostInputsRequest(\n        user_app_id=userDataObject,\n        inputs=[\n            resources_pb2.Input(\n                data=resources_pb2.Data(\n                    image=resources_pb2.Image(\n                        url=IMAGE_URL,\n                        allow_duplicate_url=True\n                    ),\n                    # We use Python list comprehension to iterate through the list of concepts\n                    concepts=[resources_pb2.Concept(id=str(i), value=1.) for i in CONCEPT_IDS_LIST] \n                )\n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif post_inputs_response.status.code != status_code_pb2.SUCCESS:\n    print(post_inputs_response.status)\n    raise Exception(\"Post inputs failed, status: \" + post_inputs_response.status.description)\n",W="####################################################################################\n# In this section, we set the user authentication, app ID, and the custom metadata \n# and input we want to add. Change these strings to run your own example.\n####################################################################################\n\nUSER_ID = 'YOUR_USER_ID_HERE'\n# Your PAT (Personal Access Token) can be found in the Account's Security section\nPAT = 'YOUR_PAT_HERE'\nAPP_ID = 'YOUR_APP_ID_HERE'\n# Change these to whatever input and custom metadata you want to add\nCUSTOM_METADATA = {\"id\": \"id001\", \"type\": \"animal\", \"size\": 100}\nIMAGE_URL = 'https://samples.clarifai.com/puppy.jpeg'\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\nfrom google.protobuf.struct_pb2 import Struct\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (('authorization', 'Key ' + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\ninput_metadata = Struct()\n\ninput_metadata.update(CUSTOM_METADATA)\n\npost_inputs_response = stub.PostInputs(\n    service_pb2.PostInputsRequest(\n        user_app_id=userDataObject,\n        inputs=[\n            resources_pb2.Input(\n                data=resources_pb2.Data(\n                    image=resources_pb2.Image(\n                        url=IMAGE_URL,\n                        allow_duplicate_url=True\n                    ),\n                    metadata=input_metadata\n                )\n            )\n        ]\n    ),\n    metadata=metadata\n)\n\nif post_inputs_response.status.code != status_code_pb2.SUCCESS:\n    print(post_inputs_response.status)\n    raise Exception(\"Post inputs failed, status: \" + post_inputs_response.status.description)\n",K="\x3c!--index.html file--\x3e\n\n<script>\n    ////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and input URL. \n    // Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = 'YOUR_USER_ID_HERE';\n    // Your PAT (Personal Access Token) can be found in the Account's Security section\n    const PAT = 'YOUR_PAT_HERE';\n    const APP_ID = 'YOUR_APP_ID_HERE';\n    // Change this to whatever image input you want to add\n    const IMAGE_URL = 'https://samples.clarifai.com/metro-north.jpg';\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        \"user_app_id\": {\n            \"user_id\": USER_ID,\n            \"app_id\": APP_ID\n        },\n        \"inputs\": [\n            {\n                \"data\": {\n                    \"image\": {\n                        \"url\": IMAGE_URL,\n                        \"allow_duplicate_url\": true\n                    }\n                }\n            }\n        ]\n    });\n\n    const requestOptions = {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        },\n        body: raw\n    };\n\n    fetch(\"https://api.clarifai.com/v2/inputs\", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n\n<\/script>",z="\x3c!--index.html file--\x3e\n\n<script>\n    ////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the location\n    // of the image we want as an input. Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = 'YOUR_USER_ID_HERE';\n    // Your PAT (Personal Access Token) can be found in the Account's Security section\n    const PAT = 'YOUR_PAT_HERE';\n    const APP_ID = 'YOUR_APP_ID_HERE';\n    // Change this to whatever image input you want to add\n    const BYTES_STRING = '/9j/4AAQSkZJRgABAQAAAQABAAD/2wBDAAUDBAQEAwUEBAQFBQUGBwwIBwcHBw8LCwkMEQ8SEhEPERETFhwXExQaFRERGCEYGh0dHx8fExciJCIeJBweHx7/2wBDAQUFBQcGBw4ICA4eFBEUHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh7/wAARCAAoACgDASIAAhEBAxEB/8QAGQAAAgMBAAAAAAAAAAAAAAAAAAYDBQcE/8QAMBAAAQMDAwMDAgQHAAAAAAAAAQIDBAAFEQYSIQcTMTJBURRhCBYikSNScXKhsdH/xAAZAQACAwEAAAAAAAAAAAAAAAAFBgIDBAf/xAAtEQABAwMBBgQHAQAAAAAAAAABAgMRAAQhMQUSE0FRYQaBocEUFiJCcrHR8P/aAAwDAQACEQMRAD8A3+RYY1unSYzCS0ttZUkAgktn0q5yT7jPyDUC4wdGwycH5U2Kt9ZQ7VI1qw5PkvQy3CSVPpf7aQjuKyFH25xzn3pHn3TVNy01Hl2hyy6YdkSpKsS9sl/6RlI3rRu3dxWd6spwnAGPIJTfl925fcLaoSDHXvyo6i9SlCQrU9wKln3OyWiaDN1RAbW3kKbSd7gPtwMkH/tTWy9afuy1iPfnXMAblITwkE4yf08cn3pSbYt1uts24XH6fUbiLAuY1MWyGkLEmUW0rcCRvUpQ5CtwKQCPgi4S1ZbDe4sd9NntDEe79m3uOBLTr0IR9jzodSMqUpTu9JJ8owD7UTT4ZCfv9PbP7860m+s+HBSrejWRuz2kAxoesGYxTW/Zlpkwo1vkuSly3UgKWQUhHJUvIHsAaKTemF8XE6sWmxyZkiaZrMh1jv8ArQNpUVqB8FW0njHqx4zRVVhsph1KlKk5xQ+7uHmikaSJrQerMByet2IwvtuTLa4xv2k7Rk84H9x/esHv92d01boenLXGcuiWrFIhLlpbcaQ2/JdK3VJCkAq2pAR7Zz7YxWudY9fxNIdQbNGkR5TyX4aisNNpUMFZAzkj4NK0jq9ZpbLr0PSlzkhrlZDaQlP3P8Q4/ap3F87bPucJEkx/hHv60b2TYXLrKN5sramYECSQRk9M6c6zmJ+eb5Hi22M7cnWGIQgFLbX0zSo4PDa1YBcTgDyMjJ/qbGPabH08SJt1Uzc9QqRliGg5QySPKvgc+TyfYDmmTUWpNYz7ctxoQdPQshCktupckDJUPUcJT6DwMq8YyaQ9VL0pCS8zapcq4SVOBZmPDO8/cnknlWcDBwn4NYnPjLkQ+qE9OtOVlYpeVHDCEkkkJyT+SuQzy5Y0ru6Ez511/Efa5s1fdkOtyVurIxgdlQAA9gOKKPwolU7remU5hCGYEgo38KUv9I/0TRTDYJCWQBSF4rIN/CRgAR0iTpVD1j1g/qDqJcJqlKcjB9bcda142MpOEJAzgeMnjyTSyze5KEuNRpDoDvC0oe4X9iAeaKKFK+oya6fbOqYbDTeEiAPKpHdS3gBLYc7RQkp3ApQog+cq8nwPJrljzxnPZbUfnugn/NFFRgEVch9xKsH0H8pg6e3x3T3UC1ajaZITGkJLoS4MKbOUrzz/ACKVRRRVzVwtoQmhG1NkWu0HuI+JI8u/Kv/Z';\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        \"user_app_id\": {\n            \"user_id\": USER_ID,\n            \"app_id\": APP_ID\n        },\n        \"inputs\": [\n            {\n                \"data\": {\n                    \"image\": {\n                        \"base64\": BYTES_STRING\n                    },\n                }\n            }\n        ]\n    });\n\n    const requestOptions = {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        },\n        body: raw\n    };\n\n    fetch(\"https://api.clarifai.com/v2/inputs\", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n\n<\/script>",F='\x3c!--index.html file--\x3e\n\n<script>\n    ////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the URLs and IDs \n    // of the images we want as inputs. Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = \'YOUR_USER_ID_HERE\';\n    // Your PAT (Personal Access Token) can be found in the Account\'s Security section\n    const PAT = \'YOUR_PAT_HERE\';\n    const APP_ID = \'YOUR_APP_ID_HERE\';\n    // Change these to whatever inputs you want to add\n    const IMAGE_URL_1 = \'https://samples.clarifai.com/metro-north.jpg\';\n    const IMAGE_URL_2 = \'https://samples.clarifai.com/puppy.jpeg\';\n    const INPUT_ID_1 = \'input1\';\n    const INPUT_ID_2 = \'puppy1\';\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        "user_app_id": {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        "inputs": [\n            {\n                "data": {\n                    "image": {\n                        "url": IMAGE_URL_1,\n                        "allow_duplicate_url": true\n                    }\n                },\n                "id": INPUT_ID_1\n            },\n            {\n                "data": {\n                    "image": {\n                        "url": IMAGE_URL_2,\n                        "allow_duplicate_url": true\n                    }\n                },\n                "id": INPUT_ID_2\n            }\n        ]\n    });\n\n    const requestOptions = {\n        method: \'POST\',\n        headers: {\n            \'Accept\': \'application/json\',\n            \'Authorization\': \'Key \' + PAT\n        },\n        body: raw\n    };\n\n    fetch("https://api.clarifai.com/v2/inputs", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log(\'error\', error));\n\n<\/script>',Q='\x3c!--index.html file--\x3e\n\n<script>\n    ////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the input to add\n    // with concept. Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = \'YOUR_USER_ID_HERE\';\n    // Your PAT (Personal Access Token) can be found in the Account\'s Security section\n    const PAT = \'YOUR_PAT_HERE\';\n    const APP_ID = \'YOUR_APP_ID_HERE\';\n    // Change these to whatever input and concept you want to add\n    const IMAGE_URL = \'https://samples.clarifai.com/puppy.jpeg\';\n    const CONCEPT_ID = \'charlie\';\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        "user_app_id": {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        "inputs": [\n            {\n                "data": {\n                    "image": {\n                        "url": IMAGE_URL,\n                        "allow_duplicate_url": true\n                    },\n                    // Optionally add a concept with your input\n                    "concepts": [\n                        {\n                            "id": CONCEPT_ID,\n                            "value": 1\n                        }\n                    ]\n                }\n            }\n        ]\n    });\n\n    const requestOptions = {\n        method: \'POST\',\n        headers: {\n            \'Accept\': \'application/json\',\n            \'Authorization\': \'Key \' + PAT\n        },\n        body: raw\n    };\n\n    fetch("https://api.clarifai.com/v2/inputs", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log(\'error\', error));\n\n<\/script>',X="\x3c!--index.html file--\x3e\n\n<script>\n    ////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the input to add\n    // with concepts. Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = 'YOUR_USER_ID_HERE';\n    // Your PAT (Personal Access Token) can be found in the Account's Security section\n    const PAT = 'YOUR_PAT_HERE';\n    const APP_ID = 'YOUR_APP_ID_HERE';\n    // Change these to whatever input and concepts you want to add\n    const IMAGE_URL = 'https://samples.clarifai.com/puppy.jpeg';\n    const CONCEPT_IDS_LIST = ['one', 'two', 'three', 'four', 'five', 'six'];\n\n    // We use a map function to iterate through the list of concepts\n    const myFunction = () => {\n       return CONCEPT_IDS_LIST.map((concept)=>({\"id\":concept,\"value\":1}));\n    }\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        \"user_app_id\": {\n            \"user_id\": USER_ID,\n            \"app_id\": APP_ID\n        },\n        \"inputs\": [\n            {\n                \"data\": {\n                    \"image\": {\n                        \"url\": IMAGE_URL,\n                        \"allow_duplicate_url\": true\n                    },\n                    \n                    \"concepts\": myFunction()\n                }\n            }\n        ]\n    });\n\n    const requestOptions = {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        },\n        body: raw\n    };\n\n    fetch(\"https://api.clarifai.com/v2/inputs\", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n\n<\/script>",V='\x3c!--index.html file--\x3e\n\n<script>\n    ///////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the input and custom\n    // metadata we want to add. Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = \'YOUR_USER_ID_HERE\';\n    // Your PAT (Personal Access Token) can be found in the Account\'s Security section\n    const PAT = \'YOUR_PAT_HERE\';\n    const APP_ID = \'YOUR_APP_ID_HERE\';\n    // Change these to whatever input and custom metadata you want to add\n    const IMAGE_URL = \'https://samples.clarifai.com/puppy.jpeg\';\n    const CUSTOM_METADATA = { "id": "id001", "type": "animal", "size": 100 };\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        "user_app_id": {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        "inputs": [\n            {\n                "data": {\n                    "image": {\n                        "url": IMAGE_URL,\n                        "allow_duplicate_url": true\n                    },\n                    "metadata": CUSTOM_METADATA\n                }\n            }\n        ]\n    });\n\n    const requestOptions = {\n        method: \'POST\',\n        headers: {\n            \'Accept\': \'application/json\',\n            \'Authorization\': \'Key \' + PAT\n        },\n        body: raw\n    };\n\n    fetch("https://api.clarifai.com/v2/inputs", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log(\'error\', error));\n\n<\/script>',Z='//index.js file\n\n////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and input URL. \n// Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n// Change this to whatever image input you want to add\nconst IMAGE_URL = \'https://samples.clarifai.com/metro-north.jpg\';\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PostInputs(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        inputs: [\n            { data: { image: { url: IMAGE_URL, allow_duplicate_url: true } } }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            console.log(response.status);\n            throw new Error("Post inputs failed, status: " + response.status.description);\n        }\n    }\n\n);',nn='//index.js file\n\n////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the location\n// of the image we want as an input. Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n// Change this to whatever image input you want to add\nconst IMAGE_FILE_LOCATION = \'YOUR_IMAGE_FILE_LOCATION\';\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nconst fs = require("fs");\nconst imageBytes = fs.readFileSync(IMAGE_FILE_LOCATION);\n\nstub.PostInputs(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n\n        inputs: [\n            { data: { image: { base64: imageBytes } } }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            console.log(response.status)\n            throw new Error("Post inputs failed, status: " + response.status.description);\n        }\n    }\n);',en='//index.js file\n\n////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the URLs and IDs \n// of the images we want as inputs. Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n// Change these to whatever inputs you want to add\nconst IMAGE_URL_1 = \'https://samples.clarifai.com/metro-north.jpg\';\nconst IMAGE_URL_2 = \'https://samples.clarifai.com/puppy.jpeg\';\nconst INPUT_ID_1 = \'train1\';\nconst INPUT_ID_2 = \'puppy1\';\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PostInputs(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n\n        inputs: [\n            {\n                id: INPUT_ID_1,\n                data: {image: {url: IMAGE_URL_1, allow_duplicate_url: true}}\n            },\n            {\n                id: INPUT_ID_2,\n                data: {image: {url: IMAGE_URL_2, allow_duplicate_url: true}}\n            },\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            for (const input of response.inputs) {\n                console.log("Input " + input.id + " status: ");\n                console.log(JSON.stringify(input.status, null, 2) + "\\n");\n            }\n\n            throw new Error("Post inputs failed, status: " + response.status.description);\n        }\n    }\n);',tn='//index.js file\n\n////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the input to add\n// with concept. Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n// Change these to whatever input and concept you want to add\nconst IMAGE_URL = \'https://samples.clarifai.com/puppy.jpeg\';\nconst CONCEPT_ID = \'charlie\';\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PostInputs(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        inputs: [{\n            data: {\n                image: { url: IMAGE_URL, allow_duplicate_url: true },\n                concepts: [{ id: CONCEPT_ID, value: 1. }]\n            }\n        }]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post inputs failed, status: " + response.status.description);\n        }\n    }\n);',an="//index.js file\n\n////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the input to add\n// with concepts. Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = 'YOUR_USER_ID_HERE';\n// Your PAT (Personal Access Token) can be found in the Account's Security section\nconst PAT = 'YOUR_PAT_HERE';\nconst APP_ID = 'YOUR_APP_ID_HERE';\n// Change these to whatever input and concepts you want to add\nconst IMAGE_URL = 'https://samples.clarifai.com/puppy.jpeg';\nconst CONCEPT_IDS_LIST = ['one', 'two', 'three', 'four', 'five', 'six'];\n\n// We use a map function to iterate through the list of concepts\nconst myFunction = () => {\n    return CONCEPT_IDS_LIST.map((concept) => ({\"id\":concept,\"value\":1}));\n }\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require(\"clarifai-nodejs-grpc\");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set(\"authorization\", \"Key \" + PAT);\n\nstub.PostInputs(\n    {\n        user_app_id: {\n            \"user_id\": USER_ID,\n            \"app_id\": APP_ID\n        },\n        inputs: [{\n            data: {\n                image: { url: IMAGE_URL, allow_duplicate_url: true },\n                concepts: myFunction()\n            }\n        }]\n    },\n    metadata,    \n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }        \n        if (response.status.code !== 10000) {\n            throw new Error(\"Post inputs failed, status: \" + response.status.description);\n        }\n    }    \n);",sn='//index.js file\n\n///////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the input and custom\n// metadata we want to add. Change these strings to run your own example.\n///////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = \'YOUR_USER_ID_HERE\';\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = \'YOUR_PAT_HERE\';\nconst APP_ID = \'YOUR_APP_ID_HERE\';\n// Change these to whatever input and custom metadata you want to add\nconst IMAGE_URL = \'https://samples.clarifai.com/puppy.jpeg\';\nconst CUSTOM_METADATA = { id: "id001", type: "animal", size: 100 };\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PostInputs(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        inputs: [{\n            data: {\n                image: { url: IMAGE_URL, allow_duplicate_url: true },\n                metadata: CUSTOM_METADATA\n            }\n        }]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error("Post inputs failed, status: " + response.status.description);\n        }\n    }\n);',on='package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.status.*;\n\npublic class ClarifaiExample {\n\n    ////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and input URL.\n    // Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change this to whatever image input you want to add\n    static final String IMAGE_URL = "https://samples.clarifai.com/metro-north.jpg";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiInputResponse postInputsResponse = stub.postInputs(\n            PostInputsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .addInputs(\n                Input.newBuilder().setData(\n                    Data.newBuilder().setImage(\n                        Image.newBuilder()\n                        .setUrl(IMAGE_URL)\n                        .setAllowDuplicateUrl(true)\n                    )\n                )\n            ).build()\n        );\n\n        if (postInputsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post inputs failed, status: " + postInputsResponse.getStatus());\n        }\n\n    }\n\n}',rn='package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\nimport com.google.protobuf.ByteString;\nimport java.io.File;\nimport java.io.IOException;\nimport java.nio.file.Files;\n\npublic class ClarifaiExample {\n\n    ////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the location\n    // of the image we want as an input. Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change this to whatever image input you want to add\n    static final String IMAGE_FILE_LOCATION = "YOUR_IMAGE_FILE_LOCATION";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) throws IOException {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiInputResponse postInputsResponse = stub.postInputs(\n            PostInputsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .addInputs(\n                Input.newBuilder().setData(\n                    Data.newBuilder().setImage(\n                        Image.newBuilder()\n                        .setBase64(ByteString.copyFrom(Files.readAllBytes(\n                            new File(IMAGE_FILE_LOCATION).toPath()\n                        )))\n                    )\n                )\n            ).build()\n        );\n\n        if (postInputsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post inputs failed, status: " + postInputsResponse.getStatus());\n        }\n    }\n}',cn='package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n\npublic class ClarifaiExample {\n\n    ////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the URLs and IDs\n    // of the images we want as inputs. Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to whatever inputs you want to add\n    static final String IMAGE_URL_1 = "https://samples.clarifai.com/metro-north.jpg";\n    static final String IMAGE_URL_2 = "https://samples.clarifai.com/puppy.jpeg";\n    static final String INPUT_ID_1 = "train1";\n    static final String INPUT_ID_2 = "puppy1";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiInputResponse postInputsResponse = stub.postInputs(\n            PostInputsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .addInputs(\n                Input.newBuilder()\n                .setId(INPUT_ID_1)\n                .setData(\n                    Data.newBuilder().setImage(\n                        Image.newBuilder()\n                        .setUrl(IMAGE_URL_1)\n                        .setAllowDuplicateUrl(true)\n                    )\n                )\n            )\n            .addInputs(\n                Input.newBuilder()\n                .setId(INPUT_ID_2)\n                .setData(\n                    Data.newBuilder().setImage(\n                        Image.newBuilder()\n                        .setUrl(IMAGE_URL_2)\n                        .setAllowDuplicateUrl(true)\n                    )\n                )\n            )\n            .build()\n        );\n\n        if (postInputsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            for (Input input: postInputsResponse.getInputsList()) {\n                System.out.println("Input " + input.getId() + " status: ");\n                System.out.println(input.getStatus() + "\\n");\n            }\n\n            throw new RuntimeException("Post inputs failed, status: " + postInputsResponse.getStatus());\n        }\n\n    }\n}',pn='package com.clarifai.example;\n\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\n\n\npublic class ClarifaiExample {\n\n    ////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the input to add\n    // with concept. Change these strings to run your own example.\n    ////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to whatever input and concept you want to add\n    static final String IMAGE_URL = "https://samples.clarifai.com/puppy.jpeg";\n    static final String CONCEPT_ID = "charlie";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiInputResponse postInputsResponse = stub.postInputs(\n            PostInputsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .addInputs(\n                Input.newBuilder().setData(\n                    Data.newBuilder()\n                    .setImage(\n                        Image.newBuilder()\n                        .setUrl(IMAGE_URL)\n                        .setAllowDuplicateUrl(true)\n                    )\n                    .addConcepts(\n                        Concept.newBuilder()\n                        .setId(CONCEPT_ID)\n                        .setValue(1f)\n                    )\n                )\n            ).build()\n        );\n\n        if (postInputsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post inputs failed, status: " + postInputsResponse.getStatus());\n        }\n\n    }\n}',un='package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.grpc.api.status.*;\nimport com.google.protobuf.Struct;\nimport com.google.protobuf.Value;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\n\npublic class ClarifaiExample {\n\n    //////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the input  \n    // we want to add. Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change this to whatever input you want to add\n    static final String IMAGE_URL = "https://samples.clarifai.com/puppy.jpeg";\n   \n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n            .withCallCredentials(new ClarifaiCallCredentials(PAT));\n       \n        MultiInputResponse postInputsResponse = stub.postInputs(\n            PostInputsRequest.newBuilder()\n            .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n            .addInputs(\n                Input.newBuilder().setData(\n                    Data.newBuilder()\n                        .setImage(\n                            Image.newBuilder()\n                                .setUrl(IMAGE_URL)\n                                .setAllowDuplicateUrl(true)\n                        )\n                        .setMetadata(\n                            Struct.newBuilder()\n                                .putFields("id", Value.newBuilder().setStringValue("id001").build())\n                                .putFields("type", Value.newBuilder().setStringValue("animal").build())\n                                .putFields("size", Value.newBuilder().setNumberValue(100).build())\n                        )\n                )\n            ).build()\n        );\n\n        if (postInputsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post inputs failed, status: " + postInputsResponse.getStatus());\n        }            \n       \n    }  \n}',ln='curl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/inputs" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "inputs": [\n      {\n        "data": {\n          "image": {\n            "url": "https://samples.clarifai.com/metro-north.jpg",\n            "allow_duplicate_url": true\n          }\n        }\n      }\n    ]\n  }\'\n  ',dn='curl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/inputs" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "inputs": [\n      {\n        "data": {\n          "image": {\n            "base64": "/9j/4AAQSkZJRgABAQAAAQABAAD/2wBDAAUDBAQEAwUEBAQFBQUGBwwIBwcHBw8LCwkMEQ8SEhEPERETFhwXExQaFRERGCEYGh0dHx8fExciJCIeJBweHx7/2wBDAQUFBQcGBw4ICA4eFBEUHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh7/wAARCAAoACgDASIAAhEBAxEB/8QAGQAAAgMBAAAAAAAAAAAAAAAAAAYDBQcE/8QAMBAAAQMDAwMDAgQHAAAAAAAAAQIDBAAFEQYSIQcTMTJBURRhCBYikSNScXKhsdH/xAAZAQACAwEAAAAAAAAAAAAAAAAFBgIDBAf/xAAtEQABAwMBBgQHAQAAAAAAAAABAgMRAAQhMQUSE0FRYQaBocEUFiJCcrHR8P/aAAwDAQACEQMRAD8A3+RYY1unSYzCS0ttZUkAgktn0q5yT7jPyDUC4wdGwycH5U2Kt9ZQ7VI1qw5PkvQy3CSVPpf7aQjuKyFH25xzn3pHn3TVNy01Hl2hyy6YdkSpKsS9sl/6RlI3rRu3dxWd6spwnAGPIJTfl925fcLaoSDHXvyo6i9SlCQrU9wKln3OyWiaDN1RAbW3kKbSd7gPtwMkH/tTWy9afuy1iPfnXMAblITwkE4yf08cn3pSbYt1uts24XH6fUbiLAuY1MWyGkLEmUW0rcCRvUpQ5CtwKQCPgi4S1ZbDe4sd9NntDEe79m3uOBLTr0IR9jzodSMqUpTu9JJ8owD7UTT4ZCfv9PbP7860m+s+HBSrejWRuz2kAxoesGYxTW/Zlpkwo1vkuSly3UgKWQUhHJUvIHsAaKTemF8XE6sWmxyZkiaZrMh1jv8ArQNpUVqB8FW0njHqx4zRVVhsph1KlKk5xQ+7uHmikaSJrQerMByet2IwvtuTLa4xv2k7Rk84H9x/esHv92d01boenLXGcuiWrFIhLlpbcaQ2/JdK3VJCkAq2pAR7Zz7YxWudY9fxNIdQbNGkR5TyX4aisNNpUMFZAzkj4NK0jq9ZpbLr0PSlzkhrlZDaQlP3P8Q4/ap3F87bPucJEkx/hHv60b2TYXLrKN5sramYECSQRk9M6c6zmJ+eb5Hi22M7cnWGIQgFLbX0zSo4PDa1YBcTgDyMjJ/qbGPabH08SJt1Uzc9QqRliGg5QySPKvgc+TyfYDmmTUWpNYz7ctxoQdPQshCktupckDJUPUcJT6DwMq8YyaQ9VL0pCS8zapcq4SVOBZmPDO8/cnknlWcDBwn4NYnPjLkQ+qE9OtOVlYpeVHDCEkkkJyT+SuQzy5Y0ru6Ez511/Efa5s1fdkOtyVurIxgdlQAA9gOKKPwolU7remU5hCGYEgo38KUv9I/0TRTDYJCWQBSF4rIN/CRgAR0iTpVD1j1g/qDqJcJqlKcjB9bcda142MpOEJAzgeMnjyTSyze5KEuNRpDoDvC0oe4X9iAeaKKFK+oya6fbOqYbDTeEiAPKpHdS3gBLYc7RQkp3ApQog+cq8nwPJrljzxnPZbUfnugn/NFFRgEVch9xKsH0H8pg6e3x3T3UC1ajaZITGkJLoS4MKbOUrzz/ACKVRRRVzVwtoQmhG1NkWu0HuI+JI8u/Kv/Z",\n            "allow_duplicate_url": true\n          }\n        }\n      }\n    ]\n  }\'\n  ',_n='curl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/inputs" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "inputs": [\n      {\n        "data": {\n          "image": {\n            "url": "https://samples.clarifai.com/metro-north.jpg",\n            "allow_duplicate_url": true\n          }\n        },\n        "id": "train1"\n      },\n      {\n        "data": {\n          "image": {\n            "url": "https://samples.clarifai.com/puppy.jpeg",\n            "allow_duplicate_url": true\n          }\n        },\n        "id": "puppy1"\n      }\n    ]\n  }\'',hn='curl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/inputs" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "inputs": [\n      {\n        "data": {\n          "image": {\n            "url": "https://samples.clarifai.com/puppy.jpeg",\n            "allow_duplicate_url": true\n          },\n          "concepts":[\n            {\n              "id": "charlie",\n              "value": 1\n            }\n          ]\n        }\n      }\n    ]\n  }\'',An='curl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/inputs" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "inputs": [\n      {\n        "data": {\n          "image": {\n            "url": "https://samples.clarifai.com/puppy.jpeg",\n            "allow_duplicate_url": true\n          },\n          "metadata": {"id": "id001", "type": "animal", "size": 100}\n        }\n      }\n    ]\n  }\'',In="<?php\n\nrequire __DIR__ . '/vendor/autoload.php';\n\n////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and input URL. \n// Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = 'YOUR_USER_ID_HERE';\n// Your PAT (Personal Access Token) can be found in the Account's Security section\n$PAT = 'YOUR_PAT_HERE';\n$APP_ID = 'YOUR_APP_ID_HERE';\n// Change this to whatever image input you want to add\n$IMAGE_URL = 'https://samples.clarifai.com/metro-north.jpg';\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\Data;\nuse Clarifai\\Api\\Image;\nuse Clarifai\\Api\\Input;\nuse Clarifai\\Api\\PostInputsRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ['Authorization' => ['Key ' . $PAT ]];\n\n$userDataObject = new UserAppIDSet([\n    'user_id' => $USER_ID, \n    'app_id' => $APP_ID \n]);\n\n// Let's make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PostInputs(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new PostInputsRequest([\n        'user_app_id' => $userDataObject,\n        'inputs' => [\n            new Input([ // The Input object wraps the Data object in order to meet the API specification                \n                'data' => new Data([ // The Data object is constructed around the Image object. It offers a container that has additional image independent\n                                    // metadata. In this particular use case, no other metadata is needed to be specified\n                    'image' => new Image([ // In the Clarifai platform, an image is defined by a special Image object\n                        'url' => $IMAGE_URL,\n                        'allow_duplicate_url' => true\n                    ])\n                ])\n            ])\n        ]        \n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception(\"Error: {$status->details}\");\n}\n\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    throw new Exception(\"Failure response: \" . $response->getStatus()->getDescription() . \" \" .\n        $response->getStatus()->getDetails());\n}\n\n?>",mn="<?php\n\nrequire __DIR__ . '/vendor/autoload.php';\n\n////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the location\n// of the image we want as an input. Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = 'YOUR_USER_ID_HERE';\n// Your PAT (Personal Access Token) can be found in the Account's Security section\n$PAT = 'YOUR_PAT_HERE';\n$APP_ID = 'YOUR_APP_ID_HERE';\n// Change this to whatever image input you want to add\n$IMAGE_FILE_LOCATION = 'YOUR_IMAGE_FILE_LOCATION';\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\Data;\nuse Clarifai\\Api\\Image;\nuse Clarifai\\Api\\Input;\nuse Clarifai\\Api\\PostInputsRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ['Authorization' => ['Key ' . $PAT ]];\n\n$userDataObject = new UserAppIDSet([\n    'user_id' => $USER_ID, \n    'app_id' => $APP_ID \n]);\n\n$imageData = file_get_contents($IMAGE_FILE_LOCATION); // Get the image bytes data from the location\n\n// Let's make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PostInputs(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new PostInputsRequest([\n        'user_app_id' => $userDataObject,\n        'inputs' => [\n            new Input([ // The Input object wraps the Data object in order to meet the API specification                \n                'data' => new Data([ // The Data object is constructed around the Image object. It offers a container that has additional image independent\n                                    // metadata. In this particular use case, no other metadata is needed to be specified\n                    'image' => new Image([ // In the Clarifai platform, an image is defined by a special Image object\n                        'base64' => $imageData\n                    ])\n                ])\n            ])\n        ]        \n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception(\"Error: {$status->details}\");\n}\n\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    throw new Exception(\"Failure response: \" . $response->getStatus()->getDescription() . \" \" .\n        $response->getStatus()->getDetails());\n}\n\n?>",En='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the URLs and IDs\n// of the images we want as inputs. Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change these to whatever inputs you want to add\n$IMAGE_URL_1 = "https://samples.clarifai.com/metro-north.jpg";\n$IMAGE_URL_2 = "https://samples.clarifai.com/puppy.jpeg";\n$INPUT_ID_1 = "train1";\n$INPUT_ID_2 = "puppy1";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\Data;\nuse Clarifai\\Api\\Image;\nuse Clarifai\\Api\\Input;\nuse Clarifai\\Api\\PostInputsRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PostInputs(\n        // The request object carries the request along with the request status and other metadata related to the request itself\n        new PostInputsRequest([\n            "user_app_id" => $userDataObject,\n            "inputs" => [\n                new Input([\n                    // The Input object wraps the Data object in order to meet the API specification\n                    "id" => $INPUT_ID_1,\n                    "data" => new Data([\n                        // The Data object is constructed around the Image object. It offers a container that has additional image independent\n                        // metadata. In this particular use case, no other metadata is needed to be specified\n                        "image" => new Image([\n                            // In the Clarifai platform, an image is defined by a special Image object\n                            "url" => $IMAGE_URL_1,\n                            "allow_duplicate_url" => true\n                        ])\n                    ])\n                ]),\n                new Input([\n                    "id" => $INPUT_ID_2,\n                    "data" => new Data([\n                        "image" => new Image([\n                            "url" => $IMAGE_URL_2,\n                            "allow_duplicate_url" => true\n                        ])\n                    ])\n                ])\n            ]\n        ]),\n        $metadata\n    )->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure\n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print "There was an error with your request!" . "<br>";\n    foreach ($response->getInputs() as $input_object) {\n        print "Input " . $input_object->getId() . " status: ";\n        print $input_object->getStatus()->getDetails() . "<br>";\n    }\n    throw new Exception("Post inputs failed, status: " . $response->getStatus()->getDescription());\n}\n\n?>\n',fn='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the input to add\n// with concept. Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change these to whatever input and concept you want to add\n$IMAGE_URL = \'https://samples.clarifai.com/puppy.jpeg\';\n$CONCEPT_ID = \'charlie\';\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\Api\\Concept;\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\Data;\nuse Clarifai\\Api\\Image;\nuse Clarifai\\Api\\Input;\nuse Clarifai\\Api\\PostInputsRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PostInputs(\n        // The request object carries the request along with the request status and other metadata related to the request itself\n        new PostInputsRequest([\n            "user_app_id" => $userDataObject,\n            "inputs" => [\n                new Input([\n                    // The Input object wraps the Data object in order to meet the API specification                    \n                    "data" => new Data([\n                        // The Data object is constructed around the Image object. It offers a container that has additional image independent\n                        // metadata. In this particular use case, no other metadata is needed to be specified\n                        "image" => new Image([\n                            // In the Clarifai platform, an image is defined by a special Image object\n                            "url" => $IMAGE_URL,\n                            "allow_duplicate_url" => true\n                        ]),\n                        "concepts" => [\n                            new Concept([\n                            "id" => $CONCEPT_ID,\n                            "value" => 1\n                        ])\n                        ]\n                    ])\n                ])                \n            ]\n        ]),\n        $metadata\n    )->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\n?>\n',gn='<?php\n\nrequire __DIR__ . "/vendor/autoload.php";\n\n////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the input and custom\n// metadata we want to add. Change these strings to run your own example.\n///////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\n$PAT = "YOUR_PAT_HERE";\n$APP_ID = "YOUR_APP_ID_HERE";\n// Change these to whatever input and custom metadata you want to add\n$IMAGE_URL = "https://samples.clarifai.com/puppy.jpeg";\n$CUSTOM_METADATA = \'{"id": "id001", "type": "animal", "size": 100}\';\n// Decode a JSON object into a PHP object\n$CUSTOM_METADATA_DECODE = var_dump(json_decode($CUSTOM_METADATA));\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\Data;\nuse Clarifai\\Api\\Image;\nuse Clarifai\\Api\\Input;\nuse Clarifai\\Api\\PostInputsRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ["Authorization" => ["Key " . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    "user_id" => $USER_ID,\n    "app_id" => $APP_ID\n]);\n\n// Let\'s make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PostInputs(\n        // The request object carries the request along with the request status and other metadata related to the request itself\n        new PostInputsRequest([\n            "user_app_id" => $userDataObject,\n            "inputs" => [\n                new Input([\n                    // The Input object wraps the Data object in order to meet the API specification                    \n                    "data" => new Data([\n                        // The Data object is constructed around the Image object. It offers a container that has additional image independent\n                        // metadata. In this particular use case, no other metadata is needed to be specified\n                        "image" => new Image([\n                            // In the Clarifai platform, an image is defined by a special Image object\n                            "url" => $IMAGE_URL,\n                            "allow_duplicate_url" => true\n                        ]),\n                        "metadata" => $CUSTOM_METADATA_DECODE\n                    ])\n                ])                \n            ]\n        ]),\n        $metadata\n    )->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception("Error: {$status->details}");\n}\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    print $response->getStatus()->getDetails();\n    throw new Exception("Failure response: " . $response->getStatus()->getDescription());\n}\n\n?>\n',Rn='######################################################################################################\n# In this section, we set the user authentication, app ID, ID to collect statistics about inputs job \n# to be created, and cloud storage URL. Change these strings to run your own example.\n######################################################################################################\n\nUSER_ID = "YOUR_USER_ID_HERE"\n# Your PAT (Personal Access Token) can be found in the Portal under Account > Security\nPAT = "YOUR_PAT_HERE"\nAPP_ID = "YOUR_APP_ID_HERE"\n# Change these to create your own extraction job\nINPUTS_JOB_ID = ""  # If empty, ID will be autogenerated; if non-empty, the given ID will be used\nCLOUD_STORAGE_URL = "s3://samples.clarifai.com/storage/"\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (("authorization", "Key " + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\npost_inputs_response = stub.PostInputsDataSources(\n    service_pb2.PostInputsDataSourcesRequest(\n        user_app_id=userDataObject,\n        app_pat=PAT,\n        data_sources=[\n            resources_pb2.InputsDataSource(\n                inputs_add_job_id=INPUTS_JOB_ID,\n                url=resources_pb2.DataSourceURL(\n                    url=CLOUD_STORAGE_URL,\n                    # Uncomment to add credentials\n                    # credentials=resources_pb2.DataSourceCredentials(\n                    # s3_creds=resources_pb2.AWSCreds(\n                    # id="ADD_ACCESS_ID_HERE",\n                    # secret="ADD_SECRET_HERE",\n                    # region="ADD_AWS_REGION_HERE"\n                    # )\n                    # If using GCP\n                    # gcpCreds="" # GCP uses service account key data (creds.json) as Byte array for authentication\n                    # ),\n                ),\n            )\n        ],\n    ),\n    metadata=metadata,\n)\n\nif post_inputs_response.status.code != status_code_pb2.SUCCESS:\n    print(post_inputs_response.status)\n    raise Exception(\n        "Post inputs failed, status: " + post_inputs_response.status.description\n    )\n\nprint(post_inputs_response)\n',Pn='\x3c!--index.html file--\x3e\n\n<script>\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, ID to collect statistics about inputs job \n    // to be created, and cloud storage URL. Change these strings to run your own example.\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = "YOUR_USER_ID_HERE";\n    // Your PAT (Personal Access Token) can be found in the Account\'s Security section\n    const PAT = "YOUR_PAT_HERE";\n    const APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to create your own extraction job\n    const INPUTS_JOB_ID = "";  // If empty, ID will be autogenerated; if non-empty, the given ID will be used\n    const CLOUD_STORAGE_URL = "s3://samples.clarifai.com/storage/";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        "user_app_id": {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        "app_pat": PAT,\n        "data_sources": [\n            {\n                "inputs_add_job_id": INPUTS_JOB_ID,\n                "url": {\n                    "url": CLOUD_STORAGE_URL,\n                    // Uncomment to add credentials\n                   /* "credentials": {\n                        "s3_creds": { "id": "ADD_ACCESS_ID_HERE", "secret": "ADD_SECRET_HERE", "region": "ADD_AWS_REGION_HERE" }\n                    }*/\n                }\n            }\n        ]\n\n    });\n\n    const requestOptions = {\n        method: \'POST\',\n        headers: {\n            \'Accept\': \'application/json\',\n            \'Authorization\': \'Key \' + PAT\n        },\n        body: raw\n    };\n\n    fetch("https://api.clarifai.com/v2/inputs/data_sources/", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log(\'error\', error));\n\n<\/script>\n',Dn='//index.js file\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, ID to collect statistics about inputs job \n// to be created, and cloud storage URL. Change these strings to run your own example.\n///////////////////////////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = "YOUR_PAT_HERE";\nconst APP_ID = "YOUR_APP_ID_HERE";\n// Change these to create your own extraction job\nconst INPUTS_JOB_ID = "";  // If empty, ID will be autogenerated; if non-empty, the given ID will be used\nconst CLOUD_STORAGE_URL = "s3://samples.clarifai.com/storage/";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PostInputsDataSources(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        "app_pat": PAT,\n        "data_sources": [\n            {\n                "inputs_add_job_id": INPUTS_JOB_ID,\n                "url": {\n                    "url": CLOUD_STORAGE_URL,\n                    // Uncomment to add credentials\n                    /* "credentials": {\n                         "s3_creds": { "id": "ADD_ACCESS_ID_HERE", "secret": "ADD_SECRET_HERE", "region": "ADD_AWS_REGION_HERE" }\n                     }*/\n                }\n            }\n        ]\n\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            console.log(response.status);\n            throw new Error("Post inputs failed, status: " + response.status.description);\n        }\n\n        console.log(response);\n    }\n\n);',Tn='package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.status.*;\n\npublic class ClarifaiExample {\n\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, ID to collect statistics about inputs job \n    // to be created, and cloud storage URL. Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to create your own extraction job\n    static final String INPUTS_JOB_ID = "";  // If empty, ID will be autogenerated; if non-empty, the given ID will be used\n    static final String CLOUD_STORAGE_URL = "s3://samples.clarifai.com/storage/";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n                .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiInputsAddJobResponse postInputsResponse = stub.postInputsDataSources(\n                PostInputsDataSourcesRequest.newBuilder()\n                        .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n                        .setAppPat(PAT)\n                        .addDataSources(InputsDataSource.newBuilder().setInputsAddJobId(INPUTS_JOB_ID)\n                                .setUrl(DataSourceURL.newBuilder()\n                                        .setUrl(CLOUD_STORAGE_URL)\n                                // Uncomment to add credentials\n                                /*.setCredentials(DataSourceCredentials.newBuilder()\n                                                .setS3Creds(AWSCreds.newBuilder()\n                                                        .setId("ADD_ACCESS_ID_HERE")\n                                                        .setSecret("ADD_SECRET_HERE")\n                                                        .setRegion("ADD_AWS_REGION_HERE")\n                                                )\n                                        )*/\n                                )\n                        ).build()\n        );\n\n        if (postInputsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post inputs failed, status: " + postInputsResponse.getStatus());\n        }\n\n        System.out.println(postInputsResponse);\n\n    }\n\n}\n',Sn="<?php\n\nrequire __DIR__ . '/vendor/autoload.php';\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, ID to collect statistics about inputs job \n// to be created, and cloud storage URL. Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = 'YOUR_USER_ID_HERE';\n// Your PAT (Personal Access Token) can be found in the Account's Security section\n$PAT = 'YOUR_PAT_HERE';\n$APP_ID = 'YOUR_APP_ID_HERE';\n# Change these to create your own extraction job\n$INPUTS_JOB_ID = ''; # If empty, ID will be autogenerated; if non-empty, the given ID will be used\n$CLOUD_STORAGE_URL = 's3://samples.clarifai.com/storage/';\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\PostInputsDataSourcesRequest;\nuse Clarifai\\Api\\InputsDataSource;\nuse Clarifai\\Api\\DataSourceURL;\nuse Clarifai\\Api\\DataSourceCredentials;\nuse Clarifai\\Api\\AWSCreds;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ['Authorization' => ['Key ' . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    'user_id' => $USER_ID,\n    'app_id' => $APP_ID\n]);\n\n// Let's make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PostInputsDataSources(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new PostInputsDataSourcesRequest([\n        'user_app_id' => $userDataObject,\n        'app_pat' => $PAT,\n        'data_sources' => [\n            new InputsDataSource([\n                'inputs_add_job_id' => $INPUTS_JOB_ID,\n                'url' => new DataSourceURL([\n                    'url' => $CLOUD_STORAGE_URL,\n                    // Uncomment to add credentials\n                    /*'credentials' => new DataSourceCredentials([\n                        's3_creds' => new AWSCreds([\n                            'id' => 'ADD_ACCESS_ID_HERE',\n                            'secret' => 'ADD_SECRET_HERE',\n                            'region' => 'ADD_AWS_REGION_HERE'\n                        ])\n                    ])*/\n                ])\n            ])\n        ]\n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception(\"Error: {$status->details}\");\n}\n\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    throw new Exception(\"Failure response: \" . $response->getStatus()->getDescription() . \" \" .\n        $response->getStatus()->getDetails());\n}\n\necho $response->serializeToJsonString();\n\n?>\n",Cn='curl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/inputs/data_sources/" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "app_pat": "YOUR_PAT_HERE",\n    "data_sources": [\n        {\n            "inputs_add_job_id": "",\n            "url": {\n                "url": "s3://samples.clarifai.com/storage/",\n                "credentials": {\n                    "s3_creds": {"id":"ADD_ACCESS_ID_HERE", "secret":"ADD_SECRET_HERE", "region":"ADD_AWS_REGION_HERE"},\n                    // Or, you can use GCP credentials\n                    "gcpCreds": "" // GCP uses service account key data (creds.json) as Byte array for authentication\n                }\n            }\n        }\n    ]\n  }\'\n',bn='###################################################################################################\n# In this section, we set the user authentication, app ID, and the inputs extraction job ID.\n# Change these strings to run your own example.\n###################################################################################################\n\nUSER_ID = "YOUR_USER_ID_HERE"\n# Your PAT (Personal Access Token) can be found in the Portal under Account > Security\nPAT = "YOUR_PAT_HERE"\nAPP_ID = "YOUR_APP_ID_HERE"\n# Change this ID to whatever inputs you want to track their upload process\nINPUTS_EXTRACTION_JOB_ID = "2a6f1f69cced42029986a72009e7d4da"\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (("authorization", "Key " + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\nget_inputs_extraction_response = stub.GetInputsExtractionJob(\n    service_pb2.GetInputsExtractionJobRequest(\n        user_app_id=userDataObject,\n        inputs_extraction_job_id=INPUTS_EXTRACTION_JOB_ID\n    ),\n    metadata=metadata,\n)\n\nif get_inputs_extraction_response.status.code != status_code_pb2.SUCCESS:\n    print(get_inputs_extraction_response.status)\n    raise Exception(\n        "Get input failed, status: " + get_inputs_extraction_response.status.description\n    )\n\nprint(get_inputs_extraction_response)\n',Un="\x3c!--index.html file--\x3e\n\n<script>\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the inputs extraction job ID.\n    // Change these strings to run your own example.\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = \"YOUR_USER_ID_HERE\";\n    // Your PAT (Personal Access Token) can be found in the Account's Security section\n    const PAT = \"YOUR_PAT_HERE\";\n    const APP_ID = \"YOUR_APP_ID_HERE\";\n    // Change this ID to whatever inputs you want to track their upload process\n    const INPUTS_EXTRACTION_JOB_ID = \"2a6f1f69cced42029986a72009e7d4da\";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const requestOptions = {\n        method: 'GET',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        }\n    };\n\n    fetch(`https://api.clarifai.com/v2/users/${USER_ID}/apps/${APP_ID}/inputs/jobs/extraction/${INPUTS_EXTRACTION_JOB_ID}`, requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n\n<\/script>",On='//index.js file\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the inputs extraction job ID.\n// Change these strings to run your own example.\n///////////////////////////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = "YOUR_PAT_HERE";\nconst APP_ID = "YOUR_APP_ID_HERE";\n// Change this ID to whatever inputs you want to track their upload process\nconst INPUTS_EXTRACTION_JOB_ID = "2a6f1f69cced42029986a72009e7d4da";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\n\nmetadata.set("authorization", "Key " + PAT);\n\nstub.GetInputsExtractionJob(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        "inputs_extraction_job_id": INPUTS_EXTRACTION_JOB_ID\n\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            console.log(response.status);\n            throw new Error("Get inputs failed, status: " + response.status.description);\n        }\n\n        console.log(response);\n    }\n\n);',wn='package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.status.*;\n\npublic class ClarifaiExample {\n\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the inputs extraction job ID.\n    // Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change this ID to whatever inputs you want to track their upload process\n    static final String INPUTS_EXTRACTION_JOB_ID = "2a6f1f69cced42029986a72009e7d4da";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n                .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        SingleInputsExtractionJobResponse getInputsResponse = stub.getInputsExtractionJob(\n                GetInputsExtractionJobRequest.newBuilder()\n                        .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n                        .setInputsExtractionJobId(INPUTS_EXTRACTION_JOB_ID)\n                        .build()\n        );\n\n        if (getInputsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post inputs failed, status: " + getInputsResponse.getStatus());\n        }\n\n        System.out.println(getInputsResponse);\n\n    }\n\n}\n',jn="<?php\n\nrequire __DIR__ . '/vendor/autoload.php';\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the inputs extraction job ID.\n// Change these strings to run your own example.\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = 'YOUR_USER_ID_HERE';\n// Your PAT (Personal Access Token) can be found in the Account's Security section\n$PAT = 'YOUR_PAT_HERE';\n$APP_ID = 'YOUR_APP_ID_HERE';\n// Change this ID to whatever inputs you want to track their upload process\n$INPUTS_EXTRACTION_JOB_ID = '2a6f1f69cced42029986a72009e7d4da';\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\GetInputsExtractionJobRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ['Authorization' => ['Key ' . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    'user_id' => $USER_ID,\n    'app_id' => $APP_ID\n]);\n\n// Let's make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->GetInputsExtractionJob(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new GetInputsExtractionJobRequest([\n        'user_app_id' => $userDataObject,        \n        'inputs_extraction_job_id' => $INPUTS_EXTRACTION_JOB_ID\n\n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception('Error: {$status->details}');\n}\n\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    throw new Exception('Failure response: ' . $response->getStatus()->getDescription() . ' ' .\n        $response->getStatus()->getDetails());\n}\n\necho $response->serializeToJsonString();\n\n?>\n",xn='curl -X GET "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/inputs/jobs/extraction/YOUR_INPUTS_EXTRACTION_JOB_ID_HERE" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\\n',Nn='##################################################################\n# In this section, we set the user authentication and app ID.\n# Change these strings to run your own example.\n###################################################################\n\nUSER_ID = "YOUR_USER_ID_HERE"\n# Your PAT (Personal Access Token) can be found in the Portal under Account > Security\nPAT = "YOUR_PAT_HERE"\nAPP_ID = "YOUR_APP_ID_HERE"\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (("authorization", "Key " + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\nlist_inputs_extraction_jobs = stub.ListInputsExtractionJobs(\n    service_pb2.ListInputsExtractionJobsRequest(\n        user_app_id=userDataObject, per_page=1000, page=1\n    ),\n    metadata=metadata,\n)\n\nif list_inputs_extraction_jobs.status.code != status_code_pb2.SUCCESS:\n    print(list_inputs_extraction_jobs.status)\n    raise Exception(\n        "List input failed, status: " + list_inputs_extraction_jobs.status.description\n    )\n\nprint(list_inputs_extraction_jobs)\n',yn="\x3c!--index.html file--\x3e\n\n<script>\n    ///////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication and app ID.\n    // Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////\n\n    const USER_ID = \"YOUR_USER_ID_HERE\";\n    // Your PAT (Personal Access Token) can be found in the Account's Security section\n    const PAT = \"YOUR_PAT_HERE\";\n    const APP_ID = \"YOUR_APP_ID_HERE\";\n   \n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const requestOptions = {\n        method: 'GET',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        }\n    };\n\n    fetch(`https://api.clarifai.com/v2/users/${USER_ID}/apps/${APP_ID}/inputs/jobs/extraction?per_page=1000&page=1`, requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n\n<\/script>\n",vn='//index.js file\n\n//////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication and app ID.\n// Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////\n\nconst USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = "YOUR_PAT_HERE";\nconst APP_ID = "YOUR_APP_ID_HERE";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\n\nmetadata.set("authorization", "Key " + PAT);\n\nstub.ListInputsExtractionJobs(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        per_page: 1000, \n        page: 1\n\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            console.log(response.status);\n            throw new Error("List inputs failed, status: " + response.status.description);\n        }\n\n        console.log(response);\n    }\n\n);\n',Hn='package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.status.*;\n\npublic class ClarifaiExample {\n\n    ///////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication and app ID.\n    // Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n        \n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n                .withCallCredentials(new ClarifaiCallCredentials(PAT));\n        \n        MultiInputsExtractionJobResponse listInputsResponse = stub.listInputsExtractionJobs(\n                ListInputsExtractionJobsRequest.newBuilder()\n                        .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n                        .setPerPage(100).setPage(1)\n                        .build()\n        );\n        \n        if (listInputsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("List inputs failed, status: " + listInputsResponse.getStatus());\n        }\n        \n        System.out.println(listInputsResponse);\n        \n    }\n    \n}\n',Yn="<?php\n\nrequire __DIR__ . '/vendor/autoload.php';\n\n///////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication and app ID.\n// Change these strings to run your own example.\n///////////////////////////////////////////////////////////////////////\n\n$USER_ID = 'YOUR_USER_ID_HERE';\n// Your PAT (Personal Access Token) can be found in the Account's Security section\n$PAT = 'YOUR_PAT_HERE';\n$APP_ID = 'YOUR_APP_ID_HERE';\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\ListInputsExtractionJobsRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ['Authorization' => ['Key ' . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    'user_id' => $USER_ID,\n    'app_id' => $APP_ID\n]);\n\n// Let's make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->ListInputsExtractionJobs(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new ListInputsExtractionJobsRequest([\n        'user_app_id' => $userDataObject,\n        'per_page'=> 1000, \n        'page'=> 1\n\n\n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception('Error: {$status->details}');\n}\n\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    throw new Exception('Failure response: ' . $response->getStatus()->getDescription() . ' ' .\n        $response->getStatus()->getDetails());\n}\n\necho $response->serializeToJsonString();\n\n?>\n",Ln='curl -X GET "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/inputs/jobs/extraction?per_page=1000&page=1" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\',Bn='#####################################################################################################\n# In this section, we set the user authentication, app ID, and the inputs extraction job ID.\n# Change these strings to run your own example.\n#####################################################################################################\n\nUSER_ID = "YOUR_USER_ID_HERE"\n# Your PAT (Personal Access Token) can be found in the Portal under Account > Security\nPAT = "YOUR_PAT_HERE"\nAPP_ID = "YOUR_APP_ID_HERE"\n# Change this ID to whatever inputs you want to cancel their upload process\nINPUTS_EXTRACTION_JOB_ID = "2a6f1f69cced42029986a72009e7d4da"\n\n##########################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##########################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (("authorization", "Key " + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\ncancel_inputs_extraction_response = stub.CancelInputsExtractionJobs(\n    service_pb2.CancelInputsExtractionJobsRequest(\n        user_app_id=userDataObject, ids=[INPUTS_EXTRACTION_JOB_ID]\n    ),\n    metadata=metadata,\n)\n\nif cancel_inputs_extraction_response.status.code != status_code_pb2.SUCCESS:\n    print(cancel_inputs_extraction_response.status)\n    raise Exception(\n        "Cancel input failed, status: "\n        + cancel_inputs_extraction_response.status.description\n    )\n\nprint(cancel_inputs_extraction_response)\n',Gn="\x3c!--index.html file--\x3e\n\n<script>\n    //////////////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the inputs extraction job ID.\n    // Change these strings to run your own example.\n    /////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = \"YOUR_USER_ID_HERE\";\n    // Your PAT (Personal Access Token) can be found in the Account's Security section\n    const PAT = \"YOUR_PAT_HERE\";\n    const APP_ID = \"YOUR_APP_ID_HERE\";\n    // Change this ID to whatever inputs you want to cancel their upload process\n    const INPUTS_EXTRACTION_JOB_ID = \"2a6f1f69cced42029986a72009e7d4da\";\n   \n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const requestOptions = {\n        method: 'GET',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        }\n    };\n\n    fetch(`https://api.clarifai.com/v2/users/${USER_ID}/apps/${APP_ID}/inputs/jobs/extraction/${INPUTS_EXTRACTION_JOB_ID}`, requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n\n<\/script>\n",Mn='//index.js file\n\n////////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the inputs extraction job ID.\n// Change these strings to run your own example.\n///////////////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = "YOUR_PAT_HERE";\nconst APP_ID = "YOUR_APP_ID_HERE";\n// Change this ID to whatever inputs you want to cancel their upload process\nconst INPUTS_EXTRACTION_JOB_ID = "2a6f1f69cced42029986a72009e7d4da";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\n\nmetadata.set("authorization", "Key " + PAT);\n\nstub.CancelInputsExtractionJobs(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        ids: [INPUTS_EXTRACTION_JOB_ID]\n\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            console.log(response.status);\n            throw new Error("List inputs failed, status: " + response.status.description);\n        }\n\n        console.log(response);\n    }\n\n);\n',kn='package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.status.*;\n\npublic class ClarifaiExample {\n\n    //////////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the inputs extraction job ID.\n    // Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change this ID to whatever inputs you want to cancel their upload process\n    static final String INPUTS_EXTRACTION_JOB_ID = "2a6f1f69cced42029986a72009e7d4da";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n        \n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n                .withCallCredentials(new ClarifaiCallCredentials(PAT));\n        \n        MultiInputsExtractionJobResponse cancelInputsResponse = stub.cancelInputsExtractionJobs(\n                CancelInputsExtractionJobsRequest.newBuilder()\n                        .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n                        .addIds(INPUTS_EXTRACTION_JOB_ID)\n                        .build()\n        );\n        \n        if (cancelInputsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post inputs failed, status: " + cancelInputsResponse.getStatus());\n        }\n        \n        System.out.println(cancelInputsResponse);\n        \n    }\n    \n}\n',$n="<?php\n\nrequire __DIR__ . '/vendor/autoload.php';\n\n///////////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the inputs extraction job ID.\n// Change these strings to run your own example.\n///////////////////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = 'YOUR_USER_ID_HERE';\n// Your PAT (Personal Access Token) can be found in the Account's Security section\n$PAT = 'YOUR_PAT_HERE';\n$APP_ID = 'YOUR_APP_ID_HERE';\n// Change this ID to whatever inputs you want to cancel their upload process\n$INPUTS_EXTRACTION_JOB_ID = \"2a6f1f69cced42029986a72009e7d4da\";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\CancelInputsExtractionJobsRequest;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ['Authorization' => ['Key ' . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    'user_id' => $USER_ID,\n    'app_id' => $APP_ID\n]);\n\n// Let's make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->CancelInputsExtractionJobs(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new CancelInputsExtractionJobsRequest([\n        'user_app_id' => $userDataObject,\n        'ids' => [$INPUTS_EXTRACTION_JOB_ID]\n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception('Error: {$status->details}');\n}\n\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    throw new Exception('Failure response: ' . $response->getStatus()->getDescription() . ' ' .\n        $response->getStatus()->getDetails());\n}\n\necho $response->serializeToJsonString();\n\n?>\n",Jn='curl -X GET "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/inputs/jobs/extraction/YOUR_INPUTS_EXTRACTION_JOB_ID_HERE" \\\n  -H "Authorization: Key YOUR_PAT_HERE" \\\n  -H "Content-Type: application/json" \\',qn='#####################################################################################################\n# In this section, we set the user authentication, app ID, and the details of the extraction job.\n# Change these strings to run your own example.\n####################################################################################################\n\nUSER_ID = "YOUR_USER_ID_HERE"\n# Your PAT (Personal Access Token) can be found in the Portal under Account > Security\nPAT = "YOUR_PAT_HERE"\nAPP_ID = "YOUR_APP_ID_HERE"\n# Change these to make your own extraction\nINPUTS_JOB_ID = ""\nCLOUD_STORAGE_URL = "s3://samples.clarifai.com/storage/"\nCUSTOM_METADATA = {"id": "id001"}\nDATASET_ID_1 = "dataset-1"\nCONCEPT_ID_1 = "lamborghini23_A"\nCONCEPT_ID_2 = "spiderman_a"\n\n##############################################################################\n# YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n##############################################################################\n\nfrom clarifai_grpc.channel.clarifai_channel import ClarifaiChannel\nfrom clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\nfrom google.protobuf.struct_pb2 import Struct\n\nchannel = ClarifaiChannel.get_grpc_channel()\nstub = service_pb2_grpc.V2Stub(channel)\n\nmetadata = (("authorization", "Key " + PAT),)\n\nuserDataObject = resources_pb2.UserAppIDSet(user_id=USER_ID, app_id=APP_ID)\n\ninput_metadata = Struct()\n\ninput_metadata.update(CUSTOM_METADATA)\n\npost_inputs_response = stub.PostInputsDataSources(\n    service_pb2.PostInputsDataSourcesRequest(\n        user_app_id=userDataObject,\n        app_pat=PAT,\n        data_sources=[\n            resources_pb2.InputsDataSource(\n                inputs_add_job_id=INPUTS_JOB_ID,\n                url=resources_pb2.DataSourceURL(url=CLOUD_STORAGE_URL),\n                input_template=resources_pb2.Input(\n                    dataset_ids=[DATASET_ID_1],  # List of dataset IDs that this input is part of\n                    data=resources_pb2.Data(\n                        metadata=input_metadata,\n                        concepts=[\n                            resources_pb2.Concept(id=CONCEPT_ID_1, value=1),\n                            resources_pb2.Concept(id=CONCEPT_ID_2, value=1),\n                        ],\n                    ),\n                ),\n            )\n        ],\n    ),\n    metadata=metadata,\n)\n\n\nif post_inputs_response.status.code != status_code_pb2.SUCCESS:\n    print(post_inputs_response.status)\n    raise Exception(\n        "Post inputs failed, status: " + post_inputs_response.status.description\n    )\n\nprint(post_inputs_response)\n',Wn='\x3c!--index.html file--\x3e\n\n<script>\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the details of the extraction job.\n    // Change these strings to run your own example.\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    const USER_ID = "YOUR_USER_ID_HERE";\n    // Your PAT (Personal Access Token) can be found in the Account\'s Security section\n    const PAT = "YOUR_PAT_HERE";\n    const APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to make your own extraction\n    const INPUTS_JOB_ID = "";\n    const CLOUD_STORAGE_URL = "s3://samples.clarifai.com/storage/";\n    const CUSTOM_METADATA = { "id": "id001" };\n    const DATASET_ID_1 = "dataset-1";\n    const CONCEPT_ID_1 = "lamborghini23_A";\n    const CONCEPT_ID_2 = "spiderman_a";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        "user_app_id": {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        "app_pat": PAT,\n        "data_sources": [\n            {\n                "inputs_add_job_id": INPUTS_JOB_ID,\n                "url": {\n                    "url": CLOUD_STORAGE_URL,\n\n                },\n                "input_template": {\n                    "dataset_ids": [DATASET_ID_1],\n                    "data": {\n                        "metadata": CUSTOM_METADATA,\n                        "concepts": [\n                            {\n                                "id": CONCEPT_ID_1,\n                                "value": 1\n                            },\n                            {\n                                "id": CONCEPT_ID_2,\n                                "value": 1\n                            }\n                        ]\n                    }\n                }\n            }\n        ]\n\n    });\n\n    const requestOptions = {\n        method: \'POST\',\n        headers: {\n            \'Accept\': \'application/json\',\n            \'Authorization\': \'Key \' + PAT\n        },\n        body: raw\n    };\n\n    fetch("https://api.clarifai.com/v2/inputs/data_sources/", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log(\'error\', error));\n\n<\/script>\n',Kn='//index.js file\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the details of the extraction job.\n// Change these strings to run your own example.\n///////////////////////////////////////////////////////////////////////////////////////////////////////////\n\nconst USER_ID = "YOUR_USER_ID_HERE";\n// Your PAT (Personal Access Token) can be found in the Account\'s Security section\nconst PAT = "YOUR_PAT_HERE";\nconst APP_ID = "YOUR_APP_ID_HERE";\n// Change these to make your own extraction\nconst INPUTS_JOB_ID = "";\nconst CLOUD_STORAGE_URL = "s3://samples.clarifai.com/storage/";\nconst CUSTOM_METADATA = { "id": "id001" };\nconst DATASET_ID_1 = "dataset-1";\nconst CONCEPT_ID_1 = "lamborghini23_A";\nconst CONCEPT_ID_2 = "spiderman_a";\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst { ClarifaiStub, grpc } = require("clarifai-nodejs-grpc");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set("authorization", "Key " + PAT);\n\nstub.PostInputsDataSources(\n    {\n        user_app_id: {\n            "user_id": USER_ID,\n            "app_id": APP_ID\n        },\n        "app_pat": PAT,\n        "data_sources": [\n            {\n                "inputs_add_job_id": INPUTS_JOB_ID,\n                "url": {\n                    "url": CLOUD_STORAGE_URL\n                },\n                "input_template": {\n                    "dataset_ids": [DATASET_ID_1],\n                    "data": {\n                        "metadata": CUSTOM_METADATA,\n                        "concepts": [\n                            {\n                                "id": CONCEPT_ID_1,\n                                "value": 1\n                            },\n                            {\n                                "id": CONCEPT_ID_2,\n                                "value": 1\n                            }\n                        ]\n                    }\n                }\n            }\n        ]\n\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            console.log(response.status);\n            throw new Error("Post inputs failed, status: " + response.status.description);\n        }\n\n        console.log(response);\n    }\n\n);\n',zn='package com.clarifai.example;\n\nimport com.clarifai.grpc.api.*;\nimport com.google.protobuf.Struct;\nimport com.google.protobuf.Value;\nimport com.clarifai.channel.ClarifaiChannel;\nimport com.clarifai.credentials.ClarifaiCallCredentials;\nimport com.clarifai.grpc.api.status.*;\n\npublic class ClarifaiExample {\n\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, app ID, and the details of the extraction job.\n    // Change these strings to run your own example.\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    static final String USER_ID = "YOUR_USER_ID_HERE";\n    //Your PAT (Personal Access Token) can be found in the portal under Authentication\n    static final String PAT = "YOUR_PAT_HERE";\n    static final String APP_ID = "YOUR_APP_ID_HERE";\n    // Change these to make your own extraction\n    static final String INPUTS_JOB_ID = "";\n    static final String CLOUD_STORAGE_URL = "s3://samples.clarifai.com/storage/";\n    static final String CUSTOM_METADATA_1 = "id";\n    static final String CUSTOM_METADATA_2 = "id001";\n    static final String DATASET_ID_1 = "dataset-1";\n    static final String CONCEPT_ID_1 = "lamborghini23_A";\n    static final String CONCEPT_ID_2 = "spiderman_a";\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public static void main(String[] args) {\n\n        V2Grpc.V2BlockingStub stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())\n                .withCallCredentials(new ClarifaiCallCredentials(PAT));\n\n        MultiInputsAddJobResponse postInputsResponse = stub.postInputsDataSources(\n                PostInputsDataSourcesRequest.newBuilder()\n                        .setUserAppId(UserAppIDSet.newBuilder().setUserId(USER_ID).setAppId(APP_ID))\n                        .setAppPat(PAT)\n                        .addDataSources(InputsDataSource.newBuilder().setInputsAddJobId(INPUTS_JOB_ID)\n                                .setUrl(DataSourceURL.newBuilder()\n                                        .setUrl(CLOUD_STORAGE_URL)\n                                )\n                                .setInputTemplate(Input.newBuilder()\n                                        .addDatasetIds(DATASET_ID_1)\n                                        .setData(Data.newBuilder()\n                                                .setMetadata(\n                                                        Struct.newBuilder()\n                                                                .putFields(CUSTOM_METADATA_1, Value.newBuilder().setStringValue(CUSTOM_METADATA_2).build())\n                                                )\n                                                .addConcepts(Concept.newBuilder()\n                                                        .setId(CONCEPT_ID_1)\n                                                        .setValue(1f)\n                                                )\n                                                .addConcepts(Concept.newBuilder()\n                                                        .setId(CONCEPT_ID_2)\n                                                        .setValue(1f)\n                                                )\n                                        ))\n                        ).build()\n        );\n\n        if (postInputsResponse.getStatus().getCode() != StatusCode.SUCCESS) {\n            throw new RuntimeException("Post inputs failed, status: " + postInputsResponse.getStatus());\n        }\n\n        System.out.println(postInputsResponse);\n\n    }\n\n}\n',Fn="<?php\n\nrequire __DIR__ . '/vendor/autoload.php';\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, app ID, and the details of the extraction job.\n// Change these strings to run your own example.\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n$USER_ID = 'YOUR_USER_ID_HERE';\n// Your PAT (Personal Access Token) can be found in the Account's Security section\n$PAT = 'YOUR_PAT_HERE';\n$APP_ID = 'YOUR_APP_ID_HERE';\n// Change these to make your own extraction\n$INPUTS_JOB_ID = '';\n$CLOUD_STORAGE_URL = 's3://samples.clarifai.com/storage/';\n$CUSTOM_METADATA = '{\"id\": \"id001\"}';\n$DATASET_ID_1 = 'dataset-1';\n$CONCEPT_ID_1 = 'lamborghini23_A';\n$CONCEPT_ID_2 = 'spiderman_a';\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nuse Clarifai\\ClarifaiClient;\nuse Clarifai\\Api\\PostInputsDataSourcesRequest;\nuse Clarifai\\Api\\InputsDataSource;\nuse Clarifai\\Api\\DataSourceURL;\nuse Clarifai\\Api\\Concept;\nuse Clarifai\\Api\\Data;\nuse Clarifai\\Api\\Input;\nuse Clarifai\\Api\\Status\\StatusCode;\nuse Clarifai\\Api\\UserAppIDSet;\n\n$client = ClarifaiClient::grpc();\n\n$metadata = ['Authorization' => ['Key ' . $PAT]];\n\n$userDataObject = new UserAppIDSet([\n    'user_id' => $USER_ID,\n    'app_id' => $APP_ID\n]);\n\n// Decode the JSON object into a PHP object\n$CUSTOM_METADATA_DECODE = var_dump(json_decode($CUSTOM_METADATA));\n\n// Let's make a RPC call to the Clarifai platform. It uses the opened gRPC client channel to communicate a\n// request and then wait for the response\n[$response, $status] = $client->PostInputsDataSources(\n    // The request object carries the request along with the request status and other metadata related to the request itself\n    new PostInputsDataSourcesRequest([\n        'user_app_id' => $userDataObject,\n        'app_pat' => $PAT,\n        'data_sources' => [\n            new InputsDataSource([\n                'inputs_add_job_id' => $INPUTS_JOB_ID,\n                'url' => new DataSourceURL([\n                    'url' => $CLOUD_STORAGE_URL,\n\n                ]),\n                'input_template' => new Input([\n                    'dataset_ids' => [$DATASET_ID_1],\n                    'data' => new Data([\n                        'metadata' => $CUSTOM_METADATA_DECODE,\n                        'concepts' => [\n                            new Concept([\n                                'id' => $CONCEPT_ID_1,\n                                'value' => 1\n                            ]),\n                            new Concept([\n                                'id' => $CONCEPT_ID_2,\n                                'value' => 1\n                            ])\n                        ]\n                    ])\n                ])\n            ])\n        ]\n    ]),\n    $metadata\n)->wait();\n\n// A response is returned and the first thing we do is check the status of it\n// A successful response will have a status code of 0; otherwise, there is some error\nif ($status->code !== 0) {\n    throw new Exception(\"Error: {$status->details}\");\n}\n\n// In addition to the RPC response status, there is a Clarifai API status that reports if the operation was a success or failure \n// (not just that the communication was successful)\nif ($response->getStatus()->getCode() != StatusCode::SUCCESS) {\n    throw new Exception(\"Failure response: \" . $response->getStatus()->getDescription() . \" \" .\n        $response->getStatus()->getDetails());\n}\n\necho $response->serializeToJsonString();\n\n?>\n",Qn='curl -X POST "https://api.clarifai.com/v2/users/YOUR_USER_ID_HERE/apps/YOUR_APP_ID_HERE/inputs/data_sources/" \\\n-H "Authorization: Key YOUR_PAT_HERE" \\\n-H "Content-Type: application/json" \\\n-d \'{\n"app_pat": "YOUR_PAT_HERE",\n    "data_sources": [\n        {\n            "inputs_add_job_id": "",\n            "url": {\n                "url": "s3://samples.clarifai.com/storage/"\n            },\n            "input_template": {\n                "dataset_ids": ["dataset-1"],\n                "data": {\n                    "metadata": { "id": "id001" },\n                    "concepts": [\n                        {\n                            "id": "lamborghini23_A",\n                            "value": 1\n                        },\n                        {\n                            "id": "spiderman_a",\n                            "value": 1\n                        }\n                    ]\n                }\n            }\n        }\n    ]\n  }\'',Xn='status {\n  code: SUCCESS\n  description: "Ok"\n  req_id: "8759d87e31403bbd838794fe6016f36d"\n}\ninputs_add_jobs {\n  id: "2581ebd8d7cd42e7ac0da2bec14d5426"\n  progress {\n  }\n  created_at {\n    seconds: 1708361354\n    nanos: 820114719\n  }\n  modified_at {\n    seconds: 1708361354\n    nanos: 847655746\n  }\n  extraction_jobs {\n    status {\n      code: JOB_QUEUED\n      description: "Job is queued to be ran."\n    }\n    id: "2a6f1f69cced42029986a72009e7d4da"\n    url: "s3://samples.clarifai.com/storage/"\n    progress {\n    }\n    created_at {\n      seconds: 1708361354\n      nanos: 835105396\n    }\n    modified_at {\n      seconds: 1708361354\n      nanos: 835105396\n    }\n  }\n  status {\n    code: JOB_COMPLETED\n    description: "Job successfully ran."\n  }\n}\n',Vn='status {\n  code: SUCCESS\n  description: "Ok"\n  req_id: "bae1f832c8931d47388f875653e7035d"\n}\ninputs_extraction_job {\n  status {\n    code: JOB_COMPLETED\n    description: "Job successfully ran."\n  }\n  id: "2a6f1f69cced42029986a72009e7d4da"\n  url: "s3://samples.clarifai.com/storage/"\n  progress {\n    image_inputs_count: 3\n    video_inputs_count: 1\n  }\n  created_at {\n    seconds: 1708361354\n    nanos: 835105000\n  }\n  modified_at {\n    seconds: 1708361355\n    nanos: 386004000\n  }\n}\n',Zn='----\ninputs_extraction_jobs {\n  status {\n    code: JOB_COMPLETED\n    description: "Job successfully ran."\n  }\n  id: "487d863784804390a92e1108ee1ae1fb"\n  url: "s3://samples.clarifai.com/storage/"\n  progress {\n    image_inputs_count: 3\n    video_inputs_count: 1\n  }\n  created_at {\n    seconds: 1708406450\n    nanos: 685101000\n  }\n  modified_at {\n    seconds: 1708406451\n    nanos: 191007000\n  }\n}\ninputs_extraction_jobs {\n  status {\n    code: JOB_COMPLETED\n    description: "Job successfully ran."\n  }\n  id: "16d65cdff5d64ae8ba94ae59f5d7f43c"\n  url: "s3://samples.clarifai.com/storage/"\n  progress {\n    image_inputs_count: 3\n    video_inputs_count: 1\n  }\n  created_at {\n    seconds: 1708406156\n    nanos: 2926000\n  }\n  modified_at {\n    seconds: 1708406156\n    nanos: 560108000\n  }\n}\ninputs_extraction_jobs {\n  status {\n    code: JOB_COMPLETED\n    description: "Job successfully ran."\n  }\n  id: "423b4dfa36f64fffbe79cf845918d4c0"\n  url: "s3://samples.clarifai.com/storage/"\n  progress {\n    image_inputs_count: 3\n    video_inputs_count: 1\n  }\n  created_at {\n    seconds: 1708405684\n    nanos: 297689000\n  }\n  modified_at {\n    seconds: 1708405684\n    nanos: 778885000\n  }\n}\ninputs_extraction_jobs {\n  status {\n    code: JOB_COMPLETED\n    description: "Job successfully ran."\n  }\n  id: "a5af6a185ab148d4b7eb02e713d3340d"\n  url: "s3://samples.clarifai.com/storage/"\n  progress {\n    image_inputs_count: 3\n    video_inputs_count: 1\n  }\n  created_at {\n    seconds: 1708405639\n    nanos: 186106000\n  }\n  modified_at {\n    seconds: 1708405639\n    nanos: 696943000\n  }\n}\ninputs_extraction_jobs {\n  status {\n    code: JOB_COMPLETED\n    description: "Job successfully ran."\n  }\n  id: "1c10da09706d40448bf11fc5aaa8664b"\n  url: "s3://samples.clarifai.com/storage/"\n  progress {\n    image_inputs_count: 3\n    video_inputs_count: 1\n  }\n  created_at {\n    seconds: 1708405297\n    nanos: 953730000\n  }\n  modified_at {\n    seconds: 1708405298\n    nanos: 506209000\n  }\n}\ninputs_extraction_jobs {\n  status {\n    code: JOB_COMPLETED\n    description: "Job successfully ran."\n  }\n  id: "10ad7ba72e5e49899a042637178c9452"\n  url: "s3://samples.clarifai.com/storage/"\n  progress {\n    image_inputs_count: 3\n    video_inputs_count: 1\n  }\n  created_at {\n    seconds: 1708404787\n    nanos: 575667000\n  }\n  modified_at {\n    seconds: 1708404788\n    nanos: 141744000\n  }\n}\ninputs_extraction_jobs {\n  status {\n    code: JOB_COMPLETED\n    description: "Job successfully ran."\n  }\n  id: "8d7a240f39494ce18c3a5f4aeea687c1"\n  url: "s3://samples.clarifai.com/storage/"\n  progress {\n    image_inputs_count: 3\n    video_inputs_count: 1\n  }\n  created_at {\n    seconds: 1708403207\n    nanos: 89134000\n  }\n  modified_at {\n    seconds: 1708403207\n    nanos: 729276000\n  }\n}\ninputs_extraction_jobs {\n  status {\n    code: JOB_COMPLETED\n    description: "Job successfully ran."\n  }\n  id: "2a6f1f69cced42029986a72009e7d4da"\n  url: "s3://samples.clarifai.com/storage/"\n  progress {\n    image_inputs_count: 3\n    video_inputs_count: 1\n  }\n  created_at {\n    seconds: 1708361354\n    nanos: 835105000\n  }\n  modified_at {\n    seconds: 1708361355\n    nanos: 386004000\n  }\n}\ninputs_extraction_jobs {\n  status {\n    code: JOB_COMPLETED\n    description: "Job successfully ran."\n  }\n  id: "6db64516daf04abd97852407f9076e42"\n  url: "s3://samples.clarifai.com/storage/"\n  progress {\n    image_inputs_count: 3\n    video_inputs_count: 1\n  }\n  created_at {\n    seconds: 1708361312\n    nanos: 309789000\n  }\n  modified_at {\n    seconds: 1708361313\n    nanos: 435552000\n  }\n}\ninputs_extraction_jobs {\n  status {\n    code: JOB_COMPLETED\n    description: "Job successfully ran."\n  }\n  id: "7e4bd42e84294e8f9423e0a01783e3b1"\n  url: "s3://samples.clarifai.com/storage/"\n  progress {\n    image_inputs_count: 3\n    video_inputs_count: 1\n  }\n  created_at {\n    seconds: 1708354769\n    nanos: 17131000\n  }\n  modified_at {\n    seconds: 1708354769\n    nanos: 473323000\n  }\n  input_template {\n    data {\n      concepts {\n        id: "lamborghini23_A"\n        value: 1\n      }\n      concepts {\n        id: "spiderman_a"\n        value: 1\n      }\n      metadata {\n        fields {\n          key: "id"\n          value {\n            string_value: "id001"\n          }\n        }\n      }\n    }\n    dataset_ids: "dataset-1"\n  }\n}\n-----',ne='status {\n  code: SUCCESS\n  description: "Ok"\n  req_id: "32694c6a3ef8fe3f6704502c0b053734"\n}\ninputs_add_jobs {\n  id: "66b5ca001e754111a81c4839cdabed10"\n  progress {\n  }\n  created_at {\n    seconds: 1708500170\n    nanos: 508992497\n  }\n  modified_at {\n    seconds: 1708500170\n    nanos: 582792601\n  }\n  extraction_jobs {\n    status {\n      code: JOB_QUEUED\n      description: "Job is queued to be ran."\n    }\n    id: "7e9b139f65fb4426a3d273d609758d34"\n    url: "s3://samples.clarifai.com/storage/"\n    progress {\n    }\n    created_at {\n      seconds: 1708500170\n      nanos: 550291872\n    }\n    modified_at {\n      seconds: 1708500170\n      nanos: 550291872\n    }\n    input_template {\n      data {\n        concepts {\n          id: "lamborghini23_A"\n          value: 1\n        }\n        concepts {\n          id: "spiderman_a"\n          value: 1\n        }\n        metadata {\n          fields {\n            key: "id"\n            value {\n              string_value: "id001"\n            }\n          }\n        }\n      }\n      dataset_ids: "dataset-1"\n    }\n  }\n  status {\n    code: JOB_COMPLETED\n    description: "Job successfully ran."\n  }\n}\n',ee={description:"Add data to the Clarifai platform via the API",sidebar_position:1},te="Upload via API",ae={},se=[{value:"Upload Image Data",id:"upload-image-data",level:2},{value:"Upload Text Data",id:"upload-text-data",level:2},{value:"Write Custom Functions for Data Processing",id:"write-custom-functions-for-data-processing",level:2},{value:"Upload Audio Data",id:"upload-audio-data",level:2},{value:"Upload Video Data",id:"upload-video-data",level:2},{value:"Upload Multimodal Data",id:"upload-multimodal-data",level:2},{value:"Upload Custom Metadata",id:"upload-custom-metadata",level:2},{value:"Image With Metadata",id:"image-with-metadata",level:3},{value:"Video With Metadata",id:"video-with-metadata",level:3},{value:"Text With Metadata",id:"text-with-metadata",level:3},{value:"Audio With Metadata",id:"audio-with-metadata",level:3},{value:"Upload Inputs with Geospatial Information",id:"upload-inputs-with-geospatial-information",level:2},{value:"Upload Inputs With Annotations",id:"upload-inputs-with-annotations",level:2},{value:"Bounding Box Annotations",id:"bounding-box-annotations",level:3},{value:"Polygon Annotations",id:"polygon-annotations",level:3},{value:"Concepts Annotations",id:"concepts-annotations",level:3},{value:"Upload Inputs Options (via URLs, bytes, concepts, metadata, etc)",id:"upload-inputs-options-via-urls-bytes-concepts-metadata-etc",level:2},{value:"Upload Inputs via URL",id:"upload-inputs-via-url",level:3},{value:"Upload Inputs via Bytes",id:"upload-inputs-via-bytes",level:3},{value:"Upload Multiple Inputs With IDs",id:"upload-multiple-inputs-with-ids",level:3},{value:"Upload Inputs With Concepts",id:"upload-inputs-with-concepts",level:3},{value:"Upload Inputs With Multiple Concepts",id:"upload-inputs-with-multiple-concepts",level:3},{value:"Upload Inputs With Custom Metadata",id:"upload-inputs-with-custom-metadata",level:3},{value:"Upload Inputs From Cloud Storage",id:"upload-inputs-from-cloud-storage",level:2},{value:"Upload Inputs via Cloud Storage URLs",id:"upload-inputs-via-cloud-storage-urls",level:3},{value:"Track Upload Process",id:"track-upload-process",level:3},{value:"List Inputs Extraction Jobs",id:"list-inputs-extraction-jobs",level:3},{value:"Cancel Extraction Jobs",id:"cancel-extraction-jobs",level:3},{value:"Upload Inputs With Concepts and Datasets",id:"upload-inputs-with-concepts-and-datasets",level:3}];function ie(n){const e={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...n.components},{Details:t}=e;return t||function(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"upload-via-api",children:"Upload via API"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Add data to the Clarifai platform via the API"})}),"\n",(0,s.jsx)("hr",{}),"\n",(0,s.jsx)(e.admonition,{title:"Data Utils",type:"tip",children:(0,s.jsxs)(e.p,{children:["The Clarifai's ",(0,s.jsx)(e.a,{href:"https://docs.clarifai.com/sdk/data-utils/",children:"Data Utils library"})," allows you to effortlessly extract, transform, and load unstructured data \u2014 such as images, videos, and text \u2014 into the Clarifai platform."]})}),"\n",(0,s.jsx)(e.admonition,{type:"info",children:(0,s.jsxs)(e.p,{children:["Before using the ",(0,s.jsx)(e.a,{href:"https://docs.clarifai.com/additional-resources/api-overview/python-sdk",children:"Python SDK"}),", ",(0,s.jsx)(e.a,{href:"https://docs.clarifai.com/additional-resources/api-overview/nodejs-sdk",children:"Node.js SDK"}),", or any of our ",(0,s.jsx)(e.a,{href:"https://docs.clarifai.com/additional-resources/api-overview/grpc-clients",children:"gRPC clients"}),", ensure they are properly installed on your machine. Refer to their respective installation guides for instructions on how to install and initialize them."]})}),"\n",(0,s.jsx)(e.p,{children:"Note that input uploads are processed asynchronously. Your files will be indexed in the background via your app's default base workflow, which may take some time depending on volume and file types."}),"\n",(0,s.jsxs)(e.p,{children:["To verify successful indexing, you can check the ",(0,s.jsx)(e.a,{href:"https://docs.clarifai.com/create-manage/inputs/manage#get-inputs-status",children:"input status"})," for code ",(0,s.jsx)(e.code,{children:"30000"})," (",(0,s.jsx)(e.code,{children:"INPUT_IMAGE_DOWNLOAD_SUCCESS"}),"). This confirms the input is fully processed and ready for use."]}),"\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n",(0,s.jsx)(e.h2,{id:"upload-image-data",children:"Upload Image Data"}),"\n",(0,s.jsx)(e.p,{children:"Below is an example of how to upload image data."}),"\n",(0,s.jsxs)(o.A,{groupId:"code",children:[(0,s.jsxs)(r.A,{value:"python",label:"Python SDK",children:[(0,s.jsx)(c.A,{className:"language-python",children:p}),(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{children:"Output"}),(0,s.jsx)(c.A,{className:"language-text",children:j})]})]}),(0,s.jsx)(r.A,{value:"typescript",label:"Node.js SDK",children:(0,s.jsx)(c.A,{className:"language-typescript",children:u})})]}),"\n",(0,s.jsx)(e.h2,{id:"upload-text-data",children:"Upload Text Data"}),"\n",(0,s.jsx)(e.p,{children:"Below is an example of how to upload text data."}),"\n",(0,s.jsxs)(o.A,{groupId:"code",children:[(0,s.jsxs)(r.A,{value:"python",label:"Python SDK",children:[(0,s.jsx)(c.A,{className:"language-python",children:l}),(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{children:"Output"}),(0,s.jsx)(c.A,{className:"language-text",children:x})]})]}),(0,s.jsx)(r.A,{value:"typescript",label:"Node.js SDK",children:(0,s.jsx)(c.A,{className:"language-typescript",children:d})})]}),"\n",(0,s.jsx)(e.h2,{id:"write-custom-functions-for-data-processing",children:"Write Custom Functions for Data Processing"}),"\n",(0,s.jsx)(e.p,{children:"You can add your own custom functions for data processing with ease."}),"\n",(0,s.jsx)(e.p,{children:"Below is an example of how to clean text data by removing Unicode characters before uploading it to the Clarifai platform."}),"\n",(0,s.jsx)(o.A,{groupId:"code",children:(0,s.jsx)(r.A,{value:"python",label:"Python SDK",children:(0,s.jsx)(c.A,{className:"language-python",children:N})})}),"\n",(0,s.jsx)(e.h2,{id:"upload-audio-data",children:"Upload Audio Data"}),"\n",(0,s.jsx)(e.p,{children:"Below is an example of how to upload audio data."}),"\n",(0,s.jsxs)(o.A,{groupId:"code",children:[(0,s.jsxs)(r.A,{value:"python",label:"Python SDK",children:[(0,s.jsx)(c.A,{className:"language-python",children:_}),(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{children:"Output"}),(0,s.jsx)(c.A,{className:"language-text",children:y})]})]}),(0,s.jsx)(r.A,{value:"typescript",label:"Node.js SDK",children:(0,s.jsx)(c.A,{className:"language-typescript",children:h})})]}),"\n",(0,s.jsx)(e.h2,{id:"upload-video-data",children:"Upload Video Data"}),"\n",(0,s.jsx)(e.p,{children:"Below is an example of how to upload video data."}),"\n",(0,s.jsxs)(o.A,{groupId:"code",children:[(0,s.jsxs)(r.A,{value:"python",label:"Python SDK",children:[(0,s.jsx)(c.A,{className:"language-python",children:A}),(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{children:"Output"}),(0,s.jsx)(c.A,{className:"language-text",children:v})]})]}),(0,s.jsx)(r.A,{value:"typescript",label:"Node.js SDK",children:(0,s.jsx)(c.A,{className:"language-typescript",children:I})})]}),"\n",(0,s.jsx)(e.h2,{id:"upload-multimodal-data",children:"Upload Multimodal Data"}),"\n",(0,s.jsx)(e.p,{children:"Below is an example of how to upload a combination of different input types, such as images and text, to the Clarifai platform."}),"\n",(0,s.jsxs)(e.p,{children:["Currently, Clarifai supports specific multimodal input combinations, such as ",(0,s.jsx)(e.code,{children:"[Image, Text] -> Text"}),". This allows you to process and analyze interconnected data types for advanced use cases."]}),"\n",(0,s.jsxs)(o.A,{groupId:"code",children:[(0,s.jsxs)(r.A,{value:"python",label:"Python SDK",children:[(0,s.jsx)(c.A,{className:"language-python",children:m}),(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{children:"Output"}),(0,s.jsx)(c.A,{className:"language-text",children:H})]})]}),(0,s.jsx)(r.A,{value:"typescript",label:"Node.js SDK",children:(0,s.jsx)(c.A,{className:"language-typescript",children:E})})]}),"\n",(0,s.jsx)(e.h2,{id:"upload-custom-metadata",children:"Upload Custom Metadata"}),"\n",(0,s.jsx)(e.p,{children:"When using the Clarifai SDKs, you can enhance your inputs by attaching custom metadata alongside concepts. This feature enables you to include additional contextual information, such as categorization, filtering criteria, or reference data, making it easier to organize and retrieve your inputs later."}),"\n",(0,s.jsx)(e.p,{children:"Below are examples of how to upload inputs with custom metadata. In these examples, the metadata includes details about the filename and the dataset split (e.g., train, validate, or test) to which the input belongs."}),"\n",(0,s.jsx)(e.h3,{id:"image-with-metadata",children:"Image With Metadata"}),"\n",(0,s.jsxs)(o.A,{groupId:"code",children:[(0,s.jsxs)(r.A,{value:"python",label:"Python SDK",children:[(0,s.jsx)(c.A,{className:"language-python",children:f}),(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{children:"Output"}),(0,s.jsx)(c.A,{className:"language-text",children:Y})]})]}),(0,s.jsx)(r.A,{value:"typescript",label:"Node.js SDK",children:(0,s.jsx)(c.A,{className:"language-typescript",children:g})})]}),"\n",(0,s.jsx)(e.h3,{id:"video-with-metadata",children:"Video With Metadata"}),"\n",(0,s.jsxs)(o.A,{groupId:"code",children:[(0,s.jsxs)(r.A,{value:"python",label:"Python SDK",children:[(0,s.jsx)(c.A,{className:"language-python",children:R}),(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{children:"Output"}),(0,s.jsx)(c.A,{className:"language-text",children:L})]})]}),(0,s.jsx)(r.A,{value:"typescript",label:"Node.js SDK",children:(0,s.jsx)(c.A,{className:"language-typescript",children:P})})]}),"\n",(0,s.jsx)(e.h3,{id:"text-with-metadata",children:"Text With Metadata"}),"\n",(0,s.jsxs)(o.A,{groupId:"code",children:[(0,s.jsxs)(r.A,{value:"python",label:"Python SDK",children:[(0,s.jsx)(c.A,{className:"language-python",children:D}),(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{children:"Output"}),(0,s.jsx)(c.A,{className:"language-text",children:B})]})]}),(0,s.jsx)(r.A,{value:"typescript",label:"Node.js SDK",children:(0,s.jsx)(c.A,{className:"language-typescript",children:T})})]}),"\n",(0,s.jsx)(e.h3,{id:"audio-with-metadata",children:"Audio With Metadata"}),"\n",(0,s.jsxs)(o.A,{groupId:"code",children:[(0,s.jsxs)(r.A,{value:"python",label:"Python SDK",children:[(0,s.jsx)(c.A,{className:"language-python",children:S}),(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{children:"Output"}),(0,s.jsx)(c.A,{className:"language-text",children:G})]})]}),(0,s.jsx)(r.A,{value:"typescript",label:"Node.js SDK",children:(0,s.jsx)(c.A,{className:"language-typescript",children:C})})]}),"\n",(0,s.jsx)(e.h2,{id:"upload-inputs-with-geospatial-information",children:"Upload Inputs with Geospatial Information"}),"\n",(0,s.jsx)(e.p,{children:"When uploading inputs to Clarifai, you can enrich them by including geospatial data, such as longitude and latitude coordinates from the GPS system."}),"\n",(0,s.jsx)(e.p,{children:"This allows you to associate each input with a specific geographic location. Note that each input can have at most one geospatial point associated with it."}),"\n",(0,s.jsx)(o.A,{groupId:"code",children:(0,s.jsx)(r.A,{value:"python",label:"Python SDK",children:(0,s.jsx)(c.A,{className:"language-python",children:b})})}),"\n",(0,s.jsx)(e.h2,{id:"upload-inputs-with-annotations",children:"Upload Inputs With Annotations"}),"\n",(0,s.jsx)(e.p,{children:"You can upload inputs along with their corresponding annotations, such as bounding boxes or polygons."}),"\n",(0,s.jsx)(e.h3,{id:"bounding-box-annotations",children:"Bounding Box Annotations"}),"\n",(0,s.jsx)(e.p,{children:"Below is an example of how to label a new rectangular bounding box for a specific region within an image. The bounding box coordinates should be normalized to the image dimensions, with values scaled to the range of [0, 1.0]."}),"\n",(0,s.jsx)(e.p,{children:"This ensures that the coordinates are independent of the image resolution, making the annotations consistent across different image sizes."}),"\n",(0,s.jsx)(o.A,{groupId:"code",children:(0,s.jsx)(r.A,{value:"python",label:"Python SDK",children:(0,s.jsx)(c.A,{className:"language-python",children:U})})}),"\n",(0,s.jsx)(e.h3,{id:"polygon-annotations",children:"Polygon Annotations"}),"\n",(0,s.jsx)(e.p,{children:"Below is an example of how to annotate any polygon-shaped region within an image."}),"\n",(0,s.jsx)(e.p,{children:"A polygon is defined by a list of points, each specified by:"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"row"})," \u2014 The row position of the point, represented as a value between 0.0 and 1.0, where 0.0 corresponds to the top row and 1.0 corresponds to the bottom."]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"col"})," \u2014 The column position of the point, represented as a value between 0.0 and 1.0, where 0.0 corresponds to the left column of the image and 1.0 corresponds to the right column."]}),"\n"]}),"\n",(0,s.jsx)(o.A,{groupId:"code",children:(0,s.jsx)(r.A,{value:"python",label:"Python SDK",children:(0,s.jsx)(c.A,{className:"language-python",children:O})})}),"\n",(0,s.jsx)(e.h3,{id:"concepts-annotations",children:"Concepts Annotations"}),"\n",(0,s.jsxs)(e.p,{children:["Below is an example of how to annotate different types of inputs with ",(0,s.jsx)(e.a,{href:"https://docs.clarifai.com/portal-guide/inputs-manager/concepts",children:"concepts"}),"."]}),"\n",(0,s.jsx)(o.A,{groupId:"code",children:(0,s.jsx)(r.A,{value:"python",label:"Python SDK",children:(0,s.jsx)(c.A,{className:"language-python",children:w})})}),"\n",(0,s.jsx)(e.h2,{id:"upload-inputs-options-via-urls-bytes-concepts-metadata-etc",children:"Upload Inputs Options (via URLs, bytes, concepts, metadata, etc)"}),"\n",(0,s.jsxs)(e.p,{children:["You can add inputs one by one or in bulk. If you send them in bulk, you are limited to sending 128 inputs at a time, as mentioned ",(0,s.jsx)(e.a,{href:"#upload-limits",children:"above"}),"."]}),"\n",(0,s.jsx)(e.h3,{id:"upload-inputs-via-url",children:"Upload Inputs via URL"}),"\n",(0,s.jsx)(e.p,{children:"Below is an example of how to add inputs via a publicly accessible URL."}),"\n",(0,s.jsxs)(o.A,{groupId:"code",children:[(0,s.jsx)(r.A,{value:"python",label:"Python (gRPC)",children:(0,s.jsx)(c.A,{className:"language-python",children:M})}),(0,s.jsx)(r.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:K})}),(0,s.jsx)(r.A,{value:"nodejs",label:"Node.js (gRPC)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:Z})}),(0,s.jsx)(r.A,{value:"java",label:"Java (gRPC)",children:(0,s.jsx)(c.A,{className:"language-java",children:on})}),(0,s.jsx)(r.A,{value:"php",label:"PHP (gRPC)",children:(0,s.jsx)(c.A,{className:"language-php",children:In})}),(0,s.jsx)(r.A,{value:"curl",label:"cURL",children:(0,s.jsx)(c.A,{className:"language-bash",children:ln})})]}),"\n",(0,s.jsx)(e.h3,{id:"upload-inputs-via-bytes",children:"Upload Inputs via Bytes"}),"\n",(0,s.jsx)(e.p,{children:"Below is an example of how to add inputs via bytes."}),"\n",(0,s.jsx)(e.admonition,{title:"Note",type:"important",children:(0,s.jsxs)(e.p,{children:["The data must be base64 encoded. When you add a base64 image to our servers, a copy will be stored and hosted on our servers. If you already have an image hosting service, we recommend using it and adding images via the ",(0,s.jsx)(e.code,{children:"url"})," parameter."]})}),"\n",(0,s.jsxs)(o.A,{groupId:"code",children:[(0,s.jsx)(r.A,{value:"python",label:"Python (gRPC)",children:(0,s.jsx)(c.A,{className:"language-python",children:k})}),(0,s.jsx)(r.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:z})}),(0,s.jsx)(r.A,{value:"nodejs",label:"Node.js (gRPC)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:nn})}),(0,s.jsx)(r.A,{value:"java",label:"Java (gRPC)",children:(0,s.jsx)(c.A,{className:"language-java",children:rn})}),(0,s.jsx)(r.A,{value:"php",label:"PHP (gRPC)",children:(0,s.jsx)(c.A,{className:"language-php",children:mn})}),(0,s.jsx)(r.A,{value:"curl",label:"cURL",children:(0,s.jsx)(c.A,{className:"language-bash",children:dn})})]}),"\n",(0,s.jsx)(e.h3,{id:"upload-multiple-inputs-with-ids",children:"Upload Multiple Inputs With IDs"}),"\n",(0,s.jsxs)(e.p,{children:["In cases where you have your own ",(0,s.jsx)(e.code,{children:"id"})," and you only have one item per image, you are encouraged to send inputs with your own ",(0,s.jsx)(e.code,{children:"id"}),". This will help you later match the input to your own database."]}),"\n",(0,s.jsxs)(e.p,{children:["If you do not send an ",(0,s.jsx)(e.code,{children:"id"}),", one will be created for you. If you have more than one item per image, it is recommended that you put the product ",(0,s.jsx)(e.code,{children:"id"})," in the metadata."]}),"\n",(0,s.jsxs)(o.A,{groupId:"code",children:[(0,s.jsx)(r.A,{value:"python",label:"Python (gRPC)",children:(0,s.jsx)(c.A,{className:"language-python",children:$})}),(0,s.jsx)(r.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:F})}),(0,s.jsx)(r.A,{value:"nodejs",label:"Node.js (gRPC)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:en})}),(0,s.jsx)(r.A,{value:"java",label:"Java (gRPC)",children:(0,s.jsx)(c.A,{className:"language-java",children:cn})}),(0,s.jsx)(r.A,{value:"php",label:"PHP (gRPC)",children:(0,s.jsx)(c.A,{className:"language-php",children:En})}),(0,s.jsx)(r.A,{value:"curl",label:"cURL",children:(0,s.jsx)(c.A,{className:"language-bash",children:_n})})]}),"\n",(0,s.jsx)(e.h3,{id:"upload-inputs-with-concepts",children:"Upload Inputs With Concepts"}),"\n",(0,s.jsxs)(e.p,{children:["You can add inputs with concepts via URLs or bytes. ",(0,s.jsx)(e.a,{href:"https://docs.clarifai.com/api-guide/concepts/",children:"Concepts"})," play an important role in creating your own models. Concepts also help you ",(0,s.jsx)(e.a,{href:"https://docs.clarifai.com/api-guide/search/",children:"search"})," for inputs."]}),"\n",(0,s.jsx)(e.p,{children:"When you add a concept to an input, you need to indicate whether the concept is present in it or not."}),"\n",(0,s.jsxs)(o.A,{groupId:"code",children:[(0,s.jsx)(r.A,{value:"python",label:"Python (gRPC)",children:(0,s.jsx)(c.A,{className:"language-python",children:J})}),(0,s.jsx)(r.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:Q})}),(0,s.jsx)(r.A,{value:"nodejs",label:"Node.js (gRPC)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:tn})}),(0,s.jsx)(r.A,{value:"java",label:"Java (gRPC)",children:(0,s.jsx)(c.A,{className:"language-java",children:pn})}),(0,s.jsx)(r.A,{value:"php",label:"PHP (gRPC)",children:(0,s.jsx)(c.A,{className:"language-php",children:fn})}),(0,s.jsx)(r.A,{value:"curl",label:"cURL",children:(0,s.jsx)(c.A,{className:"language-bash",children:hn})})]}),"\n",(0,s.jsx)(e.h3,{id:"upload-inputs-with-multiple-concepts",children:"Upload Inputs With Multiple Concepts"}),"\n",(0,s.jsx)(e.p,{children:"You can also add an input with multiple concepts in a single API call. You can provide the concepts in a list and iterate through it."}),"\n",(0,s.jsx)(e.p,{children:"You can add the inputs via URLs or bytes."}),"\n",(0,s.jsxs)(o.A,{groupId:"code",children:[(0,s.jsx)(r.A,{value:"python",label:"Python (gRPC)",children:(0,s.jsx)(c.A,{className:"language-python",children:q})}),(0,s.jsx)(r.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:X})}),(0,s.jsx)(r.A,{value:"nodejs",label:"Node.js (gRPC)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:an})})]}),"\n",(0,s.jsx)(e.h3,{id:"upload-inputs-with-custom-metadata",children:"Upload Inputs With Custom Metadata"}),"\n",(0,s.jsx)(e.p,{children:"In addition to adding an input with concepts, you can also add an input with custom metadata. This metadata will then be searchable. Metadata can be any arbitrary JSON."}),"\n",(0,s.jsxs)(e.p,{children:["If you have more than one item per image, it is recommended to put the ",(0,s.jsx)(e.code,{children:"id"})," in the metadata like:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-text",children:'{\n  "product_id": "xyz"\n}\n'})}),"\n",(0,s.jsxs)(o.A,{groupId:"code",children:[(0,s.jsx)(r.A,{value:"python",label:"Python (gRPC)",children:(0,s.jsx)(c.A,{className:"language-python",children:W})}),(0,s.jsx)(r.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:V})}),(0,s.jsx)(r.A,{value:"nodejs",label:"Node.js (gRPC)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:sn})}),(0,s.jsx)(r.A,{value:"java",label:"Java (gRPC)",children:(0,s.jsx)(c.A,{className:"language-java",children:un})}),(0,s.jsx)(r.A,{value:"php",label:"PHP (gRPC)",children:(0,s.jsx)(c.A,{className:"language-php",children:gn})}),(0,s.jsx)(r.A,{value:"curl",label:"cURL",children:(0,s.jsx)(c.A,{className:"language-bash",children:An})})]}),"\n",(0,s.jsx)(e.h2,{id:"upload-inputs-from-cloud-storage",children:"Upload Inputs From Cloud Storage"}),"\n",(0,s.jsx)(e.p,{children:"You can add inputs from various cloud storage platforms, such as S3 (Amazon Simple Storage Service) and GCP (Google Cloud Platform), by simply providing their corresponding URLs. In cases where access credentials are necessary, you can include them as part of the request."}),"\n",(0,s.jsxs)(e.p,{children:["This simplifies the process of adding inputs to our platform, offering a more efficient alternative to the conventional method of using the ",(0,s.jsx)(e.strong,{children:"PostInputs"})," endpoint for users who already have data stored in the cloud platforms."]}),"\n",(0,s.jsx)(e.admonition,{type:"note",children:(0,s.jsxs)(e.p,{children:["This functionality has been introduced starting from the ",(0,s.jsx)(e.a,{href:"https://docs.clarifai.com/product-updates/changelog/release101#api",children:"10.1 release"}),"."]})}),"\n",(0,s.jsx)(e.admonition,{type:"info",children:(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"Image files stored in the cloud platforms will be treated as image inputs, video files as video inputs, etc. Archives will be extracted, and their contents will also be processed like this."}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"We do not support extraction of archives located inside other archives."}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["The cloud URL will serve as a filter prefix. For instance, in the case of an S3 URL like ",(0,s.jsx)(e.code,{children:"s3:/bucket/images_folder/abc"}),", files within the ",(0,s.jsx)(e.code,{children:"images_folder"})," will be processed starting with ",(0,s.jsx)(e.code,{children:"abc"}),", or within a subfolder beginning with ",(0,s.jsx)(e.code,{children:"abc"}),". For example, files such as ",(0,s.jsx)(e.code,{children:"bucket/images_folder/abcImage.png"})," or ",(0,s.jsx)(e.code,{children:"bucket/images_folder/abc-1/Data.zip"})," will be processed accordingly."]}),"\n"]}),"\n"]})}),"\n",(0,s.jsx)(e.h3,{id:"upload-inputs-via-cloud-storage-urls",children:"Upload Inputs via Cloud Storage URLs"}),"\n",(0,s.jsx)(e.p,{children:"Below is an example of pulling inputs from a subfolder of an S3 bucket."}),"\n","\n","\n","\n","\n","\n","\n",(0,s.jsxs)(o.A,{groupId:"code",children:[(0,s.jsx)(r.A,{value:"python",label:"Python (gRPC)",children:(0,s.jsx)(c.A,{className:"language-python",children:Rn})}),(0,s.jsx)(r.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:Pn})}),(0,s.jsx)(r.A,{value:"nodejs",label:"Node.js (gRPC)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:Dn})}),(0,s.jsx)(r.A,{value:"java",label:"Java (gRPC)",children:(0,s.jsx)(c.A,{className:"language-java",children:Tn})}),(0,s.jsx)(r.A,{value:"php",label:"PHP (gRPC)",children:(0,s.jsx)(c.A,{className:"language-php",children:Sn})}),(0,s.jsx)(r.A,{value:"curl",label:"cURL",children:(0,s.jsx)(c.A,{className:"language-bash",children:Cn})})]}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{children:"Output Example"}),(0,s.jsx)(c.A,{className:"language-javascript",children:Xn})]}),"\n",(0,s.jsx)(e.h3,{id:"track-upload-process",children:"Track Upload Process"}),"\n",(0,s.jsxs)(e.p,{children:["After starting to pull the inputs from a cloud storage service, you can track the progress of the exercise. Note that we\u2019ll use the ",(0,s.jsx)(e.code,{children:"inputs_extraction_job_id"})," returned after running the extraction job."]}),"\n",(0,s.jsxs)(o.A,{groupId:"code",children:[(0,s.jsx)(r.A,{value:"python",label:"Python (gRPC)",children:(0,s.jsx)(c.A,{className:"language-python",children:bn})}),(0,s.jsx)(r.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:Un})}),(0,s.jsx)(r.A,{value:"nodejs",label:"Node.js (gRPC)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:On})}),(0,s.jsx)(r.A,{value:"java",label:"Java (gRPC)",children:(0,s.jsx)(c.A,{className:"language-java",children:wn})}),(0,s.jsx)(r.A,{value:"php",label:"PHP (gRPC)",children:(0,s.jsx)(c.A,{className:"language-php",children:jn})}),(0,s.jsx)(r.A,{value:"curl",label:"cURL",children:(0,s.jsx)(c.A,{className:"language-bash",children:xn})})]}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{children:"Output Example"}),(0,s.jsx)(c.A,{className:"language-javascript",children:Vn})]}),"\n",(0,s.jsx)(e.h3,{id:"list-inputs-extraction-jobs",children:"List Inputs Extraction Jobs"}),"\n",(0,s.jsx)(e.p,{children:"You can list all your inputs extraction jobs and get their details."}),"\n",(0,s.jsxs)(o.A,{groupId:"code",children:[(0,s.jsx)(r.A,{value:"python",label:"Python (gRPC)",children:(0,s.jsx)(c.A,{className:"language-python",children:Nn})}),(0,s.jsx)(r.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:yn})}),(0,s.jsx)(r.A,{value:"nodejs",label:"Node.js (gRPC)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:vn})}),(0,s.jsx)(r.A,{value:"java",label:"Java (gRPC)",children:(0,s.jsx)(c.A,{className:"language-java",children:Hn})}),(0,s.jsx)(r.A,{value:"php",label:"PHP (gRPC)",children:(0,s.jsx)(c.A,{className:"language-php",children:Yn})}),(0,s.jsx)(r.A,{value:"curl",label:"cURL",children:(0,s.jsx)(c.A,{className:"language-bash",children:Ln})})]}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{children:"Output Example"}),(0,s.jsx)(c.A,{className:"language-javascript",children:Zn})]}),"\n",(0,s.jsx)(e.h3,{id:"cancel-extraction-jobs",children:"Cancel Extraction Jobs"}),"\n",(0,s.jsxs)(e.p,{children:["You can cancel the process of extraction of inputs from a cloud storage service. Note that we\u2019ll use the ",(0,s.jsx)(e.code,{children:"inputs_extraction_job_id"})," returned after starting the extraction process."]}),"\n",(0,s.jsxs)(o.A,{groupId:"code",children:[(0,s.jsx)(r.A,{value:"python",label:"Python (gRPC)",children:(0,s.jsx)(c.A,{className:"language-python",children:Bn})}),(0,s.jsx)(r.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:Gn})}),(0,s.jsx)(r.A,{value:"nodejs",label:"Node.js (gRPC)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:Mn})}),(0,s.jsx)(r.A,{value:"java",label:"Java (gRPC)",children:(0,s.jsx)(c.A,{className:"language-java",children:kn})}),(0,s.jsx)(r.A,{value:"php",label:"PHP (gRPC)",children:(0,s.jsx)(c.A,{className:"language-php",children:$n})}),(0,s.jsx)(r.A,{value:"curl",label:"cURL",children:(0,s.jsx)(c.A,{className:"language-bash",children:Jn})})]}),"\n",(0,s.jsx)(e.h3,{id:"upload-inputs-with-concepts-and-datasets",children:"Upload Inputs With Concepts and Datasets"}),"\n",(0,s.jsxs)(e.p,{children:["You can also add inputs from cloud storage platforms while attaching relevant concepts, assigning them to an already existing ",(0,s.jsx)(e.a,{href:"https://docs.clarifai.com/api-guide/data/datasets/dataset-basics",children:"dataset"}),", or adding other metadata information to them."]}),"\n",(0,s.jsxs)(e.p,{children:["The ",(0,s.jsx)(e.code,{children:"input_template"})," parameter allows you to do that."]}),"\n",(0,s.jsxs)(o.A,{groupId:"code",children:[(0,s.jsx)(r.A,{value:"python",label:"Python (gRPC)",children:(0,s.jsx)(c.A,{className:"language-python",children:qn})}),(0,s.jsx)(r.A,{value:"js_rest",label:"JavaScript (REST)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:Wn})}),(0,s.jsx)(r.A,{value:"nodejs",label:"Node.js (gRPC)",children:(0,s.jsx)(c.A,{className:"language-javascript",children:Kn})}),(0,s.jsx)(r.A,{value:"java",label:"Java (gRPC)",children:(0,s.jsx)(c.A,{className:"language-java",children:zn})}),(0,s.jsx)(r.A,{value:"php",label:"PHP (gRPC)",children:(0,s.jsx)(c.A,{className:"language-php",children:Fn})}),(0,s.jsx)(r.A,{value:"curl",label:"cURL",children:(0,s.jsx)(c.A,{className:"language-bash",children:Qn})})]}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{children:"Output Example"}),(0,s.jsx)(c.A,{className:"language-javascript",children:ne})]})]})}function oe(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(ie,{...n})}):ie(n)}}}]);
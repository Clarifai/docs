"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[9971],{19365:(e,t,n)=>{n.d(t,{A:()=>s});var a=n(96540),r=n(20053);const i={tabItem:"tabItem_Ymn6"};function s(e){let{children:t,hidden:n,className:s}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.A)(i.tabItem,s),hidden:n},t)}},11470:(e,t,n)=>{n.d(t,{A:()=>w});var a=n(58168),r=n(96540),i=n(20053),s=n(23104),o=n(56347),l=n(57485),p=n(31682),u=n(89466);function c(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function h(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??c(n);return function(e){const t=(0,p.X)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function d(e){let{queryString:t=!1,groupId:n}=e;const a=(0,o.W6)(),i=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,l.aZ)(i),(0,r.useCallback)((e=>{if(!i)return;const t=new URLSearchParams(a.location.search);t.set(i,e),a.replace({...a.location,search:t.toString()})}),[i,a])]}function g(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,i=h(e),[s,o]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:i}))),[l,p]=d({queryString:n,groupId:a}),[c,g]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,i]=(0,u.Dv)(n);return[a,(0,r.useCallback)((e=>{n&&i.set(e)}),[n,i])]}({groupId:a}),f=(()=>{const e=l??c;return m({value:e,tabValues:i})?e:null})();(0,r.useLayoutEffect)((()=>{f&&o(f)}),[f]);return{selectedValue:s,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);o(e),p(e),g(e)}),[p,g,i]),tabValues:i}}var f=n(92303);const I={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function y(e){let{className:t,block:n,selectedValue:o,selectValue:l,tabValues:p}=e;const u=[],{blockElementScrollPositionUntilNextRender:c}=(0,s.a_)(),h=e=>{const t=e.currentTarget,n=u.indexOf(t),a=p[n].value;a!==o&&(c(t),l(a))},m=e=>{let t=null;switch(e.key){case"Enter":h(e);break;case"ArrowRight":{const n=u.indexOf(e.currentTarget)+1;t=u[n]??u[0];break}case"ArrowLeft":{const n=u.indexOf(e.currentTarget)-1;t=u[n]??u[u.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.A)("tabs",{"tabs--block":n},t)},p.map((e=>{let{value:t,label:n,attributes:s}=e;return r.createElement("li",(0,a.A)({role:"tab",tabIndex:o===t?0:-1,"aria-selected":o===t,key:t,ref:e=>u.push(e),onKeyDown:m,onClick:h},s,{className:(0,i.A)("tabs__item",I.tabItem,s?.className,{"tabs__item--active":o===t})}),n??t)})))}function b(e){let{lazy:t,children:n,selectedValue:a}=e;const i=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=i.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},i.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function k(e){const t=g(e);return r.createElement("div",{className:(0,i.A)("tabs-container",I.tabList)},r.createElement(y,(0,a.A)({},e,t)),r.createElement(b,(0,a.A)({},e,t)))}function w(e){const t=(0,f.A)();return r.createElement(k,(0,a.A)({key:String(t)},e))}},95336:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>I,contentTitle:()=>g,default:()=>w,frontMatter:()=>d,metadata:()=>f,toc:()=>y});var a=n(58168),r=(n(96540),n(15680)),i=n(11470),s=n(19365),o=n(77964);const l='from clarifai.client.user import User  # Importing the User class from the Clarifai client library for user-related functionalities\nfrom PIL import Image  # Importing the Image module from the Python Imaging Library (PIL) for image processing\nimport requests  # Importing the requests library to handle HTTP requests\nfrom IPython.display import display  # Importing the display function from IPython.display module for displaying images in IPython\n\nUSER_ID=\'\'  # Placeholder for user ID\nAPP_ID=\'\'  # Placeholder for application ID\nPAT=\'\'  # Placeholder for personal access token (PAT)\n\n# Initialize the User object with user ID and PAT\nclient = User(user_id=USER_ID, pat=PAT)\n\n# Create a new application with specified ID and base workflow\napp = client.create_app(app_id=APP_ID, base_workflow="Universal", pat=PAT)\n\n# List of image URLs to be uploaded\nurls = [\n    "https://images.pexels.com/photos/139257/pexels-photo-139257.jpeg",\n    "https://images.pexels.com/photos/1879386/pexels-photo-1879386.jpeg",\n    "https://images.pexels.com/photos/1071882/pexels-photo-1071882.jpeg"\n]\n\ninput_obj = app.inputs()  # Initialize Inputs object to manage input data\n\n# Upload images from URLs to the application\nfor i, url in enumerate(urls):\n    input_obj.upload_from_url(input_id=f"input{i}", image_url=url)\n\n# Initialize the search functionality for the application with top_k parameter set to 1\nsearch = app.search(top_k=1)\n\n# Perform a search query with a specified text rank\nresponse = search.query(ranks=[{"text_raw": "Red pineapples on the beach."}])\n\n# Extract the URL of the first hit from the search response\nfor r in response:\n    hit = r.hits[0].input.data.image.url\n    break\n\n# Print the URL of the hit image\nprint(hit)\n\n# Open the hit image from URL, resize it, and display it\nhit_img = Image.open(requests.get(hit, stream=True).raw).resize((300,250))\ndisplay(hit_img)\n',p='import { User, Input, Search } from "clarifai-nodejs"; // Importing the User class from the Clarifai client library for user-related functionalities\n\n\nconst appId = "test_app"; // Placeholder for application ID\n\n// Initialize the User object with user ID and PAT\nconst client = new User({\n  userId: process.env.CLARIFAI_USER_ID,\n  pat: process.env.CLARIFAI_PAT,\n  appId,\n});\n\n// Create a new application with specified ID and base workflow\nawait client.createApp({ appId, baseWorkflow: "Universal" });\n\n// List of image URLs to be uploaded\nconst urls = [\n  "https://images.pexels.com/photos/139257/pexels-photo-139257.jpeg",\n  "https://images.pexels.com/photos/1879386/pexels-photo-1879386.jpeg",\n  "https://images.pexels.com/photos/1071882/pexels-photo-1071882.jpeg",\n];\n\n// Initialize Inputs object to manage input data\nconst input = new Input({\n  authConfig: {\n    userId: process.env.CLARIFAI_USER_ID,\n    pat: process.env.CLARIFAI_PAT,\n    appId,\n  },\n});\n\n// Upload images from URLs to the application\nfor (let i = 0; i < urls.length; i++) {\n  await input.uploadFromUrl({ inputId: `input${i}`, imageUrl: urls[i] });\n}\n\n// Initialize the search functionality for the application with topK parameter set to 1\nconst search = new Search({\n  authConfig: {\n    userId: process.env.CLARIFAI_USER_ID,\n    pat: process.env.CLARIFAI_PAT,\n    appId,\n  },\n  topK: 1,\n  metric: "euclidean",\n});\n\n// Perform a search query with a specified text rank\nconst response = search.query({\n  ranks: [{ textRaw: "Red pineapples on the beach." }],\n});\n\n// Extract the URL of the first hit from the search response\nlet hit;\nfor await (const r of response) {\n  hit = r?.hitsList?.[0]?.input?.data?.image?.url;\n  break;\n}\n\n// Print the URL of the hit image\nconsole.log(hit);\n',u="from clarifai.client.user import User\nfrom PIL import Image\nimport requests\nfrom IPython.display import display\n\n# Replace these variables with your actual user ID, app ID, and PAT (Personal Access Token)\nUSER_ID = ''\nAPP_ID = ''\nPAT = ''\n\n# Initialize a User object with the provided user ID and PAT\nclient = User(user_id=USER_ID, pat=PAT)\n\n# Create an application with the provided app ID, using the Universal workflow\n# The PAT is also provided for authentication\napp = client.create_app(app_id=APP_ID, base_workflow=\"Universal\", pat=PAT)\n\n# URLs of the images to be uploaded and searched\nurls = [\n    \"https://images.pexels.com/photos/139257/pexels-photo-139257.jpeg\",\n    \"https://images.pexels.com/photos/1879386/pexels-photo-1879386.jpeg\",\n    \"https://images.pexels.com/photos/1071882/pexels-photo-1071882.jpeg\"\n]\n\n# Initialize an Inputs object to manage input data\ninput_obj = app.inputs()\n\n# Initialize a Search object to perform searches\n# Limit the number of returned results to 2 (top_k=2)\nsearch = app.search(top_k=2)\n\n# Upload each image from the provided URLs\nfor i, url in enumerate(urls):\n    input_obj.upload_from_url(input_id=f\"input{i}\", image_url=url)\n\n# Perform a search with a specified rank (image URL)\nres = search.query(ranks=[{'image_url': 'https://images.pexels.com/photos/139257/pexels-photo-139257.jpeg'}])\n\n# Extract the URL of the first hit from the search results\nfor r in res:\n    hit = r.hits[0].input.data.image.url\n    break\n\n# Print the URL of the hit image\nprint(hit)\n\n# Open the hit image using PIL, resize it, and display it\nhit_img = Image.open(requests.get(hit, stream=True).raw).resize((300, 250))\ndisplay(hit_img)",c='import { User, Input, Search } from "clarifai-nodejs";\n\nconst appId = "test_app"; // Placeholder for application ID\n\n// Initialize a User object with the provided user ID and PAT\nconst client = new User({\n  userId: process.env.CLARIFAI_USER_ID,\n  pat: process.env.CLARIFAI_PAT,\n  appId,\n});\n\n// Create an application with the provided app ID, using the Universal workflow\nawait client.createApp({ appId, baseWorkflow: "Universal" });\n\n// URLs of the images to be uploaded and searched\nconst urls = [\n  "https://images.pexels.com/photos/139257/pexels-photo-139257.jpeg",\n  "https://images.pexels.com/photos/1879386/pexels-photo-1879386.jpeg",\n  "https://images.pexels.com/photos/1071882/pexels-photo-1071882.jpeg",\n];\n\n// Initialize an Inputs object to manage input data\nconst input = new Input({\n  authConfig: {\n    userId: process.env.CLARIFAI_USER_ID,\n    pat: process.env.CLARIFAI_PAT,\n    appId,\n  },\n});\n\n// Upload each image from the provided URLs\nfor (let i = 0; i < urls.length; i++) {\n  await input.uploadFromUrl({ inputId: `input${i}`, imageUrl: urls[i] });\n}\n\n// Initialize a Search object to perform searches\n// Limit the number of returned results to 2 (topK=2)\nconst search = new Search({\n  authConfig: {\n    userId: process.env.CLARIFAI_USER_ID,\n    pat: process.env.CLARIFAI_PAT,\n    appId,\n  },\n  topK: 2,\n  metric: "euclidean",\n});\n\n// Perform a search with a specified rank (image URL)\nconst res = search.query({\n  ranks: [\n    {\n      imageUrl:\n        "https://images.pexels.com/photos/139257/pexels-photo-139257.jpeg",\n    },\n  ],\n});\n\n// Extract the URL of the first hit from the search results\nlet hit;\nfor await (const r of res) {\n  hit = r.hitsList?.[0]?.input?.data?.image?.url;\n  break;\n}\n\n// Print the URL of the hit image\nconsole.log(hit);\n',h="https://images.pexels.com/photos/139257/pexels-photo-139257.jpeg",m="https://samples.clarifai.com/XiJinping.jpg",d={sidebar_position:1,description:"Learn how to perform Rank Search"},g="Ranks",f={unversionedId:"sdk/Search/Ranks",id:"sdk/Search/Ranks",title:"Ranks",description:"Learn how to perform Rank Search",source:"@site/docs/sdk/Search/Ranks.md",sourceDirName:"sdk/Search",slug:"/sdk/Search/Ranks",permalink:"/sdk/Search/Ranks",draft:!1,editUrl:"https://github.com/Clarifai/docs/blob/main/docs/sdk/Search/Ranks.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,description:"Learn how to perform Rank Search"},sidebar:"tutorialSidebar",previous:{title:"Search",permalink:"/sdk/Search/"},next:{title:"Filter",permalink:"/sdk/Search/Filter"}},I={},y=[{value:"Rank with Text",id:"rank-with-text",level:2},{value:"Rank with Image URL",id:"rank-with-image-url",level:2}],b={toc:y},k="wrapper";function w(e){let{components:t,...n}=e;return(0,r.yg)(k,(0,a.A)({},b,n,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"ranks"},"Ranks"),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Learn how to perform search with ranks using Clarifai Python SDK")),(0,r.yg)("hr",null),(0,r.yg)("p",null,"The rank feature in Clarifai allows users to specify criteria for prioritizing search results based on relevance or similarity to a reference. In the provided example, it conducts a vector search over inputs, comparing their features to those of a reference image specified by its URL. The search results are then ranked based on their similarity to the reference using the cosine metric."),(0,r.yg)("p",null,"Click ",(0,r.yg)("a",{parentName:"p",href:"https://docs.clarifai.com/api-guide/search/rank"},"here")," to know more about Rank search."),(0,r.yg)("h2",{id:"rank-with-text"},"Rank with Text"),(0,r.yg)("p",null,"By incorporating text-based ranking, users can enhance the relevance and specificity of search results, ensuring that items closely aligned with specified textual criteria appear higher in the ranked list. "),(0,r.yg)(i.A,{mdxType:"Tabs"},(0,r.yg)(s.A,{value:"python",label:"Python",mdxType:"TabItem"},(0,r.yg)(o.A,{className:"language-python",mdxType:"CodeBlock"},l),(0,r.yg)("details",null,(0,r.yg)("summary",null,"Output"),(0,r.yg)(o.A,{className:"language-text",mdxType:"CodeBlock"},h),(0,r.yg)("img",{src:"/img/python-sdk/rk_text.png",width:"700",height:"700"}))),(0,r.yg)(s.A,{value:"typescript",label:"Typescript",mdxType:"TabItem"},(0,r.yg)(o.A,{className:"language-typescript",mdxType:"CodeBlock"},p))),(0,r.yg)("h2",{id:"rank-with-image-url"},"Rank with Image URL"),(0,r.yg)("p",null,"Ranking with image URL in Clarifai allows users to prioritize search results based on the similarity or relevance of images specified by their URLs."),(0,r.yg)(i.A,{mdxType:"Tabs"},(0,r.yg)(s.A,{value:"python",label:"Python",mdxType:"TabItem"},(0,r.yg)(o.A,{className:"language-python",mdxType:"CodeBlock"},u),(0,r.yg)("details",null,(0,r.yg)("summary",null,"Output"),(0,r.yg)(o.A,{className:"language-text",mdxType:"CodeBlock"},m),(0,r.yg)("img",{src:"/img/python-sdk/rk_imurl.png",width:"700",height:"700"}))),(0,r.yg)(s.A,{value:"typescript",label:"Typescript",mdxType:"TabItem"},(0,r.yg)(o.A,{className:"language-typescript",mdxType:"CodeBlock"},c))))}w.isMDXComponent=!0}}]);
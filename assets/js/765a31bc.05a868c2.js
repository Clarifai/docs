"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[3787],{3905:function(e,t,a){a.d(t,{Zo:function(){return p},kt:function(){return m}});var n=a(7294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function d(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var s=n.createContext({}),l=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=l(e.components);return n.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,p=d(e,["components","mdxType","originalType","parentName"]),u=l(a),m=o,h=u["".concat(s,".").concat(m)]||u[m]||c[m]||r;return a?n.createElement(h,i(i({ref:t},p),{},{components:a})):n.createElement(h,i({ref:t},p))}));function m(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=a.length,i=new Array(r);i[0]=u;var d={};for(var s in t)hasOwnProperty.call(t,s)&&(d[s]=t[s]);d.originalType=e,d.mdxType="string"==typeof e?e:o,i[1]=d;for(var l=2;l<r;l++)i[l]=a[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},11:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return d},contentTitle:function(){return s},metadata:function(){return l},toc:function(){return p},default:function(){return u}});var n=a(7462),o=a(3366),r=(a(7294),a(3905)),i=["components"],d={sidebar_position:1},s="Upcoming API Changes",l={unversionedId:"product-updates/upcoming-api-changes",id:"product-updates/upcoming-api-changes",title:"Upcoming API Changes",description:"Here is a list of changes to the API that we want you to be aware of well in advance as they may affect how you use Clarifai's platform. These changes include scheduled downtime and other improvements in stability, performance or functionality of the Clarifai platform in order to better serve you as a customer. Some of these changes may not be backward compatible and thus require you to update how you call our APIs. We created this page with the mindset of being as transparent as possible so you can plan any corresponding changes in advance and minimize any interruptions to your usage of Clarifai.",source:"@site/docs/product-updates/upcoming-api-changes.md",sourceDirName:"product-updates",slug:"/product-updates/upcoming-api-changes",permalink:"/product-updates/upcoming-api-changes",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/product-updates/upcoming-api-changes.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Scribe LabelForce",permalink:"/data-labeling-services/labeling-services"},next:{title:"Changelog",permalink:"/product-updates/changelog"}},p=[{value:"Upcoming Changes",id:"upcoming-changes",children:[],level:2},{value:"Completed Changes",id:"completed-changes",children:[],level:2}],c={toc:p};function u(e){var t=e.components,a=(0,o.Z)(e,i);return(0,r.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"upcoming-api-changes"},"Upcoming API Changes"),(0,r.kt)("p",null,"Here is a list of changes to the API that we want you to be aware of well in advance as they may affect how you use Clarifai's platform. These changes include scheduled downtime and other improvements in stability, performance or functionality of the Clarifai platform in order to better serve you as a customer. Some of these changes may not be backward compatible and thus require you to update how you call our APIs. We created this page with the mindset of being as transparent as possible so you can plan any corresponding changes in advance and minimize any interruptions to your usage of Clarifai."),(0,r.kt)("p",null,"The dates listed in the following tables are the date we plan to make the change. We may actually make the change in the days following the specified date. However, to be safe, your client-side code needs updating before that date to minimize any downtime to your applications."),(0,r.kt)("p",null,"We will continue to update this page regularly, so a good way to always stay up to date is to watch our ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/Clarifai/docs"},"documentation repo on GitHub"),"."),(0,r.kt)("h2",{id:"upcoming-changes"},"Upcoming Changes"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Date"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Change"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"January 20, 2022"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("strong",{parentName:"td"},"Deprecation of ",(0,r.kt)("inlineCode",{parentName:"strong"},"name")," and ",(0,r.kt)("inlineCode",{parentName:"strong"},"display_name")),"  To make Clarifai Model IDs more readable and user friendly, we plan to make the following API/UI changes during the week of Jan 17th. Please see user impact and suggestions below and contact ",(0,r.kt)("a",{parentName:"td",href:"mailto:support@clarifai.com"},"support@clarifai.com")," if you have any questions. ",(0,r.kt)("br",null),(0,r.kt)("br",null)," The old ",(0,r.kt)("inlineCode",{parentName:"td"},"user_unique_id")," will still be usable in all queries, but the responses will be filled with the new ",(0,r.kt)("inlineCode",{parentName:"td"},"v2_user_unique_id"),". ",(0,r.kt)("inlineCode",{parentName:"td"},"name")," and ",(0,r.kt)("inlineCode",{parentName:"td"},"display_name")," are deprecated in the API and UI, and ",(0,r.kt)("inlineCode",{parentName:"td"},"user_unique_id")," will soon be deprecated as well so users are suggested to use new model id field ",(0,r.kt)("inlineCode",{parentName:"td"},"v2_user_unique_id"),".")))),(0,r.kt)("h2",{id:"completed-changes"},"Completed Changes"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Date"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Change"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"November 24, 2021. 9:00am ET"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("strong",{parentName:"td"},"Deprecation of type option")," The ",(0,r.kt)("inlineCode",{parentName:"td"},"type")," option in POST /models and /models/searches reuest will no longer be supported and will be removed from our API after this point in time. ",(0,r.kt)("inlineCode",{parentName:"td"},"model_type_id")," is in use for model type references.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"February 12, 2021. 9:00am ET"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("strong",{parentName:"td"},"Deprecation of delete","_","all option"),"  The ",(0,r.kt)("inlineCode",{parentName:"td"},"delete_all")," option in DELETE /inputs request will no longer be supported and will be removed from our API after this point in time. You can delete inputs by id. Each request can have at most 128 ids.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"October 16, 2020. 9:00am ET"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("strong",{parentName:"td"},"Deprecation of Demographics Model"),"  To reduce the risk of race bias in our own models, we have constructed a new approach to visual recognition of race. We've also divided age, race and gender recognition into separate models, and then packaged the models into a new public Demographics Workflow. This new approach provides much more flexibility, and makes outputs easier to parse. We will be retiring the current demographics model on October 16th, 2020. Please reference this ",(0,r.kt)("a",{parentName:"td",href:"https://www.clarifai.com/blog/new-demographics-workflow"},"blog post"),", and our ",(0,r.kt)("a",{parentName:"td",href:"https://docs.clarifai.com/api-guide/api-overview"},"API documentation")," for more information about how you can update your code to take advantage of the new workflow.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"October 20, 2020. 9:00am ET"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("strong",{parentName:"td"},"Model Training Do Not Wait For Inputs To Be Processed"),"  Currently, when we train a context-based classifier model, we wait for all inputs to be added to your app before a model version is created and processed, with a 1 hour training timeout. In the future, we will use any available inputs and annotations that are available at the time a model version is created for training. If the input is pending or in progress, those inputs and associated annotations will not be used for training. You can use ",(0,r.kt)("a",{parentName:"td",href:"https://api.clarifai.com/v2/inputs/status"},"https://api.clarifai.com/v2/inputs/status")," to check input counts for each status.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"February 27, 2020. 9:00am ET"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/product-updates/upcoming-api-changes#deprecation-face-from-api"},(0,r.kt)("strong",{parentName:"a"},"Deprecation of Face object from API")),"  The Face object in our API responses will be deprecated in favor of a list of Concepts that other model types return. This should only effect users of the Celebrity, Demographics, or custom face recognition models where the ",(0,r.kt)("inlineCode",{parentName:"td"},"data.face")," attributes like ",(0,r.kt)("inlineCode",{parentName:"td"},"data.face.identity"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"data.face.age_appearance"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"data.face.gender_appearance"),", and ",(0,r.kt)("inlineCode",{parentName:"td"},"data.face.multicultural_appearance")," will now be returned in the list of ",(0,r.kt)("inlineCode",{parentName:"td"},"data.concepts")," Concept object. The API will return both for a while during the transition to give you time to update your code away from using the ",(0,r.kt)("inlineCode",{parentName:"td"},"data.face")," objects altogether. We are doing this to simplify the API interface and make it more easily compatible for advanced functionality that is coming soon in workflows! The custom face recognition and celebrity models are a simple change to just access the new ",(0,r.kt)("inlineCode",{parentName:"td"},"data.concepts")," field, but the demographics model is a more fundamental change away from having three distinct lists of concept to a single list. In order to cope with this, we have introduced a ",(0,r.kt)("inlineCode",{parentName:"td"},"vocab_id")," field in each ",(0,r.kt)("inlineCode",{parentName:"td"},"data.concepts")," entry that is returned by the demographics model so that you can distinguish ",(0,r.kt)("inlineCode",{parentName:"td"},"age_appearance"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"gender_appearance")," and ",(0,r.kt)("inlineCode",{parentName:"td"},"multicultural_appearance"),".To convert new format to old format, check python example ",(0,r.kt)("a",{parentName:"td",href:"https://github.com/Clarifai/docs/tree/master/examples/deprecate_face_object"},"here."),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"February 24, 2020. 9:00am ET"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("strong",{parentName:"td"},"[","Consolidation of Input Related Status Codes"),"   As we support more media types, it is impractical to have status codes for each. Thus status codes will now be prefixed ",(0,r.kt)("inlineCode",{parentName:"td"},"INPUT_...")," rather than ",(0,r.kt)("inlineCode",{parentName:"td"},"INPUT_IMAGE_...")," or ",(0,r.kt)("inlineCode",{parentName:"td"},"INPUT_VIDEO_..."),". We will maintain the int value for the ",(0,r.kt)("inlineCode",{parentName:"td"},"INPUT_IMAGE_...")," prefixed statuses, but no longer support the int values associated with statuses prefixed ",(0,r.kt)("inlineCode",{parentName:"td"},"INPUT_VIDEO..."),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"February 12, 2020. 9:00am ET"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("strong",{parentName:"td"},"Deprecation of Face model type names"),"  The ",(0,r.kt)("inlineCode",{parentName:"td"},"facedetect*")," model types will be deprecated in favor of their more general ",(0,r.kt)("inlineCode",{parentName:"td"},"detect*")," counterparts. For example these would be the changes of model type: ",(0,r.kt)("inlineCode",{parentName:"td"},"facedetect")," -",">"," ",(0,r.kt)("inlineCode",{parentName:"td"},"detect")," ",(0,r.kt)("inlineCode",{parentName:"td"},"facedetect-identity")," -",">"," ",(0,r.kt)("inlineCode",{parentName:"td"},"detect-concept")," ",(0,r.kt)("inlineCode",{parentName:"td"},"facedetect-demographics")," -",">"," ",(0,r.kt)("inlineCode",{parentName:"td"},"detect-concept")," ",(0,r.kt)("inlineCode",{parentName:"td"},"facedetect-embed")," -",">"," ",(0,r.kt)("inlineCode",{parentName:"td"},"detect-embed")," This change is to unify the APIs around face products and object detection products so that they are compatible everywhere either is used.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"February 3, 2020. 9:00am ET"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"PATCH /inputs")," overwrite action change"),"  The overwrite action when patching inputs currently has some inconsistent behavior. If you patch ",(0,r.kt)("inlineCode",{parentName:"td"},"input.data.metadata")," or ",(0,r.kt)("inlineCode",{parentName:"td"},"input.data.geo")," fields on an input that has ",(0,r.kt)("inlineCode",{parentName:"td"},"input.data.concepts")," already added to it, these concepts will remain after the patch even though the patch action was ",(0,r.kt)("inlineCode",{parentName:"td"},"overwrite"),".  Going forward, the overwrite behavior will overwrite the entire ",(0,r.kt)("inlineCode",{parentName:"td"},"data")," object with what is included in the ",(0,r.kt)("inlineCode",{parentName:"td"},"PATCH /inputs")," API call. Therefore if concepts are not provided in the patch call, but were originally on that input, they will be erased ","(","overwritten with an empty list of concepts",")",". You can maintain the current behvaiour by always sending back the complete ",(0,r.kt)("inlineCode",{parentName:"td"},"data")," object from ",(0,r.kt)("inlineCode",{parentName:"td"},"GET /input/{input_id}")," along with any modification to it if you are using the ",(0,r.kt)("inlineCode",{parentName:"td"},"overwrite")," action.   Update: this change has become more complicated than originally expected and we may not undergo it after all, more to come in future. Still a good idea to update your PATCH calls to use the ",(0,r.kt)("inlineCode",{parentName:"td"},"merge")," or ",(0,r.kt)("inlineCode",{parentName:"td"},"remove")," actions instead of ",(0,r.kt)("inlineCode",{parentName:"td"},"overwrite")," due to ",(0,r.kt)("inlineCode",{parentName:"td"},"overwrite"),"'s inconsistency.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"February 1, 2020. 9:00am ET"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("strong",{parentName:"td"},"Deprecation of Focus Model"),"  The Focus model will no longer be supported and will be removed from our API after this point in time. If you have requests for recognizing focus and blurry regions within images please contact ",(0,r.kt)("a",{parentName:"td",href:"mailto:sales@clarifai.com"},"sales@clarifai.com")," so that we can help you directly.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"November 20, 2019. 9:00am ET"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"image.crop")," argument will be deprecated"),"  In some requests we used to allow cropping of images during the request using the ",(0,r.kt)("inlineCode",{parentName:"td"},"image.crop")," field. This was for convenience only, but in reality is was rarely ever used and significantly complicates the processing pipelines under the hood. Therefore, we will no longer support the ",(0,r.kt)("inlineCode",{parentName:"td"},"image.crop")," field in any requests that used to accept it.   If you want to have similar behavior please crop the images on the client side and send the cropped bytes as base64 encoded image data.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"September 30, 2019. 5:00pm ET"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"DELETE /inputs")," will only operate asynchronously"),"  Along the same lines as ",(0,r.kt)("inlineCode",{parentName:"td"},"POST /inputs")," becoming completely asynchronous, we are cleaning up some inconsistent behavior in the API for deleting inputs. Previously, when a single image is deleted with ",(0,r.kt)("inlineCode",{parentName:"td"},"DELETE /inputs")," or ",(0,r.kt)("inlineCode",{parentName:"td"},"DELETE /inputs/{input_id}")," it was a synchronous operation, but when a batch of images were deleted it was asynchronous. We are making both asynchronous. This allows us to provide more advanced functionality with workflows that index your inputs.  What this means for your code is if you application relies on the input having been deleted when the ",(0,r.kt)("inlineCode",{parentName:"td"},"DELETE /inputs")," or ",(0,r.kt)("inlineCode",{parentName:"td"},"DELETE /inputs/{input_id}")," calls return, you now need to add a second call to ",(0,r.kt)("inlineCode",{parentName:"td"},"GET /inputs/{input_id}")," in order to check that it fails with a not found error.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"September 24, 2019. 5:00pm ET"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"POST /inputs")," will only operate asynchronously"),"  We are cleaning up some inconsistent behavior in the API where a single image added with ",(0,r.kt)("inlineCode",{parentName:"td"},"POST /inputs")," was a synchronous operation, but a batch of images was asynchronous. We are making both asynchronous. This allows us to provide more advanced functionality with workflows that index your inputs.  What this means for your code is if you application relies on added inputs having already been indexed when the ",(0,r.kt)("inlineCode",{parentName:"td"},"POST /inputs")," call returns, you now need to add a second call to ",(0,r.kt)("inlineCode",{parentName:"td"},"GET /inputs/{input_id}")," in order to check the status of the input you just added to look for 30000 ","(","INPUT","_","IMAGE","_","DOWNLOAD","_","SUCCESS",")"," status code.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"September 11, 2019. 9:00am ET"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("strong",{parentName:"td"},"Scheduled Database Downtime"),"  We plan to upgrade our database to make it faster and provide more space for your applications. We expect a few minutes of downtime during this upgrade but you should plan for up to an hour of downtime in case things don't go as expected. This will primarily affect the following uses of our platform: POST/GET/PATCH/DELETE inputs, Search, Custom Training, Model Evaluation")))))}u.isMDXComponent=!0}}]);